#include "AstCppGen.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			using namespace collections;
			using namespace stream;

/***********************************************************************
Utility
***********************************************************************/

			void WriteFileComment(const WString& name, stream::StreamWriter& writer)
			{
				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"This file is generated by: Vczh Parser Generator");
				writer.WriteLine(L"From parser definition:" + name);
				writer.WriteLine(L"Licensed under https://github.com/vczh-libraries/License");
				writer.WriteLine(L"***********************************************************************/");
				writer.WriteLine(L"");
			}

			WString WriteFileBegin(AstDefFile* file, const WString& includeFile, stream::StreamWriter& writer)
			{
				for (auto include : file->includes)
				{
					writer.WriteLine(L"#include \"" + include + L"\"");
				}
				if (includeFile != L"")
				{
					writer.WriteLine(L"#include \"" + file->filePrefix + includeFile + L".h\"");
				}
				writer.WriteLine(L"");
				WString prefix;
				for (auto ns : file->cppNss)
				{
					writer.WriteLine(prefix + L"namespace " + ns);
					writer.WriteLine(prefix + L"{");
					prefix += L"\t";
				}
				return prefix;
			}

			void WriteFileEnd(AstDefFile* file, stream::StreamWriter& writer)
			{
				vint counter = file->cppNss.Count();
				for (auto ns : file->cppNss)
				{
					counter--;
					for (vint i = 0; i < counter; i++) writer.WriteChar(L'\t');
					writer.WriteLine(L"}");
				}
			}

/***********************************************************************
WriteAstHeaderFile
***********************************************************************/

			void WriteAstHeaderFile(AstDefFile* file, stream::StreamWriter& writer)
			{
				WriteFileComment(file->Name(), writer);
				if (file->headerGuard != L"")
				{
					writer.WriteString(L"#ifndef ");
					writer.WriteLine(file->headerGuard + L"_AST");
					writer.WriteString(L"#define ");
					writer.WriteLine(file->headerGuard + L"_AST");
					writer.WriteLine(L"");
				}
				WString prefix = WriteFileBegin(file, L"", writer);

				//WriteTokenDefinition(table, prefix, config.classPrefix, writer);
				//WriteTypeForwardDefinitions(definition->types, prefix, 0, &manager, config.classPrefix, writer);
				//WriteTypeDefinitions(definition->types, prefix, 0, &manager, config.classPrefix, writer);

				WriteFileEnd(file, writer);

				writer.WriteLine(L"namespace vl");
				writer.WriteLine(L"{");
				writer.WriteLine(L"\tnamespace reflection");
				writer.WriteLine(L"\t{");
				writer.WriteLine(L"\t\tnamespace description");
				writer.WriteLine(L"\t\t{");
				//WriteTypeReflectionDeclaration(&manager, L"\t\t\t", config, writer);
				writer.WriteLine(L"\t\t}");
				writer.WriteLine(L"\t}");
				writer.WriteLine(L"}");

				if (file->headerGuard != L"")
				{
					writer.WriteString(L"#endif");
				}
			}

/***********************************************************************
WriteAstCppFile
***********************************************************************/

			void WriteAstCppFile(AstDefFile* file, stream::StreamWriter& writer)
			{
				WriteFileComment(file->Name(), writer);
				WString prefix = WriteFileBegin(file, file->Name(), writer);

				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"Visitor Pattern Implementation");
				writer.WriteLine(L"***********************************************************************/");
				writer.WriteLine(L"");
				//WriteVisitorImpl(&manager, prefix, config.classPrefix, writer);

				WriteFileEnd(file, writer);

				writer.WriteLine(L"namespace vl");
				writer.WriteLine(L"{");
				writer.WriteLine(L"\tnamespace reflection");
				writer.WriteLine(L"\t{");
				writer.WriteLine(L"\t\tnamespace description");
				writer.WriteLine(L"\t\t{");
				//WriteTypeReflectionImplementation(&manager, L"\t\t\t", config, writer);
				writer.WriteLine(L"\t\t}");
				writer.WriteLine(L"\t}");
				writer.WriteLine(L"}");
			}
		}
	}
}