/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:TypeAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "../AstBase.h"
#include "ParserGenTypeAst_Copy.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			namespace copy_visitor
			{
				void TypeAstVisitor::CopyFields(GlrClass* from, GlrClass* to)
				{
					CopyFields(static_cast<GlrType*>(from), static_cast<GlrType*>(to));
					for (auto&& listItem : from->props)
					{
						to->props.Add(CopyNode(listItem.Obj()));
					}
				}

				void TypeAstVisitor::CopyFields(GlrClassProp* from, GlrClassProp* to)
				{
					to->name = from->name;
					to->propType = from->propType;
					to->propTypeName = from->propTypeName;
				}

				void TypeAstVisitor::CopyFields(GlrEnum* from, GlrEnum* to)
				{
					CopyFields(static_cast<GlrType*>(from), static_cast<GlrType*>(to));
					for (auto&& listItem : from->items)
					{
						to->items.Add(CopyNode(listItem.Obj()));
					}
				}

				void TypeAstVisitor::CopyFields(GlrEnumItem* from, GlrEnumItem* to)
				{
					to->name = from->name;
				}

				void TypeAstVisitor::CopyFields(GlrFile* from, GlrFile* to)
				{
					to->name = from->name;
					for (auto&& listItem : from->types)
					{
						to->types.Add(CopyNode(listItem.Obj()));
					}
				}

				void TypeAstVisitor::CopyFields(GlrType* from, GlrType* to)
				{
					to->name = from->name;
				}

				void TypeAstVisitor::Visit(GlrEnum* node)
				{
					auto newNode = vl::MakePtr<GlrEnum>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void TypeAstVisitor::Visit(GlrClass* node)
				{
					auto newNode = vl::MakePtr<GlrClass>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				vl::Ptr<GlrEnumItem> TypeAstVisitor::CopyNode(GlrEnumItem* node)
				{
					auto newNode = vl::MakePtr<GlrEnumItem>();
					CopyFields(node, newNode.Obj());
					return newNode;
				}

				vl::Ptr<GlrClassProp> TypeAstVisitor::CopyNode(GlrClassProp* node)
				{
					auto newNode = vl::MakePtr<GlrClassProp>();
					CopyFields(node, newNode.Obj());
					return newNode;
				}

				vl::Ptr<GlrFile> TypeAstVisitor::CopyNode(GlrFile* node)
				{
					auto newNode = vl::MakePtr<GlrFile>();
					CopyFields(node, newNode.Obj());
					return newNode;
				}

				vl::Ptr<GlrType> TypeAstVisitor::CopyNode(GlrType* node)
				{
					node->Accept(static_cast<GlrType::IVisitor*>(this));
					return this->result.Cast<GlrType>();
				}

			}
		}
	}
}
