/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:TypeAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "../AstBase.h"
#include "ParserGenTypeAst_Json.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			namespace json_visitor
			{
				void TypeAstVisitor::PrintFields(GlrClass* from, GlrClass* to)
				{
					BeginField("Lprops");
					BeginArray();
					for (auto&& listItem : node->props)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void TypeAstVisitor::PrintFields(GlrClassProp* from, GlrClassProp* to)
				{
					BeginField("Lname");
					WriteToken(node->name);
					EndField();
					BeginField("LpropType");
					EndField();
					BeginField("LpropTypeName");
					WriteToken(node->propTypeName);
					EndField();
				}
				void TypeAstVisitor::PrintFields(GlrEnum* from, GlrEnum* to)
				{
					BeginField("Litems");
					BeginArray();
					for (auto&& listItem : node->items)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void TypeAstVisitor::PrintFields(GlrEnumItem* from, GlrEnumItem* to)
				{
					BeginField("Lname");
					WriteToken(node->name);
					EndField();
				}
				void TypeAstVisitor::PrintFields(GlrFile* from, GlrFile* to)
				{
					BeginField("Lname");
					WriteToken(node->name);
					EndField();
					BeginField("Ltypes");
					BeginArray();
					for (auto&& listItem : node->types)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void TypeAstVisitor::PrintFields(GlrType* from, GlrType* to)
				{
					BeginField("Lname");
					WriteToken(node->name);
					EndField();
				}

				void TypeAstVisitor::Visit(GlrEnum* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType("LEnum", node);
					PrintFields(static_cast<GlrType*>(node));
					PrintFields(static_cast<GlrEnum*>(node));
					EndObject();
				}

				void TypeAstVisitor::Visit(GlrClass* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType("LClass", node);
					PrintFields(static_cast<GlrType*>(node));
					PrintFields(static_cast<GlrClass*>(node));
					EndObject();
				}

				void TypeAstVisitor::InspectInto(GlrType* node)
				{
					if (!node) return;
					node->Accept(static_cast<GlrType::IVisitor*>(this));
				}

				void TypeAstVisitor::Print(GlrEnumItem* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType("LEnumItem", node);
					PrintFields(static_cast<GlrEnumItem*>(node));
					EndObject();
				}

				void TypeAstVisitor::Print(GlrClassProp* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType("LClassProp", node);
					PrintFields(static_cast<GlrClassProp*>(node));
					EndObject();
				}

				void TypeAstVisitor::Print(GlrFile* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType("LFile", node);
					PrintFields(static_cast<GlrFile*>(node));
					EndObject();
				}

			}
		}
	}
}
