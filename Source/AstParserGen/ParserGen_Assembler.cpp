/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Assembler.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{

/***********************************************************************
ParserGenAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

			vl::Ptr<vl::glr::ParsingAstBase> ParserGenAstInsReceiver::CreateAstNode(vl::vint32_t type)
			{
				switch((ParserGenClasses)type)
				{
				case ParserGenClasses::Class:
					return new vl::glr::parsergen::GlrClass();
				case ParserGenClasses::ClassProp:
					return new vl::glr::parsergen::GlrClassProp();
				case ParserGenClasses::Enum:
					return new vl::glr::parsergen::GlrEnum();
				case ParserGenClasses::EnumItem:
					return new vl::glr::parsergen::GlrEnumItem();
				case ParserGenClasses::File:
					return new vl::glr::parsergen::GlrFile();
				case ParserGenClasses::Type:
					throw vl::glr::AstInsException(L"Unable to create abstract class \"vl::glr::parsergen::GlrType\".", vl::glr::AstInsErrorType::UnknownType, type);
				default:
					throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
				}
			}

			void ParserGenAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
			{
				switch((ParserGenFields)field)
				{
				case ParserGenFields::Class_props:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrClass*>(object))
					{
						if (auto typedValue = value.Cast<vl::glr::parsergen::GlrClassProp>())
						{
							typedObject->props.Add(typedValue);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClass::props\" cannot be assigned with an uncompatible value.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClass::props\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::Enum_items:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrEnum*>(object))
					{
						if (auto typedValue = value.Cast<vl::glr::parsergen::GlrEnumItem>())
						{
							typedObject->items.Add(typedValue);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnum::items\" cannot be assigned with an uncompatible value.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnum::items\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::File_types:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrFile*>(object))
					{
						if (auto typedValue = value.Cast<vl::glr::parsergen::GlrType>())
						{
							typedObject->types.Add(typedValue);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::types\" cannot be assigned with an uncompatible value.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::types\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::ClassProp_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::name\" is not an object.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::ClassProp_propType:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propType\" is not an object.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::ClassProp_propTypeName:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propTypeName\" is not an object.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::EnumItem_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnumItem::name\" is not an object.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::File_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::name\" is not an object.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::Type_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrType::name\" is not an object.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				default:
					throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
				}
			}

			void ParserGenAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token)
			{
				switch((ParserGenFields)field)
				{
				case ParserGenFields::ClassProp_name:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrClassProp*>(object))
					{
						if (typedObject->name.value.Length() == 0)
						{
							AssignToken(typedObject->name, token);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::name\" has already been assigned.", vl::glr::AstInsErrorType::FieldReassigned, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::name\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::ClassProp_propTypeName:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrClassProp*>(object))
					{
						if (typedObject->propTypeName.value.Length() == 0)
						{
							AssignToken(typedObject->propTypeName, token);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propTypeName\" has already been assigned.", vl::glr::AstInsErrorType::FieldReassigned, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propTypeName\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::EnumItem_name:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrEnumItem*>(object))
					{
						if (typedObject->name.value.Length() == 0)
						{
							AssignToken(typedObject->name, token);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnumItem::name\" has already been assigned.", vl::glr::AstInsErrorType::FieldReassigned, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnumItem::name\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::File_name:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrFile*>(object))
					{
						if (typedObject->name.value.Length() == 0)
						{
							AssignToken(typedObject->name, token);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::name\" has already been assigned.", vl::glr::AstInsErrorType::FieldReassigned, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::name\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::Type_name:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrType*>(object))
					{
						if (typedObject->name.value.Length() == 0)
						{
							AssignToken(typedObject->name, token);
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrType::name\" has already been assigned.", vl::glr::AstInsErrorType::FieldReassigned, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrType::name\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::Class_props:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClass::props\" is not a token.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::ClassProp_propType:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propType\" is not a token.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::Enum_items:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnum::items\" is not a token.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::File_types:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::types\" is not a token.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				default:
					throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
				}
			}

			void ParserGenAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem)
			{
				switch((ParserGenFields)field)
				{
				case ParserGenFields::ClassProp_propType:
					if (auto typedObject = dynamic_cast<vl::glr::parsergen::GlrClassProp*>(object))
					{
						if (typedObject->propType == vl::glr::parsergen::GlrPropType::UNDEFINED_ENUM_ITEM_VALUE)
						{
							typedObject->propType = (vl::glr::parsergen::GlrPropType)enumItem;
							break;
						}
						else
						{
							throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propType\" has already been assigned.", vl::glr::AstInsErrorType::FieldReassigned, field);
						}
					}
					else
					{
						throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propType\" does not exist in the current object.", vl::glr::AstInsErrorType::FieldNotExistsInType, field);
					}
				case ParserGenFields::Class_props:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClass::props\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::ClassProp_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::name\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::ClassProp_propTypeName:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrClassProp::propTypeName\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::Enum_items:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnum::items\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::EnumItem_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrEnumItem::name\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::File_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::name\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::File_types:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrFile::types\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				case ParserGenFields::Type_name:
					throw vl::glr::AstInsException(L"Field \"vl::glr::parsergen::GlrType::name\" is not an enum item.", vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
				default:
					throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
				}
			}

			vl::Ptr<vl::glr::ParsingAstBase> ParserGenAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
			{
				switch((ParserGenClasses)type)
				{
				case ParserGenClasses::Class:
				case ParserGenClasses::ClassProp:
				case ParserGenClasses::Enum:
				case ParserGenClasses::EnumItem:
				case ParserGenClasses::File:
				case ParserGenClasses::Type:
					throw vl::glr::AstInsException(L"The type is not configured to allow ambiguity.", vl::glr::AstInsErrorType::UnsupportedAmbiguityType, type);
				default:
					throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
				}
			}
		}
	}
}
