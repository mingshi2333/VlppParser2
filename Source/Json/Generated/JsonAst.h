/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_JSON_AST_AST
#define VCZH_PARSER2_BUILTIN_JSON_AST_AST

#include "../../AstBase.h"
#include "../../SyntaxBase.h"

namespace vl::glr::json
{
	class JsonArray;
	class JsonLiteral;
	class JsonNode;
	class JsonNumber;
	class JsonObject;
	class JsonObjectField;
	class JsonString;

	enum class JsonLiteralValue
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		True = 0,
		False = 1,
		Null = 2,
	};

	class JsonNode abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<JsonNode>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(JsonLiteral* node) = 0;
			virtual void Visit(JsonString* node) = 0;
			virtual void Visit(JsonNumber* node) = 0;
			virtual void Visit(JsonArray* node) = 0;
			virtual void Visit(JsonObject* node) = 0;
		};

		virtual void Accept(JsonNode::IVisitor* visitor) = 0;

	};

	class JsonLiteral : public JsonNode, vl::reflection::Description<JsonLiteral>
	{
	public:
		JsonLiteralValue value = JsonLiteralValue::UNDEFINED_ENUM_ITEM_VALUE;

		void Accept(JsonNode::IVisitor* visitor) override;
	};

	class JsonString : public JsonNode, vl::reflection::Description<JsonString>
	{
	public:
		vl::glr::ParsingToken content;

		void Accept(JsonNode::IVisitor* visitor) override;
	};

	class JsonNumber : public JsonNode, vl::reflection::Description<JsonNumber>
	{
	public:
		vl::glr::ParsingToken content;

		void Accept(JsonNode::IVisitor* visitor) override;
	};

	class JsonArray : public JsonNode, vl::reflection::Description<JsonArray>
	{
	public:
		vl::collections::List<vl::Ptr<JsonNode>> items;

		void Accept(JsonNode::IVisitor* visitor) override;
	};

	class JsonObjectField : public vl::glr::ParsingAstBase, vl::reflection::Description<JsonObjectField>
	{
	public:
		vl::glr::ParsingToken name;
		vl::Ptr<JsonNode> value;
	};

	class JsonObject : public JsonNode, vl::reflection::Description<JsonObject>
	{
	public:
		vl::collections::List<vl::Ptr<JsonObjectField>> fields;

		void Accept(JsonNode::IVisitor* visitor) override;
	};
}
namespace vl::reflection::description
{
#ifndef VCZH_DEBUG_NO_REFLECTION
	DECL_TYPE_INFO(vl::glr::json::JsonNode)
	DECL_TYPE_INFO(vl::glr::json::JsonNode::IVisitor)
	DECL_TYPE_INFO(vl::glr::json::JsonLiteralValue)
	DECL_TYPE_INFO(vl::glr::json::JsonLiteral)
	DECL_TYPE_INFO(vl::glr::json::JsonString)
	DECL_TYPE_INFO(vl::glr::json::JsonNumber)
	DECL_TYPE_INFO(vl::glr::json::JsonArray)
	DECL_TYPE_INFO(vl::glr::json::JsonObjectField)
	DECL_TYPE_INFO(vl::glr::json::JsonObject)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

	BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::json::JsonNode::IVisitor)
		void Visit(vl::glr::json::JsonLiteral* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(vl::glr::json::JsonString* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(vl::glr::json::JsonNumber* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(vl::glr::json::JsonArray* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(vl::glr::json::JsonObject* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

	END_INTERFACE_PROXY(vl::glr::json::JsonNode::IVisitor)

#endif
#endif
	/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
	/// <returns>Returns true if this operation succeeded.</returns>
	extern bool JsonAstLoadTypes();
}
#endif