/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:JsonAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "JsonJsonAst_Json.h"

namespace vl
{
	namespace glr
	{
		namespace json
		{
			namespace json_visitor
			{
				void JsonAstVisitor::PrintFields(JsonArray* node)
				{
					BeginField(L"items");
					BeginArray();
					for (auto&& listItem : node->items)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void JsonAstVisitor::PrintFields(JsonLiteral* node)
				{
					BeginField(L"value");
					switch (node->value)
					{
					case vl::glr::json::JsonLiteralValue::False:
						WriteString(L"False");
						break;
					case vl::glr::json::JsonLiteralValue::Null:
						WriteString(L"Null");
						break;
					case vl::glr::json::JsonLiteralValue::True:
						WriteString(L"True");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void JsonAstVisitor::PrintFields(JsonNode* node)
				{
				}
				void JsonAstVisitor::PrintFields(JsonNumber* node)
				{
					BeginField(L"content");
					WriteToken(node->content);
					EndField();
				}
				void JsonAstVisitor::PrintFields(JsonObject* node)
				{
					BeginField(L"fields");
					BeginArray();
					for (auto&& listItem : node->fields)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void JsonAstVisitor::PrintFields(JsonObjectField* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"value");
					Print(node->value.Obj());
					EndField();
				}
				void JsonAstVisitor::PrintFields(JsonString* node)
				{
					BeginField(L"content");
					WriteToken(node->content);
					EndField();
				}

				void JsonAstVisitor::Visit(JsonLiteral* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"Literal", node);
					PrintFields(static_cast<JsonNode*>(node));
					PrintFields(static_cast<JsonLiteral*>(node));
					EndObject();
				}

				void JsonAstVisitor::Visit(JsonString* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"String", node);
					PrintFields(static_cast<JsonNode*>(node));
					PrintFields(static_cast<JsonString*>(node));
					EndObject();
				}

				void JsonAstVisitor::Visit(JsonNumber* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"Number", node);
					PrintFields(static_cast<JsonNode*>(node));
					PrintFields(static_cast<JsonNumber*>(node));
					EndObject();
				}

				void JsonAstVisitor::Visit(JsonArray* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"Array", node);
					PrintFields(static_cast<JsonNode*>(node));
					PrintFields(static_cast<JsonArray*>(node));
					EndObject();
				}

				void JsonAstVisitor::Visit(JsonObject* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"Object", node);
					PrintFields(static_cast<JsonNode*>(node));
					PrintFields(static_cast<JsonObject*>(node));
					EndObject();
				}

				JsonAstVisitor::JsonAstVisitor(vl::stream::StreamWriter& _writer)
					: vl::glr::JsonVisitorBase(_writer)
				{
				}

				void JsonAstVisitor::Print(JsonNode* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					node->Accept(static_cast<JsonNode::IVisitor*>(this));
				}

				void JsonAstVisitor::Print(JsonObjectField* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ObjectField", node);
					PrintFields(static_cast<JsonObjectField*>(node));
					EndObject();
				}

			}
		}
	}
}
