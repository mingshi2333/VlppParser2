/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:JsonAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "JsonJsonAst_Traverse.h"

namespace vl
{
	namespace glr
	{
		namespace json
		{
			namespace traverse_visitor
			{
				void JsonAstVisitor::Traverse(vl::glr::ParsingToken& token) {}
				void JsonAstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
				void JsonAstVisitor::Traverse(JsonArray* node) {}
				void JsonAstVisitor::Traverse(JsonLiteral* node) {}
				void JsonAstVisitor::Traverse(JsonNode* node) {}
				void JsonAstVisitor::Traverse(JsonNumber* node) {}
				void JsonAstVisitor::Traverse(JsonObject* node) {}
				void JsonAstVisitor::Traverse(JsonObjectField* node) {}
				void JsonAstVisitor::Traverse(JsonString* node) {}

				void JsonAstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
				void JsonAstVisitor::Finishing(JsonArray* node) {}
				void JsonAstVisitor::Finishing(JsonLiteral* node) {}
				void JsonAstVisitor::Finishing(JsonNode* node) {}
				void JsonAstVisitor::Finishing(JsonNumber* node) {}
				void JsonAstVisitor::Finishing(JsonObject* node) {}
				void JsonAstVisitor::Finishing(JsonObjectField* node) {}
				void JsonAstVisitor::Finishing(JsonString* node) {}

				void JsonAstVisitor::Visit(JsonLiteral* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<JsonNode*>(node));
					Traverse(static_cast<JsonLiteral*>(node));
					Finishing(static_cast<JsonLiteral*>(node));
					Finishing(static_cast<JsonNode*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void JsonAstVisitor::Visit(JsonString* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<JsonNode*>(node));
					Traverse(static_cast<JsonString*>(node));
					Traverse(node->content);
					Finishing(static_cast<JsonString*>(node));
					Finishing(static_cast<JsonNode*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void JsonAstVisitor::Visit(JsonNumber* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<JsonNode*>(node));
					Traverse(static_cast<JsonNumber*>(node));
					Traverse(node->content);
					Finishing(static_cast<JsonNumber*>(node));
					Finishing(static_cast<JsonNode*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void JsonAstVisitor::Visit(JsonArray* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<JsonNode*>(node));
					Traverse(static_cast<JsonArray*>(node));
					for (auto&& listItem : node->items)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<JsonArray*>(node));
					Finishing(static_cast<JsonNode*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void JsonAstVisitor::Visit(JsonObject* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<JsonNode*>(node));
					Traverse(static_cast<JsonObject*>(node));
					for (auto&& listItem : node->fields)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<JsonObject*>(node));
					Finishing(static_cast<JsonNode*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void JsonAstVisitor::InspectInto(JsonNode* node)
				{
					if (!node) return;
					node->Accept(static_cast<JsonNode::IVisitor*>(this));
				}

				void JsonAstVisitor::InspectInto(JsonObjectField* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<JsonObjectField*>(node));
					Traverse(node->name);
					InspectInto(node->value.Obj());
					Finishing(static_cast<JsonObjectField*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

			}
		}
	}
}
