/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:RuleAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGenRuleAst.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void GlrRefSyntax::Accept(GlrSyntax::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrLiteralSyntax::Accept(GlrSyntax::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrUseSyntax::Accept(GlrSyntax::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrLoopSyntax::Accept(GlrSyntax::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrOptionalSyntax::Accept(GlrSyntax::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrSequenceSyntax::Accept(GlrSyntax::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrAlternativeSyntax::Accept(GlrSyntax::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrCreateClause::Accept(GlrClause::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrPartialClause::Accept(GlrClause::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void GlrReuseClause::Accept(GlrClause::IVisitor* visitor)
			{
				visitor->Visit(this);
			}
		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION

			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrSyntax, glr::parsergen::GlrSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrSyntax::IVisitor, glr::parsergen::GlrSyntax::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrRefSyntax, glr::parsergen::GlrRefSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrLiteralSyntax, glr::parsergen::GlrLiteralSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrUseSyntax, glr::parsergen::GlrUseSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrLoopSyntax, glr::parsergen::GlrLoopSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrOptionalPriority, glr::parsergen::GlrOptionalPriority)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrOptionalSyntax, glr::parsergen::GlrOptionalSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrSequenceSyntax, glr::parsergen::GlrSequenceSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrAlternativeSyntax, glr::parsergen::GlrAlternativeSyntax)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrClause, glr::parsergen::GlrClause)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrClause::IVisitor, glr::parsergen::GlrClause::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrAssignment, glr::parsergen::GlrAssignment)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrCreateClause, glr::parsergen::GlrCreateClause)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrPartialClause, glr::parsergen::GlrPartialClause)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrReuseClause, glr::parsergen::GlrReuseClause)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrRule, glr::parsergen::GlrRule)
			IMPL_TYPE_INFO_RENAME(vl::glr::parsergen::GlrSyntaxFile, glr::parsergen::GlrSyntaxFile)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrSyntax)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::glr::parsergen::GlrSyntax)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrRefSyntax)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrSyntax)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrRefSyntax>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(field)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrRefSyntax)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrLiteralSyntax)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrSyntax)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrLiteralSyntax>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrLiteralSyntax)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrUseSyntax)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrSyntax)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrUseSyntax>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrUseSyntax)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrLoopSyntax)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrSyntax)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrLoopSyntax>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(syntax)
				CLASS_MEMBER_FIELD(delimiter)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrLoopSyntax)

			BEGIN_ENUM_ITEM(vl::glr::parsergen::GlrOptionalPriority)
				ENUM_ITEM_NAMESPACE(vl::glr::parsergen::GlrOptionalPriority)
				ENUM_NAMESPACE_ITEM(Equal)
				ENUM_NAMESPACE_ITEM(PreferTake)
				ENUM_NAMESPACE_ITEM(PreferSkip)
			END_ENUM_ITEM(vl::glr::parsergen::GlrOptionalPriority)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrOptionalSyntax)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrSyntax)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrOptionalSyntax>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(priority)
				CLASS_MEMBER_FIELD(syntax)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrOptionalSyntax)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrSequenceSyntax)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrSyntax)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrSequenceSyntax>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrSequenceSyntax)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrAlternativeSyntax)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrSyntax)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrAlternativeSyntax>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrAlternativeSyntax)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrClause)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::glr::parsergen::GlrClause)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrAssignment)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrAssignment>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(field)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrAssignment)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrCreateClause)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrClause)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrCreateClause>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(syntax)
				CLASS_MEMBER_FIELD(assignments)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrCreateClause)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrPartialClause)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrClause)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrPartialClause>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(syntax)
				CLASS_MEMBER_FIELD(assignments)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrPartialClause)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrReuseClause)
				CLASS_MEMBER_BASE(vl::glr::parsergen::GlrClause)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrReuseClause>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(syntax)
				CLASS_MEMBER_FIELD(assignments)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrReuseClause)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrRule)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrRule>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(clauses)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrRule)

			BEGIN_CLASS_MEMBER(vl::glr::parsergen::GlrSyntaxFile)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::parsergen::GlrSyntaxFile>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(rules)
			END_CLASS_MEMBER(vl::glr::parsergen::GlrSyntaxFile)

			BEGIN_INTERFACE_MEMBER(vl::glr::parsergen::GlrSyntax::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrSyntax::IVisitor::*)(vl::glr::parsergen::GlrRefSyntax* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrSyntax::IVisitor::*)(vl::glr::parsergen::GlrLiteralSyntax* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrSyntax::IVisitor::*)(vl::glr::parsergen::GlrUseSyntax* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrSyntax::IVisitor::*)(vl::glr::parsergen::GlrLoopSyntax* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrSyntax::IVisitor::*)(vl::glr::parsergen::GlrOptionalSyntax* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrSyntax::IVisitor::*)(vl::glr::parsergen::GlrSequenceSyntax* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrSyntax::IVisitor::*)(vl::glr::parsergen::GlrAlternativeSyntax* node))
			END_INTERFACE_MEMBER(vl::glr::parsergen::GlrSyntax)

			BEGIN_INTERFACE_MEMBER(vl::glr::parsergen::GlrClause::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrClause::IVisitor::*)(vl::glr::parsergen::GlrCreateClause* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrClause::IVisitor::*)(vl::glr::parsergen::GlrPartialClause* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::parsergen::GlrClause::IVisitor::*)(vl::glr::parsergen::GlrReuseClause* node))
			END_INTERFACE_MEMBER(vl::glr::parsergen::GlrClause)

#endif

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
			class ParserGenRuleAstTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::glr::parsergen::GlrSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrSyntax::IVisitor)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrRefSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrLiteralSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrUseSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrLoopSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrOptionalPriority)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrOptionalSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrSequenceSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrAlternativeSyntax)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrClause)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrClause::IVisitor)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrAssignment)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrCreateClause)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrPartialClause)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrReuseClause)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrRule)
					ADD_TYPE_INFO(vl::glr::parsergen::GlrSyntaxFile)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif
#endif

			bool ParserGenRuleAstLoadTypes()
			{
#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
				if (auto manager = GetGlobalTypeManager())
				{
					Ptr<ITypeLoader> loader = new ParserGenRuleAstTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
