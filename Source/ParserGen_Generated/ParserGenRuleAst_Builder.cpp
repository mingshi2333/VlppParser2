/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:RuleAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGenRuleAst_Builder.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			namespace builder
			{

/***********************************************************************
AssignmentBuilder
***********************************************************************/

				AssignmentBuilder& AssignmentBuilder::field(const vl::WString& value)
				{
					node->field.value = value;
					return *this;
				}

				AssignmentBuilder& AssignmentBuilder::value(const vl::WString& value)
				{
					node->value.value = value;
					return *this;
				}

/***********************************************************************
CreateClauseBuilder
***********************************************************************/

				CreateClauseBuilder& CreateClauseBuilder::assignments(const vl::Ptr<GlrAssignment>& value)
				{
					node->assignments.Add(value);
					return *this;
				}

				CreateClauseBuilder& CreateClauseBuilder::clause(const vl::Ptr<GlrClause>& value)
				{
					node->clause = value;
					return *this;
				}

				CreateClauseBuilder& CreateClauseBuilder::type(const vl::WString& value)
				{
					node->type.value = value;
					return *this;
				}

/***********************************************************************
LiteralClauseBuilder
***********************************************************************/

				LiteralClauseBuilder& LiteralClauseBuilder::value(const vl::WString& value)
				{
					node->value.value = value;
					return *this;
				}

/***********************************************************************
LoopClauseBuilder
***********************************************************************/

				LoopClauseBuilder& LoopClauseBuilder::clause(const vl::Ptr<GlrClause>& value)
				{
					node->clause = value;
					return *this;
				}

				LoopClauseBuilder& LoopClauseBuilder::delimiter(const vl::Ptr<GlrClause>& value)
				{
					node->delimiter = value;
					return *this;
				}

/***********************************************************************
OptionalClauseBuilder
***********************************************************************/

				OptionalClauseBuilder& OptionalClauseBuilder::clause(const vl::Ptr<GlrClause>& value)
				{
					node->clause = value;
					return *this;
				}

/***********************************************************************
RefClauseBuilder
***********************************************************************/

				RefClauseBuilder& RefClauseBuilder::field(const vl::WString& value)
				{
					node->field.value = value;
					return *this;
				}

				RefClauseBuilder& RefClauseBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
RuleBuilder
***********************************************************************/

				RuleBuilder& RuleBuilder::clauses(const vl::Ptr<GlrClause>& value)
				{
					node->clauses.Add(value);
					return *this;
				}

				RuleBuilder& RuleBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
SequenceClauseBuilder
***********************************************************************/

				SequenceClauseBuilder& SequenceClauseBuilder::first(const vl::Ptr<GlrClause>& value)
				{
					node->first = value;
					return *this;
				}

				SequenceClauseBuilder& SequenceClauseBuilder::second(const vl::Ptr<GlrClause>& value)
				{
					node->second = value;
					return *this;
				}

/***********************************************************************
SyntaxFileBuilder
***********************************************************************/

				SyntaxFileBuilder& SyntaxFileBuilder::rules(const vl::Ptr<GlrRule>& value)
				{
					node->rules.Add(value);
					return *this;
				}

/***********************************************************************
UseClauseBuilder
***********************************************************************/

				UseClauseBuilder& UseClauseBuilder::clause(const vl::Ptr<GlrClause>& value)
				{
					node->clause = value;
					return *this;
				}

/***********************************************************************
_ReuseClauseBuilder
***********************************************************************/

				_ReuseClauseBuilder& _ReuseClauseBuilder::assignments(const vl::Ptr<GlrAssignment>& value)
				{
					node->assignments.Add(value);
					return *this;
				}

				_ReuseClauseBuilder& _ReuseClauseBuilder::clause(const vl::Ptr<GlrClause>& value)
				{
					node->clause = value;
					return *this;
				}
			}
		}
	}
}
