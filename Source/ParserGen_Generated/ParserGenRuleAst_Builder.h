/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:RuleAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_PARSERGEN_RULEAST_AST_BUILDER
#define VCZH_PARSER2_PARSERGEN_RULEAST_AST_BUILDER

#include "ParserGenRuleAst.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			namespace builder
			{
				class AssignmentBuilder
				{
				private:
					GlrAssignment* node;
				public:
					AssignmentBuilder(GlrAssignment* _node) : node(_node) {}
					AssignmentBuilder& field(const vl::WString& value);
					AssignmentBuilder& value(const vl::WString& value);
				};

				class CreateClauseBuilder
				{
				private:
					GlrCreateClause* node;
				public:
					CreateClauseBuilder(GlrCreateClause* _node) : node(_node) {}
					CreateClauseBuilder& assignments(const vl::Ptr<GlrAssignment>& value);
					CreateClauseBuilder& clause(const vl::Ptr<GlrClause>& value);
					CreateClauseBuilder& type(const vl::WString& value);
				};

				class LiteralClauseBuilder
				{
				private:
					GlrLiteralClause* node;
				public:
					LiteralClauseBuilder(GlrLiteralClause* _node) : node(_node) {}
					LiteralClauseBuilder& value(const vl::WString& value);
				};

				class LoopClauseBuilder
				{
				private:
					GlrLoopClause* node;
				public:
					LoopClauseBuilder(GlrLoopClause* _node) : node(_node) {}
					LoopClauseBuilder& clause(const vl::Ptr<GlrClause>& value);
					LoopClauseBuilder& delimiter(const vl::Ptr<GlrClause>& value);
				};

				class OptionalClauseBuilder
				{
				private:
					GlrOptionalClause* node;
				public:
					OptionalClauseBuilder(GlrOptionalClause* _node) : node(_node) {}
					OptionalClauseBuilder& clause(const vl::Ptr<GlrClause>& value);
				};

				class RefClauseBuilder
				{
				private:
					GlrRefClause* node;
				public:
					RefClauseBuilder(GlrRefClause* _node) : node(_node) {}
					RefClauseBuilder& field(const vl::WString& value);
					RefClauseBuilder& name(const vl::WString& value);
				};

				class RuleBuilder
				{
				private:
					GlrRule* node;
				public:
					RuleBuilder(GlrRule* _node) : node(_node) {}
					RuleBuilder& clauses(const vl::Ptr<GlrClause>& value);
					RuleBuilder& name(const vl::WString& value);
				};

				class SequenceClauseBuilder
				{
				private:
					GlrSequenceClause* node;
				public:
					SequenceClauseBuilder(GlrSequenceClause* _node) : node(_node) {}
					SequenceClauseBuilder& first(const vl::Ptr<GlrClause>& value);
					SequenceClauseBuilder& second(const vl::Ptr<GlrClause>& value);
				};

				class SyntaxFileBuilder
				{
				private:
					GlrSyntaxFile* node;
				public:
					SyntaxFileBuilder(GlrSyntaxFile* _node) : node(_node) {}
					SyntaxFileBuilder& rules(const vl::Ptr<GlrRule>& value);
				};

				class UseClauseBuilder
				{
				private:
					GlrUseClause* node;
				public:
					UseClauseBuilder(GlrUseClause* _node) : node(_node) {}
					UseClauseBuilder& clause(const vl::Ptr<GlrClause>& value);
				};

				class _ReuseClauseBuilder
				{
				private:
					Glr_ReuseClause* node;
				public:
					_ReuseClauseBuilder(Glr_ReuseClause* _node) : node(_node) {}
					_ReuseClauseBuilder& assignments(const vl::Ptr<GlrAssignment>& value);
					_ReuseClauseBuilder& clause(const vl::Ptr<GlrClause>& value);
				};

				using MakeAssignment = vl::glr::ParsingAstBuilder<GlrAssignment, AssignmentBuilder>;
				using MakeCreateClause = vl::glr::ParsingAstBuilder<GlrCreateClause, CreateClauseBuilder>;
				using MakeLiteralClause = vl::glr::ParsingAstBuilder<GlrLiteralClause, LiteralClauseBuilder>;
				using MakeLoopClause = vl::glr::ParsingAstBuilder<GlrLoopClause, LoopClauseBuilder>;
				using MakeOptionalClause = vl::glr::ParsingAstBuilder<GlrOptionalClause, OptionalClauseBuilder>;
				using MakeRefClause = vl::glr::ParsingAstBuilder<GlrRefClause, RefClauseBuilder>;
				using MakeRule = vl::glr::ParsingAstBuilder<GlrRule, RuleBuilder>;
				using MakeSequenceClause = vl::glr::ParsingAstBuilder<GlrSequenceClause, SequenceClauseBuilder>;
				using MakeSyntaxFile = vl::glr::ParsingAstBuilder<GlrSyntaxFile, SyntaxFileBuilder>;
				using MakeUseClause = vl::glr::ParsingAstBuilder<GlrUseClause, UseClauseBuilder>;
				using Make_ReuseClause = vl::glr::ParsingAstBuilder<Glr_ReuseClause, _ReuseClauseBuilder>;
			}
		}
	}
}
#endif