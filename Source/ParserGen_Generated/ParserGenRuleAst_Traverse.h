/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:RuleAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_PARSERGEN_RULEAST_AST_TRAVERSE_VISITOR
#define VCZH_PARSER2_PARSERGEN_RULEAST_AST_TRAVERSE_VISITOR

#include "ParserGenRuleAst.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			namespace traverse_visitor
			{
				/// <summary>A traverse visitor, overriding all abstract methods with AST visiting code.</summary>
				class RuleAstVisitor
					: public vl::Object
					, protected virtual GlrClause::IVisitor
				{
				protected:
					virtual void Traverse(vl::glr::ParsingToken& token);
					virtual void Traverse(vl::glr::ParsingAstBase* node);
					virtual void Traverse(GlrAssignment* node);
					virtual void Traverse(GlrClause* node);
					virtual void Traverse(GlrCreateClause* node);
					virtual void Traverse(GlrLiteralClause* node);
					virtual void Traverse(GlrLoopClause* node);
					virtual void Traverse(GlrOptionalClause* node);
					virtual void Traverse(GlrRefClause* node);
					virtual void Traverse(GlrRule* node);
					virtual void Traverse(GlrSequenceClause* node);
					virtual void Traverse(GlrSyntaxFile* node);
					virtual void Traverse(GlrUseClause* node);
					virtual void Traverse(Glr_ReuseClause* node);

				protected:
					virtual void Finishing(vl::glr::ParsingAstBase* node);
					virtual void Finishing(GlrAssignment* node);
					virtual void Finishing(GlrClause* node);
					virtual void Finishing(GlrCreateClause* node);
					virtual void Finishing(GlrLiteralClause* node);
					virtual void Finishing(GlrLoopClause* node);
					virtual void Finishing(GlrOptionalClause* node);
					virtual void Finishing(GlrRefClause* node);
					virtual void Finishing(GlrRule* node);
					virtual void Finishing(GlrSequenceClause* node);
					virtual void Finishing(GlrSyntaxFile* node);
					virtual void Finishing(GlrUseClause* node);
					virtual void Finishing(Glr_ReuseClause* node);

				protected:
					void Visit(GlrRefClause* node) override;
					void Visit(GlrLiteralClause* node) override;
					void Visit(GlrUseClause* node) override;
					void Visit(GlrLoopClause* node) override;
					void Visit(GlrOptionalClause* node) override;
					void Visit(GlrSequenceClause* node) override;
					void Visit(GlrCreateClause* node) override;
					void Visit(Glr_ReuseClause* node) override;

				public:
					void InspectInto(GlrClause* node);
					void InspectInto(GlrAssignment* node);
					void InspectInto(GlrRule* node);
					void InspectInto(GlrSyntaxFile* node);
				};
			}
		}
	}
}
#endif