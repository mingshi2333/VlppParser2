/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGenTypeParser.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			void ParserGenTypeParserData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2596; // 40144 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 36;
				static const vl::vint dataSolidRows = 10;
				static const vl::vint dataRows = 11;
				static const char* compressed[] = {
					"\xD0\x9C\x00\x00\x1C\x0A\x00\x00\x25\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x83\x06\x84\x09\x0A\x99\x0A\x81\x1A\x80\x16\x84\x16\x0A\xD0\x07\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x91\x99\x97\x97\x92\x9A\x2C\xB8\xAE\x9A\x90\x9C\x8D\x9A\x9E\x37\xBE\xB9\x82\xAB\x9C\xA1\x9E\x83\x32\xB6\xA0\x80\xAB\xA6\xA1\xA0\xA4\x3F\xCE\x8D\xB0\xA3\xA4\xA9\xA2\xAB\x47\x83\x89\xAC\xA3\x9A\xA9\xAE\xAC\x4F\xDA\x91\xA0\xB3\xAA\xB1\xAB\x90\x03\x81\x1C\xAA\xAF\xAE\xB3\xAA\xB7\x59\x82\x9B\xBE\xAC\xB5\xBB\xB5\xBB\x74\xF8\xA4\xAD\xB2\xBB\xB0\xB9\xB0\x7D\xE7\x81\xCF\xB3\xC1\xB9\x81\xB9\x7B\xF6\xB9\xAB\xC9\xC2\xBF\xBF\xB2\x85\x80\xC7\xDE\xB1\xC8\xCB\xC8\xC1\x97\x84\xD9\xC6\xC2\x94\xCB\xCC\xC9\x9D\x98\xE1\xDA\xC3\xD4\xCC\xC5\xC7\x7C\x9F\xD6\xC5\xD0\xD7\xD1\xCB\xD4\x00\x6A\x89\x92\xDD\xC4\xC4\xD4\xC5\xB5\xB9\xF7\xCE\xCF\xD0\xDF\xDC\xDB\xBD\xBC\xEA\xD0\xDE\xD3\xE2\xDF\xE0\xC0\xC6\xC2\xEC\xDB\xD5\xE0\xE6\xE2\x9E\xCF\xC7\xEA\xE9\xE2\xEB\xE4\xE7\xD8\xD1\xD9\xE2",
					"\xDB\xEC\xD1\xEE\xD3\xDA\xE1\xDC\xE2\xFE\xEC\xF0\xF1\xF1\xE8\xE5\xE9\xE7\xFA\xF5\xF4\xF7\xF7\xA0\x82\x0A\x94\xDF\xDA\xDC\xE4\xFB\xD4\xF8\xD6\xF5\xEF\xED\xD6\xF2\xFF\xEB\x40\x8E\x7A\x80\xF0\x4D\x7F\x7E\x81\x01\xAB\x63\x03\x7C\xD7\x47\x80\x75\x82\x0F\x83\x88\x82\x84\x11\x85\x85\x84\x81\x18\x93\x86\x87\x74\xFB\x7A\x7D\x7E\x86\x19\x97\x80\x8B\x88\x22\xA5\x8C\x87\x87\x26\x8D\x80\x87\x89\x0E\xAC\x8B\x8A\x8A\x14\xAE\x81\x8C\x8C\x1B\xB4\x81\x8A\x8C\x35\xBC\x7D\x8A\x8D\x24\xB8\x87\x8C\x8F\x29\xBA\x8F\x8A\x90\x33\x84\x99\x8E\x87\x3B\x86\x9F\x8E\x92\x3D\x80\x9E\x8D\x93\x4C\x81\x98\x93\x90\x53\x85\x95\x97\x91\xF5\x59\x97\x7E\x96\x01\x4C\x43\x6E\x93\x60\x91\x9F\x92\x94\x5C\x9D\x85\x98\x8A\x63\xA9\x9B\x71\x01\x0C\xA2\x91\x9B\x95\x4B\xB0\x90\x96\x9C\x64\x9B\x96\x9D\x7E\x67\x91\x76\x01\x9B\x74\xAA\x9E\x9B\x9F\x7D\xAF\x99\x9C\x95\x83\x96\x95\x9B\x46\x5F\x80\xA5\xA0\x96\x77\xA6\x9D\xA0\x9A\x82\x8F\xA9\x91\xA0\xD5\x48\x46\x40\x7D\x92\x84\xAD\xA1\x02\x7C\x8B\xA1\x9E\xA7\x73\xA0\xA5\x9C\x9E\x99\x86\xA5\xA8\xA3\xA4\xA9\xAE\xA2\xAA",
					"\x90\x8A\xA7\xAB\xA7\xAF\xA1\xA1\xAF\xA8\xAB\xB5\xAD\xA8\xA5\xB8\xA2\xAE\x9D\xAE\xB3\xBB\xA5\x9A\x02\x9D\xBD\xA1\xA4\xAB\x93\xBA\xA3\xB2\xAD\xC5\x82\xBE\xA8\xB1\x9A\x8C\xB6\xAA\xB3\xA8\x88\xBD\xB1\xAD\x0E\x49\xAC\xAC\xB4\xB0\x98\xB2\xAE\xB6\xB4\xB7\xA6\xB3\xB2\xD2\x8F\xB1\xB9\xB4\xDE\x8D\xAC\x02\x42\xF2\x60\xB5\xB8\xB7\xBE\x8A\xB7\xB7\xB8\xD9\xB0\xBB\xB6\xBC\xDD\x89\xBC\xBB\xB1\xEB\xB4\xBD\xBB\xBD\xEA\xB6\xBA\xBF\xB1\x0E\x01\xBC\xBF\xBB\xF9\x85\xCE\xBE\xC1\xD3\x88\xC2\xBA\xC2\xE4\x87\xCE\xC1\xC2\x0F\xCB\xC1\xC5\xC3\xD3\x8F\x02\xC3\xBF\xFD\x90\xCA\xC6\xC4\x1B\xD4\xCC\xC7\xC7\x1E\xE1\xC1\xBC\xC3\x23\xD3\xC5\xC9\xC7\x27\xE0\xC9\xCA\xC8\xF3\xA4\xCD\xCA\xC9\xAB\x50\x07\xC6\xCB\xF5\xA8\xCF\xCA\xCD\x35\xEA\xC7\xCE\xCE\x39\xEC\xCD\xCC\x68\x11\x33\xC0\xCF\xCF\x3B\xFE\xCB\xBC\xC6\x04\xC3\xD7\xD0\xCD\x4B\xCA\xD8\xBE\xD3\x19\xFC\xCD\xD0\xCE\x53\xD2\xD7\xB0\x44\xD6\x9F\xB9\xD0\xD5\x4F\xDC\xD1\xD6\xD1\x5D\xD6\xDF\xD7\xCA\x64\xC5\xD0\x6B\x04\x42\xDE\xDB\xD6\xD8\x6B\xE0\xD3\xDA\xD9\x70\xC4\xD2\xDD\xD5\x6E\xED\xD5\xDB\xDC\x61",
					"\xF5\xDA\xD7\xDE\xEE\xBC\xD3\xC2\xDF\x48\xC0\xEC\xD1\xDE\x77\xF4\xD5\xE0\xE1\x71\xC6\xE9\xE0\xE2\x78\xEF\xDD\xE2\xDD\x8B\xCE\xEA\xE3\xE3\x82\xD1\x74\x05\xDA\x6C\xD5\xEA\xDA\xE6\xA4\x55\x08\xE6\xDE\x7D\xE1\xEF\xDE\xE8\x81\xE4\xE3\xE2\xE4\x8C\xC7\xD6\x04\xBA\xA9\xCB\x78\x07\xE7\x87\xE8\xE2\xEC\xE4\x94\xE6\xE0\xD4\xED\x93\xF9\xED\xEB\xEC\x9C\xE0\xE3\xEB\xEF\xA5\xC0\xF7\xE8\xEE\xBB\xC4\xF5\x76\x44\x59\xF6\xEB\xE6\xF2\x99\xCC\xFE\xED\xF0\xD0\xC3\xFD\xED\xEC\xC6\xD5\xF3\xF7\xBC\x1A\x30\xE1\xE6\xF5\xCE\xD4\xF7\xF5\xED\xC2\xF7\xEF\xF6\xEE\xBC\xDD\xFB\xF7\xF8\xC5\xE8\xF5\xF9\xF8\xD3\x9B\x0A\xF4\xF8\xD1\xE2\xF6\xF8\xFC\xD2\xF3\xF4\xF8\xF7\xEC\xCD\xF9\xFF\xF3\xF5\xFB\xFE\xF6\xFD\xE9\x60\x83\xFA\x50\x7C\x03\xF7\x77\x78\x70\x1D\x06\x81\x00\xFE\x77\x7C\x01\xB8\x79\x7E\xCB\x6C\x80\xFD\x72\x72\x83\x03\x8E\x82\x7D\x0F\x9D\x7C\x04\xFA\x70\x00\x0F\x0A\x83\x80\x1A\x81\x84\x05\x9B\x8F\x79\x0F\x1F\x81\x83\x23\x82\x85\x04\xA4\x8F\x7F\x0A\x8B\x84\x85\x0D\x81\x20\x08\x27\x88\x83\x1A\xA4\x74\x22\xC9\x6E\x84\x08\xA9\x8C\x87\x15\xAA\x84",
					"\x83\x3F\x9C\x7D\x74\x22\x04\x87\x0B\x86\x88\x78\x23\x05\x8A\x0E\xA8\x8E\x87\x1E\x80\x8E\x89\x42\x82\x34\x09\x4A\x80\x87\x09\x8D\x8F\x8A\x4F\x98\x89\x14\xD9\x8C\x8B\x2D\x9E\x8D\x85\x55\x9C\x40\x40\x39\x80\x00\x13\x14\x89\x88\x60\x88\x8D\x0C\xE1\x8F\x84\x35\x96\x8D\x8B\x69\x90\x89\x1C\xDA\x83\x8E\x38\xAB\x8E\x8D\x16\x8B\x8A\x0D\xFA\x87\x88\x36\xBB\x84\x8E\x77\x92\x8D\x20\x80\x9F\x8D\x2F\x83\x96\x8E\x85\x95\x8C\x67\x27\x07\x8D\x11\x96\x24\x8C\x78\x8D\x8E\x20\x89\x97\x90\x43\x94\x97\x92\x79\x9E\x8C\x13\x88\x97\x69\x14\x0D\x94\x90\x99\x91\x93\x1F\x9C\x92\x92\x50\xA5\x94\x94\xA3\x96\x91\x28\x93\x9B\x94\x53\xA9\x92\x91\xB0\x95\x90\x18\xAA\x0F\x92\x0E\xAB\x05\x96\xAA\x87\x95\x2E\xAF\x92\x97\x5E\x98\x92\x97\xB1\x9F\x94\x2F\xB4\x58\x22\x32\xAD\x07\x62\x2E\x18\x95\x30\xAD\x98\x95\x4D\xBB\x96\x99\xCB\x80\x9A\x2F\xCC\x9F\x99\x3D\x9A\x96\x9A\xA2\x90\x9B\x34\xD2\x92\x98\x6D\xB0\x7F\x05\xCA\x9B\x9B\x30\xD4\x91\x9B\x71\x9C\x9C\x9C\xE2\x9E\x99\x26\xB0\x01\x9D\x6E\x98\x9C\x95\xE7\x91\x9E\x39\xF3\x9A\x9C\x79\xB5\x99\x21\x31\x17",
					"\x62\x0C\x17\x63\x07\x76\xA8\x9E\x9D\x7D\x99\x9B\x3B\xAE\x97\x9F\x82\x83\xA5\x99\x07\xB5\x99\x40\xF0\x94\x9F\x84\xA5\x9E\xA0\x0B\xAB\x84\x0D\x54\x85\x07\x8B\x76\x07\x62\x37\x1E\x9E\x3D\x8E\xA9\x9C\x8E\x80\xA4\x8F\x20\xB7\x99\x44\xE2\x58\x06\x2A\xB9\x07\x62\x3A\x17\x63\x0E\x1A\xAD\xA1\x91\x8A\xA1\xA4\x02\xAE\xA7\x43\x9E\xA9\x92\x2D\x2C\x71\x21\xC0\x51\x4A\x4C\x39\xA6\x20\xAC\x7B\x2B\x4F\x5E\x32\x25\xBA\x06\x2C\x52\x9D\xA9\x24\xA7\x03\x29\xA6\x57\x43\xA3\x20\xA4\xB3\x53\xA7\x0F\x3C\x28\x53\x82\x2E\xA8\x6E\x50\xA9\x21\x3E\xA8\x34\x50\xFB\x28\x45\xAB\x86\x25\x01\x40\x5E\xAB\x40\x60\xAE\x2A\x4C\x68\x2F\x39\x55\xA0\x03\xB9\x65\xA7\xA7\xBD\x29\xAB\xAD\x7B\x26\xAD\x6C\x5C\x2F\xAC\xA9\x8A\x24\x4D\x46\xA6\x25\x5A\xD5\x54\x4E\xB1\x82\x24\xAC\x7D\xA7\xAA\x42\x00\xBA\xAA\xAE\x1D\xAA\xB0\x09\x2A\xA9\x60\xFA\xAA\x21\xA2\xBB\x2B\xAA\x01\x38\xAF\x63\xF7\xA6\xAF\x84\x1E\x4B\xB2\x96\xA1\xAC\x62\x86\x2A\xB0\xD4\x32\xAA\xAE\x7E\xA1\x22\xA5\x05\xB1\xA8\x07\x61\xB0\x00\x9D\xAF\x36\x5C\xEC\x29\xAD\xD1\xAF\x33\xAB\xA8\x32\x27\x65\xB1",
					"\xB9\x24\xC8\x80\x03\xB6\xAF\x38\xB7\x70\x42\xAA\x20\xDD\x8F\x3E\xB7\x32\x3C\xB5\x42\x0E\xB8\x34\xC9\xB4\xB6\x24\xB0\xAF\x36\x4C\x46\xBA\xB9\x94\x09\xBB\xB7\xB5\xAA\x23\x82\x5E\x20\xB9\xE0\xA6\x26\xB6\xD5\xB7\xBA\x74\xDC\x29\xBA\xEB\x9E\x20\xBB\x95\xA6\x23\x74\xFB\x2D\xBA\xEF\xBF\x1E\xB6\xC4\xAF\xB6\x61\xA9\x25\xBC\xEF\xA0\xBC\xBA\xEB\xBA\xB9\x66\xF0\xB5\xB4\xF9\x84\xAC\x2B\xCF\xAF\x3A\x6C\xF1\xB3\x25\xF7\xA4\xBC\xBF\x1F\x3E\xBC\x6A\x6D\xB6\xBA\xF4\xB4\xAA\x21\x41\x7E\x29\x5A\x89\xCE\xAC\x85\x29\xAF\xB4\x0F\xDB\xB3\x40\x08\x5D\xC1\x84\x14\xC0\x35\x69\xB7\xC1\xA3\x1E\x87\xAD\xB4\x2D\xAB\x20\xB6\xB6\xB7\x78\x83\x2E\xB6\xE6\x81\x21\xBF\x1A\xC1\x21\x8A\x84\x2D\xB0\x85\x2B\xC1\xBD\x2A\xCD\xC5\x42\x2E\xB1\x21\x0C\xCE\xC6\xC5\x37\xD3\xC5\x43\x38\xC9\x20\xBE\x93\xC3\xC7\x3A\xC9\x20\x5C\x9D\xCC\xC4\x22\xE7\xAB\x0A\x17\x61\x24\x8D\xC6\xC3\x20\x2A\x17\x66\xB6\x17\x0C\xCB\x5C\xD5\x33\xC4\x81\x26\x82\xCA\x0A\x35\x0B\xC5\x55\xC1\x21\x2B\xD8\xCE\x20\x56\x17\x62\x6F\xD3\x8C\xC8\xD0\x91\x3E\xB7\x8C\x85\xCF\x9A\x0A\x27\x96\x26",
					"\xDC\xCD\x56\x72\xB4\x96\x9B\xCB\x39\xBF\x64\x9F\xCE\x20\x57\x17\x61\x7E\xE0\x97\xCF\x81\x18\x0A\xCF\x0A\x3C\xCD\x9F\x81\x29\x0B\x8B\x7C\x02\xCA\x6F\xCE\x38\x87\x21\x2F\xB3\x0F\xCD\x56\xB6\x66\xC2\x34\x87\x6F\xC1\xD2\x71\x6F\xCE\xB6\x8A\xDB\xA3\x42\x0A\x29\xBF\x4C\xD5\x3E\xB7\x95\xD1\x59\x7E\x91\xC2\xD3\x63\x66\xC0\x00\x98\xD1\x3B\x8B\xCB\x3F\x9F\x90\x2B\xC1\xD1\xD1\x3C\x43\x8A\xF2\xAB\xC8\xDB\x8C\xD2\x21\x4B\xD0\xC5\xAD\x2D\xD8\xD7\xED\x95\x3C\x43\x69\xB2\xAE\x8F\x82\x20\xD3\x8B\x7A\xD7\xD4\x9E\xDA\x3C\x61\x82\x21\xD5\x78\x76\xC7\xD7\x9A\xC1\x23\xB0\x81\x2B\xD8\x55\x7C\xD5\xC7\x0A\x32\x64\xB4\xE0\x51\x61\x84\x29\xD2\x34\xD3\xC0\x00\x83\xE5\x47\x68\x6D\xC6\x27\xDB\xA4\x35\xDA\x5A\xAC\xDB\x39\xAC\x84\xD8\x60\x0A\x23\xC9\xA3\x1C\x47\x72\x6F\xC7\x5E\x62\x09\x3D\xDA\x7E\x57\xD6\x20\x73\xC3\x22\xDE\xD6\xCB\x3B\xEA\x76\xD0\x5D\x71\xC2\x20\xDF\xFB\xD1\xD8\x00\x6E\xD1\x21\x7A\xC9\xE5\x3A\xAF\x70\x92\xBF\x0E\xE3\x21\x88\xCF\xE7\x5D\xC8\x67\xDF\x72\x1E\x79\x20\x75\xC9\xDE\x9A\xC5\xC9\x20\xC7\xFD\xDC\xDC\x70\x6E\x7C\xE0",
					"\xE2\xB7\x63\xC8\x83\x26\xE1\x80\xE0\x59\x81\x28\xE4\xC7\xC5\x03\xE6\x20\xB4\x5B\xDA\x3F\x5E\xDE\xC0\xB8\x51\xC9\x20\x9A\xE4\xDA\xE1\x16\xE3\x23\xCA\xF3\xDA\xE1\x8C\xC3\x27\xE4\x17\xE0\x73\x0C\xB1\xED\x50\xA4\xC3\x24\xC3\x49\xF2\xA7\x6A\x4E\xE2\x21\x02\xB7\xE4\xA6\x0A\x36\xEA\x41\x30\xE1\xEA\xE0\x44\x8C\xE9\xAA\x5C\xEB\xD3\xA5\xE0\xA3\x80\x10\xEB\x20\x14\xE4\xE9\x75\x64\xC7\x53\x35\xE4\x8F\xEC\x02\x2B\xE9\xD7\xA2\xAA\x55\x9C\xC2\x21\xED\x2E\xFA\x3F\x18\xED\xE5\x3B\xFC\xB2\xAE\xEE\x32\x84\xEC\xD6\x89\x22\xEF\x81\x19\x7F\xEA\x52\xF0\x34\x0E\x86\x2B\xEF\x9F\xD5\x3E\x8C\x12\xF3\x5B\xE2\x83\x20\xF3\xB9\xCE\x39\xCD\x7C\xEF\x5D\x12\x89\x24\xEB\xBC\xC0\x77\x91\x1A\xF6\xC3\xC5\x6C\xE3\x21\xAF\xD6\xF1\x3A\x72\xC9\xE4\xB8\x0D\xF2\x21\xCD\xE7\xF4\xA0\x94\xEA\x21\xE7\xBB\xD7\x59\x63\xA0\xED\xC8\x99\xE3\x20\xE6\xA5\xF2\xF1\x46\x42\xD3\x20\xB0\xD3\x58\xE8\x83\x2C\xF4\xCF\xCD\x53\x9F\xB7\xEE\x3A\xAE\xF2\xA3\xF8\x81\x15\xF6\xF1\xFA\x33\xA1\xF2\xD1\x31\xD9\x8A\x1C\xD5\xF7\xAA\x57\xA3\xF4\xE0\xD7\x63\xD4\xC3\x26\x93\x88\xEA\x55",
					"\x49\xDB\xF2\x5D\x36\xC6\x20\xFC\xAF\xE4\x35\x6A\x81\x28\xDD\x68\x45\x9C\xF1\xD8\xF5\x57\xA1\x89\x21\xF8\xD2\x00\xE0\xD5\x17\x2A\x23\xF3\xEA\xEA\x3F\x1F\x3E\xD2\x3F\xFA\x60\x62\xF9\x79\x10\x9D\x61\x6B\xCB\x12\x04\xFF\x75\x26\xFE\x6F\x6E\x09\x16\x67\x06\x16\x7B\xE9\x7C\x19\x45\x0C\x52\x06\x1E\x80\xC4\x71\x7F\xCE\x16\x04\x8E\x6A\x2A\x0C\x78\x7F\x0D\x8A\x7F\x18\x81\x1D\x48\x0B\x81\xB5\x28\x77\x1E\x85\x81\xD7\x71\x7E\xB5\x2A\x04\x24\x8E\x1C\x3E\x7C\x80\x06\x1F\x7B\x02\x10\x81\xD0\x75\x26\x4C\x04\x81\x03\x12\x83\x01\x15\x7C\xB4\x75\x1D\x4D\x0D\x82\xD1\x11\x74\x30\x89\x83\x20\x8A\x82\xCE\x1F\x04\x40\x82\x1A\x87\x71\x7A\x31\x89\x82\x11\x80\x1A\x51\x09\x84\xA4\x1A\x75\x02\x89\x10\xEC\x4C\x64\x8A\x61\x5C\x83\x6A\x66\x74\x1D\x6C\x1E\x1B\x5A\xB7\x62\x65\x60\x89\x64\x61\x8C\x64\xED\x77\x12\x67\x8F\x5D\x58\x61\x62\x21\x1C\x86\x24\x8B\x5A\x6E\x84\x7F\x6B\x15\x7F\x23\x1F\x66\x68\x16\x87\x21\x18\x87\x09\x84\x64\x7A\x83\x5F\x89\x14\x60\x1D\x1E\x5B\x68\x12\x88\x21\x14\x88\xBD\x58\x65\x86\x8E\x87\x46\x68\x6C\x35\x1C\x88\x29\x17",
					"\x6A\xAB\x50\x89\x21\x12\x89\x94\x52\x65\xA7\x68\x16\x05\x8C\x12\x99\x88\x5C\x58\x69\x5F\x68\x1B\x62\x49\x10\x8A\x32\x1B\x62\x9F\x8B\x85\x1D\x60",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}

			const wchar_t* TypeParserRuleName(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"EnumItem",
					L"Enum",
					L"ClassPropType",
					L"classProp",
					L"ClassBody",
					L"Class",
					L"Type",
					L"File",
				};
				return results[index];
			}

			const wchar_t* TypeParserStateLabel(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"[0][EnumItem] BEGIN ",
					L"[1][EnumItem] END [ENDING]",
					L"[2][EnumItem]< ID \",\" @ >",
					L"[3][EnumItem]< ID @ \",\" >",
					L"[4][Enum] BEGIN ",
					L"[5][Enum] END [ENDING]",
					L"[6][Enum]< \"enum\" @ ID \"{\" { EnumItem } \"}\" >",
					L"[7][Enum]< \"enum\" ID \"{\" @ { EnumItem } \"}\" >",
					L"[8][Enum]< \"enum\" ID \"{\" { EnumItem @ } \"}\" >",
					L"[9][Enum]< \"enum\" ID \"{\" { EnumItem } \"}\" @ >",
					L"[10][Enum]< \"enum\" ID @ \"{\" { EnumItem } \"}\" >",
					L"[11][ClassPropType] BEGIN ",
					L"[12][ClassPropType] END [ENDING]",
					L"[13][ClassPropType]\"token\" @",
					L"[14][ClassPropType]ID \"[\" \"]\" @",
					L"[15][ClassPropType]ID \"[\" @ \"]\"",
					L"[16][ClassPropType]ID @",
					L"[17][ClassPropType]ID @ \"[\" \"]\"",
					L"[18][classProp] BEGIN ",
					L"[19][classProp] END [ENDING]",
					L"[20][classProp]< \"var\" @ ID \":\" ClassPropType \";\" >",
					L"[21][classProp]< \"var\" ID \":\" @ ClassPropType \";\" >",
					L"[22][classProp]< \"var\" ID \":\" ClassPropType \";\" @ >",
					L"[23][classProp]< \"var\" ID \":\" ClassPropType @ \";\" >",
					L"[24][classProp]< \"var\" ID @ \":\" ClassPropType \";\" >",
					L"[25][ClassBody] BEGIN ",
					L"[26][ClassBody] END [ENDING]",
					L"[27][ClassBody]ID @ [ \":\" ID ] \"{\" { classProp } \"}\"",
					L"[28][ClassBody]ID [ \":\" @ ID ] \"{\" { classProp } \"}\"",
					L"[29][ClassBody]ID [ \":\" ID @ ] \"{\" { classProp } \"}\"",
					L"[30][ClassBody]ID [ \":\" ID ] \"{\" @ { classProp } \"}\"",
					L"[31][ClassBody]ID [ \":\" ID ] \"{\" { classProp @ } \"}\"",
					L"[32][ClassBody]ID [ \":\" ID ] \"{\" { classProp } \"}\" @",
					L"[33][Class] BEGIN ",
					L"[34][Class] END [ENDING]",
					L"[35][Class]< \"ambiguous\" \"class\" @ ClassBody >",
					L"[36][Class]< \"ambiguous\" \"class\" ClassBody @ >",
					L"[37][Class]< \"ambiguous\" @ \"class\" ClassBody >",
					L"[38][Class]< \"class\" @ ClassBody >",
					L"[39][Class]< \"class\" ClassBody @ >",
					L"[40][Type] BEGIN ",
					L"[41][Type] END [ENDING]",
					L"[42][Type]<< ( !Enum @ | !Class ) >>",
					L"[43][Type]<< ( !Enum | !Class @ ) >>",
					L"[44][File] BEGIN ",
					L"[45][File] END [ENDING]",
					L"[46][File]< Type @ { Type } >",
					L"[47][File]< Type { Type @ } >",
				};
				return results[index];
			}

			const wchar_t* TypeParserSwitchName(vl::vint index)
			{
				return nullptr;
			}

			TypeParser::TypeParser()
				: vl::glr::ParserBase<ParserGenTokens, TypeParserStates, ParserGenAstInsReceiver>(&ParserGenTokenDeleter, &ParserGenLexerData, &ParserGenTypeParserData)
			{
			};

			vl::vint32_t TypeParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
			{
				return -1;
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(const vl::WString& input, vl::vint codeIndex) const
			{
				 return ParseWithString<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(input, this, codeIndex);
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
			{
				 return ParseWithTokens<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(tokens, this, codeIndex);
			};
		}
	}
}
