/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGenTypeParser.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			void ParserGenTypeParserData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2588; // 38608 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 28;
				static const vl::vint dataSolidRows = 10;
				static const vl::vint dataRows = 11;
				static const char* compressed[] = {
					"\xD0\x96\x00\x00\x14\x0A\x00\x00\x23\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x83\x06\x84\x09\x0A\x99\x0A\x81\x1A\x80\x16\x84\x16\x0A\xF0\x46\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x91\x99\x97\x97\x92\x9A\x2C\xB8\xAE\x9A\x90\x9C\x8D\x9A\x9E\x37\xBE\xB9\x82\xAB\x9C\xA1\x9E\x83\x32\xB6\xA0\x80\xAB\xA6\xA1\xA0\xA4\x3F\xCE\x8D\xB0\xA3\xA4\xA9\xA2\xAB\x47\x83\x89\xAC\xA3\x9A\xA9\xAE\xAC\x4F\xDA\x91\xA1\x96\x81\x00\xAE\xA5\x5F\xE2\x95\xAA\xB7\xAC\xB5\xAC\x81\x5B\xDE\xA8\xB3\xB7\xB5\xBA\xB8\xBB\x60\xD3\xAE\xA1\xB0\xBB\xB3\xBC\xBD\x7D\xEB\x81\xCD\xB3\xC7\xB5\x81\xB8\x79\xE9\x85\xDC\xB7\xC6\xBF\xC4\xC0\x8D\x82\xD1\xC4\xC3\xCE\xC2\x90\xC7\x95\x8C\xD7\xD2\xCB\xCC\xC9\xCE\xCB\x88\xFF\x8A\xD9\xC0\xCF\xCE\xCD\xD0\x8F\xA3\xE6\xC5\xD8\xD1\x82\xB3\x84\xAF\x89\xF4\xB7\xB4\xDA\xD8\xBC\xD1\xB3\xB6\xF5\xD8\xD7\xD9\xD5\xDC\xDE\xBB\xBE\xFD\xC4\xDA\xD5\xD7\xD5\xE2\x98\xC7\xFF\xC2\xE1\xE4\xE3\xE4\xE7\xC3\xCA\xD1\xE6\xE4\xE9\xE5\xEA\xCE\xD7\x9E\xD9\xE0",
					"\xD6\xED\xEC\xEC\xEF\xDA\xE0\xDC\xFF\xE4\xF1\xF1\xF3\xF1\xE6\xE9\xD6\xC2\x0A\x81\xD8\xE0\xDD\xF0\xEF\xF2\xEC\xE1\xFC\xFB\xF8\xE8\xCD\xD2\xF9\xFB\xE7\xD2\xF1\xFF\xF3\xFF\x5E\x63\x01\x7B\xD3\x7E\x7C\x6A\x81\xC8\x40\x87\x82\x82\x09\xAA\x71\x80\x7A\x10\x8F\x82\x87\x82\x0E\x94\x81\x86\x85\x13\x8D\x87\x86\x86\x19\x8F\x7A\x7D\x7D\xF8\x60\x8F\x87\x7D\x23\xB6\x76\x89\x88\x24\xBC\x78\x87\x8A\x1C\xAC\x8E\x86\x8A\x2D\xB1\x8F\x88\x82\x33\x8C\x85\x8D\x85\x32\x85\x86\x8E\x8E\x38\xB7\x8B\x86\x8F\x1D\xBC\x8F\x8E\x90\x41\xBB\x74\x8C\x91\x2E\x88\x99\x8E\x91\x3B\x8C\x9D\x8E\x92\x40\x89\x9E\x93\x90\xF9\x4C\x40\x6C\x94\x58\x93\x95\x92\x88\x30\x91\x9B\x90\x97\x47\x9A\x92\x96\x41\x05\x04\x82\x9B\x97\x29\xA1\x90\x99\x93\x6B\x8F\x97\x9A\x97\x21\x5B\x47\x97\x9B\x59\xAD\x94\x96\x9D\x5B\xA9\x9C\x9A\x9E\x6E\xB8\x93\x9B\x40\x07\x26\x9E\x9C\x9A\x27\xA5\x88\x89\xA1\x5D\xB5\x9C\x9F\x9D\x8B\x9A\x68\x41\x59\x8A\x88\xA9\x71\x02\x82\x8D\xAF\x9E\xA4\x7B\x98\xAD\x9E\xA5\x84\x87\xAE\xA6\xA1\xA0\x89\xA4\x9F\xA8\x83\xB0\x91\xA7\xA7\xA2\xA5\xA7\xA9\xA8",
					"\x6A\x9C\xA6\xA8\xA9\xAE\xAB\xA9\xAB\x40\x0A\x15\xAA\xA4\xA3\xB7\xB9\x99\xAF\xA5\xA8\xAD\xAB\xAD\xA7\xAC\x99\xAD\xAE\xB0\xC1\x9B\xAF\xAF\xAB\x22\x8E\x43\x9E\xAA\xB0\x87\xB2\xAE\xAF\xC3\x86\xB1\xB4\xAE\xD3\xBA\xA5\xB4\xAF\xC5\x96\x6C\x02\x42\xEC\x4D\xB7\xB4\xB0\xB3\x8E\xBE\xB5\xB6\xD6\xA4\xB8\xB5\xB8\xDF\x88\xB1\xAF\xB8\xE8\xA6\xB0\xB8\xB4\xEE\xAA\xB2\xBA\x88\x0E\x36\xA9\xBB\xB3\xC4\xAD\xBA\xBC\xBC\xFB\xB9\xBC\xBF\xBF\xFE\x81\xC2\xB5\xBC\xF8\x83\xCD\xBF\xC0\x0F\x36\xB4\xC0\xBB\x00\xC6\xCD\xC0\xB5\x0B\xCC\xB2\xC7\xBA\x13\xF3\xB4\xC7\xC5\x16\xD9\xC7\xBC\xC3\x02\xD0\xC7\xC2\xC7\x0F\xE5\xB6\x70\x04\x0A\xDF\xC2\xC9\xC8\xE7\xA8\xCF\xB9\xC7\x27\xEC\xC9\xCA\xCB\xAA\x51\x05\xCA\xCA\xF2\x9B\xC5\xC6\xCD\x18\xF8\xCA\xC5\xC4\x39\xFC\xCB\xCE\xC9\x2F\xCE\xC0\xCD\xCD\x3E\xFA\xC6\xD1\xD1\x48\xED\xB0\x47\xB2\x3D\xC0\xDB\xCA\xD0\x50\xE0\xC3\xD1\xC1\x52\xD1\xDD\xCA\xD5\x41\xD0\xC3\x07\xCC\x53\xDC\xC8\xD7\xD3\x55\xE1\xD7\xD6\xD8\x59\xE3\xD6\xD9\xD9\x68\xE0\xD7\xDA\xDA\x69\xC4\xDE\xD2\xDB\x34\xD4\xDB\xD8\xDC\x5D\xF7\xC9\xD1\xDC\x5E",
					"\xE4\xDC\xDB\xDE\x74\xDF\xDD\xDE\xDE\x7F\xF3\xD2\xDD\xDB\x83\xFC\xD5\xE1\x48\x14\x1C\xDE\xDF\xE1\x8C\xE3\xB5\x06\xE2\x80\xCD\xE6\xDF\xDB\x92\xCD\xD8\xDF\xE4\x97\xC3\x46\x04\xB7\x95\xC5\xA8\x04\xE4\x82\xF9\xD1\xE8\xE6\x75\xD6\xE5\xEB\xCF\x99\xE8\xE7\xEB\xD1\x94\xE2\xE4\xE2\xEB\x86\xF0\xE1\xE3\xEB\xA4\xCB\xE3\xBA\x44\x4C\xEA\xE6\xED\xED\x91\xF2\xED\xE4\xEB\xA9\xC0\xFB\xEB\xDD\xC3\xED\xE2\x8A\x06\xA0\xF4\xE6\xEB\xEE\xCB\xFD\xEC\xEF\xE8\xCD\xD0\xFA\xEE\xF3\xD1\xCA\xF3\xF6\xF4\xC2\xCC\xF7\xF4\xB6\x1B\x09\xF1\xEF\xF3\xD6\xD9\xF4\xF7\xF6\xDF\xD5\xF5\xF8\xF9\xB3\xE7\xF2\xF8\xF6\xC4\xDA\xFB\xF9\xF8\xED\xE3\xFF\xF8\xB0\x1C\x1E\xF9\xF8\xD1\x1D\x36\xFF\xED\xFC\xEC\xC6\xF6\xFB\xFD\xFB\x7E\x7C\xFA\x01\x81\x78\xFE\x70\x7A\x80\xF3\x60\x81\x42\x1E\x0A\x7E\xDF\x4E\x80\x7C\xEA\x66\x81\x04\xC6\x3F\x03\x06\x90\x82\x81\x17\x84\x81\xF1\x05\x88\x80\x09\x84\x68\x04\x16\x9F\x7E\x06\x83\x64\x23\xDC\x49\x83\x84\xF2\x7E\x80\x0A\xFD\x7C\x83\x16\x84\x5A\x04\x21\x83\x83\x03\xBD\x60\x20\x13\xAA\x83\x86\x32\x99\x80\x0E\xA7\x8B\x86\x00\x24\x01",
					"\x86\x3C\x9A\x86\x10\xA2\x8D\x87\x0E\x86\x8E\x85\xEE\x77\x87\x10\xB9\x84\x45\x12\x0A\x66\x04\x40\x8A\x88\x11\xCB\x81\x89\x29\x96\x8C\x89\x58\x95\x89\x16\xD2\x8B\x8B\x23\x9B\x87\x8B\x49\x9E\x89\x18\xC8\x89\x84\x31\xA5\x8C\x8C\x2C\x80\x8F\x19\xEA\x89\x8D\x31\xAC\x8F\x80\x68\x90\x8C\xB1\x27\x01\x8B\x0E\x96\x26\x86\x66\x8D\x8F\x1A\xEE\x8C\x8F\x3D\xBE\x8A\x8F\x80\x92\x8D\x1F\x81\x91\x83\x14\x35\x89\x8E\x13\x88\x90\x06\xD7\x8A\x8B\x46\x9C\x8E\x91\x79\x82\x93\x1F\x92\x94\x91\x45\x9D\x8A\x91\x2B\x94\x92\x26\xAA\x3A\x05\x43\x83\x7B\x05\x9E\x83\x93\x26\x96\x90\x92\x4C\x85\x8E\x94\x54\x8F\x92\x2A\x91\x9A\x34\x8C\x36\x85\x05\x0A\x6E\x05\x28\x93\x99\x91\x37\xB5\x92\x94\xB7\x94\x94\x29\xAB\x98\x94\x46\xBC\x96\x96\xBB\x8C\x95\x30\xBD\x97\x92\x60\x99\x90\x58\x2F\x13\x95\x25\xC7\x93\x98\x63\xA7\x96\x99\xA9\x82\x98\x33\xAB\x50\x06\x65\xA3\x93\x9A\xCF\x98\x95\x33\xDA\x98\x9B\x68\x84\x9D\x94\x9C\x31\x06\xC2\x32\x0A\x61\x19\x16\x99\x97\xCB\x99\x9A\x2E\xDD\x9E\x96\x69\xAA\x99\x9D\xDE\x90\x99\x3B\xDF\x9F\x96\x6E\xAF\x9F\x9A\xF7\x88",
					"\x9C\xB6\x34\x01\x8B\x1A\x0A\x66\x06\x0A\x77\x07\x39\xDB\x9B\x9D\x7C\x84\xA0\x9E\xF3\x92\x9D\x31\x83\x68\x07\x28\xB9\x02\x61\x3A\x0A\x63\x0E\x03\xAC\x9D\x85\x85\xA1\x9E\xF6\x98\xA3\x45\x89\xA3\x60\x2D\x1C\x71\x21\xB5\x47\x4E\x4C\x21\xA6\x21\xA5\x49\x32\x4E\x89\x32\x25\xB7\x06\x24\x52\x91\xA9\x24\xA4\x03\x2D\xA2\x57\x2B\xA4\x56\x25\x63\xA7\x21\x5C\x34\xA6\x40\x30\xAF\x57\x9B\x89\x26\xA4\xA2\x28\xA6\x68\x30\x4E\xA6\x83\x0D\x06\xA6\x2F\xAA\x23\x51\xDE\x2E\x3C\xB2\x04\x3C\xA7\x01\x3B\x58\x53\x9F\xA9\x30\xA8\x80\x02\xAA\x89\x2D\xAA\x6B\x5C\x26\xAA\xAC\xA2\x32\xA7\x01\x25\x4E\x4B\xA6\x26\xAA\x65\x43\x55\xA8\x03\x2B\xAB\x59\xC9\xA9\x20\xB5\x81\xAC\x2B\x44\xAC\xAE\x41\x32\xAB\xAC\xB2\x8A\x25\xA5\x89\x20\xAC\x00\x62\xA9\xAE\x85\x3C\xAF\xAB\x0A\x36\x49\x5F\x89\x22\xB0\x4E\x68\xAA\x20\x74\xA2\x36\x56\x80\x0B\xB1\xC3\x81\x27\x51\x6F\xBE\x29\x5C\xF6\xA9\x21\xC4\xA9\x33\xB1\x68\x36\xA8\x64\xA9\x32\xA9\xD4\x32\x25\xB0\x9E\xA9\x26\x5E\xA0\xB4\x38\xD2\x87\x3A\xA5\x81\xBC\x2A\x69\xB2\x28\xB5\x84\x38\xAA\x34\x7F\xA1\xB6\x49\x1D",
					"\xB4\x38\x99\x31\xB5\xB6\x29\x34\xB7\x69\xA2\xBA\x21\x01\x5E\x2B\xB5\xAC\xA6\x27\x68\xB9\xAD\xB6\xD5\xB0\xAC\xB7\x84\xA4\xB9\x42\x3E\xB9\x30\xE0\x81\xBF\x23\x7A\xAF\xB4\x67\xC7\xB6\x24\xE7\x8F\xBD\x23\xC3\xBF\xB4\x75\xA3\x29\xBB\xE6\x9B\xB8\xBA\x77\xBC\x2A\x6E\xD7\xBF\x22\xEB\x97\xBD\xBB\xA2\x26\xBF\x73\xE8\xB9\x34\xF5\x81\xB9\xBA\x5C\xAA\x22\xCC\x5E\x26\xAB\xF9\x95\xAA\x21\x56\xAE\xB0\x00\x79\xB2\xAE\x40\x71\xB9\x21\x81\x54\xBE\x42\x01\xC2\x44\x06\x8E\xAB\x20\x8B\xBA\xAE\x82\xC5\xB9\xB9\x84\x37\xB0\x00\xBA\xA4\xC2\x7F\x89\x2B\xB3\x80\x12\xB9\x20\x12\xC2\x23\x85\x80\x09\xC2\x0B\xCA\x25\xC2\xFB\xA3\xC0\x7E\xA2\xC0\xA5\x0F\xCD\x24\xC4\x06\x26\xAF\x84\xA9\xC6\xC5\x84\x1E\xAF\xC0\x20\xC7\xC2\x41\x53\x0A\x61\x90\x31\xC2\xC6\x02\x34\x0A\xC2\x7A\xA7\x02\x1C\xDB\xA9\x3F\xCC\xA3\x21\x05\xBE\xC1\x25\x2A\x0A\x61\xC8\x02\x23\xC8\x91\x89\x26\x0A\x85\x66\xB7\x87\x3E\xCD\xB1\x72\x26\xB4\x8F\x28\xD1\x3F\xC1\xA0\x9E\xC4\x92\x9F\x5B\xB1\x4E\x9A\xC9\x3A\xBA\xB2\x97\x92\x89\x27\x0A\x85\x7A\xB1\x99\x63\xC6\x20\x16\x66\xCA\x20\x34",
					"\xE9\xCA\x20\x59\x0A\x60\x0F\x44\xCB\xCA\x50\x5E\x41\x24\x8B\xA9\xC1\x74\x7A\xA2\xCA\xCE\x1E\x45\xCE\x7D\xC3\x61\x9D\xFA\xA6\x39\x83\xA5\x36\xB4\xE3\xA9\x3A\x87\x26\xB1\xD0\x88\x7A\xB4\xBF\x7E\xCB\x57\x83\x84\xD9\x39\x0E\xC0\x03\xC3\x85\xD5\xA0\x86\x8C\xC2\x44\x0F\x56\xD3\xB1\x20\xDA\xAC\x9E\xAD\xCC\xA5\xE8\x06\xD2\x35\x20\xD5\xCD\xA6\xF9\x36\xAB\xC5\xAA\xC2\x20\x7C\xCA\x63\x86\x8F\xCB\xD4\x11\x6E\xAA\x20\x8D\xC5\x5E\x55\x96\xD5\xD6\x8E\x96\x37\xD5\x01\x37\xD7\xA7\x27\xD1\x24\x60\xC0\x04\x64\xF9\x24\x69\xBD\x09\x24\xD2\xCE\x06\xDE\xBE\x24\x44\x68\xB2\x86\x2D\xD8\xCF\x02\xDF\xAA\xA6\xD1\x38\x50\xB0\xDB\x55\x65\xC6\x27\xC5\xC3\xD1\x39\xE2\x4C\xDB\x55\x84\x49\x26\xDB\xD1\xDA\xD3\xB1\x8A\x20\xDC\x3B\xD1\x3B\x73\xE4\xC3\x5C\xB4\x82\x26\xDD\x4E\xEA\xDB\xDB\x01\x23\xDE\xBD\xF9\x3F\x72\x3C\xB0\x5A\xDF\x03\x3D\xDF\xBE\xF6\x68\x76\x6A\xD1\x3F\x71\x6D\xB9\xD9\x0F\xB1\xD9\x20\x84\xC6\x23\xDA\xE9\xC3\x5D\xF7\x71\xD6\x20\x40\xCA\x26\xE1\x03\x33\xDD\xB8\xE3\x59\x7E\x8A\xC3\x24\xD1\x0A\x30\xDE\x41\x5B\x69\xD9\xE8\x0A\xC8\xC1",
					"\xAB\x5D\xC5\x42\x22\xE1\xE2\x8D\x9A\x32\xE0\x03\x38\xE1\xA1\x44\xD1\x22\x85\x13\xE3\xE0\x3D\x60\x86\xC7\x85\x57\xE7\x81\x06\xC0\xE7\x16\xBA\x31\xCF\x82\x25\x7F\x92\xC6\xA2\x21\x45\xE6\x21\xC7\xC0\xE7\x68\x18\xBB\xE7\x53\x4B\xFE\xE6\xC2\xAE\xE5\x35\x9F\xC3\x20\xE0\x33\xF1\x38\x94\x90\x59\x3F\x07\xCB\xB6\xEA\x02\x3A\xE4\xD3\xF5\x96\x33\x93\xC2\x20\xEB\x1B\xE2\x46\x13\xFE\xDC\x32\xDD\x8B\xB6\xEC\x01\x22\xED\xCB\xBE\xDA\x32\xB9\xC2\x20\x79\x46\xF4\xEA\x6A\x25\x86\x21\xB5\xE3\xEE\x38\x50\x8C\xEC\x09\x8A\x21\xF1\xBF\xC9\x3D\xCA\x5C\xF6\x6D\x0D\x86\x23\xE9\xB4\xFD\x67\x8E\x06\xE0\xC2\xC2\x5B\xE3\x20\xA7\xC6\xF4\x33\x5E\xD5\xE3\xAA\x7E\xE3\x21\xC5\xF3\xE9\xE8\xA5\x25\xF3\x40\x0D\xFE\xDD\x71\x70\x97\xE9\x04\x2A\x60\xE2\x95\xF3\xEA\x12\x6E\xCB\x20\xAA\xD0\x5C\xE4\x83\x2C\xF3\xAC\xF9\x3C\x9C\xA8\xE6\x3B\x86\x8B\xB3\xF6\x81\x22\xF6\xF6\x22\x5C\x9D\xEE\xC9\x3D\xD5\x8A\x0A\x21\xD1\x91\xD9\x3C\x40\xC3\xFE\xD8\x85\x59\xF3\x20\x86\x99\xEC\x89\x16\xB1\x21\x6A\xD0\x61\xCB\x06\x31\xFB\xE5\x9E\x31\xA2\xE6\xC3\x66\x95\x7D\xED\xF5",
					"\xA1\x73\xCB\xB9\xE8\x2D\xDA\xAF\xE0\xE3\x23\xEF\x8E\xF5\x51\x1F\x1C\xD4\x44\xE8\xDC\xD9\x42\x69\xF2\x20\xE4\xDE\x36\x43\x42\x0F\xFD\xA1\x10\xE2\xFE\x83\x22\xCE\x20\xA7\x7B\x7D\x96\x15\x04\x14\x59\x10\xFF\x74\x7B\xE2\x7F\x29\x46\x04\x55\x24\x28\x6F\x00\x0A\x57\x07\x8E\x7B\x09\x80\x2A\x48\x0C\x80\x85\x28\x76\x0F\x8A\x10\x11\x81\x10\xF6\x76\x19\x1E\x2A\x04\x16\x8F\x29\x2C\x7D\x7F\x03\x1F\x7A\x02\x11\x80\x9F\x7F\x29\x4C\x05\x80\x06\x16\x82\x01\x15\x7B\xEC\x7F\x29\x4D\x01\x82\xA0\x20\x73\x24\x82\x10\x2E\x80\x00\xEB\x75\x7A\x22\x2F\x04\x34\x86\x1C\x78\x71\x79\x2D\x87\x7C\x13\x86\x1C\x51\x0F\x83\xC9\x19\x74\x03\x1A\x57\xD5\x4E\x63\x85\x6C\x5A\x6F\x64\x64\xB9\x60\x12\x53\x8D\x11\x98\x53\x6A\x52\x8B\x64\x57\x85\x63\x21\x16\x7D\x27\x1E\x85\x1E\x12\x6A\x5D\x84\x83\x19\x88\x7A\x65\x89\x78\x42\x8B\x84\x21\x11\x7B\x2C\x1C\x86\x26\x15\x67\x64\x10\x87\x6B\x8B\x64\x72\x8A\x7F\x07\x6E\x5E\x2A\x18\x87\xFF\x06\x5A\x64\x1C\x87\x21\x1E\x87\xA9\x54\x64\x80\x8D\x60\x3E\x64\x6B\x35\x16\x88\x29\x1E\x75\x21\x1A\x88\x7E\x55\x63\x0F\x64",
					"\x16\x8F\x81\x27\x67\x1D\x81\x1F\x1A\x5B\x64\x16\x89\x21\x1C\x6B\x35\x1A\x89\x29\x16\x69\x64\x1E\x89\x51\x83\x10",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}

			const wchar_t* TypeParserRuleName(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"EnumItem",
					L"Enum",
					L"ClassPropType",
					L"classProp",
					L"ClassBody",
					L"Class",
					L"Type",
					L"File",
				};
				return results[index];
			}

			const wchar_t* TypeParserStateLabel(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"[0][EnumItem] BEGIN ",
					L"[1][EnumItem] END [ENDING]",
					L"[2][EnumItem]< ID \",\" @ >",
					L"[3][EnumItem]< ID @ \",\" >",
					L"[4][Enum] BEGIN ",
					L"[5][Enum] END [ENDING]",
					L"[6][Enum]< \"enum\" @ ID \"{\" { EnumItem } \"}\" >",
					L"[7][Enum]< \"enum\" ID \"{\" @ { EnumItem } \"}\" >",
					L"[8][Enum]< \"enum\" ID \"{\" { EnumItem @ } \"}\" >",
					L"[9][Enum]< \"enum\" ID \"{\" { EnumItem } \"}\" @ >",
					L"[10][Enum]< \"enum\" ID @ \"{\" { EnumItem } \"}\" >",
					L"[11][ClassPropType] BEGIN ",
					L"[12][ClassPropType] END [ENDING]",
					L"[13][ClassPropType]\"token\" @",
					L"[14][ClassPropType]ID \"[\" \"]\" @",
					L"[15][ClassPropType]ID \"[\" @ \"]\"",
					L"[16][ClassPropType]ID @",
					L"[17][ClassPropType]ID @ \"[\" \"]\"",
					L"[18][classProp] BEGIN ",
					L"[19][classProp] END [ENDING]",
					L"[20][classProp]< \"var\" @ ID \":\" ClassPropType \";\" >",
					L"[21][classProp]< \"var\" ID \":\" @ ClassPropType \";\" >",
					L"[22][classProp]< \"var\" ID \":\" ClassPropType \";\" @ >",
					L"[23][classProp]< \"var\" ID \":\" ClassPropType @ \";\" >",
					L"[24][classProp]< \"var\" ID @ \":\" ClassPropType \";\" >",
					L"[25][ClassBody] BEGIN ",
					L"[26][ClassBody] END [ENDING]",
					L"[27][ClassBody]ID @ [ \":\" ID ] \"{\" { classProp } \"}\"",
					L"[28][ClassBody]ID [ \":\" @ ID ] \"{\" { classProp } \"}\"",
					L"[29][ClassBody]ID [ \":\" ID @ ] \"{\" { classProp } \"}\"",
					L"[30][ClassBody]ID [ \":\" ID ] \"{\" @ { classProp } \"}\"",
					L"[31][ClassBody]ID [ \":\" ID ] \"{\" { classProp @ } \"}\"",
					L"[32][ClassBody]ID [ \":\" ID ] \"{\" { classProp } \"}\" @",
					L"[33][Class] BEGIN ",
					L"[34][Class] END [ENDING]",
					L"[35][Class]< \"ambiguous\" \"class\" @ ClassBody >",
					L"[36][Class]< \"ambiguous\" \"class\" ClassBody @ >",
					L"[37][Class]< \"ambiguous\" @ \"class\" ClassBody >",
					L"[38][Class]< \"class\" @ ClassBody >",
					L"[39][Class]< \"class\" ClassBody @ >",
					L"[40][Type] BEGIN ",
					L"[41][Type] END [ENDING]",
					L"[42][Type]<< ( !Enum @ | !Class ) >>",
					L"[43][Type]<< ( !Enum | !Class @ ) >>",
					L"[44][File] BEGIN ",
					L"[45][File] END [ENDING]",
					L"[46][File]< Type @ { Type } >",
					L"[47][File]< Type { Type @ } >",
				};
				return results[index];
			}

			const wchar_t* TypeParserSwitchName(vl::vint index)
			{
				return nullptr;
			}

			TypeParser::TypeParser()
				: vl::glr::ParserBase<ParserGenTokens, TypeParserStates, ParserGenAstInsReceiver>(&ParserGenTokenDeleter, &ParserGenLexerData, &ParserGenTypeParserData)
			{
			};

			vl::vint32_t TypeParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
			{
				return -1;
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(const vl::WString& input, vl::vint codeIndex) const
			{
				 return ParseWithString<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(input, this, codeIndex);
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
			{
				 return ParseWithTokens<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(tokens, this, codeIndex);
			};
		}
	}
}
