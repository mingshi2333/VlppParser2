/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGenTypeParser.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			void ParserGenTypeParserData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2106; // 26104 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 58;
				static const vl::vint dataSolidRows = 8;
				static const vl::vint dataRows = 9;
				static const char* compressed[] = {
					"\xF8\x65\x00\x00\x32\x08\x00\x00\x17\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x83\x06\x84\x09\x0A\x99\x0A\x81\x1A\x80\x16\x84\x16\x0A\xB0\x4C\x86\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x91\x99\x97\x97\x92\x9A\x2C\xB8\xAE\x9A\x90\x99\x86\x98\x9B\x20\xBC\xB7\x9E\x95\x9A\xA1\xA0\xA2\x39\xC8\xBB\x8A\xAD\x9C\x8D\xA3\x90\x09\x81\x06\xB3\x9C\xA3\xA2\xA7\xA4\x57\xCB\x99\xAD\xA3\x87\x9F\xA8\xA0\x54\xDB\x96\xBD\xAF\xA2\xB3\xA2\xB3\x61\xE4\x98\xAA\xBA\xAC\xB4\xAE\x81\x5E\xD5\xA7\xAE\xB3\xB0\xB9\xB2\xBA\x73\xF6\xAB\xBA\xBD\xB4\xBF\xB7\x80\x71\xE8\xA0\xA3\xCA\x82\xA9\xA9\xAF\x88\xF2\xA9\xBE\xB5\xB8\xC3\xBA\xC6\x79\x8E\xFB\xB2\xCD\xBC\xCB\xBE\x91\x8F\x96\xCD\xD8\xC3\xCC\xCD\xCA\xCF\x97\x81\xF8\xAB\xCA\xC9\xC8\xD1\xCD\xA2\x90\xE4\xC7\xD6\xD1\xD5\xD3\xD5\xAE\xAC\xF0\xD9\xC2\xDC\xC2\xC4\xDB\x82\x89\xF9\xD7\xDA\xDB\xD0\xDC\xDF\xBD\x82\x82\x05\xC1\xE7\xD7\xDE\xD5\xC7\xC6\xC5\xF5\xDB\xE1\xDA\xE6\xDA\xB1\x83\x04\xFC\xD4\xEB\xDE\xEA\xE0\xD5\xD8\xD7\xE8",
					"\xED\xE0\xEA\xEF\xCE\xCF\xE0\xDF\xFF\xC1\xF4\xF3\xF1\xD0\xE7\xA8\xE9\xED\xDB\xF3\xDA\xF1\xF7\xE6\xF0\xE8\xF2\xFA\xF4\xF8\xF6\xFB\xEE\xF1\xFA\xF3\xFB\xFD\xF9\xFF\xFB\xFF\x79\x7C\x7F\x80\xFE\x44\x80\x82\x81\x02\x85\x8A\x83\x81\x0B\x89\x8C\x83\x83\x0E\x91\x89\x70\x73\xD9\x4B\x43\x77\x76\xCA\x55\x89\x84\x86\x14\x9C\x85\x78\x82\x13\x9F\x8D\x81\x88\xB4\x45\x07\x86\x76\x28\x9C\x7A\x85\x87\x29\x9B\x83\x42\x01\x27\xAA\x8E\x85\x7B\x24\xB8\x75\x8D\x80\x37\xA0\x8D\x76\x8D\x0A\x47\x01\x8E\x8B\x32\xAD\x8C\x89\x90\x44\x80\x91\x40\x42\x06\x46\x63\x8D\x67\x09\x3F\x83\x92\x91\x4F\x91\x92\x88\x84\x39\xA3\x8B\x8C\x8E\x57\xBA\x8B\x8B\x94\x12\x99\x96\x97\x96\x34\x9E\x94\x96\x98\x5D\xA0\x9C\x8E\x99\x9F\x4A\x0E\x90\x97\x55\xA3\x98\x9A\x96\x4B\x98\x9F\x9B\x97\x71\xB0\x93\x42\x43\x87\x73\x9E\x99\x9D\x74\x82\x9C\x98\x99\x6D\xA5\x9C\x84\x03\x0A\x43\x7A\x9E\xA0\x7E\xA1\x97\xA1\xA0\x8C\x80\xAE\xA3\xA2\x8F\xBC\x9B\x9D\xA2\x67\x9C\x8E\x03\x9A\x8A\x92\xA8\xA1\x91\x52\x99\xA4\xA6\x9C\x9A\x8D\xA0\xA7\xA8\xA1\x91\xA3\x43\x03\x98\x95\xAF\xA6\x9D",
					"\x9C\xBF\x94\xAB\xAA\x7D\xAD\xAE\xA6\xAC\xAA\xB4\xA0\xA8\xAC\x93\xB6\xAC\xA8\x94\xAE\xA5\xAF\xA8\xA7\x10\x29\xA7\xAE\xAE\xB1\xBC\xA3\xAE\xB1\xB5\x90\x91\x06\xB0\xBB\x9D\xA9\xB2\xB3\xC3\x88\xB1\xB4\xB4\xCD\xBD\xA8\xAF\xA6\xD2\x95\xB7\xB0\xB5\xC5\x9C\xB9\xAD\xB6\xDD\x96\xB2\x40\x44\x79\xBE\xA6\xBB\xB5\xA2\xA7\xB4\xB3\xB7\xDE\x98\xBD\xB9\x48\x13\x0C\xB1\xBB\xB6\xE2\xA0\xBC\xB9\xBD\xEF\xA6\xAB\xBA\xBB\xF8\xBD\xB4\xBF\xBF\xCF\xBE\xB1\xC0\xC0\xD3\x82\xC5\xC0\xC1\xDA\x83\xCA\xC3\xC1\x0B\xC9\xCC\xC3\xC3\x0E\xD1\xC3\xBF\xB3\x14\x32\xB7\xBC\xC2\x13\xD3\xB5\x06\xC5\xFC\x98\xC7\xC5\xC3\x19\xD2\xCF\xC7\x67\x16\x05\xAA\xBD\x40\x18\x1C\xC9\xB8\xBA\x27\xF9\xBF\xAE\xBD\x1D\xE0\xC3\xCA\xC8\x31\xD0\xC1\xCB\xCD\x33\xF8\xC5\xCC\xCD\x2B\xFB\xB1\x4A\x44\xE5\xAC\xCF\xCA\xCB\xEA\xB0\xCD\xCE\xD1\x2D\xC6\xCC\xCD\xCB\x1A\x2A\xC9\xD2\xC7\x3B\xFA\xC7\xD0\xD1\x42\xC5\xD4\xD6\xCF\x4F\xF2\xC1\xD4\xBB\x1B\x0E\xD3\xD2\xD2\x52\xD9\xD6\xCD\xCE\x64\xDB\xD6\xDB\xD4\x60\xE5\xD8\xD8\xD4\x6B\xDA\xD3\xD4\x07\x5E\xDC\x8D\x05\xDC\x55\xF5\xD8\xD7\xD7\x6C",
					"\xE2\xDB\xD0\xDE\x6E\xFA\xD1\xD8\xDF\x9F\x5E\x04\xDF\xDD\x56\xE9\xD7\xDA\xDF\x6A\xCA\x4F\x07\xE0\x48\xC0\xEB\xDD\xE1\x79\xCE\xEB\x64\x08\x8C\xD7\xDD\xE0\xE4\x9D\x54\x41\xD0\xE1\x76\xD7\xED\xE6\xE5\xA0\xC6\xE1\x4A\x08\x95\xE2\xE8\xE2\xBB\x23\x25\xE1\xE4\xE6\x63\xEE\xB4\x0A\xEA\x7D\xD2\xE9\xE2\xEC\x87\xF4\xED\xD9\xEB\xB7\xCD\xB5\x0A\x93\x26\x30\xE8\xEF\xE9\xB9\xFF\xDC\xEB\xE3\x9F\xE6\xE6\xEC\xF0\xC8\xC7\xFA\xF3\xF0\xC2\xC5\xFB\xEA\xF3\xB1\xCC\xF3\xEE\xF4\xB5\xD4\xF1\xF2\x69\x27\x3E\xE7\x66\x45\x9B\xDE\xEC\xE7\xF7\xDE\xE1\xF1\xEB\xF3\xE0\xE3\xF1\xF4\xF4\xBF\xC9\x49\x0A\xF6\xCD\xE5\xF6\xF2\xF5\xC9\xF0\xFB\xF0\xFA\xC4\xEE\xF4\xFA\xF8\xEF\xF4\xFD\xFA\xF8\x2A\x2C\xF6\x6B\x0A\xFE\x75\x7A\xFE\x53\x73\x80\x01\xB6\x7F\x7C\x07\x89\x7E\xD5\x18\x2D\x7A\x00\x2D\x06\x49\x2E\x01\x83\xF5\x06\x88\x7F\xFB\x66\x7A\x81\x05\x93\x82\x06\xF1\x79\x82\x0E\x89\x85\x7E\x15\x88\x81\x40\x2F\x02\x82\x0F\xA1\x80\x83\x1F\x9B\x7F\x05\xA0\x8B\x85\x6E\x70\x05\x84\xF3\x69\x84\x01\xB2\x84\x83\x16\xB3\x87\x84\x2C\x91\x35\x0C\x4E\x42\x06\x27\x73\x00",
					"\x86\xF2\x61\x89\x07\xB1\x88\x86\x15\xB9\x7C\x86\x1B\x84\x8A\x0D\xB5\x87\x89\x22\xB7\x81\x4A\x34\x15\x71\x0D\x4E\x46\x06\x27\x77\x00\x88\x43\x82\x88\x12\xA6\x8B\x89\x24\x86\x20\x07\x95\x79\x06\x93\x3A\x0E\x49\x1D\x18\x8B\x8B\x4A\x8D\x89\x17\xDC\x8A\x8C\x27\x26\x61\x21\x48\x57\x5A\x4C\x3E\x4A\x21\x38\xAF\x36\x44\x8A\x32\x26\xA1\x06\x24\x8E\x4D\x73\x88\x5E\x8A\x3B\x8F\x40\x76\x80\x67\x3F\xB5\x89\x90\x87\x87\x52\x21\xF0\x8A\x30\x3C\xA8\x2C\x4B\x8B\x83\x22\x00\x1B\x22\x8F\x94\x3D\x8A\x92\x94\x8A\x36\x92\x50\x2A\x35\x4B\x82\x21\x00\x99\x8F\x37\x26\xC2\x33\x2A\x4F\x81\x20\x94\x8A\x23\x97\x29\xA5\x95\x31\x50\xB2\x32\x90\x16\x4A\x92\x25\xA1\x2E\x94\x48\xB3\x91\x21\x93\x92\x96\x49\x26\x90\x01\x5C\xA8\x2E\x91\xA3\x36\x97\x2E\x80\x9E\x8F\x5B\x89\x4A\x3A\x68\x30\x95\x40\x2E\x9F\x94\x85\x0C\x9A\x8F\x0A\x28\x99\x32\xD1\x94\x4D\x48\x83\x21\x5E\x68\x2A\x94\x00\x5A\x96\x9A\x81\x12\x9A\x35\xC0\x8A\x36\x30\xA3\x2C\x96\x00\x18\x9B\x34\xDA\x80\x2D\x39\xDF\x97\x8F\xA9\x10\x99\x21\xEC\x8F\x36\x32\x80\x01\x9F\x66\x89\x24\x97\x32\x21",
					"\x9F\x6B\x79\x9E\x9D\x94\x33\x9B\x9E\xEF\x86\x21\x3D\x81\xA2\x93\xA9\x33\x9B\xA0\xFE\x8F\x8F\x34\xF7\x93\x2A\x7D\xB2\x34\xA0\xDE\x86\xA0\x35\x88\x9C\xA1\x46\xBD\x9E\x24\x07\xB2\xA0\x3C\x9A\xAC\x8E\x56\xBD\x42\x31\xE5\x86\x95\x37\xBD\x91\x9F\x91\x82\x05\xA4\x29\x2F\x9A\x4C\x29\xA7\xA2\x72\xA1\x22\x99\x23\xBD\x94\x48\xAF\xAA\x30\xC1\x5C\x93\x20\xDA\x9F\x9E\x42\x83\x25\x9E\x66\x8E\xA0\x46\x15\xBD\xA0\x23\x89\x2D\x49\xA0\x83\x25\xA8\x42\xA6\x20\x52\x83\x9A\x20\x35\x46\xAA\x20\x4E\xA9\xAB\x40\x51\xAC\xA9\x84\x38\x4A\xAA\x02\x37\xAB\x40\x3C\x9A\xAB\x83\x0A\x24\x50\x37\xBE\xA9\x42\x45\x0E\x49\x90\x04\x90\x00\x46\x0E\x4B\x3C\x80\x2B\x45\x7A\x8B\x71\x21\x47\x0E\x4A\x5B\x8A\x28\x08\x27\x4C\x9F\x75\x2B\x4C\x99\xF6\x2B\x4E\xA0\x00\x89\x21\x09\x4E\x5A\x99\xFF\x09\x2A\x08\x27\x40\xAE\x20\x11\x89\x23\x12\x06\xBA\x20\x12\x89\x24\x09\x8C\xA9\x22\x63\x86\x2D\x08\x27\x7C\x01\xAC\x11\xB8\xB3\x36\xEA\xAB\x39\x79\x9A\x9D\x9E\xDC\x9B\x59\x3D\x80\xA6\x82\x66\x87\xB3\x20\xCC\x81\xB7\xB3\x27\xB0\xAB\xE5\x0E\xA4\xB4\x9D\x3C\x97\x52\xE8",
					"\x88\xAB\x80\x35\x9C\x97\xDA\x87\xAF\x3C\xA1\x29\xB6\x85\x33\xB6\x89\xAB\x27\xAD\x3D\xD4\xAF\x93\x86\x3B\xA5\xB8\x0D\x9F\xB4\x00\x0E\xAD\x01\x33\x81\x24\xB8\x01\x38\x9E\x05\xDD\xA1\x21\xE6\x8A\x8C\xBA\x00\x01\x5B\x8A\x17\x58\x97\xE5\x18\xBB\x59\x2B\x5A\xBA\x41\x30\xBF\x32\xEB\x86\x20\xAC\x06\x24\x5F\x78\xAD\x6C\xBB\xF3\x8A\x25\x62\xDD\xA3\x68\xAA\x09\x2D\xBD\x2C\x83\x22\xBC\x03\x28\xBF\x40\x25\x61\xBE\xAB\x60\xBE\x20\xF3\xBA\x89\x40\x6A\xB3\x20\xF8\x86\x21\x65\x0D\x98\x5E\x81\x83\x28\xC0\x0E\x40\x6B\xBD\x2B\x5B\x61\x42\x66\xBF\x72\xCF\x8A\x22\xC2\x06\x38\xBC\xA7\x5D\x6D\xBE\x9E\x8E\x48\xC3\x03\x3F\xBE\x90\x73\x6D\xC3\x58\x89\x4A\x21\xFC\xA6\x23\x39\x83\x2F\xAD\x13\xC3\x6C\xAD\x06\x29\xC6\x7D\x82\x2D\xC1\x81\x20\xC4\xB6\x03\x2F\xC3\x40\x1C\xCC\x42\xCA\x65\xC0\x4A\x3C\xC3\x22\x4D\x82\xC0\x01\x20\xC2\x20\x6E\x4A\x88\xCA\x41\x24\xCC\x42\xD2\x7F\xC1\x4A\x4C\xC2\xC8\x17\xC3\xC5\xC0\x85\x38\xAE\xC5\x1C\x4E\xA2\x36\xD4\xC2\x20\x1F\xC4\xCD\xC5\x55\xC9\x23\xEE\x09\xC4\x36\xD6\xAB\x91\x21\x60\xDD\xC8\x17\xDE\xC3\x21\xA6",
					"\x4A\x8A\x73\x06\x23\xCE\x41\x3D\x74\xCD\x67\x70\xCB\x20\x74\xC6\x23\x5E\xD8\xCF\x73\xD4\x49\x26\xC8\x50\x5C\x78\x84\xB5\xBB\xB3\x84\x17\xCB\x20\x4E\xC6\x23\x60\x82\xAD\x64\x39\xC3\x26\xCF\x44\xD9\xCF\x8E\xCB\x3F\x81\x27\xE7\xAA\x9B\x7B\xC8\xD1\x63\x93\xA6\x6A\x41\xC3\x26\xD1\x02\x3D\x85\x9D\x9F\x3A\xB8\x6D\x9E\xD2\x20\x92\xC2\x23\x0F\xA3\xD7\x32\xE8\x85\xD6\x20\xA7\xC1\x22\x99\x80\x01\x8A\x56\xDB\x30\xBB\x82\xAA\x23\xFA\x09\x23\x8A\x5B\xEC\x5E\xAF\x06\x3B\xD6\x41\x55\x8E\xD6\x77\x4C\x81\xCE\x0A\x37\x8B\x93\xB1\x3A\xBE\x52\x89\x27\xD8\x78\xCA\x22\x18\xCB\xD4\x37\xFA\x8E\xDE\x20\xD0\xC2\x23\xAC\xE6\x84\xDB\xCE\x1A\xC1\x20\xF3\x89\xB2\x41\x15\xD6\x21\x1E\x0E\xB8\x00\xE2\xDF\xD2\x42\x3E\x05\x72\x02\xD7\xDB\x20\xE9\xC8\xD6\x42\x3F\x05\x73\x05\xEF\xDA\x20\xF1\xD2\xD6\x42\x40\x05\x72\x19\xF7\xDB\x84\x0A\x24\xDF\x40\x41\x07\xDD\xC9\xAA\xD9\x21\x42\x15\x71\x8D\xFF\xD0\x00\x83\xF2\xD9\x21\x43\x15\x72\x9B\x83\xD3\x20\x87\xFA\xD9\x21\x44\x15\x72\x92\x85\xA9\x21\x17\x9A\xB0\x2A\xAB\x3C\x91\x3A\xDC\x93\xE4\xDE\xA6\xE5\xAC",
					"\xBB\xA0\xA1\xCA\xB4\xA7\xB8\x86\xF4\x99\x24\x03\xB5\x9F\xCB\x9C\xDC\xD0\x9A\xE8\xB4\x96\x31\x2C\x98\x00\x3A\xEC\xE6\x9C\xCE\x99\x24\x0E\xAB\xB9\x4C\x41\xE4\xE8\xA0\xC6\xEA\x21\xB3\xC0\x03\xAC\xFF\x19\xE9\xA4\xE1\xA1\x26\x4F\xEA\x20",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}

			const wchar_t* TypeParserRuleName(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"EnumItem",
					L"Enum",
					L"ClassPropType",
					L"classProp",
					L"ClassBody",
					L"Class",
					L"Type",
					L"File",
				};
				return results[index];
			}

			const wchar_t* TypeParserStateLabel(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"[0][EnumItem] BEGIN ",
					L"[1][EnumItem] END [ENDING]",
					L"[2][EnumItem]< ID \",\" @ >",
					L"[3][EnumItem]< ID @ \",\" >",
					L"[4][Enum] BEGIN ",
					L"[5][Enum] END [ENDING]",
					L"[6][Enum]< \"enum\" @ ID \"{\" { EnumItem } \"}\" >",
					L"[7][Enum]< \"enum\" ID \"{\" @ { EnumItem } \"}\" >",
					L"[8][Enum]< \"enum\" ID \"{\" { EnumItem @ } \"}\" >",
					L"[9][Enum]< \"enum\" ID \"{\" { EnumItem } \"}\" @ >",
					L"[10][Enum]< \"enum\" ID @ \"{\" { EnumItem } \"}\" >",
					L"[11][ClassPropType] BEGIN ",
					L"[12][ClassPropType] END [ENDING]",
					L"[13][ClassPropType]\"token\" @",
					L"[14][ClassPropType]ID \"[\" \"]\" @",
					L"[15][ClassPropType]ID \"[\" @ \"]\"",
					L"[16][ClassPropType]ID @",
					L"[17][ClassPropType]ID @ \"[\" \"]\"",
					L"[18][classProp] BEGIN ",
					L"[19][classProp] END [ENDING]",
					L"[20][classProp]< \"var\" @ ID \":\" ClassPropType \";\" >",
					L"[21][classProp]< \"var\" ID \":\" @ ClassPropType \";\" >",
					L"[22][classProp]< \"var\" ID \":\" ClassPropType \";\" @ >",
					L"[23][classProp]< \"var\" ID \":\" ClassPropType @ \";\" >",
					L"[24][classProp]< \"var\" ID @ \":\" ClassPropType \";\" >",
					L"[25][ClassBody] BEGIN ",
					L"[26][ClassBody] END [ENDING]",
					L"[27][ClassBody]ID @ [ \":\" ID ] \"{\" { classProp } \"}\"",
					L"[28][ClassBody]ID [ \":\" @ ID ] \"{\" { classProp } \"}\"",
					L"[29][ClassBody]ID [ \":\" ID @ ] \"{\" { classProp } \"}\"",
					L"[30][ClassBody]ID [ \":\" ID ] \"{\" @ { classProp } \"}\"",
					L"[31][ClassBody]ID [ \":\" ID ] \"{\" { classProp @ } \"}\"",
					L"[32][ClassBody]ID [ \":\" ID ] \"{\" { classProp } \"}\" @",
					L"[33][Class] BEGIN ",
					L"[34][Class] END [ENDING]",
					L"[35][Class]< \"ambiguous\" \"class\" @ ClassBody >",
					L"[36][Class]< \"ambiguous\" \"class\" ClassBody @ >",
					L"[37][Class]< \"ambiguous\" @ \"class\" ClassBody >",
					L"[38][Class]< \"class\" @ ClassBody >",
					L"[39][Class]< \"class\" ClassBody @ >",
					L"[40][Type] BEGIN ",
					L"[41][Type] END [ENDING]",
					L"[42][Type]<< ( !Enum @ | !Class ) >>",
					L"[43][Type]<< ( !Enum | !Class @ ) >>",
					L"[44][File] BEGIN ",
					L"[45][File] END [ENDING]",
					L"[46][File]< Type @ { Type } >",
					L"[47][File]< Type { Type @ } >",
				};
				return results[index];
			}

			TypeParser::TypeParser()
				: vl::glr::ParserBase<ParserGenTokens, TypeParserStates, ParserGenAstInsReceiver, TypeParserStateTypes>(&ParserGenTokenDeleter, &ParserGenLexerData, &ParserGenTypeParserData)
			{
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(const vl::WString & input, vl::vint codeIndex)
			{
				 return Parse<TypeParserStates::File>(input, codeIndex);
			};
		}
	}
}
