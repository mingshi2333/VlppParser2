/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGenTypeParser.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			void ParserGenTypeParserData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2522; // 36968 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 218;
				static const vl::vint dataSolidRows = 9;
				static const vl::vint dataRows = 10;
				static const char* compressed[] = {
					"\x68\x90\x00\x00\xD2\x09\x00\x00\x21\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x83\x06\x84\x09\x0A\x99\x0A\x80\x89\x80\x16\x84\x16\x0A\x90\x46\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x91\x99\x97\x97\x92\x9A\x2C\xB8\xAE\x9A\x90\x9C\x8D\x9A\x9E\x37\xBE\xB9\x82\xAB\x9C\xA1\x9E\x83\x32\xB6\xA0\x80\xAB\xA6\xA1\xA0\xA4\x3F\xCE\x8D\xB0\xA3\xA4\xA9\xA2\xAB\x47\x83\x89\xAC\xA3\x9A\xA9\xAF\x90\x06\x81\x1C\xAA\xAF\xAA\xAD\xA8\xAC\x4F\xE6\x95\xAA\xB7\xAC\xB5\xAC\x81\x5B\xDE\xA4\xB3\xB3\xB5\xBA\xB8\xBB\x68\xD3\xAE\xA9\xB0\xBF\xB3\xBC\xBD\x7D\xEB\x81\xCD\xB3\xC7\xB5\x81\xB8\x79\xE5\x85\xDC\xB7\xC6\xBF\xC4\xC0\x8D\x82\xD1\xC4\xC3\xCE\xC2\x90\xC7\x95\x8C\xD7\xD2\xCB\xCC\xC9\xCE\xCB\x88\xFF\x8A\xD9\xC0\xCF\xCE\xCC\xB1\x09\xA8\xC9\xD4\xB7\xBD\xD7\xD4\xBC\xA2\xAC\xEF\xCE\xD1\xD8\xDB\xC7\xD1\xA6\xA5\xE1\xD7\xD2\xDD\xD8\xDA\xDE\xB6\xA4\xF8\xDB\xD2\xE5\xDC\xE1\xDF\xC5\xC1\xF9\xC3\xE8\xCB\xE6\xE3\xE4\xC8\xCE\xCA\xE4\xE2\xE9\xE8\xEB\xEB\xCD\xD8\xDC\xDA",
					"\xEE\xCC\xEC\xD1\xEC\xE0\xDB\xE1\xFE\xC2\x02\x86\xD4\xDF\xB3\xE9\xE8\xEB\xF7\xE2\xF5\xF6\xF6\xD0\xEE\xF1\xF0\xF5\xEA\xF9\xFA\xFA\xD4\x83\x26\xF3\xE3\xF7\xEE\xF1\xFF\xDD\x7D\x7A\x66\x77\x03\x82\x8A\x6E\x81\xCC\x40\x8E\x7D\x80\x0A\x85\x8D\x83\x81\x0F\x89\x8C\x83\x84\x0B\x95\x8E\x80\x85\x17\x96\x80\x84\x86\x1B\x9A\x82\x86\x87\xCF\x77\x7F\x7B\x88\xF3\x64\x82\x89\x89\x28\xA7\x8A\x88\x81\x1D\x99\x8E\x89\x8B\x30\x9F\x8F\x8A\x8C\x31\xA1\x8C\x88\x8D\x38\xB6\x88\x82\x8E\x11\xBC\x8C\x85\x8E\xFC\x7D\x81\x93\x8F\x3E\xA0\x83\x92\x91\xD6\x7B\x87\x93\x8C\x45\x9A\x6C\x41\x6A\x4B\xB5\x81\x94\x90\x49\x82\x95\x94\x91\x53\x8D\x92\x97\x95\x96\x45\x0B\x7C\x97\x4C\x99\x92\x98\x98\x5B\xB6\x77\x8D\x88\x1B\x50\x94\x98\x95\x66\x8A\x9B\x9A\x96\x6C\xB8\x7E\x99\x9B\x56\xB4\x9E\x67\x01\x5F\xB6\x98\x92\x9E\x61\xAF\x93\x98\x9F\x65\xB4\x78\x41\x58\x7F\xB2\x9C\x65\x02\x79\x86\xA8\x96\x9F\x8C\x80\xA1\x9E\x89\x67\x85\xA0\xA7\x9C\x8A\xBB\x95\xA5\x9F\x8E\xB0\x9A\xA6\xA4\x29\x91\xAD\xA3\xA5\x81\x93\xA5\x9C\xA8\x8F\x9D\xAD\x72\x02\x89\xA2\xAB\xA1\xA6",
					"\x9C\xAB\x84\xA6\xAA\x96\xB0\xA8\xA4\xA9\x9B\x9F\xA2\xAD\xA8\xA6\x9C\x6E\x42\x9A\xAC\xB6\xA9\xAF\xAA\xB4\xAD\xAE\xA5\xAF\xC4\x81\xBE\xAE\x8A\x0C\x0A\x45\x7B\xB1\xC3\x86\xB5\xB3\xAD\xA5\xAE\xA3\xA8\xB4\xB5\x8F\xBF\xAD\xAC\xD7\xB3\xA4\xB6\xB0\xAF\x99\xB8\xAE\xB4\xC0\xA6\x8E\x01\xAA\xDE\x91\xBD\xB3\xB6\xCC\x9D\xB0\xB8\xB6\xEB\x9A\xB5\xB9\xB5\xCE\xB1\xB8\xBA\xB5\xED\x9F\xB7\xB9\x40\x0F\x24\xB5\xBE\xB9\xEA\xB7\xBB\xBC\xBC\xF3\xB2\xBF\xB8\xB7\xD3\x83\xC9\xB9\xC1\xFF\x84\xC1\xBA\xC1\xF4\xBE\xBE\xC1\xBF\x10\xC8\xC0\x06\xBE\x0F\xC8\xC5\xC7\xC2\x09\xC7\xC8\xC7\xC5\xEC\x9C\xCA\x65\x04\x14\xD1\xCB\xC6\xC8\x1D\xE4\xCE\xB9\xC6\x0D\xE6\xC6\xBE\xCA\xFC\x96\xCC\xC8\xC0\x0C\xC2\xC8\xCA\xCC\x1E\xEB\xCE\xC8\x67\x10\x7C\xA4\xCF\xCB\x0A\xE5\xC7\xCF\xC8\x3F\xFE\xC0\xD3\xD0\x42\xC5\xD7\xCB\x04\x21\xC1\xD7\xC9\xCD\x2D\xC4\xDB\xD0\xCF\x1A\xC6\xD6\xCE\xD3\x53\xD2\xDD\xD2\xD5\x30\xF3\xC1\xC3\xD6\x31\xDC\xDA\xD5\xD7\x60\xDF\xD2\xD8\xD3\x59\xE4\xDD\xCF\xD3\x4A\xD5\xD8\xD8\xD5\x57\xEB\xD8\xD7\xD9\x6A\xF1\xDD\xDA\xDC\x59\xD4\x09\xD0\xDB\x65",
					"\xD0\xD9\xC8\x67\x15\x37\xDF\xD9\xD4\x6E\xC1\xE4\xDC\xDC\x73\xC5\xE9\xDC\x67\x16\x0A\xB4\xE1\x88\x18\x3E\xD2\xE2\xE1\x8B\xD1\xE0\xE3\xE0\x93\xD0\xE5\xE7\xE1\x78\xD2\xEB\xDD\xE6\x97\xDA\xEB\xCD\xDA\x96\xDB\xEF\xDE\x7D\x12\x7A\xCE\xD6\xD9\x9D\xE9\xE2\xEB\xE3\x98\xE3\xEF\xE4\xE7\xAB\xD4\xE4\xBE\x06\x8E\xF2\xEF\xEA\xEB\xA7\xFA\xD7\xEC\xEB\x9E\xF9\xE0\xE9\xEB\xBC\xEA\xEB\xEE\xED\xBE\xD8\xCB\x05\xED\xA1\xC3\xF9\xF1\xF1\xB8\xE1\xD8\xE9\xEC\xCB\xCE\xFA\xEC\xF3\xC1\xD0\xF0\xF0\xF1\xD2\xFF\xED\xED\xF6\x18\xDC\x08\xF3\xF5\xD1\xC0\x0D\x07\xF7\xDB\xE3\xD3\xF4\xF7\xCD\xE6\xFA\xF6\xF0\xD4\xD8\xFA\xF8\xEC\xCA\xE0\xF2\xFD\xAB\x1E\x24\xFC\xF8\xFA\xD5\xF1\xF5\xFB\xF3\x03\x5F\x06\xFE\xF5\xFB\x67\x7F\xFB\x69\x7C\x7F\xF6\x61\x7E\x5F\x20\x1F\x7E\xFE\x77\x72\x6C\x8A\x04\x54\x81\x05\x98\x7E\xFB\x11\x83\x81\xFC\x46\x81\x6B\x22\x0A\x83\x05\x81\x88\x61\x11\x1A\x82\x82\x07\x82\x80\x05\xA3\x82\x85\xE6\x24\x07\x83\x15\x93\x81\x09\xEB\x70\x80\x08\xAB\x80\x7E\x1B\x8E\x84\x0B\x8B\x86\x21\x12\x3A\x5E\x04\x28\x84\x87\x0C\xB1\x8D\x85\x1E\xB4\x87",
					"\x87\x3C\x80\x88\x08\xF3\x72\x86\x18\x83\x8C\x83\x46\x89\x85\x08\xBB\x87\x89\x22\x84\x87\x85\x4F\x8C\x8A\x12\xC4\x8E\x87\x20\x96\x8D\x89\x55\x81\x23\x09\x39\x82\x80\x8B\x26\x70\x8B\x42\x93\x88\x12\xD1\x89\x88\x1D\xA5\x88\x8A\x16\x80\x8F\x15\xAA\x49\x04\x2E\x92\x8E\x8C\x64\x91\x8D\x1A\xE2\x8E\x89\x39\xB0\x8E\x8E\x68\x8A\x87\x1B\xF9\x8B\x89\x33\xBB\x8F\x8F\x7E\x89\x8A\x0A\x6E\x89\x89\x15\x04\x92\x8E\x7A\x81\x90\x22\xFD\x8B\x90\x2A\xA1\x8F\x8E\x89\x8D\x93\x45\x7A\x5D\x04\x7D\x6E\x07\x90\x78\x80\x92\x24\xF5\x81\x93\x4C\x8A\x96\x93\x9B\x99\x88\x1D\xA2\x90\x92\x46\xA0\x97\x94\x9D\x89\x96\x29\xAA\x91\x45\x17\x18\x94\x95\x63\x88\x97\x2A\xB3\x9E\x91\x35\xA5\x95\x96\x6A\x81\x20\x0C\x2F\x94\x97\x58\xB0\x94\x93\xBD\x80\x98\x2E\xA3\x9F\x90\x3E\xA1\x21\x06\xFA\x52\x06\xBE\x33\x0C\x97\x61\xB7\x96\x97\xC1\x84\x96\x31\xD0\x9E\x99\x69\x82\x9C\x9A\xD8\x97\x9A\x36\xD2\x9A\x92\x59\xA1\x44\x06\x28\x95\x06\xBE\x36\x0A\x5F\x1B\x0D\x99\x9B\xDC\x9F\x93\x2F\xE9\x91\x95\x62\x9D\x9D\x34\x38\x08\x85\x0E\x7A\x5A\x06\x7D\x7B\x07\x9C\xDB\x8E",
					"\x9E\x3A\xD1\x9A\x9F\x76\xB6\x96\x9A\x06\x3A\x0A\xE2\x09\x28\x55\x35\x72\x23\x50\x03\x39\x65\x62\x69\x49\x30\x99\x0B\x5E\x20\x88\x46\xA1\x4A\x08\xA2\x21\x5D\x9E\x2F\xA1\x03\x25\xA2\xA3\x07\xAF\x20\xAE\x18\xA2\x20\x1A\xA4\x54\x47\x89\x2A\xA0\xD1\x0C\xA2\x34\x37\x43\xA6\x41\x0D\x03\x4A\x95\x83\x24\xA5\x5E\x27\x3C\x58\x42\x34\xA3\x80\x09\x59\xA6\x03\xA9\x31\x4D\x80\x07\xA7\xC4\x32\xA1\x20\x3F\xAB\x3B\x4E\xBD\xA2\x35\x8F\x81\x26\x4B\x12\xA6\x27\x4E\xBB\x5B\xA3\x89\x8A\x20\xA6\x4D\xAA\xAB\x53\xDC\x27\xA5\xDB\x29\xA6\xA9\x09\x36\xA1\x54\xA3\x2B\xA7\x88\x89\x36\xA8\x00\x08\xAB\x57\x8A\x22\xAD\xA2\x8A\x27\x49\x63\xA9\x20\x5A\xA2\xA8\xAA\x83\x1A\xAA\x34\x41\xA1\xAA\x4B\x87\x24\xAA\xAE\x17\xAA\xAA\x59\xBC\x29\x50\xE4\x2B\xA7\x9D\xB2\x25\xAA\xC2\x32\x27\x5A\xD6\xA9\x24\xB0\x83\xB2\x38\x87\xAB\x3A\x43\xE7\xAC\x2B\xC4\xB2\x23\xB1\x09\x3E\xAA\x49\xF6\xA9\x24\xC0\x8A\xB5\xB0\x0A\x3A\x3E\x57\x0E\xBF\xB0\x93\x06\xB6\xA3\x99\xAD\xB0\x65\x9E\xBC\xB1\x8B\xA1\xB3\xB3\xA3\xA3\x24\x58\x92\xB7\x36\xCB\x9D\xB6\x24\x9C\xAF\xB6\x47\x1F",
					"\xB8\xB4\xAF\x10\xB6\x20\xB1\xA3\x25\x6E\xB2\xBB\xB5\xBA\xB6\xB1\x25\xBB\xAF\xB4\x6D\x89\x31\xB9\xCE\x83\xBA\x34\xC5\xAF\xB1\x6F\xDE\x2B\xA6\x90\x4C\xBA\x21\xCE\xBA\xA6\x42\x21\xA7\x37\x9D\x94\xBA\x38\x65\xA4\xB2\x49\x59\xB1\xB1\xB6\x83\x20\x4F\xCF\xA9\x20\x78\xD2\xB2\xBC\xE5\x35\x7B\xA6\x03\x21\xA8\x58\xEB\xB7\xB4\xDC\xA4\xAA\x21\x96\xA3\xBF\x77\x8A\x2D\xAA\x85\x32\xBA\x20\xAC\xA1\x23\x7D\x81\x29\xBE\x82\x13\xBE\xBE\xFF\xA5\xBC\x41\xF4\xBD\x20\x00\xC9\x24\xA9\xF3\xA7\xC0\x81\x89\x24\xA8\xF4\xBB\xA1\x24\x51\x1A\x5D\x48\x0F\xCA\x20\x29\x3A\x58\xAC\x17\x08\xBC\x7D\x1A\xB6\x20\xFF\x5A\xC1\x20\x53\x1A\x5C\x87\xFD\x7F\xC3\x80\x14\x0A\x5F\x89\xA7\x85\x89\xD4\x39\xB1\x2D\xAB\xC5\x39\xDC\xA0\x02\x21\xA5\xC5\x0A\x7D\x41\xAB\x90\x25\xD6\x0A\xBE\x16\xB7\x93\x12\xD7\x0B\xC7\x0A\x2E\x95\x89\xD8\x00\xC9\x84\x02\xCF\xC3\x59\x1A\x5C\x0F\x25\xC0\x01\x11\xE6\x41\x44\x21\x31\xAD\x4E\xF4\x30\xAC\xB9\x8D\x39\x44\x4E\xC0\xA9\xAB\x59\xC0\x00\xB0\x94\x3D\x9A\x9C\x29\xB2\x6B\xD7\xCA\x39\xC4\x96\xC8\x61\x96\xB7\xBA\x8A\x59\x61\xC6\x2F",
					"\xCD\x3B\xBF\x00\x1D\xBF\x97\xE8\x99\xC0\x83\x1C\xCB\xCE\xD1\x30\xCD\x50\xBB\xA0\xAD\x28\xCB\xC0\xA2\xCA\x20\xCE\x67\x3B\xA7\xCE\x32\xD1\x3A\xCD\x41\xA8\xC2\x40\x55\xCA\x5F\xFE\xB1\xC0\xCF\xF6\x30\xA9\x7A\xAD\x5A\xCC\x38\xD0\xD5\x9F\x9A\x2A\xD1\x40\x12\xDF\xC8\x3A\xC2\x22\xD3\x00\x13\x61\x74\x59\x63\x5D\x84\x2E\xCA\x57\xD0\xA1\xD1\xAB\x22\xD6\x21\x53\xDE\x34\xD3\x36\xAA\xD5\x74\x25\xAB\xD1\x56\x65\xD6\x20\x0D\xC9\x45\x88\x76\x66\xD5\x56\x79\x59\x21\xB7\xD4\x3E\xA0\x96\x3C\xD5\x81\x39\xD3\xCD\xCA\x29\x71\xAF\xC7\x51\xBB\x81\x3F\xD6\x3E\xC3\xDA\x30\xAD\x81\x2C\xD6\x68\xCA\x3D\x71\x5F\x82\x6D\xB5\x83\x28\xDA\x6B\xC7\x5D\x74\xAD\xCA\x39\xDF\x09\x20\xD6\x64\xCC\x84\xD1\x09\x23\xDE\x41\x45\xDD\xD3\x63\x47\x7B\xD9\x76\xDA\x5E\xBA\x83\x2D\xD9\x76\xF4\x5B\x7C\xF0\xC3\x22\x99\x8A\x2A\xD8\x83\x08\x6B\xD4\xCA\x3E\xC3\x03\xF4\x59\xC3\x84\x3D\xDA\xD8\x9E\xC1\x21\xB7\x83\x23\xDE\x7B\xD8\xD5\x34\xE0\xC3\x23\xBB\xDE\xD4\x5F\x04\xB9\xDE\x44\x13\xE3\x23\x79\x94\xEF\xE0\xDC\x19\xE2\x20\xDE\x60\xE1\x3E\xA0\xEA\x20\x7C\xDC\xE6\x6B",
					"\x19\x97\xE1\x8A\x26\xEA\xE2\x59\xEC\x9A\x33\x1B\xE3\x23\xB6\x8E\xE6\x44\x15\xC3\xE4\x3E\x31\xC1\xA9\xCC\x82\x26\xE3\x93\xF9\x92\x45\x02\xF2\xE6\xCB\xF4\x36\x87\x6C\xD4\x3E\xB2\x41\xA1\xE8\xCF\xC3\xEF\x9E\xCE\x3D\xE3\x20\xB4\x62\xE7\xCB\xA5\x3E\x81\x81\x05\xEE\xE7\x2A\x58\x86\xD1\xEA\x55\xEA\x81\x1A\xE8\xEB\xD4\x2E\xC7\xCD\xDE\x6E\x83\x84\x1F\xE2\xD7\xAD\x5E\x89\xB8\x82\xC3\xED\x80\x36\xE3\x20\x29\xE0\xED\x73\x38\xC1\xDF\x63\x57\xEB\x20\x65\xF2\xEF\x3B\xB8\x3F\xEA\x89\xCC\xE9\x6C\x95\x8A\xE6\x7F\xD9\xD2\xEC\xB8\xFF\xEA\x45\x47\xC3\x21\xA1\x88\x6A\xEC\xAB\xC7\xF4\x3A\xCA\x82\xF0\x75\x7D\xB1\xA9\xC6\xDE\xEF\xF1\xCD\x20\x9E\xE4\xA7\x5A\x5E\xCB\xC1\x23\xCC\x9C\x21\x44\x39\x9B\xF8\xD5\x6C\xF4\xEB\x20\x6D\x92\xE8\x7D\x71\x9B\xEA\x84\x73\xC6\x20\xA9\xFA\xEE\x67\x73\x9D\xF4\x8C\x58\x21\x21\x77\xF4\xE5\x8A\x75\x99\x21\xC5\xDE\x37\xD8\x60\xB7\xF6\x41\x7D\xEA\xF6\x15\x7D\x05\xBD\xF4\x21\xD9\xAD\x89\x22\xF9\x81\x20\xF6\x33\x21\x40\x08\xF2\xA6\x4C\xDD\x80\x20\xAD\xC7\x06\x21\xF2\xEC\x96\x33\x08\x7C\x86\x20\xFB\x8E\xEA\xF6",
					"\x89\x44\x03\xCA\x13\x53\xDD\xCB\x0A\x20\xFF\xE5\xE2\xF9\x44\x23\x25\xF9\x45\x33\xF6\xF9\xFA\xF0\xB8\xF2\xCE\x08\x0F\xFD\x2A\x47\xE3\xF2\x86\x29\xF0\x81\x1A\xF8\xE1\xD1\x1A\x04\xDE\x73\x10\xFD\x71\x10\xB9\x78\x76\xD1\x1B\x04\xF8\x74\x1D\x0B\x7B\x7F\x04\x8A\x10\xC4\x78\x80\xF6\x1D\x04\x0B\x8D\x1C\x51\x7B\x76\xFC\x74\x7F\xEC\x7A\x22\x4F\x05\x81\x9C\x11\x72\x18\x83\x10\x6F\x58\x5E\x5F\x6F\x58\x4C\x67\x82\x02\x17\x66\x2E\x1A\x82\x23\x1B\x57\x7E\x6C\x64\x2E\x82\x61\x2F\x85\x62\xAE\x64\x12\x35\x8F\x11\x7D\x61\x12\xEC\x58\x7F\x7D\x68\x6E\x82\x7D\x67\xBE\x74\x12\x41\x8F\x11\x5C\x60\x16\x45\x81\x12\x47\x83\x7D\xE8\x59\x84\x6A\x53\x16\xC9\x5F\x0F\x89\x50\x16\x51\x81\x12\x53\x85\x5A\x25\x65\x85\x4D\x8C\x64\x8F\x65\x13\x5B\x89\x12\x39\x71\x12\x5F\x8F\x5E\xD9\x61\x56\x27\x81\x63\x60\x1F\x7C\x24\x18\x86\x1F\x16\x59\x67\x87\x82\x96\x65\x13\x6F\x89\x12\x70\x60\x16\x73\x87\x82",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}

			const wchar_t* TypeParserRuleName(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"EnumItem",
					L"Enum",
					L"ClassPropType",
					L"classProp",
					L"ClassBody",
					L"Class",
					L"Type",
					L"File",
				};
				return results[index];
			}

			const wchar_t* TypeParserStateLabel(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"[0][EnumItem] BEGIN ",
					L"[1][EnumItem] END [ENDING]",
					L"[2][EnumItem]< ID \",\" @ >",
					L"[3][EnumItem]< ID @ \",\" >",
					L"[4][Enum] BEGIN ",
					L"[5][Enum] END [ENDING]",
					L"[6][Enum]< \"enum\" @ ID \"{\" { EnumItem } \"}\" >",
					L"[7][Enum]< \"enum\" ID \"{\" @ { EnumItem } \"}\" >",
					L"[8][Enum]< \"enum\" ID \"{\" { EnumItem @ } \"}\" >",
					L"[9][Enum]< \"enum\" ID \"{\" { EnumItem } \"}\" @ >",
					L"[10][Enum]< \"enum\" ID @ \"{\" { EnumItem } \"}\" >",
					L"[11][ClassPropType] BEGIN ",
					L"[12][ClassPropType] END [ENDING]",
					L"[13][ClassPropType]\"token\" @",
					L"[14][ClassPropType]ID \"[\" \"]\" @",
					L"[15][ClassPropType]ID \"[\" @ \"]\"",
					L"[16][ClassPropType]ID @",
					L"[17][ClassPropType]ID @ \"[\" \"]\"",
					L"[18][classProp] BEGIN ",
					L"[19][classProp] END [ENDING]",
					L"[20][classProp]< \"var\" @ ID \":\" ClassPropType \";\" >",
					L"[21][classProp]< \"var\" ID \":\" @ ClassPropType \";\" >",
					L"[22][classProp]< \"var\" ID \":\" ClassPropType \";\" @ >",
					L"[23][classProp]< \"var\" ID \":\" ClassPropType @ \";\" >",
					L"[24][classProp]< \"var\" ID @ \":\" ClassPropType \";\" >",
					L"[25][ClassBody] BEGIN ",
					L"[26][ClassBody] END [ENDING]",
					L"[27][ClassBody]ID @ [ \":\" ID ] \"{\" { classProp } \"}\"",
					L"[28][ClassBody]ID [ \":\" @ ID ] \"{\" { classProp } \"}\"",
					L"[29][ClassBody]ID [ \":\" ID @ ] \"{\" { classProp } \"}\"",
					L"[30][ClassBody]ID [ \":\" ID ] \"{\" @ { classProp } \"}\"",
					L"[31][ClassBody]ID [ \":\" ID ] \"{\" { classProp @ } \"}\"",
					L"[32][ClassBody]ID [ \":\" ID ] \"{\" { classProp } \"}\" @",
					L"[33][Class] BEGIN ",
					L"[34][Class] END [ENDING]",
					L"[35][Class]< \"ambiguous\" \"class\" @ ClassBody >",
					L"[36][Class]< \"ambiguous\" \"class\" ClassBody @ >",
					L"[37][Class]< \"ambiguous\" @ \"class\" ClassBody >",
					L"[38][Class]< \"class\" @ ClassBody >",
					L"[39][Class]< \"class\" ClassBody @ >",
					L"[40][Type] BEGIN ",
					L"[41][Type] END [ENDING]",
					L"[42][Type]<< ( !Enum @ | !Class ) >>",
					L"[43][Type]<< ( !Enum | !Class @ ) >>",
					L"[44][File] BEGIN ",
					L"[45][File] END [ENDING]",
					L"[46][File]< Type @ { Type } >",
					L"[47][File]< Type { Type @ } >",
				};
				return results[index];
			}

			const wchar_t* TypeParserSwitchName(vl::vint index)
			{
				return nullptr;
			}

			TypeParser::TypeParser()
				: vl::glr::ParserBase<ParserGenTokens, TypeParserStates, ParserGenAstInsReceiver>(&ParserGenTokenDeleter, &ParserGenLexerData, &ParserGenTypeParserData)
			{
			};

			vl::vint32_t TypeParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
			{
				return -1;
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(const vl::WString& input, vl::vint codeIndex) const
			{
				 return ParseWithString<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(input, this, codeIndex);
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
			{
				 return ParseWithTokens<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(tokens, this, codeIndex);
			};
		}
	}
}
