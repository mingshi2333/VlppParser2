/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGenTypeParser.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			void ParserGenTypeParserData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2591; // 39376 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 31;
				static const vl::vint dataSolidRows = 10;
				static const vl::vint dataRows = 11;
				static const char* compressed[] = {
					"\xD0\x99\x00\x00\x17\x0A\x00\x00\x24\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x83\x06\x84\x09\x0A\x99\x0A\x81\x1A\x80\x16\x84\x16\x0A\xA0\x07\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x91\x99\x97\x97\x92\x9A\x2C\xB8\xAE\x9A\x90\x9C\x8D\x9A\x9E\x37\xBE\xB9\x82\xAB\x9C\xA1\x9E\x83\x32\xB6\xA0\x80\xAB\xA6\xA1\xA0\xA4\x3F\xCE\x8D\xB0\xA3\xA4\xA9\xA2\xAB\x47\x83\x89\xAC\xA3\x9A\xA9\xAE\xAC\x4F\xDA\x91\xA0\xB3\xA9\x93\x81\x00\x5C\xCA\x9F\xA2\xB5\xAC\xB7\xAA\xB7\x59\x82\x9B\xBE\xAA\xB5\xB9\xB5\xBB\x74\xF8\xA4\xAB\xB2\xBB\xB0\xB9\xB0\x7D\xED\x81\xCF\xB3\xC1\xB9\x81\xB9\x7B\xF6\xB9\xAB\xC9\xC2\xBF\xBF\xB2\x85\x80\xC7\xDE\xB1\xC8\xCB\xC8\xC1\x97\x84\xD9\xC6\xC2\x94\xCB\xCC\xC9\x9D\x98\xE1\xDA\xC3\xD4\xCC\xC5\xC7\x7C\x9F\xD6\xC5\xD0\xD0\xB5\x84\xD7\x8D\x8C\xE8\xCA\xC1\xDD\xDB\xD8\xC7\x95\xA9\xEC\xCB\xD7\xD1\xDC\xDB\xDB\xB2\xBE\xF8\xCA\xDA\xDD\xDC\xE3\xDF\xC2\xC1\xC7\xE3\xEB\xDD\xE2\xCF\xE6\xC8\xCB\xCA\xF0\xEC\xE6\xE0\xEB\xE9\xD6\xD9\xCF\xFA",
					"\xE2\xD4\xEC\xD2\xEF\xA6\xDB\xE2\xFD\xE3\xF7\xED\xF3\xF0\xE4\xE9\xE6\xEA\xFC\xCA\x02\x84\xD8\xC0\xB6\xC9\xF2\xF2\xEC\xFB\xEA\xFB\xE0\xA0\xF9\xFC\xD7\xF2\xFD\xFE\xFE\xEC\x7E\x71\x80\x80\xA4\x43\x0F\x79\x75\xFF\x4E\x73\x82\x82\xEB\x4D\x88\x7A\x83\x02\x90\x84\x83\x83\x14\x91\x85\x87\x84\x16\x99\x88\x87\x86\x0C\x97\x8D\x86\x86\x1F\x9C\x81\x77\x7D\xF1\x65\x83\x7E\x89\xF5\x68\x84\x8B\x89\x2C\xA9\x8D\x8B\x8A\x2E\xB1\x80\x8F\x8C\xFB\x61\x86\x8F\x88\x35\xB8\x89\x82\x8E\x0B\xBC\x82\x87\x8D\x08\xBD\x81\x93\x8F\x3E\x9E\x85\x90\x88\x47\xA2\x83\x92\x91\x4B\x88\x9D\x92\x92\xD8\x7B\x8F\x90\x90\x51\x82\x95\x94\x91\x53\x89\x94\x96\x41\x0C\x6F\x69\x97\x97\x57\x8C\x91\x9A\x93\x63\x90\x98\x7E\x94\x65\x9B\x93\x41\x01\x07\xA9\x9A\x97\x9B\x60\xA7\x96\x96\x9C\x58\xAE\x9C\x72\x01\x6D\xB4\x92\x9A\x9E\x64\xBC\x96\x9A\x8A\x39\xB1\x90\xA0\x9A\x7E\xBA\x6B\x46\x97\x76\x89\xA5\xA0\x9C\x8A\x83\xA3\x9E\xA3\x75\xB6\x78\x42\x41\xF0\x6F\x81\xA3\x74\x09\x39\x90\xA7\x9E\x9B\xBD\x9D\xA7\x9F\x96\x84\xAF\xA6\x9A\xA1\x8F\xA5\xA9\xA4\xA3\x8C\xAB\xA2\xA0",
					"\xA7\x9C\xAD\xAA\xA7\xAF\xA0\xA2\x8F\xA5\xAB\x8D\xA1\xAC\xA9\xB3\xA2\xA2\x42\x02\x9A\xB7\xAA\xA9\xAA\xAC\xB9\xA6\xAA\xB0\xA8\xBE\xA1\xB0\x8D\xBA\x84\xBE\xAA\xB2\xB0\x8C\xB2\xAC\x00\x0E\x48\xA5\xAF\xB4\xC0\xB6\xAE\xB0\xAE\xC8\x83\xB9\xB5\xB1\xD7\xBF\xA6\xB2\xB5\x00\x0C\x0A\x42\x7B\xE0\xB4\xA5\xB4\xB5\xDF\xA8\xBD\xB7\xB1\xE6\xA9\xB7\xBB\xBB\xEE\xB1\xBB\xB9\xB9\xC9\x9B\xBB\xB2\xBD\xCD\xB8\xBB\x6A\x03\xBD\xB3\xBA\xBA\xBE\xD8\xAD\xBE\xBC\xBC\x03\xF2\xB0\xC2\xB7\x05\xC9\xC7\xC0\xBB\xF5\x82\xCB\xC0\xB8\x0F\x3D\xBF\xC3\xBF\x0E\xD5\xCD\xC3\xC5\xDA\x96\xC9\xC4\xC6\xDC\x93\xC4\xC2\xC7\x06\xDA\xCD\xC6\xC8\xF7\xA4\xC9\xBE\xC9\xCF\xA8\xC8\xB4\x04\x12\xEA\xC8\xC0\xC8\x0A\xEE\xCC\xC3\xC6\x34\xE3\xCC\xC7\xBD\x11\x2D\xC7\xCF\xC9\x3B\xE9\xCD\xCD\xC0\x3F\xEF\xC2\xCC\xBD\x35\xE5\xC1\xD3\xCC\x36\xC5\xDC\xCE\xD2\x3E\xCC\xD0\xD2\xD3\x23\x90\x42\xB7\xC7\x43\xD4\xC7\xD0\xD1\x49\xD9\xD6\xD0\xD4\x48\xDB\xDA\xD7\xD2\xA4\x53\x0A\xCC\xD7\x58\xDE\xD6\xD8\xD8\x67\xCD\xDF\xD6\xDA\x69\xCF\xDB\xDA\xDB\x6D\xC2\xD7\xD6\xD5\x64\xF4\xDF\xDA\xDC\x75",
					"\xD4\xD3\xDE\xDE\x79\xE1\xCB\xDE\xDF\x7D\xF1\xCF\xDE\xE0\x81\xF0\xC6\xE1\xD5\x7C\xF7\xDD\xD4\xDA\x8C\xEC\xDD\xE2\x6E\x14\x23\xDA\xE1\xD9\x8F\xF8\xD4\x69\x05\x92\xF1\xDB\xE2\xE3\x9C\xF0\xD5\xE7\xE6\x9E\xDD\xE6\xE7\xBD\x16\x23\xB0\xEB\x88\x18\x19\xEF\xE4\xE5\xA2\xE7\xEE\xE8\xEB\xA1\xF1\xE3\xEB\xEA\x76\xDA\xE0\xEF\xEC\xAD\xF7\xEF\xE9\xED\xB4\xC9\xE6\xEC\xEF\xCF\x92\x43\xD4\xE0\x93\xC0\xF2\xEF\xEE\xBE\xFD\xE4\xF3\xEF\xC9\xF9\xE6\xF0\xEE\xC7\xC9\x4A\x06\xEA\xCE\xCD\xF1\xF7\xF3\xC8\xCB\xFA\xF0\xE1\xC5\xD6\xF0\xF7\xF7\xD9\xDC\xFC\xF2\xF6\xD5\xE4\xFA\x6F\x06\xD4\xD7\xFE\xF5\xF8\x87\xC3\xED\xF9\xE1\x88\xE6\xF0\xFA\xEE\xF4\xD8\xF5\xFF\xFA\xF7\xF2\xFC\xF9\xFC\x32\x9C\x09\xFB\xFC\xFF\x5D\x03\xFF\x7B\x7E\x7C\xFE\x6F\x7D\x7B\xFA\x79\x7E\xF8\x5B\x77\x81\xF1\x4B\x85\x7C\x0F\x8A\x7D\x02\xF6\x7F\x5E\x0F\x03\x82\x81\x0D\x8C\x82\x01\x9B\x8E\x7D\x0F\x17\x84\x82\xF8\x60\x87\x04\xA1\x84\x85\x11\xA6\x81\x82\x21\x20\x07\x07\xA5\x88\x85\x63\x54\x23\x78\x2D\x98\x80\x07\xF0\x75\x81\x1A\xB4\x87\x86\x08\x81\x22\x08\x2B\x87\x85\x0C\x90\x80",
					"\x00\x23\x1C\x85\x0C\xA2\x83\x88\x16\xBE\x82\x82\x45\x8F\x44\x40\x30\x87\x88\x00\x86\x8B\x86\x39\x8D\x88\x01\xB8\x8E\x80\x29\xB2\x86\x86\x51\x85\x06\xC4\x26\x02\x88\x2B\x84\x8E\x8B\x4F\x98\x89\x15\xD0\x83\x8C\x31\x9A\x86\x8C\x3F\x84\x8F\x19\xD4\x8B\x8D\x28\xAA\x89\x8D\x68\x88\x88\x18\xBD\x8F\x8C\x39\xB5\x8E\x89\x74\x91\x8C\x1E\xC9\x8C\x8F\x39\xBD\x8F\x04\x5D\x86\x82\x45\x4C\x87\x8F\x29\xAE\x8A\x8F\x86\x85\x8C\x1B\xF0\x8B\x90\x3B\x88\x97\x8A\xA2\x29\x05\x20\x8F\x9F\x8B\x42\x90\x97\x90\x8D\x9B\x8E\x1F\x9B\x96\x93\x4A\x94\x91\x8C\x99\x89\x91\x1B\x8A\x98\x93\x52\x95\x8A\x05\x93\x85\x73\x0A\x29\x96\x95\x51\xAE\x94\x91\xAD\x90\x94\x29\xB3\x9F\x94\x47\xA1\x97\x92\x9C\x38\x20\x13\xAD\x02\x62\x17\x2C\x94\x96\xB2\x95\x96\x26\x9D\x90\x95\x58\xB6\x96\x98\xC3\x9F\x91\x1E\xB7\x9E\x92\x66\x85\x98\x98\xC7\x90\x99\x32\x85\x7F\x05\x5F\x82\x9A\x94\xC1\x99\x99\x34\xD7\x98\x96\x6E\x8D\x98\x99\xC7\x50\x06\x35\xDA\x93\x9A\x70\x9D\x9C\x9C\xD8\x9B\x98\x3A\xE7\x9A\x9D\x76\xA1\x21\x06\x12\x72\x06\xC4\x33\x03\x9C\x77\xA9\x9D\x9C\xD2\x97",
					"\x9E\x3E\xEC\x98\x9E\x6F\x8F\x9E\x9F\xCB\x86\x9F\x37\xF9\x9C\x9F\x7D\x83\xA0\xA0\x01\x34\x05\x17\xB5\x02\x62\x1B\x12\x67\x06\xF5\x9D\x9F\x3A\x87\xA3\xA3\x7F\x95\xA1\xA0\x04\xBF\x88\x0E\x5D\x89\x06\x89\x7A\x02\x62\x3B\x11\xA2\x41\x96\xA6\x9F\x82\xA6\xA4\xA2\x25\xA8\xA7\x88\x5A\x06\x75\x84\x3C\x51\x4D\x32\x2F\xA6\x41\x52\x6B\x2E\x3C\x5E\x2A\x26\xE4\x46\x21\xA6\x30\xA9\x24\x99\x83\x25\xA3\x5E\x39\xA7\x40\x3E\xA7\x57\x98\x8F\x24\x2B\x42\xBB\x57\x94\x46\xA9\x20\x9A\xA8\x36\xA6\x7B\x35\x44\x53\x86\x2D\x01\xA5\xBD\xA2\x21\x55\xBE\x29\xA5\x66\x2D\x38\xA2\x81\x22\x5C\x5A\xAD\xA7\x5E\x5E\xA1\x5C\xAE\x1B\xA8\x00\x67\xB3\xAB\x40\x60\xAB\x2F\xA4\x81\x24\x4D\x3C\xA6\x24\x59\xD1\x55\x50\xB5\x82\x21\xAB\x75\xB7\xA9\x42\x78\xAF\xA8\xAE\x12\xAA\xAF\x06\x20\xA9\x5E\xF2\xAA\x21\x9D\xAD\xAA\x21\x70\xA7\xB1\x42\x09\xB8\x34\xB7\x80\x05\x4B\x8A\xBC\x4A\x55\x84\xB9\x20\xC1\xA8\x37\xAC\x69\xA0\xB3\x40\x13\x5D\xAF\x9B\x89\x46\xAE\x01\x36\xB1\x6E\x67\xAA\x2C\xB2\x9C\xB1\x37\x50\xA8\x36\x4C\x10\xBA\xB5\x94\x0E\xB4\xB5\xB9\x30\xB4\x71\x38",
					"\xAA\x20\xD9\x8D\x3E\xB6\x32\x34\xB5\x42\x06\xB8\x34\xC6\xB9\x32\x26\xA9\xBF\xB5\x4A\x3E\xB3\xB7\x94\x01\xBD\xB8\x26\x2E\xB2\x81\x5E\x28\xB7\xDC\x89\xBD\xB6\x48\xAA\x23\x72\xFB\x2D\xB8\xE7\x9F\x27\xB5\xD1\xA9\x23\x74\xA8\x35\xBA\xEB\x9D\x26\xB1\xBC\xA8\xB6\x5F\xA9\x2D\xBA\xEF\x98\xBC\xB9\xE3\xAF\xB9\x42\x65\xBE\x22\xF6\x8E\xB8\xBC\x5C\x27\xB9\x73\x2B\xB9\xBD\x91\x27\xBC\xBA\xF5\xB7\xB8\x74\xE8\xBE\xB2\xF5\xBA\xA4\x2B\x64\xB9\x66\x57\x01\xC0\xC0\x85\x24\xA8\xB4\x00\x07\xC2\x66\x82\x27\x51\xB1\x8A\x25\xC1\xA8\x24\xAC\x84\xAF\x46\x82\xAE\xA7\x2A\xAC\x03\x2E\xB2\x72\xFB\xB6\x20\xE2\x80\x02\xBE\x13\xC1\x21\x88\x84\x25\xB1\x07\xE5\xC1\x21\x23\xC1\xBD\x40\x27\xB1\x20\x09\xC6\xC6\xC4\x2E\xAA\x20\x8B\xD0\x50\xC6\x83\x34\xAB\x20\x23\xD7\xC7\x41\x0A\x2C\xAC\x0B\xE4\xC6\xC7\x5C\xB3\x0A\xC4\x21\x23\xC6\x20\xC2\x24\x0A\x12\x6E\xB3\x05\x46\xC8\xAC\xE6\x1B\xBA\x20\x1E\x8C\xCA\x42\x55\x02\x63\x27\xC1\x21\xCA\x52\xC6\x22\x15\x12\x66\xB7\x25\x80\xC9\xB3\xA2\x36\xB4\x20\xC6\xC0\xCC\xD2\x1E\xC3\x95\x46\xD6\xCB\x8C\x67\xA8\x95\x34",
					"\xF7\x4A\x21\xBE\x99\xCA\x41\x57\x02\x62\xF9\x95\x9A\xCE\x03\x38\x09\x9D\x8A\x27\xCE\x3C\xC1\x21\x0B\x12\x7C\x04\x93\xEA\xC6\x3B\x11\x61\x20\xB3\x18\xCF\x46\x63\xE5\xCC\x33\x11\x6A\xCC\xD1\xF9\x4A\xCE\x63\x85\xD3\xA5\x85\x0A\x22\xBE\x94\xD3\x3A\x6D\x90\xDF\x58\xF9\x8A\xC2\x34\x2F\x7E\xC3\xA4\xCF\x39\xC4\xE6\x12\xA6\x50\xD2\xA6\xD4\x73\x23\xC7\xAD\x19\xCE\xB7\xD0\x32\xC7\xC6\x7D\x27\xD4\xC9\x54\xD3\x3B\x44\x64\xA7\xAE\x8E\x81\x2B\xD0\x89\x6A\xC0\x00\x1E\xD9\xD2\x7D\x7C\xA2\x20\x4E\xD8\x5E\xC5\xB7\xD5\xD1\x40\x3B\xD0\x00\x62\xF2\x44\xD6\x0D\x2A\x20\xCB\x49\xD0\x5C\x7E\x49\x23\xD4\xA2\x2C\xDA\x80\xB3\xD7\x59\x69\xC6\x20\xDB\xA4\x2E\xD9\x59\xD4\xD6\x3E\xA7\x82\x20\xDC\xF7\x56\xDA\x41\x3D\xCF\x45\x11\x51\x77\xDA\xC7\x51\x61\x42\x6A\xDA\x44\x68\xC9\x26\xDB\x6B\xAA\xD7\x74\x25\x70\xDE\x70\x5B\xDB\x20\xF2\xDC\xDB\x49\x83\x26\xDD\x80\x2F\xDA\xE0\xF6\x29\x74\x21\xF5\x57\xE1\x81\x0A\xE0\xE1\x1F\x62\x7B\xB7\xCC\x38\x73\xBD\xBA\xDF\x8B\xBD\xC9\x21\xC5\x86\x28\xDF\x76\xC7\x58\x7D\xFD\xC6\x23\xA3\x8A\x2B\xE3\x81\x3F\xDE\xE3",
					"\xE0\x42\x81\xC8\x83\x2B\xD2\x85\x3C\xDE\x20\x62\x64\xDE\x8A\x58\xC7\xC2\x70\x4B\xC9\x21\x2F\xF5\xDE\xB2\x80\x0F\xE1\x81\x25\xE0\xE5\x2A\xB1\x22\x42\x20\xE0\xE2\x83\x6A\x83\xE5\x2F\x44\xEB\x40\x15\xC5\xE9\x3E\x96\x3A\xE9\x02\x3E\x7E\xCC\x98\xA0\x34\xA9\xC6\x22\xE5\x4D\xE6\x73\x0E\xC8\xE2\x46\xAC\xCB\xEF\xE2\x24\xA1\x24\xD3\x83\x2D\xE0\xA0\xEA\x46\xCB\x35\xF6\x3E\x87\xE7\xA3\xEC\x81\x07\xE9\xEB\xC4\x90\xCA\x42\x65\xEF\xD8\xE6\x1A\x8B\xE1\xA2\x32\xBF\x59\xB4\xEE\xEC\xB0\xD4\xEB\x35\x6F\xE3\x23\xF4\x53\xEE\xE9\xE7\x2F\x86\x20\x77\xF0\xEF\x73\x5C\x88\xEF\x8E\x47\xF3\x20\x8C\xEA\xF2\x68\x63\xC4\x53\x63\x41\x89\x21\x50\xF5\xEC\xB8\x03\x93\xE2\x14\xD2\x60\xED\x02\x3B\xEA\xE4\xA4\x3D\xCC\x91\xC7\x59\xF1\x03\x37\xF3\xE8\x99\xA0\xF3\xA1\xFE\xEA\x61\xBC\x9C\xEB\x8F\x95\xF9\x20\xCA\xC3\x22\xF4\x3A\xF3\x39\x9F\x83\x24\xD1\x7A\x5C\xF3\x20\xA8\xE6\xEF\x8B\x72\x92\xF6\xEB\x3F\xD7\xAC\xBF\xE2\x21\xE4\xB9\xF6\x3E\x85\x85\xFF\x39\xB9\xD5\x23\xA5\xAF\xF3\x46\x87\x8F\xF9\xDB\x12\x65\xF7\x40\x12\x94\xF1\x19\x5B\xA7\xFA\x1D\x68\xCE",
					"\x41\x5C\xFB\xF4\xD0\x1F\xA0\xFC\xF7\x5A\x94\xE2\xD4\xF6\x3A\x41\xDA\xBC\x39\xEC\xDC\xD7\x45\x0A\x2B\xF8\xE1\xF2\x47\x07\xB6\xD6\x3C\xBD\xE7\xD3\xFF\x84\x18\xD7\x39\x23\x22\x04\xF9\x7A\x22\x1D\x72\x7F\x09\x11\x67\x06\x11\x7B\xE5\x7B\x1A\x45\x02\x52\x07\x8A\x10\xC1\x7A\x79\xF6\x16\x04\x89\x62\x23\x05\x70\x00\x8E\x58\x80\xAD\x7D\x7D\xD6\x18\x04\x15\x83\x23\x74\x78\x81\x70\x63\x7D\x1C\x8F\x1C\x4A\x0F\x81\xD6\x19\x73\xFC\x79\x10\xBB\x72\x10\x0A\x8C\x7C\x2A\x2C\x04\x0E\x86\x10\x2D\x81\x10\x11\x83\x23\x23\x2D\x04\x28\x8F\x1C\x3D\x7B\x82\x34\x84\x7F\xEC\x7F\x1C\x4F\x0B\x83\xA2\x13\x78\x9D\x7F\x83\xFE\x71\x84\xA2\x11\x05\x44\x84\x1A\x56\x79\x61\x0A\x12\x4E\x46\x65\x68\xB9\x5E\x67\x64\x69\x16\xC6\x6F\x0F\xA4\x50\x6B\x4C\x6B\x85\x43\x6C\x85\x46\x68\x6E\x27\x12\x86\x1E\x1F\x6A\x21\x1A\x61\x67\x8F\x81\x22\x8C\x44\x6B\x87\x84\xA6\x74\x17\xBD\x79\x12\x6A\x66\x16\x73\x81\x12\x75\x83\x80\x3E\x67\x87\xEB\x59\x16\xEE\x5D\x11\xB6\x56\x16\x7F\x81\x12\x81\x8C\x61\x40\x63\x88\x7B\x8C\x64\xC1\x65\x13\x89\x83\x5C\x43\x6B\x76\x21\x1E",
					"\x88\x88\x52\x65\x1E\x66\x16\xFF\x7C\x12\x95\x86\x12\xF2\x54\x89\x52\x63\x62\x49\x1C\x89\x32\x13\x62\x66\x10\x8A\x56\x82\x10",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}

			const wchar_t* TypeParserRuleName(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"EnumItem",
					L"Enum",
					L"ClassPropType",
					L"classProp",
					L"ClassBody",
					L"Class",
					L"Type",
					L"File",
				};
				return results[index];
			}

			const wchar_t* TypeParserStateLabel(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"[0][EnumItem] BEGIN ",
					L"[1][EnumItem] END [ENDING]",
					L"[2][EnumItem]< ID \",\" @ >",
					L"[3][EnumItem]< ID @ \",\" >",
					L"[4][Enum] BEGIN ",
					L"[5][Enum] END [ENDING]",
					L"[6][Enum]< \"enum\" @ ID \"{\" { EnumItem } \"}\" >",
					L"[7][Enum]< \"enum\" ID \"{\" @ { EnumItem } \"}\" >",
					L"[8][Enum]< \"enum\" ID \"{\" { EnumItem @ } \"}\" >",
					L"[9][Enum]< \"enum\" ID \"{\" { EnumItem } \"}\" @ >",
					L"[10][Enum]< \"enum\" ID @ \"{\" { EnumItem } \"}\" >",
					L"[11][ClassPropType] BEGIN ",
					L"[12][ClassPropType] END [ENDING]",
					L"[13][ClassPropType]\"token\" @",
					L"[14][ClassPropType]ID \"[\" \"]\" @",
					L"[15][ClassPropType]ID \"[\" @ \"]\"",
					L"[16][ClassPropType]ID @",
					L"[17][ClassPropType]ID @ \"[\" \"]\"",
					L"[18][classProp] BEGIN ",
					L"[19][classProp] END [ENDING]",
					L"[20][classProp]< \"var\" @ ID \":\" ClassPropType \";\" >",
					L"[21][classProp]< \"var\" ID \":\" @ ClassPropType \";\" >",
					L"[22][classProp]< \"var\" ID \":\" ClassPropType \";\" @ >",
					L"[23][classProp]< \"var\" ID \":\" ClassPropType @ \";\" >",
					L"[24][classProp]< \"var\" ID @ \":\" ClassPropType \";\" >",
					L"[25][ClassBody] BEGIN ",
					L"[26][ClassBody] END [ENDING]",
					L"[27][ClassBody]ID @ [ \":\" ID ] \"{\" { classProp } \"}\"",
					L"[28][ClassBody]ID [ \":\" @ ID ] \"{\" { classProp } \"}\"",
					L"[29][ClassBody]ID [ \":\" ID @ ] \"{\" { classProp } \"}\"",
					L"[30][ClassBody]ID [ \":\" ID ] \"{\" @ { classProp } \"}\"",
					L"[31][ClassBody]ID [ \":\" ID ] \"{\" { classProp @ } \"}\"",
					L"[32][ClassBody]ID [ \":\" ID ] \"{\" { classProp } \"}\" @",
					L"[33][Class] BEGIN ",
					L"[34][Class] END [ENDING]",
					L"[35][Class]< \"ambiguous\" \"class\" @ ClassBody >",
					L"[36][Class]< \"ambiguous\" \"class\" ClassBody @ >",
					L"[37][Class]< \"ambiguous\" @ \"class\" ClassBody >",
					L"[38][Class]< \"class\" @ ClassBody >",
					L"[39][Class]< \"class\" ClassBody @ >",
					L"[40][Type] BEGIN ",
					L"[41][Type] END [ENDING]",
					L"[42][Type]<< ( !Enum @ | !Class ) >>",
					L"[43][Type]<< ( !Enum | !Class @ ) >>",
					L"[44][File] BEGIN ",
					L"[45][File] END [ENDING]",
					L"[46][File]< Type @ { Type } >",
					L"[47][File]< Type { Type @ } >",
				};
				return results[index];
			}

			const wchar_t* TypeParserSwitchName(vl::vint index)
			{
				return nullptr;
			}

			TypeParser::TypeParser()
				: vl::glr::ParserBase<ParserGenTokens, TypeParserStates, ParserGenAstInsReceiver>(&ParserGenTokenDeleter, &ParserGenLexerData, &ParserGenTypeParserData)
			{
			};

			vl::vint32_t TypeParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
			{
				return -1;
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(const vl::WString& input, vl::vint codeIndex) const
			{
				 return ParseWithString<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(input, this, codeIndex);
			};

			vl::Ptr<vl::glr::parsergen::GlrAstFile> TypeParser::ParseFile(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
			{
				 return ParseWithTokens<vl::glr::parsergen::GlrAstFile, TypeParserStates::File>(tokens, this, codeIndex);
			};
		}
	}
}
