/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Assembler.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{

/***********************************************************************
ParserGenAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

			vl::Ptr<vl::glr::ParsingAstBase> ParserGenAstInsReceiver::CreateAstNode(vl::vint32_t type)
			{
				switch((ParserGenClasses)type)
				{
				case ParserGenClasses::AlternativeSyntax:
					return new vl::glr::parsergen::GlrAlternativeSyntax();
				case ParserGenClasses::Assignment:
					return new vl::glr::parsergen::GlrAssignment();
				case ParserGenClasses::AstFile:
					return new vl::glr::parsergen::GlrAstFile();
				case ParserGenClasses::Class:
					return new vl::glr::parsergen::GlrClass();
				case ParserGenClasses::ClassProp:
					return new vl::glr::parsergen::GlrClassProp();
				case ParserGenClasses::Clause:
					throw vl::glr::AstInsException(L"Unable to create abstract class \"vl::glr::parsergen::GlrClause\".", vl::glr::AstInsErrorType::UnknownType, type);
				case ParserGenClasses::CreateClause:
					return new vl::glr::parsergen::GlrCreateClause();
				case ParserGenClasses::Enum:
					return new vl::glr::parsergen::GlrEnum();
				case ParserGenClasses::EnumItem:
					return new vl::glr::parsergen::GlrEnumItem();
				case ParserGenClasses::LiteralSyntax:
					return new vl::glr::parsergen::GlrLiteralSyntax();
				case ParserGenClasses::LoopSyntax:
					return new vl::glr::parsergen::GlrLoopSyntax();
				case ParserGenClasses::OptionalSyntax:
					return new vl::glr::parsergen::GlrOptionalSyntax();
				case ParserGenClasses::PartialClause:
					return new vl::glr::parsergen::GlrPartialClause();
				case ParserGenClasses::RefSyntax:
					return new vl::glr::parsergen::GlrRefSyntax();
				case ParserGenClasses::ReuseClause:
					return new vl::glr::parsergen::GlrReuseClause();
				case ParserGenClasses::Rule:
					return new vl::glr::parsergen::GlrRule();
				case ParserGenClasses::SequenceSyntax:
					return new vl::glr::parsergen::GlrSequenceSyntax();
				case ParserGenClasses::Syntax:
					throw vl::glr::AstInsException(L"Unable to create abstract class \"vl::glr::parsergen::GlrSyntax\".", vl::glr::AstInsErrorType::UnknownType, type);
				case ParserGenClasses::SyntaxFile:
					return new vl::glr::parsergen::GlrSyntaxFile();
				case ParserGenClasses::Type:
					throw vl::glr::AstInsException(L"Unable to create abstract class \"vl::glr::parsergen::GlrType\".", vl::glr::AstInsErrorType::UnknownType, type);
				case ParserGenClasses::UseSyntax:
					return new vl::glr::parsergen::GlrUseSyntax();
				default:
					throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
				}
			}

			void ParserGenAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
			{
				auto cppFieldName = ParserGenCppFieldName((ParserGenFields)field);
				switch((ParserGenFields)field)
				{
				case ParserGenFields::AlternativeSyntax_first:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrAlternativeSyntax::first, object, field, value, cppFieldName);
				case ParserGenFields::AlternativeSyntax_second:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrAlternativeSyntax::second, object, field, value, cppFieldName);
				case ParserGenFields::AstFile_types:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrAstFile::types, object, field, value, cppFieldName);
				case ParserGenFields::Class_props:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrClass::props, object, field, value, cppFieldName);
				case ParserGenFields::CreateClause_assignments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrCreateClause::assignments, object, field, value, cppFieldName);
				case ParserGenFields::CreateClause_syntax:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrCreateClause::syntax, object, field, value, cppFieldName);
				case ParserGenFields::Enum_items:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrEnum::items, object, field, value, cppFieldName);
				case ParserGenFields::LoopSyntax_delimiter:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrLoopSyntax::delimiter, object, field, value, cppFieldName);
				case ParserGenFields::LoopSyntax_syntax:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrLoopSyntax::syntax, object, field, value, cppFieldName);
				case ParserGenFields::OptionalSyntax_syntax:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrOptionalSyntax::syntax, object, field, value, cppFieldName);
				case ParserGenFields::PartialClause_assignments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrPartialClause::assignments, object, field, value, cppFieldName);
				case ParserGenFields::PartialClause_syntax:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrPartialClause::syntax, object, field, value, cppFieldName);
				case ParserGenFields::ReuseClause_assignments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrReuseClause::assignments, object, field, value, cppFieldName);
				case ParserGenFields::ReuseClause_syntax:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrReuseClause::syntax, object, field, value, cppFieldName);
				case ParserGenFields::Rule_clauses:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrRule::clauses, object, field, value, cppFieldName);
				case ParserGenFields::SequenceSyntax_first:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrSequenceSyntax::first, object, field, value, cppFieldName);
				case ParserGenFields::SequenceSyntax_second:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrSequenceSyntax::second, object, field, value, cppFieldName);
				case ParserGenFields::SyntaxFile_rules:
					return vl::glr::AssemblerSetObjectField(&vl::glr::parsergen::GlrSyntaxFile::rules, object, field, value, cppFieldName);
				default:
					if (cppFieldName)
						throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not an object."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
					else
						throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
				}
			}

			void ParserGenAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token)
			{
				auto cppFieldName = ParserGenCppFieldName((ParserGenFields)field);
				switch((ParserGenFields)field)
				{
				case ParserGenFields::Assignment_field:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrAssignment::field, object, field, token,cppFieldName);
				case ParserGenFields::Assignment_value:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrAssignment::value, object, field, token,cppFieldName);
				case ParserGenFields::Class_baseClass:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrClass::baseClass, object, field, token,cppFieldName);
				case ParserGenFields::ClassProp_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrClassProp::name, object, field, token,cppFieldName);
				case ParserGenFields::ClassProp_propTypeName:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrClassProp::propTypeName, object, field, token,cppFieldName);
				case ParserGenFields::CreateClause_type:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrCreateClause::type, object, field, token,cppFieldName);
				case ParserGenFields::EnumItem_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrEnumItem::name, object, field, token,cppFieldName);
				case ParserGenFields::LiteralSyntax_value:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrLiteralSyntax::value, object, field, token,cppFieldName);
				case ParserGenFields::PartialClause_type:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrPartialClause::type, object, field, token,cppFieldName);
				case ParserGenFields::RefSyntax_field:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrRefSyntax::field, object, field, token,cppFieldName);
				case ParserGenFields::RefSyntax_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrRefSyntax::name, object, field, token,cppFieldName);
				case ParserGenFields::Rule_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrRule::name, object, field, token,cppFieldName);
				case ParserGenFields::Type_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrType::name, object, field, token,cppFieldName);
				case ParserGenFields::UseSyntax_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::parsergen::GlrUseSyntax::name, object, field, token,cppFieldName);
				default:
					if (cppFieldName)
						throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not a token."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
					else
						throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
				}
			}

			void ParserGenAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem)
			{
				auto cppFieldName = ParserGenCppFieldName((ParserGenFields)field);
				switch((ParserGenFields)field)
				{
				case ParserGenFields::Class_ambiguity:
					return vl::glr::AssemblerSetEnumField(&vl::glr::parsergen::GlrClass::ambiguity, object, field, enumItem, cppFieldName);
				case ParserGenFields::ClassProp_propType:
					return vl::glr::AssemblerSetEnumField(&vl::glr::parsergen::GlrClassProp::propType, object, field, enumItem, cppFieldName);
				case ParserGenFields::OptionalSyntax_priority:
					return vl::glr::AssemblerSetEnumField(&vl::glr::parsergen::GlrOptionalSyntax::priority, object, field, enumItem, cppFieldName);
				default:
					if (cppFieldName)
						throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not an enum item."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
					else
						throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
				}
			}

			const wchar_t* ParserGenTypeName(ParserGenClasses type)
			{
				const wchar_t* results[] = {
					L"AlternativeSyntax",
					L"Assignment",
					L"AstFile",
					L"Class",
					L"ClassProp",
					L"Clause",
					L"CreateClause",
					L"Enum",
					L"EnumItem",
					L"LiteralSyntax",
					L"LoopSyntax",
					L"OptionalSyntax",
					L"PartialClause",
					L"RefSyntax",
					L"ReuseClause",
					L"Rule",
					L"SequenceSyntax",
					L"Syntax",
					L"SyntaxFile",
					L"Type",
					L"UseSyntax",
				};
				vl::vint index = (vl::vint)type;
				return 0 <= index && index < 21 ? results[index] : nullptr;
			}

			const wchar_t* ParserGenCppTypeName(ParserGenClasses type)
			{
				const wchar_t* results[] = {
					L"vl::glr::parsergen::GlrAlternativeSyntax",
					L"vl::glr::parsergen::GlrAssignment",
					L"vl::glr::parsergen::GlrAstFile",
					L"vl::glr::parsergen::GlrClass",
					L"vl::glr::parsergen::GlrClassProp",
					L"vl::glr::parsergen::GlrClause",
					L"vl::glr::parsergen::GlrCreateClause",
					L"vl::glr::parsergen::GlrEnum",
					L"vl::glr::parsergen::GlrEnumItem",
					L"vl::glr::parsergen::GlrLiteralSyntax",
					L"vl::glr::parsergen::GlrLoopSyntax",
					L"vl::glr::parsergen::GlrOptionalSyntax",
					L"vl::glr::parsergen::GlrPartialClause",
					L"vl::glr::parsergen::GlrRefSyntax",
					L"vl::glr::parsergen::GlrReuseClause",
					L"vl::glr::parsergen::GlrRule",
					L"vl::glr::parsergen::GlrSequenceSyntax",
					L"vl::glr::parsergen::GlrSyntax",
					L"vl::glr::parsergen::GlrSyntaxFile",
					L"vl::glr::parsergen::GlrType",
					L"vl::glr::parsergen::GlrUseSyntax",
				};
				vl::vint index = (vl::vint)type;
				return 0 <= index && index < 21 ? results[index] : nullptr;
			}

			const wchar_t* ParserGenFieldName(ParserGenFields field)
			{
				switch(field)
				{
				case ParserGenFields::AlternativeSyntax_first:
					return L"AlternativeSyntax::first";
				case ParserGenFields::AlternativeSyntax_second:
					return L"AlternativeSyntax::second";
				case ParserGenFields::Assignment_field:
					return L"Assignment::field";
				case ParserGenFields::Assignment_value:
					return L"Assignment::value";
				case ParserGenFields::AstFile_types:
					return L"AstFile::types";
				case ParserGenFields::Class_ambiguity:
					return L"Class::ambiguity";
				case ParserGenFields::Class_baseClass:
					return L"Class::baseClass";
				case ParserGenFields::Class_props:
					return L"Class::props";
				case ParserGenFields::ClassProp_name:
					return L"ClassProp::name";
				case ParserGenFields::ClassProp_propType:
					return L"ClassProp::propType";
				case ParserGenFields::ClassProp_propTypeName:
					return L"ClassProp::propTypeName";
				case ParserGenFields::CreateClause_assignments:
					return L"CreateClause::assignments";
				case ParserGenFields::CreateClause_syntax:
					return L"CreateClause::syntax";
				case ParserGenFields::CreateClause_type:
					return L"CreateClause::type";
				case ParserGenFields::Enum_items:
					return L"Enum::items";
				case ParserGenFields::EnumItem_name:
					return L"EnumItem::name";
				case ParserGenFields::LiteralSyntax_value:
					return L"LiteralSyntax::value";
				case ParserGenFields::LoopSyntax_delimiter:
					return L"LoopSyntax::delimiter";
				case ParserGenFields::LoopSyntax_syntax:
					return L"LoopSyntax::syntax";
				case ParserGenFields::OptionalSyntax_priority:
					return L"OptionalSyntax::priority";
				case ParserGenFields::OptionalSyntax_syntax:
					return L"OptionalSyntax::syntax";
				case ParserGenFields::PartialClause_assignments:
					return L"PartialClause::assignments";
				case ParserGenFields::PartialClause_syntax:
					return L"PartialClause::syntax";
				case ParserGenFields::PartialClause_type:
					return L"PartialClause::type";
				case ParserGenFields::RefSyntax_field:
					return L"RefSyntax::field";
				case ParserGenFields::RefSyntax_name:
					return L"RefSyntax::name";
				case ParserGenFields::ReuseClause_assignments:
					return L"ReuseClause::assignments";
				case ParserGenFields::ReuseClause_syntax:
					return L"ReuseClause::syntax";
				case ParserGenFields::Rule_clauses:
					return L"Rule::clauses";
				case ParserGenFields::Rule_name:
					return L"Rule::name";
				case ParserGenFields::SequenceSyntax_first:
					return L"SequenceSyntax::first";
				case ParserGenFields::SequenceSyntax_second:
					return L"SequenceSyntax::second";
				case ParserGenFields::SyntaxFile_rules:
					return L"SyntaxFile::rules";
				case ParserGenFields::Type_name:
					return L"Type::name";
				case ParserGenFields::UseSyntax_name:
					return L"UseSyntax::name";
				default:
					return nullptr;
				}
			}

			const wchar_t* ParserGenCppFieldName(ParserGenFields field)
			{
				switch(field)
				{
				case ParserGenFields::AlternativeSyntax_first:
					return L"vl::glr::parsergen::GlrAlternativeSyntax::first";
				case ParserGenFields::AlternativeSyntax_second:
					return L"vl::glr::parsergen::GlrAlternativeSyntax::second";
				case ParserGenFields::Assignment_field:
					return L"vl::glr::parsergen::GlrAssignment::field";
				case ParserGenFields::Assignment_value:
					return L"vl::glr::parsergen::GlrAssignment::value";
				case ParserGenFields::AstFile_types:
					return L"vl::glr::parsergen::GlrAstFile::types";
				case ParserGenFields::Class_ambiguity:
					return L"vl::glr::parsergen::GlrClass::ambiguity";
				case ParserGenFields::Class_baseClass:
					return L"vl::glr::parsergen::GlrClass::baseClass";
				case ParserGenFields::Class_props:
					return L"vl::glr::parsergen::GlrClass::props";
				case ParserGenFields::ClassProp_name:
					return L"vl::glr::parsergen::GlrClassProp::name";
				case ParserGenFields::ClassProp_propType:
					return L"vl::glr::parsergen::GlrClassProp::propType";
				case ParserGenFields::ClassProp_propTypeName:
					return L"vl::glr::parsergen::GlrClassProp::propTypeName";
				case ParserGenFields::CreateClause_assignments:
					return L"vl::glr::parsergen::GlrCreateClause::assignments";
				case ParserGenFields::CreateClause_syntax:
					return L"vl::glr::parsergen::GlrCreateClause::syntax";
				case ParserGenFields::CreateClause_type:
					return L"vl::glr::parsergen::GlrCreateClause::type";
				case ParserGenFields::Enum_items:
					return L"vl::glr::parsergen::GlrEnum::items";
				case ParserGenFields::EnumItem_name:
					return L"vl::glr::parsergen::GlrEnumItem::name";
				case ParserGenFields::LiteralSyntax_value:
					return L"vl::glr::parsergen::GlrLiteralSyntax::value";
				case ParserGenFields::LoopSyntax_delimiter:
					return L"vl::glr::parsergen::GlrLoopSyntax::delimiter";
				case ParserGenFields::LoopSyntax_syntax:
					return L"vl::glr::parsergen::GlrLoopSyntax::syntax";
				case ParserGenFields::OptionalSyntax_priority:
					return L"vl::glr::parsergen::GlrOptionalSyntax::priority";
				case ParserGenFields::OptionalSyntax_syntax:
					return L"vl::glr::parsergen::GlrOptionalSyntax::syntax";
				case ParserGenFields::PartialClause_assignments:
					return L"vl::glr::parsergen::GlrPartialClause::assignments";
				case ParserGenFields::PartialClause_syntax:
					return L"vl::glr::parsergen::GlrPartialClause::syntax";
				case ParserGenFields::PartialClause_type:
					return L"vl::glr::parsergen::GlrPartialClause::type";
				case ParserGenFields::RefSyntax_field:
					return L"vl::glr::parsergen::GlrRefSyntax::field";
				case ParserGenFields::RefSyntax_name:
					return L"vl::glr::parsergen::GlrRefSyntax::name";
				case ParserGenFields::ReuseClause_assignments:
					return L"vl::glr::parsergen::GlrReuseClause::assignments";
				case ParserGenFields::ReuseClause_syntax:
					return L"vl::glr::parsergen::GlrReuseClause::syntax";
				case ParserGenFields::Rule_clauses:
					return L"vl::glr::parsergen::GlrRule::clauses";
				case ParserGenFields::Rule_name:
					return L"vl::glr::parsergen::GlrRule::name";
				case ParserGenFields::SequenceSyntax_first:
					return L"vl::glr::parsergen::GlrSequenceSyntax::first";
				case ParserGenFields::SequenceSyntax_second:
					return L"vl::glr::parsergen::GlrSequenceSyntax::second";
				case ParserGenFields::SyntaxFile_rules:
					return L"vl::glr::parsergen::GlrSyntaxFile::rules";
				case ParserGenFields::Type_name:
					return L"vl::glr::parsergen::GlrType::name";
				case ParserGenFields::UseSyntax_name:
					return L"vl::glr::parsergen::GlrUseSyntax::name";
				default:
					return nullptr;
				}
			}

			vl::Ptr<vl::glr::ParsingAstBase> ParserGenAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
			{
				auto cppTypeName = ParserGenCppTypeName((ParserGenClasses)type);
				if (cppTypeName)
					throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Type \"") + vl::WString::Unmanaged(cppTypeName) + vl::WString::Unmanaged(L"\" is not configured to allow ambiguity."), vl::glr::AstInsErrorType::UnsupportedAmbiguityType, type);
				else
					throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
			}
		}
	}
}
