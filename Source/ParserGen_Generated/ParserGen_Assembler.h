/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_PARSERGEN_AST_ASSEMBLER
#define VCZH_PARSER2_PARSERGEN_AST_ASSEMBLER

#include "ParserGenRuleAst.h"
#include "ParserGenTypeAst.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			enum class ParserGenClasses : vl::vint32_t
			{
				AlternativeSyntax = 0,
				AndCondition = 1,
				Assignment = 2,
				AstFile = 3,
				Class = 4,
				ClassProp = 5,
				Clause = 6,
				Condition = 7,
				CreateClause = 8,
				Enum = 9,
				EnumItem = 10,
				LeftRecursionInjectClause = 11,
				LeftRecursionPlaceholder = 12,
				LeftRecursionPlaceholderClause = 13,
				LoopSyntax = 14,
				NotCondition = 15,
				OptionalSyntax = 16,
				OrCondition = 17,
				PartialClause = 18,
				PushConditionSyntax = 19,
				RefCondition = 20,
				RefSyntax = 21,
				ReuseClause = 22,
				Rule = 23,
				SequenceSyntax = 24,
				SwitchItem = 25,
				Syntax = 26,
				SyntaxFile = 27,
				TestConditionBranch = 28,
				TestConditionSyntax = 29,
				Type = 30,
				UseSyntax = 31,
			};

			enum class ParserGenFields : vl::vint32_t
			{
				AlternativeSyntax_first = 0,
				AlternativeSyntax_second = 1,
				AndCondition_first = 2,
				AndCondition_second = 3,
				Assignment_field = 4,
				Assignment_type = 5,
				Assignment_value = 6,
				AstFile_types = 7,
				Class_ambiguity = 8,
				Class_baseClass = 9,
				Class_props = 10,
				ClassProp_name = 11,
				ClassProp_propType = 12,
				ClassProp_propTypeName = 13,
				CreateClause_assignments = 14,
				CreateClause_syntax = 15,
				CreateClause_type = 16,
				Enum_items = 17,
				EnumItem_name = 18,
				LeftRecursionInjectClause_flag = 19,
				LeftRecursionInjectClause_injectionTargets = 20,
				LeftRecursionInjectClause_rule = 21,
				LeftRecursionPlaceholder_flag = 22,
				LeftRecursionPlaceholderClause_flags = 23,
				LoopSyntax_delimiter = 24,
				LoopSyntax_syntax = 25,
				NotCondition_condition = 26,
				OptionalSyntax_priority = 27,
				OptionalSyntax_syntax = 28,
				OrCondition_first = 29,
				OrCondition_second = 30,
				PartialClause_assignments = 31,
				PartialClause_syntax = 32,
				PartialClause_type = 33,
				PushConditionSyntax_switches = 34,
				PushConditionSyntax_syntax = 35,
				RefCondition_name = 36,
				RefSyntax_field = 37,
				RefSyntax_literal = 38,
				RefSyntax_refType = 39,
				ReuseClause_assignments = 40,
				ReuseClause_syntax = 41,
				Rule_clauses = 42,
				Rule_name = 43,
				SequenceSyntax_first = 44,
				SequenceSyntax_second = 45,
				SwitchItem_name = 46,
				SwitchItem_value = 47,
				SyntaxFile_rules = 48,
				SyntaxFile_switches = 49,
				TestConditionBranch_condition = 50,
				TestConditionBranch_syntax = 51,
				TestConditionSyntax_branches = 52,
				Type_name = 53,
				UseSyntax_name = 54,
			};

			extern const wchar_t* ParserGenTypeName(ParserGenClasses type);
			extern const wchar_t* ParserGenCppTypeName(ParserGenClasses type);
			extern const wchar_t* ParserGenFieldName(ParserGenFields field);
			extern const wchar_t* ParserGenCppFieldName(ParserGenFields field);

			class ParserGenAstInsReceiver : public vl::glr::AstInsReceiverBase
			{
			protected:
				vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
				vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
			};
		}
	}
}
#endif