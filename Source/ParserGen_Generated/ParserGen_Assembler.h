/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_PARSERGEN_AST_ASSEMBLER
#define VCZH_PARSER2_PARSERGEN_AST_ASSEMBLER

#include "ParserGenRuleAst.h"
#include "ParserGenTypeAst.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			enum class ParserGenClasses : vl::vint32_t
			{
				Assignment = 0,
				AstFile = 1,
				Class = 2,
				ClassProp = 3,
				Clause = 4,
				CreateClause = 5,
				Enum = 6,
				EnumItem = 7,
				LiteralSyntax = 8,
				LoopSyntax = 9,
				OptionalSyntax = 10,
				PartialClause = 11,
				RefSyntax = 12,
				Rule = 13,
				SequenceSyntax = 14,
				Syntax = 15,
				SyntaxFile = 16,
				Type = 17,
				UseSyntax = 18,
				_ReuseClause = 19,
			};

			enum class ParserGenFields : vl::vint32_t
			{
				Assignment_field = (static_cast<vl::vint32_t>(ParserGenClasses::Assignment) << 8) + 0,
				Assignment_value = (static_cast<vl::vint32_t>(ParserGenClasses::Assignment) << 8) + 1,
				AstFile_types = (static_cast<vl::vint32_t>(ParserGenClasses::AstFile) << 8) + 0,
				Class_baseClass = (static_cast<vl::vint32_t>(ParserGenClasses::Class) << 8) + 0,
				Class_props = (static_cast<vl::vint32_t>(ParserGenClasses::Class) << 8) + 1,
				ClassProp_name = (static_cast<vl::vint32_t>(ParserGenClasses::ClassProp) << 8) + 0,
				ClassProp_propType = (static_cast<vl::vint32_t>(ParserGenClasses::ClassProp) << 8) + 1,
				ClassProp_propTypeName = (static_cast<vl::vint32_t>(ParserGenClasses::ClassProp) << 8) + 2,
				CreateClause_assignments = (static_cast<vl::vint32_t>(ParserGenClasses::CreateClause) << 8) + 0,
				CreateClause_syntax = (static_cast<vl::vint32_t>(ParserGenClasses::CreateClause) << 8) + 1,
				CreateClause_type = (static_cast<vl::vint32_t>(ParserGenClasses::CreateClause) << 8) + 2,
				Enum_items = (static_cast<vl::vint32_t>(ParserGenClasses::Enum) << 8) + 0,
				EnumItem_name = (static_cast<vl::vint32_t>(ParserGenClasses::EnumItem) << 8) + 0,
				LiteralSyntax_value = (static_cast<vl::vint32_t>(ParserGenClasses::LiteralSyntax) << 8) + 0,
				LoopSyntax_Syntax = (static_cast<vl::vint32_t>(ParserGenClasses::LoopSyntax) << 8) + 0,
				LoopSyntax_delimiter = (static_cast<vl::vint32_t>(ParserGenClasses::LoopSyntax) << 8) + 1,
				OptionalSyntax_Syntax = (static_cast<vl::vint32_t>(ParserGenClasses::OptionalSyntax) << 8) + 0,
				PartialClause_assignments = (static_cast<vl::vint32_t>(ParserGenClasses::PartialClause) << 8) + 0,
				PartialClause_syntax = (static_cast<vl::vint32_t>(ParserGenClasses::PartialClause) << 8) + 1,
				PartialClause_type = (static_cast<vl::vint32_t>(ParserGenClasses::PartialClause) << 8) + 2,
				RefSyntax_field = (static_cast<vl::vint32_t>(ParserGenClasses::RefSyntax) << 8) + 0,
				RefSyntax_name = (static_cast<vl::vint32_t>(ParserGenClasses::RefSyntax) << 8) + 1,
				Rule_clauses = (static_cast<vl::vint32_t>(ParserGenClasses::Rule) << 8) + 0,
				Rule_name = (static_cast<vl::vint32_t>(ParserGenClasses::Rule) << 8) + 1,
				SequenceSyntax_first = (static_cast<vl::vint32_t>(ParserGenClasses::SequenceSyntax) << 8) + 0,
				SequenceSyntax_second = (static_cast<vl::vint32_t>(ParserGenClasses::SequenceSyntax) << 8) + 1,
				SyntaxFile_rules = (static_cast<vl::vint32_t>(ParserGenClasses::SyntaxFile) << 8) + 0,
				Type_name = (static_cast<vl::vint32_t>(ParserGenClasses::Type) << 8) + 0,
				UseSyntax_Syntax = (static_cast<vl::vint32_t>(ParserGenClasses::UseSyntax) << 8) + 0,
				_ReuseClause_assignments = (static_cast<vl::vint32_t>(ParserGenClasses::_ReuseClause) << 8) + 0,
				_ReuseClause_syntax = (static_cast<vl::vint32_t>(ParserGenClasses::_ReuseClause) << 8) + 1,
			};

			extern const wchar_t* ParserGenTypeName(ParserGenClasses type);
			extern const wchar_t* ParserGenFieldName(ParserGenFields field);

			class ParserGenAstInsReceiver : public vl::glr::AstInsReceiverBase
			{
			protected:
				vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem) override;
				vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
			};
		}
	}
}
#endif