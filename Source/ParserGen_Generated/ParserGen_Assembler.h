/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_PARSERGEN_AST_ASSEMBLER
#define VCZH_PARSER2_PARSERGEN_AST_ASSEMBLER

#include "ParserGenRuleAst.h"
#include "ParserGenTypeAst.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			enum class ParserGenClasses : vl::vint32_t
			{
				AlternativeSyntax = 0,
				Assignment = 1,
				AstFile = 2,
				Class = 3,
				ClassProp = 4,
				Clause = 5,
				CreateClause = 6,
				Enum = 7,
				EnumItem = 8,
				LiteralSyntax = 9,
				LoopSyntax = 10,
				OptionalSyntax = 11,
				PartialClause = 12,
				RefSyntax = 13,
				ReuseClause = 14,
				Rule = 15,
				SequenceSyntax = 16,
				Syntax = 17,
				SyntaxFile = 18,
				Type = 19,
				UseSyntax = 20,
			};

			enum class ParserGenFields : vl::vint32_t
			{
				AlternativeSyntax_first = 0,
				AlternativeSyntax_second = 1,
				Assignment_field = 2,
				Assignment_value = 3,
				AstFile_types = 4,
				Class_ambiguity = 5,
				Class_baseClass = 6,
				Class_props = 7,
				ClassProp_name = 8,
				ClassProp_propType = 9,
				ClassProp_propTypeName = 10,
				CreateClause_assignments = 11,
				CreateClause_syntax = 12,
				CreateClause_type = 13,
				Enum_items = 14,
				EnumItem_name = 15,
				LiteralSyntax_value = 16,
				LoopSyntax_delimiter = 17,
				LoopSyntax_syntax = 18,
				OptionalSyntax_priority = 19,
				OptionalSyntax_syntax = 20,
				PartialClause_assignments = 21,
				PartialClause_syntax = 22,
				PartialClause_type = 23,
				RefSyntax_field = 24,
				RefSyntax_name = 25,
				ReuseClause_assignments = 26,
				ReuseClause_syntax = 27,
				Rule_clauses = 28,
				Rule_name = 29,
				SequenceSyntax_first = 30,
				SequenceSyntax_second = 31,
				SyntaxFile_rules = 32,
				Type_name = 33,
				UseSyntax_name = 34,
			};

			extern const wchar_t* ParserGenTypeName(ParserGenClasses type);
			extern const wchar_t* ParserGenCppTypeName(ParserGenClasses type);
			extern const wchar_t* ParserGenFieldName(ParserGenFields field);
			extern const wchar_t* ParserGenCppFieldName(ParserGenFields field);

			class ParserGenAstInsReceiver : public vl::glr::AstInsReceiverBase
			{
			protected:
				vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem) override;
				vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
			};
		}
	}
}
#endif