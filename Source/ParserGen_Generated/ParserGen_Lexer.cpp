/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::COMMENT:
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"ID",
					L"STRING",
					L"CONDITIONAL_LITERAL",
					L"SPACE",
					L"COMMENT",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"+",
					L"-",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/+",
					L"-",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"(\'[^\']*\')+",
					L"/s+",
					L"////[^/r/n]*",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 1571; // 17581 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 35;
				static const vl::vint dataSolidRows = 6;
				static const vl::vint dataRows = 7;
				static const char* compressed[] = {
					"\xAD\x44\x00\x00\x1B\x06\x00\x00\x46\x00\x01\xBC\x01\x84\x81\x83\x1C\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x26\x04\xA7\x0A\x94\x80\x15\x96\x82\x29\x30\x84\x8A\x13\x9C\x83\x14\x9B\x04\xAC\x39\x84\x8D\x14\x9C\x82\x17\x3F\x84\xAF\x02\xA4\x80\x18\x83\x1C\x04\xBA\x09\xA4\x87\x86\x80\x83\x81\x02\x84\xBD\x12\xA4\x86\x1C\x82\x20\x04\xC1\x04\x9A\x24\x83\x2D\xAE\x82\x5C\x60\x84\x9D\x23\xB4\x82\x2E\xB3\x04\xDF\x29\xA4\x80\x34\xB4\x83\x30\x6F\x84\xA2\x32\xB4\x83\x31\xBA\x82\x64\x78\x84\x85\x3B\xBC\x82\x32\xBF\x04\xE7\x01\xC4\x88\x34\xC0\x83\x34\x87\x84\xAA\x2A\xC4\x83\x35\xC6\x82\x6C\x10\xC4\x8D\x33\xCC\x82\x36\xCB\x04\xEF\x19\xC4\x80\x3C\xCC\x83\x38\x9F\x84\xB2\x22\xD4\x83\x39\xD2\x82\x74\x28\xC4\x95\x3B\xD4\x82\x3A\xD7\x04\xF7\x04\x9A\x34\x83\x3D\xDA\x82\x7C\x38\xC4\x9D\x3B\xDC\x82\x3E\x82\xFF\x7F\x50\x00\x01\xE1\xE0\x0C\x82\xC7\x81\x85\xFF\x79\xE4\xE1\xE3\xE6\x11\x04\x96\x00\xE5\xE7\x08\x83\x03\x0A\xD4\xC1\xF3",
					"\x08\x89\x80\x0A\xED\xFF\x19\x20\xFA\x81\x87\x04\xF0\x09\xE0\x95\x0E\x8A\xE5\xE0\x88\xF7\xE0\xEA\xEF\xFF\x69\x81\x81\xF8\x00\x01\x04\xF6\xC3\x19\xFC\xFD\xF9\xFE\x00\xF6\x41\x8F\x7E\x80\x01\x46\x03\x83\x7F\x05\x3F\x74\x03\x7F\x13\x41\x43\x71\x40\x15\x72\x7B\x73\x84\x14\x95\x86\x87\x85\x18\x99\x8A\x86\x85\x1C\x20\x7B\x85\x71\x1D\x92\x89\x85\x88\xCE\x41\x74\x8B\x89\x04\x68\x81\x42\x8A\x00\x2C\x8E\x88\x41\x1A\x29\x82\x8F\x8A\x33\xAD\x84\x43\x06\x35\xAF\x82\x8B\x87\x3C\xBD\x8E\x8F\x8F\x18\xA4\x80\x93\x3F\x42\xBC\x85\x92\x89\x39\x89\x94\x8F\x92\x36\x8C\x9C\x89\x07\x4A\x8D\x92\x96\x8E\x53\x91\x93\x93\x95\x58\x99\x91\x92\x87\x46\x9C\x9B\x96\x7C\x54\xA1\x91\x96\x98\x01\x5E\x03\x9B\x99\x4E\xB5\x8A\x97\x9A\x6C\x97\x97\x92\x8F\x6F\x9A\x8F\x98\x47\x69\xB5\x95\x96\x9D\x64\xB7\x9A\x9D\x9E\x2C\xAD\x9E\x9F\x9F\x72\x9E\x9B\x85\x9C\x23\xA0\x7C\x9C\x9A\x7B\x88\xAE\x44\x9E\x88\xBD\x90\xA3\xA3\x90\x88\x9B\x8F\xA0\x82\x9C\x80\x79\x48\x8C\x99\xA9\xA2\xA6\x87\x9C\xAA\x99\xA4\xA0\xA1\xA2\xAB\xA8\xA4\xA5\xA6\xAB\xA9\xA8\xA9\xAA\xAB\xAA",
					"\xAC\xAD\xAE\xAB\xAB\xB0\xB1\xA2\xAF\xAC\xB4\xB5\xA6\xAF\xAD\xB8\xB9\xAA\xAF\xAE\xBC\xBD\xAE\xAF\xAF\xC0\x81\xBF\x9C\x49\x93\x82\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBC\x98\xA1\x1F\x9C\xB7\x87\x9B\x9D\x9B\xA2\xB9\xB8\xE4\x9F\xAF\x8F\x49\x01\x68\xB0\x02\xBA\xEC\xA6\x4E\xB9\xBA\x04\x64\x0F\xBB\xBA\xF3\xAD\xB0\xBF\xBD\xF4\xB8\xB6\xBD\xBE\xFC\xBB\xBE\xBD\xBD\x00\xFA\xB1\xC1\xBF\x03\xFF\xB2\xC3\xC1\x04\xC8\xC6\xC1\xC2\x0C\xFB\xBB\x71\x09\x04\x50\xC1\x42\xC4\x00\x14\xC6\xC5\xC4\x18\xD3\xC9\xC4\x00\x29\x5A\xCE\xC5\xC5\x1B\xD7\xCF\xC6\xC8\x20\xE3\xC1\xCB\xC9\x26\xE9\xC5\xCB\xCA\x24\xED\xC8\xC8\xCB\x2F\xEE\xCA\xCA\xCC\x30\xF3\xCF\xCA\x85\x2B\x41\x49\xCD\x89\xFF\x3B\xCB\x72\xCF\xDA\x81\xD2\xD3\x86\x2E\x45\xB3\xD3\xD1\xAC\x9E\xB1\xA2\xD1\x14\xA0\xB2\x4E\xA7\x50\xE3\xBD\xA3\xD4\x4C\x88\xD2\xA4\xCF\x3D\x8A\xD5\x86\xD3\x51\xE5\xBD\xD4\xD5\xE2\x96\xD4\x91\xA5\x85\x8C\xD3\x84\xD7\x52\xDF\xDA\xD9\xDA\x6C\xE2\xDA\xD7\x97\x58\xE5\xDC\xCC\x4D\x6B\xDE\xDC\xDA\xDD\x6F",
					"\xD6\xB9\xDE\xA5\x66\xCB\x78\xD8\xDE\x60\xC0\xEC\x93\x4D\x76\xAE\xD4\xD8\xDC\x59\xC6\xA1\xE3\xE2\x75\xFB\x4B\xDA\xE1\x7D\xDB\xD7\xE3\xD9\x8A\xCD\xEA\xA5\x4F\x96\xF7\xD6\xBB\xD1\x7B\xD2\xE1\xE7\xD5\x7E\xCC\xEA\xE5\xE6\x40\x4F\xE2\xD8\x8F\x43\x5F\xE7\xE8\xA4\x0B\xED\xE3\xBE\xBC\x0A\xC5\xC2\xED\xEC\xB4\xCD\xC3\xEE\xED\xB5\xEE\xE9\xEF\xED\xBA\xF8\xEE\xEE\xC3\xA1\x86\x5A\xEB\xEA\x41\xF4\xC6\xF1\xCC\x28\x48\xF6\xCF\xF2\x35\xCD\xF7\xF0\xF3\xCF\xCE\xFA\xF2\xF4\xD0\xD3\xF1\xF5\xF4\xAA\xB1\x03\xE4\xF1\xDA\xBB\xC0\xD1\x70\xDF\xFD\xCB\xF4\xF7\xC4\xF2\x04\x42\xF9\xF2\x68\xFC\xCE\xFA\xEC\xE7\xFE\xF9\x40\xED\xF0\xFF\xF8\x00\xF1\xF4\xF3\xFD\xFD\xF8\xF7\xFA\xFE\xFC\xFC\xF6\xFD\xFD\xFE\xFF\x7B\x7E\xFF\x03\x80\x80\x02\x82\x85\x80\x08\x87\x82\x00\xD1\x5D\x73\xA6\x63\x78\x74\x20\x42\x74\x8B\x33\x02\x83\x0A\x85\x76\x6A\x0D\x94\x72\xEA\x7F\x66\x83\xD1\x5E\x84\x06\x60\x70\x71\xDC\x5D\x5F\x81\xB1\x60\x4D\x83\xE1\x55\x04\x0A\x88\x52\x85\x21\x59\x84\x83\x99\x62\x72\x07\xD4\x4D\x84\x20\x6F\x85\x72\xE2\x56\x07\x0A\xB1\x81\x84\x0C\xA5\x81",
					"\x74\x1B\x98\x86\x0C\xC3\x88\x51\x1B\x2C\x84\x7C\x48\x96\x54\x0E\x04\x2B\x89\x80\x0D\x88\x00\x4F\x91\x88\x13\xD3\x81\x20\xA4\x0E\x8C\x8A\x50\x98\x8A\x14\xD7\x8C\x8B\x2C\x9D\x8B\x8B\x5E\x81\x8C\x18\xE3\x8A\x8B\x32\x9F\x8E\x8C\x62\x88\x8C\x19\xE7\x8C\x8D\x34\xAD\x8B\x8D\x6E\x91\x8F\x13\xCB\x3A\x29\x80\x35\x88\x00\x77\x99\x8F\x52\x76\x8B\x8E\x3C\xBD\x8D\x29\x7E\x9C\x8E\x20\x81\x94\x90\x3D\x83\x96\x90\x85\x9D\x8C\x22\x8B\x9A\x91\x46\x87\x96\x91\x89\x8F\x92\x24\x91\x94\x92\x46\x93\x96\x92\x95\x9D\x8F\x72\x75\x7B\x92\xF0\x09\x81\x80\xA0\x86\x81\x28\x9F\x92\x95\x52\xA4\x97\x94\x0A\x83\x95\x2A\xA6\x9B\x94\x54\xAA\x91\x94\x0C\x9F\x85\x04\xC1\x87\x85\xB5\x50\x2B\x86\x3B\x81\x6E\x0F\xC3\x73\x97\x11\x9F\x5A\x88\xB9\x84\x88\x93\x53\x21\x6B\x1A\xBF\x47\x86\xB5\x98\x94\x0F\xCB\x9A\x4E\x63\xB0\x4D\x84\x30\x8A\x9A\x07\xD6\x2C\x98\x47\x48\x69\x83\x40\x9E\x94\xDF\x3C\x62\x98\x00\x3F\x01\x98\x1D\x83\x48\x1C\xE3\x98\x8A\x2B\xB2\x8A\x8D\xE8\x8F\x8D\x3A\xE7\x9A\x9D\x76\xAC\x9F\x9D\xE4\x8E\x9D\x3C\xF0\x9B\x9C\x30\xA2\x52\x78\xDA\x89",
					"\x8B\xD0\x18\x9C\x9E\x48\xB7\x88\x90\xFD\x97\x92\x3F\x83\xA2\xA1\x82\x99\x96\xA0\x01\xA7\xA2\x42\x89\xAC\xA0\x82\x84\x91\x7B\xB2\x9A\x9E\x44\xAB\x58\x9B\x5E\x89\x71\x99\xDD\x99\xA1\x94\x58\x27\x83\x6B\x91\xA6\x84\xF9\x8E\x80\x46\xE0\x95\x9A\xD1\x4E\x9F\xA2\x21\xBA\x80\x37\xA4\xA2\x9B\x6E\xA7\xA5\x4B\xB4\x9C\x66\x56\x25\xA4\xA6\x69\xAF\xA4\x84\x31\xB9\x9A\x46\xD1\x62\x08\x96\xB7\xA4\x52\x39\xBD\x97\x4E\xD2\x43\x08\x96\xB4\x83\x97\x29\xBB\x98\x4A\xBA\xA6\xA9\xA6\x81\x24\x08\x56\x48\xAA\x0B\xD0\x90\x99\x9A\x83\xA9\x4F\x3F\xAB\x69\x52\x96\xA2\xA8\xA7\xAD\xA4\x20\x45\x1D\x86\x47\xBC\x90\x82\x9C\xAB\xA6\xAA\x5E\xB8\xA8\x90\x7E\x1F\x1F\x1F\x3D\x1B\x1A\xFF\x1C\x1E\x3E\x3F\x00\x21\x82\x01\x23\x3A\x77\xB2\x3A\x5E\xF9\xAC\xAE\x00\x18\x39\x20\x0B\x21\x21\x43\x01\x2E\x3C\x00\x0D\x40\x00\x11\x40\x03\x45\x01\x24\x3C\x00\x26\x39\x20\xD1\x21\x20\x7A\x01\x2C\x3A\xEF\x3F\x38\xAF\x00\x18\x45\x40\x1A\xB0\x00\xF1\x1B\xB3\xAF\x00\x09\x41\x5F\x98\xB4\xB4\xD0\x98\xB4\xB3\x9C\xB6\x3B\x67\x81\x2D\x38\xCF\x80\x01\x46\xA3\xA0\xB7\x7E\x31",
					"\xBE\x41\x1B\x76\xB1\x20\xB0\xA0\x01\x69\x81\x28\x3E\xDA\x99\xB4\x20\xAA\xBF\xB4\x6B\xA0\xB4\x3E\x00\x0B\x46\xB7\xBB\xA0\x02\x81\x7D\xA5\x20",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
