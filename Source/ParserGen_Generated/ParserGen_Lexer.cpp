/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"ID",
					L"STRING",
					L"SPACE",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"+",
					L"-",
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/+",
					L"-",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"/s+",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 1265; // 14880 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 241;
				static const vl::vint dataSolidRows = 4;
				static const vl::vint dataRows = 5;
				static const char* compressed[] = {
					"\x20\x3A\x00\x00\xE9\x04\x00\x00\x3D\x00\x01\xBA\x01\x84\x81\x81\x1C\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x27\x04\xA8\x0A\x94\x81\x15\x96\x82\x2A\x30\x84\x8B\x13\x9C\x80\x16\x9B\x04\xAD\x39\x84\x8E\x14\x83\x16\x82\x30\x04\x87\x82\x84\x83\x81\x81\x1D\x04\xC8\x81\x9C\x14\x84\xA5\x80\x80\x4F\x84\xBE\x04\x80\x24\x81\x20\x82\x5A\x04\x9B\x3A\xA4\x84\x2D\xAE\x82\x5D\x60\x84\x9E\x23\xB4\x83\x2E\xB3\x04\xE0\x29\xA4\x81\x34\xB4\x82\x31\x6F\x84\xA3\x32\xB4\x84\x31\xBA\x82\x65\x78\x84\x86\x3B\xBC\x83\x32\xBF\x04\xE8\x01\xC4\x89\x34\xC0\x82\x35\x87\x84\xAB\x2A\xC4\x84\x35\xC6\x82\x6D\x10\xC4\x8E\x33\xCC\x83\x36\xCB\x04\xF0\x19\xC4\x81\x3C\xCC\x82\x39\x9F\x84\xB3\x22\xD4\x84\x39\xD2\x82\x75\x28\xC4\x96\x3B\xD4\x83\x3A\x82\x7A\x04\xBB\x32\xD4\x84\x3D\xDA\x82\x7D\x38\xC4\x9E\x34\x87\x7F\x7E\x08\x00\x3E\xFE\xD7\x04\x84\xE1\x80\xE1\xFF\x46\xC1\xE2\xEA\xE1\x08\x82\x0B\xBD\xC2\xC7\x0A\x81\xEE\xDF\x08\x8C\x01\x94\x15\xE8",
					"\xEF\x7A\x8D\x81\x07\xDB\x92\x1B\xF5\x0E\x87\xE2\xE0\x88\xE6\xBE\xE4\xE9\xFF\x79\x85\x81\xF5\x00\x02\x04\x90\xF3\x03\xFA\xFB\xF7\xF7\x80\x30\xFB\xF9\xFC\xFD\x80\x03\xFD\x79\x75\x01\x7E\x04\x39\x73\x45\x40\xC0\x41\x45\x44\x7B\xDC\x4D\x8E\x83\x83\x10\x91\x82\x87\x84\xC8\x5A\x0B\x74\x85\xC2\x56\x8C\x82\x84\x1A\x8B\x7E\x6D\x87\x20\x84\x41\x89\x40\x23\x80\x05\x8B\x89\x04\x58\x02\x8B\x8A\x24\xAC\x86\x88\x41\x19\x2E\x88\x8B\x86\x18\xB5\x86\x8F\x8D\x38\x9F\x87\x85\x8D\x1D\xB6\x8D\x8D\x86\x32\x81\x9D\x8B\x90\x2F\x84\x95\x8B\x06\x42\x85\x9A\x93\x8C\x4B\x89\x99\x8F\x93\x50\x91\x9D\x83\x8F\x38\x94\x94\x86\x95\x4C\x99\x99\x92\x96\x01\x5C\x0B\x97\x97\x46\xAE\x82\x97\x98\x64\xBE\x8B\x8C\x86\x56\x93\x86\x95\x07\x60\x8D\x91\x9B\x9B\x6E\xB1\x9C\x96\x9C\x4E\xA5\x96\x9F\x9D\x53\xA7\x97\x96\x9E\x0F\x98\x9D\x9B\x9C\x80\xAE\x8E\x07\x9F\x84\xB4\x88\x9F\xA1\x51\xA9\x9C\x8C\x9F\x0E\x96\x9C\x44\x9C\x81\x90\xA5\xA0\x9D\x92\xB0\x98\xA3\xA5\x98\x99\xAA\xA7\xA6\x9C\x9D\xAE\xA7\xA7\xA0\xA1\xA2\xAB\xA8\xA4\xA5\xA6\xAB\xA9\xA8\xA9\xAA\xAB\xAA",
					"\xAC\xAD\xAE\xAB\xAB\xB0\xB1\xA2\xAF\xAC\xB4\xB5\xA6\xAF\xAD\xB8\x9B\xAE\x46\xA1\xB9\xBD\xAE\xAF\xAF\xC0\x81\xB2\xB3\xB0\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\xAA\x9C\xA1\x84\x8A\x94\xBB\x75\xA4\x94\x99\xB8\xB7\xB6\x62\xB9\x81\x49\x40\xDF\x80\x01\xBB\xB8\x22\x60\xB5\xB8\x00\x24\x66\xBA\xBA\xB8\xE7\xA4\xBB\xBA\xBB\xEC\xAF\xBD\xBB\xBC\xF2\xB5\xB1\xBF\xBD\xF0\xB9\xB4\xBC\xBE\xFB\xBA\xB6\xBE\xBF\xFC\xBF\xBB\xBF\x83\x27\x41\x45\xC2\x87\xFF\x07\xC8\x72\xC2\xD1\x8D\xCE\xC1\xA3\xD3\x90\x85\xB6\xC4\xD7\x84\x44\x0B\xA4\xDC\x95\xAA\xB7\xA4\x0D\xD3\xC2\xB4\xAF\x10\xEC\x79\xC7\xC6\x1A\xE3\xC3\x9D\xC7\x11\xFD\x99\xC8\x90\x22\xD8\xCE\xC9\xC9\x2F\xD9\xB8\xC8\xC8\xD6\xB4\xCC\x76\x95\x25\x31\xC6\xCA\xCE\x1C\xD1\xBE\xC4\x87\x2B\xFA\x8D\xC8\xCC\x44\xE4\xC6\xD0\x93\x26\x35\x90\xB7\xCF\x35\xC8\xCF\xC4\xC2\x3B\xC5\xD3\xC9\x4A\x52\xC1\xD3\xB0\xD3\x14\xF6\xC5\x85\xC5\x55\xC5\xDB\x49\xD7\x47\xCA\xDF\xB0\xD6\x2A\xDA\xDC\xC8\xD4\x3C\xE0\xD8\xB6\x4B\x60\xCF\xC8\x85\x4C\x66\xEE\xDE\xA4\xC0\x74\xE7\xB9\xB9\xC0\x78",
					"\xF5\xD2\xC3\xDE\x79\xFD\xBE\xDC\xDF\x7A\xFD\xD0\xE3\xDF\x82\xC5\xE0\xBF\xA6\x34\x71\xD2\xDF\xE2\x07\xCC\xCE\x6E\xE3\x09\xD6\xDB\xE3\xE4\xBF\xA4\xD1\xCA\xD3\x40\xC3\xD1\xD8\x9C\x37\x6A\xD9\xD9\x9C\x33\xD8\xE8\x9A\xD5\x7E\x9E\xE6\xEB\xE6\x00\x3A\x45\xD1\xE8\x4F\x96\xE2\xD0\xDA\xA7\xD8\xBD\x4D\xEC\x6D\xAC\xE9\x8E\xEB\xFF\x25\xE8\xE9\xD4\xBB\xFD\xCB\xD2\xE4\x67\xE6\x9A\xE4\x93\x3F\x74\xE6\xF2\xD1\xB6\xD5\x94\xE8\xD7\xBD\xC7\xF8\xB5\x50\x1A\xD4\xE2\xF4\xAD\x31\x04\x45\xF5\x40\xD7\xC0\x09\xF7\xF6\xD6\xDD\xF1\x42\x0C\xDE\xDA\xF1\xF8\xF7\xD8\xE3\xF6\xF9\xF9\xE8\xE2\xF9\xF8\xF9\xEA\xED\xFC\xFB\xFB\xE7\xEE\xF1\xFC\xFC\xEB\xF3\xF6\xFD\xFD\xF8\xF2\xF9\xFE\xB0\xB8\xDB\xDA\xE2\xEE\xD8\x53\x07\xE7\x3C\x7C\x49\xE4\x77\x40\x77\x00\x83\x82\x02\xF0\x44\x06\xDF\x63\x68\x78\xAF\x62\x78\xEC\x4D\x74\x82\x02\xA2\x6E\x59\xFD\x61\x7B\xA2\x43\x7B\x80\xA3\x75\x05\x83\x25\x46\x82\x04\xA3\x87\x6C\xDE\x76\x00\x84\x9F\x6F\x48\xFD\x7A\x7C\x85\xEC\x60\x79\x7F\x2B\x91\x87\xFD\x2D\x83\x86\x19\xB0\x85\x86\x38\x97\x86\x0E\xB4\x8B\x87\x15\x88\x70",
					"\x82\xD3\x61\x89\xAA\x19\x81\x83\x0D\x93\x86\x82\xCE\x6D\x4F\x0D\x17\x8D\x58\x22\xB9\x73\x79\x1C\x89\x8A\x14\xA8\x72\x84\x23\xA4\x87\x75\x48\x95\x81\x07\xD5\x83\x75\xFF\x5B\x38\x07\x28\x93\x8B\xC8\x5C\x8B\x4E\x2F\x91\x8A\x8B\x60\x63\x28\x1A\xCA\x44\x8D\xA7\x57\x8F\x89\x62\x8E\x46\x51\x6B\x87\x64\x9F\x40\x88\x81\xCC\x79\x8A\x1E\xC9\x4A\x28\xD0\x76\x8A\x71\xFE\x62\x75\xD6\x47\x81\x8C\x3A\xB1\x65\x8D\x99\x62\x91\xD9\x04\x91\x8F\xE3\x4E\x28\x79\x7F\x8A\x91\x22\xEF\x8B\x8F\x46\x94\x89\x47\xFE\x1F\x1F\x2F\x7F\x1C\x1F\x7B\x3D\x1F\x03\x50\x25\x20\x00\x50\x31\x20\x52\xA3\x97\x39\xA8\x85\x94\x41\x53\x31\x21\x85\x01\x25\x21\x01\x28\x3C\x00\x07\x40\x01\x05\x40\x07\x22\x01\x3E\x38\x00\x60\x31\x20\xE7\x01\x22\x3C\x01\x37\x39\x76\x79\x36\x95\x18\x41\x22\x45\xAA\x81\x23\x80\x49\x97\x94\x66\xA6\x97\x99\x30\x51\x99\x40\x4A\x38\x99\x66\x96\x9E\x94\xF5\x2E\x98\x41\x09\x40\x00\x63\x97\x9C\x20\xF2\x3A\x99\x40\x5E\x9A\x38\x53\xAE\x38\x00\x05\x42\x9F\x37\xFF\x39\x94\x51\x80",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
