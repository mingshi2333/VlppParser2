/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::COMMENT:
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"SWITCH",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"OPEN_TEST",
					L"AND",
					L"OR",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"WEAK_ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"ID",
					L"STRING",
					L"CONDITIONAL_LITERAL",
					L"SPACE",
					L"COMMENT",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L"?(",
					L"&&",
					L"||",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"?=",
					L"+",
					L"-",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L"/?/(",
					L"&&",
					L"/|/|",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/?=",
					L"/+",
					L"-",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"(\'[^\']*\')+",
					L"/s+",
					L"////[^/r/n]*",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 1738; // 21855 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 202;
				static const vl::vint dataSolidRows = 6;
				static const vl::vint dataRows = 7;
				static const char* compressed[] = {
					"\x5F\x55\x00\x00\xC2\x06\x00\x00\x52\x00\x01\x80\x21\x84\x81\x83\x1E\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x25\x04\xA6\x0A\x94\x87\x11\x96\x82\x28\x30\x84\x89\x13\x9C\x82\x14\x9B\x04\xAB\x39\x84\x8C\x14\x9C\x83\x16\x3F\x84\xAE\x02\xA4\x87\x15\xA2\x82\x30\x04\xB9\x04\x8A\x1C\xA4\x83\x1D\x4F\x84\xBC\x12\xA4\x85\x1D\xAA\x82\x3E\x58\x84\x87\x86\x84\x83\x80\x81\x04\xC1\x04\x9A\x24\x83\x2D\xB2\x82\x5C\x68\x84\x9D\x2B\xB4\x82\x2E\xB7\x04\xDF\x31\xA4\x80\x34\xB8\x83\x30\x77\x84\xA2\x3A\xB4\x83\x31\xBE\x82\x64\x00\xC4\x85\x33\xC4\x82\x32\xC3\x04\xE7\x09\xC4\x88\x34\xC4\x83\x34\x8F\x84\xAA\x32\xC4\x83\x35\xCA\x82\x6C\x18\xC4\x8D\x3B\xCC\x82\x36\xCF\x04\xEF\x21\xC4\x80\x3C\xD0\x83\x38\xA7\x84\xB2\x2A\xD4\x83\x39\xD6\x82\x74\x30\xC4\x95\x33\xDC\x82\x3A\xDB\x04\xF7\x39\xC4\x88\x3C\x82\x3C\x82\x7B\x40\xC4\x9C\x33\xE4\x81\x3E\xE3\x04\xFE\x04\x9F\x7F\x78\x08\x00\xE6\xCC\x9B\x04\x92\xE1\x80\xEB\x7E\xEA\xCF\xD0\xD8\xF4",
					"\x04\x81\x0F\xE4\xE8\x0F\x04\x9A\x0A\x8E\x85\xE8\xE8\x0B\x04\x91\x04\x97\x0F\xEC\xE4\x0F\xF6\xFF\x12\x04\x93\x00\xFD\x08\xF8\x8D\xE6\xCC\xD8\x11\x89\xFF\x7F\x89\xFE\xFB\x7D\x79\x41\x40\x01\x80\x02\x00\x41\x05\x83\x08\x83\x82\x04\x8C\x80\x01\x81\x10\x8E\x81\x85\x40\x07\x12\x84\x41\x01\x04\x46\x0E\x80\x01\x16\x81\x45\x45\x40\xCE\x41\x47\x45\x7F\xD6\x65\x86\x8B\x89\x28\xA9\x8A\x8B\x8A\x2C\xAC\x8C\x44\x89\x2D\xAA\x8F\x89\x76\x31\xB3\x86\x77\x8C\x38\x9B\x4A\x8D\x40\x39\xBC\x8B\x8C\x00\x3D\x80\x94\x41\x07\x3F\x81\x91\x92\x07\x45\x89\x9E\x8C\x8C\x31\x8D\x9E\x93\x93\x50\xB5\x80\x7D\x94\x25\xB6\x8D\x92\x95\xCC\x46\x9A\x92\x90\x4B\x9C\x9E\x95\x90\x1E\x5D\x9A\x96\x98\x5B\xA3\x9E\x94\x95\x68\xA9\x9A\x9A\x94\x4C\xA8\x98\x95\x8B\x6F\xA6\x92\x9D\x99\x74\x81\x41\x48\x99\x78\x9F\x95\x9F\x99\x6B\xBD\x9E\x9F\x9A\x6F\x80\xA3\x97\x8A\x6F\xA4\x49\x9F\x9C\x87\xBB\x98\xA2\x9E\x89\xB9\x9F\x9F\xA3\x90\x8E\x91\xA2\x9A\x93\xB2\x80\x7F\xA2\x98\x8A\xAA\xA5\xA3\x8C\x80\x07\x49\x97\x91\xA1\xA2\xAB\x89\x95\xAE\x93\xA2\xA5\xFD\x59\xAC\xA6\xAA",
					"\x5E\xA4\x0B\xA5\xA7\x66\xA3\xA2\xAF\xA8\xA5\x94\x95\xAC\xA9\xF0\x69\x4B\xAB\xAB\xAC\xBD\xAF\xAB\xAC\xC0\x81\xB2\xB3\xB0\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x9D\xB2\xB7\x4A\x6D\x80\xBE\x49\xB8\xDE\xA5\xB2\xB5\x4C\xE4\xA6\xBA\xBB\xBA\xEC\xAD\xBE\xB9\x94\x34\x69\xBF\xBB\xBC\xF4\xB5\xB3\xB3\x4D\xF2\xB6\xBA\xBF\xBE\xFC\xBD\xBE\xBF\xBF\x00\xC1\xC2\xC3\xC0\x04\xC5\xC6\xC3\xC1\x08\xC9\xC2\xB7\xAD\x50\x8C\xC5\x97\xA5\xBC\x91\xCB\xAF\xC4\xB0\x9B\x94\x96\x4E\x01\x58\xC0\x02\xC6\x1C\xFB\x49\xC6\xC7\x00\x3D\x4F\xC7\xC8\x1B\xE0\xCD\xC4\xC9\x27\xE5\xC8\xCA\xC9\x2C\xEB\xCE\xCA\xCA\x30\xE9\xC2\xCD\xCB\x31\xF4\xC3\xCF\xCB\x37\xF5\xC8\xCE\xCD\x3C\xEF\xC6\x74\x50\x01\x40\xD0\x02\xD0\x44\xC1\x51\xD2\xD1\x43\xC8\xD2\xD3\x50\x47\xCD\xD9\xD2\xD3\x45\xD0\xDA\xD3\xD4\x52\xD5\xDF\xD3\xD5\x51\xD8\xD4\xD6\xD6\x56\xD9\xDE\xD7\xD6\x5F\xDD\xD0\xDB\xD8\x62\xCE\xD8\x8A\x51\x01\x68\xD4\x8F\x3F\x6A\xD6\x7D\xDA\xC2\x70\xF1\xDD\x91\x52\xF9\xB2\xD6\xDE\xB2\x0E",
					"\xD2\xA7\xA9\x8A\x71\x84\x41\x0E\xC4\x15\xD4\xCE\xAC\xC5\x77\xF9\xD7\x97\xDE\x28\xBD\xD2\xE0\xE0\x83\xC1\xEE\xE2\xE1\x01\xD0\xE0\x9C\xE2\xB8\xA9\xAC\xE3\xE5\x8B\xD9\xEC\x9E\xDC\x92\xEE\x84\xE6\x89\x6F\xB2\x08\xE7\xE3\xA3\xCD\xED\xE6\xBF\xA7\xE8\xAB\xDA\xE7\x96\xDA\xE6\xE9\xE9\x04\x73\x0B\x9D\xE1\x9F\xCF\x92\xE6\xE2\xA4\xEE\xE3\xE8\x0D\xA3\xF4\xE5\xDC\x9B\xAB\xC4\xA0\xC6\xEE\x5D\xB5\x00\xEC\xF1\x9D\xBE\xE1\xF1\x9A\xB7\xC3\xF9\xEF\xF3\x33\xB6\x07\xF0\xF4\x3F\x8A\xFF\xA1\xF3\xAD\xD4\xF8\xF0\xAB\x37\x3D\xE7\xDF\xF7\xE0\xE1\xF2\xFB\xF8\xE4\xE5\xF6\xFB\xF9\x09\xF8\x05\xEC\xFA\xB2\xB9\xCE\xF8\xC8\x22\xFA\xC2\xFF\xFB\x3B\xF5\xF3\xFD\xCF\xF7\xF6\xF4\xFD\xFE\xFC\xFB\xFE\xFC\xFE\xFF\x64\x64\xB0\x4B\x2F\x76\xF6\x49\x61\x6C\x5C\x69\x80\x02\xCB\x64\x6C\x05\x8D\x83\x81\x0F\x91\x81\xD9\x0E\x83\x82\x08\x95\x82\x82\x14\x99\x80\x02\xCC\x5D\x29\x02\x86\x87\x5F\x6A\x6F\x6C\x73\x22\x8C\x6D\xF5\x5F\x80\x7C\x50\x21\x21\x0A\xEB\x6B\x84\xEB\x2B\x87\x85\x51\x2A\x85\x0C\x80\x00\x86\x19\xB6\x84\x86\x33\x95\x84\x0E\xB7\x8A\x87\x1E\xB9\x87",
					"\x87\x3C\x80\x8B\x0E\xC3\x8E\x87\x20\x86\x8C\x88\x42\x85\x88\x12\xC7\x8A\x89\x26\x82\x8F\x5F\xA9\x7C\x6E\x09\xD9\x4E\x79\xD7\x41\x23\x2A\xDB\x73\x79\x14\xFB\x5B\x8B\xCA\x4B\x7A\x8A\xD9\x76\x8A\xF6\x63\x86\x2A\xCD\x56\x7F\x4F\xD8\x6B\x6E\x18\xAC\x59\x2B\x2C\x84\x76\x6E\x5D\x80\x77\x14\xFF\x18\x77\x35\x9A\x8B\x7A\x67\x9E\x4D\x1A\xB7\x47\x8E\x37\x8E\x74\x2B\xCF\x79\x8D\x9F\x7B\x80\x3B\x45\x5F\x2B\x8C\x76\x88\x7A\x20\x82\x55\x81\x3A\xBD\x88\x91\x7B\x42\x2F\x1B\xA7\x84\x93\x64\x42\x0C\x20\x97\x81\x21\x26\x80\x0B\x93\x4E\x98\x97\x93\x01\x23\x08\x28\x9C\x93\x94\x4F\x9A\x95\x94\xA8\x87\x96\x2A\xA4\x9B\x94\x53\xAC\x97\x95\xAE\x91\x95\x2A\xB0\x93\x96\x59\xAD\x95\x96\xB8\x97\x96\x2E\xB4\x9B\x96\x5B\xBC\x97\x95\xD6\x24\x08\x41\x42\x91\x20\x62\x80\x06\x98\xC8\x83\x9A\x32\xC5\x9B\x99\x63\x84\x25\x08\xCD\x89\x98\x33\xD3\x9E\x98\x6A\x92\x9D\x9A\xD8\x97\x9A\x36\xD1\x9C\x9A\x6B\x9D\x99\x9B\xDF\x9B\x9A\x37\xE3\x90\x9C\x72\xA2\x9D\x9C\xE8\x87\x9F\x35\xAE\x83\x86\x76\xBD\x3E\x89\x4C\x89\x8A\x3C\xF1\x94\x9F\x25\xB6\x98\x9E\xF7\x93",
					"\x9D\x3E\xF5\x98\x9F\x7E\xBA\x9E\x9F\x47\x90\x8B\x1C\xAC\x7F\x8B\xC4\x55\x8F\x55\x46\x0F\x91\x22\x9B\x71\x6F\x38\x8F\x65\x91\x07\xBE\x8F\x42\xB3\x47\x08\xC0\x4B\x94\x52\x73\x8E\x92\x44\x8A\xA6\xA2\x38\x83\xA2\x78\x10\xA1\x8C\x41\x48\x0C\xA3\x8D\x93\x95\xA1\x1F\xAA\x76\xDE\x22\xA6\xA4\xC7\x49\x0D\xA4\x0C\xB0\x6E\x43\xFC\x81\xA4\x35\x93\x7A\x09\x30\xAD\x70\x95\x3E\x9C\xA7\x51\xA2\x95\x97\xB9\x9F\x95\x4F\xC0\xA4\xA8\xA1\x81\xAB\xA8\x46\xA5\xA8\x52\xCB\xA7\xA9\xA6\x85\xAB\x80\x29\xB5\x90\xC0\x6A\x91\x9D\xAA\x94\x98\x9A\xE6\x96\xA9\x3A\xDA\xA4\xAB\xAC\x9E\xAB\xAB\x5F\xBD\xA8\x58\xE3\xA2\xAD\xB2\x9C\xA9\xAA\x8F\x5D\x81\x41\xD2\xAC\xAC\x64\x73\xA5\x90\x19\xB1\xA0\x24\xAD\xAB\x51\x25\x33\x76\xA3\x1E\x80\xA7\x5A\xF2\x8C\xA5\xB9\xBE\xAB\xA2\xD5\x78\xAF\x5E\xB6\x71\xAF\xBE\xAC\x54\x09\x39\xBE\x78\xE7\x68\xAE\x8B\x95\xB6\xA4\xAE\x89\xA7\xA6\x4C\x8C\xBC\xAF\xC1\xB4\xA3\x6D\x4D\x11\xB3\x5F\x8A\xB8\xA5\xBC\xAA\xA7\x70\x86\xBA\xB3\x8C\x4E\x00\xA7\x8B\x8C\x7D\xB0\x8F\xBB\xB0\x64\xFE\x86\xB4\x53\x75\xA7\xB2\x80\xBD\x4B\x13\x22",
					"\xB1\xB1\xC5\x9E\xB0\x8C\x96\xB0\xAD\x68\xAB\xBA\xB4\x2F\x50\x0F\xAE\xB6\xB9\xB4\xF0\x0E\xB0\xB6\xDA\xBC\xB1\x48\xAD\xB6\x54\x6A\xC5\xB7\xB9\xD1\x51\x0D\xA3\xC1\xB7\x7B\x72\xBA\xBD\xB7\xD8\xBD\xB4\x4A\xFE\x1F\x07\x3F\x69\x1F\x1F\x69\x3F\x19\x1F\xEB\x1F\x1F\x00\x00\x25\x21\x80\x18\x3F\xBC\xD3\x29\xBE\x79\xEA\xB0\x01\x85\x01\x25\x21\x01\x30\x21\x40\x7F\x30\x01\x0F\x40\x03\x44\x00\x01\x4D\x7E\x84\x26\x3F\x80\x2A\x39\x20\xF2\x21\x20\x7D\x01\x28\x3D\x80\x2C\x39\x20\xDE\x21\x23\x78\x6B\xB1\x20\xFD\xBA\xB8\x49\x0D\xCC\xBE\x86\x0C\xC0\x00\xF4\x94\xC6\xC2\x15\xD9\x22\x83\x61\x30\x45\x8F\x11\xC1\x20\xEF\x3F\xC0\x00\x44\x41\x20\x08\xDE\x48\xC3\xD8\x2A\x43\x85\xEC\xBC\x3A\x11\xFA\xBB\x46\x18\xC7\x43\x8A\x94\xCA\xBF\x10\xFB\xB9\x20\x24\xD9\xC1\x40\x03\x4A\xC6\x00\x18\x43\xC6\x00\x1C\x40\x90\x95\x44\xC3\x82\x00",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
