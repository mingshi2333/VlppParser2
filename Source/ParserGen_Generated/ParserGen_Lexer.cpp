/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::COMMENT:
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"SWITCH",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"OPEN_PUSH",
					L"OPEN_TEST",
					L"AND",
					L"OR",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"WEAK_ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"LS_PH",
					L"LS_I",
					L"ID",
					L"STRING",
					L"CONDITIONAL_LITERAL",
					L"SPACE",
					L"COMMENT",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L"!(",
					L"?(",
					L"&&",
					L"||",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"?=",
					L"+",
					L"-",
					L"left_recursion_placeholder",
					L"left_recursion_inject",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L"!/(",
					L"/?/(",
					L"&&",
					L"/|/|",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/?=",
					L"/+",
					L"-",
					L"left_recursion_placeholder",
					L"left_recursion_inject",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"(\'[^\']*\')+",
					L"/s+",
					L"////[^/r/n]*",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2119; // 30439 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 71;
				static const vl::vint dataSolidRows = 8;
				static const vl::vint dataRows = 9;
				static const char* compressed[] = {
					"\xE7\x76\x00\x00\x3F\x08\x00\x00\x73\x00\x01\x80\x21\x84\x81\x83\x1E\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x25\x04\xA6\x0A\x94\x87\x11\x96\x82\x28\x30\x84\x89\x13\x9C\x82\x14\x9B\x04\xAB\x39\x84\x8C\x14\x9C\x83\x16\x3F\x84\xAE\x02\xA4\x87\x15\xA2\x82\x30\x04\xB9\x04\x8A\x1C\xA4\x83\x1D\x4F\x84\xBC\x12\xA4\x85\x1D\xAA\x82\x3E\x58\x84\x87\x86\x84\x83\x80\x81\x04\xC1\x04\x9A\x24\x83\x2D\xB2\x82\x5C\x68\x84\x9D\x2B\xB4\x82\x2E\xB7\x04\xDF\x31\xA4\x80\x34\xB8\x83\x30\x77\x84\xA2\x3A\xB4\x83\x31\xBE\x82\x64\x00\xC4\x85\x33\xC4\x82\x32\xC3\x04\xE7\x09\xC4\x88\x34\xC4\x83\x34\x8F\x84\xAA\x32\xC4\x83\x35\xCA\x82\x6C\x18\xC4\x8D\x3B\xCC\x82\x36\xCF\x04\xEF\x21\xC4\x80\x3C\xD0\x83\x38\xA7\x84\xB2\x2A\xD4\x80\x81\x80\xD7\x00\x74\x04\x92\xD1\x85\x38\x82\xDB\x01\xF6\x04\x9A\xD1\x87\x38\x82\xDF\x01\xF8\x04\x9A\x34\x83\x3D\xE2\x82\x7C\x48\xC4\x9D\x3B\xE4\x82\x3E\x82\xFF\x7F\x50\x00\x01\xE9\xE8\x0E\x82\xD7\x81\x95\xFF",
					"\x79\xEC\xE9\xEB\xEE\x1A\x81\x9A\x10\xE5\xEB\xE9\x81\x0D\x0A\x8E\x9A\xF5\xE6\x0C\x82\x08\x82\x17\x64\xD1\xFD\x02\xFF\x7F\x08\x82\x14\x75\xD5\x15\xFF\x05\xF9\x0D\x88\xEB\x51\x73\x45\x80\xFF\x3F\x74\x81\x42\x01\x46\x80\x02\x00\x04\x4A\x83\x01\x83\x10\x89\x81\x84\x00\x0A\x8A\x88\x07\x84\x15\x84\x47\x00\x86\x04\x45\x04\x42\x01\x13\x84\x0C\x85\x40\x15\x41\x41\x04\x46\x04\x9B\x7A\x8B\x8A\x2C\xAD\x8E\x8B\x8B\x30\xB1\x81\x8E\x47\x29\xB2\x8F\x88\x8D\xDE\x76\x88\x8F\x76\x38\xBD\x8F\x45\x40\x3E\x80\x9F\x8C\x00\x41\x84\x93\x92\x07\x43\x85\x95\x90\x47\x42\x8D\x96\x92\x93\x3B\xB6\x82\x97\x94\x54\x95\x96\x95\x94\x56\xAC\x88\x96\x8C\x5B\x8A\x99\x93\x97\x50\xA0\x90\x01\x48\x61\xA5\x9F\x93\x99\x5E\xA6\x9B\x95\x96\x6C\xAD\x9E\x9B\x8D\xF5\x6F\x9B\x98\x8C\x5D\xA2\x99\x98\x9A\x76\xA2\x94\x4A\x9A\x79\xBC\x9E\x93\x9B\x80\x81\xA0\xA3\x9C\x6D\x84\xAE\x8B\x96\x27\x7E\x98\x9E\xA2\x77\x8D\xAD\x9F\xA2\x90\x86\xA2\xA3\xA4\x94\xAD\x82\xA7\x95\x71\xB4\x95\x7E\xA3\x8C\x8F\xAC\xA5\xA4\x9E\x84\x44\x0B\x90\x95\xA5\xA6\xAA\x96\x99\x85\xA9\xAB\xA1",
					"\x9B\xA1\xAD\xA7\xAB\x67\xA9\x40\xAF\xA7\x97\xA7\xA6\xAE\x9B\xB5\x94\x99\xAC\x8F\xF5\x6B\x43\xAE\xAB\xA0\xBF\xA2\xB3\x99\xB7\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x9D\xBE\xB7\xB7\xE0\xA1\xB2\xBB\xB5\x2E\x75\x83\xBB\xB9\xE8\x8E\xB1\x4E\xB9\xC6\xB4\x4C\xB9\xBA\xF0\x92\xB7\x4F\xBB\xF1\xB5\xB6\xBF\xBD\xF8\xB9\xB1\x76\x4E\xF4\xBA\xBE\xBF\xBF\x00\xD3\xAD\x4D\xBF\x01\xC5\xC6\xC3\xC1\x08\xC9\xCA\xC3\xC2\x0C\xCD\xCE\xC3\xC3\x10\xD1\xC5\xB3\xAE\x52\x94\xC1\x75\x9D\x8A\x80\x53\xB0\xAD\xC0\x9C\xC4\xC3\xC2\x16\xDC\x9B\xAA\xA5\xAD\x9B\xCD\xC7\xC9\x26\xFF\x96\x97\x50\x01\x6C\xC0\x02\xCB\x30\xC4\x5D\xCA\xCC\x00\x06\x53\xCF\xCD\x2F\xF4\xC1\xCC\xCE\x3B\xF9\xCC\xCE\xCE\x40\xFF\xC2\xD2\xCF\x44\xFD\xC6\xD1\xD0\x45\xC8\xD7\xD3\xD0\x4B\xC9\xDC\xD2\xD2\x50\xC3\xDB\x75\x52\x01\x54\xD0\x02\xD5\x58\xC8\x5A\xD5\xD5\x5B\xD7\xDD\xD5\x0C\x5D\xD9\xDC\xD7\xD8\x5E\xE4\xD2\xD9\xD9\x68\xE7\xDA\xD9\xD8\x6C\xE6\xDD\xD9\xDA\x6F\xEB\xDE\xDB\xDC\x70\xF4\xD2\xDD\xDD\x78",
					"\xF7\xD7\xD9\x8B\x32\x04\x4D\xDC\x81\x7F\xF9\x8F\x3D\xE0\x12\xC5\xE6\xE3\x94\x33\x23\xC7\xE3\xE2\xD3\xA1\xC3\x8E\xE2\x2B\x98\xC0\x00\x0D\x28\xC1\xB6\xE6\xC7\x97\xE2\x9C\xE2\xE3\x9A\x9F\xC5\x76\xE4\x98\xE1\xE5\xE6\xE8\x2A\xC7\xEC\xE4\x9C\x9E\xD7\xC5\xC9\xE6\x29\xEC\xEE\xE8\xE6\x9B\xD0\xEA\xAE\xEC\xBC\x84\x85\x0F\xE8\xB8\xED\xE0\xEF\xE2\xA7\xEC\xA9\xEB\x3F\xA0\xF9\xEF\xEA\xF0\x38\xB6\x0F\xA1\xEC\xBF\xCF\xEF\xED\xF0\xBA\xC4\xF3\x93\x0D\xC2\xC8\xF2\xE2\x9C\xB4\xDF\xEB\xE8\xE9\x67\xB8\x0E\xF1\xF3\xA5\xC6\xED\xEC\xC9\xCB\xD7\xFB\xF7\x99\x4B\x5C\xF3\xF1\xF7\x85\xDF\xF8\xA9\xF8\x04\x98\xFE\xF8\xB0\x4D\x6D\xEC\xE3\xFC\xF4\xF5\xF6\xFF\xFD\xF8\xF9\xFA\xFF\xFE\xFC\xFD\xFE\xFD\x95\x50\x29\x7B\xFF\x78\x7A\x7D\xC8\x55\x7A\x75\xED\x60\x5B\x54\x66\x7F\x7C\x58\x59\x4D\x69\x10\x94\x66\xCD\x4E\x64\x83\x08\x8F\x6F\x82\x15\x91\x69\x06\x98\x86\x83\x0D\x9E\x85\x83\x20\x9A\x81\x08\xB8\x65\x58\xAB\x02\x83\x80\x0B\x7A\x6D\xDC\x2B\x84\x6C\xB0\x76\x6C\x85\x79\x70\x86\x0A\xAF\x84\x87\x18\xB5\x83\x86\x36\x99\x84\x0E\xBB\x82\x87\x03\xA7\x51",
					"\x2B\x27\x88\x86\xBF\x01\x74\x71\xEA\x05\x89\x3A\x47\x82\x8B\xFE\x5C\x20\x00\x26\x9B\x3E\x89\xD5\x2C\x8A\x14\xDB\x24\x8B\xAE\x16\x8D\x89\x55\x98\x8B\x15\xD3\x8B\x8B\x2C\x9C\x8A\x8B\x60\x9F\x8A\x18\xDE\x84\x8D\x2E\xA6\x89\x8C\x65\x88\x8F\x19\xE3\x8B\x8D\x34\xAC\x8A\x8D\x70\x9F\x8B\xC1\x05\x8A\x45\x90\x4C\x7F\x7C\x67\x5F\x28\x1E\x8D\x86\x72\xE9\x53\x56\x8E\xE2\x6C\x83\xF8\x38\x42\x2D\x61\x7E\x8A\x50\x80\x89\x82\x20\x8A\x52\x09\x41\x87\x7C\x77\x3E\x8A\x7B\xF4\x1D\x72\x70\x3E\x96\x96\x91\xE8\x72\x60\x1D\xB5\x73\x92\xD4\x55\x90\x93\x7B\x80\x5B\x10\x40\x57\x91\x40\x49\x97\x93\x8A\x44\x08\x28\x97\x9A\x51\x52\x83\x56\x87\x77\x8C\x95\x28\x8A\x55\x08\x52\x8A\x8F\x96\xB8\x80\x79\x24\x94\x93\x4B\x58\xAB\x93\x7C\x46\x16\x95\x95\x47\x04\x20\x62\x81\x26\x98\x00\x08\x9A\x32\xC5\x9C\x99\x80\x08\x0D\x99\xC9\x90\x9B\x32\xC7\x92\x9B\x6A\x94\x9F\x9A\xD1\x98\x9B\x34\xD9\x9C\x9B\x6D\x9E\x9E\x9A\xDD\x80\x9F\x37\xDA\x92\x9D\x72\xA4\x9F\x9C\xE1\x88\x9F\x38\xE9\x9C\x9B\xED\x09\x0C\x20\xEF\x81\x21\x3C\x80\x03\x9F\x7A\xB0\x9F\x9E\xF2\x98",
					"\x9C\x3D\x84\x2A\x08\x7D\xB6\x99\x9F\x00\xBB\x9D\x40\xFF\x92\xA1\x82\x84\xA7\xA0\xFE\x89\xA3\x40\x8A\xA6\xA0\x86\x88\xA3\xA1\x10\xAD\xA1\x44\x8F\xA2\xA3\x8A\x94\xA4\xA0\x4F\x99\x89\x46\x84\x4F\x8D\x8E\xAE\x8F\xA3\x6D\x81\xA5\x1C\xA0\xA3\xA4\x91\x9E\xA6\xA4\x24\xA7\xA5\x49\xAB\xAA\xA4\x39\x86\x63\x93\xD6\x6C\x7C\x2A\xF8\x8B\x09\x5F\x8B\x95\x93\x10\x70\xA4\x02\xB8\xA0\x7D\x99\xB2\x97\xA7\x04\x2C\x09\xE5\x2E\x94\x7A\x99\x9C\x90\xA8\x37\xB8\x78\x51\xB8\x50\x97\x40\x80\x05\x09\x36\xB3\x96\x54\xCB\xAA\x54\xA3\xB1\xA2\xAA\xD8\x6E\x09\x54\xBA\xA6\x5E\xAE\xA7\x97\xA8\xC2\x6F\x0B\x56\xC3\xA0\x93\x20\xBD\xA3\x4A\x50\x0E\xA8\x52\xD8\xA1\x7A\x2B\x6B\x9F\xAD\xD0\x8F\x9A\x3A\xE6\x9C\x9C\xB8\xB3\xAF\xAE\x75\xB4\xAE\x5D\xF9\xA8\xAF\xBD\xBE\xAA\xAF\x80\xB8\xAD\x09\xBB\x99\x97\x82\x57\xA6\xA1\x88\xA1\xA1\x3F\x93\xA9\xB0\x8B\x8D\xB7\xB0\x8C\xB1\xB2\x63\x92\xB0\xB3\xC9\x96\xB5\xB2\x98\xAF\xB0\x61\x94\x50\x88\x9E\x85\xB7\xB3\x13\x7B\xB3\x59\x95\x6A\xAD\xB1\xA6\x79\x0A\x8F\x86\x76\x68\xEB\x7E\xB2\x03\x8A\x94\xAD\x49\xA3\x7C\x55\xEC",
					"\x4F\xAB\xAB\x98\x7A\x0A\xA6\xB3\xA9\x59\xAD\xB3\x76\xAB\xBB\xA3\xAD\xC0\xA2\x9A\xF7\x2B\xBE\xB4\xDE\x9C\x93\x3B\x53\x19\xB5\x70\xAD\x9B\xB7\x3F\x8D\xAF\xB5\xCB\xB2\xA8\x15\x6D\xAA\xB4\xB3\xAC\xB5\x97\xA5\xB1\xB6\x99\x55\x01\xAB\xD9\x99\x4D\xB6\xBF\xAA\xBA\x78\xD6\xBE\x5E\xAF\x8F\xBE\xA7\x51\xB6\x0B\x78\xC4\x5D\xB8\x44\xA7\xB8\xAC\x66\x57\x0B\x7A\xB2\x9E\xBA\x4C\x7E\xB2\x97\xDA\xB0\xB6\xE5\x58\x09\xB5\xE1\xA4\xBD\x8E\xEF\xB6\xB7\x7C\xB9\xB5\xBF\x2A\x60\xB8\xBF\x67\x59\x0B\x80\xF9\xB5\xC1\xDE\x86\xBF\xAA\xF0\xBA\xBF\x5A\xE4\x26\x91\xF6\xA6\x91\xC0\xE1\xB9\xBF\x5A\xE6\x2C\xB9\xEA\x8F\xC2\x47\x18\xC8\xC1\x74\xA3\xCA\x72\x0B\xEF\x97\xBE\x24\xCD\x75\x5A\x72\x76\xC5\xA2\x9F\xC0\xC1\x11\xC9\xC4\x1E\xEC\x25\xC2\x0F\xCE\xB8\xC5\xE3\x6F\x2E\x86\xE4\xA6\xC6\xF7\xB8\xC3\xC7\x8A\x52\x2C\x83\xAD\xCC\xA9\x1F\xD2\xC0\x58\x75\x20\xCB\x8B\xF3\x84\xB8\x00\xFF\x70\x2F\xD0\xAB\xC3\x91\xE6\x4D\xC0\xEC\x86\xCC\x8F\x7E\x2D\x77\x5E\x37\xA5\xCA\xD2\x97\xC9\xAA\x81\x2A\xC9\x91\x5D\xC0\xC5\x2F\xE2\xCD\x30\x4A\xC4\xCE\xC8\x77\xB7\x31\x33",
					"\xEE\xCC\xBD\x3D\xD7\xC2\x99\xFA\xBA\x31\x37\xF7\x4A\xCD\x92\x96\xC8\x7A\x81\x2D\x30\x3B\xDD\xBC\xC8\x55\xAF\xC6\x2F\xCE\x40\x32\x3F\xE6\x78\xCF\xBC\x9E\xCB\x9E\x90\x53\x32\x43\xFA\xB8\xD1\x9E\x9A\xCD\x84\x96\x3E\xD1\xB5\x90\xD6\x77\x82\xD9\xBA\xEB\x19\x35\xD3\xFE\xA9\x7D\xC9\xC7\xAA\xD1\x8C\xD2\xCF\x52\xCE\x0E\x80\xD0\xB4\xA1\xC6\x8C\xF7\x4F\x33\x21\xF1\xCF\xC4\x99\xD1\xC9\xA7\xAE\xDE\xBF\x25\xC9\xD5\xCC\x8B\xCB\xAE\x68\x0E\xD7\xD3\xD1\xB8\xD3\xD4\x01\x25\x37\xAC\x8F\xD8\xD5\xEF\xAA\xD7\x51\xA8\x23\xDA\x52\xC5\xD6\xBF\x58\xF9\xD4\xD4\x43\x4B\x34\x8B\xAF\xDE\xC4\x49\xC2\xC2\xD9\xA0\x99\x4A\x3F\x7F\x0E\x1F\x69\x3F\x1F\x15\xFE\x1F\x13\x1F\x7D\x1B\x3B\x03\x30\x35\x20\x48\x41\x21\xBA\x80\x0B\xDD\x76\xC4\x26\xDD\x01\x2B\x21\x40\x0D\x21\x20\x88\x01\x23\x40\x00\x05\x44\x00\x17\x21\x21\xF8\x01\x21\x51\x00\x00\xE1\x7B\x01\x2F\x3D\x80\x37\x39\x20\xF9\x21\x23\x85\x62\x34\x20\xF4\x2A\xDF\xDD\x26\x31\xE1\x40\x64\x41\xE0\x88\xC1\x20\x44\x0F\xF9\xE0\xBB\x96\xEB\xE2\x8D\xEB\xD9\x3C\x00\x1D\x3E\x84\x01\x26\x3C\x00\x27\x47\xDF",
					"\x1C\xE0\xE0\x93\x15\xEE\x48\x8A\xFB\x4D\xE3\x30\xEB\xDF\x83\x1E\xEC\xE3\xFD\x1A\xE0\xE0\x00\xEF\xE4\xBC\x8B\x4C\xE3\x9D\xEB\xDA\xE5\x12\xE7\x4F\xBA\x88\x40\xE6\x0F\x74\xE2\xE3\x22\x47\xE8\xCC\x9B\x4A\xE9\x75\xE8\xDD\xE7\x50\xED\xE9\xD4\xB1\xE3\xEA\x9F\xDC\xE4\x3E\x52\xFA\xE1\x77\x00",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
