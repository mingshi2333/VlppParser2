/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::COMMENT:
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"SWITCH",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"OPEN_PUSH",
					L"OPEN_TEST",
					L"AND",
					L"OR",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"WEAK_ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"LS_PH",
					L"LS_I",
					L"ID",
					L"STRING",
					L"CONDITIONAL_LITERAL",
					L"SPACE",
					L"COMMENT",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L"!(",
					L"?(",
					L"&&",
					L"||",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"?=",
					L"+",
					L"-",
					L"left_recursion_place_holder",
					L"left_recursion_inject",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L"!/(",
					L"/?/(",
					L"&&",
					L"/|/|",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/?=",
					L"/+",
					L"-",
					L"left_recursion_place_holder",
					L"left_recursion_inject",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"(\'[^\']*\')+",
					L"/s+",
					L"////[^/r/n]*",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2124; // 30699 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 76;
				static const vl::vint dataSolidRows = 8;
				static const vl::vint dataRows = 9;
				static const char* compressed[] = {
					"\xEB\x77\x00\x00\x44\x08\x00\x00\x74\x00\x01\x80\x21\x84\x81\x83\x1E\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x25\x04\xA6\x0A\x94\x87\x11\x96\x82\x28\x30\x84\x89\x13\x9C\x82\x14\x9B\x04\xAB\x39\x84\x8C\x14\x9C\x83\x16\x3F\x84\xAE\x02\xA4\x87\x15\xA2\x82\x30\x04\xB9\x04\x8A\x1C\xA4\x83\x1D\x4F\x84\xBC\x12\xA4\x85\x1D\xAA\x82\x3E\x58\x84\x87\x86\x84\x83\x80\x81\x04\xC1\x04\x9A\x24\x83\x2D\xB2\x82\x5C\x68\x84\x9D\x2B\xB4\x82\x2E\xB7\x04\xDF\x31\xA4\x80\x34\xB8\x83\x30\x77\x84\xA2\x3A\xB4\x83\x31\xBE\x82\x64\x00\xC4\x85\x33\xC4\x82\x32\xC3\x04\xE7\x09\xC4\x88\x34\xC4\x83\x34\x8F\x84\xAA\x32\xC4\x83\x35\xCA\x82\x6C\x18\xC4\x8D\x3B\xCC\x82\x36\xCF\x04\xEF\x21\xC4\x80\x3C\xD0\x83\x38\xA7\x84\xB2\x2A\xD4\x83\x39\xD6\x82\x00\x81\xB1\xC0\x05\x3C\x81\xDB\x80\x76\x04\xB9\xC1\x87\x3C\x81\xDF\x80\x78\x04\xBA\x24\x8B\x3C\xE0\x82\x3E\xC7\x84\xBD\x2A\xE4\x86\x3C\x83\x7F\xFF\x10\x00\x10\xE0\xEC\x0C\x82\xEB\x01\xD4\xFF\x78",
					"\xE3\xEC\xE8\xEE\x8D\x01\x9A\x0F\xF4\xE2\xE9\x83\x0C\x85\x0E\xD9\xD4\xF6\x04\x82\x08\x83\x0B\xE3\xD0\xDD\x11\xFF\x7B\x08\x82\x0A\xF4\x95\x34\xEF\x04\xF9\x0D\x88\xF5\xD0\x53\x40\x83\x3F\xFE\x43\x89\x41\x40\x05\x80\x02\x00\x41\x09\x83\x0C\x83\x83\x08\x90\x80\x01\x82\x09\x98\x02\x84\x85\x04\x47\x07\x84\x41\x05\x04\x46\x02\x84\x04\x1B\x81\x41\x45\x01\x51\x08\x47\x80\xDA\x69\x8A\x8B\x8A\x2C\xAD\x8E\x8B\x8B\x30\xB0\x8E\x44\x8A\x31\xAE\x83\x8D\x77\x35\xB7\x8A\x77\x8D\x3C\x9F\x41\x41\x8F\x3F\xBE\x80\x00\x90\x43\x82\x9E\x06\x90\x44\x84\x9C\x45\x90\x4C\x85\x9D\x92\x8E\x35\x91\x92\x97\x94\x54\x95\x90\x95\x95\x2B\x97\x91\x8E\x96\x49\x88\x9E\x97\x93\x5F\x80\x01\x48\x98\x64\x8E\x96\x99\x97\x65\x9A\x98\x97\x9A\x6C\xAD\x96\x8C\x7D\x6E\xAA\x9F\x88\x97\x61\xA8\x97\x99\x9D\x61\xA4\x49\x98\x9E\x7B\x8D\x9E\x9B\x9F\x80\xBF\x92\x9C\x9B\x83\xAD\x8A\x97\x49\x7D\xB7\x99\xA2\x9D\x8C\xBC\x9A\xA3\xA3\x85\x81\xA2\xA7\xA4\x2C\x91\xA6\x94\x9C\x73\xB4\x7D\xA3\xA2\x8E\x9B\xA0\xA5\xA7\x04\x64\x02\x90\xA5\xA4\xA5\xA9\x94\xA6\x84\xA8\xA6\xA2\xA6",
					"\xA0\x9C\xAE\xAA\x99\x29\x6F\xAE\xA6\xA5\xA6\xB5\xAD\x98\xAD\x53\xB8\xAB\x8C\x7D\x2B\x72\xAD\xAB\xA7\xBE\x81\xB6\x9A\xAD\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x9D\xBE\xB7\xB7\xE0\xA1\xB6\xB6\x4B\x34\xA2\xB6\xBB\xB9\xCD\xB1\x45\xB9\xB1\x34\x6B\xB8\xBB\xBB\xD1\xB7\x4E\xB8\xBC\xF4\xB5\xB6\xBF\xBD\xF8\x90\x7A\x4F\xBC\xF9\xBD\xBE\xBF\xBF\x92\xBD\x4C\xBC\xC0\x04\xC5\xC6\xC3\xC1\x08\xC9\xCA\xC3\xC2\x0C\xCD\xCE\xC3\xC3\x10\xC4\xBA\xAD\x94\x13\xD0\x74\x9D\xA2\x40\x42\xB3\xAF\xAF\x1B\xC3\xCA\xC1\xC5\x5B\xAA\xA5\xA4\xAB\x1A\xDC\xC6\xC9\xC9\x7E\x95\x93\x51\x40\x2B\xC0\x0D\xCB\xCB\x44\x6C\xC1\xCC\x00\x46\x72\xC6\xCE\xCB\x33\xF0\xC7\xCE\xCE\x38\xFB\xC9\xCF\xCF\x3E\xC1\xDD\xCF\xD0\x3C\xC5\xD0\xD0\xD1\x47\xC6\xD2\xD2\xD2\x48\xCB\xD9\xD3\xD3\x42\xDA\x79\x51\x40\x53\xC0\x05\xD7\xD5\x48\x59\xD4\xD6\xD6\x56\xDC\xD1\x0C\xD7\x58\xDB\xD2\xD9\xD7\x63\xE1\xD4\xDB\xD9\x66\xE9\xD0\xDB\xDA\x65\xEC\xD8\xDA\xDB\x6A\xED\xD2\xDF\xDB\x73\xF1\xD4\xDF\xDD\x76",
					"\xE6\xDC\x8A\x0C\x04\x7C\xD3\x82\xDF\x38\xBF\x30\xE1\xC4\x84\xC5\xE2\x97\x0C\x22\xC6\xEA\xE2\xB4\x20\xF2\x89\xE2\x8A\x17\xC0\x04\x0F\xC9\xC0\x95\xED\xC6\xE5\x61\x8B\xED\xE1\xA6\x1E\xD4\x71\xE7\xE5\xA0\xD4\xE1\xE9\xCA\x86\xDB\xEF\x99\xE7\x16\xE4\xC8\xE4\xCA\xAB\xED\xE7\xE6\xE6\x8F\xF9\xA1\xEF\xAE\x03\xB5\x02\xEB\xED\xAC\xEF\xEA\xE2\xE9\xAB\xA8\xEF\x3F\xE7\xB8\xEE\xE1\xF3\x8D\x36\x0E\xA0\xEE\xEF\x8E\xFE\xE0\xF1\xEE\xC3\xC2\x97\x0D\xF0\xC7\xC1\xE1\x9F\xEC\x9E\xEA\xE3\xEA\x99\x38\x0D\xFC\xF0\xE9\x85\xFC\xE3\xCA\xF2\xD6\xDA\xF6\x9B\x52\xDB\xC2\xFC\xF4\xE1\xDE\xE7\xA0\xFB\x80\xD7\xED\xFF\xAD\x53\xAC\xCB\xE2\xFF\xFC\xF4\xF5\xF6\xFF\xFD\xF8\xF9\xFA\xFF\xFE\xFC\xFD\xF4\x94\x54\xC8\x7E\x7F\xFD\x69\x70\x72\xEA\x69\x74\x7D\xBF\x53\x29\xF9\x6E\x7F\x54\x2C\x4C\x6F\x81\x33\x75\x65\xD3\x13\x80\x82\xA7\x56\x84\x82\x50\x78\x83\x05\x95\x8A\x83\x0E\x9C\x87\x83\x19\x80\x87\xCD\x44\x56\x2B\x00\x82\x82\x61\x79\x70\x6E\x0A\xE3\x6F\x6B\xBA\x6B\x80\x6F\x2F\x89\x86\x0B\xB3\x80\x86\x1A\xB2\x85\x86\x38\x97\x86\x0E\xB1\x86\x80\x53\x59\x2E",
					"\x84\x27\x9D\x5C\xE0\x03\x74\x3A\x22\x90\x3E\x88\x41\x9A\x7C\x57\x00\x0B\x88\xED\x0D\x8C\x3A\x4B\x91\x8B\x56\x53\x8D\x2B\x2A\x8C\x8C\x8A\x57\x96\x8A\x14\xDA\x88\x8B\x2D\x99\x8F\x8B\x5E\x81\x8D\x17\xE3\x8C\x8B\x32\xA0\x8C\x8C\x67\x86\x8E\x18\xEA\x88\x8D\x35\xA9\x8F\x8D\x5E\x86\x60\x01\xA9\x40\x65\xE5\x66\x7E\x4C\x5F\x37\x8C\x03\x95\x71\x7A\x49\x75\x89\x7C\x0B\x82\x7F\x8D\x62\x22\x59\x3E\x81\x57\x8F\x08\x81\x91\xA2\x42\x02\x90\xE3\x7B\x75\x87\xC9\x72\x78\xE7\x01\x7B\x8F\x4A\x8D\x97\x7C\x11\x73\x8C\xED\x12\x97\x74\x4A\x97\x92\x8F\xBF\x43\x0B\xAF\x06\x90\x50\x44\x9E\x91\x51\x44\x1F\x92\x25\x89\x54\x94\x41\x7D\x86\x8E\xAB\x80\x95\xA2\x45\x03\x95\x24\xB6\x97\x96\xBF\x70\x93\x24\xD2\x40\x96\x55\xA2\x7E\x08\xB5\x94\x4B\x11\x04\x23\x99\x80\x05\x98\x00\xC7\x89\x98\x31\xCB\x91\x20\x24\x0C\x98\x99\xCF\x8A\x9A\x31\xD1\x94\x9B\x69\x96\x98\x9A\xD7\x92\x98\x36\xDB\x9A\x9B\x6E\x95\x9C\x9B\xDF\x9E\x99\x36\xE1\x94\x9D\x71\xA6\x98\x9C\xE7\x82\x9C\x3A\xDB\x9A\x3B\x24\x04\x26\x9D\x01\x30\x9C\x00\x72\x94\x9F\x77\xB6\x99\x9E\xF7\x93",
					"\x9C\x41\x4A\x09\x9F\x7A\xB8\x9F\x9F\xFA\x80\xA2\x3F\x81\xA4\xA1\x81\x86\xA5\x9F\x08\xA2\xA1\x42\x85\xAB\xA1\x83\x8A\xA7\xA1\x0C\xB0\xA2\x43\x91\xA4\xA3\x89\x83\xA6\x89\x58\x98\xA3\x80\x6E\x8C\xA3\x36\x9E\xA4\x8D\x20\xB0\x8F\x47\xA2\xA1\xA5\x8E\xA5\xA3\xA4\x26\xA4\xA6\x4A\xA9\xA1\x8F\x82\x5A\x95\x7A\xEB\x67\x97\x1D\xCB\x0E\x96\x45\x9C\x97\x61\x2F\xA7\x83\x4D\xDF\x72\xA7\x58\xBE\xA4\x20\x4C\x14\x71\x2B\xD3\x71\xA7\x4D\xBF\xA6\xA6\xD7\x63\xAB\xAD\x2F\x90\x90\x00\x0D\x0D\xA6\xB2\x91\xAA\x52\xA9\x55\xA8\x98\x91\xAF\x7A\x4E\x10\xA9\x4E\xF5\x5B\xAA\x53\x86\xA9\x78\x4F\x1A\xAA\x50\x8F\x90\x88\x9E\x92\x48\x0A\x4D\xA7\xAB\x55\xD0\x75\x4A\x75\xAE\xAF\x99\xCE\x89\x9D\x39\xEB\x9F\xAC\xB9\xB6\xAC\xAE\x73\xB5\xAC\x5E\xF7\xAA\xAF\xBE\xB9\xAF\xAF\x77\xA4\x86\x2E\xB8\x94\x60\x8B\x8D\xA7\xB0\x00\xBC\x9E\x44\x88\xB5\xA2\xC6\x86\xB3\xB1\x90\xAD\xB1\x64\x8F\xB2\xB3\xCA\x94\xB7\xB2\x8E\xA3\xB3\xA4\x3F\x8B\xA6\xC2\x9E\xB2\x62\x9A\xA6\xAC\xC5\x69\xA2\xAD\xF2\x51\x0E\x91\xA5\x61\xB6\xFA\x1D\xB5\x81\x44\xAB\xA8\xA9\xE2\x73\xAB\x9A\x5E",
					"\xA6\xAB\xEB\x52\x0D\xB4\x52\xA4\xAC\x6B\xB2\x75\xAA\x9D\xAA\xAF\xB7\xC1\x9D\x7A\x6A\xAD\xBB\xB7\x4D\x9A\x3B\x0A\xB8\xA0\xB8\x2B\xBA\xBE\x8E\xA6\xAE\xB2\xB9\x51\xB4\x08\x5B\xA9\xB5\xAD\xD5\xBC\x94\xB4\xB0\xA5\x4D\x15\x50\xA2\xB6\x2C\x74\xB6\xB7\xC9\xA1\xBD\x75\xFD\x5D\xAA\xE7\xBD\xA0\xAA\x56\x02\xBF\xB0\x4C\xB7\x90\xF3\x9F\xAD\x4C\x57\x0A\xBD\x2C\xDD\xB7\x53\xDE\xB9\x91\xBB\xAF\xB5\x70\x16\x28\xB2\xB9\xF1\xB4\x8E\xBD\xB5\xB2\xBC\x6E\xF4\xB4\x4B\xEF\xB7\xBE\x4C\x59\x02\xC0\x7E\x84\xCC\xB7\xE2\x96\xAF\xBD\xF9\xAA\xAC\x59\x05\x9C\xBD\x52\x80\xC0\xBC\xF8\xAA\xAE\x59\x4B\xB4\xBA\x07\xF9\x47\xC2\x07\xD0\xBA\x88\x99\x75\xC2\x57\xB6\xBB\xC4\xAC\x69\x2D\xFC\x25\xC4\xA8\x0F\xC7\xC0\xC2\x28\xD7\x8C\x5B\x14\xCD\xC3\xE6\xA7\xC2\x7C\x6F\x39\xC3\x58\xB5\xCD\xBD\x1B\xFA\xC1\x51\x72\x2B\xC0\x8B\xCB\xAE\xC7\x08\xFF\x55\x2E\x3F\xCE\xC6\x1C\xC3\xBF\xBE\xDF\x78\x2F\xB9\x0A\xC6\xC9\x99\x0C\xC7\xBB\x22\xFB\x8E\x2F\xAC\x7B\x2E\x4D\xD4\xC3\xB4\x2B\xD0\xA9\x30\x49\xC4\x48\x97\x9F\xCE\xCB\x30\xC5\x31\xC9\x63\xC1\x66\x7D\x87\x36\xCD\x36",
					"\xEB\xBC\xC7\x16\xC5\xCD\x7E\x8A\x3E\xCC\x3B\x69\xC9\x92\x55\xC7\xBD\x40\x0D\x35\xCE\xEE\x83\xCC\xAA\x2E\xDD\x95\x93\x10\x3D\xCF\xF2\x77\xCB\x97\x5D\xDA\xCF\xA3\x13\x35\xD1\xFC\x87\xD5\x93\x79\xD0\xC2\x65\x0D\xDA\xAD\x47\xFD\x76\xC5\x99\x30\xC8\xA5\xFE\xC0\xCE\x13\xC1\xD0\xBB\x52\xC1\xD4\x67\x0D\x8F\xCF\xD9\xA0\xC3\x8F\x9F\x3B\xD0\x87\xFD\xBA\xC8\x44\xE4\xCA\xD1\x31\xD1\xC6\xA5\xA2\xBF\xD4\x18\xEA\xBA\x34\x42\xDD\xD1\x8B\x91\xD1\xC0\xFC\xA5\x35\xD1\xB3\xD6\xB9\xA2\xB6\xD1\x20\xD4\x2A\xD6\xD1\xA5\xDE\xBB\xA9\x8E\x5B\x35\x63\xC9\xA9\xD9\xF5\xBF\xD2\xA6\xA1\xDB\x8E\xD7\x2B\xC2\xD7\x44\xD2\xD8\xAC\xD1\xC5\xD3\x2A\x7E\x1F\x0F\xFE\x13\x1B\x3F\x2F\x1E\x1F\x4F\x3F\x0D\x1F\xDA\x2F\x03\x6C\x05\x27\x49\x80\x2D\xD8\x00\xEF\xD1\xDC\x41\x72\xD1\x21\x85\x01\x25\x21\x01\x30\x21\x40\x02\x40\x00\x12\x40\x07\x22\x01\x30\x3D\x40\x08\x50\x00\x82\xEC\x39\x20\xEE\x21\x22\x7D\x01\x28\x3F\x80\x16\x41\x3C\x04\x27\x3E\xBB\xF3\xD6\x25\x8A\xC1\x23\x4C\x05\xF4\xE1\x40\x1F\x43\xE3\x8E\xF0\xDA\xE3\x1F\xFE\xE3\xBB\xE0\x30\x00\xFE\x11\x41\x20",
					"\xE5\x20\x02\x89\x03\xE0\xE4\x82\xCB\x49\xE3\x4D\x58\xE2\x9E\x21\xE4\xE7\x77\xCE\x42\xE4\x20\xFA\x3E\xC7\x84\xE4\xE1\x99\xF4\xDA\x41\x20\xFF\xE7\xBB\xAE\xE6\xE2\x33\x6F\xDF\x40\x34\xFD\x40\xCE\x9E\xE1\x45\xA5\xF4\xE2\x43\x4E\xEF\xDC\xBB\xC1\xE4\xEB\xA8\xD5\xED\xE6\x57\xE2\xE8\xC8\xF3\x36\xEA\xA7\xDC\x38",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
