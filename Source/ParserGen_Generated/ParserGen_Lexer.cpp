/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::COMMENT:
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"SWITCH",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"OPEN_PUSH",
					L"OPEN_TEST",
					L"AND",
					L"OR",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"WEAK_ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"LS_PH",
					L"LS_I",
					L"LS_IM",
					L"ID",
					L"STRING",
					L"CONDITIONAL_LITERAL",
					L"SPACE",
					L"COMMENT",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L"!(",
					L"?(",
					L"&&",
					L"||",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"?=",
					L"+",
					L"-",
					L"left_recursion_placeholder",
					L"left_recursion_inject",
					L"left_recursion_inject_multiple",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L"!/(",
					L"/?/(",
					L"&&",
					L"/|/|",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/?=",
					L"/+",
					L"-",
					L"left_recursion_placeholder",
					L"left_recursion_inject",
					L"left_recursion_inject_multiple",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"(\'[^\']*\')+",
					L"/s+",
					L"////[^/r/n]*",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2213; // 32780 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 165;
				static const vl::vint dataSolidRows = 8;
				static const vl::vint dataRows = 9;
				static const char* compressed[] = {
					"\x0C\x80\x00\x00\x9D\x08\x00\x00\x7C\x00\x01\x80\x21\x84\x81\x83\x1E\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x25\x04\xA6\x0A\x94\x87\x11\x96\x82\x28\x30\x84\x89\x13\x9C\x82\x14\x9B\x04\xAB\x39\x84\x8C\x14\x9C\x83\x16\x3F\x84\xAE\x02\xA4\x87\x15\xA2\x82\x30\x04\xB9\x04\x8A\x1C\xA4\x83\x1D\x4F\x84\xBC\x12\xA4\x85\x1D\xAA\x82\x3E\x58\x84\x87\x86\x84\x83\x80\x81\x04\xC1\x04\x9A\x24\x83\x2D\xB2\x82\x5C\x68\x84\x9D\x2B\xB4\x82\x2E\xB7\x04\xDF\x31\xA4\x80\x34\xB8\x83\x30\x77\x84\xA2\x3A\xB4\x83\x31\xBE\x82\x64\x00\xC4\x85\x33\xC4\x82\x32\xC3\x04\xE7\x09\xC4\x88\x34\xC4\x83\x34\x8F\x84\xAA\x32\xC4\x83\x35\xCA\x82\x6C\x18\xC4\x8D\x3B\xCC\x82\x36\xCF\x04\xEF\x21\xC4\x80\x3C\xD0\x83\x38\xA7\x84\xB2\x2A\xD4\x83\x39\xD6\x82\x74\x30\xC4\x95\x33\xDC\x82\x3A\xDB\x04\xF7\x39\xC4\x88\x3C\x82\x3C\x82\x7B\x40\xC4\x80\x81\x84\xE0\x01\x3E\x04\xC8\xC1\x9E\x34\x87\x7F\x7E\x08\x00\x4E\xCE\xFC\x04\x84\xE9\x80\xE9\xFF\x56\xD1\xF2",
					"\xEA\xEA\x8D\x80\x0D\xCD\xD2\xD0\xE1\x8B\x0A\x86\x87\xEB\xD2\x96\x04\x92\x04\x87\x09\xF0\xE7\x1D\x6F\xFF\x73\x04\x84\x0A\xF9\x0A\xF2\x8F\x32\xF9\x01\x88\xF6\xE7\x89\xFE\x7F\x3C\x7D\x80\x09\x41\x43\x80\x00\x02\x04\x47\x83\x00\x0A\x8D\x86\x82\x83\x00\x07\x87\x80\x06\x10\x92\x84\x43\x01\x15\x84\x45\x00\x41\x06\x10\x84\x01\x86\x01\x55\x41\x41\x04\x18\x41\x88\x77\x89\x28\xA9\x8A\x8B\x8A\x2C\xAD\x8E\x8A\x8B\x1E\x66\x8F\x88\x8B\x31\x9B\x73\x8D\x8D\xD8\x75\x8A\x8F\x47\x01\x7B\x8D\x8C\x8F\x00\x3E\x81\x90\x90\x1E\x00\x92\x92\x90\x1C\x7F\x8A\x93\x90\x4B\xB8\x83\x8F\x93\x50\x91\x92\x97\x94\x4E\x93\x99\x89\x95\x2F\x98\x97\x92\x91\x5C\x8D\x9D\x94\x00\x21\x5E\x92\x98\x93\x64\x9B\x93\x98\x96\x56\xA9\x9A\x9B\x9A\x34\xB2\x7C\x98\x9A\x2D\x9A\x9F\x96\x99\x65\xB3\x9F\x94\x49\x67\xB6\x99\x9F\x92\x6C\xBD\x9E\x9D\x9F\x70\xAA\x91\xA3\x8A\x58\xA7\x4B\x9D\x9D\x87\xB4\x9A\xA2\x9E\x88\x8D\xA3\xA3\x9F\x90\x91\xAA\x8B\xA3\x54\xAE\x91\x9E\x7C\x8B\x89\xAC\xA1\xA6\x8E\x9B\xA4\x40\x09\x40\x92\xA2\xAB\xA8\x57\x96\xA2\xA2\xA9\x84\x98\xAE\xA6\xA6",
					"\xAC\xA4\x99\x49\xAB\x9C\x94\xA4\xAB\xAC\x6B\xB2\xA1\x96\xAD\x39\xB2\x7B\x48\xAC\xAB\x9D\xAC\xAF\xAF\x64\xB4\xA2\xB3\xB0\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x9D\xBE\xB7\xB7\xD4\xAE\x42\x8C\xB8\xE4\xA5\xBB\xB1\x4C\xE3\x83\xB4\x4D\xBA\xE6\xAD\xBF\xB3\x4D\xEC\xAE\xB2\xBF\xBC\xF4\xB5\xB6\xBE\x73\x3A\x71\xB7\xBF\xBE\xFC\xBD\xB0\xA5\x4F\xFA\xBE\xB2\xC3\xC0\x04\xC5\xC6\xC3\xC1\x08\xC9\xCA\xC3\xC2\x0C\xCD\xCE\xC2\xB0\xB8\x8F\x91\xC6\x73\x72\x87\xA0\x50\xB0\xB1\xBD\xA9\xC5\xC0\x08\xD3\xC9\x94\xAA\x93\xAA\xA8\xC6\xC6\x24\xE3\xCC\x9F\x94\x43\x41\x49\xC8\x00\x2B\xED\xC4\x52\xCA\x2F\xC0\x06\x50\xCC\x34\xEC\xC1\xCE\xCB\x35\xF8\xC6\xCD\xCE\x37\xFD\xCC\xCF\xCF\x3B\xC1\xDA\xCF\xD0\x3E\xC2\xD5\xD0\xD1\x40\xC8\xD6\xD1\xD2\x47\xCD\xD0\xD0\x76\x49\x41\x41\xD4\x00\x53\xD5\xD8\x53\xD5\x52\xD8\xD4\xD6\xD6\x31\x1A\xD6\xD5\xD6\x60\xDB\xD1\xDB\xD7\x62\xE5\xD4\xDB\xD9\x5E\xE9\xD3\xDA\xDA\x66\xEC\xD8\xDB\xDA\x70\xED\xD1\xDF\xDB\x72\xF5\xD4\xDC\xD9\x2A",
					"\xB2\x04\x42\xDE\x01\xBC\xD6\x8F\x3F\x7E\xCF\xC2\xE3\xE0\x50\xB3\x00\xC8\xE1\x88\xD0\xBE\xC4\x8C\x87\xE8\x85\xC4\x00\x34\x25\xCE\xAF\xE4\x1B\xD4\xEF\x95\xE2\x8B\xD7\xAC\xC6\x74\x8F\xD5\xEE\xE6\xE4\x9F\xE7\xC4\xE1\xE6\x6D\x9B\xE4\xC6\xC8\x96\xE6\xC9\xEB\xEA\x95\xD8\xED\xE3\xAD\xAF\xF9\xA1\x81\x0D\xA0\xF5\xEA\xE9\xEB\x88\xE4\xE9\xAA\xE9\xFF\x1D\xE6\xEC\xEB\xBF\xF5\x86\x0C\xA3\xAE\xFC\xEC\xE0\xEF\xBE\xF7\xE1\xF0\x90\x37\x3F\xE5\xF3\xDF\x6F\xB1\xEC\xE4\xEA\xA1\xE4\x98\x0F\xF2\xCA\xE2\xE3\xE2\xEE\x21\xC8\xF4\xF4\xF6\x64\x8B\x59\xF4\xF0\xDA\xC2\xEC\xF5\xA9\xDE\xC1\x85\xF7\xFA\xBD\x8D\x5A\xE9\xE2\xF0\xF1\xF2\xFF\xFC\xF4\xF5\xF6\xFF\xFD\xF8\xF9\xFA\xFF\xFE\x52\x90\x56\xF0\xFF\xF5\x67\x7E\xE3\x52\x77\x74\xF5\x7D\x53\x2A\xE3\x6C\x7D\xAB\x56\x4A\x69\x06\xB1\x63\x66\x4B\x71\x82\x03\xCC\x64\x82\x09\x8E\x6E\x82\x15\x93\x80\x06\x9B\x8A\x83\x0E\x97\x86\x83\x35\x62\x5A\x55\x7F\x70\x80\x84\x77\x6E\x6D\x28\x81\x6D\xD7\x73\x69\x84\xBB\x6D\x87\x84\x2C\x91\x86\x0B\xB2\x80\x87\x19\xB6\x85\x86\x38\x8F\x84\x01\xA4\x59\x2A\x12\xA5\x83",
					"\x5F\x7E\x61\x72\x74\x42\x8E\x38\x22\xBF\x80\x7F\x5C\x20\x01\x12\xD8\x3B\x88\xE9\x09\x8F\x89\x5B\x31\x89\x57\x53\x8A\x88\x29\x95\x8C\x8A\x50\x98\x8A\x15\xD9\x87\x8B\x2E\x9C\x8F\x8B\x5B\x81\x8E\x16\xE3\x8E\x8A\x31\xA5\x8C\x8C\x60\x88\x8E\x19\xE9\x87\x8D\x36\x9C\x8C\x60\x02\x87\x46\xC7\x49\x74\x7C\x32\x5F\x2D\x8E\x0A\x93\x73\xF3\x10\x53\x8F\xEF\x49\x80\x7C\x35\x42\x2C\xB0\x7B\x8F\x4F\x3E\x86\x87\x8F\x87\x42\x08\x20\xC4\x79\x77\x1D\x87\x78\x7A\x9A\x7F\x6D\x1E\x93\x9B\x91\xF2\x4F\x61\x8E\xB2\x70\x91\xE9\x12\x95\x92\x3C\xBD\x53\x08\xBD\x44\x92\x9F\x06\x9C\x93\x43\x44\x0D\x93\x94\x87\x52\x28\x80\x5B\x86\x3A\xA9\x96\x93\x87\x45\x09\x28\xC7\x84\x97\x5A\xBD\x76\x91\x91\x90\x4A\x2B\xA8\x90\x7C\x23\x33\x92\x4A\x47\x04\x21\x30\x81\x23\x98\x00\x05\x9F\x98\xC2\x89\x99\x40\x48\x0A\x98\x63\x8D\x98\x99\xC4\x8F\x9A\x34\xD1\x94\x9A\x67\x95\x98\x9A\xD6\x99\x98\x36\xDB\x93\x9A\x6D\x9D\x9C\x9B\xD7\x9F\x9A\x38\xE1\x94\x9C\x6F\xA5\x98\x9C\xE6\x99\x98\x76\x49\x04\x20\x76\x81\x26\x9D\x00\x10\x9E\x3C\xED\x94\x9F\x77\xB5\x99\x9E\x04\x2A",
					"\x0B\x3D\xF3\x96\x9F\x7E\xB8\x9E\x9F\xFC\x9F\x9E\x40\x81\xA4\xA1\x7D\x86\xA0\xA0\x07\xA3\xA1\x42\x85\xA8\xA1\x86\x8A\xA6\xA1\x0C\xAF\xA2\x44\x91\xA1\xA0\x26\x96\x8E\xA2\x01\x4C\x8E\x46\xEB\x8C\xA2\x35\x9E\xA6\x8D\x1D\xA0\xA7\x47\x9B\xA3\xA5\x90\xA4\xA2\xA4\x28\xA7\xA7\x1B\x83\x68\x93\xE9\x69\x7D\x94\x75\x8B\x08\x2F\x88\x9A\x93\x86\x6D\xA5\x80\x35\xBD\x78\x4C\xAF\x9C\xA6\x82\x0C\x0A\x72\xAB\x91\x7B\x4B\x99\x9D\xA6\x9A\x95\x79\xA8\xB5\x4D\x96\x1F\x80\x0D\x09\x99\xB0\x97\xA9\x48\xA7\x57\x50\xAE\xAF\xA9\xEA\x4E\x0E\xA9\x37\xB3\x5D\x56\xA4\x94\xA9\xDF\x4F\x08\xAB\x40\xAD\x92\x0F\xBA\xA0\x4A\x28\x0B\xAD\xA8\x55\xAE\x7B\x94\x68\x9C\xAD\x66\x8C\x9F\x9C\xE3\x89\x9D\x5B\xF0\xA4\xAE\xB9\xB1\xAB\xAE\x76\xB5\xAC\x5E\xFB\xA7\xAF\xBE\xB5\xAA\x84\xB8\x96\x96\xC0\x14\xAB\xA1\xC2\xBE\x9A\x9F\x10\xA6\xB3\x44\x8A\xB4\xB1\xC4\x8E\xB3\xB1\x8F\xAD\xB0\x64\x93\xB2\xB3\xCA\x8C\xB1\xB0\x91\x5D\x85\x4E\x82\xBC\xB2\x88\x58\xB4\xAC\x12\x67\xAC\x58\xE3\x71\x0A\x46\xA3\x77\xB3\xE8\x7B\xB3\x00\x87\x99\xAC\xA3\xA0\x79\xAA\x69\x5C\xA8\x55\xD5",
					"\x72\x0B\xD1\x90\xAA\xAC\xAA\xB0\x77\x54\xB8\xA8\xAD\xDE\xBF\x93\x7B\xA8\xAB\xB5\x6E\x99\x98\x3B\x29\x36\xB6\xB7\xAA\x98\xB4\x1F\xCA\xAC\xB4\xE4\x8F\xAC\x0A\x6A\xA7\xB7\x58\xA9\xBA\x96\xD1\xAE\xB3\x4C\x55\x0E\xA8\x6C\xD6\x42\xB6\xDE\x87\xBF\xBB\xD3\xBB\x5F\x56\xCC\xBB\xA6\xA7\x96\x08\xBC\xC1\x4A\xB9\x21\xE4\xBD\xAB\x31\x57\x08\xBD\xAF\x9B\xB9\xA5\x3B\xB7\x97\xEB\xAD\xB3\x72\x58\x06\xB4\x70\xE1\xB2\x8E\xF6\xB3\xB0\xBE\xB6\xB2\xBE\x94\x5D\xB5\xBE\x32\x59\x08\xC0\xF6\xA2\xC2\x6E\xC3\xB4\xAB\xF6\xB7\xB8\xAD\x64\x23\x92\x7A\xA3\x9E\xBE\xEF\xB6\xB8\xAD\x66\x29\xBA\x74\x8C\xC7\x47\x0A\xC5\xC6\xB9\x20\xD7\x73\x84\xAC\x94\xBF\x10\xEA\x71\x2D\xEF\x63\xC6\x50\x9C\xC5\xC0\x07\xE6\xC5\x8E\x6C\x32\xC3\x86\xCB\xB5\xC4\xF0\x6F\x2F\xC2\x61\xB3\xC7\x7A\xB5\xC8\xC7\x43\x72\x29\xC1\x2A\xC9\xA8\x8F\x8F\xCD\x57\xBA\x3D\xC4\xC5\x70\x81\xB9\x7F\xBC\x78\x2F\xE6\x88\xC4\xC8\x63\x4A\xC1\x75\xC3\xC9\x8E\xBF\x2A\x73\x2F\x34\xB2\xC9\x68\xD4\xCE\xA9\xC0\x07\xCA\x48\x5A\xDD\xC0\x97\xDF\xC5\x31\x23\xE1\xCF\x63\xF4\xA7\x30\x99\xEB\xC9\xBC\x1D",
					"\xD4\xC3\xCC\xF7\xAA\x30\x9B\xF4\x47\xCD\x47\x93\xCD\xBC\x01\x2D\x33\x9C\xDA\xB1\xC8\xA9\xAC\xC3\x97\x4B\x50\x33\x9E\xE3\x75\xCF\x5C\x9B\xC8\xCF\x8D\x53\x33\xA0\xF7\xB5\xD1\x4D\xB7\xCE\xC1\x96\x2B\xD0\x5A\x8D\xDB\x77\x3F\xD6\xBB\x75\x99\x32\xD2\x7E\xE6\x7A\xC8\xE2\x87\xD6\xC5\x4F\xDC\x50\x67\x0B\x8D\xCF\xD8\x9E\xC7\xC5\x74\x5F\x30\x90\xEE\xC4\xC4\x16\xE2\x36\xC9\x9A\xCB\xD7\x7E\xC8\xC6\xD0\x31\xC8\xD0\xAD\xA5\x2B\xD0\xA5\xA0\xB6\xD6\x50\xF6\xB8\x35\x6C\xDB\xD4\x75\x9F\xDF\xBF\x25\x6B\x31\xD6\x8C\xC5\xD4\x77\xA7\xD1\xD5\xDF\x6E\x32\xC3\xB3\xD4\xC6\xA5\xB0\xDD\x51\xD8\x08\xDF\xA8\xCA\xD3\xBF\xB4\xB7\xDD\x92\xDA\x3A\xD1\xDB\x03\xCC\xDB\xB5\xDF\x47\x37\x14\xEC\xD3\xC5\x8F\xC5\xD8\x94\xEB\xD5\x46\xDD\x24\xD7\xDC\x42\xDB\xDA\xAF\xEC\xDF\xC8\x61\xC2\xB9\xDD\x16\xCF\xA9\x6F\x63\xD6\x92\x87\x63\xB8\xCE\xA8\xC0\x49\x1E\x1D\x96\xDF\x25\xF2\xDA\xDD\x68\xBF\x37\xB7\xF0\xDE\xCE\x7C\xDF\xC7\x4B\xC1\x3C\xDD\x1D\x85\xEE\xD3\x5E\xC8\xE5\xD9\x59\xD3\x4A\x3F\x7F\x0E\x1F\x69\x3F\x1F\x15\xFE\x1F\x13\x1F\x7D\x17\x45\x07\x06\x3D\x20",
					"\x49\x40\x01\xCA\xAB\xEB\x23\x96\xC1\x21\xE5\x0B\x21\x21\x43\x01\x20\x23\x80\x00\x40\x00\x22\x40\x03\x45\x01\x2E\x3D\x80\x20\x56\xE7\x04\x2A\x3D\x40\x6C\x31\x20\xFA\x01\x26\x3E\x01\x34\x43\x77\x04\x25\x3D\x97\xEE\xE0\x00\x3F\xF0\xE9\x49\x40\xEE\xE9\x80\x1D\x45\xEA\x2A\xEF\xE8\xCB\xD8\xE9\xE4\xEF\x00\x02\x3F\x0F\x41\x23\x78\x00\x04\x44\xAA\xD9\xEE\xEC\x35\x51\xE9\x98\x00\x08\x4E\x00\x06\x57\xEC\x70\xE9\xE4\x83\x5C\xEF\xE8\xFC\x18\xE9\xEA\x51\xEF\xEF\xD6\x88\x4A\xEB\xBE\xE8\xEF\x53\x22\x38\xE9\x81\x70\xEB\x42\xBA\xD8\xEF\x43\x86\xF0\xEC\x86\x09\xF9\xE4\x94\xFE\xE9\xEE\x8F\xFB\xEE\xE4\x91\xF4\xF3\x80\x31\x3C\xF1\x95\xF0\xF1\x40\x5A\x33\xF2\xAC\xC5\x49\x20",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
