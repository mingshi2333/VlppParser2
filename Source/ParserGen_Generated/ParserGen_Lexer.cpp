/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"ID",
					L"STRING",
					L"SPACE",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"/s+",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 1236; // 13920 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 212;
				static const vl::vint dataSolidRows = 4;
				static const vl::vint dataRows = 5;
				static const char* compressed[] = {
					"\x60\x36\x00\x00\xCC\x04\x00\x00\x3B\x00\x01\xB8\x01\x84\x81\x83\x1A\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x27\x04\xA8\x0A\x94\x81\x15\x96\x82\x2A\x04\xAB\x04\x8C\x14\x98\x83\x16\x04\xAF\x04\x90\x14\x81\x1C\x82\x1D\x3F\x84\x80\x81\x83\xA0\x00\x1E\x82\x47\x81\xBD\x04\x8B\xA1\x82\x1E\x82\x40\x04\x81\x24\x8A\x2C\x83\x2C\xAB\x04\xDC\x19\xA4\x8D\x2C\xAC\x82\x2F\x5F\x84\x9F\x22\xB4\x80\x31\xB2\x82\x61\x68\x84\x82\x3B\xB4\x83\x30\xB7\x04\xE4\x31\xA4\x85\x34\xB8\x82\x33\x77\x84\xA7\x3A\xB4\x80\x35\xBE\x82\x69\x00\xC4\x8A\x33\xC4\x83\x34\xC3\x04\xEC\x09\xC4\x8D\x34\xC4\x82\x37\x8F\x84\xAF\x32\xC4\x80\x39\xCA\x82\x71\x18\xC4\x92\x3B\xCC\x83\x38\xCF\x04\xF4\x21\xC4\x85\x3C\xD0\x82\x3B\xA7\x84\xB7\x24\x8A\x3C\x83\x3C\xD7\x04\xFC\x31\xC4\x8D\x3C\xD8\x82\x3F\x04\xFF\x7F\x70\x00\x02\xDE\xDD\x0A\x04\xC0\xC1\x9E\xDF\x7A\xE1\xDE\xDF\xC6\x91\x04\x94\x09\xDE\xDF\x02\x85\xCD\xBA\xD7\x83\xE4\xE6\xDE\x8D\x80\x0F\x51\xFF\x72",
					"\x0A\xEB\x0A\x86\xEA\xBA\x90\xA0\xFF\x7E\xEB\xF1\x85\x80\xE5\x80\x02\x04\x89\xF3\x00\xF7\xF7\xE8\xF0\xC0\x09\xF4\xFA\xF9\xFB\x80\x06\x76\xF2\xE5\x02\xFC\x02\xF9\x89\x01\x7C\x61\x41\x45\xE3\x55\x76\x83\x81\x08\x89\x8A\x83\x82\x08\x98\x0A\x74\x83\xC4\x4E\x85\x83\x82\x12\x87\x7A\x6D\x85\x18\x84\x49\x85\x40\x1B\x80\x0D\x87\x87\x04\x56\x0A\x87\x88\x1C\xA4\x8E\x84\x41\x17\x26\x80\x8B\x84\x10\xAD\x8E\x8B\x8B\x2F\x95\x80\x8E\x6F\x32\xAE\x85\x8F\x85\x2A\xB9\x85\x8B\x8E\x27\xBC\x8D\x85\x06\x3A\xBD\x82\x93\x8A\x43\x81\x93\x8F\x91\x48\x89\x98\x8C\x8B\x10\xB7\x8D\x92\x76\x44\x91\x91\x92\x94\x01\x5A\x03\x97\x95\x3E\xA6\x8A\x93\x96\x5C\x94\x8F\x82\x8D\x5F\x8A\x8E\x93\x06\x58\x85\x99\x97\x99\x66\xA9\x94\x96\x9A\x46\x9D\x9E\x9B\x9B\xFF\x0E\x91\x8D\x98\x09\x8E\x9B\x9B\x9D\x65\x9D\x8C\x05\x9E\x7C\x8C\x90\x9F\x9F\x60\xBE\x9E\x96\xA0\x06\x8E\x9D\x05\x9F\x6C\xA8\x98\x9E\xA2\x88\xB2\x90\xA3\xA3\x90\x91\xA2\xA7\xA4\x94\x95\xA6\xA7\xA5\x98\x99\xAA\xA7\xA6\x9C\x9D\xAE\xA7\xA7\xA0\xA1\xA2\xAB\xA8\xA4\xA5\xA6\xAB\xA9\xA8\xA9\xAA\xAB\xAA",
					"\xAC\xAD\xAE\xAB\xAB\xB0\xBA\x6E\x04\x9D\xB1\xB5\xA6\xAF\xAD\xB8\xB9\xAA\xAF\xAE\xBC\xBD\xAE\xAF\xAF\xC0\x81\xB2\xB0\x97\x8E\xAD\x85\xB1\x9D\x50\x8D\xAA\xB0\xA3\xCC\x89\xAE\xB0\x92\x1C\x41\x41\xB4\x00\xD3\x95\xBB\x47\xB5\xD2\x9F\x49\xB7\xB6\xD4\x98\xBD\xB4\xB7\xD6\xA0\xBE\xB5\xB8\xDF\xA5\xB4\xBB\xB9\xE3\xA9\xB2\xBB\xBA\xE6\xAA\xBD\xB8\xBB\xE8\xB0\xBE\xB8\xB9\x08\xA1\x41\x42\xBD\x16\xBF\x38\xBC\x71\xFB\x83\xBE\xBF\xBF\x0C\x87\xB1\xC0\xAD\x07\xB6\x95\x49\xB3\x8B\x8E\xB9\xC1\xC2\xC3\x82\xC3\xA1\xBE\x03\xE3\x7B\xC3\xB2\x0A\xD4\xC4\x91\xC3\x04\xE2\x99\xC5\x75\x06\xC8\xC6\xC7\xC7\x1E\xE8\x98\xC4\xA1\xC8\xA4\xC1\x86\x76\x27\x61\xC5\xC6\xCA\x13\xEA\xC3\xC8\xC4\x81\xB0\xCA\xC6\xC4\x20\xEB\xC6\xCD\xC2\x24\x2D\x91\xB2\xC3\x33\xF2\xC5\xC9\xBE\x2D\xF7\xC5\xCD\x09\x14\xEF\xC8\x90\xCF\x1C\xC9\xBC\xC8\xA2\x26\x35\xC1\xD2\xD1\x47\x88\xD7\xC8\xCD\x4B\xD5\xD2\xD0\x8F\x29\x56\xD0\xC0\x84\x2B\x66\xCB\xD7\xA7\xF1\xAF\xB2\xDB\xB4\x1E\x72\xB6\xDB\xD8\xF3\xA9\xD7\xD9\xD8\x6C\xEA\xD8\xDB\xDA\x6E\xED\xD0\xDE\xD7\x4A\xAE\x44\xDF\xD7\x78",
					"\xC6\x88\xBD\xBF\xBA\x7C\xDA\xBF\xC6\x79\xC1\xE8\xAE\xD4\x05\xC0\xE4\x8E\xD2\x57\xE9\x91\x4E\xD5\x41\xD7\xC2\xB0\xE1\x85\x86\xEB\x90\xD0\x4E\xD5\xED\xB3\x4C\x2E\xCF\xE2\xE5\xD2\x77\xDD\xC9\xE1\xD0\x35\x4C\xE8\xA0\xD4\x33\x90\xE1\x9C\xE2\x8D\xD6\xEF\xE6\xCE\xC0\xA6\xE3\xD6\xCF\x0D\xA8\xE1\x90\x4E\xA2\xF5\xEB\xEB\xDD\xB0\xAE\xE7\xE1\xE7\xB2\xF6\xE9\xEA\xCA\x2E\x25\x92\xE3\xF0\xB1\xBA\x41\x42\xF1\x00\x08\xFA\xF1\x4E\xCC\xC7\xFB\x4D\xF3\xC9\xD0\xFB\xF2\xF3\xD4\xD1\xF5\xF7\xF4\xD6\xD9\xF8\xF7\xF6\xD2\xDD\xF7\xF6\xF7\xDA\xE0\xFC\xF7\xF7\xE4\xE1\xF5\xFB\xF8\xE6\xF0\xE7\xAA\xEE\x93\xF3\x94\xD5\xE2\x31\x2A\xEF\xED\x9A\xA4\xF0\x86\xEA\xE7\xF3\xF9\xF1\x92\x0C\xA3\xDA\xE8\xEF\xEE\xEA\x71\x73\xFB\x7A\x7E\x76\xD5\x75\x7E\x7D\x01\x9C\x70\xE5\x05\x86\x6B\x19\x32\x7A\x4B\xFE\x69\x81\xEC\x3C\x73\x81\x9A\x74\x07\x81\xB6\x68\x48\xFA\x1B\x80\x7A\x9E\x27\x7A\x7C\x20\x9F\x82\x08\xE9\x7C\x83\x11\xA5\x84\x84\x21\x88\x86\x09\xA9\x88\x7A\x4A\x76\x6A\x82\xC4\x71\x84\xA9\x6C\x77\x74\x0A\x8B\x87\x76\x38\x93\x7D\x0D\x2C\x7F\x56\x1A\xB7\x7D",
					"\x77\x39\x98\x80\x0E\x87\x81\x66\x04\xAF\x74\x80\x41\x8C\x80\x0C\xB5\x5E\x87\xCD\x4E\x4E\x06\x42\x88\x8B\xD3\x11\x87\x68\x27\x80\x8A\x8A\x65\x47\x22\x12\xB4\x8C\x55\x26\xB6\x87\x88\x51\x84\x23\x40\x5B\x82\x78\x2A\x91\x6E\x8A\x15\x84\x8E\x1A\xE9\x4E\x26\x91\x66\x8D\x74\x68\x97\x84\x16\xEB\x8C\x61\x37\xB6\x79\x8E\x60\x94\x8E\xEA\x40\x29\x73\x9D\x5B\x77\x75\x46\x80\x83\x1C\xC9\x83\x89\x23\x7E\x1F\x1F\xEF\x1F\x07\x3F\x7D\x0F\x1F\x03\x05\x2D\x20\xCC\x21\x21\x24\x80\x03\x93\x4A\x8B\x3C\x20\xCF\x21\x23\x42\x01\x2D\x21\x80\x22\x38\x00\x00\x40\x00\x81\x00\x03\x3A\x00\x17\x38\x00\xD9\x21\x22\x72\x01\x2C\x3B\xF8\x12\x90\x45\x21\x57\x91\x40\x7C\x3F\x95\x5A\x94\x92\x96\xB7\x96\x95\x8A\x01\x2B\x96\x00\x06\x3A\x44\xB6\x96\x91\x40\x6E\x31\x98\x82\x02\x40\x00\xBD\x82\x9A\x7A\x38\x93\x93\x5E\x86\x3B\x92\xE7\x20\x02\x7F\x45\x94\x9A\x00\x39\x3E\x96\x05\x20",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
