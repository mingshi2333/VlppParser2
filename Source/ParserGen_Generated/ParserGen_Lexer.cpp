/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::COMMENT:
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"SWITCH",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"OPEN_PUSH",
					L"OPEN_TEST",
					L"AND",
					L"OR",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"WEAK_ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"ID",
					L"STRING",
					L"CONDITIONAL_LITERAL",
					L"SPACE",
					L"COMMENT",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L"!(",
					L"?(",
					L"&&",
					L"||",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"?=",
					L"+",
					L"-",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"switch",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L"!/(",
					L"/?/(",
					L"&&",
					L"/|/|",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/?=",
					L"/+",
					L"-",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"(\'[^\']*\')+",
					L"/s+",
					L"////[^/r/n]*",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 1735; // 22115 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 199;
				static const vl::vint dataSolidRows = 6;
				static const vl::vint dataRows = 7;
				static const char* compressed[] = {
					"\x63\x56\x00\x00\xBF\x06\x00\x00\x53\x00\x01\x80\x21\x84\x81\x83\x1E\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x25\x04\xA6\x0A\x94\x87\x11\x96\x82\x28\x30\x84\x89\x13\x9C\x82\x14\x9B\x04\xAB\x39\x84\x8C\x14\x9C\x83\x16\x3F\x84\xAE\x02\xA4\x87\x15\xA2\x82\x30\x04\xB9\x04\x8A\x1C\xA4\x83\x1D\x4F\x84\xBC\x12\xA4\x85\x1D\xAA\x82\x3E\x58\x84\x87\x86\x84\x83\x80\x81\x04\xC1\x04\x9A\x24\x83\x2D\xB2\x82\x5C\x68\x84\x9D\x2B\xB4\x82\x2E\xB7\x04\xDF\x31\xA4\x80\x34\xB8\x83\x30\x77\x84\xA2\x3A\xB4\x83\x31\xBE\x82\x64\x00\xC4\x85\x33\xC4\x82\x32\xC3\x04\xE7\x09\xC4\x88\x34\xC4\x83\x34\x8F\x84\xAA\x32\xC4\x83\x35\xCA\x82\x6C\x18\xC4\x8D\x3B\xCC\x82\x36\xCF\x04\xEF\x21\xC4\x80\x3C\xD0\x83\x38\xA7\x84\xB2\x2A\xD4\x83\x39\xD6\x82\x74\x30\xC4\x95\x33\xDC\x82\x3A\xDB\x04\xF7\x39\xC4\x88\x3C\x82\x3C\x82\x7B\x40\xC4\x9C\x33\xE4\x81\x3E\xE3\x04\xFE\x04\x9F\x7F\x78\x08\x00\xE6\xCC\x9B\x04\x92\xE1\x80\xEB\x7E\xEA\xCF\xD0\xD8\xFA",
					"\x81\x81\x0F\xE4\xE8\xCE\x81\x9A\x0A\x8E\x85\xE8\xE8\x0B\x04\x92\x04\x97\x0F\xEC\xE4\x0F\xF6\xFF\x13\x04\x94\x00\xFD\x08\xF9\x07\xF0\x98\x11\x86\xFC\xE3\x88\xFF\x7F\xFA\x7F\x79\x41\x40\x01\x80\x02\x00\x41\x05\x83\x08\x83\x82\x04\x8C\x80\x01\x81\x10\x8E\x81\x85\x40\x07\x12\x84\x41\x01\x04\x46\x0E\x80\x01\x16\x81\x45\x45\x40\x11\x18\x4F\x7E\x75\x24\xA5\x86\x8B\x89\x28\xA9\x8A\x8B\x8A\x2B\x9C\x43\x88\x8B\x29\xAE\x89\x74\x8C\x32\x96\x72\x8F\x8D\x1B\x79\x81\x40\x8E\x3B\xBA\x80\x00\x8F\x3F\x84\x4D\x06\x8F\x40\x80\x9E\x04\x91\x48\xBD\x8F\x88\x8C\x4C\x8D\x9E\x93\x93\x34\xB0\x70\x94\x89\x35\x8C\x95\x94\x73\x45\x89\x91\x92\x92\x5B\x9D\x90\x92\x47\x5C\x99\x91\x9A\x96\x62\x9D\x93\x97\x99\x68\xA9\x91\x97\x92\x67\x97\x9C\x8A\x9B\x65\xB1\x94\x9B\x9C\x01\x61\x43\x9B\x9D\x5E\xB4\x96\x9A\x9A\x7C\xBD\x9A\x9A\x9B\x7F\x92\x9A\x8A\x9B\x24\x78\x92\x9E\xA1\x7A\x87\xA9\x9C\xA2\x78\xBE\x9E\xA3\xA3\x4D\x80\xA9\x9A\xA4\x31\xB0\x7A\xA3\xA5\x89\x99\xAC\xA3\xA2\x00\x27\x4C\x94\xA4\xA0\xA1\xA6\x88\xA5\x6D\x82\xA5\xA7\x7F\x98\x9B\xA9\xA9\x97",
					"\x24\x1A\xAC\xA5\x99\xA2\xB1\xA2\xA8\xA9\x53\xB4\xA3\xA8\x7C\x29\x6A\xAE\xAB\xAA\xBC\xAE\xA2\xAF\xAF\xC0\x81\xB2\xB3\xB0\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x91\xBB\x48\x9B\xDD\xA1\xB2\xBA\xB1\x2E\x60\xB2\xAD\x4C\xE6\xA3\xBA\xBA\xB2\x34\x69\xBB\xBB\xBB\xF0\xB1\xB2\xBF\xBC\x37\x6E\xB3\xBF\xBD\xF8\xB9\xB0\xA6\x4E\xF6\xBA\xBE\xBF\xBF\x00\xC1\xC2\xC3\xC0\x04\xC5\xC6\xC3\xC1\x08\xC9\xCA\xC3\xB2\xB6\x8F\x9D\xC0\x95\x96\xBB\xA2\xC6\xAE\x14\xEF\xAA\x97\x94\x3D\x41\x49\xC4\x00\x1B\xDD\xCE\x4E\xC6\x1F\xC0\x00\x50\xC8\x24\xDC\xC1\xCA\xC7\x25\xE8\xC6\xC9\xCA\x27\xED\xCC\xCB\xCB\x2B\xF1\xCA\xCB\xCC\x2E\xF2\xC5\xCC\xCD\x30\xF8\xC6\xCD\xCE\x37\xFD\xC0\xCE\x75\x43\x41\x41\xD0\x00\x43\xC5\xD4\x52\xD0\x47\xC4\xD9\xD3\xD0\x46\x48\xDE\xD2\xD2\x4F\xC6\xD1\xD7\xD2\x54\xD3\xD6\xD4\xD4\x58\xD2\xD9\xD5\xD5\x5B\xD7\xDA\xD7\xD7\x5C\xE0\xDE\xD5\xD8\x64\xE3\xDF\xD3\x89\x49\x41\x49\xDB\x8C\xFF\x2B\xD6\x76\xDB\x0B\xF1\xD2\xDF\x93\x31\x26\xA3\xDF\xDD\xD1",
					"\x8F\xC1\xA6\xDD\x27\xB0\x94\x42\x0C\x13\xD6\xC5\xC5\xAF\x15\xF8\xDF\x3E\xDE\x56\xBC\xD7\xAC\xAA\x81\xC4\xE2\xE3\xE3\x8E\xC6\xE8\xE3\x9A\x6C\xED\x81\xC7\xE0\x8D\xD9\xE8\xE7\xA7\x78\xD3\xEF\x9A\xE2\x25\xAE\x93\x0E\xE6\x90\xE4\xEE\xE2\xE7\x01\xE8\xE3\xA0\xE8\x10\xCC\xEB\xE5\xE9\xAF\xEB\xA4\x0E\x9E\x92\xEC\xEB\xDD\xBF\x58\x97\xE0\xEF\xEE\xA7\xFE\x85\x0C\xE9\xB5\xF8\xEF\xE6\xF0\x7E\xF1\xEE\x8E\x0D\xA6\xC9\xFC\xE7\xDD\xAA\xE7\xA5\xE7\xEA\xAE\xFC\xEE\xAB\x0D\xCA\xD2\xFB\xF3\xDC\xCD\xE8\x8E\xE5\xF1\xD6\xDD\xFE\xE0\x0E\xC0\xC6\xE2\xFB\xF8\xE4\xE5\xF6\xFB\xF9\xE8\xE9\xFA\xFB\xFA\xEC\xED\xFE\x93\x52\xC2\xEE\xFE\x9E\xCE\xF4\xE1\xC3\xCB\xCE\xF8\xF5\xFC\xCF\xFE\xF9\xFE\xCD\xFC\xFF\xFA\x7F\x7E\x00\x81\x84\x80\xFF\x45\x85\x64\xBF\x4D\x29\xFC\x72\x76\x60\xB1\x5D\x6F\x81\x0E\x8C\x69\xD9\x10\x83\x83\x08\x95\x87\x82\x66\x74\x81\x06\x96\x8B\x82\x0C\x9A\x87\x83\x0E\x8B\x58\x54\x0B\x8C\x81\x7C\x6B\x68\x6E\xCC\x28\x85\xDB\x36\x75\x84\xBC\x53\x29\x20\x2F\x8C\x6D\x0C\xD6\x31\x87\x1A\x94\x28\x86\x37\x80\x02\x0D\xB8\x8C\x86\x1D\xB9\x83",
					"\x87\x3E\x9D\x84\x10\xC3\x8F\x87\x22\x82\x8E\x88\x41\x89\x88\x11\xC7\x8C\x88\x25\x88\x8B\x89\x4E\x8D\x88\x14\xD3\x88\x89\xD4\x6C\x84\x72\xB7\x6C\x6D\xEF\x5C\x46\x2A\xE3\x5E\x8F\x71\xC1\x6F\x78\x9A\x5B\x7A\x77\x2D\x9E\x7E\x55\x59\x2F\x75\x18\x8E\x54\x8D\xE8\x66\x8A\x51\x5C\x27\x8E\x1A\x9D\x77\x8B\xE1\x62\x8A\x7B\x65\x95\x7B\x1B\xD5\x7B\x8C\x3F\x6D\x8A\x8B\x7A\x81\x90\x9E\x5F\x2B\x77\x3E\xBD\x4F\x8F\x36\x5A\x4E\x58\x5F\x8B\x8F\x39\x8C\x7D\x8E\x96\x64\x79\x1E\x8C\x92\x90\x4E\x42\x0E\x57\x2D\x99\x93\xB0\x43\x04\x20\x4E\x81\x26\x93\x00\x00\x96\x28\x9D\x94\x95\x80\x04\x0D\x94\xA1\x88\x97\x28\x9F\x9A\x95\x56\xAC\x97\x95\xA9\x90\x97\x2A\xB1\x94\x97\x59\xB6\x96\x95\xB5\x98\x97\x2D\xB2\x9A\x97\x5E\xBC\x97\x97\xB9\x80\x9B\x2E\xC1\x94\x96\xEB\x05\x0C\x20\xC7\x81\x21\x32\x80\x0B\x99\x66\x88\x9F\x99\xCA\x90\x98\x33\x84\x26\x08\x69\x8E\x99\x9A\xD8\x93\x99\x36\xD7\x9A\x9B\x6E\x9C\x9F\x9B\xD6\x81\x9F\x36\xE2\x9E\x9A\x72\xA0\x9B\x9C\xE8\x85\x9D\x3A\xE7\x9A\x9D\x76\xAC\x9C\x9B\x34\x99\x85\x3C\xFF\x34\x8A\x29\x8F\x8F\x9E\xF6\x99",
					"\x9D\x14\xFB\x95\x9E\x7E\xB8\x9E\x9F\xFA\x9D\x9E\x40\xFF\x93\xA1\x26\x96\x8C\x84\x78\x92\x92\x1B\xAE\x57\x09\x4A\x8D\x93\x4F\x8F\x88\xA1\xDF\x75\x8C\x7B\x87\x96\xA4\x20\x48\x01\x72\x21\xFC\x48\x90\xE8\x17\xA4\x92\x20\xB0\xA0\xF6\x10\x90\x7B\x3B\x93\xA3\xA1\x01\x29\x0A\x43\xAB\xAB\x53\x8D\x81\x52\xA1\x80\x81\xA7\xAA\x4A\x0C\xA4\x91\xB2\x69\x7B\x27\xA6\xA7\xE2\x31\xA2\x8F\x2E\x4B\x0D\xA6\x91\x70\x4B\x30\xC3\xA8\x95\x53\x82\x9E\x97\xC4\x84\xAB\x51\xCB\xA9\xA8\xA4\x8A\xAD\xA9\x4C\xAF\xAA\x54\xCE\xA4\xAA\xA6\x89\x84\xA4\x9A\x80\x63\x3B\xE6\x9C\xAB\x6C\x95\x9B\x9D\x5D\xAE\x9D\x58\xDB\xA0\xAD\xB2\xA2\xAE\xAC\x64\xA7\xAE\x5A\xE9\xAC\xAD\xB1\x98\xAF\x51\x23\x9A\xA5\x56\xF3\xA0\x58\x9C\xBB\xA1\x8B\x89\x92\xA4\x50\xBE\x4C\x08\xDA\x74\x8A\xA2\x77\xA9\x70\x4A\xBD\xAF\xA2\xC2\xAF\xAA\x5F\x76\xA1\x74\x45\x93\x9D\x7B\x26\x3B\xAF\x8B\x2E\xB3\x53\x62\x83\xB5\xB1\xCA\xBE\xA9\xA2\x72\xAE\x49\x47\xCC\x3E\x09\xC7\x86\xB0\xB2\x7F\xB9\xB0\x5E\x82\xBC\xA6\xCB\x9B\x57\x09\x35\xB1\xB3\x18\x93\xB5\xB4\xCF\xA6\xB4\x53\xAA\xA5\x54\x4C\xF9",
					"\xAF\xB3\xC7\x50\x0E\xB5\x3E\x51\xB5\xAD\x2C\xB4\xB7\xD7\x85\xB1\x0A\x97\xA3\xA4\x60\x8A\xB3\xB6\x8F\xB8\xB2\xAF\x85\x61\xB4\x1B\xBC\xB6\xB8\xE4\xB5\xB0\x48\x52\x1A\xA2\x72\xFE\x8C\xB9\xDC\x4E\xBE\xB7\x98\x8F\x4A\x3F\x7F\x0E\x1F\x74\x3F\x1F\x14\xFF\x13\x1F\x35\x7F\x17\x00\x80\x05\x21\x20\xEF\x28\xBC\x41\x69\xB0\x00\xF6\xAE\xBB\xBD\xE4\x21\x21\x43\x01\x20\x23\x80\x3E\x38\x00\x1F\x40\x03\x45\x01\x2C\x3D\x3A\x62\x21\x20\xE8\x21\x22\x7A\x01\x22\x3F\x80\x34\x3D\x41\xE2\x33\x38\x7C\xFE\xBC\xC1\x2E\x76\x4D\xBD\x19\x4B\xC0\x84\xEA\xB4\xC3\x09\xD6\xC4\xBD\xDC\x20\x00\x7E\x5D\x34\x21\xF0\x00\x01\x44\x0D\xCF\xC3\x90\x0D\xC7\x48\x2E\x60\x4F\xC2\x12\xCA\x41\x85\xEF\xB1\x20\xFB\x21\xC7\x23\x2B\xC4\x23\x81\x31\xC5\xC2\x11\xFF\xB8\x00\x25\xD6\xC3\x80\x16\xC8\x42\x1A\xC0\x04\x43\x3E\xD5\x41\x85\x85\x20",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
