/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ParserGen
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "ParserGen_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace parsergen
		{
			bool ParserGenTokenDeleter(vl::vint token)
			{
				switch((ParserGenTokens)token)
				{
				case ParserGenTokens::COMMENT:
				case ParserGenTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* ParserGenTokenId(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"AMBIGUOUS",
					L"CLASS",
					L"ENUM",
					L"VAR",
					L"TOKEN",
					L"AS",
					L"PARTIAL",
					L"OPEN_ROUND",
					L"CLOSE_ROUND",
					L"OPEN_SQUARE",
					L"CLOSE_SQUARE",
					L"OPEN_CURLY",
					L"CLOSE_CURLY",
					L"COMMA",
					L"COLON",
					L"SEMICOLON",
					L"INFER",
					L"ALTERNATIVE",
					L"USE",
					L"ASSIGN",
					L"WEAK_ASSIGN",
					L"POSITIVE",
					L"NEGATIVE",
					L"ID",
					L"STRING",
					L"CONDITIONAL_LITERAL",
					L"SPACE",
					L"COMMENT",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenDisplayText(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"(",
					L")",
					L"[",
					L"]",
					L"{",
					L"}",
					L",",
					L":",
					L";",
					L"::=",
					L"|",
					L"!",
					L"=",
					L"?=",
					L"+",
					L"-",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			const wchar_t* ParserGenTokenRegex(ParserGenTokens token)
			{
				static const wchar_t* results[] = {
					L"ambiguous",
					L"class",
					L"enum",
					L"var",
					L"token",
					L"as",
					L"partial",
					L"/(",
					L"/)",
					L"/[",
					L"/]",
					L"/{",
					L"/}",
					L",",
					L":",
					L";",
					L"::=",
					L"/|",
					L"!",
					L"=",
					L"/?=",
					L"/+",
					L"-",
					L"[a-zA-Z_][a-zA-Z0-9_]*",
					L"(\"[^\"]*\")+",
					L"(\'[^\']*\')+",
					L"/s+",
					L"////[^/r/n]*",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < ParserGenTokenCount ? results[index] : nullptr;
			}

			void ParserGenLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 1585; // 18661 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 49;
				static const vl::vint dataSolidRows = 6;
				static const vl::vint dataRows = 7;
				static const char* compressed[] = {
					"\xE5\x48\x00\x00\x29\x06\x00\x00\x48\x00\x01\xBE\x01\x84\x81\x81\x1E\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x26\x04\xA7\x0A\x94\x80\x15\x96\x82\x29\x30\x84\x8A\x13\x9C\x83\x14\x9B\x04\xAC\x39\x84\x8D\x14\x9C\x82\x17\x3F\x84\xAF\x02\xA4\x80\x18\x83\x1C\x04\xBA\x09\xA4\x8B\x1C\xA4\x82\x1E\x4F\x84\x87\x86\x84\x83\x82\x80\x82\x3F\x58\x84\x80\x2B\xAC\x81\x20\x82\x5A\x04\x9B\x22\xB4\x84\x2D\xB2\x82\x5D\x68\x84\x9E\x2B\xB4\x83\x2E\xB7\x04\xE0\x31\xA4\x81\x34\xB8\x82\x31\x77\x84\xA3\x3A\xB4\x84\x31\xBE\x82\x65\x00\xC4\x86\x33\xC4\x83\x32\xC3\x04\xE8\x09\xC4\x89\x34\xC4\x82\x35\x8F\x84\xAB\x32\xC4\x84\x35\xCA\x82\x6D\x18\xC4\x8E\x3B\xCC\x83\x36\xCF\x04\xF0\x21\xC4\x81\x3C\xD0\x82\x39\xA7\x84\xB3\x2A\xD4\x84\x39\xD6\x82\x75\x30\xC4\x96\x33\xDC\x83\x3A\x82\x7A\x04\xBB\x3A\xD4\x84\x3D\xDE\x82\x7D\x40\xC4\x9E\x34\x87\x7F\x7E\x08\x00\x46\xC6\xF9\x04\x84\xE5\x80\xE5\xFF\x4E\xC9\xEA\xE2\xE9\x08\x83\x0B\xC5\xCA\xD8\x04",
					"\x87\x02\x85\xEC\xE3\x14\x18\x81\x95\x0F\xEF\x7E\x0D\xF2\x1A\x81\x8F\x05\xF2\x0D\xF3\x09\xF2\x16\x0E\x8F\xEA\xE0\x8B\xFA\xE3\xF8\xF6\xFF\x49\x81\x88\xF8\x02\x00\x82\xFD\x43\x00\x83\x80\xFC\x44\x80\x01\x7F\x08\x86\x89\x81\x40\x06\x0A\x86\x81\x01\x06\x84\x06\x83\x44\x01\x48\x71\x41\x45\xF9\x50\x7A\x87\x86\x1C\x9D\x8E\x87\x87\x20\xA1\x8D\x85\x07\xE5\x62\x80\x88\x89\x19\xA7\x85\x78\x8A\x00\x2C\x8E\x88\x41\x2F\x81\x41\x8D\x8B\x30\xB5\x82\x8C\x41\x1B\x36\x84\x8F\x8D\x3C\xBB\x80\x00\x07\x3A\xB3\x8C\x8A\x89\x44\x85\x96\x93\x91\x45\x83\x98\x93\x88\x25\xAA\x89\x7E\x90\x41\x91\x9D\x8C\x94\x01\x5E\x02\x96\x8F\x54\x98\x97\x96\x92\x4B\x9D\x9E\x97\x97\x4C\xA9\x8E\x94\x97\x22\xA4\x99\x97\x99\x5B\xA9\x91\x40\x47\x53\xAA\x9A\x95\x9B\x62\xA0\x92\x9F\x9C\x26\xA4\x90\x9A\x9D\x4E\x93\x76\x72\x47\x70\xAF\x9E\x9C\x9A\x7D\x80\xAF\x9E\x9B\x74\x85\xA6\xA1\x88\x78\xA3\x9D\x93\x87\x66\xAE\x92\xA3\xA3\x3A\xA1\x41\xA2\xA3\x3A\x87\xA6\xA7\xA5\xCA\x49\xAD\x96\xA6\x61\xBA\x9F\x3C\x49\x93\xA1\xA3\xA2\xA8\x90\xA4\xA5\xA4\xA6\xA8\xA9\xAA\xAB\xAA",
					"\xAC\xAD\xAE\xAB\xAB\xB0\xB1\xA2\xAF\xAC\xB4\xB5\xA6\xAF\xAD\xB8\xB9\xAA\xAF\xAE\xBC\xBD\xAE\xAF\xAF\xC0\x81\xB2\xB3\xB0\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB2\x91\x27\x71\x9B\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x9D\xB5\x90\x09\x8B\x9E\xB2\xBB\xB8\xE4\xA5\xB6\xBB\xB9\xE8\x9E\x8C\xA4\x92\xEB\x9B\x8D\xA2\xA9\xF0\xA3\xA2\xBD\xA9\xF2\x8B\x95\x08\x41\xF7\x81\x49\xBC\x00\xFB\xBD\xB8\xBF\xBF\x01\x69\x4A\xBC\xC0\xFC\x84\xCE\xBF\xC0\x08\xC5\xC9\xC3\xC1\x0A\xCD\xCC\xC3\xC3\x06\xD1\xCB\xC2\xC4\x0E\xD4\xC0\xC7\xC4\x18\xD5\xC9\xC7\xC5\x1A\xDD\xCC\xC4\x74\x2B\x41\x41\xC8\x00\x23\xE5\xCC\x4A\xC8\x27\xE4\xC9\xCA\x4B\x28\xED\xCA\xCA\xCB\x26\xF0\xC9\xC9\xCC\x2F\xF5\xC4\xCF\xCD\x33\xF9\xC2\xCF\xCE\x36\xFA\xCD\xCC\xCF\x38\xC0\xDE\xCD\xD0\x3F\xC5\xD3\xC9\x87\x31\x41\x49\xD2\xA7\x4B\xD0\x7D\xD1\xBA\x50\xD1\xDE\x84\x4D\xCE\x92\xD6\xD4\xAD\xED\x86\x99\xD4\x74\xEF\x80\x07\x4D\xBC\xF4\xA1\xD4\xA5\x9F\x52\xDB\xD4\x92\xD9\xC6\x5D\xD2\xD8\xD8\x63\xF3\xB4\xA1\xD4\x68\xE5\x91\xB9\xA7\x5C\xED\xDB\xDA\xDB\x6C",
					"\xE2\xA5\xDB\xDC\xEC\xBC\xDE\xB9\x79\x3A\x79\xD8\xDF\xE0\x77\xD9\x9B\xDD\xD5\x47\xB1\xDA\xDA\xDD\x8C\xC2\xE9\x95\x4F\x64\xF0\xDE\xDE\xD6\x93\xF5\xDF\x91\xE3\x84\xD8\xEC\x88\x50\x82\xC7\xEE\xA7\x9D\x95\xD9\xAB\x8A\xE6\x6E\x83\x5E\xE0\xE9\x88\xDE\xB1\xDC\xA2\xA1\xE9\xD3\xEB\xE9\xB0\xC3\xE6\x51\xE7\x57\xE2\x81\x0D\xEB\xB5\xF9\xEA\xEE\xB7\x1C\xFD\xE4\xC2\xC0\x1E\xD6\xC2\xF3\xC6\xC3\xC1\xF4\xF3\xF1\xC6\xC9\xFE\xEC\xF2\xCB\xCA\xF5\xF1\xF3\xAA\xB2\x08\xEF\xEE\x50\xC4\xD6\xF7\xD0\x2F\x42\xDA\xF6\xD1\xD8\xDB\xF7\xF6\xF7\xDD\xDC\xF0\xFB\xF8\xE2\xE5\xFF\xF5\xF9\xB2\xB3\x03\xF4\xF5\xE4\x8B\xDF\xD2\x71\xEF\xFF\x31\xFC\xFB\xF4\xDC\x84\x0C\x41\xF7\xF9\x79\xFE\xA7\xFB\xFD\xF8\xFF\xFF\x01\x3E\x7D\x00\x80\x80\x00\x01\x85\x84\x80\x06\x89\x80\x02\x8B\x83\x81\x06\x87\x86\x81\x0A\x90\x80\x03\x8F\x84\x83\x08\x95\x83\x82\x16\x99\x80\x06\x9B\x8E\x81\x6C\x6B\x71\x4F\x49\x4F\x75\xE6\x7D\x45\x06\xD4\x63\x85\x5E\x92\x69\x75\x08\xAA\x82\x75\xCB\x71\x75\x70\x6D\x76\x05\xDB\x1E\x75\x50\xC5\x62\x80\x86\xF1\x57\x06\x09\x82\x54\x86\x3A\x76\x86",
					"\x85\x27\x98\x85\x10\xB3\x89\x85\xCF\x5F\x4F\x87\x9E\x42\x50\x0E\x3B\x8C\x89\x78\x7D\x83\x4E\x48\x96\x73\x10\xAF\x88\x72\xA4\x3A\x6D\x7E\x58\x9C\x56\x52\x01\x2B\x8A\x00\x1D\x8F\x8B\x4B\x3C\x89\x18\x80\x0D\x28\x31\xA6\x8E\x8B\x63\x80\x8F\x19\xEA\x88\x8D\x35\xA9\x8F\x8D\x6E\x91\x8D\x1B\xF3\x8C\x8D\x3A\xB0\x8C\x8E\x77\x96\x8E\x1C\xFA\x88\x8F\x3D\xB9\x8F\x8F\xF9\x30\x29\x40\x02\x90\x00\x42\x86\x91\x2A\x83\x88\x91\x21\x8A\x93\x2B\x45\x89\x97\x91\x8E\x91\x93\x21\x90\x93\x92\x49\x8A\x95\x92\x98\x97\x92\x26\x94\x9B\x92\x4B\x9C\x97\x93\x9E\x81\x95\x26\xA0\x93\x94\x51\x9D\x94\x90\xD0\x26\x81\x2A\xE5\x3A\x82\x09\xAE\x97\x82\xAF\x8D\x94\x2C\xB3\x92\x97\x5A\x9C\x84\x96\xB7\x96\x95\x2C\xB9\x9C\x97\x57\x9E\x83\x7D\x8C\x58\x77\xE2\x71\x56\x2B\x29\x86\x9C\x87\x45\x95\x86\x30\xB7\x8D\x89\x63\x97\x49\x2B\x4E\x89\x9A\x0F\xCB\x90\x88\x21\x96\x9D\x99\x4F\x92\x4D\x14\xAD\x8E\x98\xC1\x5C\x2C\x8A\x91\x70\x6B\x07\xC1\x9C\x84\xD7\x55\x9E\x84\x5F\x20\x9D\x37\xC6\x86\x44\x3E\xAE\x9B\x8C\x65\x9D\x8E\x3C\xEF\x9E\x8F\x7A\xB3\x98\x90\xF7\x96",
					"\x9C\x3D\xF9\x9C\x9F\x7D\xBE\x98\x9F\xFB\x91\x78\x30\xD9\x8E\x5B\x52\x86\xA7\x94\x52\x28\xA0\x29\x8A\xA6\x95\x85\x8E\xA5\xA1\x10\xA7\xA3\x43\x92\xA1\xA2\x86\x94\xA4\xA2\xE9\x63\xA0\x41\x9B\xAF\x55\x71\xAA\x5C\x9A\x49\x8D\x9B\x35\xF1\x52\x09\x2B\x59\x98\x74\xE5\x9F\x1F\x30\xEB\x93\xA4\x63\xA7\xA7\x88\x20\xB2\x89\x4B\xB3\xA8\x73\x97\x8A\x51\xA5\x64\x43\x0A\x48\xBB\xA1\x76\x9B\x9B\x51\xA6\xDC\x94\xA5\xBC\x44\x0C\xA6\x76\xA5\x5E\xA3\x74\x67\x6C\x33\xEA\x93\x47\x22\x05\xAE\x70\xD2\x90\x88\x50\xE6\x9C\xA5\xA7\x97\x4E\x08\x26\xB1\xAA\x36\xD3\xAA\xA4\xAB\x8C\xAD\xA6\x5A\xA8\xA6\x51\xC9\xA4\xAA\xA1\x95\xA9\x20\x47\x04\x8A\x38\x9A\xAC\x43\x6D\xA5\xAE\xAB\x67\xA3\x73\x92\x7E\x1F\x1F\x3B\x3A\x1F\x0A\xFF\x13\x1F\x3A\x7F\x10\x21\x82\x01\x20\x3B\x7F\xB7\x3A\x60\x81\xB4\xB0\x00\x1D\x39\x20\x0B\x21\x21\x43\x01\x25\x3E\x00\x14\x40\x00\x18\x40\x03\x45\x01\x29\x3C\x00\x2B\x39\x20\xD6\x21\x21\x7B\x01\x2F\x3D\x80\x00\x4B\x3C\x06\x40\xB3\x8F\x04\x2F\xB2\x00\x27\x3E\xB3\x83\xA0\x00\x84\x05\xB2\xB5\xD6\xA9\xB2\xB4\xA5\xA1\x3C\x6A\x81",
					"\x2B\x3B\xD9\x80\x02\x3A\xA7\xA0\x01\x8E\x2C\xB9\xB4\x01\x7C\xB5\x42\xA4\xA1\xB9\x40\x3B\xB0\x00\xD7\x81\x27\x3F\xBF\xA3\xB4\x6D\xC2\xB7\xB7\xD4\xBB\x38\x00\x12\x49\xBA\x71\x80\x0D\x41\xC2\x85\x20",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
