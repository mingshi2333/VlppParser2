/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "XmlAst_Builder.h"

namespace vl
{
	namespace glr
	{
		namespace xml
		{
			namespace builder
			{

/***********************************************************************
AttributeBuilder
***********************************************************************/

				AttributeBuilder& AttributeBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				AttributeBuilder& AttributeBuilder::value(const vl::WString& value)
				{
					node->value.value = value;
					return *this;
				}

/***********************************************************************
CDataBuilder
***********************************************************************/

				CDataBuilder& CDataBuilder::content(const vl::WString& value)
				{
					node->content.value = value;
					return *this;
				}

/***********************************************************************
CommentBuilder
***********************************************************************/

				CommentBuilder& CommentBuilder::content(const vl::WString& value)
				{
					node->content.value = value;
					return *this;
				}

/***********************************************************************
DocumentBuilder
***********************************************************************/

				DocumentBuilder& DocumentBuilder::prologs(const vl::Ptr<XmlNode>& value)
				{
					node->prologs.Add(value);
					return *this;
				}

				DocumentBuilder& DocumentBuilder::rootElement(const vl::Ptr<XmlElement>& value)
				{
					node->rootElement = value;
					return *this;
				}

/***********************************************************************
ElementBuilder
***********************************************************************/

				ElementBuilder& ElementBuilder::attributes(const vl::Ptr<XmlAttribute>& value)
				{
					node->attributes.Add(value);
					return *this;
				}

				ElementBuilder& ElementBuilder::closingName(const vl::WString& value)
				{
					node->closingName.value = value;
					return *this;
				}

				ElementBuilder& ElementBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				ElementBuilder& ElementBuilder::subNodes(const vl::Ptr<XmlNode>& value)
				{
					node->subNodes.Add(value);
					return *this;
				}

/***********************************************************************
InstructionBuilder
***********************************************************************/

				InstructionBuilder& InstructionBuilder::attributes(const vl::Ptr<XmlAttribute>& value)
				{
					node->attributes.Add(value);
					return *this;
				}

				InstructionBuilder& InstructionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
TextBuilder
***********************************************************************/

				TextBuilder& TextBuilder::content(const vl::WString& value)
				{
					node->content.value = value;
					return *this;
				}
			}
		}
	}
}
