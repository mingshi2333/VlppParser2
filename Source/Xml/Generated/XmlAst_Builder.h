/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_XML_AST_AST_BUILDER
#define VCZH_PARSER2_BUILTIN_XML_AST_AST_BUILDER

#include "XmlAst.h"

namespace vl
{
	namespace glr
	{
		namespace xml
		{
			namespace builder
			{
				class AttributeBuilder
				{
				private:
					XmlAttribute* node;
				public:
					AttributeBuilder(XmlAttribute* _node) : node(_node) {}
					AttributeBuilder& name(const vl::WString& value);
					AttributeBuilder& value(const vl::WString& value);
				};

				class CDataBuilder
				{
				private:
					XmlCData* node;
				public:
					CDataBuilder(XmlCData* _node) : node(_node) {}
					CDataBuilder& content(const vl::WString& value);
				};

				class CommentBuilder
				{
				private:
					XmlComment* node;
				public:
					CommentBuilder(XmlComment* _node) : node(_node) {}
					CommentBuilder& content(const vl::WString& value);
				};

				class DocumentBuilder
				{
				private:
					XmlDocument* node;
				public:
					DocumentBuilder(XmlDocument* _node) : node(_node) {}
					DocumentBuilder& prologs(const vl::Ptr<XmlNode>& value);
					DocumentBuilder& rootElement(const vl::Ptr<XmlElement>& value);
				};

				class ElementBuilder
				{
				private:
					XmlElement* node;
				public:
					ElementBuilder(XmlElement* _node) : node(_node) {}
					ElementBuilder& attributes(const vl::Ptr<XmlAttribute>& value);
					ElementBuilder& closingName(const vl::WString& value);
					ElementBuilder& name(const vl::WString& value);
					ElementBuilder& subNodes(const vl::Ptr<XmlNode>& value);
				};

				class InstructionBuilder
				{
				private:
					XmlInstruction* node;
				public:
					InstructionBuilder(XmlInstruction* _node) : node(_node) {}
					InstructionBuilder& attributes(const vl::Ptr<XmlAttribute>& value);
					InstructionBuilder& name(const vl::WString& value);
				};

				class TextBuilder
				{
				private:
					XmlText* node;
				public:
					TextBuilder(XmlText* _node) : node(_node) {}
					TextBuilder& content(const vl::WString& value);
				};

				using MakeAttribute = vl::glr::ParsingAstBuilder<XmlAttribute, AttributeBuilder>;
				using MakeCData = vl::glr::ParsingAstBuilder<XmlCData, CDataBuilder>;
				using MakeComment = vl::glr::ParsingAstBuilder<XmlComment, CommentBuilder>;
				using MakeDocument = vl::glr::ParsingAstBuilder<XmlDocument, DocumentBuilder>;
				using MakeElement = vl::glr::ParsingAstBuilder<XmlElement, ElementBuilder>;
				using MakeInstruction = vl::glr::ParsingAstBuilder<XmlInstruction, InstructionBuilder>;
				using MakeText = vl::glr::ParsingAstBuilder<XmlText, TextBuilder>;
			}
		}
	}
}
#endif