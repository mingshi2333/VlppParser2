/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Xml
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "Xml_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace xml
		{
			bool XmlTokenDeleter(vl::vint token)
			{
				switch((XmlTokens)token)
				{
				case XmlTokens::SPACE:
					return true;
				default:
					return false;
				}
			}

			const wchar_t* XmlTokenId(XmlTokens token)
			{
				static const wchar_t* results[] = {
					L"INSTRUCTION_OPEN",
					L"INSTRUCTION_CLOSE",
					L"COMPLEX_ELEMENT_OPEN",
					L"SINGLE_ELEMENT_CLOSE",
					L"ELEMENT_OPEN",
					L"ELEMENT_CLOSE",
					L"EQUAL",
					L"NAME",
					L"ATTVALUE",
					L"COMMENT",
					L"CDATA",
					L"TEXT",
					L"SPACE",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < XmlTokenCount ? results[index] : nullptr;
			}

			const wchar_t* XmlTokenDisplayText(XmlTokens token)
			{
				static const wchar_t* results[] = {
					L"<?",
					L"?>",
					L"</",
					L"/>",
					L"<",
					L">",
					L"=",
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
					nullptr,
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < XmlTokenCount ? results[index] : nullptr;
			}

			const wchar_t* XmlTokenRegex(XmlTokens token)
			{
				static const wchar_t* results[] = {
					L"/</?",
					L"/?/>",
					L"/<//",
					L"///>",
					L"/<",
					L"/>",
					L"/=",
					L"[a-zA-Z0-9:._/-]+",
					L"\"[^<>\"]*\"|\'[^<>\']*\'",
					L"/</!--([^/->]|-[^/->]|--[^>])*--/>",
					L"/</!/[CDATA/[([^/]]|/][^/]]|/]/][^>])*/]/]/>",
					L"([^<>=\"\' /r/n/ta-zA-Z0-9:._/-])+|\"|\'",
					L"/s+",
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < XmlTokenCount ? results[index] : nullptr;
			}

			void XmlLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 1083; // 7370 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 59;
				static const vl::vint dataSolidRows = 4;
				static const vl::vint dataRows = 5;
				static const char* compressed[] = {
					"\xCA\x1C\x00\x00\x33\x04\x00\x00\x2C\x00\x01\xA7\x01\x84\x81\x82\x12\x82\x01\x04\x88\x04\x89\x04\x84\x82\x05\x0F\x84\x8B\x04\x8C\x04\x81\x06\x8B\x04\x8E\x04\x9F\x04\x80\x11\x8E\x82\x21\x20\x84\x82\x13\x94\x83\x10\x82\x07\x82\x84\x83\x81\x80\x14\x82\x80\x01\xAD\x04\x92\x91\x86\x14\x82\x9B\x01\xAF\x04\x9A\x91\x80\x18\x83\x1C\x04\xBA\x01\xA4\x8B\x1C\xA0\x82\x1E\x47\x84\xBD\x0A\xA4\x86\x1D\xA6\x82\x3F\x50\x84\x80\x23\xAC\x81\x20\xAB\x04\xC2\x19\xA4\x83\x24\xAC\x82\x22\x5F\x84\x85\x24\x83\x2C\x80\x2A\xB3\x04\xD5\x04\x9A\x24\x83\x2D\xB6\x82\x5C\x70\x84\x9D\x23\xBC\x82\x2E\xBB\x04\xDF\x39\xA4\x80\x34\xBC\x83\x30\x04\xFA\x04\x9B\x34\x87\x7F\x7E\x08\x00\x0D\x81\x90\x8B\xC6\x85\xC7\x80\x8A\x80\x0C\xC9\xC4\x87\x02\xC6\x00\x0B\x90\xC4\x86\x0B\xCC\x83\x01\xCE\x01\x9C\xDA\xC1\x89\x81\x81\x02\x82\x04\x04\x82\x17\xC2\xD0\x01\xD7\xD7\xA0\xAE\xF1\xD1\xC4\xDC\xD6\xDB\xD1\x00\x06\xFA\xDB\xDC\xDD\xDE\xDE\xDE\x17\x81\xBF\xC3\xEE\xDD\x8A\xE0\xE2\xC8\x86\xD3\x87\xE9\xE5\xE6\xE7\xE7\xC9\x8F\x05\xDE\xD2\xEC\xE7\x7F\xEA\xB9\xBA\xD8\xFB",
					"\xDB\xEA\xEF\xE9\xDE\xDD\xE0\xDF\xFC\xDA\x89\x80\xED\xF0\xD0\xC3\xE7\xE4\x8B\xF6\xE8\xF5\xF7\xE3\xDC\xE3\xF0\xFE\xF3\xF9\xF8\xEF\xD6\xF2\xF9\xFA\xD8\xC6\xF0\xF7\xFB\xE9\x7C\x6D\x78\x00\x03\xBA\x79\x76\x61\xE8\x41\x8A\x83\x82\x0C\x8D\x8E\x83\x83\x10\x91\x82\x87\x84\x14\x95\x86\x85\x7A\x11\x04\x49\x86\x75\x1B\x80\x0D\x87\x83\x1D\xA1\x8A\x87\x88\x01\x62\x8B\x7C\x71\x1F\xBA\x69\x89\x6F\x12\x04\x4D\x89\x40\x2F\x80\x01\x8F\x8C\x2E\xB5\x81\x43\x04\x36\xB2\x89\x8C\x8D\x30\xBB\x89\x8F\x6E\x31\x80\x9E\x8D\x8F\x44\xBA\x85\x90\x8F\x46\x89\x98\x93\x92\x3F\xBA\x64\x04\x41\x4F\x81\x41\x94\x00\x53\x95\x90\x97\x95\x52\x98\x90\x01\x05\x5A\x96\x99\x97\x97\x54\x9A\x9B\x6F\x94\x63\x9D\x96\x98\x98\x5E\xA1\x98\x9B\x99\x6A\xAD\x99\x9A\x81\xBF\x74\x77\x83\x75\xF6\x75\x77\x88\x9D\x77\x89\x84\x77\x7F\x77\x8B\x83\x81\x81\xF8\x73\x9A\x9E\x61\x16\x04\x45\xA2\x75\x87\xB3\x99\xA3\x85\x8C\x8D\xAE\xA3\xA3\x90\x91\xA2\xA7\xA4\x94\x95\xA6\xA5\xA4\x17\x00\x87\xA5\x7A\x18\x1A\xAB\xA7\xA7\xA0\x95\xA3\xA0\x9E\x82\xB5\x95\xAA\x9D\x73\xB0\x9B\x9D\x9F",
					"\x81\xA3\xAE\x9C\x9F\x04\xB0\xAA\xA8\x82\x9E\xA1\xA6\xAF\xAD\xB8\xBF\x36\x8B\x9C\xBB\xA0\x84\x8A\x87\xBF\xBB\xAB\x89\x73\xC3\x83\xB2\x93\x91\x43\x8A\x99\x8C\x8E\xC8\x8D\xBA\xB2\xB3\x41\xBA\x61\xB6\x61\x4C\x90\xB9\xB1\xB5\xCF\x99\xB8\x91\xAE\xDC\x9D\xBF\x3D\x9A\xE0\xAC\x91\xB9\x40\x5C\xAB\x96\xBA\x9B\x62\x8E\x93\x7B\xB8\xE8\xA7\xBC\xBB\xBB\xE2\xB5\xAE\xB7\xBC\x96\x89\xAB\xA2\x6E\xF7\x84\xA2\xBC\xBD\xFC\xB7\xA9\x07\xBE\xFD\x81\xC2\xC1\x72\x1A\x00\xC2\xA7\x06\x04\x48\xC1\x42\xC2\x00\x0C\xCE\xC1\xC2\x10\xCB\xC1\xC5\xC3\x13\xDC\x03\xC7\xC3\x12\xD9\xC4\xC6\xC6\xBB\x58\xCB\xC7\xC7\x1E\xE1\xC7\xC7\xC8\x1A\xE2\xCC\xAB\xC0\x8F\x9D\x06\xC1\xA3\x26\xE0\xC4\xCA\xCB\x25\xD5\xCF\xC9\xCB\x1E\xDD\xC3\xCF\xCD\x31\xF9\xC0\xCF\xCE\x35\xFA\x6E\x04\x41\x3F\xC1\x41\xD0\x00\x43\xC5\xD0\xD3\xD1\x42\xC8\xD4\xD2\xD2\x1C\x49\xDE\xD3\xD2\x4F\xC6\xDF\xD3\x6E\x52\xD0\xD6\xD5\xD5\x58\xCA\xD9\xD5\xD4\x5A\xEB\xC8\xC9\x80\x1E\x67\xC6\xAC\xCD\x38\xFC\xCF\xCA\xC5\x3A\xE4\xDC\xC6\x6E\x6A\xE6\xD9\xD9\xD9\x6D\xFB\x61\x49\x40\x73\xC0\x05\xDF\xDD\x22",
					"\x74\xD9\xDE\xDD\x7B\xF8\xDA\xDF\xDF\x7C\xC0\xEE\xDD\xE0\x84\xE4\x42\xE1\xDF\x88\xC7\xEA\xE0\xE1\x83\xCD\xEB\xDF\xD7\xB9\xA7\x42\xDB\x84\x6D\xD5\xE5\xD8\xDA\x6E\xD9\xEC\xC2\xCD\x6F\xDD\xEA\xE4\xDC\x2F\xD0\xE2\xEB\xE8\xDD\xA4\x0E\xD4\xE9\xA8\xD2\x85\x0B\xE9\xCF\x69\x40\x02\xEB\xB0\xE8\x42\xEE\x41\xB3\xEF\xE5\xED\xEC\xB4\xF9\xE6\xEE\xEE\xB8\xFB\xEE\xED\xEF\xC0\xF7\xE2\xF0\xEF\xB5\xEC\x4F\xEF\xF0\xBE\xFB\x61\xF0\xF1\xCC\xC7\xFD\xF3\xF2\xCE\xD1\xF0\xF7\xF4\xC8\xD4\xFA\xEE\xF1\xD6\xC9\xFA\x6E\x4B\x2D\x44\x4C\xF4\x00\xDF\xE1\xFE\xF7\xF8\xDD\xE5\xF0\xF8\xF9\xE7\xE6\xF2\xFA\xFA\xE8\xEB\xF9\xFB\xFB\xEE\xF1\xFD\xFB\xFC\x01\x69\x04\xFC\xFC\xE8\xCA\xF5\xF7\xFE\xCF\xFC\xF2\xF6\xFF\xD9\x61\x80\x00\xAB\x23\x80\xDD\x7B\x32\x05\x04\x28\x81\x40\x0A\x80\x00\x06\x8E\x81\x81\x10\x8B\x81\x04\x8D\x83\x83\x07\x92\x87\x82\x14\x98\x82\x05\x80\x0B\x05\x0A\x9E\x82\x83\x1F\x99\x82\x08\x9B\x84\x85\x10\xBA\x7D\x7F\x28\x9F\x7D\x0A\x82\x8B\x85\x02\xAA\x87\x85\xD8\x6E\x85\xEA\x33\x8A\x40\x7F\x1F\x1B\x0D\x00\x04\x00\x02\x30\x25\x21\x1C\x92\x27",
					"\x87\xA6\x31\x36\x65\x01\x2B\x38\x00\x05\x8D\x88\xC6\x3D\x87\x6A\x01\x21\x38\x00\x25\x36\x88\x9E\x35\x30\x46\x01\x29\x32\x00\x0D\x8D\x8A\x49\x8D\x8A\x16\xD3\x86\x8A\x2E\x9B\x8C\x89\x5E\x97\x33\x17\xDD\x80\x8D\x32\xA4\x8F\x8C\x4D\x93\x30",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
