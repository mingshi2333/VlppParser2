{
    "$ast": "Module",
    "declarations": [{
        "$ast": "ClassDeclaration",
        "attributes": [],
        "name": "Base",
        "baseTypes": [],
        "constructorType": "Undefined",
        "declarations": [{
            "$ast": "VariableDeclaration",
            "attributes": [],
            "name": "x",
            "expression": {
                "$ast": "IntegerExpression",
                "value": "0"
            },
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }, {
            "$ast": "ConstructorDeclaration",
            "attributes": [],
            "name": "",
            "arguments": [],
            "baseConstructorCalls": [],
            "constructorType": "SharedPtr",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": []
            }
        }, {
            "$ast": "ConstructorDeclaration",
            "attributes": [],
            "name": "",
            "arguments": [{
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "_x",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Int"
                }
            }],
            "baseConstructorCalls": [],
            "constructorType": "SharedPtr",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "ExpressionStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "x"
                        },
                        "op": "Assign",
                        "second": {
                            "$ast": "ReferenceExpression",
                            "name": "_x"
                        }
                    }
                }, {
                    "$ast": "IfStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "MemberExpression",
                            "name": "x",
                            "parent": {
                                "$ast": "ThisExpression"
                            }
                        },
                        "op": "NE",
                        "second": {
                            "$ast": "ReferenceExpression",
                            "name": "x"
                        }
                    },
                    "falseBranch": null,
                    "name": "",
                    "trueBranch": {
                        "$ast": "BlockStatement",
                        "endLabel": "",
                        "statements": [{
                            "$ast": "RaiseExceptionStatement",
                            "expression": {
                                "$ast": "StringExpression",
                                "value": "\"The \\\"this\\\" expression is not correctly implemented.\""
                            }
                        }]
                    },
                    "type": null
                }]
            }
        }, {
            "$ast": "FunctionDeclaration",
            "attributes": [],
            "name": "GetX",
            "anonymity": "Named",
            "arguments": [],
            "functionKind": "Normal",
            "returnType": {
                "$ast": "PredefinedType",
                "name": "Int"
            },
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "IfStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "MemberExpression",
                            "name": "x",
                            "parent": {
                                "$ast": "ThisExpression"
                            }
                        },
                        "op": "NE",
                        "second": {
                            "$ast": "ReferenceExpression",
                            "name": "x"
                        }
                    },
                    "falseBranch": null,
                    "name": "",
                    "trueBranch": {
                        "$ast": "BlockStatement",
                        "endLabel": "",
                        "statements": [{
                            "$ast": "RaiseExceptionStatement",
                            "expression": {
                                "$ast": "StringExpression",
                                "value": "\"The \\\"this\\\" expression is not correctly implemented.\""
                            }
                        }]
                    },
                    "type": null
                }, {
                    "$ast": "ReturnStatement",
                    "expression": {
                        "$ast": "ReferenceExpression",
                        "name": "x"
                    }
                }]
            }
        }, {
            "$ast": "FunctionDeclaration",
            "attributes": [],
            "name": "SetX",
            "anonymity": "Named",
            "arguments": [{
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "_x",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Int"
                }
            }],
            "functionKind": "Normal",
            "returnType": {
                "$ast": "PredefinedType",
                "name": "Void"
            },
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "IfStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "x"
                        },
                        "op": "NE",
                        "second": {
                            "$ast": "ReferenceExpression",
                            "name": "_x"
                        }
                    },
                    "falseBranch": null,
                    "name": "",
                    "trueBranch": {
                        "$ast": "BlockStatement",
                        "endLabel": "",
                        "statements": [{
                            "$ast": "ExpressionStatement",
                            "expression": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "x"
                                },
                                "op": "Assign",
                                "second": {
                                    "$ast": "ReferenceExpression",
                                    "name": "_x"
                                }
                            }
                        }, {
                            "$ast": "ExpressionStatement",
                            "expression": {
                                "$ast": "CallExpression",
                                "arguments": [],
                                "function": {
                                    "$ast": "ReferenceExpression",
                                    "name": "XChanged"
                                }
                            }
                        }]
                    },
                    "type": null
                }]
            }
        }, {
            "$ast": "EventDeclaration",
            "attributes": [],
            "name": "XChanged",
            "arguments": []
        }, {
            "$ast": "PropertyDeclaration",
            "attributes": [],
            "name": "X",
            "getter": "GetX",
            "setter": "SetX",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            },
            "valueChangedEvent": "XChanged"
        }],
        "kind": "Class"
    }, {
        "$ast": "ClassDeclaration",
        "attributes": [],
        "name": "Ctor",
        "baseTypes": [{
            "$ast": "ReferenceType",
            "name": "Base"
        }, {
            "$ast": "ReferenceType",
            "name": "ObservableValue"
        }],
        "constructorType": "Undefined",
        "declarations": [{
            "$ast": "ConstructorDeclaration",
            "attributes": [],
            "name": "",
            "arguments": [],
            "baseConstructorCalls": [],
            "constructorType": "SharedPtr",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": []
            }
        }, {
            "$ast": "ConstructorDeclaration",
            "attributes": [],
            "name": "",
            "arguments": [{
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "y",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Int"
                }
            }, {
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "b",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Bool"
                }
            }],
            "baseConstructorCalls": [{
                "$ast": "BaseConstructorCall",
                "arguments": [{
                    "$ast": "ReferenceExpression",
                    "name": "y"
                }],
                "type": {
                    "$ast": "ReferenceType",
                    "name": "Base"
                }
            }],
            "constructorType": "SharedPtr",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": []
            }
        }, {
            "$ast": "ConstructorDeclaration",
            "attributes": [],
            "name": "",
            "arguments": [{
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "b",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Bool"
                }
            }, {
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "value",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Int"
                }
            }],
            "baseConstructorCalls": [{
                "$ast": "BaseConstructorCall",
                "arguments": [{
                    "$ast": "ReferenceExpression",
                    "name": "value"
                }, {
                    "$ast": "ReferenceExpression",
                    "name": "b"
                }],
                "type": {
                    "$ast": "ReferenceType",
                    "name": "ObservableValue"
                }
            }],
            "constructorType": "SharedPtr",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": []
            }
        }, {
            "$ast": "ConstructorDeclaration",
            "attributes": [],
            "name": "",
            "arguments": [{
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "y",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Int"
                }
            }, {
                "$ast": "FunctionArgument",
                "attributes": [],
                "name": "value",
                "type": {
                    "$ast": "PredefinedType",
                    "name": "Int"
                }
            }],
            "baseConstructorCalls": [{
                "$ast": "BaseConstructorCall",
                "arguments": [{
                    "$ast": "ReferenceExpression",
                    "name": "y"
                }],
                "type": {
                    "$ast": "ReferenceType",
                    "name": "Base"
                }
            }, {
                "$ast": "BaseConstructorCall",
                "arguments": [{
                    "$ast": "ReferenceExpression",
                    "name": "value"
                }],
                "type": {
                    "$ast": "ReferenceType",
                    "name": "ObservableValue"
                }
            }],
            "constructorType": "SharedPtr",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": []
            }
        }],
        "kind": "Class"
    }, {
        "$ast": "VariableDeclaration",
        "attributes": [],
        "name": "s",
        "expression": {
            "$ast": "StringExpression",
            "value": "\"\""
        },
        "type": null
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "VariableStatement",
                    "variable": {
                        "$ast": "VariableDeclaration",
                        "attributes": [],
                        "name": "a",
                        "expression": {
                            "$ast": "NewClassExpression",
                            "arguments": [],
                            "type": {
                                "$ast": "SharedPointerType",
                                "element": {
                                    "$ast": "ReferenceType",
                                    "name": "Ctor"
                                }
                            }
                        },
                        "type": null
                    }
                }, {
                    "$ast": "ExpressionStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "s"
                        },
                        "op": "Assign",
                        "second": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "s"
                            },
                            "op": "FlagAnd",
                            "second": {
                                "$ast": "FormatExpression",
                                "expandedExpression": null,
                                "value": "$\"[$(a.X)][$(a.Value)]\""
                            }
                        }
                    }
                }]
            }, {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "VariableStatement",
                    "variable": {
                        "$ast": "VariableDeclaration",
                        "attributes": [],
                        "name": "a",
                        "expression": {
                            "$ast": "NewClassExpression",
                            "arguments": [{
                                "$ast": "IntegerExpression",
                                "value": "1"
                            }, {
                                "$ast": "LiteralExpression",
                                "value": "True"
                            }],
                            "type": {
                                "$ast": "SharedPointerType",
                                "element": {
                                    "$ast": "ReferenceType",
                                    "name": "Ctor"
                                }
                            }
                        },
                        "type": null
                    }
                }, {
                    "$ast": "ExpressionStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "s"
                        },
                        "op": "Assign",
                        "second": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "s"
                            },
                            "op": "FlagAnd",
                            "second": {
                                "$ast": "FormatExpression",
                                "expandedExpression": null,
                                "value": "$\"[$(a.X)][$(a.Value)]\""
                            }
                        }
                    }
                }]
            }, {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "VariableStatement",
                    "variable": {
                        "$ast": "VariableDeclaration",
                        "attributes": [],
                        "name": "a",
                        "expression": {
                            "$ast": "NewClassExpression",
                            "arguments": [{
                                "$ast": "LiteralExpression",
                                "value": "True"
                            }, {
                                "$ast": "IntegerExpression",
                                "value": "2"
                            }],
                            "type": {
                                "$ast": "SharedPointerType",
                                "element": {
                                    "$ast": "ReferenceType",
                                    "name": "Ctor"
                                }
                            }
                        },
                        "type": null
                    }
                }, {
                    "$ast": "ExpressionStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "s"
                        },
                        "op": "Assign",
                        "second": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "s"
                            },
                            "op": "FlagAnd",
                            "second": {
                                "$ast": "FormatExpression",
                                "expandedExpression": null,
                                "value": "$\"[$(a.X)][$(a.Value)]\""
                            }
                        }
                    }
                }]
            }, {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "VariableStatement",
                    "variable": {
                        "$ast": "VariableDeclaration",
                        "attributes": [],
                        "name": "a",
                        "expression": {
                            "$ast": "NewClassExpression",
                            "arguments": [{
                                "$ast": "IntegerExpression",
                                "value": "1"
                            }, {
                                "$ast": "IntegerExpression",
                                "value": "2"
                            }],
                            "type": {
                                "$ast": "SharedPointerType",
                                "element": {
                                    "$ast": "ReferenceType",
                                    "name": "Ctor"
                                }
                            }
                        },
                        "type": null
                    }
                }, {
                    "$ast": "ExpressionStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "s"
                        },
                        "op": "Assign",
                        "second": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "s"
                            },
                            "op": "FlagAnd",
                            "second": {
                                "$ast": "FormatExpression",
                                "expandedExpression": null,
                                "value": "$\"[$(a.X)][$(a.Value)]\""
                            }
                        }
                    }
                }]
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "s"
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "test"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }, {
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}