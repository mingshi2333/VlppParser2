{
    "$ast": "Module",
    "declarations": [{
        "$ast": "VariableDeclaration",
        "attributes": [],
        "name": "s",
        "expression": {
            "$ast": "StringExpression",
            "value": "\"\""
        },
        "type": null
    }, {
        "$ast": "ClassDeclaration",
        "attributes": [],
        "name": "Dtor",
        "baseTypes": [],
        "constructorType": "Undefined",
        "declarations": [{
            "$ast": "VariableDeclaration",
            "attributes": [],
            "name": "name",
            "expression": {
                "$ast": "StringExpression",
                "value": "\"\""
            },
            "type": {
                "$ast": "PredefinedType",
                "name": "String"
            }
        }, {
            "$ast": "VariableDeclaration",
            "attributes": [],
            "name": "next",
            "expression": {
                "$ast": "LiteralExpression",
                "value": "Null"
            },
            "type": {
                "$ast": "RawPointerType",
                "element": {
                    "$ast": "ReferenceType",
                    "name": "Dtor"
                }
            }
        }, {
            "$ast": "ConstructorDeclaration",
            "attributes": [],
            "name": "",
            "arguments": [],
            "baseConstructorCalls": [],
            "constructorType": "RawPtr",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": []
            }
        }, {
            "$ast": "DestructorDeclaration",
            "attributes": [],
            "name": "",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "ExpressionStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "s"
                        },
                        "op": "Assign",
                        "second": {
                            "$ast": "FormatExpression",
                            "expandedExpression": null,
                            "value": "$\"$(s)[$(name)]\""
                        }
                    }
                }, {
                    "$ast": "IfStatement",
                    "expression": {
                        "$ast": "TypeTestingExpression",
                        "expression": {
                            "$ast": "ReferenceExpression",
                            "name": "next"
                        },
                        "test": "IsNotNull",
                        "type": null
                    },
                    "falseBranch": null,
                    "name": "",
                    "trueBranch": {
                        "$ast": "BlockStatement",
                        "endLabel": "",
                        "statements": [{
                            "$ast": "DeleteStatement",
                            "expression": {
                                "$ast": "ReferenceExpression",
                                "name": "next"
                            }
                        }]
                    },
                    "type": null
                }]
            }
        }],
        "kind": "Class"
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "x",
                    "expression": {
                        "$ast": "NewClassExpression",
                        "arguments": [],
                        "type": {
                            "$ast": "RawPointerType",
                            "element": {
                                "$ast": "ReferenceType",
                                "name": "Dtor"
                            }
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "MemberExpression",
                        "name": "name",
                        "parent": {
                            "$ast": "ReferenceExpression",
                            "name": "x"
                        }
                    },
                    "op": "Assign",
                    "second": {
                        "$ast": "StringExpression",
                        "value": "\"x\""
                    }
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "y",
                    "expression": {
                        "$ast": "NewClassExpression",
                        "arguments": [],
                        "type": {
                            "$ast": "RawPointerType",
                            "element": {
                                "$ast": "ReferenceType",
                                "name": "Dtor"
                            }
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "MemberExpression",
                        "name": "name",
                        "parent": {
                            "$ast": "ReferenceExpression",
                            "name": "y"
                        }
                    },
                    "op": "Assign",
                    "second": {
                        "$ast": "StringExpression",
                        "value": "\"y\""
                    }
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "z",
                    "expression": {
                        "$ast": "NewClassExpression",
                        "arguments": [],
                        "type": {
                            "$ast": "RawPointerType",
                            "element": {
                                "$ast": "ReferenceType",
                                "name": "Dtor"
                            }
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "MemberExpression",
                        "name": "name",
                        "parent": {
                            "$ast": "ReferenceExpression",
                            "name": "z"
                        }
                    },
                    "op": "Assign",
                    "second": {
                        "$ast": "StringExpression",
                        "value": "\"z\""
                    }
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "MemberExpression",
                        "name": "next",
                        "parent": {
                            "$ast": "ReferenceExpression",
                            "name": "x"
                        }
                    },
                    "op": "Assign",
                    "second": {
                        "$ast": "ReferenceExpression",
                        "name": "y"
                    }
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "MemberExpression",
                        "name": "next",
                        "parent": {
                            "$ast": "ReferenceExpression",
                            "name": "y"
                        }
                    },
                    "op": "Assign",
                    "second": {
                        "$ast": "ReferenceExpression",
                        "name": "z"
                    }
                }
            }, {
                "$ast": "DeleteStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "x"
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "s"
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "test"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }, {
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}