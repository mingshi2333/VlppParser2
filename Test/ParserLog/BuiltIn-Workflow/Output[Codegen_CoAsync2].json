{
    "$ast": "Module",
    "declarations": [{
        "$ast": "VariableDeclaration",
        "attributes": [],
        "name": "s",
        "expression": {
            "$ast": "StringExpression",
            "value": "\"\""
        },
        "type": null
    }, {
        "$ast": "NamespaceDeclaration",
        "attributes": [],
        "name": "CoAsync2_types",
        "declarations": [{
            "$ast": "CastResultInterfaceDeclaration",
            "attributes": [],
            "name": "IStringAsync",
            "expandedDeclarations": [],
            "baseType": {
                "$ast": "ReferenceType",
                "name": "Async"
            },
            "elementType": {
                "$ast": "PredefinedType",
                "name": "String"
            }
        }]
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "GetStringAsync",
        "anonymity": "Named",
        "arguments": [{
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "x",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "SharedPointerType",
            "element": {
                "$ast": "ReferenceType",
                "name": "IStringAsync"
            }
        },
        "statement": {
            "$ast": "CoProviderStatement",
            "expandedStatement": null,
            "name": "",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "IfStatement",
                    "expression": {
                        "$ast": "CallExpression",
                        "arguments": [],
                        "function": {
                            "$ast": "CoOperatorExpression",
                            "expandedExpression": null,
                            "name": "IsCancelled"
                        }
                    },
                    "falseBranch": null,
                    "name": "",
                    "trueBranch": {
                        "$ast": "BlockStatement",
                        "endLabel": "",
                        "statements": [{
                            "$ast": "RaiseExceptionStatement",
                            "expression": {
                                "$ast": "StringExpression",
                                "value": "\"Cancelled\""
                            }
                        }]
                    },
                    "type": null
                }, {
                    "$ast": "ReturnStatement",
                    "expression": {
                        "$ast": "TypeCastingExpression",
                        "expression": {
                            "$ast": "ReferenceExpression",
                            "name": "x"
                        },
                        "strategy": "Strong",
                        "type": {
                            "$ast": "PredefinedType",
                            "name": "String"
                        }
                    }
                }]
            }
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "GetMultipleString",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "SharedPointerType",
            "element": {
                "$ast": "ReferenceType",
                "name": "Async"
            }
        },
        "statement": {
            "$ast": "CoProviderStatement",
            "expandedStatement": null,
            "name": "",
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "ForEachStatement",
                    "expandedStatement": null,
                    "collection": {
                        "$ast": "RangeExpression",
                        "begin": {
                            "$ast": "IntegerExpression",
                            "value": "1"
                        },
                        "beginBoundary": "Inclusive",
                        "end": {
                            "$ast": "IntegerExpression",
                            "value": "10"
                        },
                        "endBoundary": "Inclusive"
                    },
                    "direction": "Normal",
                    "name": "i",
                    "statement": {
                        "$ast": "BlockStatement",
                        "endLabel": "",
                        "statements": [{
                            "$ast": "CoOperatorStatement",
                            "arguments": [{
                                "$ast": "CallExpression",
                                "arguments": [{
                                    "$ast": "ReferenceExpression",
                                    "name": "i"
                                }],
                                "function": {
                                    "$ast": "ReferenceExpression",
                                    "name": "GetStringAsync"
                                }
                            }],
                            "opName": "$Await",
                            "varName": "x"
                        }, {
                            "$ast": "ExpressionStatement",
                            "expression": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "s"
                                },
                                "op": "Assign",
                                "second": {
                                    "$ast": "FormatExpression",
                                    "expandedExpression": null,
                                    "value": "$\"$(s)[$(x)]\""
                                }
                            }
                        }, {
                            "$ast": "IfStatement",
                            "expression": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "i"
                                },
                                "op": "EQ",
                                "second": {
                                    "$ast": "IntegerExpression",
                                    "value": "5"
                                }
                            },
                            "falseBranch": null,
                            "name": "",
                            "trueBranch": {
                                "$ast": "BlockStatement",
                                "endLabel": "",
                                "statements": [{
                                    "$ast": "ExpressionStatement",
                                    "expression": {
                                        "$ast": "CallExpression",
                                        "arguments": [],
                                        "function": {
                                            "$ast": "CoOperatorExpression",
                                            "expandedExpression": null,
                                            "name": "Cancel"
                                        }
                                    }
                                }]
                            },
                            "type": null
                        }]
                    }
                }]
            }
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "CallExpression",
                    "arguments": [{
                        "$ast": "FunctionExpression",
                        "function": {
                            "$ast": "FunctionDeclaration",
                            "attributes": [],
                            "name": "",
                            "anonymity": "Anonymous",
                            "arguments": [],
                            "functionKind": "Normal",
                            "returnType": {
                                "$ast": "PredefinedType",
                                "name": "Void"
                            },
                            "statement": {
                                "$ast": "BlockStatement",
                                "endLabel": "",
                                "statements": [{
                                    "$ast": "ExpressionStatement",
                                    "expression": {
                                        "$ast": "CallExpression",
                                        "arguments": [{
                                            "$ast": "FunctionExpression",
                                            "function": {
                                                "$ast": "FunctionDeclaration",
                                                "attributes": [],
                                                "name": "",
                                                "anonymity": "Anonymous",
                                                "arguments": [{
                                                    "$ast": "FunctionArgument",
                                                    "attributes": [],
                                                    "name": "result",
                                                    "type": {
                                                        "$ast": "SharedPointerType",
                                                        "element": {
                                                            "$ast": "ReferenceType",
                                                            "name": "CoroutineResult"
                                                        }
                                                    }
                                                }],
                                                "functionKind": "Normal",
                                                "returnType": {
                                                    "$ast": "PredefinedType",
                                                    "name": "Void"
                                                },
                                                "statement": {
                                                    "$ast": "BlockStatement",
                                                    "endLabel": "",
                                                    "statements": [{
                                                        "$ast": "ExpressionStatement",
                                                        "expression": {
                                                            "$ast": "BinaryExpression",
                                                            "first": {
                                                                "$ast": "ReferenceExpression",
                                                                "name": "s"
                                                            },
                                                            "op": "Assign",
                                                            "second": {
                                                                "$ast": "FormatExpression",
                                                                "expandedExpression": null,
                                                                "value": "$\"$(s)[$(result.Failure.Message)]\""
                                                            }
                                                        }
                                                    }]
                                                }
                                            }
                                        }, {
                                            "$ast": "NewClassExpression",
                                            "arguments": [{
                                                "$ast": "LiteralExpression",
                                                "value": "Null"
                                            }],
                                            "type": {
                                                "$ast": "SharedPointerType",
                                                "element": {
                                                    "$ast": "ReferenceType",
                                                    "name": "AsyncContext"
                                                }
                                            }
                                        }],
                                        "function": {
                                            "$ast": "MemberExpression",
                                            "name": "Execute",
                                            "parent": {
                                                "$ast": "CallExpression",
                                                "arguments": [],
                                                "function": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "GetMultipleString"
                                                }
                                            }
                                        }
                                    }
                                }]
                            }
                        }
                    }],
                    "function": {
                        "$ast": "ChildExpression",
                        "name": "Run",
                        "parent": {
                            "$ast": "ReferenceExpression",
                            "name": "SyncScheduler"
                        }
                    }
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "s"
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }, {
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "test"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }, {
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "CoAsync2_types"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}