{
    "$ast": "Module",
    "declarations": [{
        "$ast": "VariableDeclaration",
        "attributes": [],
        "name": "s",
        "expression": {
            "$ast": "StringExpression",
            "value": "\"\""
        },
        "type": null
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "coroutine",
                    "expression": {
                        "$ast": "NewCoroutineExpression",
                        "expandedExpression": null,
                        "name": "",
                        "statement": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "ForEachStatement",
                                "expandedStatement": null,
                                "collection": {
                                    "$ast": "RangeExpression",
                                    "begin": {
                                        "$ast": "IntegerExpression",
                                        "value": "0"
                                    },
                                    "beginBoundary": "Inclusive",
                                    "end": {
                                        "$ast": "IntegerExpression",
                                        "value": "4"
                                    },
                                    "endBoundary": "Exclusive"
                                },
                                "direction": "Normal",
                                "name": "i",
                                "statement": {
                                    "$ast": "BlockStatement",
                                    "endLabel": "",
                                    "statements": [{
                                        "$ast": "IfStatement",
                                        "expression": {
                                            "$ast": "IfExpression",
                                            "condition": {
                                                "$ast": "BinaryExpression",
                                                "first": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "i"
                                                },
                                                "op": "EQ",
                                                "second": {
                                                    "$ast": "IntegerExpression",
                                                    "value": "2"
                                                }
                                            },
                                            "falseBranch": {
                                                "$ast": "ConstructorExpression",
                                                "arguments": [{
                                                    "$ast": "ConstructorArgument",
                                                    "key": {
                                                        "$ast": "IntegerExpression",
                                                        "value": "0"
                                                    },
                                                    "value": null
                                                }]
                                            },
                                            "trueBranch": {
                                                "$ast": "LiteralExpression",
                                                "value": "Null"
                                            }
                                        },
                                        "falseBranch": {
                                            "$ast": "BlockStatement",
                                            "endLabel": "",
                                            "statements": [{
                                                "$ast": "RaiseExceptionStatement",
                                                "expression": {
                                                    "$ast": "StringExpression",
                                                    "value": "\"*\""
                                                }
                                            }]
                                        },
                                        "name": "o",
                                        "trueBranch": {
                                            "$ast": "BlockStatement",
                                            "endLabel": "",
                                            "statements": [{
                                                "$ast": "ExpressionStatement",
                                                "expression": {
                                                    "$ast": "BinaryExpression",
                                                    "first": {
                                                        "$ast": "ReferenceExpression",
                                                        "name": "s"
                                                    },
                                                    "op": "Assign",
                                                    "second": {
                                                        "$ast": "FormatExpression",
                                                        "expandedExpression": null,
                                                        "value": "$\"$(s)[+$(i)]\""
                                                    }
                                                }
                                            }, {
                                                "$ast": "CoPauseStatement",
                                                "statement": null
                                            }]
                                        },
                                        "type": {
                                            "$ast": "MapType",
                                            "key": null,
                                            "value": {
                                                "$ast": "PredefinedType",
                                                "name": "Int"
                                            },
                                            "writability": "Writable"
                                        }
                                    }]
                                }
                            }]
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "VariableStatement",
                    "variable": {
                        "$ast": "VariableDeclaration",
                        "attributes": [],
                        "name": "i",
                        "expression": {
                            "$ast": "IntegerExpression",
                            "value": "0"
                        },
                        "type": null
                    }
                }, {
                    "$ast": "WhileStatement",
                    "condition": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "MemberExpression",
                            "name": "Status",
                            "parent": {
                                "$ast": "ReferenceExpression",
                                "name": "coroutine"
                            }
                        },
                        "op": "NE",
                        "second": {
                            "$ast": "ChildExpression",
                            "name": "Stopped",
                            "parent": {
                                "$ast": "ReferenceExpression",
                                "name": "CoroutineStatus"
                            }
                        }
                    },
                    "statement": {
                        "$ast": "BlockStatement",
                        "endLabel": "",
                        "statements": [{
                            "$ast": "ExpressionStatement",
                            "expression": {
                                "$ast": "CallExpression",
                                "arguments": [{
                                    "$ast": "LiteralExpression",
                                    "value": "False"
                                }, {
                                    "$ast": "LiteralExpression",
                                    "value": "Null"
                                }],
                                "function": {
                                    "$ast": "MemberExpression",
                                    "name": "Resume",
                                    "parent": {
                                        "$ast": "ReferenceExpression",
                                        "name": "coroutine"
                                    }
                                }
                            }
                        }, {
                            "$ast": "ExpressionStatement",
                            "expression": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "s"
                                },
                                "op": "Assign",
                                "second": {
                                    "$ast": "FormatExpression",
                                    "expandedExpression": null,
                                    "value": "$\"$(s)[-$(i)]\""
                                }
                            }
                        }, {
                            "$ast": "ExpressionStatement",
                            "expression": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "i"
                                },
                                "op": "Assign",
                                "second": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "ReferenceExpression",
                                        "name": "i"
                                    },
                                    "op": "Add",
                                    "second": {
                                        "$ast": "IntegerExpression",
                                        "value": "1"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    "$ast": "ExpressionStatement",
                    "expression": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "ReferenceExpression",
                            "name": "s"
                        },
                        "op": "Assign",
                        "second": {
                            "$ast": "FormatExpression",
                            "expandedExpression": null,
                            "value": "$\"$(s)[$(coroutine.Failure.Message)]\""
                        }
                    }
                }]
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "s"
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}