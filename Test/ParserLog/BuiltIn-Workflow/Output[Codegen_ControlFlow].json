{
    "$ast": "Module",
    "declarations": [{
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Sum1",
        "anonymity": "Named",
        "arguments": [{
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "start",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }, {
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "end",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Int"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "result",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "0"
                    },
                    "type": null
                }
            }, {
                "$ast": "ForEachStatement",
                "expandedStatement": null,
                "collection": {
                    "$ast": "RangeExpression",
                    "begin": {
                        "$ast": "ReferenceExpression",
                        "name": "start"
                    },
                    "beginBoundary": "Inclusive",
                    "end": {
                        "$ast": "ReferenceExpression",
                        "name": "end"
                    },
                    "endBoundary": "Inclusive"
                },
                "direction": "Normal",
                "name": "x",
                "statement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "result"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "result"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "ReferenceExpression",
                                    "name": "x"
                                }
                            }
                        }
                    }]
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "result"
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Sum2",
        "anonymity": "Named",
        "arguments": [{
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "start",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }, {
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "end",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Int"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "result",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "0"
                    },
                    "type": null
                }
            }, {
                "$ast": "ForEachStatement",
                "expandedStatement": null,
                "collection": {
                    "$ast": "RangeExpression",
                    "begin": {
                        "$ast": "ReferenceExpression",
                        "name": "start"
                    },
                    "beginBoundary": "Inclusive",
                    "end": {
                        "$ast": "ReferenceExpression",
                        "name": "end"
                    },
                    "endBoundary": "Inclusive"
                },
                "direction": "Reversed",
                "name": "x",
                "statement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "result"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "result"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "ReferenceExpression",
                                    "name": "x"
                                }
                            }
                        }
                    }]
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "result"
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Sum3",
        "anonymity": "Named",
        "arguments": [{
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "start",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }, {
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "end",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Int"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "result",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "0"
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "current",
                    "expression": {
                        "$ast": "ReferenceExpression",
                        "name": "start"
                    },
                    "type": null
                }
            }, {
                "$ast": "WhileStatement",
                "condition": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "ReferenceExpression",
                        "name": "current"
                    },
                    "op": "LE",
                    "second": {
                        "$ast": "ReferenceExpression",
                        "name": "end"
                    }
                },
                "statement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "result"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "result"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "ReferenceExpression",
                                    "name": "current"
                                }
                            }
                        }
                    }, {
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "current"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "current"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                }
                            }
                        }
                    }]
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "result"
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Sum4",
        "anonymity": "Named",
        "arguments": [{
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "start",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }, {
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "end",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Int"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "result",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "0"
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "current",
                    "expression": {
                        "$ast": "ReferenceExpression",
                        "name": "start"
                    },
                    "type": null
                }
            }, {
                "$ast": "WhileStatement",
                "condition": {
                    "$ast": "LiteralExpression",
                    "value": "True"
                },
                "statement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "IfStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "current"
                            },
                            "op": "GT",
                            "second": {
                                "$ast": "ReferenceExpression",
                                "name": "end"
                            }
                        },
                        "falseBranch": null,
                        "name": "",
                        "trueBranch": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "BreakStatement"
                            }]
                        },
                        "type": null
                    }, {
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "result"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "result"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "ReferenceExpression",
                                    "name": "current"
                                }
                            }
                        }
                    }, {
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "current"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "current"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                }
                            }
                        }
                    }]
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "result"
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Sum5",
        "anonymity": "Named",
        "arguments": [{
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "start",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }, {
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "end",
            "type": {
                "$ast": "PredefinedType",
                "name": "Int"
            }
        }],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Int"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "result",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "0"
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "current",
                    "expression": {
                        "$ast": "ReferenceExpression",
                        "name": "start"
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "needToExit",
                    "expression": {
                        "$ast": "LiteralExpression",
                        "value": "False"
                    },
                    "type": null
                }
            }, {
                "$ast": "WhileStatement",
                "condition": {
                    "$ast": "UnaryExpression",
                    "op": "Not",
                    "operand": {
                        "$ast": "ReferenceExpression",
                        "name": "needToExit"
                    }
                },
                "statement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "SwitchStatement",
                        "expandedStatement": null,
                        "caseBranches": [{
                            "$ast": "SwitchCase",
                            "expression": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "end"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                }
                            },
                            "statement": {
                                "$ast": "BlockStatement",
                                "endLabel": "",
                                "statements": [{
                                    "$ast": "ExpressionStatement",
                                    "expression": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "needToExit"
                                        },
                                        "op": "Assign",
                                        "second": {
                                            "$ast": "LiteralExpression",
                                            "value": "True"
                                        }
                                    }
                                }]
                            }
                        }],
                        "defaultBranch": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "ExpressionStatement",
                                "expression": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "ReferenceExpression",
                                        "name": "result"
                                    },
                                    "op": "Assign",
                                    "second": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "result"
                                        },
                                        "op": "Add",
                                        "second": {
                                            "$ast": "ReferenceExpression",
                                            "name": "current"
                                        }
                                    }
                                }
                            }]
                        },
                        "expression": {
                            "$ast": "ReferenceExpression",
                            "name": "current"
                        }
                    }, {
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "current"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "current"
                                },
                                "op": "Add",
                                "second": {
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                }
                            }
                        }
                    }]
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "result"
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "BinaryExpression",
                                            "first": {
                                                "$ast": "BinaryExpression",
                                                "first": {
                                                    "$ast": "CallExpression",
                                                    "arguments": [{
                                                        "$ast": "IntegerExpression",
                                                        "value": "1"
                                                    }, {
                                                        "$ast": "IntegerExpression",
                                                        "value": "10"
                                                    }],
                                                    "function": {
                                                        "$ast": "ReferenceExpression",
                                                        "name": "Sum1"
                                                    }
                                                },
                                                "op": "FlagAnd",
                                                "second": {
                                                    "$ast": "StringExpression",
                                                    "value": "\", \""
                                                }
                                            },
                                            "op": "FlagAnd",
                                            "second": {
                                                "$ast": "CallExpression",
                                                "arguments": [{
                                                    "$ast": "IntegerExpression",
                                                    "value": "1"
                                                }, {
                                                    "$ast": "IntegerExpression",
                                                    "value": "10"
                                                }],
                                                "function": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "Sum2"
                                                }
                                            }
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\", \""
                                        }
                                    },
                                    "op": "FlagAnd",
                                    "second": {
                                        "$ast": "CallExpression",
                                        "arguments": [{
                                            "$ast": "IntegerExpression",
                                            "value": "1"
                                        }, {
                                            "$ast": "IntegerExpression",
                                            "value": "10"
                                        }],
                                        "function": {
                                            "$ast": "ReferenceExpression",
                                            "name": "Sum3"
                                        }
                                    }
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\", \""
                                }
                            },
                            "op": "FlagAnd",
                            "second": {
                                "$ast": "CallExpression",
                                "arguments": [{
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                }, {
                                    "$ast": "IntegerExpression",
                                    "value": "10"
                                }],
                                "function": {
                                    "$ast": "ReferenceExpression",
                                    "name": "Sum4"
                                }
                            }
                        },
                        "op": "FlagAnd",
                        "second": {
                            "$ast": "StringExpression",
                            "value": "\", \""
                        }
                    },
                    "op": "FlagAnd",
                    "second": {
                        "$ast": "CallExpression",
                        "arguments": [{
                            "$ast": "IntegerExpression",
                            "value": "1"
                        }, {
                            "$ast": "IntegerExpression",
                            "value": "10"
                        }],
                        "function": {
                            "$ast": "ReferenceExpression",
                            "name": "Sum5"
                        }
                    }
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}