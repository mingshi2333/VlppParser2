{
    "$ast": "Module",
    "declarations": [{
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "xs",
                    "expression": {
                        "$ast": "InferExpression",
                        "expression": {
                            "$ast": "ConstructorExpression",
                            "arguments": [{
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "2"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "3"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "4"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "5"
                                },
                                "value": null
                            }]
                        },
                        "type": {
                            "$ast": "EnumerableType",
                            "element": {
                                "$ast": "PredefinedType",
                                "name": "Int"
                            }
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "ys",
                    "expression": {
                        "$ast": "InferExpression",
                        "expression": {
                            "$ast": "ConstructorExpression",
                            "arguments": [{
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "2"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "3"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "4"
                                },
                                "value": null
                            }, {
                                "$ast": "ConstructorArgument",
                                "key": {
                                    "$ast": "IntegerExpression",
                                    "value": "5"
                                },
                                "value": null
                            }]
                        },
                        "type": {
                            "$ast": "MapType",
                            "key": null,
                            "value": {
                                "$ast": "PredefinedType",
                                "name": "Int"
                            },
                            "writability": "Writable"
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "zs",
                    "expression": {
                        "$ast": "InferExpression",
                        "expression": {
                            "$ast": "RangeExpression",
                            "begin": {
                                "$ast": "IntegerExpression",
                                "value": "1"
                            },
                            "beginBoundary": "Exclusive",
                            "end": {
                                "$ast": "IntegerExpression",
                                "value": "5"
                            },
                            "endBoundary": "Exclusive"
                        },
                        "type": {
                            "$ast": "EnumerableType",
                            "element": {
                                "$ast": "PredefinedType",
                                "name": "Int"
                            }
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "BinaryExpression",
                    "first": {
                        "$ast": "BinaryExpression",
                        "first": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "BinaryExpression",
                                            "first": {
                                                "$ast": "BinaryExpression",
                                                "first": {
                                                    "$ast": "BinaryExpression",
                                                    "first": {
                                                        "$ast": "BinaryExpression",
                                                        "first": {
                                                            "$ast": "BinaryExpression",
                                                            "first": {
                                                                "$ast": "BinaryExpression",
                                                                "first": {
                                                                    "$ast": "BinaryExpression",
                                                                    "first": {
                                                                        "$ast": "BinaryExpression",
                                                                        "first": {
                                                                            "$ast": "BinaryExpression",
                                                                            "first": {
                                                                                "$ast": "BinaryExpression",
                                                                                "first": {
                                                                                    "$ast": "BinaryExpression",
                                                                                    "first": {
                                                                                        "$ast": "BinaryExpression",
                                                                                        "first": {
                                                                                            "$ast": "UnaryExpression",
                                                                                            "op": "Not",
                                                                                            "operand": {
                                                                                                "$ast": "SetTestingExpression",
                                                                                                "collection": {
                                                                                                    "$ast": "ReferenceExpression",
                                                                                                    "name": "xs"
                                                                                                },
                                                                                                "element": {
                                                                                                    "$ast": "IntegerExpression",
                                                                                                    "value": "3"
                                                                                                },
                                                                                                "test": "NotIn"
                                                                                            }
                                                                                        },
                                                                                        "op": "FlagAnd",
                                                                                        "second": {
                                                                                            "$ast": "StringExpression",
                                                                                            "value": "\", \""
                                                                                        }
                                                                                    },
                                                                                    "op": "FlagAnd",
                                                                                    "second": {
                                                                                        "$ast": "SetTestingExpression",
                                                                                        "collection": {
                                                                                            "$ast": "ReferenceExpression",
                                                                                            "name": "xs"
                                                                                        },
                                                                                        "element": {
                                                                                            "$ast": "IntegerExpression",
                                                                                            "value": "0"
                                                                                        },
                                                                                        "test": "In"
                                                                                    }
                                                                                },
                                                                                "op": "FlagAnd",
                                                                                "second": {
                                                                                    "$ast": "StringExpression",
                                                                                    "value": "\", \""
                                                                                }
                                                                            },
                                                                            "op": "FlagAnd",
                                                                            "second": {
                                                                                "$ast": "UnaryExpression",
                                                                                "op": "Not",
                                                                                "operand": {
                                                                                    "$ast": "SetTestingExpression",
                                                                                    "collection": {
                                                                                        "$ast": "ReferenceExpression",
                                                                                        "name": "ys"
                                                                                    },
                                                                                    "element": {
                                                                                        "$ast": "IntegerExpression",
                                                                                        "value": "3"
                                                                                    },
                                                                                    "test": "NotIn"
                                                                                }
                                                                            }
                                                                        },
                                                                        "op": "FlagAnd",
                                                                        "second": {
                                                                            "$ast": "StringExpression",
                                                                            "value": "\", \""
                                                                        }
                                                                    },
                                                                    "op": "FlagAnd",
                                                                    "second": {
                                                                        "$ast": "SetTestingExpression",
                                                                        "collection": {
                                                                            "$ast": "ReferenceExpression",
                                                                            "name": "ys"
                                                                        },
                                                                        "element": {
                                                                            "$ast": "IntegerExpression",
                                                                            "value": "0"
                                                                        },
                                                                        "test": "In"
                                                                    }
                                                                },
                                                                "op": "FlagAnd",
                                                                "second": {
                                                                    "$ast": "StringExpression",
                                                                    "value": "\", \""
                                                                }
                                                            },
                                                            "op": "FlagAnd",
                                                            "second": {
                                                                "$ast": "UnaryExpression",
                                                                "op": "Not",
                                                                "operand": {
                                                                    "$ast": "SetTestingExpression",
                                                                    "collection": {
                                                                        "$ast": "ReferenceExpression",
                                                                        "name": "zs"
                                                                    },
                                                                    "element": {
                                                                        "$ast": "IntegerExpression",
                                                                        "value": "3"
                                                                    },
                                                                    "test": "NotIn"
                                                                }
                                                            }
                                                        },
                                                        "op": "FlagAnd",
                                                        "second": {
                                                            "$ast": "StringExpression",
                                                            "value": "\", \""
                                                        }
                                                    },
                                                    "op": "FlagAnd",
                                                    "second": {
                                                        "$ast": "SetTestingExpression",
                                                        "collection": {
                                                            "$ast": "ReferenceExpression",
                                                            "name": "zs"
                                                        },
                                                        "element": {
                                                            "$ast": "IntegerExpression",
                                                            "value": "1"
                                                        },
                                                        "test": "In"
                                                    }
                                                },
                                                "op": "FlagAnd",
                                                "second": {
                                                    "$ast": "StringExpression",
                                                    "value": "\", \""
                                                }
                                            },
                                            "op": "FlagAnd",
                                            "second": {
                                                "$ast": "SetTestingExpression",
                                                "collection": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "zs"
                                                },
                                                "element": {
                                                    "$ast": "IntegerExpression",
                                                    "value": "5"
                                                },
                                                "test": "In"
                                            }
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\", \""
                                        }
                                    },
                                    "op": "FlagAnd",
                                    "second": {
                                        "$ast": "UnaryExpression",
                                        "op": "Not",
                                        "operand": {
                                            "$ast": "SetTestingExpression",
                                            "collection": {
                                                "$ast": "RangeExpression",
                                                "begin": {
                                                    "$ast": "FloatingExpression",
                                                    "value": "1.0"
                                                },
                                                "beginBoundary": "Exclusive",
                                                "end": {
                                                    "$ast": "IntegerExpression",
                                                    "value": "5"
                                                },
                                                "endBoundary": "Exclusive"
                                            },
                                            "element": {
                                                "$ast": "IntegerExpression",
                                                "value": "3"
                                            },
                                            "test": "NotIn"
                                        }
                                    }
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\", \""
                                }
                            },
                            "op": "FlagAnd",
                            "second": {
                                "$ast": "SetTestingExpression",
                                "collection": {
                                    "$ast": "RangeExpression",
                                    "begin": {
                                        "$ast": "IntegerExpression",
                                        "value": "1"
                                    },
                                    "beginBoundary": "Inclusive",
                                    "end": {
                                        "$ast": "IntegerExpression",
                                        "value": "5"
                                    },
                                    "endBoundary": "Inclusive"
                                },
                                "element": {
                                    "$ast": "IntegerExpression",
                                    "value": "1"
                                },
                                "test": "In"
                            }
                        },
                        "op": "FlagAnd",
                        "second": {
                            "$ast": "StringExpression",
                            "value": "\", \""
                        }
                    },
                    "op": "FlagAnd",
                    "second": {
                        "$ast": "SetTestingExpression",
                        "collection": {
                            "$ast": "RangeExpression",
                            "begin": {
                                "$ast": "IntegerExpression",
                                "value": "1"
                            },
                            "beginBoundary": "Inclusive",
                            "end": {
                                "$ast": "IntegerExpression",
                                "value": "5"
                            },
                            "endBoundary": "Inclusive"
                        },
                        "element": {
                            "$ast": "IntegerExpression",
                            "value": "0"
                        },
                        "test": "In"
                    }
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}