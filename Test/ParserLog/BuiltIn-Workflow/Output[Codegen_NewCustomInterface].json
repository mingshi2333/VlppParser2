{
    "$ast": "Module",
    "declarations": [{
        "$ast": "ClassDeclaration",
        "attributes": [],
        "name": "IMyInterface",
        "baseTypes": [{
            "$ast": "ReferenceType",
            "name": "Enumerable"
        }],
        "constructorType": "SharedPtr",
        "declarations": [{
            "$ast": "FunctionDeclaration",
            "attributes": [],
            "name": "Get50",
            "anonymity": "Named",
            "arguments": [],
            "functionKind": "Static",
            "returnType": {
                "$ast": "PredefinedType",
                "name": "Int"
            },
            "statement": {
                "$ast": "BlockStatement",
                "endLabel": "",
                "statements": [{
                    "$ast": "ReturnStatement",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "50"
                    }
                }]
            }
        }, {
            "$ast": "FunctionDeclaration",
            "attributes": [],
            "name": "Get100",
            "anonymity": "Named",
            "arguments": [],
            "functionKind": "Normal",
            "returnType": {
                "$ast": "PredefinedType",
                "name": "Int"
            },
            "statement": null
        }],
        "kind": "Interface"
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "begin",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "1"
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "end",
                    "expression": {
                        "$ast": "IntegerExpression",
                        "value": "5"
                    },
                    "type": null
                }
            }, {
                "$ast": "VariableStatement",
                "variable": {
                    "$ast": "VariableDeclaration",
                    "attributes": [],
                    "name": "xs",
                    "expression": {
                        "$ast": "NewInterfaceExpression",
                        "declarations": [{
                            "$ast": "FunctionDeclaration",
                            "attributes": [],
                            "name": "CreateEnumerator",
                            "anonymity": "Named",
                            "arguments": [],
                            "functionKind": "Override",
                            "returnType": {
                                "$ast": "SharedPointerType",
                                "element": {
                                    "$ast": "ReferenceType",
                                    "name": "Enumerator"
                                }
                            },
                            "statement": {
                                "$ast": "BlockStatement",
                                "endLabel": "",
                                "statements": [{
                                    "$ast": "ReturnStatement",
                                    "expression": {
                                        "$ast": "NewInterfaceExpression",
                                        "declarations": [{
                                            "$ast": "VariableDeclaration",
                                            "attributes": [],
                                            "name": "index",
                                            "expression": {
                                                "$ast": "UnaryExpression",
                                                "op": "Negative",
                                                "operand": {
                                                    "$ast": "IntegerExpression",
                                                    "value": "1"
                                                }
                                            },
                                            "type": null
                                        }, {
                                            "$ast": "FunctionDeclaration",
                                            "attributes": [],
                                            "name": "GetCurrent",
                                            "anonymity": "Named",
                                            "arguments": [],
                                            "functionKind": "Override",
                                            "returnType": {
                                                "$ast": "PredefinedType",
                                                "name": "Object"
                                            },
                                            "statement": {
                                                "$ast": "BlockStatement",
                                                "endLabel": "",
                                                "statements": [{
                                                    "$ast": "ReturnStatement",
                                                    "expression": {
                                                        "$ast": "BinaryExpression",
                                                        "first": {
                                                            "$ast": "ReferenceExpression",
                                                            "name": "begin"
                                                        },
                                                        "op": "Add",
                                                        "second": {
                                                            "$ast": "ReferenceExpression",
                                                            "name": "index"
                                                        }
                                                    }
                                                }]
                                            }
                                        }, {
                                            "$ast": "FunctionDeclaration",
                                            "attributes": [],
                                            "name": "GetIndex",
                                            "anonymity": "Named",
                                            "arguments": [],
                                            "functionKind": "Override",
                                            "returnType": {
                                                "$ast": "PredefinedType",
                                                "name": "Int"
                                            },
                                            "statement": {
                                                "$ast": "BlockStatement",
                                                "endLabel": "",
                                                "statements": [{
                                                    "$ast": "ReturnStatement",
                                                    "expression": {
                                                        "$ast": "ReferenceExpression",
                                                        "name": "index"
                                                    }
                                                }]
                                            }
                                        }, {
                                            "$ast": "FunctionDeclaration",
                                            "attributes": [],
                                            "name": "Next",
                                            "anonymity": "Named",
                                            "arguments": [],
                                            "functionKind": "Override",
                                            "returnType": {
                                                "$ast": "PredefinedType",
                                                "name": "Bool"
                                            },
                                            "statement": {
                                                "$ast": "BlockStatement",
                                                "endLabel": "",
                                                "statements": [{
                                                    "$ast": "IfStatement",
                                                    "expression": {
                                                        "$ast": "BinaryExpression",
                                                        "first": {
                                                            "$ast": "ReferenceExpression",
                                                            "name": "index"
                                                        },
                                                        "op": "EQ",
                                                        "second": {
                                                            "$ast": "BinaryExpression",
                                                            "first": {
                                                                "$ast": "ReferenceExpression",
                                                                "name": "end"
                                                            },
                                                            "op": "Sub",
                                                            "second": {
                                                                "$ast": "ReferenceExpression",
                                                                "name": "begin"
                                                            }
                                                        }
                                                    },
                                                    "falseBranch": {
                                                        "$ast": "BlockStatement",
                                                        "endLabel": "",
                                                        "statements": [{
                                                            "$ast": "ExpressionStatement",
                                                            "expression": {
                                                                "$ast": "BinaryExpression",
                                                                "first": {
                                                                    "$ast": "ReferenceExpression",
                                                                    "name": "index"
                                                                },
                                                                "op": "Assign",
                                                                "second": {
                                                                    "$ast": "BinaryExpression",
                                                                    "first": {
                                                                        "$ast": "ReferenceExpression",
                                                                        "name": "index"
                                                                    },
                                                                    "op": "Add",
                                                                    "second": {
                                                                        "$ast": "IntegerExpression",
                                                                        "value": "1"
                                                                    }
                                                                }
                                                            }
                                                        }, {
                                                            "$ast": "ReturnStatement",
                                                            "expression": {
                                                                "$ast": "LiteralExpression",
                                                                "value": "True"
                                                            }
                                                        }]
                                                    },
                                                    "name": "",
                                                    "trueBranch": {
                                                        "$ast": "BlockStatement",
                                                        "endLabel": "",
                                                        "statements": [{
                                                            "$ast": "ReturnStatement",
                                                            "expression": {
                                                                "$ast": "LiteralExpression",
                                                                "value": "False"
                                                            }
                                                        }]
                                                    },
                                                    "type": null
                                                }]
                                            }
                                        }],
                                        "type": {
                                            "$ast": "SharedPointerType",
                                            "element": {
                                                "$ast": "ReferenceType",
                                                "name": "Enumerator"
                                            }
                                        }
                                    }
                                }]
                            }
                        }, {
                            "$ast": "FunctionDeclaration",
                            "attributes": [],
                            "name": "Get100",
                            "anonymity": "Named",
                            "arguments": [],
                            "functionKind": "Override",
                            "returnType": {
                                "$ast": "PredefinedType",
                                "name": "Int"
                            },
                            "statement": {
                                "$ast": "BlockStatement",
                                "endLabel": "",
                                "statements": [{
                                    "$ast": "ReturnStatement",
                                    "expression": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "CallExpression",
                                            "arguments": [],
                                            "function": {
                                                "$ast": "ReferenceExpression",
                                                "name": "Get50"
                                            }
                                        },
                                        "op": "Mul",
                                        "second": {
                                            "$ast": "IntegerExpression",
                                            "value": "2"
                                        }
                                    }
                                }]
                            }
                        }],
                        "type": {
                            "$ast": "SharedPointerType",
                            "element": {
                                "$ast": "ReferenceType",
                                "name": "IMyInterface"
                            }
                        }
                    },
                    "type": null
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "FormatExpression",
                    "expandedExpression": null,
                    "value": "$\"[$(xs.Get100())][$(CustomInterfaceProcessor::Sum(xs))][$(CustomInterfaceProcessor::Sum(xs))]\""
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }, {
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "test"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}