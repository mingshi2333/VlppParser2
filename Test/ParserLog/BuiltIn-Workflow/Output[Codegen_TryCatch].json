{
    "$ast": "Module",
    "declarations": [{
        "$ast": "VariableDeclaration",
        "attributes": [],
        "name": "log",
        "expression": {
            "$ast": "StringExpression",
            "value": "\"\""
        },
        "type": null
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Test1",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Void"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "TryStatement",
                "catchStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "log"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "log"
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"[\""
                                        }
                                    },
                                    "op": "FlagAnd",
                                    "second": {
                                        "$ast": "MemberExpression",
                                        "name": "Message",
                                        "parent": {
                                            "$ast": "ReferenceExpression",
                                            "name": "ex"
                                        }
                                    }
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\"]\""
                                }
                            }
                        }
                    }]
                },
                "finallyStatement": null,
                "name": "ex",
                "protectedStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "RaiseExceptionStatement",
                        "expression": {
                            "$ast": "StringExpression",
                            "value": "\"Test1::catch\""
                        }
                    }]
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Test2",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Void"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "TryStatement",
                "catchStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "log"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "log"
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"[\""
                                        }
                                    },
                                    "op": "FlagAnd",
                                    "second": {
                                        "$ast": "MemberExpression",
                                        "name": "Message",
                                        "parent": {
                                            "$ast": "ReferenceExpression",
                                            "name": "ex"
                                        }
                                    }
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\"]\""
                                }
                            }
                        }
                    }]
                },
                "finallyStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "log"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "log"
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\"[Test2::finally]\""
                                }
                            }
                        }
                    }]
                },
                "name": "ex",
                "protectedStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "RaiseExceptionStatement",
                        "expression": {
                            "$ast": "StringExpression",
                            "value": "\"Test2::catch\""
                        }
                    }]
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Throw",
        "anonymity": "Named",
        "arguments": [{
            "$ast": "FunctionArgument",
            "attributes": [],
            "name": "message",
            "type": {
                "$ast": "PredefinedType",
                "name": "String"
            }
        }],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Void"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "RaiseExceptionStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "message"
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Test3",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Void"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "TryStatement",
                "catchStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "log"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "log"
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"[\""
                                        }
                                    },
                                    "op": "FlagAnd",
                                    "second": {
                                        "$ast": "MemberExpression",
                                        "name": "Message",
                                        "parent": {
                                            "$ast": "ReferenceExpression",
                                            "name": "ex"
                                        }
                                    }
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\"2]\""
                                }
                            }
                        }
                    }]
                },
                "finallyStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "log"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "log"
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\"[Test3::finally2]\""
                                }
                            }
                        }
                    }]
                },
                "name": "ex",
                "protectedStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "TryStatement",
                        "catchStatement": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "ExpressionStatement",
                                "expression": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "ReferenceExpression",
                                        "name": "log"
                                    },
                                    "op": "Assign",
                                    "second": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "BinaryExpression",
                                            "first": {
                                                "$ast": "BinaryExpression",
                                                "first": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "log"
                                                },
                                                "op": "FlagAnd",
                                                "second": {
                                                    "$ast": "StringExpression",
                                                    "value": "\"[\""
                                                }
                                            },
                                            "op": "FlagAnd",
                                            "second": {
                                                "$ast": "MemberExpression",
                                                "name": "Message",
                                                "parent": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "ex"
                                                }
                                            }
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"1]\""
                                        }
                                    }
                                }
                            }, {
                                "$ast": "RaiseExceptionStatement",
                                "expression": null
                            }]
                        },
                        "finallyStatement": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "ExpressionStatement",
                                "expression": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "ReferenceExpression",
                                        "name": "log"
                                    },
                                    "op": "Assign",
                                    "second": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "log"
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"[Test3::finally1]\""
                                        }
                                    }
                                }
                            }]
                        },
                        "name": "ex",
                        "protectedStatement": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "ExpressionStatement",
                                "expression": {
                                    "$ast": "CallExpression",
                                    "arguments": [{
                                        "$ast": "StringExpression",
                                        "value": "\"Test3::catch\""
                                    }],
                                    "function": {
                                        "$ast": "ReferenceExpression",
                                        "name": "Throw"
                                    }
                                }
                            }]
                        }
                    }]
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "Test4",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "Void"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "TryStatement",
                "catchStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "log"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "log"
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"[\""
                                        }
                                    },
                                    "op": "FlagAnd",
                                    "second": {
                                        "$ast": "MemberExpression",
                                        "name": "Message",
                                        "parent": {
                                            "$ast": "ReferenceExpression",
                                            "name": "ex"
                                        }
                                    }
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\"2]\""
                                }
                            }
                        }
                    }]
                },
                "finallyStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "ExpressionStatement",
                        "expression": {
                            "$ast": "BinaryExpression",
                            "first": {
                                "$ast": "ReferenceExpression",
                                "name": "log"
                            },
                            "op": "Assign",
                            "second": {
                                "$ast": "BinaryExpression",
                                "first": {
                                    "$ast": "ReferenceExpression",
                                    "name": "log"
                                },
                                "op": "FlagAnd",
                                "second": {
                                    "$ast": "StringExpression",
                                    "value": "\"[Test4::finally2]\""
                                }
                            }
                        }
                    }]
                },
                "name": "ex",
                "protectedStatement": {
                    "$ast": "BlockStatement",
                    "endLabel": "",
                    "statements": [{
                        "$ast": "TryStatement",
                        "catchStatement": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "ExpressionStatement",
                                "expression": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "ReferenceExpression",
                                        "name": "log"
                                    },
                                    "op": "Assign",
                                    "second": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "BinaryExpression",
                                            "first": {
                                                "$ast": "BinaryExpression",
                                                "first": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "log"
                                                },
                                                "op": "FlagAnd",
                                                "second": {
                                                    "$ast": "StringExpression",
                                                    "value": "\"[\""
                                                }
                                            },
                                            "op": "FlagAnd",
                                            "second": {
                                                "$ast": "MemberExpression",
                                                "name": "Message",
                                                "parent": {
                                                    "$ast": "ReferenceExpression",
                                                    "name": "ex"
                                                }
                                            }
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"1]\""
                                        }
                                    }
                                }
                            }, {
                                "$ast": "RaiseExceptionStatement",
                                "expression": null
                            }]
                        },
                        "finallyStatement": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": [{
                                "$ast": "ExpressionStatement",
                                "expression": {
                                    "$ast": "BinaryExpression",
                                    "first": {
                                        "$ast": "ReferenceExpression",
                                        "name": "log"
                                    },
                                    "op": "Assign",
                                    "second": {
                                        "$ast": "BinaryExpression",
                                        "first": {
                                            "$ast": "ReferenceExpression",
                                            "name": "log"
                                        },
                                        "op": "FlagAnd",
                                        "second": {
                                            "$ast": "StringExpression",
                                            "value": "\"[Test4::finally1]\""
                                        }
                                    }
                                }
                            }]
                        },
                        "name": "ex",
                        "protectedStatement": {
                            "$ast": "BlockStatement",
                            "endLabel": "",
                            "statements": []
                        }
                    }]
                }
            }]
        }
    }, {
        "$ast": "FunctionDeclaration",
        "attributes": [],
        "name": "main",
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": "PredefinedType",
            "name": "String"
        },
        "statement": {
            "$ast": "BlockStatement",
            "endLabel": "",
            "statements": [{
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "CallExpression",
                    "arguments": [],
                    "function": {
                        "$ast": "ReferenceExpression",
                        "name": "Test1"
                    }
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "CallExpression",
                    "arguments": [],
                    "function": {
                        "$ast": "ReferenceExpression",
                        "name": "Test2"
                    }
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "CallExpression",
                    "arguments": [],
                    "function": {
                        "$ast": "ReferenceExpression",
                        "name": "Test3"
                    }
                }
            }, {
                "$ast": "ExpressionStatement",
                "expression": {
                    "$ast": "CallExpression",
                    "arguments": [],
                    "function": {
                        "$ast": "ReferenceExpression",
                        "name": "Test4"
                    }
                }
            }, {
                "$ast": "ReturnStatement",
                "expression": {
                    "$ast": "ReferenceExpression",
                    "name": "log"
                }
            }]
        }
    }],
    "moduleType": "Module",
    "name": "test",
    "paths": [{
        "$ast": "ModuleUsingPath",
        "items": [{
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingNameFragment",
                "name": "system"
            }]
        }, {
            "$ast": "ModuleUsingItem",
            "fragments": [{
                "$ast": "ModuleUsingWildCardFragment"
            }]
        }]
    }]
}