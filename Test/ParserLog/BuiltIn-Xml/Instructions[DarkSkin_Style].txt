<[0]ELEMENT_OPEN:<> BeginObject(Document)
<[0]ELEMENT_OPEN:<> BeginObject(Element)
<[1]NAME:Styles> Token()
<[1]NAME:Styles> Field(Element::name)
<[3]ELEMENT_OPEN:<> DelayFieldAssignment()
<[3]ELEMENT_OPEN:<> BeginObject(Element)
<[4]NAME:Style> Token()
<[4]NAME:Style> Field(Element::name)
<[5]NAME:ref.Path> BeginObject(Attribute)
<[5]NAME:ref.Path> Token()
<[5]NAME:ref.Path> Field(Attribute::name)
<[7]ATTVALUE:"(//Bounds + //Table + //RepeatStack + //RepeatFlow)"> Token()
<[7]ATTVALUE:"(//Bounds + //Table + //RepeatStack + //RepeatFlow)"> Field(Attribute::value)
<[-1]ATTVALUE:"(//Bounds + //Table + //RepeatStack + //RepeatFlow)"> EndObject()
<[7]ATTVALUE:"(//Bounds + //Table + //RepeatStack + //RepeatFlow)"> Field(Element::attributes)
<[8]NAME:MinSizeLimitation> BeginObject(Attribute)
<[8]NAME:MinSizeLimitation> Token()
<[8]NAME:MinSizeLimitation> Field(Attribute::name)
<[10]ATTVALUE:"LimitToElementAndChildren"> Token()
<[10]ATTVALUE:"LimitToElementAndChildren"> Field(Attribute::value)
<[-1]ATTVALUE:"LimitToElementAndChildren"> EndObject()
<[10]ATTVALUE:"LimitToElementAndChildren"> Field(Element::attributes)
<[11]SINGLE_ELEMENT_CLOSE:/>> AccumulatedEoRo(1)
<[11]SINGLE_ELEMENT_CLOSE:/>> EndObject()
<[11]SINGLE_ELEMENT_CLOSE:/>> Field(Element::subNodes)
<[12]ELEMENT_OPEN:<> DelayFieldAssignment()
<[12]ELEMENT_OPEN:<> BeginObject(Element)
<[13]NAME:Style> Token()
<[13]NAME:Style> Field(Element::name)
<[14]NAME:ref.Path> BeginObject(Attribute)
<[14]NAME:ref.Path> Token()
<[14]NAME:ref.Path> Field(Attribute::name)
<[16]ATTVALUE:"//*.windowBorder"> Token()
<[16]ATTVALUE:"//*.windowBorder"> Field(Attribute::value)
<[11]ATTVALUE:"//*.windowBorder"> EndObject()
<[16]ATTVALUE:"//*.windowBorder"> Field(Element::attributes)
<[18]ELEMENT_OPEN:<> DelayFieldAssignment()
<[18]ELEMENT_OPEN:<> BeginObject(Element)
<[19]NAME:att.Color-bind> Token()
<[19]NAME:att.Color-bind> Field(Element::name)
<[21]CDATA:<![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>> DelayFieldAssignment()
<[21]CDATA:<![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>> BeginObject(CData)
<[21]CDATA:<![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>> Token()
<[21]CDATA:<![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>> Field(CData::content)
<[21]CDATA:<![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>> AccumulatedEoRo(1)
<[21]CDATA:<![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>> EndObject()
<[21]CDATA:<![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>> Field(Element::subNodes)
<[23]NAME:att.Color-bind> Token()
<[23]NAME:att.Color-bind> Field(Element::closingName)
<[24]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[24]ELEMENT_CLOSE:>> EndObject()
<[24]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[26]NAME:Style> Token()
<[26]NAME:Style> Field(Element::closingName)
<[27]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[27]ELEMENT_CLOSE:>> EndObject()
<[27]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[28]ELEMENT_OPEN:<> DelayFieldAssignment()
<[28]ELEMENT_OPEN:<> BeginObject(Element)
<[29]NAME:Style> Token()
<[29]NAME:Style> Field(Element::name)
<[30]NAME:ref.Path> BeginObject(Attribute)
<[30]NAME:ref.Path> Token()
<[30]NAME:ref.Path> Field(Attribute::name)
<[32]ATTVALUE:"//*.windowTitle"> Token()
<[32]ATTVALUE:"//*.windowTitle"> Field(Attribute::value)
<[27]ATTVALUE:"//*.windowTitle"> EndObject()
<[32]ATTVALUE:"//*.windowTitle"> Field(Element::attributes)
<[34]ELEMENT_OPEN:<> DelayFieldAssignment()
<[34]ELEMENT_OPEN:<> BeginObject(Element)
<[35]NAME:att.Color-bind> Token()
<[35]NAME:att.Color-bind> Field(Element::name)
<[37]CDATA:<![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>> DelayFieldAssignment()
<[37]CDATA:<![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>> BeginObject(CData)
<[37]CDATA:<![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>> Token()
<[37]CDATA:<![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>> Field(CData::content)
<[37]CDATA:<![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>> AccumulatedEoRo(1)
<[37]CDATA:<![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>> EndObject()
<[37]CDATA:<![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>> Field(Element::subNodes)
<[39]NAME:att.Color-bind> Token()
<[39]NAME:att.Color-bind> Field(Element::closingName)
<[40]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[40]ELEMENT_CLOSE:>> EndObject()
<[40]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[42]NAME:Style> Token()
<[42]NAME:Style> Field(Element::closingName)
<[43]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[43]ELEMENT_CLOSE:>> EndObject()
<[43]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[44]ELEMENT_OPEN:<> DelayFieldAssignment()
<[44]ELEMENT_OPEN:<> BeginObject(Element)
<[45]NAME:Style> Token()
<[45]NAME:Style> Field(Element::name)
<[46]NAME:ref.Path> BeginObject(Attribute)
<[46]NAME:ref.Path> Token()
<[46]NAME:ref.Path> Field(Attribute::name)
<[48]ATTVALUE:"//*.buttonBackground"> Token()
<[48]ATTVALUE:"//*.buttonBackground"> Field(Attribute::value)
<[43]ATTVALUE:"//*.buttonBackground"> EndObject()
<[48]ATTVALUE:"//*.buttonBackground"> Field(Element::attributes)
<[50]ELEMENT_OPEN:<> DelayFieldAssignment()
<[50]ELEMENT_OPEN:<> BeginObject(Element)
<[51]NAME:att.Color-bind> Token()
<[51]NAME:att.Color-bind> Field(Element::name)
<[53]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>> DelayFieldAssignment()
<[53]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>> BeginObject(CData)
<[53]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>> Token()
<[53]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>> Field(CData::content)
<[53]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>> AccumulatedEoRo(1)
<[53]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>> EndObject()
<[53]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>> Field(Element::subNodes)
<[55]NAME:att.Color-bind> Token()
<[55]NAME:att.Color-bind> Field(Element::closingName)
<[56]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[56]ELEMENT_CLOSE:>> EndObject()
<[56]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[58]NAME:Style> Token()
<[58]NAME:Style> Field(Element::closingName)
<[59]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[59]ELEMENT_CLOSE:>> EndObject()
<[59]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[60]ELEMENT_OPEN:<> DelayFieldAssignment()
<[60]ELEMENT_OPEN:<> BeginObject(Element)
<[61]NAME:Style> Token()
<[61]NAME:Style> Field(Element::name)
<[62]NAME:ref.Path> BeginObject(Attribute)
<[62]NAME:ref.Path> Token()
<[62]NAME:ref.Path> Field(Attribute::name)
<[64]ATTVALUE:"//*.buttonBorder"> Token()
<[64]ATTVALUE:"//*.buttonBorder"> Field(Attribute::value)
<[59]ATTVALUE:"//*.buttonBorder"> EndObject()
<[64]ATTVALUE:"//*.buttonBorder"> Field(Element::attributes)
<[66]ELEMENT_OPEN:<> DelayFieldAssignment()
<[66]ELEMENT_OPEN:<> BeginObject(Element)
<[67]NAME:att.Color-bind> Token()
<[67]NAME:att.Color-bind> Field(Element::name)
<[69]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>> DelayFieldAssignment()
<[69]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>> BeginObject(CData)
<[69]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Token()
<[69]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Field(CData::content)
<[69]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>> AccumulatedEoRo(1)
<[69]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>> EndObject()
<[69]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Field(Element::subNodes)
<[71]NAME:att.Color-bind> Token()
<[71]NAME:att.Color-bind> Field(Element::closingName)
<[72]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[72]ELEMENT_CLOSE:>> EndObject()
<[72]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[74]NAME:Style> Token()
<[74]NAME:Style> Field(Element::closingName)
<[75]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[75]ELEMENT_CLOSE:>> EndObject()
<[75]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[76]ELEMENT_OPEN:<> DelayFieldAssignment()
<[76]ELEMENT_OPEN:<> BeginObject(Element)
<[77]NAME:Style> Token()
<[77]NAME:Style> Field(Element::name)
<[78]NAME:ref.Path> BeginObject(Attribute)
<[78]NAME:ref.Path> Token()
<[78]NAME:ref.Path> Field(Attribute::name)
<[80]ATTVALUE:"//*.buttonText"> Token()
<[80]ATTVALUE:"//*.buttonText"> Field(Attribute::value)
<[75]ATTVALUE:"//*.buttonText"> EndObject()
<[80]ATTVALUE:"//*.buttonText"> Field(Element::attributes)
<[82]ELEMENT_OPEN:<> DelayFieldAssignment()
<[82]ELEMENT_OPEN:<> BeginObject(Element)
<[83]NAME:att.Color-bind> Token()
<[83]NAME:att.Color-bind> Field(Element::name)
<[85]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>> DelayFieldAssignment()
<[85]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>> BeginObject(CData)
<[85]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>> Token()
<[85]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>> Field(CData::content)
<[85]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>> AccumulatedEoRo(1)
<[85]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>> EndObject()
<[85]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>> Field(Element::subNodes)
<[87]NAME:att.Color-bind> Token()
<[87]NAME:att.Color-bind> Field(Element::closingName)
<[88]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[88]ELEMENT_CLOSE:>> EndObject()
<[88]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[90]NAME:Style> Token()
<[90]NAME:Style> Field(Element::closingName)
<[91]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[91]ELEMENT_CLOSE:>> EndObject()
<[91]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[92]ELEMENT_OPEN:<> DelayFieldAssignment()
<[92]ELEMENT_OPEN:<> BeginObject(Element)
<[93]NAME:Style> Token()
<[93]NAME:Style> Field(Element::name)
<[94]NAME:ref.Path> BeginObject(Attribute)
<[94]NAME:ref.Path> Token()
<[94]NAME:ref.Path> Field(Attribute::name)
<[96]ATTVALUE:"//*.listBorder"> Token()
<[96]ATTVALUE:"//*.listBorder"> Field(Attribute::value)
<[91]ATTVALUE:"//*.listBorder"> EndObject()
<[96]ATTVALUE:"//*.listBorder"> Field(Element::attributes)
<[98]ELEMENT_OPEN:<> DelayFieldAssignment()
<[98]ELEMENT_OPEN:<> BeginObject(Element)
<[99]NAME:att.Color-bind> Token()
<[99]NAME:att.Color-bind> Field(Element::name)
<[101]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> DelayFieldAssignment()
<[101]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> BeginObject(CData)
<[101]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Token()
<[101]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Field(CData::content)
<[101]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> AccumulatedEoRo(1)
<[101]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> EndObject()
<[101]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Field(Element::subNodes)
<[103]NAME:att.Color-bind> Token()
<[103]NAME:att.Color-bind> Field(Element::closingName)
<[104]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[104]ELEMENT_CLOSE:>> EndObject()
<[104]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[106]NAME:Style> Token()
<[106]NAME:Style> Field(Element::closingName)
<[107]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[107]ELEMENT_CLOSE:>> EndObject()
<[107]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[108]ELEMENT_OPEN:<> DelayFieldAssignment()
<[108]ELEMENT_OPEN:<> BeginObject(Element)
<[109]NAME:Style> Token()
<[109]NAME:Style> Field(Element::name)
<[110]NAME:ref.Path> BeginObject(Attribute)
<[110]NAME:ref.Path> Token()
<[110]NAME:ref.Path> Field(Attribute::name)
<[112]ATTVALUE:"//*.tabHeaderBackground"> Token()
<[112]ATTVALUE:"//*.tabHeaderBackground"> Field(Attribute::value)
<[107]ATTVALUE:"//*.tabHeaderBackground"> EndObject()
<[112]ATTVALUE:"//*.tabHeaderBackground"> Field(Element::attributes)
<[114]ELEMENT_OPEN:<> DelayFieldAssignment()
<[114]ELEMENT_OPEN:<> BeginObject(Element)
<[115]NAME:att.Color-bind> Token()
<[115]NAME:att.Color-bind> Field(Element::name)
<[117]CDATA:<![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>> DelayFieldAssignment()
<[117]CDATA:<![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>> BeginObject(CData)
<[117]CDATA:<![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>> Token()
<[117]CDATA:<![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>> Field(CData::content)
<[117]CDATA:<![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>> AccumulatedEoRo(1)
<[117]CDATA:<![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>> EndObject()
<[117]CDATA:<![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>> Field(Element::subNodes)
<[119]NAME:att.Color-bind> Token()
<[119]NAME:att.Color-bind> Field(Element::closingName)
<[120]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[120]ELEMENT_CLOSE:>> EndObject()
<[120]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[122]NAME:Style> Token()
<[122]NAME:Style> Field(Element::closingName)
<[123]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[123]ELEMENT_CLOSE:>> EndObject()
<[123]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[124]ELEMENT_OPEN:<> DelayFieldAssignment()
<[124]ELEMENT_OPEN:<> BeginObject(Element)
<[125]NAME:Style> Token()
<[125]NAME:Style> Field(Element::name)
<[126]NAME:ref.Path> BeginObject(Attribute)
<[126]NAME:ref.Path> Token()
<[126]NAME:ref.Path> Field(Attribute::name)
<[128]ATTVALUE:"//*.tabHeaderBottomLine"> Token()
<[128]ATTVALUE:"//*.tabHeaderBottomLine"> Field(Attribute::value)
<[123]ATTVALUE:"//*.tabHeaderBottomLine"> EndObject()
<[128]ATTVALUE:"//*.tabHeaderBottomLine"> Field(Element::attributes)
<[130]ELEMENT_OPEN:<> DelayFieldAssignment()
<[130]ELEMENT_OPEN:<> BeginObject(Element)
<[131]NAME:att.Color-bind> Token()
<[131]NAME:att.Color-bind> Field(Element::name)
<[133]CDATA:<![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>> DelayFieldAssignment()
<[133]CDATA:<![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>> BeginObject(CData)
<[133]CDATA:<![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>> Token()
<[133]CDATA:<![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>> Field(CData::content)
<[133]CDATA:<![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>> AccumulatedEoRo(1)
<[133]CDATA:<![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>> EndObject()
<[133]CDATA:<![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>> Field(Element::subNodes)
<[135]NAME:att.Color-bind> Token()
<[135]NAME:att.Color-bind> Field(Element::closingName)
<[136]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[136]ELEMENT_CLOSE:>> EndObject()
<[136]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[138]NAME:Style> Token()
<[138]NAME:Style> Field(Element::closingName)
<[139]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[139]ELEMENT_CLOSE:>> EndObject()
<[139]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[140]ELEMENT_OPEN:<> DelayFieldAssignment()
<[140]ELEMENT_OPEN:<> BeginObject(Element)
<[141]NAME:Style> Token()
<[141]NAME:Style> Field(Element::name)
<[142]NAME:ref.Path> BeginObject(Attribute)
<[142]NAME:ref.Path> Token()
<[142]NAME:ref.Path> Field(Attribute::name)
<[144]ATTVALUE:"//*.tabDropdownBackground"> Token()
<[144]ATTVALUE:"//*.tabDropdownBackground"> Field(Attribute::value)
<[139]ATTVALUE:"//*.tabDropdownBackground"> EndObject()
<[144]ATTVALUE:"//*.tabDropdownBackground"> Field(Element::attributes)
<[146]ELEMENT_OPEN:<> DelayFieldAssignment()
<[146]ELEMENT_OPEN:<> BeginObject(Element)
<[147]NAME:att.Color-bind> Token()
<[147]NAME:att.Color-bind> Field(Element::name)
<[149]CDATA:<![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>> DelayFieldAssignment()
<[149]CDATA:<![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>> BeginObject(CData)
<[149]CDATA:<![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>> Token()
<[149]CDATA:<![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>> Field(CData::content)
<[149]CDATA:<![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>> AccumulatedEoRo(1)
<[149]CDATA:<![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>> EndObject()
<[149]CDATA:<![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>> Field(Element::subNodes)
<[151]NAME:att.Color-bind> Token()
<[151]NAME:att.Color-bind> Field(Element::closingName)
<[152]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[152]ELEMENT_CLOSE:>> EndObject()
<[152]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[154]NAME:Style> Token()
<[154]NAME:Style> Field(Element::closingName)
<[155]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[155]ELEMENT_CLOSE:>> EndObject()
<[155]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[156]ELEMENT_OPEN:<> DelayFieldAssignment()
<[156]ELEMENT_OPEN:<> BeginObject(Element)
<[157]NAME:Style> Token()
<[157]NAME:Style> Field(Element::name)
<[158]NAME:ref.Path> BeginObject(Attribute)
<[158]NAME:ref.Path> Token()
<[158]NAME:ref.Path> Field(Attribute::name)
<[160]ATTVALUE:"//*.controlText"> Token()
<[160]ATTVALUE:"//*.controlText"> Field(Attribute::value)
<[155]ATTVALUE:"//*.controlText"> EndObject()
<[160]ATTVALUE:"//*.controlText"> Field(Element::attributes)
<[162]ELEMENT_OPEN:<> DelayFieldAssignment()
<[162]ELEMENT_OPEN:<> BeginObject(Element)
<[163]NAME:att.Color-bind> Token()
<[163]NAME:att.Color-bind> Field(Element::name)
<[165]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>> DelayFieldAssignment()
<[165]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>> BeginObject(CData)
<[165]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>> Token()
<[165]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>> Field(CData::content)
<[165]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>> AccumulatedEoRo(1)
<[165]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>> EndObject()
<[165]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>> Field(Element::subNodes)
<[167]NAME:att.Color-bind> Token()
<[167]NAME:att.Color-bind> Field(Element::closingName)
<[168]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[168]ELEMENT_CLOSE:>> EndObject()
<[168]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[170]NAME:Style> Token()
<[170]NAME:Style> Field(Element::closingName)
<[171]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[171]ELEMENT_CLOSE:>> EndObject()
<[171]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[172]ELEMENT_OPEN:<> DelayFieldAssignment()
<[172]ELEMENT_OPEN:<> BeginObject(Element)
<[173]NAME:Style> Token()
<[173]NAME:Style> Field(Element::name)
<[174]NAME:ref.Path> BeginObject(Attribute)
<[174]NAME:ref.Path> Token()
<[174]NAME:ref.Path> Field(Attribute::name)
<[176]ATTVALUE:"//*.controlBorder"> Token()
<[176]ATTVALUE:"//*.controlBorder"> Field(Attribute::value)
<[171]ATTVALUE:"//*.controlBorder"> EndObject()
<[176]ATTVALUE:"//*.controlBorder"> Field(Element::attributes)
<[178]ELEMENT_OPEN:<> DelayFieldAssignment()
<[178]ELEMENT_OPEN:<> BeginObject(Element)
<[179]NAME:att.Color-bind> Token()
<[179]NAME:att.Color-bind> Field(Element::name)
<[181]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> DelayFieldAssignment()
<[181]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> BeginObject(CData)
<[181]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Token()
<[181]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Field(CData::content)
<[181]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> AccumulatedEoRo(1)
<[181]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> EndObject()
<[181]CDATA:<![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>> Field(Element::subNodes)
<[183]NAME:att.Color-bind> Token()
<[183]NAME:att.Color-bind> Field(Element::closingName)
<[184]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[184]ELEMENT_CLOSE:>> EndObject()
<[184]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[186]NAME:Style> Token()
<[186]NAME:Style> Field(Element::closingName)
<[187]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[187]ELEMENT_CLOSE:>> EndObject()
<[187]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[188]ELEMENT_OPEN:<> DelayFieldAssignment()
<[188]ELEMENT_OPEN:<> BeginObject(Element)
<[189]NAME:Style> Token()
<[189]NAME:Style> Field(Element::name)
<[190]NAME:ref.Path> BeginObject(Attribute)
<[190]NAME:ref.Path> Token()
<[190]NAME:ref.Path> Field(Attribute::name)
<[192]ATTVALUE:"//*.scrollArrowColor"> Token()
<[192]ATTVALUE:"//*.scrollArrowColor"> Field(Attribute::value)
<[187]ATTVALUE:"//*.scrollArrowColor"> EndObject()
<[192]ATTVALUE:"//*.scrollArrowColor"> Field(Element::attributes)
<[194]ELEMENT_OPEN:<> DelayFieldAssignment()
<[194]ELEMENT_OPEN:<> BeginObject(Element)
<[195]NAME:att.Color-bind> Token()
<[195]NAME:att.Color-bind> Field(Element::name)
<[197]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[197]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[197]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Token()
<[197]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[197]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[197]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> EndObject()
<[197]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[199]NAME:att.Color-bind> Token()
<[199]NAME:att.Color-bind> Field(Element::closingName)
<[200]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[200]ELEMENT_CLOSE:>> EndObject()
<[200]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[202]NAME:Style> Token()
<[202]NAME:Style> Field(Element::closingName)
<[203]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[203]ELEMENT_CLOSE:>> EndObject()
<[203]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[204]ELEMENT_OPEN:<> DelayFieldAssignment()
<[204]ELEMENT_OPEN:<> BeginObject(Element)
<[205]NAME:Style> Token()
<[205]NAME:Style> Field(Element::name)
<[206]NAME:ref.Path> BeginObject(Attribute)
<[206]NAME:ref.Path> Token()
<[206]NAME:ref.Path> Field(Attribute::name)
<[208]ATTVALUE:"//*.scrollArrow"> Token()
<[208]ATTVALUE:"//*.scrollArrow"> Field(Attribute::value)
<[203]ATTVALUE:"//*.scrollArrow"> EndObject()
<[208]ATTVALUE:"//*.scrollArrow"> Field(Element::attributes)
<[210]ELEMENT_OPEN:<> DelayFieldAssignment()
<[210]ELEMENT_OPEN:<> BeginObject(Element)
<[211]NAME:att.BorderColor-bind> Token()
<[211]NAME:att.BorderColor-bind> Field(Element::name)
<[213]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[213]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[213]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Token()
<[213]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[213]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[213]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> EndObject()
<[213]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[215]NAME:att.BorderColor-bind> Token()
<[215]NAME:att.BorderColor-bind> Field(Element::closingName)
<[216]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[216]ELEMENT_CLOSE:>> EndObject()
<[216]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[217]ELEMENT_OPEN:<> DelayFieldAssignment()
<[217]ELEMENT_OPEN:<> BeginObject(Element)
<[218]NAME:att.BackgroundColor-bind> Token()
<[218]NAME:att.BackgroundColor-bind> Field(Element::name)
<[220]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[220]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[220]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Token()
<[220]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[220]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[220]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> EndObject()
<[220]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[222]NAME:att.BackgroundColor-bind> Token()
<[222]NAME:att.BackgroundColor-bind> Field(Element::closingName)
<[223]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[223]ELEMENT_CLOSE:>> EndObject()
<[223]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[225]NAME:Style> Token()
<[225]NAME:Style> Field(Element::closingName)
<[226]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[226]ELEMENT_CLOSE:>> EndObject()
<[226]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[227]ELEMENT_OPEN:<> DelayFieldAssignment()
<[227]ELEMENT_OPEN:<> BeginObject(Element)
<[228]NAME:Style> Token()
<[228]NAME:Style> Field(Element::name)
<[229]NAME:ref.Path> BeginObject(Attribute)
<[229]NAME:ref.Path> Token()
<[229]NAME:ref.Path> Field(Attribute::name)
<[231]ATTVALUE:"//*.scrollHandle"> Token()
<[231]ATTVALUE:"//*.scrollHandle"> Field(Attribute::value)
<[226]ATTVALUE:"//*.scrollHandle"> EndObject()
<[231]ATTVALUE:"//*.scrollHandle"> Field(Element::attributes)
<[233]ELEMENT_OPEN:<> DelayFieldAssignment()
<[233]ELEMENT_OPEN:<> BeginObject(Element)
<[234]NAME:att.Color-bind> Token()
<[234]NAME:att.Color-bind> Field(Element::name)
<[236]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>> DelayFieldAssignment()
<[236]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>> BeginObject(CData)
<[236]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>> Token()
<[236]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>> Field(CData::content)
<[236]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>> AccumulatedEoRo(1)
<[236]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>> EndObject()
<[236]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>> Field(Element::subNodes)
<[238]NAME:att.Color-bind> Token()
<[238]NAME:att.Color-bind> Field(Element::closingName)
<[239]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[239]ELEMENT_CLOSE:>> EndObject()
<[239]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[241]NAME:Style> Token()
<[241]NAME:Style> Field(Element::closingName)
<[242]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[242]ELEMENT_CLOSE:>> EndObject()
<[242]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[243]ELEMENT_OPEN:<> DelayFieldAssignment()
<[243]ELEMENT_OPEN:<> BeginObject(Element)
<[244]NAME:Style> Token()
<[244]NAME:Style> Field(Element::name)
<[245]NAME:ref.Path> BeginObject(Attribute)
<[245]NAME:ref.Path> Token()
<[245]NAME:ref.Path> Field(Attribute::name)
<[247]ATTVALUE:"//*.itemBackground"> Token()
<[247]ATTVALUE:"//*.itemBackground"> Field(Attribute::value)
<[242]ATTVALUE:"//*.itemBackground"> EndObject()
<[247]ATTVALUE:"//*.itemBackground"> Field(Element::attributes)
<[249]ELEMENT_OPEN:<> DelayFieldAssignment()
<[249]ELEMENT_OPEN:<> BeginObject(Element)
<[250]NAME:att.Color-bind> Token()
<[250]NAME:att.Color-bind> Field(Element::name)
<[252]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[252]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[252]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>> Token()
<[252]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[252]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[252]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>> EndObject()
<[252]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[254]NAME:att.Color-bind> Token()
<[254]NAME:att.Color-bind> Field(Element::closingName)
<[255]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[255]ELEMENT_CLOSE:>> EndObject()
<[255]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[257]NAME:Style> Token()
<[257]NAME:Style> Field(Element::closingName)
<[258]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[258]ELEMENT_CLOSE:>> EndObject()
<[258]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[259]ELEMENT_OPEN:<> DelayFieldAssignment()
<[259]ELEMENT_OPEN:<> BeginObject(Element)
<[260]NAME:Style> Token()
<[260]NAME:Style> Field(Element::name)
<[261]NAME:ref.Path> BeginObject(Attribute)
<[261]NAME:ref.Path> Token()
<[261]NAME:ref.Path> Field(Attribute::name)
<[263]ATTVALUE:"//*.toolstripBackground"> Token()
<[263]ATTVALUE:"//*.toolstripBackground"> Field(Attribute::value)
<[258]ATTVALUE:"//*.toolstripBackground"> EndObject()
<[263]ATTVALUE:"//*.toolstripBackground"> Field(Element::attributes)
<[265]ELEMENT_OPEN:<> DelayFieldAssignment()
<[265]ELEMENT_OPEN:<> BeginObject(Element)
<[266]NAME:att.Color-bind> Token()
<[266]NAME:att.Color-bind> Field(Element::name)
<[268]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[268]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[268]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Token()
<[268]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[268]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[268]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> EndObject()
<[268]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[270]NAME:att.Color-bind> Token()
<[270]NAME:att.Color-bind> Field(Element::closingName)
<[271]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[271]ELEMENT_CLOSE:>> EndObject()
<[271]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[273]NAME:Style> Token()
<[273]NAME:Style> Field(Element::closingName)
<[274]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[274]ELEMENT_CLOSE:>> EndObject()
<[274]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[275]ELEMENT_OPEN:<> DelayFieldAssignment()
<[275]ELEMENT_OPEN:<> BeginObject(Element)
<[276]NAME:Style> Token()
<[276]NAME:Style> Field(Element::name)
<[277]NAME:ref.Path> BeginObject(Attribute)
<[277]NAME:ref.Path> Token()
<[277]NAME:ref.Path> Field(Attribute::name)
<[279]ATTVALUE:"//*.toolstripBorder"> Token()
<[279]ATTVALUE:"//*.toolstripBorder"> Field(Attribute::value)
<[274]ATTVALUE:"//*.toolstripBorder"> EndObject()
<[279]ATTVALUE:"//*.toolstripBorder"> Field(Element::attributes)
<[281]ELEMENT_OPEN:<> DelayFieldAssignment()
<[281]ELEMENT_OPEN:<> BeginObject(Element)
<[282]NAME:att.Color-bind> Token()
<[282]NAME:att.Color-bind> Field(Element::name)
<[284]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>> DelayFieldAssignment()
<[284]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>> BeginObject(CData)
<[284]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>> Token()
<[284]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>> Field(CData::content)
<[284]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>> AccumulatedEoRo(1)
<[284]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>> EndObject()
<[284]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>> Field(Element::subNodes)
<[286]NAME:att.Color-bind> Token()
<[286]NAME:att.Color-bind> Field(Element::closingName)
<[287]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[287]ELEMENT_CLOSE:>> EndObject()
<[287]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[289]NAME:Style> Token()
<[289]NAME:Style> Field(Element::closingName)
<[290]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[290]ELEMENT_CLOSE:>> EndObject()
<[290]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[291]ELEMENT_OPEN:<> DelayFieldAssignment()
<[291]ELEMENT_OPEN:<> BeginObject(Element)
<[292]NAME:Style> Token()
<[292]NAME:Style> Field(Element::name)
<[293]NAME:ref.Path> BeginObject(Attribute)
<[293]NAME:ref.Path> Token()
<[293]NAME:ref.Path> Field(Attribute::name)
<[295]ATTVALUE:"//*.toolstripArrow"> Token()
<[295]ATTVALUE:"//*.toolstripArrow"> Field(Attribute::value)
<[290]ATTVALUE:"//*.toolstripArrow"> EndObject()
<[295]ATTVALUE:"//*.toolstripArrow"> Field(Element::attributes)
<[297]ELEMENT_OPEN:<> DelayFieldAssignment()
<[297]ELEMENT_OPEN:<> BeginObject(Element)
<[298]NAME:att.BorderColor-bind> Token()
<[298]NAME:att.BorderColor-bind> Field(Element::name)
<[300]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[300]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[300]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Token()
<[300]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[300]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[300]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> EndObject()
<[300]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[302]NAME:att.BorderColor-bind> Token()
<[302]NAME:att.BorderColor-bind> Field(Element::closingName)
<[303]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[303]ELEMENT_CLOSE:>> EndObject()
<[303]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[304]ELEMENT_OPEN:<> DelayFieldAssignment()
<[304]ELEMENT_OPEN:<> BeginObject(Element)
<[305]NAME:att.BackgroundColor-bind> Token()
<[305]NAME:att.BackgroundColor-bind> Field(Element::name)
<[307]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[307]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[307]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Token()
<[307]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[307]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[307]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> EndObject()
<[307]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[309]NAME:att.BackgroundColor-bind> Token()
<[309]NAME:att.BackgroundColor-bind> Field(Element::closingName)
<[310]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[310]ELEMENT_CLOSE:>> EndObject()
<[310]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[312]NAME:Style> Token()
<[312]NAME:Style> Field(Element::closingName)
<[313]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[313]ELEMENT_CLOSE:>> EndObject()
<[313]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[314]ELEMENT_OPEN:<> DelayFieldAssignment()
<[314]ELEMENT_OPEN:<> BeginObject(Element)
<[315]NAME:Style> Token()
<[315]NAME:Style> Field(Element::name)
<[316]NAME:ref.Path> BeginObject(Attribute)
<[316]NAME:ref.Path> Token()
<[316]NAME:ref.Path> Field(Attribute::name)
<[318]ATTVALUE:"//*.toolstripSplitBackground"> Token()
<[318]ATTVALUE:"//*.toolstripSplitBackground"> Field(Attribute::value)
<[313]ATTVALUE:"//*.toolstripSplitBackground"> EndObject()
<[318]ATTVALUE:"//*.toolstripSplitBackground"> Field(Element::attributes)
<[320]ELEMENT_OPEN:<> DelayFieldAssignment()
<[320]ELEMENT_OPEN:<> BeginObject(Element)
<[321]NAME:att.Color-bind> Token()
<[321]NAME:att.Color-bind> Field(Element::name)
<[323]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[323]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[323]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Token()
<[323]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[323]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[323]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> EndObject()
<[323]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[325]NAME:att.Color-bind> Token()
<[325]NAME:att.Color-bind> Field(Element::closingName)
<[326]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[326]ELEMENT_CLOSE:>> EndObject()
<[326]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[328]NAME:Style> Token()
<[328]NAME:Style> Field(Element::closingName)
<[329]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[329]ELEMENT_CLOSE:>> EndObject()
<[329]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[330]ELEMENT_OPEN:<> DelayFieldAssignment()
<[330]ELEMENT_OPEN:<> BeginObject(Element)
<[331]NAME:Style> Token()
<[331]NAME:Style> Field(Element::name)
<[332]NAME:ref.Path> BeginObject(Attribute)
<[332]NAME:ref.Path> Token()
<[332]NAME:ref.Path> Field(Attribute::name)
<[334]ATTVALUE:"//*.toolstripSplitArrowBackground"> Token()
<[334]ATTVALUE:"//*.toolstripSplitArrowBackground"> Field(Attribute::value)
<[329]ATTVALUE:"//*.toolstripSplitArrowBackground"> EndObject()
<[334]ATTVALUE:"//*.toolstripSplitArrowBackground"> Field(Element::attributes)
<[336]ELEMENT_OPEN:<> DelayFieldAssignment()
<[336]ELEMENT_OPEN:<> BeginObject(Element)
<[337]NAME:att.Color-bind> Token()
<[337]NAME:att.Color-bind> Field(Element::name)
<[339]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[339]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[339]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Token()
<[339]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[339]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[339]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> EndObject()
<[339]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[341]NAME:att.Color-bind> Token()
<[341]NAME:att.Color-bind> Field(Element::closingName)
<[342]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[342]ELEMENT_CLOSE:>> EndObject()
<[342]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[344]NAME:Style> Token()
<[344]NAME:Style> Field(Element::closingName)
<[345]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[345]ELEMENT_CLOSE:>> EndObject()
<[345]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[346]ELEMENT_OPEN:<> DelayFieldAssignment()
<[346]ELEMENT_OPEN:<> BeginObject(Element)
<[347]NAME:Style> Token()
<[347]NAME:Style> Field(Element::name)
<[348]NAME:ref.Path> BeginObject(Attribute)
<[348]NAME:ref.Path> Token()
<[348]NAME:ref.Path> Field(Attribute::name)
<[350]ATTVALUE:"//*.toolstripSplitArrow"> Token()
<[350]ATTVALUE:"//*.toolstripSplitArrow"> Field(Attribute::value)
<[345]ATTVALUE:"//*.toolstripSplitArrow"> EndObject()
<[350]ATTVALUE:"//*.toolstripSplitArrow"> Field(Element::attributes)
<[352]ELEMENT_OPEN:<> DelayFieldAssignment()
<[352]ELEMENT_OPEN:<> BeginObject(Element)
<[353]NAME:att.BorderColor-bind> Token()
<[353]NAME:att.BorderColor-bind> Field(Element::name)
<[355]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[355]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[355]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Token()
<[355]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[355]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[355]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> EndObject()
<[355]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[357]NAME:att.BorderColor-bind> Token()
<[357]NAME:att.BorderColor-bind> Field(Element::closingName)
<[358]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[358]ELEMENT_CLOSE:>> EndObject()
<[358]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[359]ELEMENT_OPEN:<> DelayFieldAssignment()
<[359]ELEMENT_OPEN:<> BeginObject(Element)
<[360]NAME:att.BackgroundColor-bind> Token()
<[360]NAME:att.BackgroundColor-bind> Field(Element::name)
<[362]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[362]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[362]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Token()
<[362]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[362]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[362]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> EndObject()
<[362]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[364]NAME:att.BackgroundColor-bind> Token()
<[364]NAME:att.BackgroundColor-bind> Field(Element::closingName)
<[365]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[365]ELEMENT_CLOSE:>> EndObject()
<[365]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[367]NAME:Style> Token()
<[367]NAME:Style> Field(Element::closingName)
<[368]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[368]ELEMENT_CLOSE:>> EndObject()
<[368]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[369]ELEMENT_OPEN:<> DelayFieldAssignment()
<[369]ELEMENT_OPEN:<> BeginObject(Element)
<[370]NAME:Style> Token()
<[370]NAME:Style> Field(Element::name)
<[371]NAME:ref.Path> BeginObject(Attribute)
<[371]NAME:ref.Path> Token()
<[371]NAME:ref.Path> Field(Attribute::name)
<[373]ATTVALUE:"//*.menuBarItemBackground"> Token()
<[373]ATTVALUE:"//*.menuBarItemBackground"> Field(Attribute::value)
<[368]ATTVALUE:"//*.menuBarItemBackground"> EndObject()
<[373]ATTVALUE:"//*.menuBarItemBackground"> Field(Element::attributes)
<[375]ELEMENT_OPEN:<> DelayFieldAssignment()
<[375]ELEMENT_OPEN:<> BeginObject(Element)
<[376]NAME:att.Color-bind> Token()
<[376]NAME:att.Color-bind> Field(Element::name)
<[378]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[378]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[378]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>> Token()
<[378]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[378]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[378]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>> EndObject()
<[378]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[380]NAME:att.Color-bind> Token()
<[380]NAME:att.Color-bind> Field(Element::closingName)
<[381]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[381]ELEMENT_CLOSE:>> EndObject()
<[381]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[383]NAME:Style> Token()
<[383]NAME:Style> Field(Element::closingName)
<[384]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[384]ELEMENT_CLOSE:>> EndObject()
<[384]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[385]ELEMENT_OPEN:<> DelayFieldAssignment()
<[385]ELEMENT_OPEN:<> BeginObject(Element)
<[386]NAME:Style> Token()
<[386]NAME:Style> Field(Element::name)
<[387]NAME:ref.Path> BeginObject(Attribute)
<[387]NAME:ref.Path> Token()
<[387]NAME:ref.Path> Field(Attribute::name)
<[389]ATTVALUE:"//*.menuItemBackground"> Token()
<[389]ATTVALUE:"//*.menuItemBackground"> Field(Attribute::value)
<[384]ATTVALUE:"//*.menuItemBackground"> EndObject()
<[389]ATTVALUE:"//*.menuItemBackground"> Field(Element::attributes)
<[391]ELEMENT_OPEN:<> DelayFieldAssignment()
<[391]ELEMENT_OPEN:<> BeginObject(Element)
<[392]NAME:att.Color-bind> Token()
<[392]NAME:att.Color-bind> Field(Element::name)
<[394]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[394]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[394]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>> Token()
<[394]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[394]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[394]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>> EndObject()
<[394]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[396]NAME:att.Color-bind> Token()
<[396]NAME:att.Color-bind> Field(Element::closingName)
<[397]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[397]ELEMENT_CLOSE:>> EndObject()
<[397]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[399]NAME:Style> Token()
<[399]NAME:Style> Field(Element::closingName)
<[400]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[400]ELEMENT_CLOSE:>> EndObject()
<[400]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[401]ELEMENT_OPEN:<> DelayFieldAssignment()
<[401]ELEMENT_OPEN:<> BeginObject(Element)
<[402]NAME:Style> Token()
<[402]NAME:Style> Field(Element::name)
<[403]NAME:ref.Path> BeginObject(Attribute)
<[403]NAME:ref.Path> Token()
<[403]NAME:ref.Path> Field(Attribute::name)
<[405]ATTVALUE:"//*.menuItemArrow"> Token()
<[405]ATTVALUE:"//*.menuItemArrow"> Field(Attribute::value)
<[400]ATTVALUE:"//*.menuItemArrow"> EndObject()
<[405]ATTVALUE:"//*.menuItemArrow"> Field(Element::attributes)
<[407]ELEMENT_OPEN:<> DelayFieldAssignment()
<[407]ELEMENT_OPEN:<> BeginObject(Element)
<[408]NAME:att.BorderColor-bind> Token()
<[408]NAME:att.BorderColor-bind> Field(Element::name)
<[410]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[410]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[410]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Token()
<[410]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[410]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[410]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> EndObject()
<[410]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[412]NAME:att.BorderColor-bind> Token()
<[412]NAME:att.BorderColor-bind> Field(Element::closingName)
<[413]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[413]ELEMENT_CLOSE:>> EndObject()
<[413]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[414]ELEMENT_OPEN:<> DelayFieldAssignment()
<[414]ELEMENT_OPEN:<> BeginObject(Element)
<[415]NAME:att.BackgroundColor-bind> Token()
<[415]NAME:att.BackgroundColor-bind> Field(Element::name)
<[417]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[417]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[417]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Token()
<[417]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[417]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[417]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> EndObject()
<[417]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[419]NAME:att.BackgroundColor-bind> Token()
<[419]NAME:att.BackgroundColor-bind> Field(Element::closingName)
<[420]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[420]ELEMENT_CLOSE:>> EndObject()
<[420]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[422]NAME:Style> Token()
<[422]NAME:Style> Field(Element::closingName)
<[423]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[423]ELEMENT_CLOSE:>> EndObject()
<[423]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[424]ELEMENT_OPEN:<> DelayFieldAssignment()
<[424]ELEMENT_OPEN:<> BeginObject(Element)
<[425]NAME:Style> Token()
<[425]NAME:Style> Field(Element::name)
<[426]NAME:ref.Path> BeginObject(Attribute)
<[426]NAME:ref.Path> Token()
<[426]NAME:ref.Path> Field(Attribute::name)
<[428]ATTVALUE:"//*.comboBackground"> Token()
<[428]ATTVALUE:"//*.comboBackground"> Field(Attribute::value)
<[423]ATTVALUE:"//*.comboBackground"> EndObject()
<[428]ATTVALUE:"//*.comboBackground"> Field(Element::attributes)
<[430]ELEMENT_OPEN:<> DelayFieldAssignment()
<[430]ELEMENT_OPEN:<> BeginObject(Element)
<[431]NAME:att.Color-bind> Token()
<[431]NAME:att.Color-bind> Field(Element::name)
<[433]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>> DelayFieldAssignment()
<[433]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>> BeginObject(CData)
<[433]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>> Token()
<[433]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>> Field(CData::content)
<[433]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>> AccumulatedEoRo(1)
<[433]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>> EndObject()
<[433]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>> Field(Element::subNodes)
<[435]NAME:att.Color-bind> Token()
<[435]NAME:att.Color-bind> Field(Element::closingName)
<[436]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[436]ELEMENT_CLOSE:>> EndObject()
<[436]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[438]NAME:Style> Token()
<[438]NAME:Style> Field(Element::closingName)
<[439]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[439]ELEMENT_CLOSE:>> EndObject()
<[439]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[440]ELEMENT_OPEN:<> DelayFieldAssignment()
<[440]ELEMENT_OPEN:<> BeginObject(Element)
<[441]NAME:Style> Token()
<[441]NAME:Style> Field(Element::name)
<[442]NAME:ref.Path> BeginObject(Attribute)
<[442]NAME:ref.Path> Token()
<[442]NAME:ref.Path> Field(Attribute::name)
<[444]ATTVALUE:"//*.comboArrowBackground"> Token()
<[444]ATTVALUE:"//*.comboArrowBackground"> Field(Attribute::value)
<[439]ATTVALUE:"//*.comboArrowBackground"> EndObject()
<[444]ATTVALUE:"//*.comboArrowBackground"> Field(Element::attributes)
<[446]ELEMENT_OPEN:<> DelayFieldAssignment()
<[446]ELEMENT_OPEN:<> BeginObject(Element)
<[447]NAME:att.Color-bind> Token()
<[447]NAME:att.Color-bind> Field(Element::name)
<[449]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[449]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[449]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>> Token()
<[449]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[449]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[449]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>> EndObject()
<[449]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[451]NAME:att.Color-bind> Token()
<[451]NAME:att.Color-bind> Field(Element::closingName)
<[452]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[452]ELEMENT_CLOSE:>> EndObject()
<[452]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[454]NAME:Style> Token()
<[454]NAME:Style> Field(Element::closingName)
<[455]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[455]ELEMENT_CLOSE:>> EndObject()
<[455]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[456]ELEMENT_OPEN:<> DelayFieldAssignment()
<[456]ELEMENT_OPEN:<> BeginObject(Element)
<[457]NAME:Style> Token()
<[457]NAME:Style> Field(Element::name)
<[458]NAME:ref.Path> BeginObject(Attribute)
<[458]NAME:ref.Path> Token()
<[458]NAME:ref.Path> Field(Attribute::name)
<[460]ATTVALUE:"//*.comboArrow"> Token()
<[460]ATTVALUE:"//*.comboArrow"> Field(Attribute::value)
<[455]ATTVALUE:"//*.comboArrow"> EndObject()
<[460]ATTVALUE:"//*.comboArrow"> Field(Element::attributes)
<[462]ELEMENT_OPEN:<> DelayFieldAssignment()
<[462]ELEMENT_OPEN:<> BeginObject(Element)
<[463]NAME:att.BorderColor-bind> Token()
<[463]NAME:att.BorderColor-bind> Field(Element::name)
<[465]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>> DelayFieldAssignment()
<[465]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>> BeginObject(CData)
<[465]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>> Token()
<[465]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(CData::content)
<[465]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>> AccumulatedEoRo(1)
<[465]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>> EndObject()
<[465]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>> Field(Element::subNodes)
<[467]NAME:att.BorderColor-bind> Token()
<[467]NAME:att.BorderColor-bind> Field(Element::closingName)
<[468]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[468]ELEMENT_CLOSE:>> EndObject()
<[468]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[469]ELEMENT_OPEN:<> DelayFieldAssignment()
<[469]ELEMENT_OPEN:<> BeginObject(Element)
<[470]NAME:att.BackgroundColor-bind> Token()
<[470]NAME:att.BackgroundColor-bind> Field(Element::name)
<[472]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>> DelayFieldAssignment()
<[472]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>> BeginObject(CData)
<[472]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>> Token()
<[472]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>> Field(CData::content)
<[472]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>> AccumulatedEoRo(1)
<[472]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>> EndObject()
<[472]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>> Field(Element::subNodes)
<[474]NAME:att.BackgroundColor-bind> Token()
<[474]NAME:att.BackgroundColor-bind> Field(Element::closingName)
<[475]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[475]ELEMENT_CLOSE:>> EndObject()
<[475]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[477]NAME:Style> Token()
<[477]NAME:Style> Field(Element::closingName)
<[478]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[478]ELEMENT_CLOSE:>> EndObject()
<[478]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[479]ELEMENT_OPEN:<> DelayFieldAssignment()
<[479]ELEMENT_OPEN:<> BeginObject(Element)
<[480]NAME:Style> Token()
<[480]NAME:Style> Field(Element::name)
<[481]NAME:ref.Path> BeginObject(Attribute)
<[481]NAME:ref.Path> Token()
<[481]NAME:ref.Path> Field(Attribute::name)
<[483]ATTVALUE:"//*.columnHeaderBackground"> Token()
<[483]ATTVALUE:"//*.columnHeaderBackground"> Field(Attribute::value)
<[478]ATTVALUE:"//*.columnHeaderBackground"> EndObject()
<[483]ATTVALUE:"//*.columnHeaderBackground"> Field(Element::attributes)
<[485]ELEMENT_OPEN:<> DelayFieldAssignment()
<[485]ELEMENT_OPEN:<> BeginObject(Element)
<[486]NAME:att.Color-bind> Token()
<[486]NAME:att.Color-bind> Field(Element::name)
<[488]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>> DelayFieldAssignment()
<[488]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>> BeginObject(CData)
<[488]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>> Token()
<[488]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>> Field(CData::content)
<[488]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>> AccumulatedEoRo(1)
<[488]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>> EndObject()
<[488]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>> Field(Element::subNodes)
<[490]NAME:att.Color-bind> Token()
<[490]NAME:att.Color-bind> Field(Element::closingName)
<[491]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[491]ELEMENT_CLOSE:>> EndObject()
<[491]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[493]NAME:Style> Token()
<[493]NAME:Style> Field(Element::closingName)
<[494]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[494]ELEMENT_CLOSE:>> EndObject()
<[494]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[495]ELEMENT_OPEN:<> DelayFieldAssignment()
<[495]ELEMENT_OPEN:<> BeginObject(Element)
<[496]NAME:Style> Token()
<[496]NAME:Style> Field(Element::name)
<[497]NAME:ref.Path> BeginObject(Attribute)
<[497]NAME:ref.Path> Token()
<[497]NAME:ref.Path> Field(Attribute::name)
<[499]ATTVALUE:"//*.expandableArrow"> Token()
<[499]ATTVALUE:"//*.expandableArrow"> Field(Attribute::value)
<[494]ATTVALUE:"//*.expandableArrow"> EndObject()
<[499]ATTVALUE:"//*.expandableArrow"> Field(Element::attributes)
<[501]ELEMENT_OPEN:<> DelayFieldAssignment()
<[501]ELEMENT_OPEN:<> BeginObject(Element)
<[502]NAME:att.BorderColor-bind> Token()
<[502]NAME:att.BorderColor-bind> Field(Element::name)
<[504]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> DelayFieldAssignment()
<[504]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> BeginObject(CData)
<[504]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> Token()
<[504]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> Field(CData::content)
<[504]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> AccumulatedEoRo(1)
<[504]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> EndObject()
<[504]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> Field(Element::subNodes)
<[506]NAME:att.BorderColor-bind> Token()
<[506]NAME:att.BorderColor-bind> Field(Element::closingName)
<[507]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[507]ELEMENT_CLOSE:>> EndObject()
<[507]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[508]ELEMENT_OPEN:<> DelayFieldAssignment()
<[508]ELEMENT_OPEN:<> BeginObject(Element)
<[509]NAME:att.BackgroundColor-bind> Token()
<[509]NAME:att.BackgroundColor-bind> Field(Element::name)
<[511]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> DelayFieldAssignment()
<[511]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> BeginObject(CData)
<[511]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> Token()
<[511]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> Field(CData::content)
<[511]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> AccumulatedEoRo(1)
<[511]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> EndObject()
<[511]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>> Field(Element::subNodes)
<[513]NAME:att.BackgroundColor-bind> Token()
<[513]NAME:att.BackgroundColor-bind> Field(Element::closingName)
<[514]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[514]ELEMENT_CLOSE:>> EndObject()
<[514]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[516]NAME:Style> Token()
<[516]NAME:Style> Field(Element::closingName)
<[517]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[517]ELEMENT_CLOSE:>> EndObject()
<[517]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[518]ELEMENT_OPEN:<> DelayFieldAssignment()
<[518]ELEMENT_OPEN:<> BeginObject(Element)
<[519]NAME:Style> Token()
<[519]NAME:Style> Field(Element::name)
<[520]NAME:ref.Path> BeginObject(Attribute)
<[520]NAME:ref.Path> Token()
<[520]NAME:ref.Path> Field(Attribute::name)
<[522]ATTVALUE:"//*.ribbonExpandableArrow"> Token()
<[522]ATTVALUE:"//*.ribbonExpandableArrow"> Field(Attribute::value)
<[517]ATTVALUE:"//*.ribbonExpandableArrow"> EndObject()
<[522]ATTVALUE:"//*.ribbonExpandableArrow"> Field(Element::attributes)
<[524]ELEMENT_OPEN:<> DelayFieldAssignment()
<[524]ELEMENT_OPEN:<> BeginObject(Element)
<[525]NAME:att.BorderColor-bind> Token()
<[525]NAME:att.BorderColor-bind> Field(Element::name)
<[527]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>> DelayFieldAssignment()
<[527]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>> BeginObject(CData)
<[527]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>> Token()
<[527]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>> Field(CData::content)
<[527]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>> AccumulatedEoRo(1)
<[527]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>> EndObject()
<[527]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>> Field(Element::subNodes)
<[529]NAME:att.BorderColor-bind> Token()
<[529]NAME:att.BorderColor-bind> Field(Element::closingName)
<[530]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[530]ELEMENT_CLOSE:>> EndObject()
<[530]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[531]ELEMENT_OPEN:<> DelayFieldAssignment()
<[531]ELEMENT_OPEN:<> BeginObject(Element)
<[532]NAME:att.BackgroundColor-bind> Token()
<[532]NAME:att.BackgroundColor-bind> Field(Element::name)
<[534]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>> DelayFieldAssignment()
<[534]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>> BeginObject(CData)
<[534]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>> Token()
<[534]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>> Field(CData::content)
<[534]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>> AccumulatedEoRo(1)
<[534]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>> EndObject()
<[534]CDATA:<![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>> Field(Element::subNodes)
<[536]NAME:att.BackgroundColor-bind> Token()
<[536]NAME:att.BackgroundColor-bind> Field(Element::closingName)
<[537]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[537]ELEMENT_CLOSE:>> EndObject()
<[537]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[539]NAME:Style> Token()
<[539]NAME:Style> Field(Element::closingName)
<[540]ELEMENT_CLOSE:>> AccumulatedEoRo(1)
<[540]ELEMENT_CLOSE:>> EndObject()
<[540]ELEMENT_CLOSE:>> Field(Element::subNodes)
<[542]NAME:Styles> Token()
<[542]NAME:Styles> Field(Element::closingName)
<[540]ELEMENT_CLOSE:>> EndObject()
<[543]ELEMENT_CLOSE:>> Field(Document::rootElement)
<[540]ELEMENT_CLOSE:>> EndObject()
