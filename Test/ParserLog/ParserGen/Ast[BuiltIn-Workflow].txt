{
    "$ast": "AstFile",
    "types": [{
        "$ast": "Class",
        "name": "Type",
        "ambiguity": "No",
        "baseClass": "",
        "props": []
    }, {
        "$ast": "Class",
        "name": "Expression",
        "ambiguity": "No",
        "baseClass": "",
        "props": []
    }, {
        "$ast": "Class",
        "name": "Statement",
        "ambiguity": "No",
        "baseClass": "",
        "props": []
    }, {
        "$ast": "Class",
        "name": "Attribute",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "category",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "Declaration",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "attributes",
            "propType": "Array",
            "propTypeName": "Attribute"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Enum",
        "name": "FunctionKind",
        "items": [{
            "$ast": "EnumItem",
            "name": "Static"
        }, {
            "$ast": "EnumItem",
            "name": "Override"
        }, {
            "$ast": "EnumItem",
            "name": "Normal"
        }]
    }, {
        "$ast": "Enum",
        "name": "PredefinedTypeName",
        "items": [{
            "$ast": "EnumItem",
            "name": "Void"
        }, {
            "$ast": "EnumItem",
            "name": "Object"
        }, {
            "$ast": "EnumItem",
            "name": "Interface"
        }, {
            "$ast": "EnumItem",
            "name": "Int"
        }, {
            "$ast": "EnumItem",
            "name": "UInt"
        }, {
            "$ast": "EnumItem",
            "name": "Float"
        }, {
            "$ast": "EnumItem",
            "name": "Double"
        }, {
            "$ast": "EnumItem",
            "name": "String"
        }, {
            "$ast": "EnumItem",
            "name": "Char"
        }, {
            "$ast": "EnumItem",
            "name": "Bool"
        }]
    }, {
        "$ast": "Class",
        "name": "PredefinedType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Type",
            "propTypeName": "PredefinedTypeName"
        }]
    }, {
        "$ast": "Class",
        "name": "TopQualifiedType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "ReferenceType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "RawPointerType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "element",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "SharedPointerType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "element",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "NullableType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "element",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "EnumerableType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "element",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Enum",
        "name": "MapWritability",
        "items": [{
            "$ast": "EnumItem",
            "name": "Readonly"
        }, {
            "$ast": "EnumItem",
            "name": "Writable"
        }]
    }, {
        "$ast": "Class",
        "name": "MapType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "writability",
            "propType": "Type",
            "propTypeName": "MapWritability"
        }, {
            "$ast": "ClassProp",
            "name": "key",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "ObservableListType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "element",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "FunctionType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "result",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "ChildType",
        "ambiguity": "No",
        "baseClass": "Type",
        "props": [{
            "$ast": "ClassProp",
            "name": "parent",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "NamespaceDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "declarations",
            "propType": "Array",
            "propTypeName": "Declaration"
        }]
    }, {
        "$ast": "Class",
        "name": "FunctionArgument",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "attributes",
            "propType": "Array",
            "propTypeName": "Attribute"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Enum",
        "name": "FunctionAnonymity",
        "items": [{
            "$ast": "EnumItem",
            "name": "Named"
        }, {
            "$ast": "EnumItem",
            "name": "Anonymous"
        }]
    }, {
        "$ast": "Class",
        "name": "FunctionDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "functionKind",
            "propType": "Type",
            "propTypeName": "FunctionKind"
        }, {
            "$ast": "ClassProp",
            "name": "anonymity",
            "propType": "Type",
            "propTypeName": "FunctionAnonymity"
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "FunctionArgument"
        }, {
            "$ast": "ClassProp",
            "name": "returnType",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "VariableDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "EventDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "PropertyDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "getter",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "setter",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "valueChangedEvent",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Enum",
        "name": "ClassKind",
        "items": [{
            "$ast": "EnumItem",
            "name": "Class"
        }, {
            "$ast": "EnumItem",
            "name": "Interface"
        }]
    }, {
        "$ast": "Enum",
        "name": "ConstructorType",
        "items": [{
            "$ast": "EnumItem",
            "name": "Undefined"
        }, {
            "$ast": "EnumItem",
            "name": "SharedPtr"
        }, {
            "$ast": "EnumItem",
            "name": "RawPtr"
        }]
    }, {
        "$ast": "Class",
        "name": "BaseConstructorCall",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "ConstructorDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "constructorType",
            "propType": "Type",
            "propTypeName": "ConstructorType"
        }, {
            "$ast": "ClassProp",
            "name": "baseConstructorCalls",
            "propType": "Array",
            "propTypeName": "BaseConstructorCall"
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "FunctionArgument"
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "DestructorDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "ClassDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "kind",
            "propType": "Type",
            "propTypeName": "ClassKind"
        }, {
            "$ast": "ClassProp",
            "name": "constructorType",
            "propType": "Type",
            "propTypeName": "ConstructorType"
        }, {
            "$ast": "ClassProp",
            "name": "baseTypes",
            "propType": "Array",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "declarations",
            "propType": "Array",
            "propTypeName": "Declaration"
        }]
    }, {
        "$ast": "Enum",
        "name": "EnumKind",
        "items": [{
            "$ast": "EnumItem",
            "name": "Normal"
        }, {
            "$ast": "EnumItem",
            "name": "Flag"
        }]
    }, {
        "$ast": "Enum",
        "name": "EnumItemKind",
        "items": [{
            "$ast": "EnumItem",
            "name": "Constant"
        }, {
            "$ast": "EnumItem",
            "name": "Intersection"
        }]
    }, {
        "$ast": "Class",
        "name": "EnumItemIntersection",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "EnumItem",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "attributes",
            "propType": "Array",
            "propTypeName": "Attribute"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "kind",
            "propType": "Type",
            "propTypeName": "EnumItemKind"
        }, {
            "$ast": "ClassProp",
            "name": "number",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "intersections",
            "propType": "Array",
            "propTypeName": "EnumItemIntersection"
        }]
    }, {
        "$ast": "Class",
        "name": "EnumDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "kind",
            "propType": "Type",
            "propTypeName": "EnumKind"
        }, {
            "$ast": "ClassProp",
            "name": "items",
            "propType": "Array",
            "propTypeName": "EnumItem"
        }]
    }, {
        "$ast": "Class",
        "name": "StructMember",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "attributes",
            "propType": "Array",
            "propTypeName": "Attribute"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "StructDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "members",
            "propType": "Array",
            "propTypeName": "StructMember"
        }]
    }, {
        "$ast": "Class",
        "name": "VirtualCfeDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "expandedDeclarations",
            "propType": "Array",
            "propTypeName": "Declaration"
        }]
    }, {
        "$ast": "Enum",
        "name": "APConst",
        "items": [{
            "$ast": "EnumItem",
            "name": "Readonly"
        }, {
            "$ast": "EnumItem",
            "name": "Writable"
        }]
    }, {
        "$ast": "Enum",
        "name": "APObserve",
        "items": [{
            "$ast": "EnumItem",
            "name": "Observable"
        }, {
            "$ast": "EnumItem",
            "name": "NotObservable"
        }]
    }, {
        "$ast": "Class",
        "name": "AutoPropertyDeclaration",
        "ambiguity": "No",
        "baseClass": "VirtualCfeDeclaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "functionKind",
            "propType": "Type",
            "propTypeName": "FunctionKind"
        }, {
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "configConst",
            "propType": "Type",
            "propTypeName": "APConst"
        }, {
            "$ast": "ClassProp",
            "name": "configObserve",
            "propType": "Type",
            "propTypeName": "APObserve"
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "CastResultInterfaceDeclaration",
        "ambiguity": "No",
        "baseClass": "VirtualCfeDeclaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "baseType",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "elementType",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "VirtualCseDeclaration",
        "ambiguity": "No",
        "baseClass": "Declaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "expandedDeclarations",
            "propType": "Array",
            "propTypeName": "Declaration"
        }]
    }, {
        "$ast": "Class",
        "name": "StateInput",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "FunctionArgument"
        }]
    }, {
        "$ast": "Class",
        "name": "StateDeclaration",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "FunctionArgument"
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "StateMachineDeclaration",
        "ambiguity": "No",
        "baseClass": "VirtualCseDeclaration",
        "props": [{
            "$ast": "ClassProp",
            "name": "inputs",
            "propType": "Array",
            "propTypeName": "StateInput"
        }, {
            "$ast": "ClassProp",
            "name": "states",
            "propType": "Array",
            "propTypeName": "StateDeclaration"
        }]
    }, {
        "$ast": "Class",
        "name": "BreakStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": []
    }, {
        "$ast": "Class",
        "name": "ContinueStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": []
    }, {
        "$ast": "Class",
        "name": "ReturnStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "DeleteStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "RaiseExceptionStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "IfStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "trueBranch",
            "propType": "Type",
            "propTypeName": "Statement"
        }, {
            "$ast": "ClassProp",
            "name": "falseBranch",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "WhileStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "condition",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "TryStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "protectedStatement",
            "propType": "Type",
            "propTypeName": "Statement"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "catchStatement",
            "propType": "Type",
            "propTypeName": "Statement"
        }, {
            "$ast": "ClassProp",
            "name": "finallyStatement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "BlockStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "statements",
            "propType": "Array",
            "propTypeName": "Statement"
        }, {
            "$ast": "ClassProp",
            "name": "endLabel",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "GotoStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "label",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "VariableStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "variable",
            "propType": "Type",
            "propTypeName": "VariableDeclaration"
        }]
    }, {
        "$ast": "Class",
        "name": "ExpressionStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "VirtualCseStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": [{
            "$ast": "ClassProp",
            "name": "expandedStatement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Enum",
        "name": "ForEachDirection",
        "items": [{
            "$ast": "EnumItem",
            "name": "Normal"
        }, {
            "$ast": "EnumItem",
            "name": "Reversed"
        }]
    }, {
        "$ast": "Class",
        "name": "ForEachStatement",
        "ambiguity": "No",
        "baseClass": "VirtualCseStatement",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "direction",
            "propType": "Type",
            "propTypeName": "ForEachDirection"
        }, {
            "$ast": "ClassProp",
            "name": "collection",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "SwitchCase",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "SwitchStatement",
        "ambiguity": "No",
        "baseClass": "VirtualCseStatement",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "caseBranches",
            "propType": "Array",
            "propTypeName": "SwitchCase"
        }, {
            "$ast": "ClassProp",
            "name": "defaultBranch",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "CoProviderStatement",
        "ambiguity": "No",
        "baseClass": "VirtualCseStatement",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "CoroutineStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": []
    }, {
        "$ast": "Class",
        "name": "CoPauseStatement",
        "ambiguity": "No",
        "baseClass": "CoroutineStatement",
        "props": [{
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "CoOperatorStatement",
        "ambiguity": "No",
        "baseClass": "CoroutineStatement",
        "props": [{
            "$ast": "ClassProp",
            "name": "varName",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "opName",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Enum",
        "name": "StateSwitchType",
        "items": [{
            "$ast": "EnumItem",
            "name": "Default"
        }, {
            "$ast": "EnumItem",
            "name": "Pass"
        }, {
            "$ast": "EnumItem",
            "name": "PassAndReturn"
        }, {
            "$ast": "EnumItem",
            "name": "Ignore"
        }, {
            "$ast": "EnumItem",
            "name": "IgnoreAndReturn"
        }]
    }, {
        "$ast": "Enum",
        "name": "StateInvokeType",
        "items": [{
            "$ast": "EnumItem",
            "name": "Goto"
        }, {
            "$ast": "EnumItem",
            "name": "Push"
        }]
    }, {
        "$ast": "Class",
        "name": "StateMachineStatement",
        "ambiguity": "No",
        "baseClass": "Statement",
        "props": []
    }, {
        "$ast": "Class",
        "name": "StateSwitchArgument",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "StateSwitchCase",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "StateSwitchArgument"
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "StateSwitchStatement",
        "ambiguity": "No",
        "baseClass": "StateMachineStatement",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "StateSwitchType"
        }, {
            "$ast": "ClassProp",
            "name": "caseBranches",
            "propType": "Array",
            "propTypeName": "StateSwitchCase"
        }]
    }, {
        "$ast": "Class",
        "name": "StateInvokeStatement",
        "ambiguity": "No",
        "baseClass": "StateMachineStatement",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "StateInvokeType"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "ThisExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": []
    }, {
        "$ast": "Class",
        "name": "TopQualifiedExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "ReferenceExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "OrderedNameExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "OrderedLambdaExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "body",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "MemberExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "parent",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "ChildExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "parent",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Enum",
        "name": "LiteralValue",
        "items": [{
            "$ast": "EnumItem",
            "name": "Null"
        }, {
            "$ast": "EnumItem",
            "name": "True"
        }, {
            "$ast": "EnumItem",
            "name": "False"
        }]
    }, {
        "$ast": "Class",
        "name": "LiteralExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Type",
            "propTypeName": "LiteralValue"
        }]
    }, {
        "$ast": "Class",
        "name": "FloatingExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "IntegerExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "StringExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Enum",
        "name": "UnaryOperator",
        "items": [{
            "$ast": "EnumItem",
            "name": "Positive"
        }, {
            "$ast": "EnumItem",
            "name": "Negative"
        }, {
            "$ast": "EnumItem",
            "name": "Not"
        }]
    }, {
        "$ast": "Class",
        "name": "UnaryExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "op",
            "propType": "Type",
            "propTypeName": "UnaryOperator"
        }, {
            "$ast": "ClassProp",
            "name": "operand",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Enum",
        "name": "BinaryOperator",
        "items": [{
            "$ast": "EnumItem",
            "name": "Assign"
        }, {
            "$ast": "EnumItem",
            "name": "Index"
        }, {
            "$ast": "EnumItem",
            "name": "FlagAnd"
        }, {
            "$ast": "EnumItem",
            "name": "FlagOr"
        }, {
            "$ast": "EnumItem",
            "name": "FailedThen"
        }, {
            "$ast": "EnumItem",
            "name": "Exp"
        }, {
            "$ast": "EnumItem",
            "name": "Add"
        }, {
            "$ast": "EnumItem",
            "name": "Sub"
        }, {
            "$ast": "EnumItem",
            "name": "Mul"
        }, {
            "$ast": "EnumItem",
            "name": "Div"
        }, {
            "$ast": "EnumItem",
            "name": "Mod"
        }, {
            "$ast": "EnumItem",
            "name": "Shl"
        }, {
            "$ast": "EnumItem",
            "name": "Shr"
        }, {
            "$ast": "EnumItem",
            "name": "LT"
        }, {
            "$ast": "EnumItem",
            "name": "GT"
        }, {
            "$ast": "EnumItem",
            "name": "LE"
        }, {
            "$ast": "EnumItem",
            "name": "GE"
        }, {
            "$ast": "EnumItem",
            "name": "EQ"
        }, {
            "$ast": "EnumItem",
            "name": "NE"
        }, {
            "$ast": "EnumItem",
            "name": "Xor"
        }, {
            "$ast": "EnumItem",
            "name": "And"
        }, {
            "$ast": "EnumItem",
            "name": "Or"
        }]
    }, {
        "$ast": "Class",
        "name": "BinaryExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "op",
            "propType": "Type",
            "propTypeName": "BinaryOperator"
        }, {
            "$ast": "ClassProp",
            "name": "first",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "second",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "LetVariable",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "LetExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "variables",
            "propType": "Array",
            "propTypeName": "LetVariable"
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "IfExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "condition",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "trueBranch",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "falseBranch",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Enum",
        "name": "RangeBoundary",
        "items": [{
            "$ast": "EnumItem",
            "name": "Inclusive"
        }, {
            "$ast": "EnumItem",
            "name": "Exclusive"
        }]
    }, {
        "$ast": "Class",
        "name": "RangeExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "begin",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "beginBoundary",
            "propType": "Type",
            "propTypeName": "RangeBoundary"
        }, {
            "$ast": "ClassProp",
            "name": "end",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "endBoundary",
            "propType": "Type",
            "propTypeName": "RangeBoundary"
        }]
    }, {
        "$ast": "Enum",
        "name": "SetTesting",
        "items": [{
            "$ast": "EnumItem",
            "name": "In"
        }, {
            "$ast": "EnumItem",
            "name": "NotIn"
        }]
    }, {
        "$ast": "Class",
        "name": "SetTestingExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "test",
            "propType": "Type",
            "propTypeName": "SetTesting"
        }, {
            "$ast": "ClassProp",
            "name": "element",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "collection",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "ConstructorArgument",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "key",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "ConstructorExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "ConstructorArgument"
        }]
    }, {
        "$ast": "Class",
        "name": "InferExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Enum",
        "name": "TypeCastingStrategy",
        "items": [{
            "$ast": "EnumItem",
            "name": "Strong"
        }, {
            "$ast": "EnumItem",
            "name": "Weak"
        }]
    }, {
        "$ast": "Class",
        "name": "TypeCastingExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "strategy",
            "propType": "Type",
            "propTypeName": "TypeCastingStrategy"
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Enum",
        "name": "TypeTesting",
        "items": [{
            "$ast": "EnumItem",
            "name": "IsType"
        }, {
            "$ast": "EnumItem",
            "name": "IsNotType"
        }, {
            "$ast": "EnumItem",
            "name": "IsNull"
        }, {
            "$ast": "EnumItem",
            "name": "IsNotNull"
        }]
    }, {
        "$ast": "Class",
        "name": "TypeTestingExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "test",
            "propType": "Type",
            "propTypeName": "TypeTesting"
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "TypeOfTypeExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }]
    }, {
        "$ast": "Class",
        "name": "TypeOfExpressionExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "AttachEventExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "event",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "function",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "DetachEventExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "event",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "handler",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Enum",
        "name": "ObserveType",
        "items": [{
            "$ast": "EnumItem",
            "name": "SimpleObserve"
        }, {
            "$ast": "EnumItem",
            "name": "ExtendedObserve"
        }]
    }, {
        "$ast": "Class",
        "name": "ObserveExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "parent",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "observeType",
            "propType": "Type",
            "propTypeName": "ObserveType"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "events",
            "propType": "Array",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "CallExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "function",
            "propType": "Type",
            "propTypeName": "Expression"
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "FunctionExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "function",
            "propType": "Type",
            "propTypeName": "FunctionDeclaration"
        }]
    }, {
        "$ast": "Class",
        "name": "NewClassExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "arguments",
            "propType": "Array",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "NewInterfaceExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "declarations",
            "propType": "Array",
            "propTypeName": "Declaration"
        }]
    }, {
        "$ast": "Class",
        "name": "VirtualCfeExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "expandedExpression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "FormatExpression",
        "ambiguity": "No",
        "baseClass": "VirtualCfeExpression",
        "props": [{
            "$ast": "ClassProp",
            "name": "value",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "VirtualCseExpression",
        "ambiguity": "No",
        "baseClass": "Expression",
        "props": [{
            "$ast": "ClassProp",
            "name": "expandedExpression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "BindExpression",
        "ambiguity": "No",
        "baseClass": "VirtualCseExpression",
        "props": [{
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "NewCoroutineExpression",
        "ambiguity": "No",
        "baseClass": "VirtualCseExpression",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "statement",
            "propType": "Type",
            "propTypeName": "Statement"
        }]
    }, {
        "$ast": "Class",
        "name": "MixinCastExpression",
        "ambiguity": "No",
        "baseClass": "VirtualCseExpression",
        "props": [{
            "$ast": "ClassProp",
            "name": "type",
            "propType": "Type",
            "propTypeName": "Type"
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "ExpectedTypeCastExpression",
        "ambiguity": "No",
        "baseClass": "VirtualCseExpression",
        "props": [{
            "$ast": "ClassProp",
            "name": "strategy",
            "propType": "Type",
            "propTypeName": "TypeCastingStrategy"
        }, {
            "$ast": "ClassProp",
            "name": "expression",
            "propType": "Type",
            "propTypeName": "Expression"
        }]
    }, {
        "$ast": "Class",
        "name": "CoOperatorExpression",
        "ambiguity": "No",
        "baseClass": "VirtualCseExpression",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "ModuleUsingFragment",
        "ambiguity": "No",
        "baseClass": "",
        "props": []
    }, {
        "$ast": "Class",
        "name": "ModuleUsingNameFragment",
        "ambiguity": "No",
        "baseClass": "ModuleUsingFragment",
        "props": [{
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }]
    }, {
        "$ast": "Class",
        "name": "ModuleUsingWildCardFragment",
        "ambiguity": "No",
        "baseClass": "ModuleUsingFragment",
        "props": []
    }, {
        "$ast": "Class",
        "name": "ModuleUsingItem",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "fragments",
            "propType": "Array",
            "propTypeName": "ModuleUsingFragment"
        }]
    }, {
        "$ast": "Class",
        "name": "ModuleUsingPath",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "items",
            "propType": "Array",
            "propTypeName": "ModuleUsingItem"
        }]
    }, {
        "$ast": "Enum",
        "name": "ModuleType",
        "items": [{
            "$ast": "EnumItem",
            "name": "Module"
        }, {
            "$ast": "EnumItem",
            "name": "Unit"
        }]
    }, {
        "$ast": "Class",
        "name": "Module",
        "ambiguity": "No",
        "baseClass": "",
        "props": [{
            "$ast": "ClassProp",
            "name": "moduleType",
            "propType": "Type",
            "propTypeName": "ModuleType"
        }, {
            "$ast": "ClassProp",
            "name": "name",
            "propType": "Token",
            "propTypeName": ""
        }, {
            "$ast": "ClassProp",
            "name": "paths",
            "propType": "Array",
            "propTypeName": "ModuleUsingPath"
        }, {
            "$ast": "ClassProp",
            "name": "declarations",
            "propType": "Array",
            "propTypeName": "Declaration"
        }]
    }]
}