[0][Arg] BEGIN 
[RULE: 0][CLAUSE: -1]
	token: ID -> [2][Arg]< ID @ >
		- BeginObject(Arg)
		+ Token()
		+ Field(Arg::name)

[1][Arg] END [ENDING]
[RULE: 0][CLAUSE: -1]

[2][Arg]< ID @ >
[RULE: 0][CLAUSE: 0]
	ending -> [1][Arg] END [ENDING]
		- EndObject()

[3][Exp0] BEGIN 
[RULE: 1][CLAUSE: -1]
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
	token: "true" -> [6][Exp0]< "true" @ >
		- BeginObject(True)
	token: "false" -> [5][Exp0]< "false" @ >
		- BeginObject(False)
	token: NUM -> [8][Exp0]< NUM @ >
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
	token: ID -> [7][Exp0]< ID @ >
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)

[4][Exp0] END [ENDING]
[RULE: 1][CLAUSE: -1]

[5][Exp0]< "false" @ >
[RULE: 1][CLAUSE: 3]
	ending -> [4][Exp0] END [ENDING]
		- EndObject()

[6][Exp0]< "true" @ >
[RULE: 1][CLAUSE: 2]
	ending -> [4][Exp0] END [ENDING]
		- EndObject()

[7][Exp0]< ID @ >
[RULE: 1][CLAUSE: 1]
	ending -> [4][Exp0] END [ENDING]
		- EndObject()

[8][Exp0]< NUM @ >
[RULE: 1][CLAUSE: 0]
	ending -> [4][Exp0] END [ENDING]
		- EndObject()

[9][Exp0]<< "(" !Exp ")" @ >>
[RULE: 1][CLAUSE: 4]
	ending -> [4][Exp0] END [ENDING]
		- EndObject()

[10][Exp0]<< "(" !Exp @ ")" >>
[RULE: 1][CLAUSE: 4]
	token: ")" -> [9][Exp0]<< "(" !Exp ")" @ >>

[11][Exp0]<< "(" @ !Exp ")" >>
[RULE: 1][CLAUSE: 4]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp -> [10][Exp0]<< "(" !Exp @ ")" >>
			+ ReopenObject()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[12][Exp1] BEGIN 
[RULE: 2][CLAUSE: -1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- BeginObject(Unary)
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- BeginObject(Unary)
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[13][Exp1] END [ENDING]
[RULE: 2][CLAUSE: -1]

[14][Exp1]< "+" @ Exp1 >
[RULE: 2][CLAUSE: 1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [15][Exp1]< "+" Exp1 @ >
			+ Field(Unary::operand)
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [15][Exp1]< "+" Exp1 @ >
			+ Field(Unary::operand)
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp1 -> [15][Exp1]< "+" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp1 -> [15][Exp1]< "+" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp1 -> [15][Exp1]< "+" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp1 -> [15][Exp1]< "+" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp1 -> [15][Exp1]< "+" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[15][Exp1]< "+" Exp1 @ >
[RULE: 2][CLAUSE: 1]
	ending -> [13][Exp1] END [ENDING]
		- EnumItem(0)
		- Field(Unary::op)
		- EndObject()
	leftrec -> [22][Exp1]< Exp1 @ "(" { Exp ; "," } ")" >
		- EnumItem(0)
		- Field(Unary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Call)
		- LriFetch()
		+ Field(Call::func)

[16][Exp1]< "-" @ Exp1 >
[RULE: 2][CLAUSE: 2]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [17][Exp1]< "-" Exp1 @ >
			+ Field(Unary::operand)
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [17][Exp1]< "-" Exp1 @ >
			+ Field(Unary::operand)
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp1 -> [17][Exp1]< "-" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp1 -> [17][Exp1]< "-" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp1 -> [17][Exp1]< "-" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp1 -> [17][Exp1]< "-" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp1 -> [17][Exp1]< "-" Exp1 @ >
			+ Field(Unary::operand)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[17][Exp1]< "-" Exp1 @ >
[RULE: 2][CLAUSE: 2]
	ending -> [13][Exp1] END [ENDING]
		- EnumItem(1)
		- Field(Unary::op)
		- EndObject()
	leftrec -> [22][Exp1]< Exp1 @ "(" { Exp ; "," } ")" >
		- EnumItem(1)
		- Field(Unary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Call)
		- LriFetch()
		+ Field(Call::func)

[18][Exp1]< Exp1 "(" @ { Exp ; "," } ")" >
[RULE: 2][CLAUSE: 3]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
	token: ")" -> [20][Exp1]< Exp1 "(" { Exp ; "," } ")" @ >
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[19][Exp1]< Exp1 "(" { Exp ; "," @ } ")" >
[RULE: 2][CLAUSE: 3]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp -> [21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
			+ Field(Call::args)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[20][Exp1]< Exp1 "(" { Exp ; "," } ")" @ >
[RULE: 2][CLAUSE: 3]
	ending -> [13][Exp1] END [ENDING]
		- EndObject()
	leftrec -> [22][Exp1]< Exp1 @ "(" { Exp ; "," } ")" >
		- EndObject()
		- LriStore()
		- BeginObject(Call)
		- LriFetch()
		+ Field(Call::func)

[21][Exp1]< Exp1 "(" { Exp @ ; "," } ")" >
[RULE: 2][CLAUSE: 3]
	token: ")" -> [20][Exp1]< Exp1 "(" { Exp ; "," } ")" @ >
	token: "," -> [19][Exp1]< Exp1 "(" { Exp ; "," @ } ")" >

[22][Exp1]< Exp1 @ "(" { Exp ; "," } ")" >
[RULE: 2][CLAUSE: 3]
	token: "(" -> [18][Exp1]< Exp1 "(" @ { Exp ; "," } ")" >

[23][Exp1]<< !Exp0 @ >>
[RULE: 2][CLAUSE: 0]
	ending -> [13][Exp1] END [ENDING]
		- EndObject()
	leftrec -> [22][Exp1]< Exp1 @ "(" { Exp ; "," } ")" >
		- EndObject()
		- LriStore()
		- BeginObject(Call)
		- LriFetch()
		+ Field(Call::func)

[24][Exp2] BEGIN 
[RULE: 3][CLAUSE: -1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[25][Exp2] END [ENDING]
[RULE: 3][CLAUSE: -1]

[26][Exp2]< Exp2 "*" @ Exp1 >
[RULE: 3][CLAUSE: 1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [27][Exp2]< Exp2 "*" Exp1 @ >
			+ Field(Binary::right)
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [27][Exp2]< Exp2 "*" Exp1 @ >
			+ Field(Binary::right)
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp1 -> [27][Exp2]< Exp2 "*" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp1 -> [27][Exp2]< Exp2 "*" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp1 -> [27][Exp2]< Exp2 "*" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp1 -> [27][Exp2]< Exp2 "*" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp1 -> [27][Exp2]< Exp2 "*" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[27][Exp2]< Exp2 "*" Exp1 @ >
[RULE: 3][CLAUSE: 1]
	ending -> [25][Exp2] END [ENDING]
		- EnumItem(2)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [30][Exp2]< Exp2 @ "*" Exp1 >
		- EnumItem(2)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [31][Exp2]< Exp2 @ "/" Exp1 >
		- EnumItem(2)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[28][Exp2]< Exp2 "/" @ Exp1 >
[RULE: 3][CLAUSE: 2]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [29][Exp2]< Exp2 "/" Exp1 @ >
			+ Field(Binary::right)
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- BeginObject(Unary)
		> rule: Exp1 -> [29][Exp2]< Exp2 "/" Exp1 @ >
			+ Field(Binary::right)
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp1 -> [29][Exp2]< Exp2 "/" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp1 -> [29][Exp2]< Exp2 "/" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp1 -> [29][Exp2]< Exp2 "/" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp1 -> [29][Exp2]< Exp2 "/" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp1 -> [29][Exp2]< Exp2 "/" Exp1 @ >
			+ Field(Binary::right)
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[29][Exp2]< Exp2 "/" Exp1 @ >
[RULE: 3][CLAUSE: 2]
	ending -> [25][Exp2] END [ENDING]
		- EnumItem(3)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [30][Exp2]< Exp2 @ "*" Exp1 >
		- EnumItem(3)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [31][Exp2]< Exp2 @ "/" Exp1 >
		- EnumItem(3)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[30][Exp2]< Exp2 @ "*" Exp1 >
[RULE: 3][CLAUSE: 1]
	token: "*" -> [26][Exp2]< Exp2 "*" @ Exp1 >

[31][Exp2]< Exp2 @ "/" Exp1 >
[RULE: 3][CLAUSE: 2]
	token: "/" -> [28][Exp2]< Exp2 "/" @ Exp1 >

[32][Exp2]<< !Exp1 @ >>
[RULE: 3][CLAUSE: 0]
	ending -> [25][Exp2] END [ENDING]
		- EndObject()
	leftrec -> [30][Exp2]< Exp2 @ "*" Exp1 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [31][Exp2]< Exp2 @ "/" Exp1 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[33][Exp3] BEGIN 
[RULE: 4][CLAUSE: -1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[34][Exp3] END [ENDING]
[RULE: 4][CLAUSE: -1]

[35][Exp3]< Exp3 "+" @ Exp2 >
[RULE: 4][CLAUSE: 1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp2 -> [36][Exp3]< Exp3 "+" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp2 -> [36][Exp3]< Exp3 "+" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp2 -> [36][Exp3]< Exp3 "+" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp2 -> [36][Exp3]< Exp3 "+" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp2 -> [36][Exp3]< Exp3 "+" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp2 -> [36][Exp3]< Exp3 "+" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp2 -> [36][Exp3]< Exp3 "+" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[36][Exp3]< Exp3 "+" Exp2 @ >
[RULE: 4][CLAUSE: 1]
	ending -> [34][Exp3] END [ENDING]
		- EnumItem(0)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [39][Exp3]< Exp3 @ "+" Exp2 >
		- EnumItem(0)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [40][Exp3]< Exp3 @ "-" Exp2 >
		- EnumItem(0)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[37][Exp3]< Exp3 "-" @ Exp2 >
[RULE: 4][CLAUSE: 2]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp2 -> [38][Exp3]< Exp3 "-" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp2 -> [38][Exp3]< Exp3 "-" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp2 -> [38][Exp3]< Exp3 "-" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp2 -> [38][Exp3]< Exp3 "-" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp2 -> [38][Exp3]< Exp3 "-" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp2 -> [38][Exp3]< Exp3 "-" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp2 -> [38][Exp3]< Exp3 "-" Exp2 @ >
			+ Field(Binary::right)
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[38][Exp3]< Exp3 "-" Exp2 @ >
[RULE: 4][CLAUSE: 2]
	ending -> [34][Exp3] END [ENDING]
		- EnumItem(1)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [39][Exp3]< Exp3 @ "+" Exp2 >
		- EnumItem(1)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [40][Exp3]< Exp3 @ "-" Exp2 >
		- EnumItem(1)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[39][Exp3]< Exp3 @ "+" Exp2 >
[RULE: 4][CLAUSE: 1]
	token: "+" -> [35][Exp3]< Exp3 "+" @ Exp2 >

[40][Exp3]< Exp3 @ "-" Exp2 >
[RULE: 4][CLAUSE: 2]
	token: "-" -> [37][Exp3]< Exp3 "-" @ Exp2 >

[41][Exp3]<< !Exp2 @ >>
[RULE: 4][CLAUSE: 0]
	ending -> [34][Exp3] END [ENDING]
		- EndObject()
	leftrec -> [39][Exp3]< Exp3 @ "+" Exp2 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [40][Exp3]< Exp3 @ "-" Exp2 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[42][Exp4] BEGIN 
[RULE: 5][CLAUSE: -1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[43][Exp4] END [ENDING]
[RULE: 5][CLAUSE: -1]

[44][Exp4]< Exp4 "<" @ Exp3 >
[RULE: 5][CLAUSE: 1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [45][Exp4]< Exp4 "<" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [45][Exp4]< Exp4 "<" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp3 -> [45][Exp4]< Exp4 "<" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp3 -> [45][Exp4]< Exp4 "<" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp3 -> [45][Exp4]< Exp4 "<" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp3 -> [45][Exp4]< Exp4 "<" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp3 -> [45][Exp4]< Exp4 "<" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[45][Exp4]< Exp4 "<" Exp3 @ >
[RULE: 5][CLAUSE: 1]
	ending -> [43][Exp4] END [ENDING]
		- EnumItem(6)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [52][Exp4]< Exp4 @ "<" Exp3 >
		- EnumItem(6)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [53][Exp4]< Exp4 @ "<=" Exp3 >
		- EnumItem(6)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [54][Exp4]< Exp4 @ ">" Exp3 >
		- EnumItem(6)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [55][Exp4]< Exp4 @ ">=" Exp3 >
		- EnumItem(6)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[46][Exp4]< Exp4 "<=" @ Exp3 >
[RULE: 5][CLAUSE: 2]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [47][Exp4]< Exp4 "<=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [47][Exp4]< Exp4 "<=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp3 -> [47][Exp4]< Exp4 "<=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp3 -> [47][Exp4]< Exp4 "<=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp3 -> [47][Exp4]< Exp4 "<=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp3 -> [47][Exp4]< Exp4 "<=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp3 -> [47][Exp4]< Exp4 "<=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[47][Exp4]< Exp4 "<=" Exp3 @ >
[RULE: 5][CLAUSE: 2]
	ending -> [43][Exp4] END [ENDING]
		- EnumItem(7)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [52][Exp4]< Exp4 @ "<" Exp3 >
		- EnumItem(7)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [53][Exp4]< Exp4 @ "<=" Exp3 >
		- EnumItem(7)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [54][Exp4]< Exp4 @ ">" Exp3 >
		- EnumItem(7)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [55][Exp4]< Exp4 @ ">=" Exp3 >
		- EnumItem(7)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[48][Exp4]< Exp4 ">" @ Exp3 >
[RULE: 5][CLAUSE: 3]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [49][Exp4]< Exp4 ">" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [49][Exp4]< Exp4 ">" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp3 -> [49][Exp4]< Exp4 ">" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp3 -> [49][Exp4]< Exp4 ">" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp3 -> [49][Exp4]< Exp4 ">" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp3 -> [49][Exp4]< Exp4 ">" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp3 -> [49][Exp4]< Exp4 ">" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[49][Exp4]< Exp4 ">" Exp3 @ >
[RULE: 5][CLAUSE: 3]
	ending -> [43][Exp4] END [ENDING]
		- EnumItem(4)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [52][Exp4]< Exp4 @ "<" Exp3 >
		- EnumItem(4)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [53][Exp4]< Exp4 @ "<=" Exp3 >
		- EnumItem(4)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [54][Exp4]< Exp4 @ ">" Exp3 >
		- EnumItem(4)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [55][Exp4]< Exp4 @ ">=" Exp3 >
		- EnumItem(4)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[50][Exp4]< Exp4 ">=" @ Exp3 >
[RULE: 5][CLAUSE: 4]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [51][Exp4]< Exp4 ">=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp3 -> [51][Exp4]< Exp4 ">=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp3 -> [51][Exp4]< Exp4 ">=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp3 -> [51][Exp4]< Exp4 ">=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp3 -> [51][Exp4]< Exp4 ">=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp3 -> [51][Exp4]< Exp4 ">=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp3 -> [51][Exp4]< Exp4 ">=" Exp3 @ >
			+ Field(Binary::right)
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[51][Exp4]< Exp4 ">=" Exp3 @ >
[RULE: 5][CLAUSE: 4]
	ending -> [43][Exp4] END [ENDING]
		- EnumItem(5)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [52][Exp4]< Exp4 @ "<" Exp3 >
		- EnumItem(5)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [53][Exp4]< Exp4 @ "<=" Exp3 >
		- EnumItem(5)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [54][Exp4]< Exp4 @ ">" Exp3 >
		- EnumItem(5)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [55][Exp4]< Exp4 @ ">=" Exp3 >
		- EnumItem(5)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[52][Exp4]< Exp4 @ "<" Exp3 >
[RULE: 5][CLAUSE: 1]
	token: "<" -> [44][Exp4]< Exp4 "<" @ Exp3 >

[53][Exp4]< Exp4 @ "<=" Exp3 >
[RULE: 5][CLAUSE: 2]
	token: "<=" -> [46][Exp4]< Exp4 "<=" @ Exp3 >

[54][Exp4]< Exp4 @ ">" Exp3 >
[RULE: 5][CLAUSE: 3]
	token: ">" -> [48][Exp4]< Exp4 ">" @ Exp3 >

[55][Exp4]< Exp4 @ ">=" Exp3 >
[RULE: 5][CLAUSE: 4]
	token: ">=" -> [50][Exp4]< Exp4 ">=" @ Exp3 >

[56][Exp4]<< !Exp3 @ >>
[RULE: 5][CLAUSE: 0]
	ending -> [43][Exp4] END [ENDING]
		- EndObject()
	leftrec -> [52][Exp4]< Exp4 @ "<" Exp3 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [53][Exp4]< Exp4 @ "<=" Exp3 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [54][Exp4]< Exp4 @ ">" Exp3 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [55][Exp4]< Exp4 @ ">=" Exp3 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[57][Exp5] BEGIN 
[RULE: 6][CLAUSE: -1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[58][Exp5] END [ENDING]
[RULE: 6][CLAUSE: -1]

[59][Exp5]< Exp5 "!=" @ Exp4 >
[RULE: 6][CLAUSE: 2]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp4 -> [60][Exp5]< Exp5 "!=" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp4 -> [60][Exp5]< Exp5 "!=" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp4 -> [60][Exp5]< Exp5 "!=" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp4 -> [60][Exp5]< Exp5 "!=" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp4 -> [60][Exp5]< Exp5 "!=" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp4 -> [60][Exp5]< Exp5 "!=" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp4 -> [60][Exp5]< Exp5 "!=" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[60][Exp5]< Exp5 "!=" Exp4 @ >
[RULE: 6][CLAUSE: 2]
	ending -> [58][Exp5] END [ENDING]
		- EnumItem(9)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [63][Exp5]< Exp5 @ "!=" Exp4 >
		- EnumItem(9)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [64][Exp5]< Exp5 @ "==" Exp4 >
		- EnumItem(9)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[61][Exp5]< Exp5 "==" @ Exp4 >
[RULE: 6][CLAUSE: 1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp4 -> [62][Exp5]< Exp5 "==" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp4 -> [62][Exp5]< Exp5 "==" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp4 -> [62][Exp5]< Exp5 "==" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp4 -> [62][Exp5]< Exp5 "==" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp4 -> [62][Exp5]< Exp5 "==" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp4 -> [62][Exp5]< Exp5 "==" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp4 -> [62][Exp5]< Exp5 "==" Exp4 @ >
			+ Field(Binary::right)
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[62][Exp5]< Exp5 "==" Exp4 @ >
[RULE: 6][CLAUSE: 1]
	ending -> [58][Exp5] END [ENDING]
		- EnumItem(8)
		- Field(Binary::op)
		- EndObject()
	leftrec -> [63][Exp5]< Exp5 @ "!=" Exp4 >
		- EnumItem(8)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [64][Exp5]< Exp5 @ "==" Exp4 >
		- EnumItem(8)
		- Field(Binary::op)
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[63][Exp5]< Exp5 @ "!=" Exp4 >
[RULE: 6][CLAUSE: 2]
	token: "!=" -> [59][Exp5]< Exp5 "!=" @ Exp4 >

[64][Exp5]< Exp5 @ "==" Exp4 >
[RULE: 6][CLAUSE: 1]
	token: "==" -> [61][Exp5]< Exp5 "==" @ Exp4 >

[65][Exp5]<< !Exp4 @ >>
[RULE: 6][CLAUSE: 0]
	ending -> [58][Exp5] END [ENDING]
		- EndObject()
	leftrec -> [63][Exp5]< Exp5 @ "!=" Exp4 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)
	leftrec -> [64][Exp5]< Exp5 @ "==" Exp4 >
		- EndObject()
		- LriStore()
		- BeginObject(Binary)
		- LriFetch()
		+ Field(Binary::left)

[66][Exp] BEGIN 
[RULE: 7][CLAUSE: -1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[67][Exp] END [ENDING]
[RULE: 7][CLAUSE: -1]

[68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
[RULE: 7][CLAUSE: 1]
	token: ")" -> [72][Exp]< "(" { Arg ; "," } ")" @ "->" Exp >
	token: ID -> [2][Arg]< ID @ >
		- BeginObject(Arg)
		+ Token()
		+ Field(Arg::name)
		> rule: Arg -> [73][Exp]< "(" { Arg @ ; "," } ")" "->" Exp >
			+ Field(Func::args)

[69][Exp]< "(" { Arg ; "," @ } ")" "->" Exp >
[RULE: 7][CLAUSE: 1]
	token: ID -> [2][Arg]< ID @ >
		- BeginObject(Arg)
		+ Token()
		+ Field(Arg::name)
		> rule: Arg -> [73][Exp]< "(" { Arg @ ; "," } ")" "->" Exp >
			+ Field(Func::args)

[70][Exp]< "(" { Arg ; "," } ")" "->" @ Exp >
[RULE: 7][CLAUSE: 1]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp -> [71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
			+ Field(Func::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[71][Exp]< "(" { Arg ; "," } ")" "->" Exp @ >
[RULE: 7][CLAUSE: 1]
	ending -> [67][Exp] END [ENDING]
		- EndObject()

[72][Exp]< "(" { Arg ; "," } ")" @ "->" Exp >
[RULE: 7][CLAUSE: 1]
	token: "->" -> [70][Exp]< "(" { Arg ; "," } ")" "->" @ Exp >

[73][Exp]< "(" { Arg @ ; "," } ")" "->" Exp >
[RULE: 7][CLAUSE: 1]
	token: ")" -> [72][Exp]< "(" { Arg ; "," } ")" @ "->" Exp >
	token: "," -> [69][Exp]< "(" { Arg ; "," @ } ")" "->" Exp >

[74][Exp]< "let" @ ID "<-" Exp "in" Exp >
[RULE: 7][CLAUSE: 2]
	token: ID -> [79][Exp]< "let" ID @ "<-" Exp "in" Exp >
		+ Token()
		+ Field(LetExpr::name)

[75][Exp]< "let" ID "<-" @ Exp "in" Exp >
[RULE: 7][CLAUSE: 2]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp -> [78][Exp]< "let" ID "<-" Exp @ "in" Exp >
			+ Field(LetExpr::value)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[76][Exp]< "let" ID "<-" Exp "in" @ Exp >
[RULE: 7][CLAUSE: 2]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp -> [77][Exp]< "let" ID "<-" Exp "in" Exp @ >
			+ Field(LetExpr::result)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[77][Exp]< "let" ID "<-" Exp "in" Exp @ >
[RULE: 7][CLAUSE: 2]
	ending -> [67][Exp] END [ENDING]
		- EndObject()

[78][Exp]< "let" ID "<-" Exp @ "in" Exp >
[RULE: 7][CLAUSE: 2]
	token: "in" -> [76][Exp]< "let" ID "<-" Exp "in" @ Exp >

[79][Exp]< "let" ID @ "<-" Exp "in" Exp >
[RULE: 7][CLAUSE: 2]
	token: "<-" -> [75][Exp]< "let" ID "<-" @ Exp "in" Exp >

[80][Exp]<< !Exp5 @ >>
[RULE: 7][CLAUSE: 0]
	ending -> [67][Exp] END [ENDING]
		- ReopenObject()
		- EndObject()

[81][Import] BEGIN 
[RULE: 8][CLAUSE: -1]
	token: "import" -> [83][Import]< "import" @ ID >
		- BeginObject(Import)

[82][Import] END [ENDING]
[RULE: 8][CLAUSE: -1]

[83][Import]< "import" @ ID >
[RULE: 8][CLAUSE: 0]
	token: ID -> [84][Import]< "import" ID @ >
		+ Token()
		+ Field(Import::name)

[84][Import]< "import" ID @ >
[RULE: 8][CLAUSE: 0]
	ending -> [82][Import] END [ENDING]
		- EndObject()

[85][Module] BEGIN 
[RULE: 9][CLAUSE: -1]
	token: "import" -> [83][Import]< "import" @ ID >
		- BeginObject(Module)
		- BeginObject(Import)
		> rule: Import -> [87][Module]< { Import @ } "export" Exp >
			+ Field(Module::imports)
	token: "export" -> [88][Module]< { Import } "export" @ Exp >
		- BeginObject(Module)

[86][Module] END [ENDING]
[RULE: 9][CLAUSE: -1]

[87][Module]< { Import @ } "export" Exp >
[RULE: 9][CLAUSE: 0]
	token: "import" -> [83][Import]< "import" @ ID >
		- BeginObject(Import)
		> rule: Import -> [87][Module]< { Import @ } "export" Exp >
			+ Field(Module::imports)
	token: "export" -> [88][Module]< { Import } "export" @ Exp >

[88][Module]< { Import } "export" @ Exp >
[RULE: 9][CLAUSE: 0]
	token: "+" -> [14][Exp1]< "+" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "-" -> [16][Exp1]< "-" @ Exp1 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Unary)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
	token: "(" -> [11][Exp0]<< "(" @ !Exp ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "(" -> [68][Exp]< "(" @ { Arg ; "," } ")" "->" Exp >
		- BeginObject(Func)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
	token: "true" -> [6][Exp0]< "true" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(True)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "false" -> [5][Exp0]< "false" @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(False)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: "let" -> [74][Exp]< "let" @ ID "<-" Exp "in" Exp >
		- BeginObject(LetExpr)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
	token: NUM -> [8][Exp0]< NUM @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NumExpr)
		+ Token()
		+ Field(NumExpr::value)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()
	token: ID -> [7][Exp0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(Ref)
		+ Token()
		+ Field(Ref::name)
		> rule: Exp -> [89][Module]< { Import } "export" Exp @ >
			+ Field(Module::exported)
		> rule: Exp5 -> [80][Exp]<< !Exp5 @ >>
		> rule: Exp4 -> [65][Exp5]<< !Exp4 @ >>
			+ ReopenObject()
		> rule: Exp3 -> [56][Exp4]<< !Exp3 @ >>
			+ ReopenObject()
		> rule: Exp2 -> [41][Exp3]<< !Exp2 @ >>
			+ ReopenObject()
		> rule: Exp1 -> [32][Exp2]<< !Exp1 @ >>
			+ ReopenObject()
		> rule: Exp0 -> [23][Exp1]<< !Exp0 @ >>
			+ ReopenObject()

[89][Module]< { Import } "export" Exp @ >
[RULE: 9][CLAUSE: 0]
	ending -> [86][Module] END [ENDING]
		- EndObject()

