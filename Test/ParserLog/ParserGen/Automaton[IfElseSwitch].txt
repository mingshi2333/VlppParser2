[0][Do] BEGIN 
[RULE: 0][CLAUSE: -1]
	token: "do" -> [3][Do]< "do" @ ";" >
		- BeginObject(DoStat)

[1][Do] END [ENDING]
[RULE: 0][CLAUSE: -1]

[2][Do]< "do" ";" @ >
[RULE: 0][CLAUSE: 0]
	ending -> [1][Do] END [ENDING]
		- EndObject()

[3][Do]< "do" @ ";" >
[RULE: 0][CLAUSE: 0]
	token: ";" -> [2][Do]< "do" ";" @ >

[4][Block] BEGIN 
[RULE: 1][CLAUSE: -1]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- BeginObject(BlockStat)

[5][Block] END [ENDING]
[RULE: 1][CLAUSE: -1]

[6][Block]< "{" @ { Stat } "}" >
[RULE: 1][CLAUSE: 0]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: Stat -> [7][Block]< "{" { Stat @ } "}" >
			+ Field(BlockStat::stats)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "}" -> [8][Block]< "{" { Stat } "}" @ >
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- TRUE
		- DelayFieldAssignment()
		- BeginObject(IfStat)
		> rule: Stat -> [7][Block]< "{" { Stat @ } "}" >
			+ Field(BlockStat::stats)
		> rule: If -> [30][Stat]<< !(0;!If @) >>
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: Stat -> [7][Block]< "{" { Stat @ } "}" >
			+ Field(BlockStat::stats)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[7][Block]< "{" { Stat @ } "}" >
[RULE: 1][CLAUSE: 0]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: Stat -> [7][Block]< "{" { Stat @ } "}" >
			+ Field(BlockStat::stats)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "}" -> [8][Block]< "{" { Stat } "}" @ >
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- TRUE
		- DelayFieldAssignment()
		- BeginObject(IfStat)
		> rule: Stat -> [7][Block]< "{" { Stat @ } "}" >
			+ Field(BlockStat::stats)
		> rule: If -> [30][Stat]<< !(0;!If @) >>
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: Stat -> [7][Block]< "{" { Stat @ } "}" >
			+ Field(BlockStat::stats)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[8][Block]< "{" { Stat } "}" @ >
[RULE: 1][CLAUSE: 0]
	ending -> [5][Block] END [ENDING]
		- EndObject()

[9][IfTail] BEGIN 
[RULE: 2][CLAUSE: -1]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: OtherStat -> [17][IfTail]OtherStat @ ( "else" Stat | ( ([0]? ) ) )
			+ Field(IfStat::thenBranch)
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- FALSE
		- BeginObject(IfStat)
		> rule: If -> [11][IfTail]!(!0;If @) "else" Stat
			+ Field(IfStat::thenBranch)
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? <- allow_half_if
		? ?
		- BeginObject(IfStat)
		> rule: If -> [14][IfTail]( ([0]? If @) )
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: OtherStat -> [17][IfTail]OtherStat @ ( "else" Stat | ( ([0]? ) ) )
			+ Field(IfStat::thenBranch)
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[10][IfTail] END [ENDING]
[RULE: 2][CLAUSE: -1]

[11][IfTail]!(!0;If @) "else" Stat
[RULE: 2][CLAUSE: 1]
	token: "else" -> [12][IfTail]!(!0;If) "else" @ Stat
		? -switches

[12][IfTail]!(!0;If) "else" @ Stat
[RULE: 2][CLAUSE: 1]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: Stat -> [13][IfTail]!(!0;If) "else" Stat @
			+ Field(IfStat::elseBranch)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- TRUE
		- DelayFieldAssignment()
		- BeginObject(IfStat)
		> rule: Stat -> [13][IfTail]!(!0;If) "else" Stat @
			+ Field(IfStat::elseBranch)
		> rule: If -> [30][Stat]<< !(0;!If @) >>
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: Stat -> [13][IfTail]!(!0;If) "else" Stat @
			+ Field(IfStat::elseBranch)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[13][IfTail]!(!0;If) "else" Stat @
[RULE: 2][CLAUSE: 1]
	ending -> [10][IfTail] END [ENDING]

[14][IfTail]( ([0]? If @) )
[RULE: 2][CLAUSE: 2]
	ending -> [10][IfTail] END [ENDING]
		- Field(IfStat::thenBranch)

[15][IfTail]OtherStat ( "else" @ Stat | ( ([0]? ) ) )
[RULE: 2][CLAUSE: 0]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: Stat -> [16][IfTail]OtherStat ( "else" Stat @ | ( ([0]? ) ) )
			+ Field(IfStat::elseBranch)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- TRUE
		- DelayFieldAssignment()
		- BeginObject(IfStat)
		> rule: Stat -> [16][IfTail]OtherStat ( "else" Stat @ | ( ([0]? ) ) )
			+ Field(IfStat::elseBranch)
		> rule: If -> [30][Stat]<< !(0;!If @) >>
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: Stat -> [16][IfTail]OtherStat ( "else" Stat @ | ( ([0]? ) ) )
			+ Field(IfStat::elseBranch)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[16][IfTail]OtherStat ( "else" Stat @ | ( ([0]? ) ) )
[RULE: 2][CLAUSE: 0]
	ending -> [10][IfTail] END [ENDING]

[17][IfTail]OtherStat @ ( "else" Stat | ( ([0]? ) ) )
[RULE: 2][CLAUSE: 0]
	ending -> [10][IfTail] END [ENDING]
		? <- allow_half_if
		? ?
	token: "else" -> [15][IfTail]OtherStat ( "else" @ Stat | ( ([0]? ) ) )

[18][If] BEGIN 
[RULE: 3][CLAUSE: -1]
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		- BeginObject(IfStat)

[19][If] END [ENDING]
[RULE: 3][CLAUSE: -1]

[20][If]< "if" "cond" "then" @ IfTail >
[RULE: 3][CLAUSE: 0]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: IfTail -> [21][If]< "if" "cond" "then" IfTail @ >
		> rule: OtherStat -> [17][IfTail]OtherStat @ ( "else" Stat | ( ([0]? ) ) )
			+ Field(IfStat::thenBranch)
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- FALSE
		- BeginObject(IfStat)
		> rule: IfTail -> [21][If]< "if" "cond" "then" IfTail @ >
		> rule: If -> [11][IfTail]!(!0;If @) "else" Stat
			+ Field(IfStat::thenBranch)
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? <- allow_half_if
		? ?
		- BeginObject(IfStat)
		> rule: IfTail -> [21][If]< "if" "cond" "then" IfTail @ >
		> rule: If -> [14][IfTail]( ([0]? If @) )
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: IfTail -> [21][If]< "if" "cond" "then" IfTail @ >
		> rule: OtherStat -> [17][IfTail]OtherStat @ ( "else" Stat | ( ([0]? ) ) )
			+ Field(IfStat::thenBranch)
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[21][If]< "if" "cond" "then" IfTail @ >
[RULE: 3][CLAUSE: 0]
	ending -> [19][If] END [ENDING]
		- EndObject()

[22][If]< "if" "cond" @ "then" IfTail >
[RULE: 3][CLAUSE: 0]
	token: "then" -> [20][If]< "if" "cond" "then" @ IfTail >

[23][If]< "if" @ "cond" "then" IfTail >
[RULE: 3][CLAUSE: 0]
	token: "cond" -> [22][If]< "if" "cond" @ "then" IfTail >

[24][OtherStat] BEGIN 
[RULE: 4][CLAUSE: -1]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[25][OtherStat] END [ENDING]
[RULE: 4][CLAUSE: -1]

[26][OtherStat]<< !Block @ >>
[RULE: 4][CLAUSE: 1]
	ending -> [25][OtherStat] END [ENDING]
		- ReopenObject()
		- EndObject()

[27][OtherStat]<< !Do @ >>
[RULE: 4][CLAUSE: 0]
	ending -> [25][OtherStat] END [ENDING]
		- ReopenObject()
		- EndObject()

[28][Stat] BEGIN 
[RULE: 5][CLAUSE: -1]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- TRUE
		- DelayFieldAssignment()
		- BeginObject(IfStat)
		> rule: If -> [30][Stat]<< !(0;!If @) >>
	token: "do" -> [3][Do]< "do" @ ";" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[29][Stat] END [ENDING]
[RULE: 5][CLAUSE: -1]

[30][Stat]<< !(0;!If @) >>
[RULE: 5][CLAUSE: 1]
	ending -> [29][Stat] END [ENDING]
		? -switches
		- ReopenObject()
		- EndObject()

[31][Stat]<< !OtherStat @ >>
[RULE: 5][CLAUSE: 0]
	ending -> [29][Stat] END [ENDING]
		- ReopenObject()
		- EndObject()

[32][Module] BEGIN 
[RULE: 6][CLAUSE: -1]
	token: "{" -> [6][Block]< "{" @ { Stat } "}" >
		- BeginObject(Module)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(BlockStat)
		> rule: Stat -> [34][Module]< Stat @ >
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Block -> [26][OtherStat]<< !Block @ >>
	token: "if" -> [23][If]< "if" @ "cond" "then" IfTail >
		? +switches
		? allow_half_if <- TRUE
		- BeginObject(Module)
		- DelayFieldAssignment()
		- BeginObject(IfStat)
		> rule: Stat -> [34][Module]< Stat @ >
		> rule: If -> [30][Stat]<< !(0;!If @) >>
	token: "do" -> [3][Do]< "do" @ ";" >
		- BeginObject(Module)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(DoStat)
		> rule: Stat -> [34][Module]< Stat @ >
		> rule: OtherStat -> [31][Stat]<< !OtherStat @ >>
		> rule: Do -> [27][OtherStat]<< !Do @ >>

[33][Module] END [ENDING]
[RULE: 6][CLAUSE: -1]

[34][Module]< Stat @ >
[RULE: 6][CLAUSE: 0]
	ending -> [33][Module] END [ENDING]
		- Field(Module::stat)
		- EndObject()

