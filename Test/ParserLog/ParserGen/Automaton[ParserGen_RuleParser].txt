[0][Cond0] BEGIN 
[RULE: 0][CLAUSE: -1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- BeginObject(NotCondition)
	token: ID -> [4][Cond0]< ID @ >
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)

[1][Cond0] END [ENDING]
[RULE: 0][CLAUSE: -1]

[2][Cond0]< "!" @ Cond0 >
[RULE: 0][CLAUSE: 2]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
		> rule: Cond0 -> [3][Cond0]< "!" Cond0 @ >
			+ Field(NotCondition::condition)
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- BeginObject(NotCondition)
		> rule: Cond0 -> [3][Cond0]< "!" Cond0 @ >
			+ Field(NotCondition::condition)
	token: ID -> [4][Cond0]< ID @ >
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond0 -> [3][Cond0]< "!" Cond0 @ >
			+ Field(NotCondition::condition)

[3][Cond0]< "!" Cond0 @ >
[RULE: 0][CLAUSE: 2]
	ending -> [1][Cond0] END [ENDING]
		- EndObject()

[4][Cond0]< ID @ >
[RULE: 0][CLAUSE: 0]
	ending -> [1][Cond0] END [ENDING]
		- EndObject()

[5][Cond0]<< "(" !Cond ")" @ >>
[RULE: 0][CLAUSE: 1]
	ending -> [1][Cond0] END [ENDING]
		- EndObject()

[6][Cond0]<< "(" !Cond @ ")" >>
[RULE: 0][CLAUSE: 1]
	token: ")" -> [5][Cond0]<< "(" !Cond ")" @ >>

[7][Cond0]<< "(" @ !Cond ")" >>
[RULE: 0][CLAUSE: 1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Cond -> [6][Cond0]<< "(" !Cond @ ")" >>
			+ ReopenObject()
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: Cond -> [6][Cond0]<< "(" !Cond @ ")" >>
			+ ReopenObject()
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond -> [6][Cond0]<< "(" !Cond @ ")" >>
			+ ReopenObject()
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[8][Cond1] BEGIN 
[RULE: 1][CLAUSE: -1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[9][Cond1] END [ENDING]
[RULE: 1][CLAUSE: -1]

[10][Cond1]< Cond1 "&&" @ Cond0 >
[RULE: 1][CLAUSE: 1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
		> rule: Cond0 -> [11][Cond1]< Cond1 "&&" Cond0 @ >
			+ Field(AndCondition::second)
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- BeginObject(NotCondition)
		> rule: Cond0 -> [11][Cond1]< Cond1 "&&" Cond0 @ >
			+ Field(AndCondition::second)
	token: ID -> [4][Cond0]< ID @ >
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond0 -> [11][Cond1]< Cond1 "&&" Cond0 @ >
			+ Field(AndCondition::second)

[11][Cond1]< Cond1 "&&" Cond0 @ >
[RULE: 1][CLAUSE: 1]
	ending -> [9][Cond1] END [ENDING]
		- EndObject()
	leftrec -> [12][Cond1]< Cond1 @ "&&" Cond0 >
		- EndObject()
		- LriStore()
		- BeginObject(AndCondition)
		- LriFetch()
		+ Field(AndCondition::first)

[12][Cond1]< Cond1 @ "&&" Cond0 >
[RULE: 1][CLAUSE: 1]
	token: "&&" -> [10][Cond1]< Cond1 "&&" @ Cond0 >

[13][Cond1]<< !Cond0 @ >>
[RULE: 1][CLAUSE: 0]
	ending -> [9][Cond1] END [ENDING]
		- EndObject()
	leftrec -> [12][Cond1]< Cond1 @ "&&" Cond0 >
		- EndObject()
		- LriStore()
		- BeginObject(AndCondition)
		- LriFetch()
		+ Field(AndCondition::first)

[14][Cond2] BEGIN 
[RULE: 2][CLAUSE: -1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[15][Cond2] END [ENDING]
[RULE: 2][CLAUSE: -1]

[16][Cond2]< Cond2 "||" @ Cond1 >
[RULE: 2][CLAUSE: 1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Cond1 -> [17][Cond2]< Cond2 "||" Cond1 @ >
			+ Field(OrCondition::second)
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: Cond1 -> [17][Cond2]< Cond2 "||" Cond1 @ >
			+ Field(OrCondition::second)
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond1 -> [17][Cond2]< Cond2 "||" Cond1 @ >
			+ Field(OrCondition::second)
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[17][Cond2]< Cond2 "||" Cond1 @ >
[RULE: 2][CLAUSE: 1]
	ending -> [15][Cond2] END [ENDING]
		- EndObject()
	leftrec -> [18][Cond2]< Cond2 @ "||" Cond1 >
		- EndObject()
		- LriStore()
		- BeginObject(OrCondition)
		- LriFetch()
		+ Field(OrCondition::first)

[18][Cond2]< Cond2 @ "||" Cond1 >
[RULE: 2][CLAUSE: 1]
	token: "||" -> [16][Cond2]< Cond2 "||" @ Cond1 >

[19][Cond2]<< !Cond1 @ >>
[RULE: 2][CLAUSE: 0]
	ending -> [15][Cond2] END [ENDING]
		- EndObject()
	leftrec -> [18][Cond2]< Cond2 @ "||" Cond1 >
		- EndObject()
		- LriStore()
		- BeginObject(OrCondition)
		- LriFetch()
		+ Field(OrCondition::first)

[20][Cond] BEGIN 
[RULE: 3][CLAUSE: -1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[21][Cond] END [ENDING]
[RULE: 3][CLAUSE: -1]

[22][Cond]<< !Cond2 @ >>
[RULE: 3][CLAUSE: 0]
	ending -> [21][Cond] END [ENDING]
		- ReopenObject()
		- EndObject()

[23][SwitchItem] BEGIN 
[RULE: 4][CLAUSE: -1]
	token: "!" -> [25][SwitchItem]< "!" @ ID >
		- BeginObject(SwitchItem)
	token: ID -> [27][SwitchItem]< ID @ >
		- BeginObject(SwitchItem)
		+ Token()
		+ Field(SwitchItem::name)

[24][SwitchItem] END [ENDING]
[RULE: 4][CLAUSE: -1]

[25][SwitchItem]< "!" @ ID >
[RULE: 4][CLAUSE: 1]
	token: ID -> [26][SwitchItem]< "!" ID @ >
		+ Token()
		+ Field(SwitchItem::name)

[26][SwitchItem]< "!" ID @ >
[RULE: 4][CLAUSE: 1]
	ending -> [24][SwitchItem] END [ENDING]
		- EnumItem(0)
		- Field(SwitchItem::value)
		- EndObject()

[27][SwitchItem]< ID @ >
[RULE: 4][CLAUSE: 0]
	ending -> [24][SwitchItem] END [ENDING]
		- EnumItem(1)
		- Field(SwitchItem::value)
		- EndObject()

[28][Switches] BEGIN 
[RULE: 5][CLAUSE: -1]
	token: "switch" -> [30][Switches]"switch" @ { SwitchItem ; "," } ";"

[29][Switches] END [ENDING]
[RULE: 5][CLAUSE: -1]

[30][Switches]"switch" @ { SwitchItem ; "," } ";"
[RULE: 5][CLAUSE: 0]
	token: ";" -> [32][Switches]"switch" { SwitchItem ; "," } ";" @
	token: "!" -> [25][SwitchItem]< "!" @ ID >
		- BeginObject(SwitchItem)
		> rule: SwitchItem -> [33][Switches]"switch" { SwitchItem @ ; "," } ";"
			+ Field(SyntaxFile::switches)
	token: ID -> [27][SwitchItem]< ID @ >
		- BeginObject(SwitchItem)
		+ Token()
		+ Field(SwitchItem::name)
		> rule: SwitchItem -> [33][Switches]"switch" { SwitchItem @ ; "," } ";"
			+ Field(SyntaxFile::switches)

[31][Switches]"switch" { SwitchItem ; "," @ } ";"
[RULE: 5][CLAUSE: 0]
	token: "!" -> [25][SwitchItem]< "!" @ ID >
		- BeginObject(SwitchItem)
		> rule: SwitchItem -> [33][Switches]"switch" { SwitchItem @ ; "," } ";"
			+ Field(SyntaxFile::switches)
	token: ID -> [27][SwitchItem]< ID @ >
		- BeginObject(SwitchItem)
		+ Token()
		+ Field(SwitchItem::name)
		> rule: SwitchItem -> [33][Switches]"switch" { SwitchItem @ ; "," } ";"
			+ Field(SyntaxFile::switches)

[32][Switches]"switch" { SwitchItem ; "," } ";" @
[RULE: 5][CLAUSE: 0]
	ending -> [29][Switches] END [ENDING]

[33][Switches]"switch" { SwitchItem @ ; "," } ";"
[RULE: 5][CLAUSE: 0]
	token: "," -> [31][Switches]"switch" { SwitchItem ; "," @ } ";"
	token: ";" -> [32][Switches]"switch" { SwitchItem ; "," } ";" @

[34][OptionalBody] BEGIN 
[RULE: 6][CLAUSE: -1]
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"

[35][OptionalBody] END [ENDING]
[RULE: 6][CLAUSE: -1]

[36][OptionalBody]"[" @ Syntax "]"
[RULE: 6][CLAUSE: 0]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [38][OptionalBody]"[" Syntax @ "]"
			+ Field(OptionalSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[37][OptionalBody]"[" Syntax "]" @
[RULE: 6][CLAUSE: 0]
	ending -> [35][OptionalBody] END [ENDING]

[38][OptionalBody]"[" Syntax @ "]"
[RULE: 6][CLAUSE: 0]
	token: "]" -> [37][OptionalBody]"[" Syntax "]" @

[39][TestBranch] BEGIN 
[RULE: 7][CLAUSE: -1]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[40][TestBranch] END [ENDING]
[RULE: 7][CLAUSE: -1]

[41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
[RULE: 7][CLAUSE: 0]
	ending -> [40][TestBranch] END [ENDING]
		- EndObject()

[42][TestBranch]< Cond ":" ( Syntax1 | ";" @ ) >
[RULE: 7][CLAUSE: 0]
	ending -> [40][TestBranch] END [ENDING]
		- EndObject()

[43][TestBranch]< Cond ":" @ ( Syntax1 | ";" ) >
[RULE: 7][CLAUSE: 0]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ";" -> [42][TestBranch]< Cond ":" ( Syntax1 | ";" @ ) >
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [41][TestBranch]< Cond ":" ( Syntax1 @ | ";" ) >
			+ Field(TestConditionBranch::syntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
[RULE: 7][CLAUSE: 0]
	token: ":" -> [43][TestBranch]< Cond ":" @ ( Syntax1 | ";" ) >

[45][Token] BEGIN 
[RULE: 8][CLAUSE: -1]
	token: ID -> [48][Token]ID @
		+ Token()
		+ Field(RefSyntax::literal)
	token: STRING -> [49][Token]STRING @
		+ Token()
		+ Field(RefSyntax::literal)
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		+ Token()
		+ Field(RefSyntax::literal)

[46][Token] END [ENDING]
[RULE: 8][CLAUSE: -1]

[47][Token]CONDITIONAL_LITERAL @
[RULE: 8][CLAUSE: 2]
	ending -> [46][Token] END [ENDING]
		- EnumItem(2)
		- Field(RefSyntax::refType)

[48][Token]ID @
[RULE: 8][CLAUSE: 0]
	ending -> [46][Token] END [ENDING]
		- EnumItem(0)
		- Field(RefSyntax::refType)

[49][Token]STRING @
[RULE: 8][CLAUSE: 1]
	ending -> [46][Token] END [ENDING]
		- EnumItem(1)
		- Field(RefSyntax::refType)

[50][Syntax0] BEGIN 
[RULE: 9][CLAUSE: -1]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(OptionalSyntax)
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(LoopSyntax)
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(PushConditionSyntax)
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(TestConditionSyntax)
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(UseSyntax)
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(OptionalSyntax)
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(OptionalSyntax)
	token: ID -> [48][Token]ID @
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[51][Syntax0] END [ENDING]
[RULE: 9][CLAUSE: -1]

[52][Syntax0]< "!" @ ID >
[RULE: 9][CLAUSE: 1]
	token: ID -> [53][Syntax0]< "!" ID @ >
		+ Token()
		+ Field(UseSyntax::name)

[53][Syntax0]< "!" ID @ >
[RULE: 9][CLAUSE: 1]
	ending -> [51][Syntax0] END [ENDING]
		- EndObject()

[54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
[RULE: 9][CLAUSE: 6]
	token: ";" -> [56][Syntax0]< "!(" { SwitchItem ; "," } ";" @ Syntax ")" >
	token: "!" -> [25][SwitchItem]< "!" @ ID >
		- BeginObject(SwitchItem)
		> rule: SwitchItem -> [59][Syntax0]< "!(" { SwitchItem @ ; "," } ";" Syntax ")" >
			+ Field(PushConditionSyntax::switches)
	token: ID -> [27][SwitchItem]< ID @ >
		- BeginObject(SwitchItem)
		+ Token()
		+ Field(SwitchItem::name)
		> rule: SwitchItem -> [59][Syntax0]< "!(" { SwitchItem @ ; "," } ";" Syntax ")" >
			+ Field(PushConditionSyntax::switches)

[55][Syntax0]< "!(" { SwitchItem ; "," @ } ";" Syntax ")" >
[RULE: 9][CLAUSE: 6]
	token: "!" -> [25][SwitchItem]< "!" @ ID >
		- BeginObject(SwitchItem)
		> rule: SwitchItem -> [59][Syntax0]< "!(" { SwitchItem @ ; "," } ";" Syntax ")" >
			+ Field(PushConditionSyntax::switches)
	token: ID -> [27][SwitchItem]< ID @ >
		- BeginObject(SwitchItem)
		+ Token()
		+ Field(SwitchItem::name)
		> rule: SwitchItem -> [59][Syntax0]< "!(" { SwitchItem @ ; "," } ";" Syntax ")" >
			+ Field(PushConditionSyntax::switches)

[56][Syntax0]< "!(" { SwitchItem ; "," } ";" @ Syntax ")" >
[RULE: 9][CLAUSE: 6]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
			+ Field(PushConditionSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[57][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax ")" @ >
[RULE: 9][CLAUSE: 6]
	ending -> [51][Syntax0] END [ENDING]
		- EndObject()

[58][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax @ ")" >
[RULE: 9][CLAUSE: 6]
	token: ")" -> [57][Syntax0]< "!(" { SwitchItem ; "," } ";" Syntax ")" @ >

[59][Syntax0]< "!(" { SwitchItem @ ; "," } ";" Syntax ")" >
[RULE: 9][CLAUSE: 6]
	token: "," -> [55][Syntax0]< "!(" { SwitchItem ; "," @ } ";" Syntax ")" >
	token: ";" -> [56][Syntax0]< "!(" { SwitchItem ; "," } ";" @ Syntax ")" >

[60][Syntax0]< "+" @ OptionalBody >
[RULE: 9][CLAUSE: 3]
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		> rule: OptionalBody -> [61][Syntax0]< "+" OptionalBody @ >

[61][Syntax0]< "+" OptionalBody @ >
[RULE: 9][CLAUSE: 3]
	ending -> [51][Syntax0] END [ENDING]
		- EnumItem(1)
		- Field(OptionalSyntax::priority)
		- EndObject()

[62][Syntax0]< "-" @ OptionalBody >
[RULE: 9][CLAUSE: 4]
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		> rule: OptionalBody -> [63][Syntax0]< "-" OptionalBody @ >

[63][Syntax0]< "-" OptionalBody @ >
[RULE: 9][CLAUSE: 4]
	ending -> [51][Syntax0] END [ENDING]
		- EnumItem(2)
		- Field(OptionalSyntax::priority)
		- EndObject()

[64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
[RULE: 9][CLAUSE: 7]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: TestBranch -> [65][Syntax0]< "?(" TestBranch @ { "|" TestBranch } ")" >
			+ Field(TestConditionSyntax::branches)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: TestBranch -> [65][Syntax0]< "?(" TestBranch @ { "|" TestBranch } ")" >
			+ Field(TestConditionSyntax::branches)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: TestBranch -> [65][Syntax0]< "?(" TestBranch @ { "|" TestBranch } ")" >
			+ Field(TestConditionSyntax::branches)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[65][Syntax0]< "?(" TestBranch @ { "|" TestBranch } ")" >
[RULE: 9][CLAUSE: 7]
	token: ")" -> [68][Syntax0]< "?(" TestBranch { "|" TestBranch } ")" @ >
	token: "|" -> [66][Syntax0]< "?(" TestBranch { "|" @ TestBranch } ")" >

[66][Syntax0]< "?(" TestBranch { "|" @ TestBranch } ")" >
[RULE: 9][CLAUSE: 7]
	token: "(" -> [7][Cond0]<< "(" @ !Cond ")" >>
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: TestBranch -> [67][Syntax0]< "?(" TestBranch { "|" TestBranch @ } ")" >
			+ Field(TestConditionSyntax::branches)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: "!" -> [2][Cond0]< "!" @ Cond0 >
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(NotCondition)
		> rule: TestBranch -> [67][Syntax0]< "?(" TestBranch { "|" TestBranch @ } ")" >
			+ Field(TestConditionSyntax::branches)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()
	token: ID -> [4][Cond0]< ID @ >
		- BeginObject(TestConditionBranch)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefCondition)
		+ Token()
		+ Field(RefCondition::name)
		> rule: TestBranch -> [67][Syntax0]< "?(" TestBranch { "|" TestBranch @ } ")" >
			+ Field(TestConditionSyntax::branches)
		> rule: Cond -> [44][TestBranch]< Cond @ ":" ( Syntax1 | ";" ) >
			+ Field(TestConditionBranch::condition)
		> rule: Cond2 -> [22][Cond]<< !Cond2 @ >>
		> rule: Cond1 -> [19][Cond2]<< !Cond1 @ >>
			+ ReopenObject()
		> rule: Cond0 -> [13][Cond1]<< !Cond0 @ >>
			+ ReopenObject()

[67][Syntax0]< "?(" TestBranch { "|" TestBranch @ } ")" >
[RULE: 9][CLAUSE: 7]
	token: ")" -> [68][Syntax0]< "?(" TestBranch { "|" TestBranch } ")" @ >
	token: "|" -> [66][Syntax0]< "?(" TestBranch { "|" @ TestBranch } ")" >

[68][Syntax0]< "?(" TestBranch { "|" TestBranch } ")" @ >
[RULE: 9][CLAUSE: 7]
	ending -> [51][Syntax0] END [ENDING]
		- EndObject()

[69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
[RULE: 9][CLAUSE: 2]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
			+ Field(LoopSyntax::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[70][Syntax0]< "{" Syntax @ [ ";" Syntax ] "}" >
[RULE: 9][CLAUSE: 2]
	token: "}" -> [73][Syntax0]< "{" Syntax [ ";" Syntax ] "}" @ >
	token: ";" -> [71][Syntax0]< "{" Syntax [ ";" @ Syntax ] "}" >

[71][Syntax0]< "{" Syntax [ ";" @ Syntax ] "}" >
[RULE: 9][CLAUSE: 2]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
			+ Field(LoopSyntax::delimiter)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[72][Syntax0]< "{" Syntax [ ";" Syntax @ ] "}" >
[RULE: 9][CLAUSE: 2]
	token: "}" -> [73][Syntax0]< "{" Syntax [ ";" Syntax ] "}" @ >

[73][Syntax0]< "{" Syntax [ ";" Syntax ] "}" @ >
[RULE: 9][CLAUSE: 2]
	ending -> [51][Syntax0] END [ENDING]
		- EndObject()

[74][Syntax0]< OptionalBody @ >
[RULE: 9][CLAUSE: 5]
	ending -> [51][Syntax0] END [ENDING]
		- EnumItem(0)
		- Field(OptionalSyntax::priority)
		- EndObject()

[75][Syntax0]< Token @ [ ":" ID ] >
[RULE: 9][CLAUSE: 0]
	ending -> [51][Syntax0] END [ENDING]
		- EndObject()
	token: ":" -> [76][Syntax0]< Token [ ":" @ ID ] >

[76][Syntax0]< Token [ ":" @ ID ] >
[RULE: 9][CLAUSE: 0]
	token: ID -> [77][Syntax0]< Token [ ":" ID @ ] >
		+ Token()
		+ Field(RefSyntax::field)

[77][Syntax0]< Token [ ":" ID @ ] >
[RULE: 9][CLAUSE: 0]
	ending -> [51][Syntax0] END [ENDING]
		- EndObject()

[78][Syntax0]<< "(" !Syntax ")" @ >>
[RULE: 9][CLAUSE: 8]
	ending -> [51][Syntax0] END [ENDING]
		- EndObject()

[79][Syntax0]<< "(" !Syntax @ ")" >>
[RULE: 9][CLAUSE: 8]
	token: ")" -> [78][Syntax0]<< "(" !Syntax ")" @ >>

[80][Syntax0]<< "(" @ !Syntax ")" >>
[RULE: 9][CLAUSE: 8]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [79][Syntax0]<< "(" !Syntax @ ")" >>
			+ ReopenObject()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[81][Syntax1] BEGIN 
[RULE: 10][CLAUSE: -1]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[82][Syntax1] END [ENDING]
[RULE: 10][CLAUSE: -1]

[83][Syntax1]< Syntax1 @ Syntax0 >
[RULE: 10][CLAUSE: 1]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(OptionalSyntax)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(LoopSyntax)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(PushConditionSyntax)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(TestConditionSyntax)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(UseSyntax)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(OptionalSyntax)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(OptionalSyntax)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
	token: ID -> [48][Token]ID @
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax0 -> [84][Syntax1]< Syntax1 Syntax0 @ >
			+ Field(SequenceSyntax::second)
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[84][Syntax1]< Syntax1 Syntax0 @ >
[RULE: 10][CLAUSE: 1]
	ending -> [82][Syntax1] END [ENDING]
		- EndObject()
	leftrec -> [83][Syntax1]< Syntax1 @ Syntax0 >
		- EndObject()
		- LriStore()
		- BeginObject(SequenceSyntax)
		- LriFetch()
		+ Field(SequenceSyntax::first)

[85][Syntax1]<< !Syntax0 @ >>
[RULE: 10][CLAUSE: 0]
	ending -> [82][Syntax1] END [ENDING]
		- EndObject()
	leftrec -> [83][Syntax1]< Syntax1 @ Syntax0 >
		- EndObject()
		- LriStore()
		- BeginObject(SequenceSyntax)
		- LriFetch()
		+ Field(SequenceSyntax::first)

[86][Syntax2] BEGIN 
[RULE: 11][CLAUSE: -1]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[87][Syntax2] END [ENDING]
[RULE: 11][CLAUSE: -1]

[88][Syntax2]< Syntax2 "|" @ Syntax1 >
[RULE: 11][CLAUSE: 1]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax1 -> [89][Syntax2]< Syntax2 "|" Syntax1 @ >
			+ Field(AlternativeSyntax::second)
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[89][Syntax2]< Syntax2 "|" Syntax1 @ >
[RULE: 11][CLAUSE: 1]
	ending -> [87][Syntax2] END [ENDING]
		- EndObject()
	leftrec -> [90][Syntax2]< Syntax2 @ "|" Syntax1 >
		- EndObject()
		- LriStore()
		- BeginObject(AlternativeSyntax)
		- LriFetch()
		+ Field(AlternativeSyntax::first)

[90][Syntax2]< Syntax2 @ "|" Syntax1 >
[RULE: 11][CLAUSE: 1]
	token: "|" -> [88][Syntax2]< Syntax2 "|" @ Syntax1 >

[91][Syntax2]<< !Syntax1 @ >>
[RULE: 11][CLAUSE: 0]
	ending -> [87][Syntax2] END [ENDING]
		- EndObject()
	leftrec -> [90][Syntax2]< Syntax2 @ "|" Syntax1 >
		- EndObject()
		- LriStore()
		- BeginObject(AlternativeSyntax)
		- LriFetch()
		+ Field(AlternativeSyntax::first)

[92][Syntax] BEGIN 
[RULE: 12][CLAUSE: -1]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: ID -> [48][Token]ID @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[93][Syntax] END [ENDING]
[RULE: 12][CLAUSE: -1]

[94][Syntax]<< !Syntax2 @ >>
[RULE: 12][CLAUSE: 0]
	ending -> [93][Syntax] END [ENDING]
		- ReopenObject()
		- EndObject()

[95][AssignmentOp] BEGIN 
[RULE: 13][CLAUSE: -1]
	token: "=" -> [97][AssignmentOp]"=" @
	token: "?=" -> [98][AssignmentOp]"?=" @

[96][AssignmentOp] END [ENDING]
[RULE: 13][CLAUSE: -1]

[97][AssignmentOp]"=" @
[RULE: 13][CLAUSE: 0]
	ending -> [96][AssignmentOp] END [ENDING]
		- EnumItem(0)
		- Field(Assignment::type)

[98][AssignmentOp]"?=" @
[RULE: 13][CLAUSE: 1]
	ending -> [96][AssignmentOp] END [ENDING]
		- EnumItem(1)
		- Field(Assignment::type)

[99][Assignment] BEGIN 
[RULE: 14][CLAUSE: -1]
	token: ID -> [101][Assignment]< ID @ AssignmentOp ID >
		- BeginObject(Assignment)
		+ Token()
		+ Field(Assignment::field)

[100][Assignment] END [ENDING]
[RULE: 14][CLAUSE: -1]

[101][Assignment]< ID @ AssignmentOp ID >
[RULE: 14][CLAUSE: 0]
	token: "=" -> [97][AssignmentOp]"=" @
		> rule: AssignmentOp -> [102][Assignment]< ID AssignmentOp @ ID >
	token: "?=" -> [98][AssignmentOp]"?=" @
		> rule: AssignmentOp -> [102][Assignment]< ID AssignmentOp @ ID >

[102][Assignment]< ID AssignmentOp @ ID >
[RULE: 14][CLAUSE: 0]
	token: ID -> [103][Assignment]< ID AssignmentOp ID @ >
		+ Token()
		+ Field(Assignment::value)

[103][Assignment]< ID AssignmentOp ID @ >
[RULE: 14][CLAUSE: 0]
	ending -> [100][Assignment] END [ENDING]
		- EndObject()

[104][Clause] BEGIN 
[RULE: 15][CLAUSE: -1]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [110][Clause]< "!" @ "prefix_merge" "(" RuleName ")" >
		- BeginObject(PrefixMergeClause)
	token: "!" -> [111][Clause]< "!" @ RuleName LriContinuation >
		- BeginObject(LeftRecursionInjectClause)
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "left_recursion_placeholder" -> [119][Clause]< "left_recursion_placeholder" @ "(" Placeholder { "," Placeholder } ")" >
		- BeginObject(LeftRecursionPlaceholderClause)
	token: ID -> [48][Token]ID @
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: ID -> [48][Token]ID @
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: ID -> [48][Token]ID @
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[105][Clause] END [ENDING]
[RULE: 15][CLAUSE: -1]

[106][Clause]< "!" "prefix_merge" "(" @ RuleName ")" >
[RULE: 15][CLAUSE: 5]
	token: ID -> [145][RuleName]< ID @ >
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: RuleName -> [108][Clause]< "!" "prefix_merge" "(" RuleName @ ")" >
			+ Field(PrefixMergeClause::rule)

[107][Clause]< "!" "prefix_merge" "(" RuleName ")" @ >
[RULE: 15][CLAUSE: 5]
	ending -> [105][Clause] END [ENDING]
		- EndObject()

[108][Clause]< "!" "prefix_merge" "(" RuleName @ ")" >
[RULE: 15][CLAUSE: 5]
	token: ")" -> [107][Clause]< "!" "prefix_merge" "(" RuleName ")" @ >

[109][Clause]< "!" "prefix_merge" @ "(" RuleName ")" >
[RULE: 15][CLAUSE: 5]
	token: "(" -> [106][Clause]< "!" "prefix_merge" "(" @ RuleName ")" >

[110][Clause]< "!" @ "prefix_merge" "(" RuleName ")" >
[RULE: 15][CLAUSE: 5]
	token: "prefix_merge" -> [109][Clause]< "!" "prefix_merge" @ "(" RuleName ")" >

[111][Clause]< "!" @ RuleName LriContinuation >
[RULE: 15][CLAUSE: 4]
	token: ID -> [145][RuleName]< ID @ >
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: RuleName -> [112][Clause]< "!" RuleName @ LriContinuation >
			+ Field(LeftRecursionInjectClause::rule)

[112][Clause]< "!" RuleName @ LriContinuation >
[RULE: 15][CLAUSE: 4]
	token: "[" -> [163][LriContinuation]< "[" @ LriContinuationBody "]" >
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuation -> [113][Clause]< "!" RuleName LriContinuation @ >
			+ Field(LeftRecursionInjectClause::continuation)
	token: "left_recursion_inject" -> [148][LriConfig]"left_recursion_inject" @
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuation -> [113][Clause]< "!" RuleName LriContinuation @ >
			+ Field(LeftRecursionInjectClause::continuation)
		> rule: LriContinuationBody -> [166][LriContinuation]< LriContinuationBody @ >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }
	token: "left_recursion_inject_multiple" -> [149][LriConfig]"left_recursion_inject_multiple" @
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuation -> [113][Clause]< "!" RuleName LriContinuation @ >
			+ Field(LeftRecursionInjectClause::continuation)
		> rule: LriContinuationBody -> [166][LriContinuation]< LriContinuationBody @ >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }

[113][Clause]< "!" RuleName LriContinuation @ >
[RULE: 15][CLAUSE: 4]
	ending -> [105][Clause] END [ENDING]
		- EndObject()

[114][Clause]< "left_recursion_placeholder" "(" @ Placeholder { "," Placeholder } ")" >
[RULE: 15][CLAUSE: 3]
	token: ID -> [142][Placeholder]< ID @ >
		- BeginObject(LeftRecursionPlaceholder)
		+ Token()
		+ Field(LeftRecursionPlaceholder::flag)
		> rule: Placeholder -> [115][Clause]< "left_recursion_placeholder" "(" Placeholder @ { "," Placeholder } ")" >
			+ Field(LeftRecursionPlaceholderClause::flags)

[115][Clause]< "left_recursion_placeholder" "(" Placeholder @ { "," Placeholder } ")" >
[RULE: 15][CLAUSE: 3]
	token: ")" -> [118][Clause]< "left_recursion_placeholder" "(" Placeholder { "," Placeholder } ")" @ >
	token: "," -> [116][Clause]< "left_recursion_placeholder" "(" Placeholder { "," @ Placeholder } ")" >

[116][Clause]< "left_recursion_placeholder" "(" Placeholder { "," @ Placeholder } ")" >
[RULE: 15][CLAUSE: 3]
	token: ID -> [142][Placeholder]< ID @ >
		- BeginObject(LeftRecursionPlaceholder)
		+ Token()
		+ Field(LeftRecursionPlaceholder::flag)
		> rule: Placeholder -> [117][Clause]< "left_recursion_placeholder" "(" Placeholder { "," Placeholder @ } ")" >
			+ Field(LeftRecursionPlaceholderClause::flags)

[117][Clause]< "left_recursion_placeholder" "(" Placeholder { "," Placeholder @ } ")" >
[RULE: 15][CLAUSE: 3]
	token: ")" -> [118][Clause]< "left_recursion_placeholder" "(" Placeholder { "," Placeholder } ")" @ >
	token: "," -> [116][Clause]< "left_recursion_placeholder" "(" Placeholder { "," @ Placeholder } ")" >

[118][Clause]< "left_recursion_placeholder" "(" Placeholder { "," Placeholder } ")" @ >
[RULE: 15][CLAUSE: 3]
	ending -> [105][Clause] END [ENDING]
		- EndObject()

[119][Clause]< "left_recursion_placeholder" @ "(" Placeholder { "," Placeholder } ")" >
[RULE: 15][CLAUSE: 3]
	token: "(" -> [114][Clause]< "left_recursion_placeholder" "(" @ Placeholder { "," Placeholder } ")" >

[120][Clause]< Syntax "as" "partial" @ ID [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 1]
	token: ID -> [121][Clause]< Syntax "as" "partial" ID @ [ "{" { Assignment ; "," } "}" ] >
		+ Token()
		+ Field(PartialClause::type)

[121][Clause]< Syntax "as" "partial" ID @ [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 1]
	ending -> [105][Clause] END [ENDING]
		- EndObject()
	token: "{" -> [122][Clause]< Syntax "as" "partial" ID [ "{" @ { Assignment ; "," } "}" ] >

[122][Clause]< Syntax "as" "partial" ID [ "{" @ { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 1]
	token: "}" -> [124][Clause]< Syntax "as" "partial" ID [ "{" { Assignment ; "," } "}" @ ] >
	token: ID -> [101][Assignment]< ID @ AssignmentOp ID >
		- BeginObject(Assignment)
		+ Token()
		+ Field(Assignment::field)
		> rule: Assignment -> [125][Clause]< Syntax "as" "partial" ID [ "{" { Assignment @ ; "," } "}" ] >
			+ Field(PartialClause::assignments)

[123][Clause]< Syntax "as" "partial" ID [ "{" { Assignment ; "," @ } "}" ] >
[RULE: 15][CLAUSE: 1]
	token: ID -> [101][Assignment]< ID @ AssignmentOp ID >
		- BeginObject(Assignment)
		+ Token()
		+ Field(Assignment::field)
		> rule: Assignment -> [125][Clause]< Syntax "as" "partial" ID [ "{" { Assignment @ ; "," } "}" ] >
			+ Field(PartialClause::assignments)

[124][Clause]< Syntax "as" "partial" ID [ "{" { Assignment ; "," } "}" @ ] >
[RULE: 15][CLAUSE: 1]
	ending -> [105][Clause] END [ENDING]
		- EndObject()

[125][Clause]< Syntax "as" "partial" ID [ "{" { Assignment @ ; "," } "}" ] >
[RULE: 15][CLAUSE: 1]
	token: "}" -> [124][Clause]< Syntax "as" "partial" ID [ "{" { Assignment ; "," } "}" @ ] >
	token: "," -> [123][Clause]< Syntax "as" "partial" ID [ "{" { Assignment ; "," @ } "}" ] >

[126][Clause]< Syntax "as" @ "partial" ID [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 1]
	token: "partial" -> [120][Clause]< Syntax "as" "partial" @ ID [ "{" { Assignment ; "," } "}" ] >

[127][Clause]< Syntax "as" @ ID [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 0]
	token: ID -> [128][Clause]< Syntax "as" ID @ [ "{" { Assignment ; "," } "}" ] >
		+ Token()
		+ Field(CreateClause::type)

[128][Clause]< Syntax "as" ID @ [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 0]
	ending -> [105][Clause] END [ENDING]
		- EndObject()
	token: "{" -> [129][Clause]< Syntax "as" ID [ "{" @ { Assignment ; "," } "}" ] >

[129][Clause]< Syntax "as" ID [ "{" @ { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 0]
	token: "}" -> [131][Clause]< Syntax "as" ID [ "{" { Assignment ; "," } "}" @ ] >
	token: ID -> [101][Assignment]< ID @ AssignmentOp ID >
		- BeginObject(Assignment)
		+ Token()
		+ Field(Assignment::field)
		> rule: Assignment -> [132][Clause]< Syntax "as" ID [ "{" { Assignment @ ; "," } "}" ] >
			+ Field(CreateClause::assignments)

[130][Clause]< Syntax "as" ID [ "{" { Assignment ; "," @ } "}" ] >
[RULE: 15][CLAUSE: 0]
	token: ID -> [101][Assignment]< ID @ AssignmentOp ID >
		- BeginObject(Assignment)
		+ Token()
		+ Field(Assignment::field)
		> rule: Assignment -> [132][Clause]< Syntax "as" ID [ "{" { Assignment @ ; "," } "}" ] >
			+ Field(CreateClause::assignments)

[131][Clause]< Syntax "as" ID [ "{" { Assignment ; "," } "}" @ ] >
[RULE: 15][CLAUSE: 0]
	ending -> [105][Clause] END [ENDING]
		- EndObject()

[132][Clause]< Syntax "as" ID [ "{" { Assignment @ ; "," } "}" ] >
[RULE: 15][CLAUSE: 0]
	token: "}" -> [131][Clause]< Syntax "as" ID [ "{" { Assignment ; "," } "}" @ ] >
	token: "," -> [130][Clause]< Syntax "as" ID [ "{" { Assignment ; "," @ } "}" ] >

[133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 1]
	token: "as" -> [126][Clause]< Syntax "as" @ "partial" ID [ "{" { Assignment ; "," } "}" ] >

[134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 0]
	token: "as" -> [127][Clause]< Syntax "as" @ ID [ "{" { Assignment ; "," } "}" ] >

[135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 2]
	ending -> [105][Clause] END [ENDING]
		- EndObject()
	token: "{" -> [136][Clause]< Syntax [ "{" @ { Assignment ; "," } "}" ] >

[136][Clause]< Syntax [ "{" @ { Assignment ; "," } "}" ] >
[RULE: 15][CLAUSE: 2]
	token: "}" -> [138][Clause]< Syntax [ "{" { Assignment ; "," } "}" @ ] >
	token: ID -> [101][Assignment]< ID @ AssignmentOp ID >
		- BeginObject(Assignment)
		+ Token()
		+ Field(Assignment::field)
		> rule: Assignment -> [139][Clause]< Syntax [ "{" { Assignment @ ; "," } "}" ] >
			+ Field(ReuseClause::assignments)

[137][Clause]< Syntax [ "{" { Assignment ; "," @ } "}" ] >
[RULE: 15][CLAUSE: 2]
	token: ID -> [101][Assignment]< ID @ AssignmentOp ID >
		- BeginObject(Assignment)
		+ Token()
		+ Field(Assignment::field)
		> rule: Assignment -> [139][Clause]< Syntax [ "{" { Assignment @ ; "," } "}" ] >
			+ Field(ReuseClause::assignments)

[138][Clause]< Syntax [ "{" { Assignment ; "," } "}" @ ] >
[RULE: 15][CLAUSE: 2]
	ending -> [105][Clause] END [ENDING]
		- EndObject()

[139][Clause]< Syntax [ "{" { Assignment @ ; "," } "}" ] >
[RULE: 15][CLAUSE: 2]
	token: "}" -> [138][Clause]< Syntax [ "{" { Assignment ; "," } "}" @ ] >
	token: "," -> [137][Clause]< Syntax [ "{" { Assignment ; "," @ } "}" ] >

[140][Placeholder] BEGIN 
[RULE: 16][CLAUSE: -1]
	token: ID -> [142][Placeholder]< ID @ >
		- BeginObject(LeftRecursionPlaceholder)
		+ Token()
		+ Field(LeftRecursionPlaceholder::flag)

[141][Placeholder] END [ENDING]
[RULE: 16][CLAUSE: -1]

[142][Placeholder]< ID @ >
[RULE: 16][CLAUSE: 0]
	ending -> [141][Placeholder] END [ENDING]
		- EndObject()

[143][RuleName] BEGIN 
[RULE: 17][CLAUSE: -1]
	token: ID -> [145][RuleName]< ID @ >
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)

[144][RuleName] END [ENDING]
[RULE: 17][CLAUSE: -1]

[145][RuleName]< ID @ >
[RULE: 17][CLAUSE: 0]
	ending -> [144][RuleName] END [ENDING]
		- EnumItem(0)
		- Field(RefSyntax::refType)
		- EndObject()

[146][LriConfig] BEGIN 
[RULE: 18][CLAUSE: -1]
	token: "left_recursion_inject" -> [148][LriConfig]"left_recursion_inject" @
	token: "left_recursion_inject_multiple" -> [149][LriConfig]"left_recursion_inject_multiple" @

[147][LriConfig] END [ENDING]
[RULE: 18][CLAUSE: -1]

[148][LriConfig]"left_recursion_inject" @
[RULE: 18][CLAUSE: 0]
	ending -> [147][LriConfig] END [ENDING]
		- EnumItem(0)
		- Field(LeftRecursionInjectContinuation::configuration)

[149][LriConfig]"left_recursion_inject_multiple" @
[RULE: 18][CLAUSE: 1]
	ending -> [147][LriConfig] END [ENDING]
		- EnumItem(1)
		- Field(LeftRecursionInjectContinuation::configuration)

[150][LriContinuationBody] BEGIN 
[RULE: 19][CLAUSE: -1]
	token: "left_recursion_inject" -> [148][LriConfig]"left_recursion_inject" @
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }
	token: "left_recursion_inject_multiple" -> [149][LriConfig]"left_recursion_inject_multiple" @
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }

[151][LriContinuationBody] END [ENDING]
[RULE: 19][CLAUSE: -1]

[152][LriContinuationBody]LriConfig "(" @ Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }
[RULE: 19][CLAUSE: 0]
	token: ID -> [142][Placeholder]< ID @ >
		- BeginObject(LeftRecursionPlaceholder)
		+ Token()
		+ Field(LeftRecursionPlaceholder::flag)
		> rule: Placeholder -> [153][LriContinuationBody]LriConfig "(" Placeholder @ { "," Placeholder } ")" LriTarget { "|" LriTarget }
			+ Field(LeftRecursionInjectContinuation::flags)

[153][LriContinuationBody]LriConfig "(" Placeholder @ { "," Placeholder } ")" LriTarget { "|" LriTarget }
[RULE: 19][CLAUSE: 0]
	token: ")" -> [156][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" @ LriTarget { "|" LriTarget }
	token: "," -> [154][LriContinuationBody]LriConfig "(" Placeholder { "," @ Placeholder } ")" LriTarget { "|" LriTarget }

[154][LriContinuationBody]LriConfig "(" Placeholder { "," @ Placeholder } ")" LriTarget { "|" LriTarget }
[RULE: 19][CLAUSE: 0]
	token: ID -> [142][Placeholder]< ID @ >
		- BeginObject(LeftRecursionPlaceholder)
		+ Token()
		+ Field(LeftRecursionPlaceholder::flag)
		> rule: Placeholder -> [155][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder @ } ")" LriTarget { "|" LriTarget }
			+ Field(LeftRecursionInjectContinuation::flags)

[155][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder @ } ")" LriTarget { "|" LriTarget }
[RULE: 19][CLAUSE: 0]
	token: ")" -> [156][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" @ LriTarget { "|" LriTarget }
	token: "," -> [154][LriContinuationBody]LriConfig "(" Placeholder { "," @ Placeholder } ")" LriTarget { "|" LriTarget }

[156][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" @ LriTarget { "|" LriTarget }
[RULE: 19][CLAUSE: 0]
	token: "(" -> [169][LriTarget]< "(" @ RuleName LriContinuation ")" >
		- BeginObject(LeftRecursionInjectClause)
		> rule: LriTarget -> [157][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget @ { "|" LriTarget }
			+ Field(LeftRecursionInjectContinuation::injectionTargets)
	token: ID -> [145][RuleName]< ID @ >
		- BeginObject(LeftRecursionInjectClause)
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: LriTarget -> [157][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget @ { "|" LriTarget }
			+ Field(LeftRecursionInjectContinuation::injectionTargets)
		> rule: RuleName -> [173][LriTarget]< RuleName @ >

[157][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget @ { "|" LriTarget }
[RULE: 19][CLAUSE: 0]
	ending -> [151][LriContinuationBody] END [ENDING]
	token: "|" -> [158][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget { "|" @ LriTarget }

[158][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget { "|" @ LriTarget }
[RULE: 19][CLAUSE: 0]
	token: "(" -> [169][LriTarget]< "(" @ RuleName LriContinuation ")" >
		- BeginObject(LeftRecursionInjectClause)
		> rule: LriTarget -> [159][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget @ }
			+ Field(LeftRecursionInjectContinuation::injectionTargets)
	token: ID -> [145][RuleName]< ID @ >
		- BeginObject(LeftRecursionInjectClause)
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: LriTarget -> [159][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget @ }
			+ Field(LeftRecursionInjectContinuation::injectionTargets)
		> rule: RuleName -> [173][LriTarget]< RuleName @ >

[159][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget @ }
[RULE: 19][CLAUSE: 0]
	ending -> [151][LriContinuationBody] END [ENDING]
	token: "|" -> [158][LriContinuationBody]LriConfig "(" Placeholder { "," Placeholder } ")" LriTarget { "|" @ LriTarget }

[160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }
[RULE: 19][CLAUSE: 0]
	token: "(" -> [152][LriContinuationBody]LriConfig "(" @ Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }

[161][LriContinuation] BEGIN 
[RULE: 20][CLAUSE: -1]
	token: "[" -> [163][LriContinuation]< "[" @ LriContinuationBody "]" >
		- BeginObject(LeftRecursionInjectContinuation)
	token: "left_recursion_inject" -> [148][LriConfig]"left_recursion_inject" @
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuationBody -> [166][LriContinuation]< LriContinuationBody @ >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }
	token: "left_recursion_inject_multiple" -> [149][LriConfig]"left_recursion_inject_multiple" @
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuationBody -> [166][LriContinuation]< LriContinuationBody @ >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }

[162][LriContinuation] END [ENDING]
[RULE: 20][CLAUSE: -1]

[163][LriContinuation]< "[" @ LriContinuationBody "]" >
[RULE: 20][CLAUSE: 1]
	token: "left_recursion_inject" -> [148][LriConfig]"left_recursion_inject" @
		> rule: LriContinuationBody -> [165][LriContinuation]< "[" LriContinuationBody @ "]" >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }
	token: "left_recursion_inject_multiple" -> [149][LriConfig]"left_recursion_inject_multiple" @
		> rule: LriContinuationBody -> [165][LriContinuation]< "[" LriContinuationBody @ "]" >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }

[164][LriContinuation]< "[" LriContinuationBody "]" @ >
[RULE: 20][CLAUSE: 1]
	ending -> [162][LriContinuation] END [ENDING]
		- EnumItem(0)
		- Field(LeftRecursionInjectContinuation::type)
		- EndObject()

[165][LriContinuation]< "[" LriContinuationBody @ "]" >
[RULE: 20][CLAUSE: 1]
	token: "]" -> [164][LriContinuation]< "[" LriContinuationBody "]" @ >

[166][LriContinuation]< LriContinuationBody @ >
[RULE: 20][CLAUSE: 0]
	ending -> [162][LriContinuation] END [ENDING]
		- EnumItem(1)
		- Field(LeftRecursionInjectContinuation::type)
		- EndObject()

[167][LriTarget] BEGIN 
[RULE: 21][CLAUSE: -1]
	token: "(" -> [169][LriTarget]< "(" @ RuleName LriContinuation ")" >
		- BeginObject(LeftRecursionInjectClause)
	token: ID -> [145][RuleName]< ID @ >
		- BeginObject(LeftRecursionInjectClause)
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: RuleName -> [173][LriTarget]< RuleName @ >

[168][LriTarget] END [ENDING]
[RULE: 21][CLAUSE: -1]

[169][LriTarget]< "(" @ RuleName LriContinuation ")" >
[RULE: 21][CLAUSE: 1]
	token: ID -> [145][RuleName]< ID @ >
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: RuleName -> [170][LriTarget]< "(" RuleName @ LriContinuation ")" >
			+ Field(LeftRecursionInjectClause::rule)

[170][LriTarget]< "(" RuleName @ LriContinuation ")" >
[RULE: 21][CLAUSE: 1]
	token: "[" -> [163][LriContinuation]< "[" @ LriContinuationBody "]" >
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuation -> [172][LriTarget]< "(" RuleName LriContinuation @ ")" >
			+ Field(LeftRecursionInjectClause::continuation)
	token: "left_recursion_inject" -> [148][LriConfig]"left_recursion_inject" @
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuation -> [172][LriTarget]< "(" RuleName LriContinuation @ ")" >
			+ Field(LeftRecursionInjectClause::continuation)
		> rule: LriContinuationBody -> [166][LriContinuation]< LriContinuationBody @ >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }
	token: "left_recursion_inject_multiple" -> [149][LriConfig]"left_recursion_inject_multiple" @
		- BeginObject(LeftRecursionInjectContinuation)
		> rule: LriContinuation -> [172][LriTarget]< "(" RuleName LriContinuation @ ")" >
			+ Field(LeftRecursionInjectClause::continuation)
		> rule: LriContinuationBody -> [166][LriContinuation]< LriContinuationBody @ >
		> rule: LriConfig -> [160][LriContinuationBody]LriConfig @ "(" Placeholder { "," Placeholder } ")" LriTarget { "|" LriTarget }

[171][LriTarget]< "(" RuleName LriContinuation ")" @ >
[RULE: 21][CLAUSE: 1]
	ending -> [168][LriTarget] END [ENDING]
		- EndObject()

[172][LriTarget]< "(" RuleName LriContinuation @ ")" >
[RULE: 21][CLAUSE: 1]
	token: ")" -> [171][LriTarget]< "(" RuleName LriContinuation ")" @ >

[173][LriTarget]< RuleName @ >
[RULE: 21][CLAUSE: 0]
	ending -> [168][LriTarget] END [ENDING]
		- Field(LeftRecursionInjectClause::rule)
		- EndObject()

[174][Rule] BEGIN 
[RULE: 22][CLAUSE: -1]
	token: "@public" -> [176][Rule]< [ "@public" @ ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
	token: "@parser" -> [177][Rule]< [ "@public" ] [ "@parser" @ ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
	token: ID -> [178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::name)

[175][Rule] END [ENDING]
[RULE: 22][CLAUSE: -1]

[176][Rule]< [ "@public" @ ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" >
[RULE: 22][CLAUSE: 0]
	token: "@parser" -> [177][Rule]< [ "@public" ] [ "@parser" @ ] ID [ ":" ID ] { "::=" Clause } ";" >
		+ Token()
		+ Field(Rule::attParser)
	token: ID -> [178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
		+ Token()
		+ Field(Rule::name)

[177][Rule]< [ "@public" ] [ "@parser" @ ] ID [ ":" ID ] { "::=" Clause } ";" >
[RULE: 22][CLAUSE: 0]
	token: ID -> [178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
		+ Token()
		+ Field(Rule::name)

[178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
[RULE: 22][CLAUSE: 0]
	token: ":" -> [179][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" @ ID ] { "::=" Clause } ";" >
	token: ";" -> [183][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" @ >
	token: "::=" -> [181][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" @ Clause } ";" >

[179][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" @ ID ] { "::=" Clause } ";" >
[RULE: 22][CLAUSE: 0]
	token: ID -> [180][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID @ ] { "::=" Clause } ";" >
		+ Token()
		+ Field(Rule::type)

[180][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID @ ] { "::=" Clause } ";" >
[RULE: 22][CLAUSE: 0]
	token: ";" -> [183][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" @ >
	token: "::=" -> [181][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" @ Clause } ";" >

[181][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" @ Clause } ";" >
[RULE: 22][CLAUSE: 0]
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "(" -> [80][Syntax0]<< "(" @ !Syntax ")" >>
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "[" -> [36][OptionalBody]"[" @ Syntax "]"
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: OptionalBody -> [74][Syntax0]< OptionalBody @ >
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "{" -> [69][Syntax0]< "{" @ Syntax [ ";" Syntax ] "}" >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(LoopSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!(" -> [54][Syntax0]< "!(" @ { SwitchItem ; "," } ";" Syntax ")" >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(PushConditionSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "?(" -> [64][Syntax0]< "?(" @ TestBranch { "|" TestBranch } ")" >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(TestConditionSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [52][Syntax0]< "!" @ ID >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(UseSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "!" -> [110][Clause]< "!" @ "prefix_merge" "(" RuleName ")" >
		- BeginObject(PrefixMergeClause)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
	token: "!" -> [111][Clause]< "!" @ RuleName LriContinuation >
		- BeginObject(LeftRecursionInjectClause)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "+" -> [60][Syntax0]< "+" @ OptionalBody >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "-" -> [62][Syntax0]< "-" @ OptionalBody >
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(OptionalSyntax)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
	token: "left_recursion_placeholder" -> [119][Clause]< "left_recursion_placeholder" @ "(" Placeholder { "," Placeholder } ")" >
		- BeginObject(LeftRecursionPlaceholderClause)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
	token: ID -> [48][Token]ID @
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: ID -> [48][Token]ID @
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: ID -> [48][Token]ID @
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: STRING -> [49][Token]STRING @
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(PartialClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [133][Clause]< Syntax @ "as" "partial" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(PartialClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(CreateClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [134][Clause]< Syntax @ "as" ID [ "{" { Assignment ; "," } "}" ] >
			+ Field(CreateClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >
	token: CONDITIONAL_LITERAL -> [47][Token]CONDITIONAL_LITERAL @
		- BeginObject(ReuseClause)
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- DelayFieldAssignment()
		- BeginObject(RefSyntax)
		+ Token()
		+ Field(RefSyntax::literal)
		> rule: Clause -> [182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
			+ Field(Rule::clauses)
		> rule: Syntax -> [135][Clause]< Syntax @ [ "{" { Assignment ; "," } "}" ] >
			+ Field(ReuseClause::syntax)
		> rule: Syntax2 -> [94][Syntax]<< !Syntax2 @ >>
		> rule: Syntax1 -> [91][Syntax2]<< !Syntax1 @ >>
			+ ReopenObject()
		> rule: Syntax0 -> [85][Syntax1]<< !Syntax0 @ >>
			+ ReopenObject()
		> rule: Token -> [75][Syntax0]< Token @ [ ":" ID ] >

[182][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause @ } ";" >
[RULE: 22][CLAUSE: 0]
	token: ";" -> [183][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" @ >
	token: "::=" -> [181][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" @ Clause } ";" >

[183][Rule]< [ "@public" ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" @ >
[RULE: 22][CLAUSE: 0]
	ending -> [175][Rule] END [ENDING]
		- EndObject()

[184][File] BEGIN 
[RULE: 23][CLAUSE: -1]
	token: "@public" -> [176][Rule]< [ "@public" @ ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(SyntaxFile)
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [187][File]< [ Switches ] Rule @ { Rule } >
			+ Field(SyntaxFile::rules)
	token: "@parser" -> [177][Rule]< [ "@public" ] [ "@parser" @ ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(SyntaxFile)
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [187][File]< [ Switches ] Rule @ { Rule } >
			+ Field(SyntaxFile::rules)
	token: "switch" -> [30][Switches]"switch" @ { SwitchItem ; "," } ";"
		- BeginObject(SyntaxFile)
		> rule: Switches -> [186][File]< [ Switches @ ] Rule { Rule } >
	token: ID -> [178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(SyntaxFile)
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::name)
		> rule: Rule -> [187][File]< [ Switches ] Rule @ { Rule } >
			+ Field(SyntaxFile::rules)

[185][File] END [ENDING]
[RULE: 23][CLAUSE: -1]

[186][File]< [ Switches @ ] Rule { Rule } >
[RULE: 23][CLAUSE: 0]
	token: "@public" -> [176][Rule]< [ "@public" @ ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [187][File]< [ Switches ] Rule @ { Rule } >
			+ Field(SyntaxFile::rules)
	token: "@parser" -> [177][Rule]< [ "@public" ] [ "@parser" @ ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [187][File]< [ Switches ] Rule @ { Rule } >
			+ Field(SyntaxFile::rules)
	token: ID -> [178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::name)
		> rule: Rule -> [187][File]< [ Switches ] Rule @ { Rule } >
			+ Field(SyntaxFile::rules)

[187][File]< [ Switches ] Rule @ { Rule } >
[RULE: 23][CLAUSE: 0]
	ending -> [185][File] END [ENDING]
		- EndObject()
	token: "@public" -> [176][Rule]< [ "@public" @ ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [188][File]< [ Switches ] Rule { Rule @ } >
			+ Field(SyntaxFile::rules)
	token: "@parser" -> [177][Rule]< [ "@public" ] [ "@parser" @ ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [188][File]< [ Switches ] Rule { Rule @ } >
			+ Field(SyntaxFile::rules)
	token: ID -> [178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::name)
		> rule: Rule -> [188][File]< [ Switches ] Rule { Rule @ } >
			+ Field(SyntaxFile::rules)

[188][File]< [ Switches ] Rule { Rule @ } >
[RULE: 23][CLAUSE: 0]
	ending -> [185][File] END [ENDING]
		- EndObject()
	token: "@public" -> [176][Rule]< [ "@public" @ ] [ "@parser" ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [188][File]< [ Switches ] Rule { Rule @ } >
			+ Field(SyntaxFile::rules)
	token: "@parser" -> [177][Rule]< [ "@public" ] [ "@parser" @ ] ID [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::attParser)
		> rule: Rule -> [188][File]< [ Switches ] Rule { Rule @ } >
			+ Field(SyntaxFile::rules)
	token: ID -> [178][Rule]< [ "@public" ] [ "@parser" ] ID @ [ ":" ID ] { "::=" Clause } ";" >
		- BeginObject(Rule)
		+ Token()
		+ Field(Rule::name)
		> rule: Rule -> [188][File]< [ Switches ] Rule { Rule @ } >
			+ Field(SyntaxFile::rules)

