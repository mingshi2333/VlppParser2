_NameIdentifier
  ::= ID:name as NameIdentifier {kind = Normal}
  ;

_DtorIdentifier
  ::= "~" ID:name as NameIdentifier {kind = Dtor}
  ;

_TypeIdentifier
  ::= "enum" ID:name as NameIdentifier {kind = Enum}
  ::= "enum" "class" ID:name as NameIdentifier {kind = EnumClass}
  ::= "class" ID:name as NameIdentifier {kind = Class}
  ::= "struct" ID:name as NameIdentifier {kind = Struct}
  ::= "union" ID:name as NameIdentifier {kind = Union}
  ;

_OperatorIdentifier
  ::= "operator" '""' ID:name as NameIdentifier {kind = UserDefinedLiteral}
  ::= "operator" "new" as OperatorIdentifier {op = New}
  ::= "operator" "new" "[" "]" as OperatorIdentifier {op = NewArray}
  ::= "operator" "delete" as OperatorIdentifier {op = Delete}
  ::= "operator" "delete" "[" "]" as OperatorIdentifier {op = DeleteArray}
  ::= "operator" "," as OperatorIdentifier {op = Comma}
  ::= "operator" "(" ")" as OperatorIdentifier {op = Parantheses}
  ::= "operator" "[" "]" as OperatorIdentifier {op = Bracket}
  ::= "operator" "->*" as OperatorIdentifier {op = PointerDeref}
  ::= "operator" "->" as OperatorIdentifier {op = Pointer}
  ::= "operator" "!=" as OperatorIdentifier {op = NE}
  ::= "operator" "!" as OperatorIdentifier {op = Not}
  ::= "operator" "==" as OperatorIdentifier {op = EQ}
  ::= "operator" "=" as OperatorIdentifier {op = Assign}
  ::= "operator" "~=" as OperatorIdentifier {op = RevertAssign}
  ::= "operator" "~" as OperatorIdentifier {op = Revert}
  ::= "operator" "^=" as OperatorIdentifier {op = XorAssign}
  ::= "operator" "^" as OperatorIdentifier {op = Xor}
  ::= "operator" "&&" as OperatorIdentifier {op = And}
  ::= "operator" "&=" as OperatorIdentifier {op = AndAssign}
  ::= "operator" "&" as OperatorIdentifier {op = BitwiseAnd}
  ::= "operator" "||" as OperatorIdentifier {op = Or}
  ::= "operator" "|=" as OperatorIdentifier {op = OrAssign}
  ::= "operator" "|" as OperatorIdentifier {op = BitwiseOr}
  ::= "operator" "*=" as OperatorIdentifier {op = MulAssign}
  ::= "operator" "*" as OperatorIdentifier {op = Mul}
  ::= "operator" "/=" as OperatorIdentifier {op = DivAssign}
  ::= "operator" "/" as OperatorIdentifier {op = Div}
  ::= "operator" "%=" as OperatorIdentifier {op = ModAssign}
  ::= "operator" "%" as OperatorIdentifier {op = Mod}
  ::= "operator" "+=" as OperatorIdentifier {op = PlusAssign}
  ::= "operator" "++" as OperatorIdentifier {op = Increase}
  ::= "operator" "+" as OperatorIdentifier {op = Plus}
  ::= "operator" "-=" as OperatorIdentifier {op = MinusAssign}
  ::= "operator" "--" as OperatorIdentifier {op = Decrease}
  ::= "operator" "-" as OperatorIdentifier {op = Minus}
  ::= "operator" "<<=" as OperatorIdentifier {op = LeftShiftAssign}
  ::= "operator" "<<" as OperatorIdentifier {op = LeftShift}
  ::= "operator" "<=" as OperatorIdentifier {op = LE}
  ::= "operator" "<" as OperatorIdentifier {op = LT}
  ::= "operator" ">>=" as OperatorIdentifier {op = RightShiftAssign}
  ::= "operator" ">>" as OperatorIdentifier {op = RightShift}
  ::= "operator" ">=" as OperatorIdentifier {op = GE}
  ::= "operator" ">" as OperatorIdentifier {op = GT}
  ;

_Identifier
  ::= !_NameIdentifier
  ::= !_TypeIdentifier
  ::= !_OperatorIdentifier
  ;

_GenericArgument
  ::= !_TypeOrExpr_NoComma_NoGT
  ::= _TypeOrExpr_NoComma_NoGT:argument "...":variadic as GenericArgument
  ;

_GenericArguments
  ::= "<" {_GenericArgument:arguments ; ","} ">" as GenericArguments
  ;

_QualifiedNameFragment
  ::= _Identifier:id [_GenericArguments:arguments] as partial QualifiedName
  ::= "template" _Identifier:id _GenericArguments:arguments as partial QualifiedName
  ;

_MemberQualifiedNameFragment
  ::= _DtorIdentifier:id as partial QualifiedName
  ;

_QualifiedName
  ::= _QualifiedNameFragment as QualifiedName {kind = Context}
  ::= "::" _QualifiedNameFragment as QualifiedName {kind = Root}
  ::= "auto" as QualifiedName {kind = Auto}
  ::= "decltype" "(" _Expr:expr ")" as QualifiedName {kind = Decltype}
  ::= _QualifiedName:parent "::" _QualifiedNameFragment as QualifiedName {kind = Member}
  ::= _QualifiedName:parent "::" _MemberQualifiedNameFragment as QualifiedName {kind = Member}
  ;

_StringLiteralFragment
  ::= MACRO_LPREFIX as StringLiteralFragment {kind = Macro_LPREFIX}
  ::= STRING:literal as StringLiteralFragment {kind = String}
  ;

_LambdaCaptureId
  ::= _DeclaratorId:id as LambdaCapture {objKind = Id}
  ::= _DeclaratorId:id _VarInit:init as LambdaCapture {objKind = Id}
  ::= _DeclaratorId:id "..." as LambdaCapture {objKind = PackId}
  ::= "..." _DeclaratorId:id _VarInit:init as LambdaCapture {objKind = PackInit}
  ;

_LambdaCapture
  ::= "&" as LambdaCapture {objKind = Default, refKind = Ref}
  ::= "=" as LambdaCapture {objKind = Default, refKind = Copy}
  ::= "this" as LambdaCapture {objKind = This, refKind = Ref}
  ::= "*" "this" as LambdaCapture {objKind = This, refKind = Copy}
  ::= !_LambdaCaptureId {refKind = Copy}
  ::= "&" !_LambdaCaptureId {refKind = Ref}
  ;

_LambdaExpr
  ::= "[" {_LambdaCapture:captures ; ","} "]" [_GenericHeader:genericHeader] [_DeclaratorFunctionPartOptionalParameters:functionHeader] _BlockStat:stat as LambdaExpr
  ;

_PrimitiveExpr : TypeOrExpr
  ::= "true" as PrimitiveExprLiteral {kind = True}
  ::= "false" as PrimitiveExprLiteral {kind = False}
  ::= "nullptr" as PrimitiveExprLiteral {kind = Nullptr}
  ::= "this" as PrimitiveExprLiteral {kind = This}
  ::= "__nullptr" as PrimitiveExprLiteral {kind = __Nullptr}
  ::= INT:literal as NumericExprLiteral {kind = Integer}
  ::= HEX:literal as NumericExprLiteral {kind = Hex}
  ::= BIN:literal as NumericExprLiteral {kind = Binary}
  ::= FLOAT:literal as NumericExprLiteral {kind = Float}
  ::= FLOATHEX:literal as NumericExprLiteral {kind = FloatHex}
  ::= CHAR:literal as NumericExprLiteral {kind = Char}
  ::= _StringLiteralFragment:fragments {_StringLiteralFragment:fragments} as StringLiteral
  ::= "(" _Expr:expr ")" as ParenthesisExpr
  ::= "{" {_Expr_Argument:arguments ; ","} "}" as BraceExpr
  ::= "dynamic_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "static_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "const_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "reinterpret_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "safe_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "typeid":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "alignof":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "__alignof":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "__uuidof":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "noexcept":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= !_LambdaExpr
  ;

_QualifiedName_PrimitiveExpr
  ::= !prefix_merge(_PrimitiveExpr)
  ::= !prefix_merge(_QualifiedName)
  ;

_PostfixUnaryExpr
  ::= !_QualifiedName_PrimitiveExpr
  ::= _TypeStartsWithKeyword:operand "(" {_Expr_Argument:arguments ; ","} ")" as CallExpr {kind = Parenthesis}
  ::= _Type:operand "{" {_Expr_Argument:arguments ; ","} "}" as CallExpr {kind = Brace}
  ::= _PostfixUnaryExpr:left "." _MemberOperatorQualifiedName:right as BinaryExpr {op = Member}
  ::= _PostfixUnaryExpr:left "->" _MemberOperatorQualifiedName:right as BinaryExpr {op = Pointer}
  ::= _PostfixUnaryExpr:operand "++" as PostfixUnaryExpr {op = Increase}
  ::= _PostfixUnaryExpr:operand "--" as PostfixUnaryExpr {op = Decrease}
  ::= _PostfixUnaryExpr:operand "[" _Expr:index "]" as IndexExpr
  ::= _PostfixUnaryExpr:operand "(" {_Expr_Argument:arguments ; ","} ")" as CallExpr {kind = Parenthesis}
  ;

_NewPrefix
  ::= "new" as partial NewExpr {scope = Context}
  ::= "::" "new" as partial NewExpr {scope = Root}
  ;

_NewExpr
  ::= _NewPrefix ["(" {_Expr_Argument:placementArguments ; ","} ")"] _QualifiedName:type {"[" _Expr:arrayArguments "]"} [_VarCtorInit:init] as NewExpr
  ;

_DeletePrefix
  ::= "delete" as partial DeleteExpr {scope = Context}
  ::= "::" "delete" as partial DeleteExpr {scope = Root}
  ;

_DeleteExpr
  ::= _DeletePrefix _PrefixUnaryExpr:argument as DeleteExpr
  ::= _DeletePrefix "[" "]" _PrefixUnaryExpr:argument as DeleteExpr
  ;

_SizeOfPrefix
  ::= "sizeof" ["...":variadic] as partial SizeofExpr
  ;

_SizeofExpr
  ::= _SizeOfPrefix _PostfixUnaryExpr:argument as SizeofExpr
  ::= _SizeOfPrefix _AllPrefixUnaryExpr_NoCStyleCast:argument as SizeofExpr
  ::= _SizeOfPrefix "(" _Type:argument ")" as SizeofExpr
  ;

_AllPrefixUnaryExpr_NoCStyleCast
  ::= "++" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = Increase}
  ::= "--" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = Decrease}
  ::= "~" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = Revert}
  ::= "!" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = Not}
  ::= "-" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = Minus}
  ::= "+" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = Plus}
  ::= "&" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = BitwiseAnd}
  ::= "*" _PrefixUnaryExpr:operand as PrefixUnaryExpr {op = Mul}
  ::= !_NewExpr
  ::= !_DeleteExpr
  ::= !_SizeofExpr
  ;

_AllPrefixUnaryExpr
  ::= !_AllPrefixUnaryExpr_NoCStyleCast
  ::= "(" _Type:type ")" _PrefixUnaryExpr:expr as CastExpr
  ;

_PrefixUnaryExpr
  ::= !_PostfixUnaryExpr
  ::= !_AllPrefixUnaryExpr
  ;

_MemberOperatorIdentifier
  ::= !_NameIdentifier
  ::= !_DtorIdentifier
  ::= !_OperatorIdentifier
  ;

_MemberOperatorQualifiedName
  ::= _Identifier:id [_GenericArguments:arguments] as QualifiedName {kind = Context}
  ;

_BExpr0
  ::= !_PrefixUnaryExpr
  ::= _BExpr0:left ".*" _PrefixUnaryExpr:right as BinaryExpr {op = MemberDeref}
  ::= _BExpr0:left "->*" _PrefixUnaryExpr:right as BinaryExpr {op = PointerDeref}
  ;

_BExpr1
  ::= !_BExpr0
  ::= _BExpr1:left "*" _BExpr0:right as BinaryExpr {op = Mul}
  ::= _BExpr1:left "/" _BExpr0:right as BinaryExpr {op = Div}
  ::= _BExpr1:left "%" _BExpr0:right as BinaryExpr {op = Mod}
  ;

_BExpr2
  ::= !_BExpr1
  ::= _BExpr2:left "+" _BExpr1:right as BinaryExpr {op = Plus}
  ::= _BExpr2:left "-" _BExpr1:right as BinaryExpr {op = Minus}
  ;

_BExpr3
  ::= !_BExpr2
  ::= _BExpr3:left "<<" _BExpr2:right as BinaryExpr {op = LeftShift}
  ::= _BExpr3:left ">>" _BExpr2:right as BinaryExpr {op = RightShift}
  ;

_BExpr4_SWITCH_COMBINED : TypeOrExpr
  ::= !_BExpr3
  ;

_BExpr4_SWITCH_0allow_GT : TypeOrExpr
  ::= _BExpr4_SWITCH_0allow_GT:left "<" _BExpr3:right as BinaryExpr {op = LT}
  ::= _BExpr4_SWITCH_0allow_GT:left "<=" _BExpr3:right as BinaryExpr {op = LE}
  ::= _BExpr4_SWITCH_0allow_GT:left ">=" _BExpr3:right as BinaryExpr {op = GE}
  ::= !_BExpr4_SWITCH_COMBINED
  ;

_BExpr4_SWITCH_1allow_GT : TypeOrExpr
  ::= _BExpr4_SWITCH_1allow_GT:left "<" _BExpr3:right as BinaryExpr {op = LT}
  ::= _BExpr4_SWITCH_1allow_GT:left ">" _BExpr3:right as BinaryExpr {op = GT}
  ::= _BExpr4_SWITCH_1allow_GT:left "<=" _BExpr3:right as BinaryExpr {op = LE}
  ::= _BExpr4_SWITCH_1allow_GT:left ">=" _BExpr3:right as BinaryExpr {op = GE}
  ::= !_BExpr4_SWITCH_COMBINED
  ;

_BExpr5_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr4_SWITCH_0allow_GT
  ::= _BExpr5_SWITCH_0allow_GT:left "==" _BExpr4_SWITCH_0allow_GT:right as BinaryExpr {op = EQ}
  ::= _BExpr5_SWITCH_0allow_GT:left "!=" _BExpr4_SWITCH_0allow_GT:right as BinaryExpr {op = NE}
  ;

_BExpr5_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr4_SWITCH_1allow_GT
  ::= _BExpr5_SWITCH_1allow_GT:left "==" _BExpr4_SWITCH_1allow_GT:right as BinaryExpr {op = EQ}
  ::= _BExpr5_SWITCH_1allow_GT:left "!=" _BExpr4_SWITCH_1allow_GT:right as BinaryExpr {op = NE}
  ;

_BExpr6_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr5_SWITCH_0allow_GT
  ::= _BExpr6_SWITCH_0allow_GT:left "&" _BExpr5_SWITCH_0allow_GT:right as BinaryExpr {op = BitwiseAnd}
  ;

_BExpr6_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr5_SWITCH_1allow_GT
  ::= _BExpr6_SWITCH_1allow_GT:left "&" _BExpr5_SWITCH_1allow_GT:right as BinaryExpr {op = BitwiseAnd}
  ;

_BExpr7_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr6_SWITCH_0allow_GT
  ::= _BExpr7_SWITCH_0allow_GT:left "^" _BExpr6_SWITCH_0allow_GT:right as BinaryExpr {op = Xor}
  ;

_BExpr7_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr6_SWITCH_1allow_GT
  ::= _BExpr7_SWITCH_1allow_GT:left "^" _BExpr6_SWITCH_1allow_GT:right as BinaryExpr {op = Xor}
  ;

_BExpr8_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr7_SWITCH_0allow_GT
  ::= _BExpr8_SWITCH_0allow_GT:left "|" _BExpr7_SWITCH_0allow_GT:right as BinaryExpr {op = BitwiseOr}
  ;

_BExpr8_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr7_SWITCH_1allow_GT
  ::= _BExpr8_SWITCH_1allow_GT:left "|" _BExpr7_SWITCH_1allow_GT:right as BinaryExpr {op = BitwiseOr}
  ;

_BExpr9_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr8_SWITCH_0allow_GT
  ::= _BExpr9_SWITCH_0allow_GT:left "&&" _BExpr8_SWITCH_0allow_GT:right as BinaryExpr {op = And}
  ;

_BExpr9_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr8_SWITCH_1allow_GT
  ::= _BExpr9_SWITCH_1allow_GT:left "&&" _BExpr8_SWITCH_1allow_GT:right as BinaryExpr {op = And}
  ;

_BExpr10_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr9_SWITCH_0allow_GT
  ::= _BExpr10_SWITCH_0allow_GT:left "||" _BExpr9_SWITCH_0allow_GT:right as BinaryExpr {op = Or}
  ;

_BExpr10_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr9_SWITCH_1allow_GT
  ::= _BExpr10_SWITCH_1allow_GT:left "||" _BExpr9_SWITCH_1allow_GT:right as BinaryExpr {op = Or}
  ;

_ThrowExpr_SWITCH_0allow_GT : ThrowExpr
  ::= "throw" [_BExpr10_SWITCH_0allow_GT:argument] as ThrowExpr
  ;

_ThrowExpr_SWITCH_1allow_GT : ThrowExpr
  ::= "throw" [_BExpr10_SWITCH_1allow_GT:argument] as ThrowExpr
  ;

_BExpr_NoComma_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr10_SWITCH_0allow_GT
  ::= !_ThrowExpr_SWITCH_0allow_GT
  ::= _BExpr10_SWITCH_0allow_GT:condition "?" _Expr:trueBranch ":" _BExpr_NoComma_SWITCH_0allow_GT:falseBranch as IfExpr
  ::= _BExpr10_SWITCH_0allow_GT:left "=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = Assign}
  ::= _BExpr10_SWITCH_0allow_GT:left "*=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = MulAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "/=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = DivAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "%=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = ModAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "+=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = PlusAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "-=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = MinusAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "<<=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = LeftShiftAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left ">>=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = RightShiftAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "&=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = AndAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "|=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = OrAssign}
  ::= _BExpr10_SWITCH_0allow_GT:left "^=" _BExpr_NoComma_SWITCH_0allow_GT:right as BinaryExpr {op = XorAssign}
  ;

_BExpr_NoComma_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr10_SWITCH_1allow_GT
  ::= !_ThrowExpr_SWITCH_1allow_GT
  ::= _BExpr10_SWITCH_1allow_GT:condition "?" _Expr:trueBranch ":" _BExpr_NoComma_SWITCH_1allow_GT:falseBranch as IfExpr
  ::= _BExpr10_SWITCH_1allow_GT:left "=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = Assign}
  ::= _BExpr10_SWITCH_1allow_GT:left "*=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = MulAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "/=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = DivAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "%=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = ModAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "+=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = PlusAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "-=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = MinusAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "<<=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = LeftShiftAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left ">>=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = RightShiftAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "&=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = AndAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "|=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = OrAssign}
  ::= _BExpr10_SWITCH_1allow_GT:left "^=" _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = XorAssign}
  ;

_BExpr_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr_NoComma_SWITCH_1allow_GT
  ::= _BExpr_SWITCH_1allow_GT:left "," _BExpr_NoComma_SWITCH_1allow_GT:right as BinaryExpr {op = Comma}
  ;

_Expr_NoComma_Raw_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr_NoComma_SWITCH_1allow_GT
  ;

_Expr_Raw_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr_SWITCH_1allow_GT
  ;

_PrimitiveTypeLiteral
  ::= "wchar_t":literal1 as partial PrimitiveType
  ::= "char8_t":literal1 as partial PrimitiveType
  ::= "char16_t":literal1 as partial PrimitiveType
  ::= "char32_t":literal1 as partial PrimitiveType
  ::= "char":literal1 as partial PrimitiveType
  ::= "short":literal1 as partial PrimitiveType
  ::= "int":literal1 as partial PrimitiveType
  ::= "__int8":literal1 as partial PrimitiveType
  ::= "__int16":literal1 as partial PrimitiveType
  ::= "__int32":literal1 as partial PrimitiveType
  ::= "__int64":literal1 as partial PrimitiveType
  ::= "long":literal1 as partial PrimitiveType
  ::= "long":literal1 "int":literal2 as partial PrimitiveType
  ::= "long":literal1 "long":literal2 as partial PrimitiveType
  ;

_PrimitiveType
  ::= "signed" [_PrimitiveTypeLiteral] as PrimitiveType {kind = Signed}
  ::= "unsigned" [_PrimitiveTypeLiteral] as PrimitiveType {kind = Unsigned}
  ::= "void":literal1 as PrimitiveType {kind = Neutral}
  ::= "bool":literal1 as PrimitiveType {kind = Neutral}
  ::= "float":literal1 as PrimitiveType {kind = Neutral}
  ::= "double":literal1 as PrimitiveType {kind = Neutral}
  ::= "long":literal1 "double":literal2 as PrimitiveType {kind = Neutral}
  ::= _PrimitiveTypeLiteral as PrimitiveType {kind = Neutral}
  ::= "typename" !_QualifiedName
  ;

_PM_PrimitiveType
  ::= !prefix_merge(_PrimitiveType)
  ;

_PM_QualifiedName
  ::= !prefix_merge(_QualifiedName)
  ;

_ShortTypeStartsWithKeywordBeforeDeclarator
  ::= !_PM_PrimitiveType
  ::= "const" _TypeBeforeDeclarator:type as ConstType
  ::= "volatile" _TypeBeforeDeclarator:type as VolatileType
  ;

_ShortTypeBeforeDeclarator : TypeOrExpr
  ::= !_PM_QualifiedName
  ::= !_ShortTypeStartsWithKeywordBeforeDeclarator
  ;

_TypeStartsWithKeywordBeforeDeclarator
  ::= !_ShortTypeStartsWithKeywordBeforeDeclarator
  ::= _TypeStartsWithKeywordBeforeDeclarator:type "const" as ConstType
  ::= _TypeStartsWithKeywordBeforeDeclarator:type "volatile" as VolatileType
  ;

_TypeBeforeDeclarator
  ::= !_ShortTypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type "const" as ConstType
  ::= _TypeBeforeDeclarator:type "volatile" as VolatileType
  ;

_AdvancedTypeNoCVNoMember
  ::= "&" as AdvancedType {kind = LRef}
  ::= "&&" as AdvancedType {kind = RRef}
  ::= "*" as AdvancedType {kind = Pointer}
  ::= "*" "__ptr32" as AdvancedType {kind = Pointer32}
  ::= "*" "__ptr64" as AdvancedType {kind = Pointer64}
  ::= "alignas" "(" _Expr:argument ")" as AdvancedType {kind = AlignAs}
  ;

_AdvancedTypeCV
  ::= "const" as AdvancedType {kind = Const}
  ::= "volatile" as AdvancedType {kind = Volatile}
  ;

_AdvancedTypeNoMember
  ::= !_AdvancedTypeNoCVNoMember
  ::= !_AdvancedTypeCV
  ;

_AdvancedTypeMember
  ::= _QualifiedName:argument "::" as AdvancedType {kind = Member}
  ;

_DeclaratorKeyword
  ::= "constexpr":keyword as DeclaratorKeyword
  ::= "extern":keyword as DeclaratorKeyword
  ::= "static":keyword as DeclaratorKeyword
  ::= "mutable":keyword as DeclaratorKeyword
  ::= "thread_local":keyword as DeclaratorKeyword
  ::= "virtual":keyword as DeclaratorKeyword
  ::= "explicit":keyword as DeclaratorKeyword
  ::= "friend":keyword as DeclaratorKeyword
  ::= "abstract":keyword as DeclaratorKeyword
  ::= "inline":keyword as DeclaratorKeyword
  ::= "__inline":keyword as DeclaratorKeyword
  ::= "__forceinline":keyword as DeclaratorKeyword
  ::= "__cdecl":keyword as DeclaratorKeyword
  ::= "__clrcall":keyword as DeclaratorKeyword
  ::= "__stdcall":keyword as DeclaratorKeyword
  ::= "__fastcall":keyword as DeclaratorKeyword
  ::= "__thiscall":keyword as DeclaratorKeyword
  ::= "__vectorcall":keyword as DeclaratorKeyword
  ;

_DeclaratorAKFirst
  ::= _AdvancedTypeNoCVNoMember:advancedTypes as partial Declarator
  ::= _DeclaratorKeyword:keywords as partial Declarator
  ;

_DeclaratorAKFollow
  ::= _AdvancedTypeNoMember:advancedTypes as partial Declarator
  ::= _DeclaratorKeyword:keywords as partial Declarator
  ;

_DeclaratorAKCV
  ::= _AdvancedTypeCV:advancedTypes as partial Declarator
  ;

_DeclaratorAKMember
  ::= _AdvancedTypeMember:advancedTypes as partial Declarator
  ;

_DeclaratorFunctionParameters
  ::= "(" ["...":variadic] ")" as partial DeclaratorFunctionPart
  ::= "(" _FunctionParameter:parameters {"," _FunctionParameter:parameters} ["," "...":variadic] ")" as partial DeclaratorFunctionPart
  ;

_FunctionKeyword
  ::= "constexpr":keyword as FunctionKeyword
  ::= "&":keyword as FunctionKeyword
  ::= "&&":keyword as FunctionKeyword
  ::= "const":keyword as FunctionKeyword
  ::= "volatile":keyword as FunctionKeyword
  ::= "override":keyword as FunctionKeyword
  ::= "final":keyword as FunctionKeyword
  ::= "mutable":keyword as FunctionKeyword
  ::= "noexcept":keyword ["(" {_Expr_Argument:arguments ; ","} ")"] as FunctionKeyword
  ::= "throw":keyword ["(" {_Type:arguments ; ","} ")"] as FunctionKeyword
  ::= "=" '0':keyword as FunctionKeyword
  ::= "=" "delete":keyword as FunctionKeyword
  ::= "=" "default":keyword as FunctionKeyword
  ;

_DeclaratorFunctionPart
  ::= _DeclaratorFunctionParameters {_FunctionKeyword:keywords} ["->" _Type:deferredType] as DeclaratorFunctionPart
  ;

_DeclaratorFunctionPartOptionalParameters
  ::= !_DeclaratorFunctionPart
  ::= _FunctionKeyword:keywords {_FunctionKeyword:keywords} ["->" _Type:deferredType] as DeclaratorFunctionPart
  ::= "->" _Type:deferredType as DeclaratorFunctionPart
  ;

_DeclaratorArrayPart
  ::= "[" [_Expr:argument] "]" as DeclaratorArrayPart
  ;

_DeclaratorId
  ::= !_NameIdentifier
  ::= !_OperatorIdentifier
  ;

_DeclaratorBeforeInner
  ::= (_DeclaratorAKFirst [_DeclaratorAKMember] | _DeclaratorAKMember) {_DeclaratorAKFollow [_DeclaratorAKMember]} as partial Declarator
  ;

_DeclaratorAfterInner
  ::= _DeclaratorFunctionPart:funcPart | _DeclaratorArrayPart:arrayParts {_DeclaratorArrayPart:arrayParts} as partial Declarator
  ;

_InnerDeclaratorWithoutName
  ::= {_DeclaratorAKCV} !_DeclaratorWithoutName
  ;

_InnerDeclaratorInnerOptionalName
  ::= {_DeclaratorAKCV} !_DeclaratorOptionalName
  ;

_InnerDeclaratorInnerRequiredName
  ::= {_DeclaratorAKCV} !_DeclaratorRequiredName
  ;

_DeclaratorInnerWithoutName
  ::= "(" _InnerDeclaratorWithoutName:innerDeclarator ")" as partial Declarator
  ;

_DeclaratorInnerOptionalName
  ::= "(" _InnerDeclaratorInnerOptionalName:innerDeclarator ")" as partial Declarator
  ::= _DeclaratorId:id as partial Declarator
  ::= "...":variadic [_DeclaratorId:id] as partial Declarator
  ;

_DeclaratorInnerRequiredName
  ::= "(" _InnerDeclaratorInnerRequiredName:innerDeclarator ")" as partial Declarator
  ::= _DeclaratorId:id as partial Declarator
  ::= "...":variadic _DeclaratorId:id as partial Declarator
  ;

_DeclaratorWithoutName
  ::= _DeclaratorBeforeInner [_DeclaratorInnerWithoutName] [_DeclaratorAfterInner] as Declarator
  ::= _DeclaratorInnerWithoutName [_DeclaratorAfterInner] as Declarator
  ::= _DeclaratorAfterInner as Declarator
  ;

_DeclaratorOptionalName
  ::= _DeclaratorBeforeInner [_DeclaratorInnerOptionalName] [_DeclaratorAfterInner] as Declarator
  ::= _DeclaratorInnerOptionalName [_DeclaratorAfterInner] as Declarator
  ::= _DeclaratorAfterInner as Declarator
  ;

_DeclaratorRequiredName
  ::= _DeclaratorBeforeInner _DeclaratorInnerRequiredName [_DeclaratorAfterInner] as Declarator
  ::= _DeclaratorInnerRequiredName [_DeclaratorAfterInner] as Declarator
  ;

_VarValueInit
  ::= "=" _Expr_NoComma:expr as VarValueInit
  ;

_VarNewParanInit
  ::= "(" {_Expr_Argument:arguments ; ","} ")" as VarParanthesisInit
  ;

_VarVarParanInit
  ::= "(" _Expr_Argument:arguments {"," _Expr_Argument:arguments} ")" as VarParanthesisInit
  ;

_VarBraceInit
  ::= "{" {_Expr_Argument:arguments ; ","} "}" as VarBraceInit
  ;

_VarCtorInit
  ::= !_VarNewParanInit
  ::= !_VarBraceInit
  ;

_VarInit
  ::= !_VarValueInit
  ::= !_VarVarParanInit
  ::= !_VarBraceInit
  ;

_DeclaratorVariablePartWithoutInit
  ::= _DeclaratorRequiredName:declarator as DeclaratorVariablePart
  ;

_DeclaratorVariablePartOptionalInit
  ::= _DeclaratorRequiredName:declarator [_VarInit:init] as DeclaratorVariablePart
  ;

_DeclaratorVariablePartRequiredInit
  ::= _DeclaratorRequiredName:declarator _VarInit:init as DeclaratorVariablePart
  ;

_VarWithoutInit
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartWithoutInit:varPart as SingleVarDeclaration
  ;

_VarRequiredInit
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartRequiredInit:varPart as SingleVarDeclaration
  ;

_FunctionParameterVariablePart
  ::= _VarValueInit:init as DeclaratorVariablePart
  ::= _DeclaratorOptionalName:declarator [_VarValueInit:init] as DeclaratorVariablePart
  ;

_FunctionParameter
  ::= !_TypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type _FunctionParameterVariablePart:varPart as SingleVarDeclaration
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords} _TypeBeforeDeclarator:type [_FunctionParameterVariablePart:varPart] as SingleVarDeclaration
  ;

_CatchParameterVariablePart
  ::= _DeclaratorOptionalName:declarator as DeclaratorVariablePart
  ;

_CatchParameter
  ::= !_TypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type _CatchParameterVariablePart:varPart as SingleVarDeclaration
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords} _TypeBeforeDeclarator:type _CatchParameterVariablePart:varPart as SingleVarDeclaration
  ;

_ExprOrVarWithInit
  ::= !_Expr
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartRequiredInit:varPart as SingleVarDeclaration
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords} _TypeBeforeDeclarator:type _DeclaratorVariablePartRequiredInit:varPart as SingleVarDeclaration
  ;

_GenericParameterKeyword
  ::= "typename":typenameToken as partial OrdinaryGenericParameter
  ::= "class":typenameToken as partial OrdinaryGenericParameter
  ::= "template" _GenericHeader:genericHeader "class":typenameToken as partial OrdinaryGenericParameter
  ;

_OrdinaryGenericParameter
  ::= _GenericParameterKeyword ["...":variadic] [_DeclaratorId:id] ["=" _TypeOrExpr:init] as OrdinaryGenericParameter
  ;

_TypedGenericParameterInit
  ::= "=" _TypeOrExpr:expr as VarValueInit
  ;

_TypedGenericParameterVariablePart
  ::= _TypedGenericParameterInit:init as DeclaratorVariablePart
  ::= _DeclaratorOptionalName:declarator [_TypedGenericParameterInit:init] as DeclaratorVariablePart
  ;

_TypedGenericParameterDeclaration
  ::= !_TypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type _TypedGenericParameterVariablePart:varPart as SingleVarDeclaration
  ;

_TypedGenericParameter
  ::= _TypedGenericParameterDeclaration:varDecl as TypedGenericParameter
  ;

_GenericParameter
  ::= !_OrdinaryGenericParameter
  ::= !_TypedGenericParameter
  ;

_GenericHeader
  ::= "<" {_GenericParameter:parameters} ">" as GenericHeader
  ;

_VarsDeclWithoutKeyword
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartOptionalInit:varParts {"," _DeclaratorVariablePartOptionalInit:varParts} as MultipleVarDeclaration
  ;

_VarsDecl
  ::= !_VarsDeclWithoutKeyword
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords} !_VarsDeclWithoutKeyword
  ;

_Decl
  ::= !_VarsDecl
  ;

_ExprStat
  ::= _Expr:expr ";" as ExprStat
  ::= _Decl:decl ";" as DeclStat
  ;

_BlockStat
  ::= "{" {_Stat:statements} "}" as BlockStat
  ;

_TryStatCatchPart
  ::= "catch" "(" (_CatchParameter:decl | "...") ")" _Stat:stat as TryStatCatchPart
  ;

_TryStat
  ::= "try" _Stat:tryStat _TryStatCatchPart:catchParts {_TryStatCatchPart:catchParts} as TryStat
  ;

___TryStat
  ::= "__try" _Stat:tryStat ("__except" "(" _Expr:filter ")" _Stat:exceptStat | "__finally" _Stat:finallyStat) as __TryStat
  ;

_IfStatConditionPart
  ::= _ExprOrVarWithInit:condition ")" as IfElseStat
  ::= _VarsDecl:varsDecl ";" _ExprOrVarWithInit:condition ")" as IfElseStat
  ;

_IfStat
  ::= "if" "(" !_IfStatConditionPart _Stat:trueStat +["else" _Stat:falseStat]
  ;

_ForStatConditionPart
  ::= ";" [_Expr:condition] ";" [_Expr:sideEffect] as ForStatLoopCondition
  ::= _Expr:varsDecl ";" [_Expr:condition] ";" [_Expr:sideEffect] as ForStatLoopCondition
  ::= _VarsDecl:varsDecl ";" [_Expr:condition] ";" [_Expr:sideEffect] as ForStatLoopCondition
  ::= _VarWithoutInit:decl ":" _Expr:collection as ForStatIterateCondition
  ;

_ForStat
  ::= "for" "(" _ForStatConditionPart:conditionPart ")" _Stat:stat as ForStat
  ;

_OtherStats
  ::= ";" as EmptyStat
  ::= "break" ";" as BreakStat
  ::= "continue" ";" as ContinueStat
  ::= "return" [_Expr:expr] ";" as ReturnStat
  ::= ID:label ":" _Stat:stat as LabelStat
  ::= "goto" ID:label ";" as GotoStat
  ::= "case" _Expr:expr ":" _Stat:stat as CaseStat
  ::= "default" ":" _Stat:stat as DefaultStat
  ::= "__leave" ";" as __LeaveStat
  ::= "static_assert" "(" _Expr:expr ["," _Expr:message] ")" ";" as StaticAssertStat
  ::= "while" "(" _ExprOrVarWithInit:condition ")" _Stat:stat as WhileStat
  ::= "do" _Stat:stat "while" "(" _Expr:condition ")" ";" as DoWhileStat
  ::= "switch" "(" _ExprOrVarWithInit:condition ")" _Stat:stat as SwitchStat
  ;

_Stat
  ::= !_ExprStat
  ::= !_BlockStat
  ::= !_TryStat
  ::= !___TryStat
  ::= !_IfStat
  ::= !_ForStat
  ::= !_OtherStats
  ;

_TypeStartsWithKeyword
  ::= !_TypeStartsWithKeywordBeforeDeclarator
  ::= _TypeStartsWithKeywordBeforeDeclarator:type _DeclaratorWithoutName:declarator as DeclaratorType
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords} _TypeBeforeDeclarator:type [_DeclaratorWithoutName:declarator] as DeclaratorType
  ;

_Type
  ::= !_TypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type _DeclaratorWithoutName:declarator as DeclaratorType
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords} _TypeBeforeDeclarator:type [_DeclaratorWithoutName:declarator] as DeclaratorType
  ;

_Expr_NoComma
  ::= !_Expr_NoComma_Raw_SWITCH_1allow_GT
  ;

_Expr
  ::= !_Expr_Raw_SWITCH_1allow_GT
  ;

_Expr_Argument
  ::= !_Expr_NoComma
  ::= _Expr_NoComma:operand "...":variadic as VariadicExpr
  ;

_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED : TypeOrExpr
  ::= !_Type
  ;

_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT : TypeOrExpr
  ::= !_BExpr_NoComma_SWITCH_0allow_GT
  ::= !_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED
  ;

_TypeOrExpr_Raw_SWITCH_COMBINED : TypeOrExpr
  ::= !_Type
  ;

_TypeOrExpr_Raw_SWITCH_1allow_GT : TypeOrExpr
  ::= !_BExpr_SWITCH_1allow_GT
  ::= !_TypeOrExpr_Raw_SWITCH_COMBINED
  ;

_TypeOrExpr_NoComma_NoGT
  ::= !_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT
  ;

_TypeOrExpr
  ::= !_TypeOrExpr_Raw_SWITCH_1allow_GT
  ;

_File
  ::= ";" as File
  ;

