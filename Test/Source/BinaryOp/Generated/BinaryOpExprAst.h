/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_BINARYOP_EXPRAST_AST
#define VCZH_PARSER2_UNITTEST_BINARYOP_EXPRAST_AST

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace binaryop
{
	class BinaryExpr;
	class Expr;
	class RefExpr;

	enum class BinaryOp
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Add = 0,
		Mul = 1,
		Exp = 2,
		Assign = 3,
		Try = 4,
		Dollar = 5,
	};

	class Expr abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<Expr>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(RefExpr* node) = 0;
			virtual void Visit(BinaryExpr* node) = 0;
		};

		virtual void Accept(Expr::IVisitor* visitor) = 0;

	};

	class RefExpr : public Expr, vl::reflection::Description<RefExpr>
	{
	public:
		vl::glr::ParsingToken name;

		void Accept(Expr::IVisitor* visitor) override;
	};

	class BinaryExpr : public Expr, vl::reflection::Description<BinaryExpr>
	{
	public:
		BinaryOp op = BinaryOp::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<Expr> left;
		vl::Ptr<Expr> right;

		void Accept(Expr::IVisitor* visitor) override;
	};
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			DECL_TYPE_INFO(binaryop::Expr)
			DECL_TYPE_INFO(binaryop::Expr::IVisitor)
			DECL_TYPE_INFO(binaryop::RefExpr)
			DECL_TYPE_INFO(binaryop::BinaryOp)
			DECL_TYPE_INFO(binaryop::BinaryExpr)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(binaryop::Expr::IVisitor)
				void Visit(binaryop::RefExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(binaryop::BinaryExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(binaryop::Expr::IVisitor)

#endif
#endif
			/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
			/// <returns>Returns true if this operation succeeded.</returns>
			extern bool BinaryOpExprAstLoadTypes();
		}
	}
}
#endif