/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "BinaryOpModuleParser.h"

namespace binaryop
{
	void BinaryOpModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2471; // 22661 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 167;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\x85\x58\x00\x00\x9F\x09\x00\x00\x0A\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x09\x0A\x98\x0A\x9E\x0A\x84\x12\x84\x15\x0A\x9C\x02\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x81\x9A\x81\x01\x99\x94\x21\xB6\x89\x9A\x96\x82\x9B\x97\x93\x37\xAC\x81\xAE\x93\xA0\x98\x8E\x9C\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x3D\xC8\x8F\xAA\xA1\xAC\xA6\x83\x8D\x3B\xC9\xA0\x9A\xA3\x9B\xAB\xAC\xAF\x5D\xD5\x8E\xA2\xB0\xAB\x82\x9E\xAE\x3F\xDF\xA4\xB4\xA6\xB2\xAA\x83\x01\x35\xE8\xB2\xA0\xB9\xB1\xB1\xB6\xAB\x77\xE3\xB9\xA5\xB2\x87\xB0\xBB\xB9\x6B\xEA\xBB\xAC\xBD\xBE\xB7\xC0\xC1\x85\xF8\x89\xDA\xBB\xC4\xBD\x80\xBF\x81\xF6\x8D\xC4\xC1\x84\x01\xB9\xBF\x98\x91\xF5\xBB\xC0\xC7\xC2\xC9\xC7\x86\x93\xC8\xC0\xDA\xC1\x81\x03\xCB\x9A\x8A\x8C\x99\xA9\xCE\xCC\xCF\xD6\xA2\x9F\xE2\x81\xD4\xD4\xC5\xDA\xC7\xB3\xA5\xC0\x07\x08\xD6\xD6\x84\x84\x06\xBC\xBE\xD0\xD7\xDC\xC9\xDC\xDB\xC7\xB8\xD0\xC3\xE9\xD4\xE1\xE4\xE3\xCB\xB1\xEF\xCD\xE4\xEC\xE6\xEA\xE9\x9D\xD8\xCE\xE9",
			"\x0D\xDA\xEE\x82\x80\xAC\xD5\xC2\x8B\x0D\xE9\x82\x87\xF0\xD7\xC5\xE3\xCF\xEB\xF1\xEA\xF4\xD9\xEE\xEC\xF0\xF4\xD2\xFB\xE9\xF5\xFA\xD9\xEF\xE1\x8D\x05\xF0\xFE\xE7\xF8\x00\xB4\x71\x82\x6E\x0E\x3D\x7F\x01\x7F\x03\x88\x79\x82\x72\x02\x8D\x8A\x6F\x82\xD0\x4E\x8A\x82\x84\x0C\x8F\x84\x85\x84\x16\xBA\x60\x04\x82\xF4\x51\x0C\x85\x86\x13\xA0\x85\x85\x88\x24\xA3\x86\x88\x86\x25\xA8\x87\x89\x7B\x17\xAC\x82\x8A\x8A\x30\xAE\x89\x8B\x7A\x10\x68\x7E\x77\x40\x13\x1F\x88\x70\x05\xFD\x55\x0A\x8F\x8A\xF3\x6F\x82\x8C\x90\xF6\x77\x86\x92\x7E\xF9\x7E\x72\x79\x40\x16\x3F\x81\x8D\x90\x33\x90\x94\x91\x92\xF1\x57\x0D\x7E\x44\x36\x88\x9F\x7D\x8B\x52\x8F\x95\x92\x96\x4B\x8A\x97\x7C\x84\x43\x9E\x94\x94\x97\x21\x59\x0E\x93\x7A\x1A\x2B\x9D\x95\x99\x70\xAF\x92\x9F\x97\x62\x87\x95\x9C\x98\x63\xA8\x97\x9A\x90\x73\xBB\x91\x95\x48\x1B\x2E\x91\x48\x07\x82\x8A\x4D\x05\x7F\x14\x59\x97\x9F\xA2\x64\xBD\x9B\x94\x9F\x74\x8D\xA4\x9F\x07\x85\x8F\xAF\x9E\x9F\x53\x96\xA8\x6C\x08\xFD\x61\x05\xA5\x98\x92\x98\xA6\x9A\xA6\xA3\xA0\xAA\x9C\xA9\x71\x91\xA4\x7E\x08",
			"\x9F\x83\x43\x09\xAB\x76\xA1\xA8\xAA\xA3\xA6\x90\xA2\xA9\xAA\xB7\xB4\xA9\x9E\xAD\xB3\xA1\x46\x46\xA2\xF1\x65\x00\xAD\x40\x26\x03\xBC\xA3\xA9\xB5\x97\xAD\xAD\xAE\xAA\xBC\xA9\xB0\x6E\x27\x06\xB2\xAF\xB3\xA5\x83\x48\x09\x7F\x29\x12\xB8\xB3\xAE\xCA\x94\xB8\xAF\xB2\xE0\x9E\xBA\xAD\xAC\xF4\x58\x40\xB0\x7D\x2B\x1A\xBE\xB0\xB7\x99\xA2\xBD\xB1\xB7\xEC\x95\xB4\xBB\xBA\xF3\xB0\xB6\x9C\x0B\xC6\xAD\x06\xB2\x0B\xEA\xB6\xB8\x9D\xBD\xED\xB1\xBF\xB6\xBB\xCC\x85\xCE\x73\x0B\xFD\x81\xC0\xC2\x71\x30\x3D\x71\x0D\xC2\xF2\xBF\xB2\xC7\xB1\xF4\x93\xC3\xB6\xC0\xE3\x96\xCB\xB6\x9D\x32\x06\xB3\x0C\xC4\x03\xD8\xCF\xBA\xC2\x1A\xD5\xC4\xC6\xBF\x27\xE4\xC9\xC9\xC4\x8B\xB4\x06\xB1\x0D\xC6\xB6\x00\xC9\xC6\x2B\xE1\xCB\xC2\xCD\x25\xE8\xC7\xC7\xCD\x34\xF1\x77\x0F\xCC\x23\xC6\x78\x0D\x7F\x39\x00\xD6\xC0\xC1\xE1\xA2\xC7\xD2\xD2\x49\xFC\xC1\x4A\x0E\xC6\xBB\x06\xD1\xD3\x39\xEA\xCB\xCD\xD5\x2C\xF1\x7C\x0F\xD4\x48\xDD\xDC\xD2\xD7\x76\x96\x3A\x42\x65\x60\x72\x48\x57\x55\xB9\xB2\x40\x7B\x5B\x5C\x6B\x61\x66\x4C\x6E\xDE\x62\x4C\xD9\x6F\xE9\x44\xDE\xDC\x76",
			"\xDC\x53\xDE\xDE\x79\xE5\xDD\xDD\xDD\x26\x77\xD1\x6E\xD9\x0A\x67\xD8\xC6\xDA\x0A\x70\x50\x5A\xE0\xEF\x7B\xDE\xDD\xE0\x7C\xE6\x46\xE2\x40\x93\xD8\xD2\x4D\x47\x6B\xC3\x4A\xE1\x64\x8C\xF2\x74\xE1\x42\x95\xF5\xC7\xE5\xE6\x02\x5B\xEE\x66\x70\x94\xDC\x54\xE9\x40\xA8\xEF\x71\xDF\xE0\x29\x6D\xE0\x01\xE8\x88\xE7\xB6\x4B\xEB\x8D\xE9\x46\xE8\x4D\xEF\x6B\xE4\x4C\xDC\x91\xE3\x48\xEE\xE7\xBA\xFC\xE1\x66\xEF\x75\x5D\xE7\xE7\xDF\x78\xD0\xEF\xE3\x48\xCA\xCB\xF0\xF5\xF0\x1F\x61\xE4\xEC\x97\xB5\xEC\xDB\xE0\xF5\x1E\x51\xF2\xF5\xF7\xDC\xDD\x46\xF5\xDA\x29\x7E\xEB\xEF\x7B\xB2\xF2\xE9\xF7\x40\xEA\xE9\x43\xF3\xF7\x1F\x69\xFA\xEA\x9B\xEF\xF0\xFD\x47\xF9\xBF\xE5\xF6\xF2\x67\xF5\xF6\xFD\xFC\xFC\xF8\x75\x2C\xF2\x5C\x2E\x7A\xF8\x45\x87\x7B\x07\x92\x79\x02\xCB\x7B\x81\xCB\x4D\x86\x71\x80\x63\x27\xF8\x33\x5B\x7D\xD2\x44\x81\x7C\xFF\x0F\x80\xF3\x30\x7E\x79\x08\x9F\x22\x83\x92\x65\x70\xF9\x26\x26\x7C\xAE\x32\x72\x80\xF4\x78\x83\x09\xF3\x76\x76\xE1\x58\x81\x80\x2C\x9B\x7E\x7C\x7F\x7F\x7A\x1A\x92\x78\x86\x60\x23\x83\xF6\x4F\x7F\x82\x0C\xA0\x83",
			"\x7A\x3C\x80\x7D\x10\x9D\x2F\x87\x1E\x83\x8F\x1F\x13\x82\x5D\x05\x81\x28\x7E\x08\x8D\x78\x88\x1E\x82\x89\x14\xC4\x8E\x87\x2A\x87\x8D\x88\x1E\x29\x8B\xE1\x7A\x79\x21\x26\xB1\x71\x71\x31\x8C\x7D\xDB\x18\x86\x87\xE5\x40\x3F\x89\xD5\x72\x87\x7B\x5C\x37\x88\x1D\x9C\x76\x8A\x53\x99\x80\x1C\xE8\x82\x8A\x3A\x94\x8F\x8A\x18\x9A\x88\xCF\x4B\x80\x00\x2F\x9D\x86\x8E\x72\x98\x8E\x20\xF1\x88\x8B\x3B\x84\x91\x8F\x22\x94\x80\x17\xDA\x71\x32\xD9\x4D\x86\x77\xED\x77\x74\x19\x98\x87\x8C\x0E\x92\x82\x8D\xF2\x2C\x8D\x1C\xEE\x8E\x33\x42\x81\x97\x90\x83\x80\x92\x27\xA3\x98\x90\xD0\x63\x83\x24\x25\x9B\x84\x28\xAB\x92\x95\x39\x96\x96\x88\xAC\x8F\x95\x16\x89\x9A\x89\x45\x9A\x76\x84\x0A\x27\x35\x0E\xA9\x87\x89\x32\x97\x75\x92\xB9\x61\x86\x1A\xB2\x2A\x92\x40\x9C\x91\x36\xA4\x81\x96\x2C\x86\x9D\x94\x65\x81\x98\x8A\xCD\x91\x97\x33\xE9\x86\x94\x45\xA4\x80\x8C\x60\x3E\x96\x4C\x3A\x91\x8E\x60\x84\x7F\x8F\xCB\x9F\x1D\x31\xE1\x9C\x9A\x40\x9E\x9E\x7E\xCC\x81\x9F\x38\xD3\x9E\x23\x72\xA1\x9F\x9C\xE8\x9E\x93\x3A\xDF\x93\x24\x77\xAC\x9D\x23\xF6\x94",
			"\x9F\x47\x79\x98\x9D\x7F\x3C\x98\x9D\xBE\x77\x7B\x35\xD5\x97\x78\x5A\x9E\x31\xA0\x61\x89\x77\x2E\x84\xAE\x33\x7F\xB6\x79\x24\x76\x18\x92\xEC\x21\x78\x7F\xCE\x79\x9B\x78\x39\x26\xA2\x05\x89\x26\xA2\xD5\x1E\xA1\x21\xC3\x7C\x35\x42\x22\xA6\x21\x8B\xB9\x97\xA3\x06\x3E\x9B\xF0\x2A\xA3\x6D\x93\xA0\xA5\xA5\x09\x26\xA5\x42\x73\x92\xA6\x83\x34\xA0\xA5\xB7\x9C\xA2\x4B\x86\x23\x79\x8A\xBB\xA3\x20\xC3\x69\x96\x41\x1D\xAF\xA5\x84\x02\xAB\x20\x44\xBC\xA6\x46\xCC\x80\xA7\x92\xB8\xA2\xA1\x8C\x88\xAB\x4F\x8B\x2A\x20\xF2\x0C\xA3\xA3\x43\xB3\xA9\x40\x43\x76\xAA\xB4\x5D\x8D\xA9\x03\x35\xA6\x18\xD7\xAC\xA8\x9D\xB1\xA7\xA9\xAC\x6B\xA9\x1F\xE0\xA2\x20\xB1\x82\x27\x3C\xC1\x2A\xAE\x4F\xE7\xA5\xA8\x83\x30\xAB\xAC\x5E\xB1\xAA\x40\x49\xA0\xA8\x85\x3C\x3A\x51\x14\xAC\xAE\x69\x68\xA0\x01\xBF\xB1\xAC\xAC\x6B\xA6\xAE\x53\xF5\xA3\x21\x02\x4C\xB3\xAF\x98\x98\x7F\x2F\x7D\x39\x9F\x6C\x6A\x88\x7F\xC0\x02\xB0\x00\x1D\x7F\x55\xCB\x8A\x24\x18\x9A\xB8\x7F\xA1\x1E\xB9\x20\x64\x1A\xB1\x74\x56\x44\xB6\x41\x4C\x1D\x3E\xD9\x5E\x42\xB5\x03\x2D\x19\x7F\x21",
			"\x2D\xAB\xFD\x78\x7E\x19\xB3\xAA\x23\x3C\x98\x90\x01\x67\x2D\xB2\x21\x07\x5C\xB5\x42\x50\x1D\x3F\xD0\x7E\x42\xB8\x06\x31\x19\x7F\x1D\x71\x50\xE4\x83\x22\x1A\x94\xAA\x22\xA7\x4E\xB2\x21\x69\x3D\x3B\x78\xD1\x54\xB9\x40\x54\x17\xBA\x85\x38\x58\xB6\x02\x35\x19\x7F\x3D\x08\x92\x87\x88\x3C\x4E\x19\xB4\x68\x4D\x02\xA7\xBD\x24\x72\x78\xB1\xEC\xB8\x35\xE8\x11\x9D\xBC\xE7\x1D\x74\xBE\x2A\x78\x7C\x7E\xC6\x34\x4F\x7C\xBB\xB8\x67\x9B\xB8\x99\x98\x41\x60\xC1\xF8\x39\x9E\xBC\xB8\x34\x4F\xF0\x0D\x8C\xB6\x92\xA1\xAA\xAD\xF1\x34\x4E\xEF\x1D\x7E\xB1\xBC\x83\x26\xC1\x02\x38\xC3\x56\xDA\xAB\x50\x3A\x5B\x40\xB1\xF1\x35\xC0\x5E\xFD\xA0\xC4\xFA\x34\x4D\x46\x16\xC2\x20\x8F\x08\xB1\xB9\xC3\xA9\xA4\xC3\x11\xC9\x49\x93\x2D\x88\x37\x0F\xEE\xC3\x20\xDE\x91\xBC\x7F\xC9\x49\xB5\x1B\xC2\x20\x4B\x29\xC1\x23\x6B\xBE\xC1\x21\x79\x9A\xC5\xC3\x49\x4D\x4F\x57\xEA\xB3\x9E\xDF\x71\xC6\x39\xA3\xB9\xA9\x42\x53\xB4\xC9\x45\x7E\x70\x9E\xBA\x24\xC1\xCF\x74\x35\xB7\x0C\xC9\x4C\x4E\xAC\x54\xC4\xCB\x5D\xC1\x20\x27\xE6\xC1\x49\x9D\xA1\xC8\x00\x42\x52\xCD\xF5",
			"\x37\xAD\xAD\x5F\xC9\x49\xB1\x4B\xC1\x4C\x14\xC3\x21\x74\x6F\xC1\x22\x8E\xEB\x34\x4E\xCB\xBA\xA9\x20\xDF\xAA\xCF\x8A\xEA\xC2\xC4\x38\xCE\x3C\x4E\xFC\x45\xC6\x6E\x33\xC4\xD0\x08\xE7\xCE\x39\x0D\x68\xB1\xC7\x08\xB0\xC9\x3B\xC0\xBE\xAF\x71\xCE\x3A\xCB\x74\xCF\x6B\x81\x2D\xC3\x20\x36\xD7\x3C\x9D\x3F\x6A\xB1\x81\x12\x6D\xCD\xB2\x21\xD6\x40\x05\xD3\x62\x2D\xEE\xD2\x21\x43\xC3\x22\x61\xA2\xD9\x49\xAD\x68\xD4\x4E\xB1\xC2\x22\xAA\xAD\xD9\x48\xF2\x88\xB7\x07\xC6\x56\xCE\xA1\x83\xC9\x48\x20\x1A\xB1\x3E\x4A\xDF\xCC\x00\x42\xDA\xCF\x4C\xE1\x4C\x08\x9A\xA8\x0A\x5A\xD1\xC9\xA6\x83\x03\xD7\xC1\x87\xC9\x4A\x12\x02\xC7\x3E\x4E\x5C\xD2\xC5\x8E\xD9\xC9\x92\x4D\x0C\xDA\x81\x10\x0A\xAD\x69\xD5\xDB\x40\x47\xB6\x21\x1C\x59\xDE\x39\x52\x05\xDE\xE5\x32\x3C\xDD\x81\x0C\xD4\xD6\xCE\x35\x0A\x66\xD9\x06\x59\x7B\xE0\xDF\xDD\x60\x73\xDD\x48\x3D\xC8\x46\x67\xF7\x3A\x0B\x5C\x63\x20\xC1\x82\x2E\xDE\x5E\xCE\x3B\x0B\x6A\xBD\x0A\xB1\x15\xD3\xD8\x7C\xE1\x4E\x0B\xC7\xD4\x3F\x9C\xD2\xC6\x20\x8A\xCD\xD8\xE0\xF7\x22\x0E\x66\xE6\x0A\xAC\x73\x5C\xE3\x20",
			"\xC9\xD8\xD8\xB1\xCE\x38\x0D\x8C\xFA\x31\xD1\x8B\xA6\x21\xCA\xD0\xA6\xE3\xFB\x2C\x0A\xB3\x70\x0A\xAF\xC7\x74\xA6\x21\xE6\x86\x22\x4D\x20\xF6\x4E\x1C\x72\xD2\x75\x41\x4A\x23\xE6\x0E\xE1\xE1\xD1\x86\x5A\x20\xA0\xEB\xE1\x4C\x75\x09\xE2\x40\x54\xD2\x20\x42\x41\xEA\xE0\x0A\x31\xA1\xA9\xF6\x49\x51\x98\xF5\xE6\x4E\x7A\x0E\xE4\x72\x43\x6C\xE7\x81\x1D\xEE\xD2\x57\xEB\x52\x1F\x1A\xB2\x10\xB5\xBE\xD6\xEB\x02\x3E\xD8\xDC\xC9\xE7\x3E\x42\x22\xE8\x37\x42\x04\xB2\xDC\xE8\xEF\xE9\xFB\x08\x12\xB3\x8C\x0A\xAE\xB4\x8F\xB1\x20\x2A\xC3\x24\x52\x69\xF1\x3E\x23\x44\xE7\x6A\x00\x21\xCE\x20\x7B\xF6\x4F\xAB\xEA\xB9\xDC\x81\x08\xF5\xEF\x76\x51\x12\xD4\x81\x25\xF3\x80\x0F\xF7\xEB\x58\xE9\x22\x24\x77\xE6\x39\x5F\x73\xE8\xC9\xCE\x36\x10\xE9\xEB\x3E\x08\xC2\xA6\xF4\xEF\xA0\xEB\x52\x26\x1A\xBE\x12\xB5\x94\x0C\xB0\x1B\xEA\xE5\xEC\xF1\x30\x15\xD5\xF2\x30\xE1\x23\xAA\x21\xEE\xB4\xE2\xF3\x24\x64\x12\xB3\xA8\x0A\xAD\x18\x0A\x27\xC9\xEC\x86\x24\xCD\x98\xF3\x62\x2A\x0C\xFB\x63\x80\x17\x59\x21\xC3\xF4\xEE\xD3\x4B\x62\x20\x3F\xC3\x20\xFA\xBB\xF4\x3D",
			"\x2B\x1B\xF0\x00\xEF\xC2\x27\xFA\xD1\xEB\xE9\x42\x2E\x1E\xF7\x90\x26\xE2\xF7\xC5\xEE\x3A\x2C\x30\xC4\x3F\x96\xC1\xF9\x21\xEF\xE4\xFA\xF6\x93\x67\x16\x0E\xFC\x12\xAD\x6F\x0C\x7C\xDE\x5A\x10\xE9\x29\x78\xF4\x1E\x0B\xE4\x7A\x2F\xC3\x46\x62\x97\x3A\x5D\x23\x6B\x3F\x2B\x43\x5B\xFF\x5A\x12\x13\x8F\x0F\xEF\x5A\x28\x27\x47\x81\x55\x6B\x5E\x68\x1B\x67\xE2\x33\x5B\xF3\x51\x12\x21\x8A\x56\x34\x1E\x47\x2E\x16\x82\x23\x1A\x5F\x21\x1A\x82\x44\x77\x42\x38\x4B\x75\xFA\x1F\x40\xF7\x51\x12\x33\x8A\x59\x27\x4D\x39\x34\x18\x60\x27\x1A\x83\xED\x43\x5B\xFE\x51\x12\x3F\x8C\x61\x34\x1E\x4B\x00\x0A\x4D\xC3\x37\x42\x47\x81\x12\x49\x84\x58\x34\x17\x64\x3E\x1E\x84\x32\x17\x64\x0E\x82\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp3",
			L"Exp4",
			L"Exp5",
			L"Exp6",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID @ >",
			L"[3][Exp0]<< \"(\" !Exp6 \")\" @ >>",
			L"[4][Exp0]<< \"(\" !Exp6 @ \")\" >>",
			L"[5][Exp0]<< \"(\" @ !Exp6 \")\" >>",
			L"[6][Exp1] BEGIN ",
			L"[7][Exp1] END [ENDING]",
			L"[8][Exp1]< Exp1 \"^\" @ Exp0 >",
			L"[9][Exp1]< Exp1 \"^\" Exp0 @ >",
			L"[10][Exp1]< Exp1 @ \"^\" Exp0 >",
			L"[11][Exp1]<< !Exp0 @ >>",
			L"[12][Exp2] BEGIN ",
			L"[13][Exp2] END [ENDING]",
			L"[14][Exp2]< Exp2 \"*\" @ Exp1 >",
			L"[15][Exp2]< Exp2 \"*\" Exp1 @ >",
			L"[16][Exp2]< Exp2 @ \"*\" Exp1 >",
			L"[17][Exp2]<< !Exp1 @ >>",
			L"[18][Exp3] BEGIN ",
			L"[19][Exp3] END [ENDING]",
			L"[20][Exp3]< Exp3 \"+\" @ Exp2 >",
			L"[21][Exp3]< Exp3 \"+\" Exp2 @ >",
			L"[22][Exp3]< Exp3 @ \"+\" Exp2 >",
			L"[23][Exp3]<< !Exp2 @ >>",
			L"[24][Exp4] BEGIN ",
			L"[25][Exp4] END [ENDING]",
			L"[26][Exp4]< Exp3 \"=\" @ Exp4 >",
			L"[27][Exp4]< Exp3 \"=\" Exp4 @ >",
			L"[28][Exp4]< Exp3 @ \"=\" Exp4 >",
			L"[29][Exp4]<< !Exp3 @ >>",
			L"[30][Exp5] BEGIN ",
			L"[31][Exp5] END [ENDING]",
			L"[32][Exp5]< Exp4 \"?\" @ Exp5 >",
			L"[33][Exp5]< Exp4 \"?\" Exp5 @ >",
			L"[34][Exp5]< Exp4 @ \"?\" Exp5 >",
			L"[35][Exp5]<< !Exp4 @ >>",
			L"[36][Exp6] BEGIN ",
			L"[37][Exp6] END [ENDING]",
			L"[38][Exp6]< Exp5 \"$\" @ Exp6 >",
			L"[39][Exp6]< Exp5 \"$\" Exp6 @ >",
			L"[40][Exp6]< Exp5 @ \"$\" Exp6 >",
			L"[41][Exp6]<< !Exp5 @ >>",
			L"[42][Module] BEGIN ",
			L"[43][Module] END [ENDING]",
			L"[44][Module]<< !Exp6 @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver>(&BinaryOpTokenDeleter, &BinaryOpLexerData, &BinaryOpModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<binaryop::BinaryExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<binaryop::BinaryExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
