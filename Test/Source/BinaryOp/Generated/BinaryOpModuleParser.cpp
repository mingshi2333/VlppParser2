/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "BinaryOpModuleParser.h"

namespace binaryop
{
	void BinaryOpModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2459; // 22133 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 155;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\x75\x56\x00\x00\x93\x09\x00\x00\x0A\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x09\x0A\x98\x0A\x9E\x0A\x84\x12\x84\x15\x0A\x9C\x02\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x81\x9A\x81\x01\x99\x94\x21\xB6\x89\x9A\x96\x82\x9B\x97\x93\x37\xAC\x81\xAE\x93\xA0\x98\x8E\x9C\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x3D\xC8\x8F\xAA\xA1\xAC\xA6\x83\x8D\x3B\xC9\xA0\x9A\xA3\x9B\xAB\xAC\xAF\x5D\xD5\x8E\xA2\xB0\xAB\x82\x9E\xAE\x3F\xDF\xA4\xB4\xA6\xB2\xAA\x83\x01\x35\xE8\xB2\xA0\xB9\xB1\xB1\xB6\xAB\x77\xE3\xB9\xA5\xB2\x87\xB0\xBB\xB9\x6B\xEA\xBB\xAC\xBD\xBE\xB7\xC0\xC1\x85\xF8\x89\xDA\xBB\xC4\xBD\x80\xBF\x81\xF6\x8D\xC4\xC1\x84\x01\xB9\xBF\x98\x91\xF5\xBB\xC0\xC7\xC2\xC9\xC7\x86\x93\xC8\xC0\xDA\xC1\x81\x03\xCB\x9A\x8A\x8C\x99\xA9\xCE\xCC\xCF\xD6\xA2\x9F\xE2\x81\xD4\xD4\xC5\xDA\xC7\xB3\xA5\xC0\x07\x08\xD6\xD6\x84\x84\x06\xBC\xBE\xD0\xD7\xDC\xC9\xDC\xDB\xC7\xB8\xD0\xC3\xE9\xD4\xE1\xE4\xE3\xCB\xB1\xEF\xCD\xE4\xEC\xE6\xEA\xE9\x9D\xD8\xCE\xE9",
			"\x0D\xDA\xEE\x82\x80\xAC\xD5\xC2\x8B\x0D\xE9\x82\x87\xF0\xD7\xC5\xE3\xCF\xEB\xF1\xEA\xF4\xD9\xEE\xEC\xF0\xF4\xD2\xFB\xE9\xF5\xFA\xD9\xEF\xE1\x8D\x05\xF0\xFE\xE7\xF8\x00\xB4\x71\x82\x6E\x0E\x3D\x7F\x01\x7F\x03\x88\x79\x82\x72\x02\x8D\x8A\x6F\x82\xD0\x4E\x8A\x82\x84\x0C\x8F\x84\x85\x84\x16\xBA\x60\x04\x82\xF4\x51\x0C\x85\x86\x13\xA0\x85\x85\x88\x24\xA3\x86\x88\x86\x25\xA8\x87\x89\x7B\x17\xAC\x82\x8A\x8A\x30\xAE\x89\x8B\x7A\x10\x68\x7E\x77\x40\x13\x1F\x88\x70\x05\xFD\x55\x0A\x8F\x8A\xF3\x6F\x82\x8C\x90\xF6\x77\x86\x92\x7E\xF9\x7E\x72\x79\x40\x16\x3F\x81\x8D\x90\x33\x90\x94\x91\x92\xF1\x57\x0D\x7E\x44\x36\x88\x9F\x7D\x8B\x52\x8F\x95\x92\x96\x4B\x8A\x97\x7C\x84\x43\x9E\x94\x94\x97\x21\x59\x0E\x93\x7A\x1A\x2B\x9D\x95\x99\x70\xAF\x92\x9F\x97\x62\x87\x95\x9C\x98\x63\xA8\x97\x9A\x90\x73\xBB\x91\x95\x48\x1B\x2E\x91\x48\x07\x82\x8A\x4D\x05\x7F\x14\x59\x97\x9F\xA2\x64\xBD\x9B\x94\x9F\x74\x8D\xA4\x9F\x07\x85\x8F\xAF\x9E\x9F\x53\x96\xA8\x6C\x08\xFD\x61\x05\xA5\x98\x92\x98\xA6\x9A\xA6\xA3\xA0\xAA\x9C\xA9\x71\x91\xA4\x7E\x08",
			"\x9F\x83\x43\x09\xAB\x76\xA1\xA8\xAA\xA3\xA6\x90\xA2\xA9\xAA\xB7\xB4\xA9\x9E\xAD\xB3\xA1\x46\x46\xA2\xF1\x65\x00\xAD\x40\x26\x03\xBC\xA3\xA9\xB5\x97\xAD\xAD\xAE\xAA\xBC\xA9\xB0\x6E\x27\x06\xB2\xAF\xB3\xA5\x83\x48\x09\x7F\x29\x12\xB8\xB3\xAE\xCA\x94\xB8\xAF\xB2\xE0\x9E\xBA\xAD\xAC\xF4\x58\x40\xB0\x7D\x2B\x1A\xBE\xB0\xB7\x99\xA2\xBD\xB1\xB7\xEC\x95\xB4\xBB\xBA\xF3\xB0\xB6\x9C\x0B\xC6\xAD\x06\xB2\x0B\xEA\xB6\xB8\x9D\xBD\xED\xB1\xBF\xB6\xBB\xCC\x85\xCE\x73\x0B\xFD\x81\xC0\xC2\x71\x30\x3D\x71\x0D\xC2\xF2\xBF\xB2\xC7\xB1\xF4\x93\xC3\xB6\xC0\xE3\x96\xCB\xB6\x9D\x32\x06\xB3\x0C\xC4\x03\xD8\xCF\xBA\xC2\x1A\xD5\xC4\xC6\xBF\x27\xE4\xC9\xC9\xC4\x8B\xB4\x06\xB1\x0D\xC6\xB6\x00\xC9\xC6\x2B\xE1\xCB\xC2\xCD\x25\xE8\xC7\xC7\xCD\x34\xF1\x77\x0F\xCC\x23\xC6\x78\x0D\x7F\x39\x00\xD6\xC0\xC1\xE1\xA2\xC7\xD2\xD2\x49\xFC\xC1\x4A\x0E\xC6\xBB\x06\xD1\xD3\x39\xEA\xCB\xCD\xD5\x2C\xF1\x7C\x0F\xD4\x48\xDD\xDC\xD2\xD7\x76\xAE\x3A\x42\x65\x60\x72\x48\x57\x55\xB9\xB2\x40\x73\x40\x70\x60\x5B\x69\x64\x32\x6F\xDE\x66\x4C\x64\xF0\xD9\x49\xDD\x73",
			"\xF7\xDC\x54\xDD\x7B\xFA\xD5\xDA\xDF\x76\xE6\x48\xDD\x6C\x7C\xFF\xD2\xE1\xDF\x87\xC6\xE3\x4B\xE0\xEF\x45\xE1\xE3\xE2\x88\xE3\x47\xDB\x40\x93\xFC\xCA\xDA\x42\x6D\xD1\x6C\xE2\x7C\x8E\xF9\xD9\xE3\xE3\x1F\x55\xE1\x42\xE8\x35\xF2\x4F\x3F\xDA\x02\x59\xEE\x67\xE6\xA6\xE9\x44\xE8\xE9\x8D\x97\xE9\x42\xEA\xB1\x42\x72\x40\xEC\x29\x68\xE1\x42\xED\xEF\x72\xD4\xE1\x4A\xBC\xC0\x08\xEE\x49\xBA\xC0\x01\xF1\xDC\x91\xDF\x44\xEC\x4D\xF2\x45\xF5\x5E\xEF\x8D\xE9\x40\xF4\xE7\x29\x4B\xF4\x4E\xEC\xCC\xF1\x6C\xE9\xEB\x90\xCA\xEF\x47\xF6\xDC\xDE\x40\xF9\xF8\xFF\x23\xF1\xFB\xEB\x69\xF9\xE8\xE4\x57\xE6\xDC\xFD\xF9\xEB\xEF\xE6\xE8\xFB\xAC\xD8\xEC\xDC\x55\xF0\xC7\xEA\xF7\xBA\x49\xD3\xE4\xFE\x44\xFE\x5C\x25\x79\xFE\x7C\x79\x78\x8F\x16\x7D\x2E\xCE\x7C\x29\xFF\x7E\x7F\x1F\x05\xBE\x7F\x80\x01\x99\x7B\xEA\x05\x8D\x23\xF8\x5D\x77\x77\x9F\x7E\x71\xF7\x20\x72\x7C\x0A\xA5\x7E\x83\xF3\x62\x5D\xFD\x29\x7C\x7C\x0F\x96\x80\x70\x1A\x9F\x7A\x09\xA0\x8A\x21\xE1\x51\x4B\x84\x01\x36\x7A\x4C\x41\x78\x80\x37\x4E\x84\x7C\x34\x91\x83\xFE\x23\x27\x87\xF0\x50\x80",
			"\x2C\x09\x8E\x6E\x07\xBD\x8C\x7B\x1F\x91\x31\x88\x9A\x6B\x86\xF7\x1D\x8B\x89\x0A\x8A\x8C\x83\x4E\x8D\x8B\x07\xD2\x87\x85\x0C\x98\x82\x72\x2D\x89\x7C\xF1\x6B\x70\x2D\x2A\x9B\x81\x85\x4C\x90\x8B\x14\xE2\x8E\x8A\x15\x94\x8F\x89\x60\x91\x8A\x18\xA1\x88\x62\x18\x80\x02\x86\xC0\x7C\x8B\x11\xB6\x83\x89\x3A\x92\x8E\x88\x9E\x28\x8B\x04\xE7\x8C\x8E\x32\xA8\x8F\x8A\x66\x9E\x8D\x1F\xE9\x83\x8C\x42\xA5\x89\x8C\x84\x8C\x8E\xE5\x7A\x7F\x2D\x12\x83\x90\x90\x88\x90\x92\x1A\x86\x9F\x8F\xE8\x56\x8E\x92\x5F\x92\x91\x21\x9A\x97\x91\x49\x9A\x92\x91\x58\x6D\x75\xF1\x70\x86\x25\xE0\x71\x7A\x80\x0A\x96\x8E\x18\xC4\x8D\x74\x3C\xB1\x32\x8F\xDA\x75\x90\xF5\x17\x93\x97\x4C\x98\x91\x90\x94\x8F\x93\x2D\x91\x9B\x96\x4F\xBD\x93\x93\xBF\x9D\x90\x30\xB5\x98\x97\x4F\x99\x8C\x7E\x8C\x96\x7D\x17\xB2\x9C\x81\x61\x8D\x9A\x98\xD0\x8C\x98\x03\xD1\x9A\x96\x62\xBC\x96\x9A\xBE\x98\x9A\x33\x8C\x80\x95\xD2\x6E\x8C\x94\x23\x21\x7B\x69\x40\x84\x8E\x29\xAC\x96\x74\xE7\x92\x26\x2B\xEF\x30\x97\xF7\x14\x9A\x90\xF0\x99\x95\x3C\x9C\x92\x9A\xFF\x6F\x9A\x9E\xF8\x94",
			"\x9D\x35\xCF\x9C\x85\x84\x2E\x80\x48\xDF\x89\x96\x14\xE3\x92\x8C\x82\x84\x96\xA0\x9A\x88\xA3\x2F\x8A\xAA\x9A\x86\x8D\x9E\xA1\x0C\x85\x7B\x3F\x9E\x22\xA2\x1D\xA8\x6C\x9C\xFE\x96\xA0\xE5\x1A\xA7\x76\xAE\x10\xA6\x7F\x76\x12\x82\x40\x41\x74\x74\xEB\x5B\x74\xA1\xD3\x79\x27\x31\x8D\x99\x21\x93\xAA\x37\xA5\x09\x33\x78\x6F\x09\x23\xA6\x83\x28\xA2\x21\x37\xA9\x21\xF1\x53\x7B\xA7\xB1\x78\xA0\xA6\x06\x2E\xA5\x4C\x8A\x2C\x3B\x84\x39\xA6\x20\x45\xB6\xA4\x50\xCA\x91\xA9\x9F\x83\xAB\x76\x3E\xA6\xAB\x52\x82\x20\x3C\x96\x8D\xAA\xAA\x4F\xBF\x3A\x1C\x83\x22\xA8\x83\x13\x7D\xA4\x51\xAA\xA9\x56\x9B\xA0\xAB\x96\x8E\xAE\xAB\x0A\x24\x3D\x46\xE5\xA7\xAA\xB1\xA8\xA9\x21\x6A\xB7\xA2\x55\xDC\xA7\xAD\x81\x13\x7C\xA4\x5B\xA2\x21\x57\xF6\xAD\x3E\xB0\xA6\xA8\xAB\x6F\xA6\x23\x79\x41\x3B\xA4\xA6\xB4\xA8\xB0\x7C\xA9\x23\x60\x83\x28\xAE\xB6\x87\xB6\xAD\x89\xA6\x20\x7F\x0A\x5E\xAF\xB6\x83\x27\xA8\x03\x33\xB0\x61\xEB\xA3\xAE\xBD\xB5\xAB\x21\x0A\x25\x43\x58\x9E\xB2\xA4\x00\x20\x1D\x3F\x0C\xB9\x59\x69\xE1\x1D\x3F\xCD\x6F\x55\xB4\xE2\x1D\x3E\xF5\x07",
			"\x55\xB5\x71\x3D\xAA\x21\x56\x45\xB4\x39\x7D\x31\x78\x0F\x65\xB5\x1C\xFD\x21\x25\x5C\x92\x86\x1D\xE0\x84\xAD\xB4\x00\x07\x1C\x6F\x8A\x27\x41\xD2\xA8\x1F\xB6\x09\x3E\x45\x69\xE9\x1D\xB4\x85\x01\x55\xB4\xEA\x08\xB6\x42\x1E\x55\xB5\x75\x3D\x3B\x7A\xD1\x45\xB4\x3B\x5F\xBA\x20\x7C\x65\xB5\x1D\xFD\x3D\x04\x72\x9F\xA8\x38\xE4\x86\x7B\x69\xD9\x73\xA3\x7A\x2A\xA4\xB3\xC2\xB6\x4C\x74\x03\x8D\xBD\x58\x8C\xB0\xBF\x18\x86\x59\x24\x0C\xB9\xBE\xCA\x1B\x70\x9C\xDC\x01\x68\x67\x00\x0C\xA0\x7B\x86\xC3\xAB\x80\x35\xA7\x3E\x21\x2F\xC2\x40\x0C\xA2\xBE\xD9\x3B\x3A\x21\x12\xC1\x20\x8F\x1C\xB3\x21\x0C\xFB\x35\xC1\x09\xC9\x49\x48\x4D\x4C\xC2\x3B\x62\xB3\xB3\x81\xA4\xAD\x98\x21\x28\x4A\xB9\x83\x25\x4D\x25\xC1\x21\x73\xA8\xC3\x21\xE2\x4B\xC6\x38\x83\x46\x5B\x86\x0A\x55\xA2\xE7\x21\x24\xB6\x34\xC2\x21\xA2\x2E\xC2\x20\xDF\x81\xC9\x20\x49\xBD\xC2\x88\x8A\x2C\x52\xC7\x8E\x6F\xB8\x09\x35\xA8\x84\x8A\x2F\xB4\xCB\x82\x21\xBC\x47\xCB\x52\x94\x87\x2B\xC8\xAA\x4B\x53\xB8\x02\x3E\xC1\x7C\x21\x27\x5B\x1D\xAA\x60\xCC\x01\x3B\xCB\xC4\x21\x2A\xB4\x22",
			"\xC1\x21\x5D\x66\xC6\x3B\x62\x93\xCD\xCA\x83\x26\xBD\xB3\x13\x75\x46\x9B\x80\x03\xCF\xD1\x75\xCB\x20\x08\x6E\xC9\x40\x1D\x61\xC6\x00\x1B\xC3\xCF\x27\xD7\xB3\x9F\x82\x2E\x65\x42\xF1\x3C\xC4\x88\xD6\xBF\x9A\x8A\x22\x67\x42\xC3\x6D\xD0\x2D\xCA\xC7\x40\x33\xC9\xB3\x45\xC1\x20\x6A\x82\xC5\x75\x48\x1C\xD2\x21\x1D\xEB\xC2\x21\xEA\xBF\xAE\x41\x41\x0A\xC7\xD0\x9E\xD2\xD4\x49\x46\xC9\xA7\xBE\xCA\x20\x21\x1C\x6B\x20\xB2\xC5\xD7\xAB\xC3\x02\xD2\x00\x05\x0E\x58\x7A\xCA\xD0\xAD\x89\x26\x09\xFD\xB6\x48\xC6\x78\xC0\x01\xB0\x9D\xA3\xD8\x83\x0A\x0E\xD8\x01\x2E\x09\xAF\xC0\xC6\xB0\x81\x07\xD2\xD8\xA7\xC9\x20\x14\x79\xA3\x63\x26\xC9\xDF\xDA\xCC\xD9\xDA\x41\x53\x0C\xDA\x00\x16\x0D\xD7\x55\xD5\xD9\x40\x52\xB6\x21\x1C\x4D\xDB\x20\x58\x05\xDF\xD5\x00\x0C\xDD\x81\x10\xD3\xCA\x09\x3B\x08\xB4\x80\x0F\x0A\x63\x77\xDE\xDA\xAF\xD3\xDD\x95\x0A\x2E\xDC\x71\xC3\x20\x0C\xB7\xC2\x21\x6E\x86\x2F\xDF\x49\xC9\x21\x0C\xBD\xC3\x0E\xB1\x19\xD4\xCF\x77\xC2\x24\x0C\x9F\xB3\x61\xB1\x2A\xD3\x20\x8A\xFE\xCE\xE2\x01\x29\x0D\xC6\x80\x0E\x0D\x5E\xE6\x5E\xCA",
			"\x01\x28\xD8\xB6\xF8\xD6\x20\x38\x23\xE1\x3E\xFC\x48\xB2\x40\x2A\xE1\xDC\x96\xC3\x25\x0E\x23\xFA\x0D\xAF\x9F\x62\xE7\x80\x17\xBE\x20\x6A\x40\xE4\x00\x7C\x02\xDF\x8D\x41\x24\x50\x09\x34\xE6\xC3\xE0\x63\x62\x6A\xC2\x21\xE8\x06\xE2\x23\x1F\x09\xE1\x20\xA7\xC7\xEF\xD5\x80\x1D\xD6\x20\x46\x53\xC9\x95\xF6\x49\x24\x83\x00\xC5\x7C\x17\xD0\xB2\x21\xFD\xD3\xCC\x0A\x29\x10\x88\x8F\x1D\xD7\x54\xE5\xE9\x20\xDE\xDE\xEB\xD2\x83\x21\x12\xB1\xF4\x3E\xD6\xA3\xB0\xEF\xD9\xF4\x31\x25\x4B\x20\xC5\x13\xBD\xC8\x08\x88\xDC\xB6\x20\x4A\x42\xEF\x13\x45\xE6\x64\xAB\x09\x21\xEF\xAF\xFD\xBB\x51\xE9\xC2\x22\xE1\xD1\xE1\x20\x51\x14\xE8\x00\x91\xE1\x23\xE2\x94\xF0\x01\x51\x3D\xD5\x14\xC6\x5F\x57\xDB\x8B\x51\x24\x53\x18\xC1\x49\xD2\xD9\xEC\x00\x22\xFA\xD2\xC7\xC9\x25\x15\xA7\xE9\x20\x2D\x3D\xD4\x0A\x10\xDB\xE3\xF4\x68\xE9\x22\x2D\x31\xF1\x4C\x2D\x3C\xF3\x20\xB7\xED\xF7\xDC\x82\x2D\x17\xDF\xC2\x24\x18\xBD\xD0\xE0\x4D\x8A\x28\xCB\x81\x02\x5A\xE8\xC6\x09\xF0\xCA\x65\xC6\x21\xE0\xEE\xF4\xE9\x8B\x4D\xCE\xF3\xAF\xD9\x19\xCB\xDA\xFA\x20\xD4\xF6\xE6",
			"\x40\x4A\x1D\xD6\x66\x06\x5F\xE4\x72\xE4\xF6\x42\x4D\x1F\x37\x24\x68\x0E\xF8\x01\x28\xFD\xCD\xD7\xF3\x21\x6A\x2D\xF9\x21\xDD\x1D\xD7\x1B\x70\xF0\x01\x3B\xC3\x20\xCE\x9C\x7F\x0D\x97\x7A\x2F\xA5\x53\x66\xA6\x3E\x5E\x34\x19\x43\xC6\x51\x5C\x02\x67\x12\x0D\x8F\x3F\x0C\x81\x81\x8A\x2F\x5E\xC8\x55\x61\xC2\x3B\x37\xF8\x51\x12\x19\x8D\x6B\x34\x44\x3A\x34\x15\x60\x27\x10\x82\x06\x41\x5C\xD6\x34\x43\x25\x81\x12\xEB\x45\x19\x68\x16\x41\x9B\x34\x43\x2D\x81\x12\x2F\x8B\x6F\x34\x17\x63\x20\x14\x83\x1D\x11\x60\x00\x61\x5C\x38\x83\x72\x34\x17\x4E\x00\x09\x4E\x77\x51\x12\x41\x80\x62\x34\x49\x52\x11\x68\x16\x62\x62\x13\x1E\x68\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp3",
			L"Exp4",
			L"Exp5",
			L"Exp6",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID @ >",
			L"[3][Exp0]<< \"(\" !Exp6 \")\" @ >>",
			L"[4][Exp0]<< \"(\" !Exp6 @ \")\" >>",
			L"[5][Exp0]<< \"(\" @ !Exp6 \")\" >>",
			L"[6][Exp1] BEGIN ",
			L"[7][Exp1] END [ENDING]",
			L"[8][Exp1]< Exp1 \"^\" @ Exp0 >",
			L"[9][Exp1]< Exp1 \"^\" Exp0 @ >",
			L"[10][Exp1]< Exp1 @ \"^\" Exp0 >",
			L"[11][Exp1]<< !Exp0 @ >>",
			L"[12][Exp2] BEGIN ",
			L"[13][Exp2] END [ENDING]",
			L"[14][Exp2]< Exp2 \"*\" @ Exp1 >",
			L"[15][Exp2]< Exp2 \"*\" Exp1 @ >",
			L"[16][Exp2]< Exp2 @ \"*\" Exp1 >",
			L"[17][Exp2]<< !Exp1 @ >>",
			L"[18][Exp3] BEGIN ",
			L"[19][Exp3] END [ENDING]",
			L"[20][Exp3]< Exp3 \"+\" @ Exp2 >",
			L"[21][Exp3]< Exp3 \"+\" Exp2 @ >",
			L"[22][Exp3]< Exp3 @ \"+\" Exp2 >",
			L"[23][Exp3]<< !Exp2 @ >>",
			L"[24][Exp4] BEGIN ",
			L"[25][Exp4] END [ENDING]",
			L"[26][Exp4]< Exp3 \"=\" @ Exp4 >",
			L"[27][Exp4]< Exp3 \"=\" Exp4 @ >",
			L"[28][Exp4]< Exp3 @ \"=\" Exp4 >",
			L"[29][Exp4]<< !Exp3 @ >>",
			L"[30][Exp5] BEGIN ",
			L"[31][Exp5] END [ENDING]",
			L"[32][Exp5]< Exp4 \"?\" @ Exp5 >",
			L"[33][Exp5]< Exp4 \"?\" Exp5 @ >",
			L"[34][Exp5]< Exp4 @ \"?\" Exp5 >",
			L"[35][Exp5]<< !Exp4 @ >>",
			L"[36][Exp6] BEGIN ",
			L"[37][Exp6] END [ENDING]",
			L"[38][Exp6]< Exp5 \"$\" @ Exp6 >",
			L"[39][Exp6]< Exp5 \"$\" Exp6 @ >",
			L"[40][Exp6]< Exp5 @ \"$\" Exp6 >",
			L"[41][Exp6]<< !Exp5 @ >>",
			L"[42][Module] BEGIN ",
			L"[43][Module] END [ENDING]",
			L"[44][Module]<< !Exp6 @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver>(&BinaryOpTokenDeleter, &BinaryOpLexerData, &BinaryOpModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<binaryop::BinaryExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<binaryop::BinaryExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
