/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "BinaryOpModuleParser.h"

namespace binaryop
{
	void BinaryOpModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2462; // 21957 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 158;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\xC5\x55\x00\x00\x96\x09\x00\x00\x0A\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x09\x0A\x98\x0A\x9E\x0A\x84\x12\x84\x15\x0A\x9C\x02\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x81\x9A\x81\x01\x99\x94\x21\xB6\x89\x9A\x96\x82\x9B\x97\x93\x37\xAC\x81\xAE\x93\xA0\x98\x8E\x9C\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x3D\xC8\x8F\xAA\xA1\xAC\xA6\x83\x8D\x3B\xC9\xA0\x9A\xA3\x9B\xAB\xAC\xAF\x5D\xD5\x8E\xA2\xB0\xAB\x82\x9E\xAE\x3F\xDF\xA4\xB4\xA6\xB2\xAA\x83\x01\x35\xE8\xB2\xA0\xB9\xB1\xB1\xB6\xAB\x77\xE3\xB9\xA5\xB2\x87\xB0\xBB\xB9\x6B\xEA\xBB\xAC\xBD\xBE\xB7\xC0\xC1\x85\xF8\x89\xDA\xBB\xC4\xBD\x80\xBF\x81\xF6\x8D\xC4\xC1\x84\x01\xB9\xBF\x98\x91\xF5\xBB\xC0\xC7\xC2\xC9\xC7\x86\x93\xC8\xC0\xDA\xC1\x81\x03\xCB\x9A\x8A\x8C\x99\xA9\xCE\xCC\xCF\xD6\xA2\x9F\xE2\x81\xD4\xD4\xC5\xDA\xC7\xB3\xA5\xC0\x07\x08\xD6\xD6\x84\x84\x06\xBC\xBE\xD0\xD7\xDC\xC9\xDC\xDB\xC7\xB8\xD0\xC3\xE9\xD4\xE1\xE4\xE3\xCB\xB1\xEF\xCD\xE4\xEC\xE6\xEA\xE9\x9D\xD8\xCE\xE9",
			"\x0D\xDA\xEE\x82\x80\xAC\xD5\xC2\x8B\x0D\xE9\x82\x87\xF0\xD7\xC5\xE3\xCF\xEB\xF1\xEA\xF4\xD9\xEE\xEC\xF0\xF4\xD2\xFB\xE9\xF5\xFA\xD9\xEF\xE1\x8D\x05\xF0\xFE\xE7\xF8\x00\xB4\x71\x82\x6E\x0E\x3D\x7F\x01\x7F\x03\x88\x79\x82\x72\x02\x8D\x8A\x6F\x82\xD0\x4E\x8A\x82\x84\x0C\x8F\x84\x85\x84\x16\xBA\x60\x04\x82\xF4\x51\x0C\x85\x86\x13\xA0\x85\x85\x88\x24\xA3\x86\x88\x86\x25\xA8\x87\x89\x7B\x17\xAC\x82\x8A\x8A\x30\xAE\x89\x8B\x7A\x10\x68\x7E\x77\x40\x13\x1F\x88\x70\x05\xFD\x55\x0A\x8F\x8A\xF3\x6F\x82\x8C\x90\xF6\x77\x86\x92\x7E\xF9\x7E\x72\x79\x40\x16\x3F\x81\x8D\x90\x33\x90\x94\x91\x92\xF1\x57\x0D\x7E\x44\x36\x88\x9F\x7D\x8B\x52\x8F\x95\x92\x96\x4B\x8A\x97\x7C\x84\x43\x9E\x94\x94\x97\x21\x59\x0E\x93\x7A\x1A\x2B\x9D\x95\x99\x70\xAF\x92\x9F\x97\x62\x87\x95\x9C\x98\x63\xA8\x97\x9A\x90\x73\xBB\x91\x95\x48\x1B\x2E\x91\x48\x07\x82\x8A\x4D\x05\x7F\x14\x59\x97\x9F\xA2\x64\xBD\x9B\x94\x9F\x74\x8D\xA4\x9F\x07\x85\x8F\xAF\x9E\x9F\x53\x96\xA8\x6C\x08\xFD\x61\x05\xA5\x98\x92\x98\xA6\x9A\xA6\xA3\xA0\xAA\x9C\xA9\x71\x91\xA4\x7E\x08",
			"\x9F\x83\x43\x09\xAB\x76\xA1\xA8\xAA\xA3\xA6\x90\xA2\xA9\xAA\xB7\xB4\xA9\x9E\xAD\xB3\xA1\x46\x46\xA2\xF1\x65\x00\xAD\x40\x26\x03\xBC\xA3\xA9\xB5\x97\xAD\xAD\xAE\xAA\xBC\xA9\xB0\x6E\x27\x06\xB2\xAF\xB3\xA5\x83\x48\x09\x7F\x29\x12\xB8\xB3\xAE\xCA\x94\xB8\xAF\xB2\xE0\x9E\xBA\xAD\xAC\xF4\x58\x40\xB0\x7D\x2B\x1A\xBE\xB0\xB7\x99\xA2\xBD\xB1\xB7\xEC\x95\xB4\xBB\xBA\xF3\xB0\xB6\x9C\x0B\xC6\xAD\x06\xB2\x0B\xEA\xB6\xB8\x9D\xBD\xED\xB1\xBF\xB6\xBB\xCC\x85\xCE\x73\x0B\xFD\x81\xC0\xC2\x71\x30\x3D\x71\x0D\xC2\xF2\xBF\xB2\xC7\xB1\xF4\x93\xC3\xB6\xC0\xE3\x96\xCB\xB6\x9D\x32\x06\xB3\x0C\xC4\x03\xD8\xCF\xBA\xC2\x1A\xD5\xC4\xC6\xBF\x27\xE4\xC9\xC9\xC4\x8B\xB4\x06\xB1\x0D\xC6\xB6\x00\xC9\xC6\x2B\xE1\xCB\xC2\xCD\x25\xE8\xC7\xC7\xCD\x34\xF1\x77\x0F\xCC\x23\xC6\x78\x0D\x7F\x39\x00\xD6\xC0\xC1\xE1\xA2\xC7\xD2\xD2\x49\xFC\xC1\x4A\x0E\xC6\xBB\x06\xD1\xD3\x39\xEA\xCB\xCD\xD5\x2C\xF1\x7C\x0F\xD4\x48\xDD\xDC\xD2\xD7\x76\xA2\x3A\x40\x5C\x60\x72\x48\x57\x55\xB9\xB2\x4C\x75\x42\x64\xD1\x67\x69\xD9\x29\x6F\xD1\x66\x4C\x6D\xDE\x64\xDC\x57\x77",
			"\xF0\xD6\x49\xDD\xB1\x79\xD3\xDD\x4A\x7C\xEF\x7E\xDE\xDD\x29\x67\xD3\x42\xE1\x3C\xEA\xD3\xD8\x57\x81\xF2\x73\xE1\xDF\x80\xF8\xD5\xE2\x42\x88\xD8\xD2\x4D\x47\x6B\xEF\x5C\xE2\xE4\x26\x55\xE0\x02\xE7\x8D\x8A\xEC\xD8\x57\xC2\x42\x40\xE9\x4A\x99\xC3\x45\xEB\x7B\x72\xC4\xE6\x4B\xEA\x9F\xDC\x59\xEA\x40\xB0\xF2\x4D\xE8\xE4\x26\x7C\x6A\xDF\x48\x9E\xF5\x50\x72\xEB\x23\x73\xE4\x4E\x7C\xB7\xC2\xE1\xDC\xE7\x23\x7A\xEF\xDD\xE7\xC3\xD1\x6F\xEC\xEE\xC1\xCD\xFE\x65\xE3\x97\xD1\xEB\xEF\x47\xD4\xD5\xF3\x49\xF6\xDA\xDE\x4C\xF5\xF7\xFF\x1E\xE7\xE8\x9F\xA2\xDA\xE0\x5B\xF7\xDD\xE8\xFA\xF6\xFA\xD5\xE2\xF9\xD8\xEA\x8B\xE0\x50\xED\xED\xF0\xE7\xB6\x49\xF1\x8E\xE9\x43\xFE\xEC\x6E\xB8\xF0\xFA\x47\xCA\x60\x7B\x47\x3D\x7C\x2B\xE7\x46\x7E\x24\xC2\x74\x26\xED\x48\x7F\x22\xFF\x7F\x7F\x1F\x01\x90\x7B\x00\xD2\x71\x36\x03\xB9\x78\x81\x14\x8F\x3C\xFB\x17\x7B\x83\xC7\x47\x83\x7B\x0C\x9E\x79\x08\x9D\x2D\x82\xEB\x4B\x7C\x77\x94\x6F\x7C\x06\xA3\x77\x7D\x11\xBF\x1D\x84\x7B\x6E\x84\x0C\xA0\x87\x7A\x8F\x2E\x7B\x56\xE5\x63\x23\x06\xB0\x75\x2F\x04\xB4\x7F",
			"\x7E\x2E\x9C\x84\xFF\x76\x73\x24\x07\xBF\x79\x82\x1F\x93\x81\x06\xB2\x26\x83\x07\xBF\x19\x81\x75\x26\x88\xF8\x52\x8D\x7A\x24\x97\x80\x85\x4B\x89\x25\x13\x8F\x80\x8B\xCD\x75\x84\x84\x32\x81\x8F\x17\xAF\x82\x8D\x13\x98\x7E\x85\x37\x82\x5D\x0E\x82\x2B\x83\x19\xA7\x8B\x8C\x6E\x82\x84\x1C\xE5\x82\x80\x39\xA6\x8E\x86\x29\x98\x85\xFD\x66\x71\x32\xD8\x5B\x86\x87\x5C\x34\x8A\xF6\x56\x8E\x89\x38\x9D\x23\x8B\xFF\x76\x33\x18\x82\x95\x7A\x42\x8F\x84\x80\x60\x28\x90\xF8\x5D\x8D\x85\x39\x96\x97\x8E\x60\x97\x91\x1D\x99\x98\x92\x32\xA3\x89\x8D\x18\x6B\x8D\x40\x6D\x84\x8E\x09\xB6\x8B\x93\x9E\x9D\x92\x21\xA9\x98\x95\x55\xA0\x91\x71\x7B\x9A\x84\xE9\x0A\x2A\x91\xC8\x00\x90\x2C\x8C\x97\x72\x23\xFF\x7B\x94\x49\x9D\x7D\x96\xA8\x99\x96\x4C\x3B\x90\x7C\x48\x8E\x7E\x85\x94\x91\x33\x2A\xCB\x95\x95\x24\xA7\x96\x94\x9C\x8D\x94\x1A\xF9\x8A\x8D\x58\xAC\x8E\x8B\xAA\x8D\x9B\x15\xEF\x89\x9A\x4D\x90\x9C\x95\xDF\x8F\x96\xE5\x17\x79\x81\x1D\x8A\x21\x97\xB7\x8E\x6E\x0B\xC4\x99\x7C\x17\xBE\x92\x7B\xC0\x9F\x9A\x30\xA9\x2C\x9C\xED\x46\x9E\x33\xEF\x95",
			"\x79\x32\xD3\x7A\x9B\x42\xBD\x9F\x81\xCC\x9E\x9A\x33\xD1\x9F\x9A\x57\x94\x99\x94\xD6\x83\x94\x57\x71\x93\xA1\x7F\x33\x9E\x24\x0C\xBB\x9A\x47\x11\xAE\x88\x8A\x8F\x86\xA2\xFF\x69\x83\xF8\x51\x79\x21\x8D\x9F\x22\xA3\x43\x88\x6C\x58\x20\xA3\xA5\x83\xB1\x36\x0E\x19\x80\x00\xEC\x1E\x7D\x71\x88\xB8\x7B\x35\x14\x8B\xA5\xFC\x06\x2E\xA4\xD5\x36\xA1\x21\x30\xA3\x22\x15\xD6\x8F\xA5\x73\xB7\xA6\x20\x16\x99\xA7\x41\x3F\xA3\x21\x9A\xB8\xA4\x96\x3E\xA7\xA9\x42\x09\x8D\xA7\xA5\x89\xAE\x20\x42\xAA\xA1\x42\x46\xA0\xAB\x99\x85\xAF\xA9\x03\x31\xA8\x00\x60\x3C\x8F\xAB\x89\x25\xA9\xDF\x36\xAA\x40\x54\xA9\xAA\x93\x92\xAC\xA6\x58\xAB\x22\x59\x80\x0D\xA5\xB4\x81\x22\xAB\xE4\x3D\xA2\x58\x95\x3E\xAC\x00\x30\xAB\xAD\x6D\xBF\xA8\x51\xB4\x78\xAE\xA4\xBA\xAA\xA9\xC1\x3D\xAF\x54\xF5\xAA\xAB\xF3\x01\xB2\xAE\x2C\x88\xAF\x5F\xD5\xA9\x20\xC3\xAA\x72\xB0\x8A\xA6\x20\x58\x83\x2C\x3E\x45\x6C\xA6\xAF\x92\xBB\xAD\x40\x15\xB7\xB0\x91\x9D\xAB\xAC\x84\xAA\x21\x81\x00\xBE\xAA\x0A\x8D\x70\x1B\xFD\x38\x7D\xB6\x19\x8B\x83\x90\x11\xA7\x55\xAC\xA9\x49\xE3\x07",
			"\x51\xB6\xE7\x1E\x76\x4A\xB5\xA6\x21\x36\x7D\x30\x76\x0F\x79\xB3\x20\xDA\x1D\x3D\x48\x71\xA6\xB4\x85\x1B\x1A\xB8\x0A\x3B\x9D\xF3\x5C\x1C\xB6\x85\x07\x41\xA5\x0A\x3D\x19\x7F\x1E\x7E\x46\xE8\x89\x26\x1B\xFD\x31\xA1\xA0\x56\xB6\x21\x6F\x29\xB2\x21\x9E\x5C\xBB\x40\x60\x1D\x3E\xAD\x91\x5A\xBC\x02\x21\x1D\x79\x8A\x28\x5F\xDF\xB6\x4D\x07\x29\xB9\x94\x7A\x8F\xB4\x6A\x9A\x1E\xA6\x38\x39\x33\xBB\x5A\xF1\x3E\x73\x1F\x88\x3E\xB5\x5C\x72\x94\x11\xB8\x31\x24\xFC\x7E\xBA\x65\x11\xAD\xB5\x4A\xD7\x6B\x50\xFC\x72\xB9\xA5\x5A\xB8\xA3\x7F\x8A\x2C\xA7\xFD\xB4\x39\x24\x5C\xA5\xB7\x40\x23\xBE\xB2\x9D\x94\xC2\xB3\x00\x0F\xC1\x06\x9B\x48\xB1\x30\x5C\xC4\xBE\x8C\xBD\xC2\x9D\x21\x25\x46\x15\xC1\x24\x47\x25\xC3\x23\x73\x9D\xB3\x20\x0B\xA2\xC4\x82\x4D\x43\xC2\x71\x24\xC4\xC7\xA1\xB1\xC3\xC5\x0A\x38\xB5\x8F\x81\x28\x4A\x17\xC0\x06\xB7\x43\xC0\x01\x02\xF5\x9B\x3D\x90\x2D\x49\xB1\x5F\x63\x21\x02\x99\xC0\xC9\x84\x34\xB1\xC5\xAE\x46\x58\x95\x81\x29\x9E\xD9\x01\x68\x67\x00\x04\xBA\x87\xCE\x3E\x57\x00\xE3\x3A\x21\x5B\xCB\x51\x48\x42\x53\xB1\x84",
			"\x2B\xB1\xC9\xF1\x2E\xB2\x40\x37\xC2\x7A\x73\x5F\xB3\x62\x2D\xC7\x71\x43\x16\xCA\x37\x90\x3A\x58\xCA\x02\x2D\x63\x8F\xAF\xCB\xAD\x13\xF3\xC9\x49\x21\x3D\x63\xA0\x8B\x59\xC6\x23\xC6\xD1\x20\xF7\xAD\xCA\x42\x2E\x6B\xD0\x99\x4B\xD5\xC8\x7A\xC9\x23\x8C\x94\xB8\xD0\x85\x03\x68\xD0\xE3\x81\x27\xA6\x82\x2C\xC7\xFB\x21\x22\x6A\xA4\xA2\x21\x10\x46\x55\xD4\x81\x0F\xD2\xCD\x4B\x76\x4C\x92\x9C\xD4\xCC\x85\x02\x0E\xCC\x01\x33\xD4\xA9\x9D\xD9\x21\x21\x18\xB3\x20\x47\x06\x59\x9E\x87\xD5\xD7\x84\x08\x0F\xD7\x76\x4F\xCB\x9D\x80\x03\xD8\x48\xFC\xD6\x20\x4C\x08\xD9\x40\x50\x0B\xAD\x2B\xC2\xC6\x20\x30\xD9\xB1\xB1\x86\x22\x0B\xB9\x8B\x54\x53\xA0\xC0\x01\xB6\x99\xD1\x4D\x90\x15\x0E\xDB\x58\x0B\xAC\x6C\xCB\xD5\xBA\x83\x39\x43\xDB\x03\x3A\x0A\xB7\x8C\xCD\xDD\x81\x0D\xD6\xD4\x0A\x3D\x08\x88\xE3\x06\x59\x7B\xC2\x23\xDC\x55\xC0\x6F\xC4\x42\xC8\x47\x67\xC3\x24\x0C\xB8\xC0\x00\xC1\x82\x2E\xDF\x89\x61\x25\x0C\xD2\xC0\x01\x1A\x46\x58\xD2\x62\xE5\xDA\x21\x6A\x11\xE1\x7C\x45\x5D\xCC\x83\x15\xE6\xD9\xF0\xC2\x22\x1B\x11\xE2\x0F\xB5\xB6\xCA\xC3",
			"\x02\x2A\xDB\x40\x74\xCD\x78\x3A\x1A\xE4\x3E\xFC\x4B\xB3\x40\x2A\xE6\x74\x83\xC2\x20\x0F\x11\xFC\x0F\x5A\x9F\x62\xE6\x81\x1B\xBE\x20\x6A\x41\xE5\x40\x7E\x03\xDF\x8D\x41\x24\x50\x09\x34\xE6\xC3\xB1\xD3\x62\x6B\xC2\x21\xE8\x17\xE9\x21\x20\x75\xAC\xC0\xA7\xC7\xEE\xE6\x13\x66\x13\xCB\xBA\x39\x50\x6D\xD1\xEE\x20\x8A\x1B\xE8\x72\x1F\xDE\xEB\x81\x1D\xEC\xDC\xF8\xC9\x22\x23\x11\xE2\x13\xB5\xB0\xBD\xE7\x01\x20\xDD\xD9\x81\xE3\x20\x4A\x22\xE8\x37\xB7\xC9\xD5\xDC\xFC\xC3\xC3\x84\x18\x11\xE2\x9C\x0B\xAF\xB1\xFA\xE0\x01\xF0\x86\x24\x52\x42\xE0\x02\x27\x45\xE6\x64\x56\x49\x22\xEE\x69\xE2\xE3\xA2\x6B\xD3\x20\xC4\xDF\xEB\x20\xA1\x14\xEA\xD1\x80\x04\xF2\x81\x0E\xF7\xF2\x76\x46\x17\xDD\xC6\x3F\x57\xB9\xCB\xE9\x21\xAA\x03\xF7\x7A\x4E\x00\xC5\xD2\xE8\xEC\xEE\x02\x2E\x15\xC4\xB2\x1B\xAC\x2A\x20\xC4\xE3\xA6\xF0\xD5\x42\x34\x1A\xF4\xD9\x32\xD9\x21\x56\x98\xF7\xEB\xA7\xF6\x20\x5C\x11\xE4\x17\x6B\xA1\x0F\x87\x89\x27\xBC\x83\x2C\xC8\xF4\x01\x3E\x14\xE3\xA8\x67\x5B\x84\x02\xF8\xF6\xA1\xC9\x4B\x9B\x83\x2F\xF9\xC8\xC3\x21\x18\x9A\xE6\x67",
			"\xF6\x82\x25\xFA\xE8\xCB\x56\x18\xBD\xE1\x27\xC9\x96\xEE\xFA\x81\x0A\x19\xFC\xC8\x28\x0F\xF2\x86\x2B\xFC\x90\xE6\xFF\x19\x75\xB4\x1B\x5A\xEF\x03\xFF\x81\x2D\xBE\x20\xE9\x29\x78\xD6\x0C\x77\x2A\x3F\x67\x14\x41\x1F\x8E\x33\x5F\x28\x61\x53\xD0\x5C\x43\x07\x67\x12\x0F\x8E\x11\xFB\x3D\x5C\x14\x8A\x28\xF6\x58\x16\x91\x6D\x11\xFD\x51\x12\x1B\x8B\x56\x3C\x47\x4F\xD7\x6E\x1A\x1D\x4D\x38\x3C\x44\x82\x21\x16\x82\xDE\x64\x13\x12\x64\x12\x2B\x8F\x11\x11\x5C\x43\x2F\x80\x60\x16\x81\x51\x34\x12\x5F\xC2\x46\x60\x05\x62\x5C\x38\x85\x57\x34\x1A\x55\x3E\x1E\x83\x32\x1A\x55\x3C\x42\x84\x21\x14\x84\x20\x64\x13\x4C\x6A\x12\x49\x80\x41\x0A\x81\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp3",
			L"Exp4",
			L"Exp5",
			L"Exp6",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID @ >",
			L"[3][Exp0]<< \"(\" !Exp6 \")\" @ >>",
			L"[4][Exp0]<< \"(\" !Exp6 @ \")\" >>",
			L"[5][Exp0]<< \"(\" @ !Exp6 \")\" >>",
			L"[6][Exp1] BEGIN ",
			L"[7][Exp1] END [ENDING]",
			L"[8][Exp1]< Exp1 \"^\" @ Exp0 >",
			L"[9][Exp1]< Exp1 \"^\" Exp0 @ >",
			L"[10][Exp1]< Exp1 @ \"^\" Exp0 >",
			L"[11][Exp1]<< !Exp0 @ >>",
			L"[12][Exp2] BEGIN ",
			L"[13][Exp2] END [ENDING]",
			L"[14][Exp2]< Exp2 \"*\" @ Exp1 >",
			L"[15][Exp2]< Exp2 \"*\" Exp1 @ >",
			L"[16][Exp2]< Exp2 @ \"*\" Exp1 >",
			L"[17][Exp2]<< !Exp1 @ >>",
			L"[18][Exp3] BEGIN ",
			L"[19][Exp3] END [ENDING]",
			L"[20][Exp3]< Exp3 \"+\" @ Exp2 >",
			L"[21][Exp3]< Exp3 \"+\" Exp2 @ >",
			L"[22][Exp3]< Exp3 @ \"+\" Exp2 >",
			L"[23][Exp3]<< !Exp2 @ >>",
			L"[24][Exp4] BEGIN ",
			L"[25][Exp4] END [ENDING]",
			L"[26][Exp4]< Exp3 \"=\" @ Exp4 >",
			L"[27][Exp4]< Exp3 \"=\" Exp4 @ >",
			L"[28][Exp4]< Exp3 @ \"=\" Exp4 >",
			L"[29][Exp4]<< !Exp3 @ >>",
			L"[30][Exp5] BEGIN ",
			L"[31][Exp5] END [ENDING]",
			L"[32][Exp5]< Exp4 \"?\" @ Exp5 >",
			L"[33][Exp5]< Exp4 \"?\" Exp5 @ >",
			L"[34][Exp5]< Exp4 @ \"?\" Exp5 >",
			L"[35][Exp5]<< !Exp4 @ >>",
			L"[36][Exp6] BEGIN ",
			L"[37][Exp6] END [ENDING]",
			L"[38][Exp6]< Exp5 \"$\" @ Exp6 >",
			L"[39][Exp6]< Exp5 \"$\" Exp6 @ >",
			L"[40][Exp6]< Exp5 @ \"$\" Exp6 >",
			L"[41][Exp6]<< !Exp5 @ >>",
			L"[42][Module] BEGIN ",
			L"[43][Module] END [ENDING]",
			L"[44][Module]<< !Exp6 @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver>(&BinaryOpTokenDeleter, &BinaryOpLexerData, &BinaryOpModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<binaryop::Expr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<binaryop::Expr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<binaryop::Expr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<binaryop::Expr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
