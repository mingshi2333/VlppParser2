/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "BinaryOpModuleParser.h"

namespace binaryop
{
	void BinaryOpModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2491; // 23117 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 187;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\x4D\x5A\x00\x00\xB3\x09\x00\x00\x0A\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x09\x0A\x98\x0A\x9E\x0A\x84\x12\x84\x15\x0A\x9C\x02\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x81\x9A\x81\x01\x99\x94\x21\xB6\x89\x9A\x96\x82\x9B\x97\x93\x37\xAC\x81\xAE\x93\xA0\x98\x8E\x9C\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x3D\xC8\x8F\xAA\xA1\xAC\xA6\x83\x8D\x3B\xC9\xA0\x9A\xA3\x9B\xAB\xAC\xAF\x5D\xD5\x8E\xA2\xB0\xAB\x82\x9E\xAE\x3F\xDF\xA4\xB4\xA6\xB2\xAA\x83\x01\x35\xE8\xB2\xA0\xB9\xB1\xB1\xB6\xAB\x77\xE3\xB9\xA5\xB2\x87\xB0\xBB\xB9\x6B\xEA\xBB\xAC\xBD\xBE\xB7\xC0\xC1\x85\xF8\x89\xDA\xBB\xC4\xBD\x80\xBF\x81\xF6\x8D\xC4\xC1\x84\x01\xB9\xBF\x98\x91\xF5\xBB\xC0\xC7\xC2\xC9\xC7\x86\x93\xC8\xC0\xDA\xC1\x81\x03\xCB\x9A\x8A\x8C\x99\xA9\xCE\xCC\xCF\xD6\xA2\x9F\xE2\x81\xD4\xD4\xC5\xDA\xC7\xB3\xA5\xC0\x07\x08\xD6\xD6\x84\x84\x06\xBC\xBE\xD0\xD7\xDC\xC9\xDC\xDB\xC7\xB8\xD0\xC3\xE9\xD4\xE1\xE4\xE3\xCB\xB1\xEF\xCD\xE4\xEC\xE6\xEA\xE9\x9D\xD8\xCE\xE9",
			"\x0D\xDA\xEE\x82\x80\xAC\xD5\xC2\x8B\x0D\xE9\x82\x87\xF0\xD7\xC5\xE3\xCF\xEB\xF1\xEA\xF4\xD9\xEE\xEC\xF0\xF4\xD2\xFB\xE9\xF5\xFA\xD9\xEF\xE1\x8D\x05\xF0\xFE\xE7\xF8\x00\xB4\x71\x82\x6E\x0E\x3D\x7F\x01\x7F\x03\x88\x79\x82\x72\x02\x8D\x8A\x6F\x82\xD0\x4E\x8A\x82\x84\x0C\x8F\x84\x85\x84\x16\xBA\x60\x04\x82\xF4\x51\x0C\x85\x86\x13\xA0\x85\x85\x88\x24\xA3\x86\x88\x86\x25\xA8\x87\x89\x7B\x17\xAC\x82\x8A\x8A\x30\xAE\x89\x8B\x7A\x10\x68\x7E\x77\x40\x13\x1F\x88\x70\x05\xFD\x55\x0A\x8F\x8A\xF3\x6F\x82\x8C\x90\xF6\x77\x86\x92\x7E\xF9\x7E\x72\x79\x40\x16\x3F\x81\x8D\x90\x33\x90\x94\x91\x92\xF1\x57\x0D\x7E\x44\x36\x88\x9F\x7D\x8B\x52\x8F\x95\x92\x96\x4B\x8A\x97\x7C\x84\x43\x9E\x94\x94\x97\x21\x59\x0E\x93\x7A\x1A\x2B\x9D\x95\x99\x70\xAF\x92\x9F\x97\x62\x87\x95\x9C\x98\x63\xA8\x97\x9A\x90\x73\xBB\x91\x95\x48\x1B\x2E\x91\x48\x07\x82\x8A\x4D\x05\x7F\x14\x59\x97\x9F\xA2\x64\xBD\x9B\x94\x9F\x74\x8D\xA4\x9F\x07\x85\x8F\xAF\x9E\x9F\x53\x96\xA8\x6C\x08\xFD\x61\x05\xA5\x98\x92\x98\xA6\x9A\xA6\xA3\xA0\xAA\x9C\xA9\x71\x91\xA4\x7E\x08",
			"\x9F\x83\x43\x09\xAB\x76\xA1\xA8\xAA\xA3\xA6\x90\xA2\xA9\xAA\xB7\xB4\xA9\x9E\xAD\xB3\xA1\x46\x46\xA2\xF1\x65\x00\xAD\x40\x26\x03\xBC\xA3\xA9\xB5\x97\xAD\xAD\xAE\xAA\xBC\xA9\xB0\x6E\x27\x06\xB2\xAF\xB3\xA5\x83\x48\x09\x7F\x29\x12\xB8\xB3\xAE\xCA\x94\xB8\xAF\xB2\xE0\x9E\xBA\xAD\xAC\xF4\x58\x40\xB0\x7D\x2B\x1A\xBE\xB0\xB7\x99\xA2\xBD\xB1\xB7\xEC\x95\xB4\xBB\xBA\xF3\xB0\xB6\x9C\x0B\xC6\xAD\x06\xB2\x0B\xEA\xB6\xB8\x9D\xBD\xED\xB1\xBF\xB6\xBB\xCC\x85\xCE\x73\x0B\xFD\x81\xC0\xC2\x71\x30\x3D\x71\x0D\xC2\xF2\xBF\xB2\xC7\xB1\xF4\x93\xC3\xB6\xC0\xE3\x96\xCB\xB6\x9D\x32\x06\xB3\x0C\xC4\x03\xD8\xCF\xBA\xC2\x1A\xD5\xC4\xC6\xBF\x27\xE4\xC9\xC9\xC4\x8B\xB4\x06\xB1\x0D\xC6\xB6\x00\xC9\xC6\x2B\xE1\xCB\xC2\xCD\x25\xE8\xC7\xC7\xCD\x34\xF1\x77\x0F\xCC\x23\xC6\x78\x0D\x7F\x39\x00\xD6\xC0\xC1\xE1\xA2\xC7\xD2\xD2\x49\xFC\xC1\x4A\x0E\xC6\xBB\x06\xD1\xD3\x39\xEA\xCB\xCD\xD5\x2C\xF1\x7C\x0F\xD4\x48\xDD\xDC\xD2\xD7\x76\xAE\x3A\x42\x65\x60\x72\x48\x57\x55\xB9\xB2\x40\x73\x40\x70\x60\x5B\x69\x64\x32\x6F\xDE\x66\x4C\x64\xF0\xD9\x49\xDD\x73",
			"\xF7\xDC\x54\xDD\x7B\xFA\xD5\xDA\xDF\x76\xE6\x48\xDD\x6C\x7C\xFF\xD2\xE1\xDF\x87\xC6\xE3\x4B\xE0\xEF\x45\xE1\xE3\xE2\x88\xE3\x47\xDB\x40\x93\xFC\xCA\xDA\x42\x6D\xD1\x6C\xE2\x7C\x8E\xF9\xD9\xE3\xE3\x1F\x55\xE1\x42\xE8\x35\xF2\x4F\x3F\xDA\x02\x59\xEE\x67\xE6\xA6\xE9\x44\xE8\xE9\x8D\x97\xE9\x42\xEA\xB1\x42\x72\x40\xEC\x29\x68\xE1\x42\xED\xEF\x72\xD4\xE1\x4A\xBC\xC0\x08\xEE\x49\xBA\xC0\x01\xF1\xDC\x91\xDF\x44\xEC\x4D\xF2\x45\xF5\x5E\xEF\x8D\xE9\x40\xF4\xE7\x29\x4B\xF4\x4E\xEC\xCC\xF1\x6C\xE9\xEB\x90\xCA\xEF\x47\xF6\xDC\xDE\x40\xF9\xF8\xFF\x23\xF1\xFB\xEB\x69\xF9\xE8\xE4\x57\xE6\xDC\xFD\xF9\xEB\xEF\xE6\xE8\xFB\xAC\xD8\xEC\xDC\x55\xF0\xC7\xEA\xF7\xBA\x49\xD3\xE4\xFE\x44\xFE\x5C\x25\x79\xFE\x7C\x79\x78\x8F\x16\x7D\x2E\xCE\x7C\x29\xFF\x7E\x7F\x1F\x05\xBE\x7F\x80\x01\x99\x7B\xEA\x05\x8D\x23\xF8\x5D\x77\x77\x9F\x7E\x71\xF7\x20\x72\x7C\x0A\xA5\x7E\x83\xF3\x62\x5D\xFD\x29\x7C\x7C\x0F\x96\x80\x70\x1A\x9F\x7A\x09\xA0\x8A\x21\xE1\x51\x4B\x84\x01\x36\x7A\x4C\x41\x78\x80\x37\x4E\x84\x7C\x34\x91\x83\xFE\x23\x27\x87\xF0\x50\x80",
			"\x2C\x09\x8E\x6E\x07\xBD\x8C\x7B\x1F\x91\x31\x88\x9A\x6B\x86\xF7\x1D\x8B\x89\x0A\x8A\x8C\x83\x4E\x8D\x8B\x07\xD2\x87\x85\x0C\x98\x82\x72\x2D\x89\x7C\xF1\x6B\x70\x2D\x2A\x9B\x81\x85\x4C\x90\x8B\x14\xE2\x8E\x8A\x15\x94\x8F\x89\x60\x91\x8A\x18\xA1\x88\x62\x18\x80\x02\x86\xC0\x7C\x8B\x11\xB6\x83\x89\x3A\x92\x8E\x88\x9E\x28\x8B\x04\xE7\x8C\x8E\x32\xA8\x8F\x8A\x66\x9E\x8D\x1F\xE9\x83\x8C\x42\xA5\x89\x8C\x84\x8C\x8E\xE5\x7A\x7F\x2D\x12\x83\x90\x90\x88\x90\x92\x1A\x86\x9F\x8F\xE8\x56\x8E\x92\x5F\x92\x91\x21\x9A\x97\x91\x49\x9A\x92\x91\x58\x6D\x75\xF1\x70\x86\x25\xE0\x71\x7A\x80\x0A\x96\x8E\x18\xC4\x8D\x74\x3C\xB1\x32\x8F\xDA\x75\x90\xF5\x17\x93\x97\x4C\x98\x91\x90\x94\x8F\x93\x2D\x91\x9B\x96\x4F\xBD\x93\x93\xBF\x9D\x90\x30\xB5\x98\x97\x4F\x99\x8C\x7E\x8C\x96\x7D\x17\xB2\x9C\x81\x61\x8D\x9A\x98\xD0\x8C\x98\x03\xD1\x9A\x96\x62\xBC\x96\x9A\xBE\x98\x9A\x33\x8C\x80\x95\xD2\x6E\x8C\x94\x23\x21\x7B\x69\x40\x84\x8E\x29\xAC\x96\x74\xE7\x92\x26\x2B\xEF\x30\x97\xF7\x14\x9A\x90\xF0\x99\x95\x3C\x9C\x92\x9A\xFF\x6F\x9A\x9E\xF8\x94",
			"\x9D\x35\xCF\x9C\x85\x84\x2E\x80\x48\xDF\x89\x96\x14\xE3\x92\x8C\x82\x84\x96\xA0\x9A\x88\xA3\x2F\x8A\xAA\x9A\x86\x8D\x9E\xA1\x0C\x85\x7B\x3F\x9E\x22\xA2\x1D\xA8\x6C\x9C\xFE\x96\xA0\xE5\x1A\xA7\x76\xAE\x10\xA6\x7F\x21\x36\x0E\x04\x82\x21\x78\xD2\x56\x7B\x73\x0C\xB3\x79\x4E\x47\x9D\x91\x84\x28\xA2\x35\x30\xA9\x23\xF4\x3C\x39\x20\x9A\x86\x21\xA5\x0A\x38\xA5\x42\x45\x73\x7A\x9E\xA3\x69\xA7\x31\xA6\x23\x4B\xB2\xAA\x20\xEE\x09\x22\xA7\x06\x26\xAB\x4D\xC1\xAA\x98\xA1\x80\xAC\xA8\xB3\x7F\xA7\x51\xCC\xA2\x20\xF0\x2D\xA6\xA9\x53\xB0\xAB\x77\x72\x83\x21\xA1\x86\x23\x7A\x26\xB2\xAB\x52\xDA\xAB\xA3\xA8\xAE\xA7\xA9\x5F\xAA\x20\x79\x19\xA6\xAC\xAC\xA3\xA9\xAD\x09\x2B\xAF\x45\xD7\xAD\xAA\xB4\x83\x23\x7A\x25\xBC\xAA\x40\x5E\xA7\xAF\xFE\x21\xAF\xAC\x59\xB0\xAE\x41\x67\x31\x38\x96\x8D\xAD\xAE\x81\xBD\xAD\x42\x04\xB3\x21\xBC\xAD\xA8\xB1\x6F\xAA\xB2\x41\x7C\x3A\x51\xBF\xAE\xAB\x20\x48\xA3\x20\x65\x85\xBC\xAC\xBA\xBB\xAE\xAE\x0B\x2A\x21\x81\x64\xAF\xB3\x91\x80\x00\x1C\xFD\x2C\xA1\xB6\x26\xB1\x1D\xFE\x1B\x77\x55\xA6\xA2\x1D\x7F\x56",
			"\x77\x50\xD3\xA3\x1E\xAF\x0A\x36\x4A\x69\xE4\x1D\x3F\xE0\x5E\x46\xB4\xE5\x1D\x3D\x48\x72\xA2\x82\x73\x02\xBD\xA8\xA6\xA0\x03\x39\x3D\xBA\x21\x03\x66\xB0\x1D\xB8\xA9\x22\x8F\x26\xB9\x1C\xD7\x8A\x21\x50\xA6\xAA\x1D\x6A\x8A\x2E\x52\xD3\xAB\x1D\x3F\xD3\x71\x5A\x69\xEC\x10\xBC\x85\x38\x5E\xB4\xED\x1D\x3D\x0F\x49\xBF\xA2\xE4\x34\x4B\xA5\x54\x74\x27\x44\xEB\x34\x4E\x00\x9D\xB5\xAC\x61\x44\x77\x00\xEE\xB9\x49\xCD\x7B\xBA\x65\xD6\x7F\xBE\x71\x74\x4C\xA0\x01\xF8\x60\x00\x9B\x60\x9C\x6E\x41\x67\xC1\xF8\x0C\xA5\xBD\x0B\xC9\x4B\x4C\xC9\x41\x24\x9B\x98\xB6\xB0\x76\x54\x4F\x66\x83\x26\xC2\x81\x3C\x47\xBE\x02\x3D\xC1\x40\x22\xC0\x01\xE9\x50\xC3\xC0\x49\x4D\x48\x88\x93\x63\xB4\xCE\x82\xB0\xBF\xF7\x34\x4C\x96\x73\xA3\x21\x36\x6B\xC0\x00\xCE\xAE\xC7\x40\x45\x77\xC4\xFA\x89\x4C\x50\x3B\x98\x37\x86\x0A\x55\xA2\xE7\x34\x4D\xB6\x3A\xC2\x21\xA2\x34\xC2\x21\xDF\x89\xC9\x20\x4A\xBC\xC0\x85\xC9\x4C\x53\xC7\x8E\x68\xB9\x09\x36\xA9\x8C\xC9\x40\xB7\xCB\x82\x22\xBC\x4F\xCB\x52\x96\x87\x23\xCB\xF8\x97\x68\x00\xC4\xA1\xC5\x99\xE1\x47\x5B\x20",
			"\xEC\x61\xCD\x01\x23\xCF\xC4\x74\x4B\xB4\x26\xC1\x21\x5D\x6E\xCB\x3C\x63\x82\x2D\xC6\xD9\x34\x4F\xBC\x9E\xB3\x61\x8D\x76\xC0\x01\x3D\xE3\x73\xCD\xF7\x28\x62\x95\x81\x2D\x63\x1B\xDF\xC4\xD0\x2D\xD7\xC2\x91\xC9\x4E\x65\x1B\xF1\x3A\xC5\x90\xD8\xC3\x9C\xC9\x42\x67\x1B\xC3\x6F\xC6\x33\xD0\xC6\x40\x39\xCA\xB2\x44\xF6\x48\x6A\x8B\xC5\x75\x48\x24\xD2\x21\x21\xE1\x4C\x4E\xEB\xA0\xB2\x41\x41\x06\x58\x57\xC3\x21\xD2\x19\xCB\x6B\x95\x89\x2E\xC9\x52\xD3\xD6\x39\x42\x1C\x6B\x40\x3D\xDD\xD4\x53\xD3\x63\x08\x9A\xC0\x01\x11\x46\x53\xD0\x49\xEF\xD1\x49\x46\x02\xAF\x7D\x36\xC1\xD0\x00\x0D\xDD\xA3\xBF\xC1\x4E\x12\x52\xD2\x20\x27\x09\xD8\xC9\x87\xBE\xC0\x68\x9B\xDE\x38\x28\x3A\xAB\x62\x55\xD5\xDB\xA3\xA2\xD4\xDD\x30\x53\x0F\xDC\x00\x16\x09\xB2\xDD\xC1\xDD\x80\x13\xBE\x20\x39\x59\xDB\x7D\x58\x00\xDF\x33\xF7\xDB\x20\x98\xDB\xCA\x73\x5B\x0C\xDB\x80\x1F\x0E\x58\x01\xE2\xDE\xBE\xBB\xD0\x6D\x80\x3A\xB0\xDF\xC6\xCB\x50\x18\x42\xD2\x21\x87\xC0\xE1\xE2\xF1\x21\x0D\xB2\xE3\x06\x59\x50\xFC\xC8\xE3\xF4\x24\x0F\xB8\x8B\x55\x58\x59\xC3\x26\xE3",
			"\x87\xCB\xE3\xC4\x69\x03\xE4\x37\x09\xDE\x5C\x5E\xC1\x20\xB5\xCE\xD2\xE1\x30\x70\x0B\xE4\xF1\x3C\x5D\x62\x82\x23\xE6\x6C\xCF\xDE\x39\x75\x03\xE6\x1E\x49\xDF\x63\x9D\xC1\x20\xBB\x06\x2A\x4E\xCA\x8B\x5C\x0F\x7E\xDB\x61\x20\x40\xC6\x21\xCF\xED\xDF\x6B\xAA\xC2\x20\xDC\x02\x2A\xEB\xCF\xE1\x4F\x0E\x8A\xC1\x20\xEB\x50\xE0\xE6\x6E\x00\x19\xD8\x41\x06\x5B\xC9\x34\xF9\xD6\x73\x03\x14\xAB\x89\x5F\xD1\xB2\x4A\xC9\xD9\x7C\x74\x49\x11\xB6\xC0\x07\x11\xC9\xD1\xD4\xDC\x81\x29\xDD\xB4\xD4\xEE\x4E\x91\x16\xED\x7C\x41\xD4\xB4\xBE\xF2\xEC\x3E\x74\x57\x12\xDD\x9D\x19\xD8\x24\x36\xED\xBB\x06\x34\x53\xD2\xF1\x3F\x12\xA7\xE6\x64\x55\x09\x3D\xEE\xDA\x8D\xEA\xD4\x85\x34\xDA\x20\x92\xFB\xEB\x7D\x22\x1E\xEA\x00\x1F\xF1\x20\x98\xE2\xF6\x9D\x23\x19\xD9\x52\x06\x5F\x57\x7B\xEB\x50\x9D\x26\x1A\x20\x12\xF1\x3E\xDB\x85\xE0\x00\xEC\xEC\xD2\xF7\x24\x6D\x15\xF6\x0A\x34\x15\xB2\xD4\x06\xEF\x92\xF1\xF3\xEE\x49\x56\x14\xF0\xCE\x3A\x0B\xE5\xC6\x26\xF8\xBC\xE8\xFA\x73\x3D\x1E\xF9\x81\x04\x19\xD9\x1A\xF5\xA6\x42\x60\xC3\x20\x61\x53\xF4\x3E\xC6\x16\xF0",
			"\xCA\x6D\xCF\xF8\xB1\xFA\x67\xE9\x00\x15\xCD\xF7\xE6\xF8\x37\x64\x25\xF2\xFD\x02\x24\xFD\xCD\xF7\x3A\x19\x64\xCC\x1E\x58\x30\xFE\xED\xEF\xCE\x3D\x19\xDF\x09\x48\x0D\xD5\x72\x10\xF9\x7E\x73\xF3\x76\x27\xD5\x0E\x7F\x09\x1D\x0D\xC9\x6F\x06\x01\x81\x10\x80\x63\x10\x78\x6A\x7A\x13\x3F\x0D\xA5\x7A\x2F\xA6\x53\x77\xA6\x39\x5C\xCC\x39\x43\xC7\x52\x5C\x06\x6A\x12\x1F\x8F\x0F\xF6\x5A\x28\x34\x43\x82\x61\x62\x5F\x68\x13\x5F\x1D\x1A\x5F\x21\x1C\x82\xC9\x64\x43\xA4\x34\x13\x0A\x67\x12\x33\x86\x40\xC2\x51\x60\x21\x18\x83\xF0\x64\x13\xF1\x38\x60\x7B\x3E\x5F\x21\x10\x84\x05\x76\x3C\x41\x8A\x81\x7D\x60\x00\x7D\x6F\x0F\x05\x61\x12\x4B\x83\x72\x34\x4C\x50\x34\x17\x4E\x25\x6B\x37\x78\x51\x12\x55\x86\x77\x34\x4A\x52\x15\x68\x16\xB6\x72\x13\x24\x6A\x81\x00\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp3",
			L"Exp4",
			L"Exp5",
			L"Exp6",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID @ >",
			L"[3][Exp0]<< \"(\" !Exp6 \")\" @ >>",
			L"[4][Exp0]<< \"(\" !Exp6 @ \")\" >>",
			L"[5][Exp0]<< \"(\" @ !Exp6 \")\" >>",
			L"[6][Exp1] BEGIN ",
			L"[7][Exp1] END [ENDING]",
			L"[8][Exp1]< Exp1 \"^\" @ Exp0 >",
			L"[9][Exp1]< Exp1 \"^\" Exp0 @ >",
			L"[10][Exp1]< Exp1 @ \"^\" Exp0 >",
			L"[11][Exp1]<< !Exp0 @ >>",
			L"[12][Exp2] BEGIN ",
			L"[13][Exp2] END [ENDING]",
			L"[14][Exp2]< Exp2 \"*\" @ Exp1 >",
			L"[15][Exp2]< Exp2 \"*\" Exp1 @ >",
			L"[16][Exp2]< Exp2 @ \"*\" Exp1 >",
			L"[17][Exp2]<< !Exp1 @ >>",
			L"[18][Exp3] BEGIN ",
			L"[19][Exp3] END [ENDING]",
			L"[20][Exp3]< Exp3 \"+\" @ Exp2 >",
			L"[21][Exp3]< Exp3 \"+\" Exp2 @ >",
			L"[22][Exp3]< Exp3 @ \"+\" Exp2 >",
			L"[23][Exp3]<< !Exp2 @ >>",
			L"[24][Exp4] BEGIN ",
			L"[25][Exp4] END [ENDING]",
			L"[26][Exp4]< Exp3 \"=\" @ Exp4 >",
			L"[27][Exp4]< Exp3 \"=\" Exp4 @ >",
			L"[28][Exp4]< Exp3 @ \"=\" Exp4 >",
			L"[29][Exp4]<< !Exp3 @ >>",
			L"[30][Exp5] BEGIN ",
			L"[31][Exp5] END [ENDING]",
			L"[32][Exp5]< Exp4 \"?\" @ Exp5 >",
			L"[33][Exp5]< Exp4 \"?\" Exp5 @ >",
			L"[34][Exp5]< Exp4 @ \"?\" Exp5 >",
			L"[35][Exp5]<< !Exp4 @ >>",
			L"[36][Exp6] BEGIN ",
			L"[37][Exp6] END [ENDING]",
			L"[38][Exp6]< Exp5 \"$\" @ Exp6 >",
			L"[39][Exp6]< Exp5 \"$\" Exp6 @ >",
			L"[40][Exp6]< Exp5 @ \"$\" Exp6 >",
			L"[41][Exp6]<< !Exp5 @ >>",
			L"[42][Module] BEGIN ",
			L"[43][Module] END [ENDING]",
			L"[44][Module]<< !Exp6 @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver>(&BinaryOpTokenDeleter, &BinaryOpLexerData, &BinaryOpModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<binaryop::BinaryExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<binaryop::BinaryExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
