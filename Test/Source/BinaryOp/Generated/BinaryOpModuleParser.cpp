/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "BinaryOpModuleParser.h"

namespace binaryop
{
	void BinaryOpModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2444; // 21669 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 140;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\xA5\x54\x00\x00\x84\x09\x00\x00\x0A\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x09\x0A\x98\x0A\x9E\x0A\x84\x12\x84\x15\x0A\x9C\x02\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x81\x9A\x81\x01\x99\x94\x21\xB6\x89\x9A\x96\x82\x9B\x97\x93\x37\xAC\x81\xAE\x93\xA0\x98\x8E\x9C\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x3D\xC8\x8F\xAA\xA1\xAC\xA6\x83\x8D\x3B\xC9\xA0\x9A\xA3\x9B\xAB\xAC\xAF\x5D\xD5\x8E\xA2\xB0\xAB\x82\x9E\xAE\x3F\xDF\xA4\xB4\xA6\xB2\xAA\x83\x01\x35\xE8\xB2\xA0\xB9\xB1\xB1\xB6\xAB\x77\xE3\xB9\xA5\xB2\x87\xB0\xBB\xB9\x6B\xEA\xBB\xAC\xBD\xBE\xB7\xC0\xC1\x85\xF8\x89\xDA\xBB\xC4\xBD\x80\xBF\x81\xF6\x8D\xC4\xC1\x84\x01\xB9\xBF\x98\x91\xF5\xBB\xC0\xC7\xC2\xC9\xC7\x86\x93\xC8\xC0\xDA\xC1\x81\x03\xCB\x9A\x8A\x8C\x99\xA9\xCE\xCC\xCF\xD6\xA2\x9F\xE2\x81\xD4\xD4\xC5\xDA\xC7\xB3\xA5\xC0\x07\x08\xD6\xD6\x84\x84\x06\xBC\xBE\xD0\xD7\xDC\xC9\xDC\xDB\xC7\xB8\xD0\xC3\xE9\xD4\xE1\xE4\xE3\xCB\xB1\xEF\xCD\xE4\xEC\xE6\xEA\xE9\x9D\xD8\xCE\xE9",
			"\x0D\xDA\xEE\x82\x80\xAC\xD5\xC2\x8B\x0D\xE9\x82\x87\xF0\xD7\xC5\xE3\xCF\xEB\xF1\xEA\xF4\xD9\xEE\xEC\xF0\xF4\xD2\xFB\xE9\xF5\xFA\xD9\xEF\xE1\x8D\x05\xF0\xFE\xE7\xF8\x00\xB4\x71\x82\x6E\x0E\x3D\x7F\x01\x7F\x03\x88\x79\x82\x72\x02\x8D\x8A\x6F\x82\xD0\x4E\x8A\x82\x84\x0C\x8F\x84\x85\x84\x16\xBA\x60\x04\x82\xF4\x51\x0C\x85\x86\x13\xA0\x85\x85\x88\x24\xA3\x86\x88\x86\x25\xA8\x87\x89\x7B\x17\xAC\x82\x8A\x8A\x30\xAE\x89\x8B\x7A\x10\x68\x7E\x77\x40\x13\x1F\x88\x70\x05\xFD\x55\x0A\x8F\x8A\xF3\x6F\x82\x8C\x90\xF6\x77\x86\x92\x7E\xF9\x7E\x72\x79\x40\x16\x3F\x81\x8D\x90\x33\x90\x94\x91\x92\xF1\x57\x0D\x7E\x44\x36\x88\x9F\x7D\x8B\x52\x8F\x95\x92\x96\x4B\x8A\x97\x7C\x84\x43\x9E\x94\x94\x97\x21\x59\x0E\x93\x7A\x1A\x2B\x9D\x95\x99\x70\xAF\x92\x9F\x97\x62\x87\x95\x9C\x98\x63\xA8\x97\x9A\x90\x73\xBB\x91\x95\x48\x1B\x2E\x91\x48\x07\x82\x8A\x4D\x05\x7F\x14\x59\x97\x9F\xA2\x64\xBD\x9B\x94\x9F\x74\x8D\xA4\x9F\x07\x85\x8F\xAF\x9E\x9F\x53\x96\xA8\x6C\x08\xFD\x61\x05\xA5\x98\x92\x98\xA6\x9A\xA6\xA3\xA0\xAA\x9C\xA9\x71\x91\xA4\x7E\x08",
			"\x9F\x83\x43\x09\xAB\x76\xA1\xA8\xAA\xA3\xA6\x90\xA2\xA9\xAA\xB7\xB4\xA9\x9E\xAD\xB3\xA1\x46\x46\xA2\xF1\x65\x00\xAD\x40\x26\x03\xBC\xA3\xA9\xB5\x97\xAD\xAD\xAE\xAA\xBC\xA9\xB0\x6E\x27\x06\xB2\xAF\xB3\xA5\x83\x48\x09\x7F\x29\x12\xB8\xB3\xAE\xCA\x94\xB8\xAF\xB2\xE0\x9E\xBA\xAD\xAC\xF4\x58\x40\xB0\x7D\x2B\x1A\xBE\xB0\xB7\x99\xA2\xBD\xB1\xB7\xEC\x95\xB4\xBB\xBA\xF3\xB0\xB6\x9C\x0B\xC6\xAD\x06\xB2\x0B\xEA\xB6\xB8\x9D\xBD\xED\xB1\xBF\xB6\xBB\xCC\x85\xCE\x73\x0B\xFD\x81\xC0\xC2\x71\x30\x3D\x71\x0D\xC2\xF2\xBF\xB2\xC7\xB1\xF4\x93\xC3\xB6\xC0\xE3\x96\xCB\xB6\x9D\x32\x06\xB3\x0C\xC4\x03\xD8\xCF\xBA\xC2\x1A\xD5\xC4\xC6\xBF\x27\xE4\xC9\xC9\xC4\x8B\xB4\x06\xB1\x0D\xC6\xB6\x00\xC9\xC6\x2B\xE1\xCB\xC2\xCD\x25\xE8\xC7\xC7\xCD\x34\xF1\x77\x0F\xCC\x23\xC6\x78\x0D\x7F\x39\x00\xD6\xC0\xC1\xE1\xA2\xC7\xD2\xD2\x49\xFC\xC1\x4A\x0E\xC6\xBB\x06\xD1\xD3\x39\xEA\xCB\xCD\xD5\x2C\xF1\x7C\x0F\xD4\x48\xDD\xDC\xD2\xD7\x76\x96\x3A\x42\x65\x60\x72\x48\x57\x55\xB9\xB2\x40\x7B\x5B\x5C\x6B\x61\x66\x4C\x6E\xDE\x62\x4C\xD9\x6F\xE9\x44\xDE\xDC\x76",
			"\xDC\x53\xDE\xDE\x79\xE5\xDD\xDD\xDD\x26\x77\xD1\x6E\xD9\x0A\x67\xD8\xC6\xDA\x0A\x70\x50\x5A\xE0\xEF\x7B\xDE\xDD\xE0\x7C\xE6\x46\xE2\x40\x93\xD8\xD2\x4D\x47\x6B\xC3\x4A\xE1\x64\x8C\xF2\x74\xE1\x42\x95\xF5\xC7\xE5\xE6\x02\x5B\xEE\x66\x70\x94\xDC\x54\xE9\x40\xA8\xEF\x71\xDF\xE0\x29\x6D\xE0\x01\xE8\x88\xE7\xB6\x4B\xEB\x8D\xE9\x46\xE8\x4D\xEF\x6B\xE4\x4C\xDC\x91\xE3\x48\xEE\xE7\xBA\xFC\xE1\x66\xEF\x75\x5D\xE7\xE7\xDF\x78\xD0\xEF\xE3\x48\xCA\xCB\xF0\xF5\xF0\x1F\x61\xE4\xEC\x97\xB5\xEC\xDB\xE0\xF5\x1E\x51\xF2\xF5\xF7\xDC\xDD\x46\xF5\xDA\x29\x7E\xEB\xEF\x7B\xB2\xF2\xE9\xF7\x40\xEA\xE9\x43\xF3\xF7\x1F\x69\xFA\xEA\x9B\xEF\xF0\xFD\x47\xF9\xBF\xE5\xF6\xF2\x67\xF5\xF6\xFD\xFC\xFC\xF8\x75\x2C\xF2\x5C\x2E\x7A\xF8\x45\x87\x7B\x07\x92\x79\x02\xCB\x7B\x81\xCB\x4D\x86\x71\x80\x63\x27\xF8\x33\x5B\x7D\xD2\x44\x81\x7C\xFF\x0F\x80\xF3\x30\x7E\x79\x08\x9F\x22\x83\x92\x65\x70\xF9\x26\x26\x7C\xAE\x32\x72\x80\xF4\x78\x83\x09\xF3\x76\x76\xE1\x58\x81\x80\x2C\x9B\x7E\x7C\x7F\x7F\x7A\x1A\x92\x78\x86\x60\x23\x83\xF6\x4F\x7F\x82\x0C\xA0\x83",
			"\x7A\x3C\x80\x7D\x10\x9D\x2F\x87\x1E\x83\x8F\x1F\x13\x82\x5D\x05\x81\x28\x7E\x08\x8D\x78\x88\x1E\x82\x89\x14\xC4\x8E\x87\x2A\x87\x8D\x88\x1E\x29\x8B\xE1\x7A\x79\x21\x26\xB1\x71\x71\x31\x8C\x7D\xDB\x18\x80\x39\x27\x86\x8B\x8A\xFF\x1C\x3B\x11\xA7\x37\x88\x1B\x8B\x7D\x8C\x1C\x92\x82\x0C\xEF\x3A\x8C\x34\xBA\x84\x73\x56\x88\x8C\x16\xD4\x87\x8B\x3C\xA6\x8A\x8A\x7F\x82\x7E\x08\x94\x8C\x8A\xED\x78\x8D\x8F\x88\x9A\x8E\x1F\xF1\x87\x8D\x40\x99\x80\x83\x5A\x9C\x67\x12\x80\x0E\x8A\x93\x32\x75\x81\xBE\x6D\x7F\xED\x64\x8B\x91\xDC\x66\x25\x8E\x8E\x8C\x8C\x1A\xEE\x87\x72\x38\x9E\x92\x8E\x73\x92\x24\x28\x8C\x9E\x23\x3B\x9E\x33\x8F\x8F\x89\x92\x23\xB0\x94\x97\x4E\x84\x79\x84\xA0\x63\x87\x48\x25\x8B\x86\x45\xB2\x94\x95\x7C\x9E\x96\x30\xB3\x90\x93\x41\x8A\x8D\x90\x9A\x66\x86\x42\x22\x9E\x33\x4C\xA3\x8F\x88\xA6\x97\x94\x14\x8E\x9B\x95\x53\x9F\x24\x99\xC0\x9F\x1C\x29\xB2\x21\x9A\xFB\x42\x91\x95\x29\x35\x9A\x34\x9F\x2E\x95\xD8\x35\x97\x97\xD6\x80\x91\x36\xE7\x93\x99\x75\xB6\x96\x9B\x48\x86\x9B\x16\xA4\x80\x8C\xB0\x18\x99\x9D\x1D\x3B",
			"\x99\x4A\x77\x93\x9C\x8F\x3C\x98\x9E\xFF\x9E\x99\x40\xF6\x7E\x77\xEB\x74\x99\x97\x39\x92\x9D\x6C\x05\xA1\x8D\xD4\x49\xA0\xA1\x91\x36\x0F\x1C\x80\x02\x77\xD0\x78\x7D\x73\xFC\x83\x79\x4E\x0A\xAC\x89\xB1\x4B\x9A\x35\x20\xA9\x23\xF0\x3C\x39\x20\x92\x86\x21\xA3\x1F\xA2\xA7\x6F\x21\xA6\x21\x68\x83\x78\xA3\x2C\xA3\x20\x4C\xAA\xA9\x20\x71\xA8\xA5\xA6\x29\xA6\x23\xF0\x17\xA9\xA7\x81\x3B\xA6\xA3\x09\x37\xA7\x77\x75\x96\x21\x99\xBA\xA2\x21\xBC\x85\xA9\x4F\x8B\x2C\xA2\x4A\x80\xAF\xA4\x31\xAE\xA2\x21\xB2\xAB\xA9\x80\x03\x7C\x3C\x10\xA9\x99\x42\x46\xAE\xA6\x85\x18\xA8\x6D\x5D\x8F\xAB\x40\x42\xA2\x8D\xAC\x96\x83\xAB\x55\xA0\x03\xF0\x15\xA4\xA8\xAA\x81\xA9\xAA\xE6\x3D\x3E\x45\xE2\xA2\x20\xB2\x82\x27\x3C\xC1\x2D\xA8\x4F\xEF\xA4\xA6\x83\x3C\x3A\x51\x73\xA8\xAC\x5F\xC7\xA9\x21\xBF\xB9\xAE\xAC\x1D\xA2\xB0\x54\xFD\xA3\x21\x02\x4C\xB2\x20\x9D\x61\x24\xFE\x4C\x1D\x3E\x7E\x99\x5B\x8E\x95\x88\x39\xE7\x2F\x58\xB3\x24\x78\x7F\x50\x9D\xAE\x39\xE8\x56\x41\xB4\x83\x0D\x1D\x3F\xB2\x7E\x41\x69\x83\x2E\x19\xFE\x21\x27\xAB\xFB\x78\x7F\x33\x2E",
			"\xBA\x20\x71\x93\xA0\x00\xD0\x08\xB6\x42\x07\x47\xB7\x84\x11\x1A\xAE\x0A\x3E\x45\x6F\x86\x22\x1B\xFE\x1D\x71\x50\xC3\xA3\x23\x34\x15\xBA\x20\x4F\x49\xBA\x20\xD4\x1D\x3F\xF0\x51\x5F\xB9\x80\x15\x1A\xBA\x0A\x38\x5F\x6A\xF6\x4D\x07\x89\x83\xA0\x39\xB7\xBA\x90\xCA\x21\x26\xA0\xF0\xBA\xB0\xB1\xB3\x69\x49\xE8\x62\xB8\x37\x90\x1D\x74\xBD\x2C\x78\x7C\x7C\xEB\x31\x24\x7E\xB3\xBC\x66\x9D\x79\xB1\x7B\xCB\x66\x4E\x7E\x9F\xBB\xBF\x8F\xB5\x31\x92\x21\x26\xA5\xB1\x8D\xA9\x3E\x21\x3E\x75\xE7\x0E\xB0\xAC\x83\x05\xC2\x20\x0F\xD6\xA9\x5A\x88\xCA\x21\x0D\x68\xB9\x3E\x0C\xC5\xAC\x61\x8D\xC7\x3F\x90\x35\x44\xC3\x02\x3C\x44\x7A\xBC\xB7\xB1\x96\x93\xC4\x3E\x21\x2D\x49\x0B\xB8\x36\xC3\x12\xC3\x21\x9A\xE5\xA0\xC2\x41\x24\xBE\xC4\x81\x18\x48\xC4\x01\x2A\xB5\x8D\x81\x22\x9D\x08\xCB\x51\x24\x6D\x41\xAC\xD5\x00\x02\x9C\xDF\x54\xC1\x21\xA0\xAA\xA9\x42\x4E\xBB\xC7\x45\x7E\x75\x9B\x28\xDC\xBF\xC4\x30\xB0\xC3\x01\xCA\x24\x55\x2B\xCC\x64\x95\x81\x26\xC9\x28\xC9\x24\xB3\x38\xC0\x02\xB0\x59\xCB\x3C\xBC\x86\xC6\x39\x21\x25\x5A\x90\xE1\x4F\xC3\x81",
			"\x21\x76\xCC\x52\xBD\xC2\x42\x17\xB3\xAA\x81\x1A\xB9\xCC\x22\xC1\xCD\x86\xF5\xA6\xCB\x84\x3C\x5F\xC2\xF4\x2A\xC6\x9E\x87\xCE\xCA\x83\x0D\x60\xBD\x1D\x68\xBF\x8D\xEE\xCB\xB6\x85\x06\xB2\xCE\x09\x2E\x67\x9A\xDF\x63\x20\x12\xC3\x25\xC5\x90\xC6\x23\xCF\x0A\xB3\x20\xA9\x64\xCA\x36\x98\xC2\x23\x9E\x93\x61\x68\x9C\x40\x02\xC7\x03\x2F\xD2\x9D\x21\x2B\x6B\x4F\xF4\x48\xD5\x02\x21\xD4\xA9\x8A\x2D\xBA\xF4\xBF\x06\x58\x6D\xDC\xCC\x9A\x8A\x20\x08\xBA\x93\x61\xC8\x75\xC1\x21\xAE\x81\x21\xC6\xE3\x21\x24\x08\xBE\xC0\x00\x12\x4D\xA9\xC8\xAD\x86\x21\xCF\x67\xC1\x4D\x48\x4A\x0D\xAC\x3B\x5C\x53\xD2\x21\xC4\xD2\x6E\x21\x2D\x09\x6A\xC1\x20\x0A\x4D\xA0\xCE\xB3\x83\x22\xB8\x83\x39\x43\xD7\x09\x32\x0A\xB7\xA2\x71\x25\x72\xC3\x22\xD0\x99\xC3\x21\x15\x49\xD9\x0A\x63\x70\xD9\xDB\xE8\xC0\x6F\xC4\x34\xC8\x47\x3E\xC6\x22\x0B\x5C\x63\x20\xBF\x82\x27\xDF\x59\xC9\x23\x0B\x4D\xBD\x0A\xB1\x0B\xDA\xD6\x69\xCA\x26\x0B\xC9\xD1\x3E\x9A\xCA\xC6\x20\x86\xC4\xDE\xDF\x03\x22\x0D\xB2\xE6\x0D\xA8\x73\x54\xE3\x20\xC0\xD1\xD9\xBC\x82\x28\x0D\x88\xF4\x3F\xCF",
			"\x8B\xA6\x21\xC8\xF1\xCB\xD4\x85\x2C\x09\xD9\x70\x0D\xAB\xC7\x03\xB3\x20\xE4\x86\x22\x4D\xF9\xC3\x22\x1C\x6B\xD7\x6A\x00\x04\x51\x21\x2B\xE6\xE2\xBE\x8B\x5D\xD8\x81\x38\xE6\xE1\x09\x35\x0F\x89\xA6\x65\xE9\x80\x3F\xE0\xE9\x61\x5A\x0E\xC9\xBA\x39\x51\x94\xE3\xE1\x20\x7E\x13\xE8\x72\x43\x64\xE6\x81\x15\xEC\xD1\x39\xE2\x22\x20\x49\xD6\x11\xA6\xB5\xD6\xEA\x02\x37\xD8\xDA\xC2\xE3\x20\x44\x1A\xE8\x37\x42\x10\xAC\x00\x6A\xE0\xEC\xA8\xC3\x24\x11\xC9\xD0\x11\x53\xCB\xD1\xC0\x00\x0C\xCB\x20\x94\x41\xED\x40\x12\x1C\xE7\x8D\x41\x20\xCB\x06\x34\xED\xCB\xC3\xC1\x3E\x71\xC2\x21\xF0\x76\xE2\x21\x25\x4B\xE8\x64\xC7\xC7\xF0\xE3\x76\x5A\x13\xDB\xC6\x3F\x57\xB5\xFF\xC2\x21\x9E\x1B\xF3\x7A\x4E\x02\xEF\xCE\xF5\xEF\xEA\x00\x02\x15\xB2\xA6\x1D\xA8\x2A\x32\xEB\xE2\x22\xEB\xF2\x41\x28\x12\xF4\xD9\x00\xE5\xA4\x0A\x30\xF4\xCB\xEC\xE2\x20\x56\x09\xD8\x16\x4D\xA1\x0E\x42\x3E\xC4\xBA\x83\x23\xC9\xF2\x01\x32\x15\xE1\xA6\x67\x5B\x84\x3A\xF4\xF7\x96\x74\x64\x9D\x83\x27\xF8\xD4\xF5\x14\xF2\x2A\x73\xFA\x40\x4D\xF8\xF9\x45\x7A\x15\xF6\x21\x3E\xE1",
			"\xEC\xD0\xF0\x00\x5F\x18\xFE\x38\x25\xF8\xF5\x42\x62\xFB\xF7\xCF\xC9\x23\x18\x69\xA8\x19\x53\xEF\x03\xF9\xEC\x8A\x21\x5D\x82\xE0\x02\x32\x5A\xD8\x64\x7D\x60\x9B\xDB\x97\x35\x5D\x1A\x62\x43\x2B\x4E\x5A\xF7\x54\x51\x7A\x32\x3F\xE7\x5A\x28\x27\x45\x80\x80\x6C\x12\xC5\x69\x45\xAE\x5B\x5E\xE4\x53\x81\xB7\x5A\x5F\x27\x18\x81\x1E\x12\x5F\x92\x5E\x5A\x1C\x8B\x6E\x34\x1D\x40\x00\x0F\x40\xEF\x5E\x5E\xAE\x55\x82\xC9\x64\x13\xFF\x57\x12\x2B\x8E\x4F\xAE\x56\x5F\xF5\x5F\x82\xB7\x54\x4A\x6A\x5A\x37\x6B\x51\x12\x37\x82\x77\x27\x4A\x51\x04\x68\x16\x3E\x67\x39\x3E\x6D\x5B",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp3",
			L"Exp4",
			L"Exp5",
			L"Exp6",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID @ >",
			L"[3][Exp0]<< \"(\" !Exp6 \")\" @ >>",
			L"[4][Exp0]<< \"(\" !Exp6 @ \")\" >>",
			L"[5][Exp0]<< \"(\" @ !Exp6 \")\" >>",
			L"[6][Exp1] BEGIN ",
			L"[7][Exp1] END [ENDING]",
			L"[8][Exp1]< Exp1 \"^\" @ Exp0 >",
			L"[9][Exp1]< Exp1 \"^\" Exp0 @ >",
			L"[10][Exp1]< Exp1 @ \"^\" Exp0 >",
			L"[11][Exp1]<< !Exp0 @ >>",
			L"[12][Exp2] BEGIN ",
			L"[13][Exp2] END [ENDING]",
			L"[14][Exp2]< Exp2 \"*\" @ Exp1 >",
			L"[15][Exp2]< Exp2 \"*\" Exp1 @ >",
			L"[16][Exp2]< Exp2 @ \"*\" Exp1 >",
			L"[17][Exp2]<< !Exp1 @ >>",
			L"[18][Exp3] BEGIN ",
			L"[19][Exp3] END [ENDING]",
			L"[20][Exp3]< Exp3 \"+\" @ Exp2 >",
			L"[21][Exp3]< Exp3 \"+\" Exp2 @ >",
			L"[22][Exp3]< Exp3 @ \"+\" Exp2 >",
			L"[23][Exp3]<< !Exp2 @ >>",
			L"[24][Exp4] BEGIN ",
			L"[25][Exp4] END [ENDING]",
			L"[26][Exp4]< Exp3 \"=\" @ Exp4 >",
			L"[27][Exp4]< Exp3 \"=\" Exp4 @ >",
			L"[28][Exp4]< Exp3 @ \"=\" Exp4 >",
			L"[29][Exp4]<< !Exp3 @ >>",
			L"[30][Exp5] BEGIN ",
			L"[31][Exp5] END [ENDING]",
			L"[32][Exp5]< Exp4 \"?\" @ Exp5 >",
			L"[33][Exp5]< Exp4 \"?\" Exp5 @ >",
			L"[34][Exp5]< Exp4 @ \"?\" Exp5 >",
			L"[35][Exp5]<< !Exp4 @ >>",
			L"[36][Exp6] BEGIN ",
			L"[37][Exp6] END [ENDING]",
			L"[38][Exp6]< Exp5 \"$\" @ Exp6 >",
			L"[39][Exp6]< Exp5 \"$\" Exp6 @ >",
			L"[40][Exp6]< Exp5 @ \"$\" Exp6 >",
			L"[41][Exp6]<< !Exp5 @ >>",
			L"[42][Module] BEGIN ",
			L"[43][Module] END [ENDING]",
			L"[44][Module]<< !Exp6 @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver>(&BinaryOpTokenDeleter, &BinaryOpLexerData, &BinaryOpModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<binaryop::Expr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<binaryop::Expr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<binaryop::Expr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<binaryop::Expr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
