/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "BinaryOpModuleParser.h"

namespace binaryop
{
	void BinaryOpModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2101; // 18293 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 53;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x75\x47\x00\x00\x2D\x08\x00\x00\x0A\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x09\x0A\x98\x0A\x9E\x0A\x84\x12\x84\x15\x0A\x9C\x02\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x81\x9A\x81\x01\x99\x94\x21\xB6\x89\x9A\x96\x82\x9B\x97\x93\x37\xAC\x81\xAE\x93\xA0\x98\x8E\x9C\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x3D\xC8\x8F\xAA\xA1\xAC\xA6\x83\x8D\x3B\xC9\xA0\x9A\xA3\x9B\xAB\xAC\xAF\x5D\xD5\x8E\xA2\xB0\xAB\x82\x9E\xAE\x3F\xDF\xA4\xB4\xA6\xB2\xAA\x83\x01\x35\xE8\xB2\xA0\xB9\xB1\xB1\xB6\xAB\x77\xE3\xB9\xA5\xB2\x87\xB0\xBB\xB9\x6B\xEA\xBB\xAC\xBD\xBE\xB7\xC0\xC1\x85\xF8\x89\xDA\xBB\xC4\xBD\x80\xBF\x81\xF6\x8D\xC4\xC1\x84\x01\xB9\xBF\x98\x91\xF5\xBB\xC0\xC7\xC2\xC9\xC7\x86\x93\xC8\xC0\xDA\xC1\x81\x03\xCB\x9A\x8A\x8C\x99\xA9\xCE\xCC\xCF\xD6\xA2\x9F\xE2\x81\xD4\xD4\xC5\xDA\xC7\xB3\xA5\xC0\x07\x08\xD6\xD6\x84\x84\x06\xBC\xBE\xD0\xD7\xDC\xC9\xDC\xDB\xC7\xB8\xD0\xC3\xE9\xD4\xE1\xE4\xE3\xCB\xB1\xEF\xCD\xE4\xEC\xE6\xEA\xE9\x9D\xD8\xCE\xE9",
			"\x0D\xDA\xEE\x82\x80\xAC\xD5\xC2\x8B\x0D\xE9\x82\x87\xF0\xD7\xC5\xE3\xCF\xEB\xF1\xEA\xF4\xD9\xEE\xEC\xF0\xF4\xD2\xFB\xE9\xF5\xFA\xD9\xEF\xE1\x8D\x05\xF0\xFE\xE7\xF8\x00\xB4\x71\x82\x6E\x0E\x3D\x7F\x01\x7F\x03\x88\x79\x82\x72\x02\x8D\x8A\x6F\x82\xD0\x4E\x8A\x82\x84\x0C\x8F\x84\x85\x84\x16\xBA\x60\x04\x82\xF4\x51\x0C\x85\x86\x13\xA0\x85\x85\x88\x24\xA3\x86\x88\x86\x25\xA8\x87\x89\x7B\x17\xAC\x82\x8A\x8A\x30\xAE\x89\x8B\x7A\x10\x68\x7E\x77\x40\x13\x1F\x88\x70\x05\xFD\x55\x0A\x8F\x8A\xF3\x6F\x82\x8C\x90\xF6\x77\x86\x92\x7E\xF9\x7E\x72\x79\x40\x16\x3F\x81\x8D\x90\x33\x90\x94\x91\x92\xF1\x57\x0D\x7E\x44\x36\x88\x9F\x7D\x8B\x52\x8F\x95\x92\x96\x4B\x8A\x97\x7C\x84\x43\x9E\x94\x94\x97\x21\x59\x0E\x93\x7A\x1A\x2B\x9D\x95\x99\x70\xAF\x92\x9F\x97\x62\x87\x95\x9C\x98\x63\xA8\x97\x9A\x90\x73\xBB\x91\x95\x48\x1B\x2E\x91\x48\x07\x82\x8A\x4D\x05\x7F\x14\x59\x97\x9F\xA2\x64\xBD\x9B\x94\x9F\x74\x8D\xA4\x9F\x07\x85\x8F\xAF\x9E\x9F\x53\x96\xA8\x6C\x08\xFD\x61\x05\xA5\x98\x92\x98\xA6\x9A\xA6\xA3\xA0\xAA\x9C\xA9\x71\x91\xA4\x7E\x08",
			"\x9F\x83\x43\x09\xAB\x76\xA1\xA8\xAA\xA3\xA6\x90\xA2\xA9\xAA\xB7\xB4\xA9\x9E\xAD\xB3\xA1\x46\x46\xA2\xF1\x65\x00\xAD\x40\x26\x03\xBC\xA3\xA9\xB5\x97\xAD\xAD\xAE\xAA\xBC\xA9\xB0\x6E\x27\x06\xB2\xAF\xB3\xA5\x83\x48\x09\x7F\x29\x12\xB8\xB3\xAE\xCA\x94\xB8\xAF\xB2\xE0\x9E\xBA\xAD\xAC\xF4\x58\x40\xB0\x7D\x2B\x1A\xBE\xB0\xB7\x99\xA2\xBD\xB1\xB7\xEC\x95\xB4\xBB\xBA\xF3\xB0\xB6\x9C\x0B\xC6\xAD\x06\xB2\x0B\xEA\xB6\xB8\x9D\xBD\xED\xB1\xBF\xB6\xBB\xCC\x85\xCE\x73\x0B\xFD\x81\xC0\xC2\x71\x30\x3D\x71\x0D\xC2\xF2\xBF\xB2\xC7\xB1\xF4\x93\xC3\xB6\xC0\xE3\x96\xCB\xB6\x9D\x32\x06\xB3\x0C\xC4\x03\xD8\xCF\xBA\xC2\x1A\xD5\xC4\xC6\xBF\x27\xE4\xC9\xC9\xC4\x8B\xB4\x06\xB1\x0D\xC6\xB6\x00\xC9\xC6\x2B\xE1\xCB\xC2\xCD\x25\xE8\xC7\xC7\xCD\x34\xF1\x77\x0F\xCC\x23\xC6\x78\x0D\x7F\x39\x00\xD6\xC0\xC1\xE1\xA2\xC7\xD2\xD2\x49\xFC\xC1\x4A\x0E\xC6\xBB\x06\xD1\xD3\x39\xEA\xCB\xCD\xD5\x2C\xF1\x7C\x0F\xD4\x48\xDD\xDC\xD2\xD7\x76\xB7\x1A\x40\x56\x57\x79\xA2\x4C\x6F\x09\x70\x50\x5B\x69\x60\x72\x4C\xD9\x64\x32\x64\xD3\x42\xDC\x3C\xE7\xDA\x42\xDA\x91",
			"\x74\xD1\x42\xDE\x35\xF2\x4F\x3C\xDA\x6F\x5C\x5C\xDC\xDF\x8D\xB6\xD9\xD8\x57\xC2\x42\x44\xE1\x4A\x80\xC3\x49\xE3\x7B\x6F\xDE\x62\x4F\xE3\x00\x0B\xE6\x49\xE3\x02\x54\xEE\xD8\x57\x32\x78\xD4\x4D\x6C\x98\xDF\xEB\xE5\xDB\x29\x51\xE1\x6D\xE7\x9F\xD1\x61\xE8\x4D\x71\xE3\xD6\xD8\xE3\x77\xC2\xEE\xEB\xAC\x86\xC1\xE0\x58\xE5\x9A\xF0\xE7\xBA\x49\xA6\xEF\x73\xE6\x9B\xAB\xF9\xEC\xEC\xE7\x29\x5E\xE9\xE9\xED\xA9\xF2\x7D\xEE\x7C\xA3\xF0\xD5\xF1\xF2\xA0\xD0\xFF\x7B\xE0\xAF\xD7\xE1\xEC\x58\xD4\xF4\xEA\xEE\xED\x91\x54\xE5\x5D\xF0\x5C\x4B\xFE\xDD\x4A\xDE\xDC\x50\xFB\xDA\xC4\xE6\x46\xF2\xE8\xDB\xC9\xFD\xF2\xE4\xA5\xE9\xF3\x4B\xFA\xAC\xED\xF7\xF1\x4A\xD9\xE2\xB8\xF2\x40\xF4\xED\xE9\x42\xE5\x51\x5B\x7D\x40\x7D\x74\x7D\xEB\x6A\x76\x4D\xE2\x63\x7F\x48\x09\x8A\x80\x8F\x0C\x85\x81\xFF\x14\x7F\xF7\x52\x72\x3F\xFC\x58\x62\x80\x00\x04\x82\x49\x16\x85\x6E\xFB\x43\x80\x71\x0A\x36\x30\x58\x67\x71\x33\x07\x8D\x86\x84\x0A\x88\x87\xF8\x12\x86\x7C\x0A\xBE\x7D\x6C\xDA\x76\x7B\xE1\x58\x73\x76\xFD\x5E\x81\x83\x20\x89\x22\x0A\xFF\x68\x80\xF9\x5F\x23",
			"\x87\xEF\x67\x77\xF3\x52\x78\x83\xBA\x1C\x80\x6B\xE3\x6B\x76\x06\x8B\x8E\x86\x8F\x22\x86\x79\x26\x2F\x88\xFC\x51\x8D\x89\x8E\x12\x8A\x88\x54\x84\x75\x16\xD0\x83\x25\x2B\xBE\x77\x86\x00\x9F\x23\xEA\x61\x8E\x23\x31\xAD\x87\x7F\x67\x90\x87\x01\xE8\x80\x2C\x2F\x8C\x79\x25\x76\x14\x80\xE5\x7C\x64\x7E\x37\x8B\x7B\x35\xD0\x73\x8E\x01\x83\x26\x8E\xD5\x3E\x89\x21\x78\x83\x23\xEA\x2B\x77\x8E\x85\x05\x91\x21\xC0\x23\x21\x20\x87\x2F\x8E\x83\x3D\x88\x90\x21\x86\x91\x23\x83\x2C\x3A\x1D\x93\x92\x20\x95\x86\x23\x21\xDC\x7C\x8E\x49\x90\x93\x86\x8E\x9E\x92\x41\x0B\x91\x20\xF0\x1C\x92\x20\x8F\x83\x96\x42\x26\x93\x21\x3A\xA2\x92\x91\x35\x8D\x95\x24\x96\x9F\x92\x35\xB2\x91\x21\xA9\x90\x95\x42\x64\x3C\x8D\x53\x95\x37\x95\x0B\x2A\x20\x2F\xB6\x9C\x7F\x59\x9A\x97\x92\x01\x3A\x8C\x28\x9D\x94\x96\x55\x8A\x54\x8E\xC6\x83\x23\x26\x83\x27\x3D\xE0\x31\x95\x98\xB8\x80\x99\x40\x24\x90\x01\x6A\x8E\x77\x9A\x1F\x99\x99\x33\xBA\x96\x20\xFE\x0F\x9B\x8F\xA8\x9A\x98\x00\x5C\x96\x9C\x6B\xBD\x97\x96\xA1\x83\x9D\x30\x89\x25\x41\x5A\x8C\x98\x7A\x69\x1D",
			"\x3F\xF2\x59\x52\x7A\x35\x3D\x3E\x8D\xAF\x52\x7B\x1A\x7D\x34\x7F\x43\x52\x7C\x0D\xFD\x3C\x6E\x95\x52\x7D\x0D\xFE\x14\x76\x43\xD2\x6E\x0D\x7F\x21\x23\x99\xE4\x6F\x0B\xA2\x0A\x39\x91\xF2\x70\x0E\xA0\x85\x07\x42\x7A\x71\x09\xA2\x42\x3E\x42\x7A\x39\x3F\x9A\x21\x81\x52\x7B\x1C\x7A\x9A\x20\x4F\x52\x7C\x0E\xFD\x3C\x99\xB4\x52\x75\x0F\x98\x8A\x20\x5F\xD2\x71\x8E\xA2\x3D\x04\x83\xE5\x41\x68\x67\x34\x3C\x6C\x05\x80\x08\x76\x70\x8B\x54\x6F\xE5\x6B\x99\xE6\x4B\x68\x9A\x77\x90\x7E\x8D\xC2\x68\x66\x1B\xAC\x84\x6B\x45\x4B\x7E\xA7\x4C\xBF\x70\x21\xC6\xA1\x25\xE5\x54\x74\x9B\x7C\x63\x90\x32\x80\x08\xAB\xAA\xB5\x9E\xA9\xE4\x93\x6C\x05\x89\x9B\xA9\x84\x1A\xA2\x71\x1E\xBD\x3C\x5B\xA6\x3E\x85\x8D\x41\x23\x43\x8A\x53\xAD\xE5\x14\x85\xA3\xB6\x86\x26\x9B\x70\xA9\x20\x44\xE8\xA8\x92\x85\x2B\x71\x24\x67\xB0\x9F\xD7\x14\x9B\x94\x0A\x83\xB7\x9E\x03\x24\xA4\x61\x93\x6C\x94\x46\x84\x8E\xAE\x8B\x5D\xAD\x40\x07\xBA\x21\x26\x7B\x70\x65\x9A\xA0\x01\x65\x9F\x7B\xA0\x62\x81\x22\x4D\x9F\xB8\x34\x60\xF4\xA7\xB2\x93\x75\x46\xB4\xDD\x9C\xAA\x42\x6D",
			"\x4A\x51\x94\xB0\xB4\x47\xEF\x82\x21\x62\x82\x25\xAC\xB0\x4C\x4E\xA8\xBB\xBB\x6C\x05\x86\xA3\xB2\x00\x09\x50\xB6\x58\x50\xB7\x47\xE5\x94\x82\x4E\x4A\xA8\x89\xB2\x2B\xBB\x40\x78\xA0\x7B\x80\xB1\x9E\x20\x33\xA5\xB9\x7C\x54\xB3\x21\xE0\xB5\x7E\x64\xF1\x2F\xB2\x40\x6D\x99\x79\x6B\x69\xB4\x65\xE2\xB7\xAC\x05\xFC\x90\xB7\x74\x67\xBC\x46\xEA\x9F\xA6\x6C\x34\xBE\x96\x00\x2F\xB2\xAD\xD2\x78\xA5\x71\xFA\x59\xB7\x80\x04\xBA\xB1\x02\x38\xB7\x31\xAD\xB8\x64\xE7\xB5\xBA\xC0\xF8\xB0\x78\xC2\x0A\x5D\x61\xFE\x80\x06\xBA\x00\xC1\x22\x64\xB8\x44\x83\x8E\x4F\xBD\x6F\x21\x33\xC2\x40\x1E\xB0\x7A\x98\x62\x9E\x20\x45\x6F\xBE\x6C\x1C\xC3\x20\x04\xF7\x78\xBC\xF4\x25\xB4\x85\xD2\x70\x6A\x11\xF4\x4A\xC5\x1B\xD4\x82\xD4\x0E\xCC\xA6\x17\xD1\x21\xBE\x59\xA0\x01\xB1\x1F\xC3\x21\xE4\x89\xC1\x79\x3E\x1D\x3F\x0F\x46\xA6\x5D\xEB\x83\x24\xBE\xD2\x95\xAE\xC9\x7C\x52\x9F\x80\x08\xC9\xB0\xD0\x61\x09\x7F\x42\x06\xA9\x8F\x4D\xC8\x00\xB6\xA3\x20\x6A\xD0\x74\x08\x74\x90\xBB\x50\xB3\xAA\xCA\xCE\x74\x3F\xBE\x81\x1B\xC9\x79\x47\x1C\x6B\x40\x65\xC1\x20\x42",
			"\x52\x78\x09\x46\xAA\x0A\xB1\x47\xB9\xC8\x02\xEA\x63\x68\x57\xD4\xCC\x94\xC9\x7B\x09\xFE\x0C\x0E\xA8\x35\xC3\xC2\x41\x06\xC5\xCE\xE8\x57\x68\x00\x54\xD6\x9E\x40\x04\xDB\xCF\xD4\x4E\x0D\x3F\x4F\x06\xA8\x9C\x8A\xD1\x20\x97\x86\x24\x52\xD2\x71\x0A\x97\x98\xCA\x20\x56\x49\x24\xD1\xEC\x68\xC6\x6E\x10\xC2\x20\x4C\xD0\x7C\x0A\x6A\xC2\x20\xA9\x81\x2E\xD2\xE8\x55\x0E\xA8\x57\x06\x5B\xAF\x02\xDE\x7C\xCC\x8F\xD4\xD2\x00\x13\xD7\x8F\xA9\x78\x0B\xFE\x19\x0E\xA8\xA8\xD8\xD7\x8E\xB4\xD7\xC4\x94\x5A\x0E\xB0\x0A\x23\xDB\xAE\x9F\x7B\x0B\xFE\x1C\x0E\xA8\x61\x08\xD9\x42\x59\xB3\x20\x61\x52\x7E\x0B\x9B\xC7\xD2\x79\x86\x2A\xD9\x62\xD6\x6C\x3E\xEC\xB5\xD8\x05\xD1\xD6\xC6\xE7\x21\xDA\x20\xDB\xC9\x7A\x18\x46\xA4\x0C\x63\x45\xCD\xD0\xB5\xC6\x64\x1A\x52\xD6\x21\x77\xCD\xD7\x73\x65\x1D\x3E\x19\x46\xA7\xA3\x84\x2B\x72\xBF\x03\x2E\xBC\xF4\x73\xD5\xDD\x30\x7C\xBE\xD0\xF4\x2C\x7B\x50\xB4\x29\xA8\x45\x4C\xE1\x27\x68\x31\xAB\x48\x45\xAD\xA3\x8A\xCE\xE1\x24\x64\x80\x25\xC6\x9D\x28\xA8\x8C\xD3\xA5\xE3\xB2\xB9\xD8\x4E\x4B\x83\x7F\x89\xB4\x7E\x7B",
			"\x27\xE1\x24\x55\xBC\xC2\x3A\x37\xBE\x68\xAA\x21\x30\xE5\x34\xFE\xA6\xC9\xE4\x7B\x84\xAC\x9C\x7E\xA9\x57\x93\xAA\xE6\x1C\xE3\xAE\x27\xDC\x9E\x6C\x37\xDE\x73\xE9\x90\x05\xEB\xAC\x34\x2B\x76\x4F\x4A\xE5\x89\x90\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp3",
			L"Exp4",
			L"Exp5",
			L"Exp6",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID @ >",
			L"[3][Exp0]<< \"(\" !Exp6 \")\" @ >>",
			L"[4][Exp0]<< \"(\" !Exp6 @ \")\" >>",
			L"[5][Exp0]<< \"(\" @ !Exp6 \")\" >>",
			L"[6][Exp1] BEGIN ",
			L"[7][Exp1] END [ENDING]",
			L"[8][Exp1]< Exp1 \"^\" @ Exp0 >",
			L"[9][Exp1]< Exp1 \"^\" Exp0 @ >",
			L"[10][Exp1]< Exp1 @ \"^\" Exp0 >",
			L"[11][Exp1]<< !Exp0 @ >>",
			L"[12][Exp2] BEGIN ",
			L"[13][Exp2] END [ENDING]",
			L"[14][Exp2]< Exp2 \"*\" @ Exp1 >",
			L"[15][Exp2]< Exp2 \"*\" Exp1 @ >",
			L"[16][Exp2]< Exp2 @ \"*\" Exp1 >",
			L"[17][Exp2]<< !Exp1 @ >>",
			L"[18][Exp3] BEGIN ",
			L"[19][Exp3] END [ENDING]",
			L"[20][Exp3]< Exp3 \"+\" @ Exp2 >",
			L"[21][Exp3]< Exp3 \"+\" Exp2 @ >",
			L"[22][Exp3]< Exp3 @ \"+\" Exp2 >",
			L"[23][Exp3]<< !Exp2 @ >>",
			L"[24][Exp4] BEGIN ",
			L"[25][Exp4] END [ENDING]",
			L"[26][Exp4]< Exp3 \"=\" @ Exp4 >",
			L"[27][Exp4]< Exp3 \"=\" Exp4 @ >",
			L"[28][Exp4]< Exp3 @ \"=\" Exp4 >",
			L"[29][Exp4]<< !Exp3 @ >>",
			L"[30][Exp5] BEGIN ",
			L"[31][Exp5] END [ENDING]",
			L"[32][Exp5]< Exp4 \"?\" @ Exp5 >",
			L"[33][Exp5]< Exp4 \"?\" Exp5 @ >",
			L"[34][Exp5]< Exp4 @ \"?\" Exp5 >",
			L"[35][Exp5]<< !Exp4 @ >>",
			L"[36][Exp6] BEGIN ",
			L"[37][Exp6] END [ENDING]",
			L"[38][Exp6]< Exp5 \"$\" @ Exp6 >",
			L"[39][Exp6]< Exp5 \"$\" Exp6 @ >",
			L"[40][Exp6]< Exp5 @ \"$\" Exp6 >",
			L"[41][Exp6]<< !Exp5 @ >>",
			L"[42][Module] BEGIN ",
			L"[43][Module] END [ENDING]",
			L"[44][Module]<< !Exp6 @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver, ModuleParserStateTypes>(&BinaryOpTokenDeleter, &BinaryOpLexerData, &BinaryOpModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		return -1;
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
