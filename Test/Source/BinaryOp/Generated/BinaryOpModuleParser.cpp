/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "BinaryOpModuleParser.h"

namespace binaryop
{
	void BinaryOpModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2507; // 23237 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 203;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\xC5\x5A\x00\x00\xC3\x09\x00\x00\x0A\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x09\x0A\x98\x0A\x9E\x0A\x84\x12\x84\x15\x0A\x9C\x02\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x81\x9A\x81\x01\x99\x94\x21\xB6\x89\x9A\x96\x82\x9B\x97\x93\x37\xAC\x81\xAE\x93\xA0\x98\x8E\x9C\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x3D\xC8\x8F\xAA\xA1\xAC\xA6\x83\x8D\x3B\xC9\xA0\x9A\xA3\x9B\xAB\xAC\xAF\x5D\xD5\x8E\xA2\xB0\xAB\x82\x9E\xAE\x3F\xDF\xA4\xB4\xA6\xB2\xAA\x83\x01\x35\xE8\xB2\xA0\xB9\xB1\xB1\xB6\xAB\x77\xE3\xB9\xA5\xB2\x87\xB0\xBB\xB9\x6B\xEA\xBB\xAC\xBD\xBE\xB7\xC0\xC1\x85\xF8\x89\xDA\xBB\xC4\xBD\x80\xBF\x81\xF6\x8D\xC4\xC1\x84\x01\xB9\xBF\x98\x91\xF5\xBB\xC0\xC7\xC2\xC9\xC7\x86\x93\xC8\xC0\xDA\xC1\x81\x03\xCB\x9A\x8A\x8C\x99\xA9\xCE\xCC\xCF\xD6\xA2\x9F\xE2\x81\xD4\xD4\xC5\xDA\xC7\xB3\xA5\xC0\x07\x08\xD6\xD6\x84\x84\x06\xBC\xBE\xD0\xD7\xDC\xC9\xDC\xDB\xC7\xB8\xD0\xC3\xE9\xD4\xE1\xE4\xE3\xCB\xB1\xEF\xCD\xE4\xEC\xE6\xEA\xE9\x9D\xD8\xCE\xE9",
			"\x0D\xDA\xEE\x82\x80\xAC\xD5\xC2\x8B\x0D\xE9\x82\x87\xF0\xD7\xC5\xE3\xCF\xEB\xF1\xEA\xF4\xD9\xEE\xEC\xF0\xF4\xD2\xFB\xE9\xF5\xFA\xD9\xEF\xE1\x8D\x05\xF0\xFE\xE7\xF8\x00\xB4\x71\x82\x6E\x0E\x3D\x7F\x01\x7F\x03\x88\x79\x82\x72\x02\x8D\x8A\x6F\x82\xD0\x4E\x8A\x82\x84\x0C\x8F\x84\x85\x84\x16\xBA\x60\x04\x82\xF4\x51\x0C\x85\x86\x13\xA0\x85\x85\x88\x24\xA3\x86\x88\x86\x25\xA8\x87\x89\x7B\x17\xAC\x82\x8A\x8A\x30\xAE\x89\x8B\x7A\x10\x68\x7E\x77\x40\x13\x1F\x88\x70\x05\xFD\x55\x0A\x8F\x8A\xF3\x6F\x82\x8C\x90\xF6\x77\x86\x92\x7E\xF9\x7E\x72\x79\x40\x16\x3F\x81\x8D\x90\x33\x90\x94\x91\x92\xF1\x57\x0D\x7E\x44\x36\x88\x9F\x7D\x8B\x52\x8F\x95\x92\x96\x4B\x8A\x97\x7C\x84\x43\x9E\x94\x94\x97\x21\x59\x0E\x93\x7A\x1A\x2B\x9D\x95\x99\x70\xAF\x92\x9F\x97\x62\x87\x95\x9C\x98\x63\xA8\x97\x9A\x90\x73\xBB\x91\x95\x48\x1B\x2E\x91\x48\x07\x82\x8A\x4D\x05\x7F\x14\x59\x97\x9F\xA2\x64\xBD\x9B\x94\x9F\x74\x8D\xA4\x9F\x07\x85\x8F\xAF\x9E\x9F\x53\x96\xA8\x6C\x08\xFD\x61\x05\xA5\x98\x92\x98\xA6\x9A\xA6\xA3\xA0\xAA\x9C\xA9\x71\x91\xA4\x7E\x08",
			"\x9F\x83\x43\x09\xAB\x76\xA1\xA8\xAA\xA3\xA6\x90\xA2\xA9\xAA\xB7\xB4\xA9\x9E\xAD\xB3\xA1\x46\x46\xA2\xF1\x65\x00\xAD\x40\x26\x03\xBC\xA3\xA9\xB5\x97\xAD\xAD\xAE\xAA\xBC\xA9\xB0\x6E\x27\x06\xB2\xAF\xB3\xA5\x83\x48\x09\x7F\x29\x12\xB8\xB3\xAE\xCA\x94\xB8\xAF\xB2\xE0\x9E\xBA\xAD\xAC\xF4\x58\x40\xB0\x7D\x2B\x1A\xBE\xB0\xB7\x99\xA2\xBD\xB1\xB7\xEC\x95\xB4\xBB\xBA\xF3\xB0\xB6\x9C\x0B\xC6\xAD\x06\xB2\x0B\xEA\xB6\xB8\x9D\xBD\xED\xB1\xBF\xB6\xBB\xCC\x85\xCE\x73\x0B\xFD\x81\xC0\xC2\x71\x30\x3D\x71\x0D\xC2\xF2\xBF\xB2\xC7\xB1\xF4\x93\xC3\xB6\xC0\xE3\x96\xCB\xB6\x9D\x32\x06\xB3\x0C\xC4\x03\xD8\xCF\xBA\xC2\x1A\xD5\xC4\xC6\xBF\x27\xE4\xC9\xC9\xC4\x8B\xB4\x06\xB1\x0D\xC6\xB6\x00\xC9\xC6\x2B\xE1\xCB\xC2\xCD\x25\xE8\xC7\xC7\xCD\x34\xF1\x77\x0F\xCC\x23\xC6\x78\x0D\x7F\x39\x00\xD6\xC0\xC1\xE1\xA2\xC7\xD2\xD2\x49\xFC\xC1\x4A\x0E\xC6\xBB\x06\xD1\xD3\x39\xEA\xCB\xCD\xD5\x2C\xF1\x7C\x0F\xD4\x48\xDD\xDC\xD2\xD7\x76\xAE\x3A\x42\x65\x60\x72\x48\x57\x55\xB9\xB2\x40\x7B\x5B\x5C\x6B\x61\x66\x4C\x6E\xDE\x62\x4C\xD9\x6F\xE9\x44\xDE\xDC\x76",
			"\xDC\x53\xDE\xDE\x79\xE5\xDD\xDD\xDD\x26\x77\xD1\x6F\xDE\x7E\xC1\xEC\xDE\xE1\x85\xE3\x42\xE3\x7B\x84\xC0\xEA\xE3\xE1\x23\x67\xD3\x42\xE4\x3C\xEA\xDA\x40\x5C\x60\x4B\xE2\x7D\xE3\x78\xC8\xEE\xE3\x47\x94\xC1\x41\xE9\xCD\x32\x7F\x3B\xDB\x40\x98\xD1\x6A\xE5\xE9\x29\x63\xE3\xE9\xA3\x96\xC9\x49\xEA\x67\xC2\x42\x4F\xE9\x4A\xA7\xC2\x45\xEF\x7B\x71\xC3\xE9\x4B\xEE\x00\x37\xE6\x49\xEE\x01\x40\xF0\xDC\xE4\x1F\x73\xE4\x4F\x7B\xC4\xF4\x47\xF1\xE2\x1F\x7D\xEC\xE1\x4A\xCA\xCB\xF1\xEF\xF2\xB1\x6B\xEC\xEB\xE3\xD0\xDE\x4A\xF7\xF6\xDE\xC8\xF1\xF9\xF7\x1D\x6E\xE9\xD8\xEE\x97\xDC\x5F\xF4\xF8\xFF\x2B\xF0\xFA\xFB\xDB\xE6\xF3\xAF\xF5\xA8\xDC\x50\xF2\xF1\xE8\xE7\xB6\x4A\xF4\x9B\xFF\xEE\x99\xF3\xF8\x7B\x7E\xF8\x1D\x25\x7A\xE7\x79\x78\x7B\xBC\x63\x83\x3F\x7C\x7C\x7C\x8F\x05\x85\x2E\xCD\x75\x2C\xFC\x2C\x73\x83\xD2\x55\x84\x73\xBE\x7E\x71\xE7\x5C\x7F\x73\xF1\x5D\x85\x7C\x0A\x22\x79\x94\x74\x72\x21\x02\x98\x83\x7A\x1A\x99\x80\x07\x9B\x8F\x23\x0B\xBF\x6C\x85\x1E\x32\x7E\xB8\x24\x81\x20\x13\xBE\x78\x81\xCC\x6E\x4C\x03\x8D\x8F\x1E\xE0\x50\x82",
			"\x87\x0A\x8F\x80\x57\x11\x8D\x6C\x05\xBB\x85\x81\x42\x80\x2C\x11\x99\x7A\x80\x17\xA9\x80\x85\x2B\x8A\x85\x0B\xCD\x84\x8A\xF2\x6D\x7D\x8A\x1F\x9F\x1E\x0C\x98\x64\x86\x00\x36\x87\x89\xFD\x60\x8C\x0F\xD7\x86\x8A\x27\x91\x88\x8A\x53\x85\x8C\x16\xB0\x8D\x22\x33\xA0\x71\x84\xE7\x63\x79\xFA\x60\x20\x79\x2F\xA3\x20\x80\x45\x96\x8B\x11\xEC\x7B\x8E\xF0\x49\x89\x32\x4B\x8A\x77\x1A\xD2\x8E\x82\x36\xA4\x89\x8B\x6E\x85\x90\x21\xED\x83\x90\x34\x8A\x96\x91\x8C\x8A\x8E\x15\xDB\x85\x73\x03\xB5\x7C\x89\x92\x88\x91\x23\xE1\x87\x8C\x4E\xA9\x8A\x93\x99\x86\x91\x22\x91\x90\x95\x2C\x94\x90\x6B\xAC\x6D\x7A\x1D\x9F\x20\x79\x0A\xB8\x88\x2C\x7D\x9B\x79\x2C\xAC\x73\x97\xD2\x7F\x8E\x33\x81\x9E\x33\x28\x87\x92\x95\x4D\xA3\x8B\x97\xC0\x9E\x94\x0F\xC1\x91\x95\x45\xBC\x96\x98\xBB\x87\x94\xE9\x5D\x8B\x95\x47\x9E\x96\x99\xBF\x82\x99\x03\xC4\x95\x95\x5E\x85\x98\x92\xC7\x98\x98\x35\xD6\x96\x94\x38\xB3\x7E\x92\x25\x96\x7E\x42\x27\x3A\x88\x20\xBA\x8E\x88\x41\x98\x85\x0E\xEA\x97\x85\x67\xA4\x94\x9B\xF0\x88\x9A\x34\xEC\x7B\x9A\x79\x97\x9E\x9D\xD9\x98",
			"\x9D\x3D\xDA\x93\x9E\xF0\x4A\x98\x76\xE0\x95\x85\x1E\xD9\x84\x9C\x82\x8A\x85\xA0\x86\x88\xA2\x31\x8A\xA8\x9A\x86\xB8\x9E\xA1\x63\x8D\x7A\x08\x9F\x22\xA3\x21\x9E\x98\x90\x17\xB8\x95\x46\xB1\x35\xA2\xB0\x10\xA4\x87\x21\x36\x0E\x3A\x80\x00\x79\xD1\x45\x82\x73\x0E\xBC\x7D\x4E\x1B\xA2\xA1\x84\x28\xA2\x35\x30\xA9\x20\xFF\x3C\x39\x20\x9A\x86\x21\xA5\xE3\x91\xA6\x41\x40\x33\x20\xFE\x7C\xA3\x21\x63\x79\xA6\x4C\xC1\xA9\x20\x9C\x89\x24\x3B\x45\xBA\xA7\x40\x48\xA7\xA6\xA5\xA1\x9E\xA5\x42\xA6\x20\xFF\x27\xA1\xAB\x9E\x8A\x22\x95\x44\xAD\xAB\x50\x89\x28\xAA\xA8\x89\xAB\xAB\x68\x72\x75\x56\x83\x26\xA9\xB0\xAC\x6E\xAB\x5A\xB2\xAA\x42\x64\x39\x20\x93\xA3\xAA\x20\x65\xA3\x20\x5B\xE6\xA7\x92\x83\x2F\xA0\xAC\x03\x25\xA7\x1C\xF6\xA5\xAA\xA0\x8A\x56\xAD\x68\xA4\xAE\x53\xE6\x3D\x3E\xC0\xBC\xAF\xAB\x6A\xA9\x23\x79\x41\x3C\xA4\x2F\xAF\xAE\x34\x83\xA0\x00\x7F\x7F\xAB\xAF\x81\x37\xA9\xB1\x06\x33\xB0\x63\xED\xA5\xB2\x81\x17\xB6\xAA\x09\x25\x40\x5E\x9E\xB3\xA5\x02\xA0\x1D\x3F\x0E\xB9\x5A\x3A\x85\x81\x1D\xFE\x1A\x77\x55\xAB\xAA\x22\x38\x7D",
			"\x35\x81\x43\x71\xB1\x21\xE3\x05\xB2\x42\x56\x47\xB6\x83\x24\x1D\x3F\xC0\x7E\x41\x6F\x83\x25\x1D\xFE\x21\x23\xAE\x08\x85\x82\x39\x46\xBA\x20\xA6\xA3\xA6\x20\xE7\x00\xBA\x42\x07\x4F\xB9\x84\x28\x1A\xB7\x09\x3E\x45\x75\x86\x29\x1C\xD7\x8A\x21\x50\xDB\xA3\x22\x3A\x28\xBA\x20\x4F\x61\xBA\x20\xEB\x1D\x3C\xFF\x51\x57\xBD\x80\x2C\x1A\xBD\x0A\x38\x5F\x70\x82\x2D\x1D\xFE\x3D\x03\xA4\x1F\xBA\x34\x9D\x2B\xA4\x6A\x9A\x13\xA6\x38\x74\x57\x7D\x63\xFF\xBB\x3D\xD1\x41\x80\x39\x74\x5A\x73\x81\xAA\x65\x81\x05\xC0\xC1\x49\x0E\xAE\xC0\xCE\x00\x0A\x73\x66\xAB\x39\x68\x13\xD1\x3E\x43\xF9\xB8\xC1\x24\x73\xA1\x49\x21\x36\xA6\x60\x9C\xBE\x38\x3A\x5A\xB3\x20\x22\xC2\x20\x8F\x24\xC6\x21\x14\xC1\x26\xC5\x00\x1C\x7C\x87\xB8\x34\x4F\x26\x6C\xC7\x3E\xA2\xBB\xB0\x66\x93\x70\xC5\x24\x58\x4C\xAE\x02\x2D\x4F\x8D\x82\x24\xBA\x1D\xC3\x27\xA7\x90\xA5\xC5\x92\x04\x5A\x7E\xE4\x1B\x42\x51\x48\xC1\x79\x8F\xCE\x36\xB6\x23\xC2\x21\x51\x40\xC1\x22\x70\xD6\xC1\x20\xE7\x82\x20\xC6\xF1\x34\x4C\xA7\x62\xAD\xBE\x2F\xC1\x25\x79\x61\xC9\x48\x6C\x87\xB6\x20\xF6",
			"\x9C\xCB\x51\xCD\x71\xC9\x9A\xFD\xB7\x6A\x00\x08\xBF\xCB\x53\xC1\x4F\xB5\x4D\xCA\x65\x3B\xE7\xC9\xCF\xF7\x2A\xB5\x96\x80\x09\x5C\x3E\xC6\x3B\xB1\x23\xC1\x4C\x9D\x72\xB7\xAD\x30\x75\x43\xD0\x88\xD6\x74\xA0\xF6\x48\x60\x32\xC6\x25\x63\x43\xC1\x23\x8A\x83\xD9\xC7\x44\xF7\x3C\x4E\x2E\x79\xD3\xA2\x36\xCC\xD3\xC6\xB3\xC9\x4C\x32\x62\xD7\xD0\x22\xDF\xC6\x1E\xC9\x25\xC8\x03\x27\xC6\x9D\x74\x40\x6A\x4B\xDF\x6B\x20\xB0\xC2\x23\x93\x8A\xD9\x49\xFB\x81\xB2\x20\x41\x06\x5B\xAE\x83\x2D\xD3\x59\xCB\x6E\x69\x0A\x3B\xC9\xAC\x93\xD3\x62\x21\x1C\x6B\x20\xCA\xDA\xD4\xB3\x8B\x53\x09\xC6\x85\x0E\x58\x8F\xDE\xD2\xB1\xCE\x36\x09\xC7\x8B\x52\xC8\x8D\xC3\x21\xB6\x92\xDA\xC8\xE7\x0A\x0E\xDB\x4E\x0D\xB1\x95\xF5\xA3\x21\x4D\xDA\xDB\x62\x74\x50\x09\x67\x93\x63\xCD\x70\xEA\xC6\xD4\xF4\x34\x4F\x14\x73\xD0\x00\x2B\x0D\xB3\xCD\xEC\xC2\x22\x76\x86\x29\x47\x72\xE1\x48\x0B\xFC\xD5\xCF\xC0\x83\x24\xD5\x4F\xC9\x4B\x0B\xDE\xDF\x0A\xB1\x0D\xE7\xDE\x83\xF7\xD0\xD9\x09\x3C\xB4\xC1\xD3\xD1\x3E\x30\x0F\xDA\x20\x1A\xEC\xE0\xC7\xF4\x31\x0D\xC6\xA3\x0E\x58",
			"\xAD\xD0\xAF\xC8\xBA\x34\x0D\xBE\x93\x65\x58\xBF\xC1\x21\xCA\xA2\x7B\xE4\xE4\x29\x0E\xE5\x00\x0E\x0D\x63\xE6\x5C\xCD\x81\x20\xDF\xDD\x8B\x54\x4C\x1C\x38\xE1\x3E\x7E\x48\xB6\xE7\xF8\xDA\xBD\x92\x75\x08\xE6\x3D\x0D\xB7\x63\x47\xE2\x20\x78\x86\x2A\x4C\x8B\xF6\x4C\x0F\x09\xFB\x61\x40\x4C\xC6\x21\x9F\xDB\xD8\x6C\xA8\x92\x37\xBA\x82\x25\xEA\x5E\xCE\x3F\x0F\x1F\xE1\x23\xD8\xDB\xE5\xE6\xDC\x00\x15\xB1\x82\x06\x58\x96\xC0\xE7\xD5\xFB\x03\x11\xB2\xF1\x2B\xD5\x5A\x83\x23\xEE\x72\xE6\xE9\x4C\x89\x11\xB3\x23\x0D\xBE\xD7\xBD\xC2\x25\xDE\x74\xF9\xDD\x92\x11\x18\xEE\xFA\x0E\xDB\xB4\x01\x28\xF2\xDF\x8E\xEE\x39\x4B\x11\xB5\x13\x8D\xA8\x09\x64\xE6\xB6\x20\x4A\x56\xEB\x62\x9F\x19\xEA\xC9\x2C\x59\x20\xC9\xF0\xDF\xD8\x61\xE1\x24\xC0\x82\x2E\xF3\xBF\xF7\x3A\x14\x69\xE0\x03\xEA\x81\x24\xF4\xD7\xF6\x4B\x14\x8D\xA5\x16\xB1\x3F\x56\xF1\xD3\xCE\x3E\x14\x0A\x20\xCC\x7D\x69\xD0\xF2\x00\x3C\xF6\xD5\xB6\xF3\x61\x2B\x41\xFA\x20\x5A\x0D\xB4\x0A\x91\xB0\xE5\xEF\xC1\xE9\x48\x5B\x0C\xFE\x39\x5A\x17\xFA\x41\x52\xF8\xF8\xCA\xE1\x4D\x17\xDA\xE3\x20",
			"\x31\x0D\xB5\xE5\x9A\x8A\x26\xCD\x03\x22\x5B\xE7\x8B\x56\x18\xD1\xE8\x63\xCF\xDB\xED\xED\xD6\x5A\xE0\x00\x41\xE9\xFA\xFE\xEB\x29\x19\xEC\xF6\xF2\x20\xF8\xDE\xFF\x3E\xCA\x0D\x58\xCC\x06\x2C\x3C\x79\x78\x4A\x7E\x1C\xCD\x0F\x1B\x49\x28\x06\xE1\x72\x10\x05\x83\x79\x5F\x77\x1F\xD5\x0A\x80\x09\x1D\x0D\x8D\x5F\x06\x0D\x81\x10\x8C\x63\x10\x85\x69\x7C\x8B\x2F\x0D\xB1\x7A\x2F\xEC\x49\x6F\xA5\x3D\x5E\x79\x5F\x5C\x3E\x4C\x5F\x86\x60\x12\x12\x6D\x11\x02\x62\x5D\x30\x8A\x28\xFE\x58\x16\x04\x60\x42\x32\x86\x60\x21\x18\x83\x8D\x54\x13\x16\x6A\x12\x3D\x8F\x0F\x0D\x61\x12\x41\x8C\x6F\x3E\x47\x4B\x96\x58\x16\x17\x4A\x60\x21\x1A\x84\xDE\x6E\x43\x9A\x34\x13\x33\x67\x12\x51\x8E\x11\x11\x61\x12\x55\x88\x73\x3E\x4E\x50\x34\x15\x4B\x31\x6A\x37\xFC\x3E\x43\x5F\x81\x12\x61\x81\x59\x34\x12\x7C\x2C\x16\x86\x26\x10\x63\x26\x82\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp3",
			L"Exp4",
			L"Exp5",
			L"Exp6",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID @ >",
			L"[3][Exp0]<< \"(\" !Exp6 \")\" @ >>",
			L"[4][Exp0]<< \"(\" !Exp6 @ \")\" >>",
			L"[5][Exp0]<< \"(\" @ !Exp6 \")\" >>",
			L"[6][Exp1] BEGIN ",
			L"[7][Exp1] END [ENDING]",
			L"[8][Exp1]< Exp1 \"^\" @ Exp0 >",
			L"[9][Exp1]< Exp1 \"^\" Exp0 @ >",
			L"[10][Exp1]< Exp1 @ \"^\" Exp0 >",
			L"[11][Exp1]<< !Exp0 @ >>",
			L"[12][Exp2] BEGIN ",
			L"[13][Exp2] END [ENDING]",
			L"[14][Exp2]< Exp2 \"*\" @ Exp1 >",
			L"[15][Exp2]< Exp2 \"*\" Exp1 @ >",
			L"[16][Exp2]< Exp2 @ \"*\" Exp1 >",
			L"[17][Exp2]<< !Exp1 @ >>",
			L"[18][Exp3] BEGIN ",
			L"[19][Exp3] END [ENDING]",
			L"[20][Exp3]< Exp3 \"+\" @ Exp2 >",
			L"[21][Exp3]< Exp3 \"+\" Exp2 @ >",
			L"[22][Exp3]< Exp3 @ \"+\" Exp2 >",
			L"[23][Exp3]<< !Exp2 @ >>",
			L"[24][Exp4] BEGIN ",
			L"[25][Exp4] END [ENDING]",
			L"[26][Exp4]< Exp3 \"=\" @ Exp4 >",
			L"[27][Exp4]< Exp3 \"=\" Exp4 @ >",
			L"[28][Exp4]< Exp3 @ \"=\" Exp4 >",
			L"[29][Exp4]<< !Exp3 @ >>",
			L"[30][Exp5] BEGIN ",
			L"[31][Exp5] END [ENDING]",
			L"[32][Exp5]< Exp4 \"?\" @ Exp5 >",
			L"[33][Exp5]< Exp4 \"?\" Exp5 @ >",
			L"[34][Exp5]< Exp4 @ \"?\" Exp5 >",
			L"[35][Exp5]<< !Exp4 @ >>",
			L"[36][Exp6] BEGIN ",
			L"[37][Exp6] END [ENDING]",
			L"[38][Exp6]< Exp5 \"$\" @ Exp6 >",
			L"[39][Exp6]< Exp5 \"$\" Exp6 @ >",
			L"[40][Exp6]< Exp5 @ \"$\" Exp6 >",
			L"[41][Exp6]<< !Exp5 @ >>",
			L"[42][Module] BEGIN ",
			L"[43][Module] END [ENDING]",
			L"[44][Module]<< !Exp6 @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver>(&BinaryOpTokenDeleter, &BinaryOpLexerData, &BinaryOpModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<binaryop::BinaryExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<binaryop::BinaryExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<binaryop::BinaryExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
