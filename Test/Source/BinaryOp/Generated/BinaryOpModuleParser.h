/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:BinaryOp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_BINARYOP_MODULEPARSER_SYNTAX
#define VCZH_PARSER2_UNITTEST_BINARYOP_MODULEPARSER_SYNTAX

#include "BinaryOp_Assembler.h"
#include "BinaryOp_Lexer.h"

namespace binaryop
{
	enum class ModuleParserStates
	{
		Exp0 = 0,
		Exp1 = 6,
		Exp2 = 12,
		Exp3 = 18,
		Exp4 = 24,
		Exp5 = 30,
		Exp6 = 36,
		Module = 42,
	};

	const wchar_t* ModuleParserRuleName(vl::vint index);
	const wchar_t* ModuleParserStateLabel(vl::vint index);
	const wchar_t* ModuleParserSwitchName(vl::vint index);
	extern void BinaryOpModuleParserData(vl::stream::IStream& outputStream);

	class ModuleParser
		: public vl::glr::ParserBase<BinaryOpTokens, ModuleParserStates, BinaryOpAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		ModuleParser();

		vl::Ptr<binaryop::Expr> ParseModule(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<binaryop::Expr> ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif