/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst.h"

namespace cpp_parser
{
/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

	void CppExprOnly::Accept(CppTypeOrExpr::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppTypeOnly::Accept(CppTypeOrExpr::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppNameIdentifier::Accept(CppIdentifier::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppOperatorIdentifier::Accept(CppIdentifier::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppQualifiedName::Accept(CppTypeOrExpr::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppPrimitiveExprLiteral::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppNumericExprLiteral::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppStringLiteral::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppParenthesisExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppBraceExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppCastExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppSysFuncExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppSizeofExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppDeleteExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppNewExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppPrefixUnaryExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppPostfixUnaryExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppIndexExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppCallExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppBinaryExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppIfExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppThrowExpr::Accept(CppExprOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppPrimitiveType::Accept(CppTypeOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppConstType::Accept(CppTypeOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppVolatileType::Accept(CppTypeOnly::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void CppDeclaratorType::Accept(CppTypeOrExpr::IVisitor* visitor)
	{
		visitor->Visit(this);
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION

			IMPL_TYPE_INFO_RENAME(cpp_parser::CppTypeOrExpr, cpp_parser::CppTypeOrExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppTypeOrExpr::IVisitor, cpp_parser::CppTypeOrExpr::IVisitor)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppExprOnly, cpp_parser::CppExprOnly)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppExprOnly::IVisitor, cpp_parser::CppExprOnly::IVisitor)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppTypeOnly, cpp_parser::CppTypeOnly)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppTypeOnly::IVisitor, cpp_parser::CppTypeOnly::IVisitor)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppNameKinds, cpp_parser::CppNameKinds)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppIdentifier, cpp_parser::CppIdentifier)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppIdentifier::IVisitor, cpp_parser::CppIdentifier::IVisitor)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppNameIdentifier, cpp_parser::CppNameIdentifier)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppOperators, cpp_parser::CppOperators)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppOperatorIdentifier, cpp_parser::CppOperatorIdentifier)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppGenericArgument, cpp_parser::CppGenericArgument)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppGenericArguments, cpp_parser::CppGenericArguments)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppQualifiedNameKinds, cpp_parser::CppQualifiedNameKinds)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppQualifiedName, cpp_parser::CppQualifiedName)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppPrimitiveExprLiteralKinds, cpp_parser::CppPrimitiveExprLiteralKinds)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppPrimitiveExprLiteral, cpp_parser::CppPrimitiveExprLiteral)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppNumericExprLiteralKinds, cpp_parser::CppNumericExprLiteralKinds)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppNumericExprLiteral, cpp_parser::CppNumericExprLiteral)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppStringLiteralKinds, cpp_parser::CppStringLiteralKinds)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppStringLiteralFragment, cpp_parser::CppStringLiteralFragment)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppStringLiteral, cpp_parser::CppStringLiteral)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppParenthesisExpr, cpp_parser::CppParenthesisExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppBraceExpr, cpp_parser::CppBraceExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppCastExpr, cpp_parser::CppCastExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppSysFuncExpr, cpp_parser::CppSysFuncExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppOperatorScope, cpp_parser::CppOperatorScope)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppSizeofExpr, cpp_parser::CppSizeofExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppOperatorArray, cpp_parser::CppOperatorArray)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppDeleteExpr, cpp_parser::CppDeleteExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppOperatorInit, cpp_parser::CppOperatorInit)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppNewExpr, cpp_parser::CppNewExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppPrefixUnaryExpr, cpp_parser::CppPrefixUnaryExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppPostfixUnaryExpr, cpp_parser::CppPostfixUnaryExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppIndexExpr, cpp_parser::CppIndexExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppCallExpr, cpp_parser::CppCallExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppBinaryExpr, cpp_parser::CppBinaryExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppIfExpr, cpp_parser::CppIfExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppThrowExpr, cpp_parser::CppThrowExpr)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppPrimitiveTypeKinds, cpp_parser::CppPrimitiveTypeKinds)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppPrimitiveType, cpp_parser::CppPrimitiveType)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppConstType, cpp_parser::CppConstType)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppVolatileType, cpp_parser::CppVolatileType)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppAdvancedTypeKinds, cpp_parser::CppAdvancedTypeKinds)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppAdvancedType, cpp_parser::CppAdvancedType)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppDeclaratorKeyword, cpp_parser::CppDeclaratorKeyword)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppFunctionDeclarator, cpp_parser::CppFunctionDeclarator)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppArrayDeclarator, cpp_parser::CppArrayDeclarator)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppDeclarator, cpp_parser::CppDeclarator)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppDeclaratorType, cpp_parser::CppDeclaratorType)
			IMPL_TYPE_INFO_RENAME(cpp_parser::CppFile, cpp_parser::CppFile)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_CLASS_MEMBER(cpp_parser::CppTypeOrExpr)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(cpp_parser::CppTypeOrExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppExprOnly)
				CLASS_MEMBER_BASE(cpp_parser::CppTypeOrExpr)

			END_CLASS_MEMBER(cpp_parser::CppExprOnly)

			BEGIN_CLASS_MEMBER(cpp_parser::CppTypeOnly)
				CLASS_MEMBER_BASE(cpp_parser::CppTypeOrExpr)

			END_CLASS_MEMBER(cpp_parser::CppTypeOnly)

			BEGIN_ENUM_ITEM(cpp_parser::CppNameKinds)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppNameKinds)
				ENUM_NAMESPACE_ITEM(Normal)
				ENUM_NAMESPACE_ITEM(Enum)
				ENUM_NAMESPACE_ITEM(EnumClass)
				ENUM_NAMESPACE_ITEM(Class)
				ENUM_NAMESPACE_ITEM(Struct)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Dtor)
				ENUM_NAMESPACE_ITEM(UserDefinedLiteral)
			END_ENUM_ITEM(cpp_parser::CppNameKinds)

			BEGIN_CLASS_MEMBER(cpp_parser::CppIdentifier)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(cpp_parser::CppIdentifier)

			BEGIN_CLASS_MEMBER(cpp_parser::CppNameIdentifier)
				CLASS_MEMBER_BASE(cpp_parser::CppIdentifier)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppNameIdentifier>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(cpp_parser::CppNameIdentifier)

			BEGIN_ENUM_ITEM(cpp_parser::CppOperators)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppOperators)
				ENUM_NAMESPACE_ITEM(New)
				ENUM_NAMESPACE_ITEM(NewArray)
				ENUM_NAMESPACE_ITEM(Delete)
				ENUM_NAMESPACE_ITEM(DeleteArray)
				ENUM_NAMESPACE_ITEM(Comma)
				ENUM_NAMESPACE_ITEM(RoundBracket)
				ENUM_NAMESPACE_ITEM(Parantheses)
				ENUM_NAMESPACE_ITEM(Bracket)
				ENUM_NAMESPACE_ITEM(PointerDeref)
				ENUM_NAMESPACE_ITEM(Pointer)
				ENUM_NAMESPACE_ITEM(MemberDeref)
				ENUM_NAMESPACE_ITEM(Member)
				ENUM_NAMESPACE_ITEM(EQ)
				ENUM_NAMESPACE_ITEM(NE)
				ENUM_NAMESPACE_ITEM(LT)
				ENUM_NAMESPACE_ITEM(LE)
				ENUM_NAMESPACE_ITEM(GT)
				ENUM_NAMESPACE_ITEM(GE)
				ENUM_NAMESPACE_ITEM(Not)
				ENUM_NAMESPACE_ITEM(Revert)
				ENUM_NAMESPACE_ITEM(Xor)
				ENUM_NAMESPACE_ITEM(And)
				ENUM_NAMESPACE_ITEM(BitwiseAnd)
				ENUM_NAMESPACE_ITEM(Or)
				ENUM_NAMESPACE_ITEM(BitwiseOr)
				ENUM_NAMESPACE_ITEM(Mul)
				ENUM_NAMESPACE_ITEM(Div)
				ENUM_NAMESPACE_ITEM(Mod)
				ENUM_NAMESPACE_ITEM(Plus)
				ENUM_NAMESPACE_ITEM(Increase)
				ENUM_NAMESPACE_ITEM(Minus)
				ENUM_NAMESPACE_ITEM(Decrease)
				ENUM_NAMESPACE_ITEM(LeftShift)
				ENUM_NAMESPACE_ITEM(RightShift)
				ENUM_NAMESPACE_ITEM(Assign)
				ENUM_NAMESPACE_ITEM(RevertAssign)
				ENUM_NAMESPACE_ITEM(XorAssign)
				ENUM_NAMESPACE_ITEM(AndAssign)
				ENUM_NAMESPACE_ITEM(OrAssign)
				ENUM_NAMESPACE_ITEM(MulAssign)
				ENUM_NAMESPACE_ITEM(DivAssign)
				ENUM_NAMESPACE_ITEM(ModAssign)
				ENUM_NAMESPACE_ITEM(PlusAssign)
				ENUM_NAMESPACE_ITEM(MinusAssign)
				ENUM_NAMESPACE_ITEM(LeftShiftAssign)
				ENUM_NAMESPACE_ITEM(RightShiftAssign)
			END_ENUM_ITEM(cpp_parser::CppOperators)

			BEGIN_CLASS_MEMBER(cpp_parser::CppOperatorIdentifier)
				CLASS_MEMBER_BASE(cpp_parser::CppIdentifier)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppOperatorIdentifier>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(cpp_parser::CppOperatorIdentifier)

			BEGIN_CLASS_MEMBER(cpp_parser::CppGenericArgument)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppGenericArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(argument)
				CLASS_MEMBER_FIELD(variadic)
			END_CLASS_MEMBER(cpp_parser::CppGenericArgument)

			BEGIN_CLASS_MEMBER(cpp_parser::CppGenericArguments)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppGenericArguments>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(cpp_parser::CppGenericArguments)

			BEGIN_ENUM_ITEM(cpp_parser::CppQualifiedNameKinds)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppQualifiedNameKinds)
				ENUM_NAMESPACE_ITEM(Root)
				ENUM_NAMESPACE_ITEM(Context)
				ENUM_NAMESPACE_ITEM(Decltype)
				ENUM_NAMESPACE_ITEM(DecltypeAuto)
				ENUM_NAMESPACE_ITEM(Member)
			END_ENUM_ITEM(cpp_parser::CppQualifiedNameKinds)

			BEGIN_CLASS_MEMBER(cpp_parser::CppQualifiedName)
				CLASS_MEMBER_BASE(cpp_parser::CppTypeOrExpr)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppQualifiedName>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(expr)
				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(id)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(cpp_parser::CppQualifiedName)

			BEGIN_ENUM_ITEM(cpp_parser::CppPrimitiveExprLiteralKinds)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppPrimitiveExprLiteralKinds)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
				ENUM_NAMESPACE_ITEM(Nullptr)
				ENUM_NAMESPACE_ITEM(This)
				ENUM_NAMESPACE_ITEM(__Nullptr)
			END_ENUM_ITEM(cpp_parser::CppPrimitiveExprLiteralKinds)

			BEGIN_CLASS_MEMBER(cpp_parser::CppPrimitiveExprLiteral)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppPrimitiveExprLiteral>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
			END_CLASS_MEMBER(cpp_parser::CppPrimitiveExprLiteral)

			BEGIN_ENUM_ITEM(cpp_parser::CppNumericExprLiteralKinds)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppNumericExprLiteralKinds)
				ENUM_NAMESPACE_ITEM(Integer)
				ENUM_NAMESPACE_ITEM(Hex)
				ENUM_NAMESPACE_ITEM(Binary)
				ENUM_NAMESPACE_ITEM(Float)
				ENUM_NAMESPACE_ITEM(FloatHex)
				ENUM_NAMESPACE_ITEM(Char)
			END_ENUM_ITEM(cpp_parser::CppNumericExprLiteralKinds)

			BEGIN_CLASS_MEMBER(cpp_parser::CppNumericExprLiteral)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppNumericExprLiteral>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(literal)
			END_CLASS_MEMBER(cpp_parser::CppNumericExprLiteral)

			BEGIN_ENUM_ITEM(cpp_parser::CppStringLiteralKinds)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppStringLiteralKinds)
				ENUM_NAMESPACE_ITEM(String)
				ENUM_NAMESPACE_ITEM(Macro_LPREFIX)
			END_ENUM_ITEM(cpp_parser::CppStringLiteralKinds)

			BEGIN_CLASS_MEMBER(cpp_parser::CppStringLiteralFragment)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppStringLiteralFragment>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(literal)
			END_CLASS_MEMBER(cpp_parser::CppStringLiteralFragment)

			BEGIN_CLASS_MEMBER(cpp_parser::CppStringLiteral)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppStringLiteral>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(fragments)
			END_CLASS_MEMBER(cpp_parser::CppStringLiteral)

			BEGIN_CLASS_MEMBER(cpp_parser::CppParenthesisExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppParenthesisExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expr)
			END_CLASS_MEMBER(cpp_parser::CppParenthesisExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppBraceExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppBraceExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(cpp_parser::CppBraceExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppCastExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppCastExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(keyword)
				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(expr)
			END_CLASS_MEMBER(cpp_parser::CppCastExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppSysFuncExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppSysFuncExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(keyword)
				CLASS_MEMBER_FIELD(variadic)
				CLASS_MEMBER_FIELD(argument)
			END_CLASS_MEMBER(cpp_parser::CppSysFuncExpr)

			BEGIN_ENUM_ITEM(cpp_parser::CppOperatorScope)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppOperatorScope)
				ENUM_NAMESPACE_ITEM(Root)
				ENUM_NAMESPACE_ITEM(Context)
			END_ENUM_ITEM(cpp_parser::CppOperatorScope)

			BEGIN_CLASS_MEMBER(cpp_parser::CppSizeofExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppSizeofExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(argument)
				CLASS_MEMBER_FIELD(variadic)
			END_CLASS_MEMBER(cpp_parser::CppSizeofExpr)

			BEGIN_ENUM_ITEM(cpp_parser::CppOperatorArray)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppOperatorArray)
				ENUM_NAMESPACE_ITEM(Array)
				ENUM_NAMESPACE_ITEM(NotArray)
			END_ENUM_ITEM(cpp_parser::CppOperatorArray)

			BEGIN_CLASS_MEMBER(cpp_parser::CppDeleteExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppDeleteExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(scope)
				CLASS_MEMBER_FIELD(array)
				CLASS_MEMBER_FIELD(argument)
			END_CLASS_MEMBER(cpp_parser::CppDeleteExpr)

			BEGIN_ENUM_ITEM(cpp_parser::CppOperatorInit)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppOperatorInit)
				ENUM_NAMESPACE_ITEM(None)
				ENUM_NAMESPACE_ITEM(Array)
				ENUM_NAMESPACE_ITEM(Parenthesis)
				ENUM_NAMESPACE_ITEM(Brace)
			END_ENUM_ITEM(cpp_parser::CppOperatorInit)

			BEGIN_CLASS_MEMBER(cpp_parser::CppNewExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppNewExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(scope)
				CLASS_MEMBER_FIELD(init)
				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(placementArguments)
				CLASS_MEMBER_FIELD(initArguments)
			END_CLASS_MEMBER(cpp_parser::CppNewExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppPrefixUnaryExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppPrefixUnaryExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(operand)
			END_CLASS_MEMBER(cpp_parser::CppPrefixUnaryExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppPostfixUnaryExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppPostfixUnaryExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(operand)
			END_CLASS_MEMBER(cpp_parser::CppPostfixUnaryExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppIndexExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppIndexExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(operand)
				CLASS_MEMBER_FIELD(index)
			END_CLASS_MEMBER(cpp_parser::CppIndexExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppCallExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppCallExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(operand)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(cpp_parser::CppCallExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppBinaryExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppBinaryExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(left)
				CLASS_MEMBER_FIELD(right)
			END_CLASS_MEMBER(cpp_parser::CppBinaryExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppIfExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppIfExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(condition)
				CLASS_MEMBER_FIELD(trueBranch)
				CLASS_MEMBER_FIELD(falseBranch)
			END_CLASS_MEMBER(cpp_parser::CppIfExpr)

			BEGIN_CLASS_MEMBER(cpp_parser::CppThrowExpr)
				CLASS_MEMBER_BASE(cpp_parser::CppExprOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppThrowExpr>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(argument)
			END_CLASS_MEMBER(cpp_parser::CppThrowExpr)

			BEGIN_ENUM_ITEM(cpp_parser::CppPrimitiveTypeKinds)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppPrimitiveTypeKinds)
				ENUM_NAMESPACE_ITEM(Neutral)
				ENUM_NAMESPACE_ITEM(Signed)
				ENUM_NAMESPACE_ITEM(Unsigned)
			END_ENUM_ITEM(cpp_parser::CppPrimitiveTypeKinds)

			BEGIN_CLASS_MEMBER(cpp_parser::CppPrimitiveType)
				CLASS_MEMBER_BASE(cpp_parser::CppTypeOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppPrimitiveType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(literal1)
				CLASS_MEMBER_FIELD(literal2)
			END_CLASS_MEMBER(cpp_parser::CppPrimitiveType)

			BEGIN_CLASS_MEMBER(cpp_parser::CppConstType)
				CLASS_MEMBER_BASE(cpp_parser::CppTypeOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppConstType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(cpp_parser::CppConstType)

			BEGIN_CLASS_MEMBER(cpp_parser::CppVolatileType)
				CLASS_MEMBER_BASE(cpp_parser::CppTypeOnly)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppVolatileType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(cpp_parser::CppVolatileType)

			BEGIN_ENUM_ITEM(cpp_parser::CppAdvancedTypeKinds)
				ENUM_ITEM_NAMESPACE(cpp_parser::CppAdvancedTypeKinds)
				ENUM_NAMESPACE_ITEM(LRef)
				ENUM_NAMESPACE_ITEM(RRef)
				ENUM_NAMESPACE_ITEM(Const)
				ENUM_NAMESPACE_ITEM(Volatile)
				ENUM_NAMESPACE_ITEM(Pointer)
				ENUM_NAMESPACE_ITEM(Pointer32)
				ENUM_NAMESPACE_ITEM(Pointer64)
				ENUM_NAMESPACE_ITEM(Member)
				ENUM_NAMESPACE_ITEM(AlignAs)
			END_ENUM_ITEM(cpp_parser::CppAdvancedTypeKinds)

			BEGIN_CLASS_MEMBER(cpp_parser::CppAdvancedType)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppAdvancedType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(argument)
			END_CLASS_MEMBER(cpp_parser::CppAdvancedType)

			BEGIN_CLASS_MEMBER(cpp_parser::CppDeclaratorKeyword)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppDeclaratorKeyword>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(keyword)
			END_CLASS_MEMBER(cpp_parser::CppDeclaratorKeyword)

			BEGIN_CLASS_MEMBER(cpp_parser::CppFunctionDeclarator)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppFunctionDeclarator>(), NO_PARAMETER)

			END_CLASS_MEMBER(cpp_parser::CppFunctionDeclarator)

			BEGIN_CLASS_MEMBER(cpp_parser::CppArrayDeclarator)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppArrayDeclarator>(), NO_PARAMETER)

			END_CLASS_MEMBER(cpp_parser::CppArrayDeclarator)

			BEGIN_CLASS_MEMBER(cpp_parser::CppDeclarator)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppDeclarator>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(keywords)
				CLASS_MEMBER_FIELD(advancedTypes)
				CLASS_MEMBER_FIELD(id)
				CLASS_MEMBER_FIELD(innerDeclarator)
				CLASS_MEMBER_FIELD(funcDecl)
				CLASS_MEMBER_FIELD(arrayDecls)
			END_CLASS_MEMBER(cpp_parser::CppDeclarator)

			BEGIN_CLASS_MEMBER(cpp_parser::CppDeclaratorType)
				CLASS_MEMBER_BASE(cpp_parser::CppTypeOrExpr)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppDeclaratorType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(declarator)
			END_CLASS_MEMBER(cpp_parser::CppDeclaratorType)

			BEGIN_CLASS_MEMBER(cpp_parser::CppFile)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<cpp_parser::CppFile>(), NO_PARAMETER)

			END_CLASS_MEMBER(cpp_parser::CppFile)

			BEGIN_INTERFACE_MEMBER(cpp_parser::CppTypeOrExpr::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppTypeOrExpr::IVisitor::*)(cpp_parser::CppExprOnly* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppTypeOrExpr::IVisitor::*)(cpp_parser::CppTypeOnly* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppTypeOrExpr::IVisitor::*)(cpp_parser::CppQualifiedName* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppTypeOrExpr::IVisitor::*)(cpp_parser::CppDeclaratorType* node))
			END_INTERFACE_MEMBER(cpp_parser::CppTypeOrExpr)

			BEGIN_INTERFACE_MEMBER(cpp_parser::CppExprOnly::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppPrimitiveExprLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppNumericExprLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppStringLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppParenthesisExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppBraceExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppCastExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppSysFuncExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppSizeofExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppDeleteExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppNewExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppPrefixUnaryExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppPostfixUnaryExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppIndexExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppCallExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppBinaryExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppIfExpr* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppExprOnly::IVisitor::*)(cpp_parser::CppThrowExpr* node))
			END_INTERFACE_MEMBER(cpp_parser::CppExprOnly)

			BEGIN_INTERFACE_MEMBER(cpp_parser::CppTypeOnly::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppTypeOnly::IVisitor::*)(cpp_parser::CppPrimitiveType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppTypeOnly::IVisitor::*)(cpp_parser::CppConstType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppTypeOnly::IVisitor::*)(cpp_parser::CppVolatileType* node))
			END_INTERFACE_MEMBER(cpp_parser::CppTypeOnly)

			BEGIN_INTERFACE_MEMBER(cpp_parser::CppIdentifier::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppIdentifier::IVisitor::*)(cpp_parser::CppNameIdentifier* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(cpp_parser::CppIdentifier::IVisitor::*)(cpp_parser::CppOperatorIdentifier* node))
			END_INTERFACE_MEMBER(cpp_parser::CppIdentifier)

#endif

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
			class CppAstTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(cpp_parser::CppTypeOrExpr)
					ADD_TYPE_INFO(cpp_parser::CppTypeOrExpr::IVisitor)
					ADD_TYPE_INFO(cpp_parser::CppExprOnly)
					ADD_TYPE_INFO(cpp_parser::CppExprOnly::IVisitor)
					ADD_TYPE_INFO(cpp_parser::CppTypeOnly)
					ADD_TYPE_INFO(cpp_parser::CppTypeOnly::IVisitor)
					ADD_TYPE_INFO(cpp_parser::CppNameKinds)
					ADD_TYPE_INFO(cpp_parser::CppIdentifier)
					ADD_TYPE_INFO(cpp_parser::CppIdentifier::IVisitor)
					ADD_TYPE_INFO(cpp_parser::CppNameIdentifier)
					ADD_TYPE_INFO(cpp_parser::CppOperators)
					ADD_TYPE_INFO(cpp_parser::CppOperatorIdentifier)
					ADD_TYPE_INFO(cpp_parser::CppGenericArgument)
					ADD_TYPE_INFO(cpp_parser::CppGenericArguments)
					ADD_TYPE_INFO(cpp_parser::CppQualifiedNameKinds)
					ADD_TYPE_INFO(cpp_parser::CppQualifiedName)
					ADD_TYPE_INFO(cpp_parser::CppPrimitiveExprLiteralKinds)
					ADD_TYPE_INFO(cpp_parser::CppPrimitiveExprLiteral)
					ADD_TYPE_INFO(cpp_parser::CppNumericExprLiteralKinds)
					ADD_TYPE_INFO(cpp_parser::CppNumericExprLiteral)
					ADD_TYPE_INFO(cpp_parser::CppStringLiteralKinds)
					ADD_TYPE_INFO(cpp_parser::CppStringLiteralFragment)
					ADD_TYPE_INFO(cpp_parser::CppStringLiteral)
					ADD_TYPE_INFO(cpp_parser::CppParenthesisExpr)
					ADD_TYPE_INFO(cpp_parser::CppBraceExpr)
					ADD_TYPE_INFO(cpp_parser::CppCastExpr)
					ADD_TYPE_INFO(cpp_parser::CppSysFuncExpr)
					ADD_TYPE_INFO(cpp_parser::CppOperatorScope)
					ADD_TYPE_INFO(cpp_parser::CppSizeofExpr)
					ADD_TYPE_INFO(cpp_parser::CppOperatorArray)
					ADD_TYPE_INFO(cpp_parser::CppDeleteExpr)
					ADD_TYPE_INFO(cpp_parser::CppOperatorInit)
					ADD_TYPE_INFO(cpp_parser::CppNewExpr)
					ADD_TYPE_INFO(cpp_parser::CppPrefixUnaryExpr)
					ADD_TYPE_INFO(cpp_parser::CppPostfixUnaryExpr)
					ADD_TYPE_INFO(cpp_parser::CppIndexExpr)
					ADD_TYPE_INFO(cpp_parser::CppCallExpr)
					ADD_TYPE_INFO(cpp_parser::CppBinaryExpr)
					ADD_TYPE_INFO(cpp_parser::CppIfExpr)
					ADD_TYPE_INFO(cpp_parser::CppThrowExpr)
					ADD_TYPE_INFO(cpp_parser::CppPrimitiveTypeKinds)
					ADD_TYPE_INFO(cpp_parser::CppPrimitiveType)
					ADD_TYPE_INFO(cpp_parser::CppConstType)
					ADD_TYPE_INFO(cpp_parser::CppVolatileType)
					ADD_TYPE_INFO(cpp_parser::CppAdvancedTypeKinds)
					ADD_TYPE_INFO(cpp_parser::CppAdvancedType)
					ADD_TYPE_INFO(cpp_parser::CppDeclaratorKeyword)
					ADD_TYPE_INFO(cpp_parser::CppFunctionDeclarator)
					ADD_TYPE_INFO(cpp_parser::CppArrayDeclarator)
					ADD_TYPE_INFO(cpp_parser::CppDeclarator)
					ADD_TYPE_INFO(cpp_parser::CppDeclaratorType)
					ADD_TYPE_INFO(cpp_parser::CppFile)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif
#endif

			bool CppAstLoadTypes()
			{
#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
				if (auto manager = GetGlobalTypeManager())
				{
					Ptr<ITypeLoader> loader = new CppAstTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
