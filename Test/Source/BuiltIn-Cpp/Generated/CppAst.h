/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_AST
#define VCZH_PARSER2_BUILTIN_CPP_AST_AST

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace cpp_parser
{
	class CppAdvancedType;
	class CppBinaryExpr;
	class CppBlockStat;
	class CppBraceExpr;
	class CppBreakStat;
	class CppCallExpr;
	class CppCaseStat;
	class CppCastExpr;
	class CppConstType;
	class CppContinueStat;
	class CppDeclaration;
	class CppDeclarator;
	class CppDeclaratorArrayPart;
	class CppDeclaratorFunctionPart;
	class CppDeclaratorKeyword;
	class CppDeclaratorType;
	class CppDefaultStat;
	class CppDeleteExpr;
	class CppEmptyStat;
	class CppExprOnly;
	class CppExprStat;
	class CppFile;
	class CppFunctionKeyword;
	class CppGenericArgument;
	class CppGenericArguments;
	class CppGotoStat;
	class CppIdentifier;
	class CppIfExpr;
	class CppIndexExpr;
	class CppLabelStat;
	class CppNameIdentifier;
	class CppNewExpr;
	class CppNumericExprLiteral;
	class CppOperatorIdentifier;
	class CppParenthesisExpr;
	class CppPostfixUnaryExpr;
	class CppPrefixUnaryExpr;
	class CppPrimitiveExprLiteral;
	class CppPrimitiveType;
	class CppQualifiedName;
	class CppReturnStat;
	class CppSingleVarDeclaration;
	class CppSizeofExpr;
	class CppStatement;
	class CppStaticAssertStat;
	class CppStringLiteral;
	class CppStringLiteralFragment;
	class CppSysFuncExpr;
	class CppThrowExpr;
	class CppTypeOnly;
	class CppTypeOrExpr;
	class CppTypeOrExprOrOthers;
	class CppVarBraceInit;
	class CppVarInit;
	class CppVarParanthesisInit;
	class CppVarValueInit;
	class CppVariadicExpr;
	class CppVolatileType;
	class Cpp__LeaveStat;

	enum class CppNameKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Normal = 0,
		Enum = 1,
		EnumClass = 2,
		Class = 3,
		Struct = 4,
		Union = 5,
		Dtor = 6,
		UserDefinedLiteral = 7,
	};

	enum class CppOperators
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		New = 0,
		NewArray = 1,
		Delete = 2,
		DeleteArray = 3,
		Comma = 4,
		RoundBracket = 5,
		Parantheses = 6,
		Bracket = 7,
		PointerDeref = 8,
		Pointer = 9,
		MemberDeref = 10,
		Member = 11,
		EQ = 12,
		NE = 13,
		LT = 14,
		LE = 15,
		GT = 16,
		GE = 17,
		Not = 18,
		Revert = 19,
		Xor = 20,
		And = 21,
		BitwiseAnd = 22,
		Or = 23,
		BitwiseOr = 24,
		Mul = 25,
		Div = 26,
		Mod = 27,
		Plus = 28,
		Increase = 29,
		Minus = 30,
		Decrease = 31,
		LeftShift = 32,
		RightShift = 33,
		Assign = 34,
		RevertAssign = 35,
		XorAssign = 36,
		AndAssign = 37,
		OrAssign = 38,
		MulAssign = 39,
		DivAssign = 40,
		ModAssign = 41,
		PlusAssign = 42,
		MinusAssign = 43,
		LeftShiftAssign = 44,
		RightShiftAssign = 45,
	};

	enum class CppQualifiedNameKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Root = 0,
		Context = 1,
		Auto = 2,
		Decltype = 3,
		DecltypeAuto = 4,
		Member = 5,
	};

	enum class CppPrimitiveExprLiteralKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		True = 0,
		False = 1,
		Nullptr = 2,
		This = 3,
		__Nullptr = 4,
	};

	enum class CppNumericExprLiteralKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Integer = 0,
		Hex = 1,
		Binary = 2,
		Float = 3,
		FloatHex = 4,
		Char = 5,
	};

	enum class CppStringLiteralKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		String = 0,
		Macro_LPREFIX = 1,
	};

	enum class CppOperatorScope
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Root = 0,
		Context = 1,
	};

	enum class CppOperatorArray
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Array = 0,
		NotArray = 1,
	};

	enum class CppCallKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Parenthesis = 0,
		Brace = 1,
	};

	enum class CppPrimitiveTypeKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Neutral = 0,
		Signed = 1,
		Unsigned = 2,
	};

	enum class CppAdvancedTypeKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		LRef = 0,
		RRef = 1,
		Const = 2,
		Volatile = 3,
		Pointer = 4,
		Pointer32 = 5,
		Pointer64 = 6,
		Member = 7,
		AlignAs = 8,
	};

	class CppTypeOrExprOrOthers abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<CppTypeOrExprOrOthers>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppDeclaration* node) = 0;
			virtual void Visit(CppTypeOrExpr* node) = 0;
			virtual void Visit(CppGenericArgument* node) = 0;
		};

		virtual void Accept(CppTypeOrExprOrOthers::IVisitor* visitor) = 0;

	};

	class CppDeclaration abstract : public CppTypeOrExprOrOthers, vl::reflection::Description<CppDeclaration>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppSingleVarDeclaration* node) = 0;
		};

		virtual void Accept(CppDeclaration::IVisitor* visitor) = 0;


		void Accept(CppTypeOrExprOrOthers::IVisitor* visitor) override;
	};

	class CppTypeOrExpr abstract : public CppTypeOrExprOrOthers, vl::reflection::Description<CppTypeOrExpr>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppExprOnly* node) = 0;
			virtual void Visit(CppTypeOnly* node) = 0;
			virtual void Visit(CppQualifiedName* node) = 0;
			virtual void Visit(CppDeclaratorType* node) = 0;
		};

		virtual void Accept(CppTypeOrExpr::IVisitor* visitor) = 0;


		void Accept(CppTypeOrExprOrOthers::IVisitor* visitor) override;
	};

	class CppExprOnly abstract : public CppTypeOrExpr, vl::reflection::Description<CppExprOnly>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppPrimitiveExprLiteral* node) = 0;
			virtual void Visit(CppNumericExprLiteral* node) = 0;
			virtual void Visit(CppStringLiteral* node) = 0;
			virtual void Visit(CppParenthesisExpr* node) = 0;
			virtual void Visit(CppBraceExpr* node) = 0;
			virtual void Visit(CppCastExpr* node) = 0;
			virtual void Visit(CppSysFuncExpr* node) = 0;
			virtual void Visit(CppSizeofExpr* node) = 0;
			virtual void Visit(CppDeleteExpr* node) = 0;
			virtual void Visit(CppNewExpr* node) = 0;
			virtual void Visit(CppPrefixUnaryExpr* node) = 0;
			virtual void Visit(CppPostfixUnaryExpr* node) = 0;
			virtual void Visit(CppIndexExpr* node) = 0;
			virtual void Visit(CppCallExpr* node) = 0;
			virtual void Visit(CppBinaryExpr* node) = 0;
			virtual void Visit(CppIfExpr* node) = 0;
			virtual void Visit(CppThrowExpr* node) = 0;
			virtual void Visit(CppVariadicExpr* node) = 0;
		};

		virtual void Accept(CppExprOnly::IVisitor* visitor) = 0;


		void Accept(CppTypeOrExpr::IVisitor* visitor) override;
	};

	class CppTypeOnly abstract : public CppTypeOrExpr, vl::reflection::Description<CppTypeOnly>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppPrimitiveType* node) = 0;
			virtual void Visit(CppConstType* node) = 0;
			virtual void Visit(CppVolatileType* node) = 0;
		};

		virtual void Accept(CppTypeOnly::IVisitor* visitor) = 0;


		void Accept(CppTypeOrExpr::IVisitor* visitor) override;
	};

	class CppIdentifier abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<CppIdentifier>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppNameIdentifier* node) = 0;
			virtual void Visit(CppOperatorIdentifier* node) = 0;
		};

		virtual void Accept(CppIdentifier::IVisitor* visitor) = 0;

	};

	class CppNameIdentifier : public CppIdentifier, vl::reflection::Description<CppNameIdentifier>
	{
	public:
		CppNameKinds kind = CppNameKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::glr::ParsingToken name;

		void Accept(CppIdentifier::IVisitor* visitor) override;
	};

	class CppOperatorIdentifier : public CppIdentifier, vl::reflection::Description<CppOperatorIdentifier>
	{
	public:
		CppOperators op = CppOperators::UNDEFINED_ENUM_ITEM_VALUE;

		void Accept(CppIdentifier::IVisitor* visitor) override;
	};

	class CppGenericArgument : public CppTypeOrExprOrOthers, vl::reflection::Description<CppGenericArgument>
	{
	public:
		vl::Ptr<CppTypeOrExpr> argument;
		vl::glr::ParsingToken variadic;

		void Accept(CppTypeOrExprOrOthers::IVisitor* visitor) override;
	};

	class CppGenericArguments : public vl::glr::ParsingAstBase, vl::reflection::Description<CppGenericArguments>
	{
	public:
		vl::collections::List<vl::Ptr<CppTypeOrExprOrOthers>> arguments;
	};

	class CppQualifiedName : public CppTypeOrExpr, vl::reflection::Description<CppQualifiedName>
	{
	public:
		CppQualifiedNameKinds kind = CppQualifiedNameKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<CppTypeOrExpr> expr;
		vl::Ptr<CppQualifiedName> parent;
		vl::Ptr<CppIdentifier> id;
		vl::Ptr<CppGenericArguments> arguments;

		void Accept(CppTypeOrExpr::IVisitor* visitor) override;
	};

	class CppPrimitiveExprLiteral : public CppExprOnly, vl::reflection::Description<CppPrimitiveExprLiteral>
	{
	public:
		CppPrimitiveExprLiteralKinds kind = CppPrimitiveExprLiteralKinds::UNDEFINED_ENUM_ITEM_VALUE;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppNumericExprLiteral : public CppExprOnly, vl::reflection::Description<CppNumericExprLiteral>
	{
	public:
		CppNumericExprLiteralKinds kind = CppNumericExprLiteralKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::glr::ParsingToken literal;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppStringLiteralFragment : public vl::glr::ParsingAstBase, vl::reflection::Description<CppStringLiteralFragment>
	{
	public:
		CppStringLiteralKinds kind = CppStringLiteralKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::glr::ParsingToken literal;
	};

	class CppStringLiteral : public CppExprOnly, vl::reflection::Description<CppStringLiteral>
	{
	public:
		vl::collections::List<vl::Ptr<CppStringLiteralFragment>> fragments;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppParenthesisExpr : public CppExprOnly, vl::reflection::Description<CppParenthesisExpr>
	{
	public:
		vl::Ptr<CppTypeOrExpr> expr;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppBraceExpr : public CppExprOnly, vl::reflection::Description<CppBraceExpr>
	{
	public:
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> arguments;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppCastExpr : public CppExprOnly, vl::reflection::Description<CppCastExpr>
	{
	public:
		vl::glr::ParsingToken keyword;
		vl::Ptr<CppTypeOrExpr> type;
		vl::Ptr<CppTypeOrExpr> expr;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppSysFuncExpr : public CppExprOnly, vl::reflection::Description<CppSysFuncExpr>
	{
	public:
		vl::glr::ParsingToken keyword;
		vl::glr::ParsingToken variadic;
		vl::Ptr<CppTypeOrExpr> argument;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppSizeofExpr : public CppExprOnly, vl::reflection::Description<CppSizeofExpr>
	{
	public:
		vl::Ptr<CppTypeOrExpr> argument;
		vl::glr::ParsingToken variadic;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppDeleteExpr : public CppExprOnly, vl::reflection::Description<CppDeleteExpr>
	{
	public:
		CppOperatorScope scope = CppOperatorScope::UNDEFINED_ENUM_ITEM_VALUE;
		CppOperatorArray array = CppOperatorArray::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<CppTypeOrExpr> argument;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppNewExpr : public CppExprOnly, vl::reflection::Description<CppNewExpr>
	{
	public:
		CppOperatorScope scope = CppOperatorScope::UNDEFINED_ENUM_ITEM_VALUE;
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> type;
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> placementArguments;
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> arrayArguments;
		vl::Ptr<CppVarInit> init;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppPrefixUnaryExpr : public CppExprOnly, vl::reflection::Description<CppPrefixUnaryExpr>
	{
	public:
		CppOperators op = CppOperators::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<CppTypeOrExpr> operand;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppPostfixUnaryExpr : public CppExprOnly, vl::reflection::Description<CppPostfixUnaryExpr>
	{
	public:
		CppOperators op = CppOperators::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<CppTypeOrExpr> operand;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppIndexExpr : public CppExprOnly, vl::reflection::Description<CppIndexExpr>
	{
	public:
		vl::Ptr<CppTypeOrExpr> operand;
		vl::Ptr<CppTypeOrExpr> index;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppCallExpr : public CppExprOnly, vl::reflection::Description<CppCallExpr>
	{
	public:
		CppCallKinds kind = CppCallKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<CppTypeOrExpr> operand;
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> arguments;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppBinaryExpr : public CppExprOnly, vl::reflection::Description<CppBinaryExpr>
	{
	public:
		CppOperators op = CppOperators::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<CppTypeOrExpr> left;
		vl::Ptr<CppTypeOrExpr> right;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppIfExpr : public CppExprOnly, vl::reflection::Description<CppIfExpr>
	{
	public:
		vl::Ptr<CppTypeOrExpr> condition;
		vl::Ptr<CppTypeOrExpr> trueBranch;
		vl::Ptr<CppTypeOrExpr> falseBranch;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppThrowExpr : public CppExprOnly, vl::reflection::Description<CppThrowExpr>
	{
	public:
		vl::Ptr<CppTypeOrExpr> argument;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppVariadicExpr : public CppExprOnly, vl::reflection::Description<CppVariadicExpr>
	{
	public:
		vl::Ptr<CppTypeOrExpr> operand;
		vl::glr::ParsingToken variadic;

		void Accept(CppExprOnly::IVisitor* visitor) override;
	};

	class CppPrimitiveType : public CppTypeOnly, vl::reflection::Description<CppPrimitiveType>
	{
	public:
		CppPrimitiveTypeKinds kind = CppPrimitiveTypeKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::glr::ParsingToken literal1;
		vl::glr::ParsingToken literal2;

		void Accept(CppTypeOnly::IVisitor* visitor) override;
	};

	class CppConstType : public CppTypeOnly, vl::reflection::Description<CppConstType>
	{
	public:
		vl::Ptr<CppTypeOrExpr> type;

		void Accept(CppTypeOnly::IVisitor* visitor) override;
	};

	class CppVolatileType : public CppTypeOnly, vl::reflection::Description<CppVolatileType>
	{
	public:
		vl::Ptr<CppTypeOrExpr> type;

		void Accept(CppTypeOnly::IVisitor* visitor) override;
	};

	class CppAdvancedType : public vl::glr::ParsingAstBase, vl::reflection::Description<CppAdvancedType>
	{
	public:
		CppAdvancedTypeKinds kind = CppAdvancedTypeKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::Ptr<CppTypeOrExpr> argument;
	};

	class CppDeclaratorKeyword : public vl::glr::ParsingAstBase, vl::reflection::Description<CppDeclaratorKeyword>
	{
	public:
		vl::glr::ParsingToken keyword;
	};

	class CppFunctionKeyword : public vl::glr::ParsingAstBase, vl::reflection::Description<CppFunctionKeyword>
	{
	public:
		vl::glr::ParsingToken keyword;
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> arguments;
	};

	class CppDeclaratorFunctionPart : public vl::glr::ParsingAstBase, vl::reflection::Description<CppDeclaratorFunctionPart>
	{
	public:
		vl::collections::List<vl::Ptr<CppTypeOrExprOrOthers>> parameters;
		vl::glr::ParsingToken variadic;
		vl::collections::List<vl::Ptr<CppFunctionKeyword>> keywords;
		vl::Ptr<CppTypeOrExpr> deferredType;
	};

	class CppDeclaratorArrayPart : public vl::glr::ParsingAstBase, vl::reflection::Description<CppDeclaratorArrayPart>
	{
	public:
		vl::Ptr<CppTypeOrExpr> argument;
	};

	class CppDeclarator : public vl::glr::ParsingAstBase, vl::reflection::Description<CppDeclarator>
	{
	public:
		vl::collections::List<vl::Ptr<CppDeclaratorKeyword>> keywords;
		vl::collections::List<vl::Ptr<CppAdvancedType>> advancedTypes;
		vl::glr::ParsingToken variadic;
		vl::Ptr<CppIdentifier> id;
		vl::Ptr<CppDeclarator> innerDeclarator;
		vl::Ptr<CppDeclaratorFunctionPart> funcPart;
		vl::collections::List<vl::Ptr<CppDeclaratorArrayPart>> arrayParts;
	};

	class CppDeclaratorType : public CppTypeOrExpr, vl::reflection::Description<CppDeclaratorType>
	{
	public:
		vl::collections::List<vl::Ptr<CppDeclaratorKeyword>> keywords;
		vl::Ptr<CppTypeOrExpr> type;
		vl::Ptr<CppDeclarator> declarator;

		void Accept(CppTypeOrExpr::IVisitor* visitor) override;
	};

	class CppVarInit abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<CppVarInit>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppVarValueInit* node) = 0;
			virtual void Visit(CppVarParanthesisInit* node) = 0;
			virtual void Visit(CppVarBraceInit* node) = 0;
		};

		virtual void Accept(CppVarInit::IVisitor* visitor) = 0;

	};

	class CppVarValueInit : public CppVarInit, vl::reflection::Description<CppVarValueInit>
	{
	public:
		vl::Ptr<CppTypeOrExpr> expr;

		void Accept(CppVarInit::IVisitor* visitor) override;
	};

	class CppVarParanthesisInit : public CppVarInit, vl::reflection::Description<CppVarParanthesisInit>
	{
	public:
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> arguments;

		void Accept(CppVarInit::IVisitor* visitor) override;
	};

	class CppVarBraceInit : public CppVarInit, vl::reflection::Description<CppVarBraceInit>
	{
	public:
		vl::collections::List<vl::Ptr<CppTypeOrExpr>> arguments;

		void Accept(CppVarInit::IVisitor* visitor) override;
	};

	class CppSingleVarDeclaration : public CppDeclaration, vl::reflection::Description<CppSingleVarDeclaration>
	{
	public:
		vl::collections::List<vl::Ptr<CppDeclaratorKeyword>> keywords;
		vl::Ptr<CppTypeOrExpr> type;
		vl::Ptr<CppDeclarator> declarator;
		vl::Ptr<CppVarInit> init;

		void Accept(CppDeclaration::IVisitor* visitor) override;
	};

	class CppStatement abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<CppStatement>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppEmptyStat* node) = 0;
			virtual void Visit(CppBlockStat* node) = 0;
			virtual void Visit(CppExprStat* node) = 0;
			virtual void Visit(CppBreakStat* node) = 0;
			virtual void Visit(CppContinueStat* node) = 0;
			virtual void Visit(CppReturnStat* node) = 0;
			virtual void Visit(CppLabelStat* node) = 0;
			virtual void Visit(CppGotoStat* node) = 0;
			virtual void Visit(CppCaseStat* node) = 0;
			virtual void Visit(CppDefaultStat* node) = 0;
			virtual void Visit(Cpp__LeaveStat* node) = 0;
			virtual void Visit(CppStaticAssertStat* node) = 0;
		};

		virtual void Accept(CppStatement::IVisitor* visitor) = 0;

	};

	class CppEmptyStat : public CppStatement, vl::reflection::Description<CppEmptyStat>
	{
	public:

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppBlockStat : public CppStatement, vl::reflection::Description<CppBlockStat>
	{
	public:
		vl::collections::List<vl::Ptr<CppStatement>> statements;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppExprStat : public CppStatement, vl::reflection::Description<CppExprStat>
	{
	public:
		vl::Ptr<CppTypeOrExpr> expr;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppBreakStat : public CppStatement, vl::reflection::Description<CppBreakStat>
	{
	public:

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppContinueStat : public CppStatement, vl::reflection::Description<CppContinueStat>
	{
	public:

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppReturnStat : public CppStatement, vl::reflection::Description<CppReturnStat>
	{
	public:
		vl::Ptr<CppTypeOrExpr> expr;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppLabelStat : public CppStatement, vl::reflection::Description<CppLabelStat>
	{
	public:
		vl::glr::ParsingToken label;
		vl::Ptr<CppStatement> stat;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppGotoStat : public CppStatement, vl::reflection::Description<CppGotoStat>
	{
	public:
		vl::glr::ParsingToken label;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppCaseStat : public CppStatement, vl::reflection::Description<CppCaseStat>
	{
	public:
		vl::Ptr<CppTypeOrExpr> expr;
		vl::Ptr<CppStatement> stat;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppDefaultStat : public CppStatement, vl::reflection::Description<CppDefaultStat>
	{
	public:
		vl::Ptr<CppStatement> stat;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class Cpp__LeaveStat : public CppStatement, vl::reflection::Description<Cpp__LeaveStat>
	{
	public:

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppStaticAssertStat : public CppStatement, vl::reflection::Description<CppStaticAssertStat>
	{
	public:
		vl::Ptr<CppTypeOrExpr> expr;
		vl::Ptr<CppTypeOrExpr> message;

		void Accept(CppStatement::IVisitor* visitor) override;
	};

	class CppFile : public vl::glr::ParsingAstBase, vl::reflection::Description<CppFile>
	{
	public:
	};
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			DECL_TYPE_INFO(cpp_parser::CppTypeOrExprOrOthers)
			DECL_TYPE_INFO(cpp_parser::CppTypeOrExprOrOthers::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppDeclaration)
			DECL_TYPE_INFO(cpp_parser::CppDeclaration::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppTypeOrExpr)
			DECL_TYPE_INFO(cpp_parser::CppTypeOrExpr::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppExprOnly)
			DECL_TYPE_INFO(cpp_parser::CppExprOnly::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppTypeOnly)
			DECL_TYPE_INFO(cpp_parser::CppTypeOnly::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppNameKinds)
			DECL_TYPE_INFO(cpp_parser::CppIdentifier)
			DECL_TYPE_INFO(cpp_parser::CppIdentifier::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppNameIdentifier)
			DECL_TYPE_INFO(cpp_parser::CppOperators)
			DECL_TYPE_INFO(cpp_parser::CppOperatorIdentifier)
			DECL_TYPE_INFO(cpp_parser::CppGenericArgument)
			DECL_TYPE_INFO(cpp_parser::CppGenericArguments)
			DECL_TYPE_INFO(cpp_parser::CppQualifiedNameKinds)
			DECL_TYPE_INFO(cpp_parser::CppQualifiedName)
			DECL_TYPE_INFO(cpp_parser::CppPrimitiveExprLiteralKinds)
			DECL_TYPE_INFO(cpp_parser::CppPrimitiveExprLiteral)
			DECL_TYPE_INFO(cpp_parser::CppNumericExprLiteralKinds)
			DECL_TYPE_INFO(cpp_parser::CppNumericExprLiteral)
			DECL_TYPE_INFO(cpp_parser::CppStringLiteralKinds)
			DECL_TYPE_INFO(cpp_parser::CppStringLiteralFragment)
			DECL_TYPE_INFO(cpp_parser::CppStringLiteral)
			DECL_TYPE_INFO(cpp_parser::CppParenthesisExpr)
			DECL_TYPE_INFO(cpp_parser::CppBraceExpr)
			DECL_TYPE_INFO(cpp_parser::CppCastExpr)
			DECL_TYPE_INFO(cpp_parser::CppSysFuncExpr)
			DECL_TYPE_INFO(cpp_parser::CppOperatorScope)
			DECL_TYPE_INFO(cpp_parser::CppSizeofExpr)
			DECL_TYPE_INFO(cpp_parser::CppOperatorArray)
			DECL_TYPE_INFO(cpp_parser::CppDeleteExpr)
			DECL_TYPE_INFO(cpp_parser::CppNewExpr)
			DECL_TYPE_INFO(cpp_parser::CppPrefixUnaryExpr)
			DECL_TYPE_INFO(cpp_parser::CppPostfixUnaryExpr)
			DECL_TYPE_INFO(cpp_parser::CppIndexExpr)
			DECL_TYPE_INFO(cpp_parser::CppCallKinds)
			DECL_TYPE_INFO(cpp_parser::CppCallExpr)
			DECL_TYPE_INFO(cpp_parser::CppBinaryExpr)
			DECL_TYPE_INFO(cpp_parser::CppIfExpr)
			DECL_TYPE_INFO(cpp_parser::CppThrowExpr)
			DECL_TYPE_INFO(cpp_parser::CppVariadicExpr)
			DECL_TYPE_INFO(cpp_parser::CppPrimitiveTypeKinds)
			DECL_TYPE_INFO(cpp_parser::CppPrimitiveType)
			DECL_TYPE_INFO(cpp_parser::CppConstType)
			DECL_TYPE_INFO(cpp_parser::CppVolatileType)
			DECL_TYPE_INFO(cpp_parser::CppAdvancedTypeKinds)
			DECL_TYPE_INFO(cpp_parser::CppAdvancedType)
			DECL_TYPE_INFO(cpp_parser::CppDeclaratorKeyword)
			DECL_TYPE_INFO(cpp_parser::CppFunctionKeyword)
			DECL_TYPE_INFO(cpp_parser::CppDeclaratorFunctionPart)
			DECL_TYPE_INFO(cpp_parser::CppDeclaratorArrayPart)
			DECL_TYPE_INFO(cpp_parser::CppDeclarator)
			DECL_TYPE_INFO(cpp_parser::CppDeclaratorType)
			DECL_TYPE_INFO(cpp_parser::CppVarInit)
			DECL_TYPE_INFO(cpp_parser::CppVarInit::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppVarValueInit)
			DECL_TYPE_INFO(cpp_parser::CppVarParanthesisInit)
			DECL_TYPE_INFO(cpp_parser::CppVarBraceInit)
			DECL_TYPE_INFO(cpp_parser::CppSingleVarDeclaration)
			DECL_TYPE_INFO(cpp_parser::CppStatement)
			DECL_TYPE_INFO(cpp_parser::CppStatement::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppEmptyStat)
			DECL_TYPE_INFO(cpp_parser::CppBlockStat)
			DECL_TYPE_INFO(cpp_parser::CppExprStat)
			DECL_TYPE_INFO(cpp_parser::CppBreakStat)
			DECL_TYPE_INFO(cpp_parser::CppContinueStat)
			DECL_TYPE_INFO(cpp_parser::CppReturnStat)
			DECL_TYPE_INFO(cpp_parser::CppLabelStat)
			DECL_TYPE_INFO(cpp_parser::CppGotoStat)
			DECL_TYPE_INFO(cpp_parser::CppCaseStat)
			DECL_TYPE_INFO(cpp_parser::CppDefaultStat)
			DECL_TYPE_INFO(cpp_parser::Cpp__LeaveStat)
			DECL_TYPE_INFO(cpp_parser::CppStaticAssertStat)
			DECL_TYPE_INFO(cpp_parser::CppFile)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppTypeOrExprOrOthers::IVisitor)
				void Visit(cpp_parser::CppDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppTypeOrExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppGenericArgument* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppTypeOrExprOrOthers::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppDeclaration::IVisitor)
				void Visit(cpp_parser::CppSingleVarDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppDeclaration::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppTypeOrExpr::IVisitor)
				void Visit(cpp_parser::CppExprOnly* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppTypeOnly* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppQualifiedName* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppDeclaratorType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppTypeOrExpr::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppExprOnly::IVisitor)
				void Visit(cpp_parser::CppPrimitiveExprLiteral* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppNumericExprLiteral* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppStringLiteral* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppParenthesisExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppBraceExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppCastExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppSysFuncExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppSizeofExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppDeleteExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppNewExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppPrefixUnaryExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppPostfixUnaryExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppIndexExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppCallExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppBinaryExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppIfExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppThrowExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppVariadicExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppExprOnly::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppTypeOnly::IVisitor)
				void Visit(cpp_parser::CppPrimitiveType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppConstType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppVolatileType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppTypeOnly::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppIdentifier::IVisitor)
				void Visit(cpp_parser::CppNameIdentifier* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppOperatorIdentifier* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppIdentifier::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppVarInit::IVisitor)
				void Visit(cpp_parser::CppVarValueInit* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppVarParanthesisInit* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppVarBraceInit* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppVarInit::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppStatement::IVisitor)
				void Visit(cpp_parser::CppEmptyStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppBlockStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppExprStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppBreakStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppContinueStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppReturnStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppLabelStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppGotoStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppCaseStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppDefaultStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::Cpp__LeaveStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppStaticAssertStat* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppStatement::IVisitor)

#endif
#endif
			/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
			/// <returns>Returns true if this operation succeeded.</returns>
			extern bool CppAstLoadTypes();
		}
	}
}
#endif