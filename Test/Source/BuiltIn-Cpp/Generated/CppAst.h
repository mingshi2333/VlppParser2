/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_AST
#define VCZH_PARSER2_BUILTIN_CPP_AST_AST

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace cpp_parser
{
	class CppFile;
	class CppName;
	class CppOperatorName;
	class CppQualifiedName;
	class CppTypeOrExpr;

	enum class CppNameKinds
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Normal = 0,
		Enum = 1,
		EnumClass = 2,
		Class = 3,
		Struct = 4,
		Union = 5,
		Dtor = 6,
		UserDefinedLiteral = 7,
	};

	enum class CppOperators
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		New = 0,
		NewArray = 1,
		Delete = 2,
		DeleteArray = 3,
		Comma = 4,
		RoundBracket = 5,
		Parantheses = 6,
		Bracket = 7,
		PointerDeref = 8,
		Pointer = 9,
		EQ = 10,
		NE = 11,
		LT = 12,
		LE = 13,
		GT = 14,
		GE = 15,
		Not = 16,
		Revert = 17,
		Xor = 18,
		And = 19,
		BitwiseAnd = 20,
		Or = 21,
		BitwiseOr = 22,
		Mul = 23,
		Div = 24,
		Mod = 25,
		Plus = 26,
		Increase = 27,
		Minus = 28,
		Decrease = 29,
		LeftShift = 30,
		RightShift = 31,
		Assign = 32,
		RevertAssign = 33,
		XorAssign = 34,
		AndAssign = 35,
		OrAssign = 36,
		MulAssign = 37,
		DivAssign = 38,
		ModAssign = 39,
		PlusAssign = 40,
		MinusAssign = 41,
		LeftShiftAssign = 42,
		RightShiftAssign = 43,
	};

	class CppTypeOrExpr abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<CppTypeOrExpr>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppQualifiedName* node) = 0;
		};

		virtual void Accept(CppTypeOrExpr::IVisitor* visitor) = 0;

	};

	class CppQualifiedName abstract : public CppTypeOrExpr, vl::reflection::Description<CppQualifiedName>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(CppName* node) = 0;
			virtual void Visit(CppOperatorName* node) = 0;
		};

		virtual void Accept(CppQualifiedName::IVisitor* visitor) = 0;


		void Accept(CppTypeOrExpr::IVisitor* visitor) override;
	};

	class CppName : public CppQualifiedName, vl::reflection::Description<CppName>
	{
	public:
		CppNameKinds kind = CppNameKinds::UNDEFINED_ENUM_ITEM_VALUE;
		vl::glr::ParsingToken name;

		void Accept(CppQualifiedName::IVisitor* visitor) override;
	};

	class CppOperatorName : public CppQualifiedName, vl::reflection::Description<CppOperatorName>
	{
	public:
		CppOperators op = CppOperators::UNDEFINED_ENUM_ITEM_VALUE;

		void Accept(CppQualifiedName::IVisitor* visitor) override;
	};

	class CppFile : public vl::glr::ParsingAstBase, vl::reflection::Description<CppFile>
	{
	public:
	};
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			DECL_TYPE_INFO(cpp_parser::CppTypeOrExpr)
			DECL_TYPE_INFO(cpp_parser::CppTypeOrExpr::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppQualifiedName)
			DECL_TYPE_INFO(cpp_parser::CppQualifiedName::IVisitor)
			DECL_TYPE_INFO(cpp_parser::CppNameKinds)
			DECL_TYPE_INFO(cpp_parser::CppName)
			DECL_TYPE_INFO(cpp_parser::CppOperators)
			DECL_TYPE_INFO(cpp_parser::CppOperatorName)
			DECL_TYPE_INFO(cpp_parser::CppFile)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppTypeOrExpr::IVisitor)
				void Visit(cpp_parser::CppQualifiedName* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppTypeOrExpr::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(cpp_parser::CppQualifiedName::IVisitor)
				void Visit(cpp_parser::CppName* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(cpp_parser::CppOperatorName* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(cpp_parser::CppQualifiedName::IVisitor)

#endif
#endif
			/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
			/// <returns>Returns true if this operation succeeded.</returns>
			extern bool CppAstLoadTypes();
		}
	}
}
#endif