/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Builder.h"

namespace cpp_parser
{
	namespace builder
	{

/***********************************************************************
MakeAdvancedType
***********************************************************************/

		MakeAdvancedType& MakeAdvancedType::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

		MakeAdvancedType& MakeAdvancedType::kind(CppAdvancedTypeKinds value)
		{
			node->kind = value;
			return *this;
		}

/***********************************************************************
MakeBinaryExpr
***********************************************************************/

		MakeBinaryExpr& MakeBinaryExpr::left(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->left = value;
			return *this;
		}

		MakeBinaryExpr& MakeBinaryExpr::op(CppOperators value)
		{
			node->op = value;
			return *this;
		}

		MakeBinaryExpr& MakeBinaryExpr::right(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->right = value;
			return *this;
		}

/***********************************************************************
MakeBraceExpr
***********************************************************************/

		MakeBraceExpr& MakeBraceExpr::arguments(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->arguments.Add(value);
			return *this;
		}

/***********************************************************************
MakeCallExpr
***********************************************************************/

		MakeCallExpr& MakeCallExpr::arguments(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->arguments.Add(value);
			return *this;
		}

		MakeCallExpr& MakeCallExpr::operand(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->operand = value;
			return *this;
		}

/***********************************************************************
MakeCastExpr
***********************************************************************/

		MakeCastExpr& MakeCastExpr::expr(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->expr = value;
			return *this;
		}

		MakeCastExpr& MakeCastExpr::keyword(const vl::WString& value)
		{
			node->keyword.value = value;
			return *this;
		}

		MakeCastExpr& MakeCastExpr::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type = value;
			return *this;
		}

/***********************************************************************
MakeConstType
***********************************************************************/

		MakeConstType& MakeConstType::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type = value;
			return *this;
		}

/***********************************************************************
MakeDeclarator
***********************************************************************/

		MakeDeclarator& MakeDeclarator::advancedTypes(const vl::Ptr<CppAdvancedType>& value)
		{
			node->advancedTypes.Add(value);
			return *this;
		}

		MakeDeclarator& MakeDeclarator::arrayParts(const vl::Ptr<CppDeclaratorArrayPart>& value)
		{
			node->arrayParts.Add(value);
			return *this;
		}

		MakeDeclarator& MakeDeclarator::funcPart(const vl::Ptr<CppDeclaratorFunctionPart>& value)
		{
			node->funcPart = value;
			return *this;
		}

		MakeDeclarator& MakeDeclarator::id(const vl::Ptr<CppIdentifier>& value)
		{
			node->id = value;
			return *this;
		}

		MakeDeclarator& MakeDeclarator::innerDeclarator(const vl::Ptr<CppDeclarator>& value)
		{
			node->innerDeclarator = value;
			return *this;
		}

		MakeDeclarator& MakeDeclarator::keywords(const vl::Ptr<CppDeclaratorKeyword>& value)
		{
			node->keywords.Add(value);
			return *this;
		}

/***********************************************************************
MakeDeclaratorArrayPart
***********************************************************************/

		MakeDeclaratorArrayPart& MakeDeclaratorArrayPart::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

/***********************************************************************
MakeDeclaratorFunctionPart
***********************************************************************/

		MakeDeclaratorFunctionPart& MakeDeclaratorFunctionPart::parameters(const vl::Ptr<CppFunctionParameter>& value)
		{
			node->parameters.Add(value);
			return *this;
		}

		MakeDeclaratorFunctionPart& MakeDeclaratorFunctionPart::variadic(const vl::WString& value)
		{
			node->variadic.value = value;
			return *this;
		}

/***********************************************************************
MakeDeclaratorKeyword
***********************************************************************/

		MakeDeclaratorKeyword& MakeDeclaratorKeyword::keyword(const vl::WString& value)
		{
			node->keyword.value = value;
			return *this;
		}

/***********************************************************************
MakeDeclaratorType
***********************************************************************/

		MakeDeclaratorType& MakeDeclaratorType::declarator(const vl::Ptr<CppDeclarator>& value)
		{
			node->declarator = value;
			return *this;
		}

		MakeDeclaratorType& MakeDeclaratorType::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type = value;
			return *this;
		}

/***********************************************************************
MakeDeleteExpr
***********************************************************************/

		MakeDeleteExpr& MakeDeleteExpr::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

		MakeDeleteExpr& MakeDeleteExpr::array(CppOperatorArray value)
		{
			node->array = value;
			return *this;
		}

		MakeDeleteExpr& MakeDeleteExpr::scope(CppOperatorScope value)
		{
			node->scope = value;
			return *this;
		}

/***********************************************************************
MakeFunctionParameter
***********************************************************************/

		MakeFunctionParameter& MakeFunctionParameter::declarator(const vl::Ptr<CppDeclarator>& value)
		{
			node->declarator = value;
			return *this;
		}

		MakeFunctionParameter& MakeFunctionParameter::defaultValue(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->defaultValue = value;
			return *this;
		}

		MakeFunctionParameter& MakeFunctionParameter::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type = value;
			return *this;
		}

		MakeFunctionParameter& MakeFunctionParameter::variadic(const vl::WString& value)
		{
			node->variadic.value = value;
			return *this;
		}

/***********************************************************************
MakeGenericArgument
***********************************************************************/

		MakeGenericArgument& MakeGenericArgument::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

		MakeGenericArgument& MakeGenericArgument::variadic(const vl::WString& value)
		{
			node->variadic.value = value;
			return *this;
		}

/***********************************************************************
MakeGenericArguments
***********************************************************************/

		MakeGenericArguments& MakeGenericArguments::arguments(const vl::Ptr<CppGenericArgument>& value)
		{
			node->arguments.Add(value);
			return *this;
		}

/***********************************************************************
MakeIfExpr
***********************************************************************/

		MakeIfExpr& MakeIfExpr::condition(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->condition = value;
			return *this;
		}

		MakeIfExpr& MakeIfExpr::falseBranch(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->falseBranch = value;
			return *this;
		}

		MakeIfExpr& MakeIfExpr::trueBranch(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->trueBranch = value;
			return *this;
		}

/***********************************************************************
MakeIndexExpr
***********************************************************************/

		MakeIndexExpr& MakeIndexExpr::index(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->index = value;
			return *this;
		}

		MakeIndexExpr& MakeIndexExpr::operand(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->operand = value;
			return *this;
		}

/***********************************************************************
MakeNameIdentifier
***********************************************************************/

		MakeNameIdentifier& MakeNameIdentifier::kind(CppNameKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeNameIdentifier& MakeNameIdentifier::name(const vl::WString& value)
		{
			node->name.value = value;
			return *this;
		}

/***********************************************************************
MakeNewExpr
***********************************************************************/

		MakeNewExpr& MakeNewExpr::init(CppOperatorInit value)
		{
			node->init = value;
			return *this;
		}

		MakeNewExpr& MakeNewExpr::initArguments(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->initArguments.Add(value);
			return *this;
		}

		MakeNewExpr& MakeNewExpr::placementArguments(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->placementArguments.Add(value);
			return *this;
		}

		MakeNewExpr& MakeNewExpr::scope(CppOperatorScope value)
		{
			node->scope = value;
			return *this;
		}

		MakeNewExpr& MakeNewExpr::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type.Add(value);
			return *this;
		}

/***********************************************************************
MakeNumericExprLiteral
***********************************************************************/

		MakeNumericExprLiteral& MakeNumericExprLiteral::kind(CppNumericExprLiteralKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeNumericExprLiteral& MakeNumericExprLiteral::literal(const vl::WString& value)
		{
			node->literal.value = value;
			return *this;
		}

/***********************************************************************
MakeOperatorIdentifier
***********************************************************************/

		MakeOperatorIdentifier& MakeOperatorIdentifier::op(CppOperators value)
		{
			node->op = value;
			return *this;
		}

/***********************************************************************
MakeParenthesisExpr
***********************************************************************/

		MakeParenthesisExpr& MakeParenthesisExpr::expr(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->expr = value;
			return *this;
		}

/***********************************************************************
MakePostfixUnaryExpr
***********************************************************************/

		MakePostfixUnaryExpr& MakePostfixUnaryExpr::op(CppOperators value)
		{
			node->op = value;
			return *this;
		}

		MakePostfixUnaryExpr& MakePostfixUnaryExpr::operand(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->operand = value;
			return *this;
		}

/***********************************************************************
MakePrefixUnaryExpr
***********************************************************************/

		MakePrefixUnaryExpr& MakePrefixUnaryExpr::op(CppOperators value)
		{
			node->op = value;
			return *this;
		}

		MakePrefixUnaryExpr& MakePrefixUnaryExpr::operand(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->operand = value;
			return *this;
		}

/***********************************************************************
MakePrimitiveExprLiteral
***********************************************************************/

		MakePrimitiveExprLiteral& MakePrimitiveExprLiteral::kind(CppPrimitiveExprLiteralKinds value)
		{
			node->kind = value;
			return *this;
		}

/***********************************************************************
MakePrimitiveType
***********************************************************************/

		MakePrimitiveType& MakePrimitiveType::kind(CppPrimitiveTypeKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakePrimitiveType& MakePrimitiveType::literal1(const vl::WString& value)
		{
			node->literal1.value = value;
			return *this;
		}

		MakePrimitiveType& MakePrimitiveType::literal2(const vl::WString& value)
		{
			node->literal2.value = value;
			return *this;
		}

/***********************************************************************
MakeQualifiedName
***********************************************************************/

		MakeQualifiedName& MakeQualifiedName::arguments(const vl::Ptr<CppGenericArguments>& value)
		{
			node->arguments = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::expr(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->expr = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::id(const vl::Ptr<CppIdentifier>& value)
		{
			node->id = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::kind(CppQualifiedNameKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::parent(const vl::Ptr<CppQualifiedName>& value)
		{
			node->parent = value;
			return *this;
		}

/***********************************************************************
MakeSizeofExpr
***********************************************************************/

		MakeSizeofExpr& MakeSizeofExpr::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

		MakeSizeofExpr& MakeSizeofExpr::variadic(const vl::WString& value)
		{
			node->variadic.value = value;
			return *this;
		}

/***********************************************************************
MakeStringLiteral
***********************************************************************/

		MakeStringLiteral& MakeStringLiteral::fragments(const vl::Ptr<CppStringLiteralFragment>& value)
		{
			node->fragments.Add(value);
			return *this;
		}

/***********************************************************************
MakeStringLiteralFragment
***********************************************************************/

		MakeStringLiteralFragment& MakeStringLiteralFragment::kind(CppStringLiteralKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeStringLiteralFragment& MakeStringLiteralFragment::literal(const vl::WString& value)
		{
			node->literal.value = value;
			return *this;
		}

/***********************************************************************
MakeSysFuncExpr
***********************************************************************/

		MakeSysFuncExpr& MakeSysFuncExpr::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

		MakeSysFuncExpr& MakeSysFuncExpr::keyword(const vl::WString& value)
		{
			node->keyword.value = value;
			return *this;
		}

		MakeSysFuncExpr& MakeSysFuncExpr::variadic(const vl::WString& value)
		{
			node->variadic.value = value;
			return *this;
		}

/***********************************************************************
MakeThrowExpr
***********************************************************************/

		MakeThrowExpr& MakeThrowExpr::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

/***********************************************************************
MakeVolatileType
***********************************************************************/

		MakeVolatileType& MakeVolatileType::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type = value;
			return *this;
		}
	}
}
