/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Builder.h"

namespace cpp_parser
{
	namespace builder
	{

/***********************************************************************
MakeConstType
***********************************************************************/

		MakeConstType& MakeConstType::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type = value;
			return *this;
		}

/***********************************************************************
MakeGenericArgument
***********************************************************************/

		MakeGenericArgument& MakeGenericArgument::argument(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->argument = value;
			return *this;
		}

		MakeGenericArgument& MakeGenericArgument::variadic(const vl::WString& value)
		{
			node->variadic.value = value;
			return *this;
		}

/***********************************************************************
MakeGenericArguments
***********************************************************************/

		MakeGenericArguments& MakeGenericArguments::arguments(const vl::Ptr<CppGenericArgument>& value)
		{
			node->arguments.Add(value);
			return *this;
		}

/***********************************************************************
MakeNameIdentifier
***********************************************************************/

		MakeNameIdentifier& MakeNameIdentifier::kind(CppNameKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeNameIdentifier& MakeNameIdentifier::name(const vl::WString& value)
		{
			node->name.value = value;
			return *this;
		}

/***********************************************************************
MakeNumericExprLiteral
***********************************************************************/

		MakeNumericExprLiteral& MakeNumericExprLiteral::kind(CppNumericExprLiteralKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeNumericExprLiteral& MakeNumericExprLiteral::literal(const vl::WString& value)
		{
			node->literal.value = value;
			return *this;
		}

/***********************************************************************
MakeOperatorIdentifier
***********************************************************************/

		MakeOperatorIdentifier& MakeOperatorIdentifier::op(CppOperators value)
		{
			node->op = value;
			return *this;
		}

/***********************************************************************
MakePrimitiveExprLiteral
***********************************************************************/

		MakePrimitiveExprLiteral& MakePrimitiveExprLiteral::kind(CppPrimitiveExprLiteralKinds value)
		{
			node->kind = value;
			return *this;
		}

/***********************************************************************
MakePrimitiveType
***********************************************************************/

		MakePrimitiveType& MakePrimitiveType::kind(CppPrimitiveTypeKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakePrimitiveType& MakePrimitiveType::literal1(const vl::WString& value)
		{
			node->literal1.value = value;
			return *this;
		}

		MakePrimitiveType& MakePrimitiveType::literal2(const vl::WString& value)
		{
			node->literal2.value = value;
			return *this;
		}

/***********************************************************************
MakeQualifiedName
***********************************************************************/

		MakeQualifiedName& MakeQualifiedName::arguments(const vl::Ptr<CppGenericArguments>& value)
		{
			node->arguments = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::expr(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->expr = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::id(const vl::Ptr<CppIdentifier>& value)
		{
			node->id = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::kind(CppQualifiedNameKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeQualifiedName& MakeQualifiedName::parent(const vl::Ptr<CppQualifiedName>& value)
		{
			node->parent = value;
			return *this;
		}

/***********************************************************************
MakeStringLiteral
***********************************************************************/

		MakeStringLiteral& MakeStringLiteral::fragments(const vl::Ptr<CppStringLiteralFragment>& value)
		{
			node->fragments.Add(value);
			return *this;
		}

/***********************************************************************
MakeStringLiteralFragment
***********************************************************************/

		MakeStringLiteralFragment& MakeStringLiteralFragment::kind(CppStringLiteralKinds value)
		{
			node->kind = value;
			return *this;
		}

		MakeStringLiteralFragment& MakeStringLiteralFragment::literal(const vl::WString& value)
		{
			node->literal.value = value;
			return *this;
		}

/***********************************************************************
MakeVolatileType
***********************************************************************/

		MakeVolatileType& MakeVolatileType::type(const vl::Ptr<CppTypeOrExpr>& value)
		{
			node->type = value;
			return *this;
		}
	}
}
