/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_AST_BUILDER
#define VCZH_PARSER2_BUILTIN_CPP_AST_AST_BUILDER

#include "CppAst.h"

namespace cpp_parser
{
	namespace builder
	{
		class MakeBinaryExpr : public vl::glr::ParsingAstBuilder<CppBinaryExpr>
		{
		public:
			MakeBinaryExpr& first(const vl::Ptr<CppTypeOrExpr>& value);
			MakeBinaryExpr& op(CppOperators value);
			MakeBinaryExpr& second(const vl::Ptr<CppTypeOrExpr>& value);
		};

		class MakeBraceExpr : public vl::glr::ParsingAstBuilder<CppBraceExpr>
		{
		public:
			MakeBraceExpr& arguments(const vl::Ptr<CppTypeOrExpr>& value);
		};

		class MakeCastExpr : public vl::glr::ParsingAstBuilder<CppCastExpr>
		{
		public:
			MakeCastExpr& expr(const vl::Ptr<CppTypeOrExpr>& value);
			MakeCastExpr& keyword(const vl::WString& value);
			MakeCastExpr& type(const vl::Ptr<CppTypeOrExpr>& value);
		};

		class MakeConstType : public vl::glr::ParsingAstBuilder<CppConstType>
		{
		public:
			MakeConstType& type(const vl::Ptr<CppTypeOrExpr>& value);
		};

		class MakeGenericArgument : public vl::glr::ParsingAstBuilder<CppGenericArgument>
		{
		public:
			MakeGenericArgument& argument(const vl::Ptr<CppTypeOrExpr>& value);
			MakeGenericArgument& variadic(const vl::WString& value);
		};

		class MakeGenericArguments : public vl::glr::ParsingAstBuilder<CppGenericArguments>
		{
		public:
			MakeGenericArguments& arguments(const vl::Ptr<CppGenericArgument>& value);
		};

		class MakeNameIdentifier : public vl::glr::ParsingAstBuilder<CppNameIdentifier>
		{
		public:
			MakeNameIdentifier& kind(CppNameKinds value);
			MakeNameIdentifier& name(const vl::WString& value);
		};

		class MakeNumericExprLiteral : public vl::glr::ParsingAstBuilder<CppNumericExprLiteral>
		{
		public:
			MakeNumericExprLiteral& kind(CppNumericExprLiteralKinds value);
			MakeNumericExprLiteral& literal(const vl::WString& value);
		};

		class MakeOperatorIdentifier : public vl::glr::ParsingAstBuilder<CppOperatorIdentifier>
		{
		public:
			MakeOperatorIdentifier& op(CppOperators value);
		};

		class MakeParenthesisExpr : public vl::glr::ParsingAstBuilder<CppParenthesisExpr>
		{
		public:
			MakeParenthesisExpr& expr(const vl::Ptr<CppTypeOrExpr>& value);
		};

		class MakePostfixUnaryExpr : public vl::glr::ParsingAstBuilder<CppPostfixUnaryExpr>
		{
		public:
			MakePostfixUnaryExpr& op(CppOperators value);
			MakePostfixUnaryExpr& operand(const vl::Ptr<CppTypeOrExpr>& value);
		};

		class MakePrefixUnaryExpr : public vl::glr::ParsingAstBuilder<CppPrefixUnaryExpr>
		{
		public:
			MakePrefixUnaryExpr& op(CppOperators value);
			MakePrefixUnaryExpr& operand(const vl::Ptr<CppTypeOrExpr>& value);
		};

		class MakePrimitiveExprLiteral : public vl::glr::ParsingAstBuilder<CppPrimitiveExprLiteral>
		{
		public:
			MakePrimitiveExprLiteral& kind(CppPrimitiveExprLiteralKinds value);
		};

		class MakePrimitiveType : public vl::glr::ParsingAstBuilder<CppPrimitiveType>
		{
		public:
			MakePrimitiveType& kind(CppPrimitiveTypeKinds value);
			MakePrimitiveType& literal1(const vl::WString& value);
			MakePrimitiveType& literal2(const vl::WString& value);
		};

		class MakeQualifiedName : public vl::glr::ParsingAstBuilder<CppQualifiedName>
		{
		public:
			MakeQualifiedName& arguments(const vl::Ptr<CppGenericArguments>& value);
			MakeQualifiedName& expr(const vl::Ptr<CppTypeOrExpr>& value);
			MakeQualifiedName& id(const vl::Ptr<CppIdentifier>& value);
			MakeQualifiedName& kind(CppQualifiedNameKinds value);
			MakeQualifiedName& parent(const vl::Ptr<CppQualifiedName>& value);
		};

		class MakeStringLiteral : public vl::glr::ParsingAstBuilder<CppStringLiteral>
		{
		public:
			MakeStringLiteral& fragments(const vl::Ptr<CppStringLiteralFragment>& value);
		};

		class MakeStringLiteralFragment : public vl::glr::ParsingAstBuilder<CppStringLiteralFragment>
		{
		public:
			MakeStringLiteralFragment& kind(CppStringLiteralKinds value);
			MakeStringLiteralFragment& literal(const vl::WString& value);
		};

		class MakeSysFuncExpr : public vl::glr::ParsingAstBuilder<CppSysFuncExpr>
		{
		public:
			MakeSysFuncExpr& argument(const vl::Ptr<CppTypeOrExpr>& value);
			MakeSysFuncExpr& keyword(const vl::WString& value);
			MakeSysFuncExpr& variadic(const vl::WString& value);
		};

		class MakeVolatileType : public vl::glr::ParsingAstBuilder<CppVolatileType>
		{
		public:
			MakeVolatileType& type(const vl::Ptr<CppTypeOrExpr>& value);
		};

	}
}
#endif