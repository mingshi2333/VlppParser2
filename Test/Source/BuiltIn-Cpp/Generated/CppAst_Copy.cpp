/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Copy.h"

namespace cpp_parser
{
	namespace copy_visitor
	{
		void AstVisitor::CopyFields(CppConstType* from, CppConstType* to)
		{
			CopyFields(static_cast<CppTypeOnly*>(from), static_cast<CppTypeOnly*>(to));
			to->type = CopyNode(from->type.Obj());
		}

		void AstVisitor::CopyFields(CppExprOnly* from, CppExprOnly* to)
		{
			CopyFields(static_cast<CppTypeOrExpr*>(from), static_cast<CppTypeOrExpr*>(to));
		}

		void AstVisitor::CopyFields(CppFile* from, CppFile* to)
		{
		}

		void AstVisitor::CopyFields(CppGenericArgument* from, CppGenericArgument* to)
		{
			to->argument = CopyNode(from->argument.Obj());
			to->variadic = from->variadic;
		}

		void AstVisitor::CopyFields(CppGenericArguments* from, CppGenericArguments* to)
		{
			for (auto&& listItem : from->arguments)
			{
				to->arguments.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(CppIdentifier* from, CppIdentifier* to)
		{
		}

		void AstVisitor::CopyFields(CppNameIdentifier* from, CppNameIdentifier* to)
		{
			CopyFields(static_cast<CppIdentifier*>(from), static_cast<CppIdentifier*>(to));
			to->kind = from->kind;
			to->name = from->name;
		}

		void AstVisitor::CopyFields(CppNumericExprLiteral* from, CppNumericExprLiteral* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->kind = from->kind;
			to->literal = from->literal;
		}

		void AstVisitor::CopyFields(CppOperatorIdentifier* from, CppOperatorIdentifier* to)
		{
			CopyFields(static_cast<CppIdentifier*>(from), static_cast<CppIdentifier*>(to));
			to->op = from->op;
		}

		void AstVisitor::CopyFields(CppPrimitiveExprLiteral* from, CppPrimitiveExprLiteral* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->kind = from->kind;
		}

		void AstVisitor::CopyFields(CppPrimitiveType* from, CppPrimitiveType* to)
		{
			CopyFields(static_cast<CppTypeOnly*>(from), static_cast<CppTypeOnly*>(to));
			to->kind = from->kind;
			to->literal1 = from->literal1;
			to->literal2 = from->literal2;
		}

		void AstVisitor::CopyFields(CppQualifiedName* from, CppQualifiedName* to)
		{
			CopyFields(static_cast<CppTypeOrExpr*>(from), static_cast<CppTypeOrExpr*>(to));
			to->arguments = CopyNode(from->arguments.Obj());
			to->expr = CopyNode(from->expr.Obj());
			to->id = CopyNode(from->id.Obj());
			to->kind = from->kind;
			to->parent = CopyNode(from->parent.Obj());
		}

		void AstVisitor::CopyFields(CppStringLiteral* from, CppStringLiteral* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			for (auto&& listItem : from->fragments)
			{
				to->fragments.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(CppStringLiteralFragment* from, CppStringLiteralFragment* to)
		{
			to->kind = from->kind;
			to->literal = from->literal;
		}

		void AstVisitor::CopyFields(CppTypeOnly* from, CppTypeOnly* to)
		{
			CopyFields(static_cast<CppTypeOrExpr*>(from), static_cast<CppTypeOrExpr*>(to));
		}

		void AstVisitor::CopyFields(CppTypeOrExpr* from, CppTypeOrExpr* to)
		{
		}

		void AstVisitor::CopyFields(CppVolatileType* from, CppVolatileType* to)
		{
			CopyFields(static_cast<CppTypeOnly*>(from), static_cast<CppTypeOnly*>(to));
			to->type = CopyNode(from->type.Obj());
		}

		void AstVisitor::Visit(CppGenericArgument* node)
		{
			auto newNode = vl::MakePtr<CppGenericArgument>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppGenericArguments* node)
		{
			auto newNode = vl::MakePtr<CppGenericArguments>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppStringLiteralFragment* node)
		{
			auto newNode = vl::MakePtr<CppStringLiteralFragment>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppFile* node)
		{
			auto newNode = vl::MakePtr<CppFile>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppExprOnly* node)
		{
			node->Accept(static_cast<CppExprOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppTypeOnly* node)
		{
			node->Accept(static_cast<CppTypeOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppQualifiedName* node)
		{
			auto newNode = vl::MakePtr<CppQualifiedName>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppPrimitiveExprLiteral* node)
		{
			auto newNode = vl::MakePtr<CppPrimitiveExprLiteral>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppNumericExprLiteral* node)
		{
			auto newNode = vl::MakePtr<CppNumericExprLiteral>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppStringLiteral* node)
		{
			auto newNode = vl::MakePtr<CppStringLiteral>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppPrimitiveType* node)
		{
			auto newNode = vl::MakePtr<CppPrimitiveType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppConstType* node)
		{
			auto newNode = vl::MakePtr<CppConstType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppVolatileType* node)
		{
			auto newNode = vl::MakePtr<CppVolatileType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppNameIdentifier* node)
		{
			auto newNode = vl::MakePtr<CppNameIdentifier>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppOperatorIdentifier* node)
		{
			auto newNode = vl::MakePtr<CppOperatorIdentifier>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		vl::Ptr<CppTypeOrExpr> AstVisitor::CopyNode(CppTypeOrExpr* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<CppTypeOrExpr::IVisitor*>(this));
			return this->result.Cast<CppTypeOrExpr>();
		}

		vl::Ptr<CppIdentifier> AstVisitor::CopyNode(CppIdentifier* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<CppIdentifier::IVisitor*>(this));
			return this->result.Cast<CppIdentifier>();
		}

		vl::Ptr<CppGenericArgument> AstVisitor::CopyNode(CppGenericArgument* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppGenericArgument>();
		}

		vl::Ptr<CppGenericArguments> AstVisitor::CopyNode(CppGenericArguments* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppGenericArguments>();
		}

		vl::Ptr<CppStringLiteralFragment> AstVisitor::CopyNode(CppStringLiteralFragment* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppStringLiteralFragment>();
		}

		vl::Ptr<CppFile> AstVisitor::CopyNode(CppFile* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppFile>();
		}

		vl::Ptr<CppConstType> AstVisitor::CopyNode(CppConstType* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppConstType>();
		}

		vl::Ptr<CppExprOnly> AstVisitor::CopyNode(CppExprOnly* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppExprOnly>();
		}

		vl::Ptr<CppNameIdentifier> AstVisitor::CopyNode(CppNameIdentifier* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppIdentifier*>(node)).Cast<CppNameIdentifier>();
		}

		vl::Ptr<CppNumericExprLiteral> AstVisitor::CopyNode(CppNumericExprLiteral* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppNumericExprLiteral>();
		}

		vl::Ptr<CppOperatorIdentifier> AstVisitor::CopyNode(CppOperatorIdentifier* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppIdentifier*>(node)).Cast<CppOperatorIdentifier>();
		}

		vl::Ptr<CppPrimitiveExprLiteral> AstVisitor::CopyNode(CppPrimitiveExprLiteral* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppPrimitiveExprLiteral>();
		}

		vl::Ptr<CppPrimitiveType> AstVisitor::CopyNode(CppPrimitiveType* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppPrimitiveType>();
		}

		vl::Ptr<CppQualifiedName> AstVisitor::CopyNode(CppQualifiedName* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppQualifiedName>();
		}

		vl::Ptr<CppStringLiteral> AstVisitor::CopyNode(CppStringLiteral* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppStringLiteral>();
		}

		vl::Ptr<CppTypeOnly> AstVisitor::CopyNode(CppTypeOnly* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppTypeOnly>();
		}

		vl::Ptr<CppVolatileType> AstVisitor::CopyNode(CppVolatileType* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppVolatileType>();
		}

	}
}
