/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Copy.h"

namespace cpp_parser
{
	namespace copy_visitor
	{
		void AstVisitor::CopyFields(CppAdvancedType* from, CppAdvancedType* to)
		{
			to->argument = CopyNode(from->argument.Obj());
			to->kind = from->kind;
		}

		void AstVisitor::CopyFields(CppBinaryExpr* from, CppBinaryExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->left = CopyNode(from->left.Obj());
			to->op = from->op;
			to->right = CopyNode(from->right.Obj());
		}

		void AstVisitor::CopyFields(CppBraceExpr* from, CppBraceExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			for (auto&& listItem : from->arguments)
			{
				to->arguments.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(CppCallExpr* from, CppCallExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			for (auto&& listItem : from->arguments)
			{
				to->arguments.Add(CopyNode(listItem.Obj()));
			}
			to->operand = CopyNode(from->operand.Obj());
		}

		void AstVisitor::CopyFields(CppCastExpr* from, CppCastExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->expr = CopyNode(from->expr.Obj());
			to->keyword = from->keyword;
			to->type = CopyNode(from->type.Obj());
		}

		void AstVisitor::CopyFields(CppConstType* from, CppConstType* to)
		{
			CopyFields(static_cast<CppTypeOnly*>(from), static_cast<CppTypeOnly*>(to));
			to->type = CopyNode(from->type.Obj());
		}

		void AstVisitor::CopyFields(CppDeclarator* from, CppDeclarator* to)
		{
			for (auto&& listItem : from->advancedTypes)
			{
				to->advancedTypes.Add(CopyNode(listItem.Obj()));
			}
			for (auto&& listItem : from->arrayParts)
			{
				to->arrayParts.Add(CopyNode(listItem.Obj()));
			}
			to->funcPart = CopyNode(from->funcPart.Obj());
			to->id = CopyNode(from->id.Obj());
			to->innerDeclarator = CopyNode(from->innerDeclarator.Obj());
			for (auto&& listItem : from->keywords)
			{
				to->keywords.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(CppDeclaratorArrayPart* from, CppDeclaratorArrayPart* to)
		{
			to->argument = CopyNode(from->argument.Obj());
		}

		void AstVisitor::CopyFields(CppDeclaratorFunctionPart* from, CppDeclaratorFunctionPart* to)
		{
			to->deferredType = CopyNode(from->deferredType.Obj());
			for (auto&& listItem : from->keywords)
			{
				to->keywords.Add(CopyNode(listItem.Obj()));
			}
			for (auto&& listItem : from->parameters)
			{
				to->parameters.Add(CopyNode(listItem.Obj()));
			}
			to->variadic = from->variadic;
		}

		void AstVisitor::CopyFields(CppDeclaratorKeyword* from, CppDeclaratorKeyword* to)
		{
			to->keyword = from->keyword;
		}

		void AstVisitor::CopyFields(CppDeclaratorType* from, CppDeclaratorType* to)
		{
			CopyFields(static_cast<CppTypeOrExpr*>(from), static_cast<CppTypeOrExpr*>(to));
			to->declarator = CopyNode(from->declarator.Obj());
			to->type = CopyNode(from->type.Obj());
		}

		void AstVisitor::CopyFields(CppDeleteExpr* from, CppDeleteExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->argument = CopyNode(from->argument.Obj());
			to->array = from->array;
			to->scope = from->scope;
		}

		void AstVisitor::CopyFields(CppExprOnly* from, CppExprOnly* to)
		{
			CopyFields(static_cast<CppTypeOrExpr*>(from), static_cast<CppTypeOrExpr*>(to));
		}

		void AstVisitor::CopyFields(CppFile* from, CppFile* to)
		{
		}

		void AstVisitor::CopyFields(CppFunctionKeyword* from, CppFunctionKeyword* to)
		{
			for (auto&& listItem : from->arguments)
			{
				to->arguments.Add(CopyNode(listItem.Obj()));
			}
			to->keyword = from->keyword;
		}

		void AstVisitor::CopyFields(CppFunctionParameter* from, CppFunctionParameter* to)
		{
			to->declarator = CopyNode(from->declarator.Obj());
			to->defaultValue = CopyNode(from->defaultValue.Obj());
			to->type = CopyNode(from->type.Obj());
			to->variadic = from->variadic;
		}

		void AstVisitor::CopyFields(CppGenericArgument* from, CppGenericArgument* to)
		{
			to->argument = CopyNode(from->argument.Obj());
			to->variadic = from->variadic;
		}

		void AstVisitor::CopyFields(CppGenericArguments* from, CppGenericArguments* to)
		{
			for (auto&& listItem : from->arguments)
			{
				to->arguments.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(CppIdentifier* from, CppIdentifier* to)
		{
		}

		void AstVisitor::CopyFields(CppIfExpr* from, CppIfExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->condition = CopyNode(from->condition.Obj());
			to->falseBranch = CopyNode(from->falseBranch.Obj());
			to->trueBranch = CopyNode(from->trueBranch.Obj());
		}

		void AstVisitor::CopyFields(CppIndexExpr* from, CppIndexExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->index = CopyNode(from->index.Obj());
			to->operand = CopyNode(from->operand.Obj());
		}

		void AstVisitor::CopyFields(CppNameIdentifier* from, CppNameIdentifier* to)
		{
			CopyFields(static_cast<CppIdentifier*>(from), static_cast<CppIdentifier*>(to));
			to->kind = from->kind;
			to->name = from->name;
		}

		void AstVisitor::CopyFields(CppNewExpr* from, CppNewExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->init = from->init;
			for (auto&& listItem : from->initArguments)
			{
				to->initArguments.Add(CopyNode(listItem.Obj()));
			}
			for (auto&& listItem : from->placementArguments)
			{
				to->placementArguments.Add(CopyNode(listItem.Obj()));
			}
			to->scope = from->scope;
			for (auto&& listItem : from->type)
			{
				to->type.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(CppNumericExprLiteral* from, CppNumericExprLiteral* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->kind = from->kind;
			to->literal = from->literal;
		}

		void AstVisitor::CopyFields(CppOperatorIdentifier* from, CppOperatorIdentifier* to)
		{
			CopyFields(static_cast<CppIdentifier*>(from), static_cast<CppIdentifier*>(to));
			to->op = from->op;
		}

		void AstVisitor::CopyFields(CppParenthesisExpr* from, CppParenthesisExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->expr = CopyNode(from->expr.Obj());
		}

		void AstVisitor::CopyFields(CppPostfixUnaryExpr* from, CppPostfixUnaryExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->op = from->op;
			to->operand = CopyNode(from->operand.Obj());
		}

		void AstVisitor::CopyFields(CppPrefixUnaryExpr* from, CppPrefixUnaryExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->op = from->op;
			to->operand = CopyNode(from->operand.Obj());
		}

		void AstVisitor::CopyFields(CppPrimitiveExprLiteral* from, CppPrimitiveExprLiteral* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->kind = from->kind;
		}

		void AstVisitor::CopyFields(CppPrimitiveType* from, CppPrimitiveType* to)
		{
			CopyFields(static_cast<CppTypeOnly*>(from), static_cast<CppTypeOnly*>(to));
			to->kind = from->kind;
			to->literal1 = from->literal1;
			to->literal2 = from->literal2;
		}

		void AstVisitor::CopyFields(CppQualifiedName* from, CppQualifiedName* to)
		{
			CopyFields(static_cast<CppTypeOrExpr*>(from), static_cast<CppTypeOrExpr*>(to));
			to->arguments = CopyNode(from->arguments.Obj());
			to->expr = CopyNode(from->expr.Obj());
			to->id = CopyNode(from->id.Obj());
			to->kind = from->kind;
			to->parent = CopyNode(from->parent.Obj());
		}

		void AstVisitor::CopyFields(CppSizeofExpr* from, CppSizeofExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->argument = CopyNode(from->argument.Obj());
			to->variadic = from->variadic;
		}

		void AstVisitor::CopyFields(CppStringLiteral* from, CppStringLiteral* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			for (auto&& listItem : from->fragments)
			{
				to->fragments.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(CppStringLiteralFragment* from, CppStringLiteralFragment* to)
		{
			to->kind = from->kind;
			to->literal = from->literal;
		}

		void AstVisitor::CopyFields(CppSysFuncExpr* from, CppSysFuncExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->argument = CopyNode(from->argument.Obj());
			to->keyword = from->keyword;
			to->variadic = from->variadic;
		}

		void AstVisitor::CopyFields(CppThrowExpr* from, CppThrowExpr* to)
		{
			CopyFields(static_cast<CppExprOnly*>(from), static_cast<CppExprOnly*>(to));
			to->argument = CopyNode(from->argument.Obj());
		}

		void AstVisitor::CopyFields(CppTypeOnly* from, CppTypeOnly* to)
		{
			CopyFields(static_cast<CppTypeOrExpr*>(from), static_cast<CppTypeOrExpr*>(to));
		}

		void AstVisitor::CopyFields(CppTypeOrExpr* from, CppTypeOrExpr* to)
		{
		}

		void AstVisitor::CopyFields(CppVolatileType* from, CppVolatileType* to)
		{
			CopyFields(static_cast<CppTypeOnly*>(from), static_cast<CppTypeOnly*>(to));
			to->type = CopyNode(from->type.Obj());
		}

		void AstVisitor::Visit(CppGenericArgument* node)
		{
			auto newNode = vl::MakePtr<CppGenericArgument>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppGenericArguments* node)
		{
			auto newNode = vl::MakePtr<CppGenericArguments>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppStringLiteralFragment* node)
		{
			auto newNode = vl::MakePtr<CppStringLiteralFragment>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppAdvancedType* node)
		{
			auto newNode = vl::MakePtr<CppAdvancedType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppDeclaratorKeyword* node)
		{
			auto newNode = vl::MakePtr<CppDeclaratorKeyword>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppFunctionKeyword* node)
		{
			auto newNode = vl::MakePtr<CppFunctionKeyword>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppFunctionParameter* node)
		{
			auto newNode = vl::MakePtr<CppFunctionParameter>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppDeclaratorFunctionPart* node)
		{
			auto newNode = vl::MakePtr<CppDeclaratorFunctionPart>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppDeclaratorArrayPart* node)
		{
			auto newNode = vl::MakePtr<CppDeclaratorArrayPart>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppDeclarator* node)
		{
			auto newNode = vl::MakePtr<CppDeclarator>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppFile* node)
		{
			auto newNode = vl::MakePtr<CppFile>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppExprOnly* node)
		{
			node->Accept(static_cast<CppExprOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppTypeOnly* node)
		{
			node->Accept(static_cast<CppTypeOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppQualifiedName* node)
		{
			auto newNode = vl::MakePtr<CppQualifiedName>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppDeclaratorType* node)
		{
			auto newNode = vl::MakePtr<CppDeclaratorType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppPrimitiveExprLiteral* node)
		{
			auto newNode = vl::MakePtr<CppPrimitiveExprLiteral>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppNumericExprLiteral* node)
		{
			auto newNode = vl::MakePtr<CppNumericExprLiteral>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppStringLiteral* node)
		{
			auto newNode = vl::MakePtr<CppStringLiteral>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppParenthesisExpr* node)
		{
			auto newNode = vl::MakePtr<CppParenthesisExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppBraceExpr* node)
		{
			auto newNode = vl::MakePtr<CppBraceExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppCastExpr* node)
		{
			auto newNode = vl::MakePtr<CppCastExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppSysFuncExpr* node)
		{
			auto newNode = vl::MakePtr<CppSysFuncExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppSizeofExpr* node)
		{
			auto newNode = vl::MakePtr<CppSizeofExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppDeleteExpr* node)
		{
			auto newNode = vl::MakePtr<CppDeleteExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppNewExpr* node)
		{
			auto newNode = vl::MakePtr<CppNewExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppPrefixUnaryExpr* node)
		{
			auto newNode = vl::MakePtr<CppPrefixUnaryExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppPostfixUnaryExpr* node)
		{
			auto newNode = vl::MakePtr<CppPostfixUnaryExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppIndexExpr* node)
		{
			auto newNode = vl::MakePtr<CppIndexExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppCallExpr* node)
		{
			auto newNode = vl::MakePtr<CppCallExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppBinaryExpr* node)
		{
			auto newNode = vl::MakePtr<CppBinaryExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppIfExpr* node)
		{
			auto newNode = vl::MakePtr<CppIfExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppThrowExpr* node)
		{
			auto newNode = vl::MakePtr<CppThrowExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppPrimitiveType* node)
		{
			auto newNode = vl::MakePtr<CppPrimitiveType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppConstType* node)
		{
			auto newNode = vl::MakePtr<CppConstType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppVolatileType* node)
		{
			auto newNode = vl::MakePtr<CppVolatileType>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppNameIdentifier* node)
		{
			auto newNode = vl::MakePtr<CppNameIdentifier>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(CppOperatorIdentifier* node)
		{
			auto newNode = vl::MakePtr<CppOperatorIdentifier>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		vl::Ptr<CppTypeOrExpr> AstVisitor::CopyNode(CppTypeOrExpr* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<CppTypeOrExpr::IVisitor*>(this));
			return this->result.Cast<CppTypeOrExpr>();
		}

		vl::Ptr<CppIdentifier> AstVisitor::CopyNode(CppIdentifier* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<CppIdentifier::IVisitor*>(this));
			return this->result.Cast<CppIdentifier>();
		}

		vl::Ptr<CppGenericArgument> AstVisitor::CopyNode(CppGenericArgument* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppGenericArgument>();
		}

		vl::Ptr<CppGenericArguments> AstVisitor::CopyNode(CppGenericArguments* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppGenericArguments>();
		}

		vl::Ptr<CppStringLiteralFragment> AstVisitor::CopyNode(CppStringLiteralFragment* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppStringLiteralFragment>();
		}

		vl::Ptr<CppAdvancedType> AstVisitor::CopyNode(CppAdvancedType* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppAdvancedType>();
		}

		vl::Ptr<CppDeclaratorKeyword> AstVisitor::CopyNode(CppDeclaratorKeyword* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppDeclaratorKeyword>();
		}

		vl::Ptr<CppFunctionKeyword> AstVisitor::CopyNode(CppFunctionKeyword* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppFunctionKeyword>();
		}

		vl::Ptr<CppFunctionParameter> AstVisitor::CopyNode(CppFunctionParameter* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppFunctionParameter>();
		}

		vl::Ptr<CppDeclaratorFunctionPart> AstVisitor::CopyNode(CppDeclaratorFunctionPart* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppDeclaratorFunctionPart>();
		}

		vl::Ptr<CppDeclaratorArrayPart> AstVisitor::CopyNode(CppDeclaratorArrayPart* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppDeclaratorArrayPart>();
		}

		vl::Ptr<CppDeclarator> AstVisitor::CopyNode(CppDeclarator* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppDeclarator>();
		}

		vl::Ptr<CppFile> AstVisitor::CopyNode(CppFile* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<CppFile>();
		}

		vl::Ptr<CppBinaryExpr> AstVisitor::CopyNode(CppBinaryExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppBinaryExpr>();
		}

		vl::Ptr<CppBraceExpr> AstVisitor::CopyNode(CppBraceExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppBraceExpr>();
		}

		vl::Ptr<CppCallExpr> AstVisitor::CopyNode(CppCallExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppCallExpr>();
		}

		vl::Ptr<CppCastExpr> AstVisitor::CopyNode(CppCastExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppCastExpr>();
		}

		vl::Ptr<CppConstType> AstVisitor::CopyNode(CppConstType* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppConstType>();
		}

		vl::Ptr<CppDeclaratorType> AstVisitor::CopyNode(CppDeclaratorType* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppDeclaratorType>();
		}

		vl::Ptr<CppDeleteExpr> AstVisitor::CopyNode(CppDeleteExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppDeleteExpr>();
		}

		vl::Ptr<CppExprOnly> AstVisitor::CopyNode(CppExprOnly* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppExprOnly>();
		}

		vl::Ptr<CppIfExpr> AstVisitor::CopyNode(CppIfExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppIfExpr>();
		}

		vl::Ptr<CppIndexExpr> AstVisitor::CopyNode(CppIndexExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppIndexExpr>();
		}

		vl::Ptr<CppNameIdentifier> AstVisitor::CopyNode(CppNameIdentifier* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppIdentifier*>(node)).Cast<CppNameIdentifier>();
		}

		vl::Ptr<CppNewExpr> AstVisitor::CopyNode(CppNewExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppNewExpr>();
		}

		vl::Ptr<CppNumericExprLiteral> AstVisitor::CopyNode(CppNumericExprLiteral* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppNumericExprLiteral>();
		}

		vl::Ptr<CppOperatorIdentifier> AstVisitor::CopyNode(CppOperatorIdentifier* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppIdentifier*>(node)).Cast<CppOperatorIdentifier>();
		}

		vl::Ptr<CppParenthesisExpr> AstVisitor::CopyNode(CppParenthesisExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppParenthesisExpr>();
		}

		vl::Ptr<CppPostfixUnaryExpr> AstVisitor::CopyNode(CppPostfixUnaryExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppPostfixUnaryExpr>();
		}

		vl::Ptr<CppPrefixUnaryExpr> AstVisitor::CopyNode(CppPrefixUnaryExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppPrefixUnaryExpr>();
		}

		vl::Ptr<CppPrimitiveExprLiteral> AstVisitor::CopyNode(CppPrimitiveExprLiteral* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppPrimitiveExprLiteral>();
		}

		vl::Ptr<CppPrimitiveType> AstVisitor::CopyNode(CppPrimitiveType* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppPrimitiveType>();
		}

		vl::Ptr<CppQualifiedName> AstVisitor::CopyNode(CppQualifiedName* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppQualifiedName>();
		}

		vl::Ptr<CppSizeofExpr> AstVisitor::CopyNode(CppSizeofExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppSizeofExpr>();
		}

		vl::Ptr<CppStringLiteral> AstVisitor::CopyNode(CppStringLiteral* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppStringLiteral>();
		}

		vl::Ptr<CppSysFuncExpr> AstVisitor::CopyNode(CppSysFuncExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppSysFuncExpr>();
		}

		vl::Ptr<CppThrowExpr> AstVisitor::CopyNode(CppThrowExpr* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppThrowExpr>();
		}

		vl::Ptr<CppTypeOnly> AstVisitor::CopyNode(CppTypeOnly* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppTypeOnly>();
		}

		vl::Ptr<CppVolatileType> AstVisitor::CopyNode(CppVolatileType* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<CppTypeOrExpr*>(node)).Cast<CppVolatileType>();
		}

	}
}
