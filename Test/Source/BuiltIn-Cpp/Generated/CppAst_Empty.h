/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_AST_EMPTY_VISITOR
#define VCZH_PARSER2_BUILTIN_CPP_AST_AST_EMPTY_VISITOR

#include "CppAst.h"

namespace cpp_parser
{
	namespace empty_visitor
	{
		/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
		class TypeOrExprVisitor : public vl::Object, public CppTypeOrExpr::IVisitor
		{
		protected:
			// Dispatch (virtual) --------------------------------
			virtual void Dispatch(CppQualifiedName* node) = 0;
			virtual void Dispatch(CppExprOnly* node) = 0;
			virtual void Dispatch(CppTypeOnly* node) = 0;

		public:
			// Visitor Members -----------------------------------
			void Visit(CppQualifiedName* node) override;
			void Visit(CppExprOnly* node) override;
			void Visit(CppTypeOnly* node) override;
		};

		/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
		class QualifiedNameVisitor : public vl::Object, public CppQualifiedName::IVisitor
		{
		protected:
			// Dispatch (virtual) --------------------------------

		public:
			// Visitor Members -----------------------------------
			void Visit(CppName* node) override;
			void Visit(CppOperatorName* node) override;
		};

		/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
		class ExprOnlyVisitor : public vl::Object, public CppExprOnly::IVisitor
		{
		protected:
			// Dispatch (virtual) --------------------------------

		public:
			// Visitor Members -----------------------------------
			void Visit(CppPrimitiveExprLiteral* node) override;
			void Visit(CppNumericExprLiteral* node) override;
			void Visit(CppStringLiteral* node) override;
		};

		/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
		class TypeOnlyVisitor : public vl::Object, public CppTypeOnly::IVisitor
		{
		protected:
			// Dispatch (virtual) --------------------------------

		public:
			// Visitor Members -----------------------------------
			void Visit(CppPrimitiveType* node) override;
			void Visit(CppConstType* node) override;
			void Visit(CppVolatileType* node) override;
		};

	}
}
#endif