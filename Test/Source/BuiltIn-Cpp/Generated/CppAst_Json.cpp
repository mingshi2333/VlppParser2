/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Json.h"

namespace cpp_parser
{
	namespace json_visitor
	{
		void AstVisitor::PrintFields(CppConstType* node)
		{
			BeginField(L"type");
			Print(node->type.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(CppExprOnly* node)
		{
		}
		void AstVisitor::PrintFields(CppFile* node)
		{
		}
		void AstVisitor::PrintFields(CppGenericArgument* node)
		{
			BeginField(L"argument");
			Print(node->argument.Obj());
			EndField();
			BeginField(L"variadic");
			WriteToken(node->variadic);
			EndField();
		}
		void AstVisitor::PrintFields(CppGenericArguments* node)
		{
			BeginField(L"arguments");
			BeginArray();
			for (auto&& listItem : node->arguments)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
		}
		void AstVisitor::PrintFields(CppIdentifier* node)
		{
		}
		void AstVisitor::PrintFields(CppNameIdentifier* node)
		{
			BeginField(L"kind");
			switch (node->kind)
			{
			case cpp_parser::CppNameKinds::Class:
				WriteString(L"Class");
				break;
			case cpp_parser::CppNameKinds::Dtor:
				WriteString(L"Dtor");
				break;
			case cpp_parser::CppNameKinds::Enum:
				WriteString(L"Enum");
				break;
			case cpp_parser::CppNameKinds::EnumClass:
				WriteString(L"EnumClass");
				break;
			case cpp_parser::CppNameKinds::Normal:
				WriteString(L"Normal");
				break;
			case cpp_parser::CppNameKinds::Struct:
				WriteString(L"Struct");
				break;
			case cpp_parser::CppNameKinds::Union:
				WriteString(L"Union");
				break;
			case cpp_parser::CppNameKinds::UserDefinedLiteral:
				WriteString(L"UserDefinedLiteral");
				break;
			default:
				WriteNull();
			}
			EndField();
			BeginField(L"name");
			WriteToken(node->name);
			EndField();
		}
		void AstVisitor::PrintFields(CppNumericExprLiteral* node)
		{
			BeginField(L"kind");
			switch (node->kind)
			{
			case cpp_parser::CppNumericExprLiteralKinds::Binary:
				WriteString(L"Binary");
				break;
			case cpp_parser::CppNumericExprLiteralKinds::Char:
				WriteString(L"Char");
				break;
			case cpp_parser::CppNumericExprLiteralKinds::Float:
				WriteString(L"Float");
				break;
			case cpp_parser::CppNumericExprLiteralKinds::FloatHex:
				WriteString(L"FloatHex");
				break;
			case cpp_parser::CppNumericExprLiteralKinds::Hex:
				WriteString(L"Hex");
				break;
			case cpp_parser::CppNumericExprLiteralKinds::Integer:
				WriteString(L"Integer");
				break;
			default:
				WriteNull();
			}
			EndField();
			BeginField(L"literal");
			WriteToken(node->literal);
			EndField();
		}
		void AstVisitor::PrintFields(CppOperatorIdentifier* node)
		{
			BeginField(L"op");
			switch (node->op)
			{
			case cpp_parser::CppOperators::And:
				WriteString(L"And");
				break;
			case cpp_parser::CppOperators::AndAssign:
				WriteString(L"AndAssign");
				break;
			case cpp_parser::CppOperators::Assign:
				WriteString(L"Assign");
				break;
			case cpp_parser::CppOperators::BitwiseAnd:
				WriteString(L"BitwiseAnd");
				break;
			case cpp_parser::CppOperators::BitwiseOr:
				WriteString(L"BitwiseOr");
				break;
			case cpp_parser::CppOperators::Bracket:
				WriteString(L"Bracket");
				break;
			case cpp_parser::CppOperators::Comma:
				WriteString(L"Comma");
				break;
			case cpp_parser::CppOperators::Decrease:
				WriteString(L"Decrease");
				break;
			case cpp_parser::CppOperators::Delete:
				WriteString(L"Delete");
				break;
			case cpp_parser::CppOperators::DeleteArray:
				WriteString(L"DeleteArray");
				break;
			case cpp_parser::CppOperators::Div:
				WriteString(L"Div");
				break;
			case cpp_parser::CppOperators::DivAssign:
				WriteString(L"DivAssign");
				break;
			case cpp_parser::CppOperators::EQ:
				WriteString(L"EQ");
				break;
			case cpp_parser::CppOperators::GE:
				WriteString(L"GE");
				break;
			case cpp_parser::CppOperators::GT:
				WriteString(L"GT");
				break;
			case cpp_parser::CppOperators::Increase:
				WriteString(L"Increase");
				break;
			case cpp_parser::CppOperators::LE:
				WriteString(L"LE");
				break;
			case cpp_parser::CppOperators::LT:
				WriteString(L"LT");
				break;
			case cpp_parser::CppOperators::LeftShift:
				WriteString(L"LeftShift");
				break;
			case cpp_parser::CppOperators::LeftShiftAssign:
				WriteString(L"LeftShiftAssign");
				break;
			case cpp_parser::CppOperators::Minus:
				WriteString(L"Minus");
				break;
			case cpp_parser::CppOperators::MinusAssign:
				WriteString(L"MinusAssign");
				break;
			case cpp_parser::CppOperators::Mod:
				WriteString(L"Mod");
				break;
			case cpp_parser::CppOperators::ModAssign:
				WriteString(L"ModAssign");
				break;
			case cpp_parser::CppOperators::Mul:
				WriteString(L"Mul");
				break;
			case cpp_parser::CppOperators::MulAssign:
				WriteString(L"MulAssign");
				break;
			case cpp_parser::CppOperators::NE:
				WriteString(L"NE");
				break;
			case cpp_parser::CppOperators::New:
				WriteString(L"New");
				break;
			case cpp_parser::CppOperators::NewArray:
				WriteString(L"NewArray");
				break;
			case cpp_parser::CppOperators::Not:
				WriteString(L"Not");
				break;
			case cpp_parser::CppOperators::Or:
				WriteString(L"Or");
				break;
			case cpp_parser::CppOperators::OrAssign:
				WriteString(L"OrAssign");
				break;
			case cpp_parser::CppOperators::Parantheses:
				WriteString(L"Parantheses");
				break;
			case cpp_parser::CppOperators::Plus:
				WriteString(L"Plus");
				break;
			case cpp_parser::CppOperators::PlusAssign:
				WriteString(L"PlusAssign");
				break;
			case cpp_parser::CppOperators::Pointer:
				WriteString(L"Pointer");
				break;
			case cpp_parser::CppOperators::PointerDeref:
				WriteString(L"PointerDeref");
				break;
			case cpp_parser::CppOperators::Revert:
				WriteString(L"Revert");
				break;
			case cpp_parser::CppOperators::RevertAssign:
				WriteString(L"RevertAssign");
				break;
			case cpp_parser::CppOperators::RightShift:
				WriteString(L"RightShift");
				break;
			case cpp_parser::CppOperators::RightShiftAssign:
				WriteString(L"RightShiftAssign");
				break;
			case cpp_parser::CppOperators::RoundBracket:
				WriteString(L"RoundBracket");
				break;
			case cpp_parser::CppOperators::Xor:
				WriteString(L"Xor");
				break;
			case cpp_parser::CppOperators::XorAssign:
				WriteString(L"XorAssign");
				break;
			default:
				WriteNull();
			}
			EndField();
		}
		void AstVisitor::PrintFields(CppPrimitiveExprLiteral* node)
		{
			BeginField(L"kind");
			switch (node->kind)
			{
			case cpp_parser::CppPrimitiveExprLiteralKinds::False:
				WriteString(L"False");
				break;
			case cpp_parser::CppPrimitiveExprLiteralKinds::Nullptr:
				WriteString(L"Nullptr");
				break;
			case cpp_parser::CppPrimitiveExprLiteralKinds::This:
				WriteString(L"This");
				break;
			case cpp_parser::CppPrimitiveExprLiteralKinds::True:
				WriteString(L"True");
				break;
			case cpp_parser::CppPrimitiveExprLiteralKinds::__Nullptr:
				WriteString(L"__Nullptr");
				break;
			default:
				WriteNull();
			}
			EndField();
		}
		void AstVisitor::PrintFields(CppPrimitiveType* node)
		{
			BeginField(L"kind");
			switch (node->kind)
			{
			case cpp_parser::CppPrimitiveTypeKinds::Neutral:
				WriteString(L"Neutral");
				break;
			case cpp_parser::CppPrimitiveTypeKinds::Signed:
				WriteString(L"Signed");
				break;
			case cpp_parser::CppPrimitiveTypeKinds::Unsigned:
				WriteString(L"Unsigned");
				break;
			default:
				WriteNull();
			}
			EndField();
			BeginField(L"literal1");
			WriteToken(node->literal1);
			EndField();
			BeginField(L"literal2");
			WriteToken(node->literal2);
			EndField();
		}
		void AstVisitor::PrintFields(CppQualifiedName* node)
		{
			BeginField(L"arguments");
			Print(node->arguments.Obj());
			EndField();
			BeginField(L"id");
			Print(node->id.Obj());
			EndField();
			BeginField(L"parent");
			Print(node->parent.Obj());
			EndField();
			BeginField(L"rootScope");
			WriteToken(node->rootScope);
			EndField();
		}
		void AstVisitor::PrintFields(CppStringLiteral* node)
		{
			BeginField(L"fragments");
			BeginArray();
			for (auto&& listItem : node->fragments)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
		}
		void AstVisitor::PrintFields(CppStringLiteralFragment* node)
		{
			BeginField(L"kind");
			switch (node->kind)
			{
			case cpp_parser::CppStringLiteralKinds::Macro_LPREFIX:
				WriteString(L"Macro_LPREFIX");
				break;
			case cpp_parser::CppStringLiteralKinds::String:
				WriteString(L"String");
				break;
			default:
				WriteNull();
			}
			EndField();
			BeginField(L"literal");
			WriteToken(node->literal);
			EndField();
		}
		void AstVisitor::PrintFields(CppTypeOnly* node)
		{
		}
		void AstVisitor::PrintFields(CppTypeOrExpr* node)
		{
		}
		void AstVisitor::PrintFields(CppVolatileType* node)
		{
			BeginField(L"type");
			Print(node->type.Obj());
			EndField();
		}

		void AstVisitor::Visit(CppExprOnly* node)
		{
			node->Accept(static_cast<CppExprOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppTypeOnly* node)
		{
			node->Accept(static_cast<CppTypeOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppQualifiedName* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"QualifiedName", node);
			PrintFields(static_cast<CppTypeOrExpr*>(node));
			PrintFields(static_cast<CppQualifiedName*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppPrimitiveExprLiteral* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"PrimitiveExprLiteral", node);
			PrintFields(static_cast<CppTypeOrExpr*>(node));
			PrintFields(static_cast<CppExprOnly*>(node));
			PrintFields(static_cast<CppPrimitiveExprLiteral*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppNumericExprLiteral* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"NumericExprLiteral", node);
			PrintFields(static_cast<CppTypeOrExpr*>(node));
			PrintFields(static_cast<CppExprOnly*>(node));
			PrintFields(static_cast<CppNumericExprLiteral*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppStringLiteral* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"StringLiteral", node);
			PrintFields(static_cast<CppTypeOrExpr*>(node));
			PrintFields(static_cast<CppExprOnly*>(node));
			PrintFields(static_cast<CppStringLiteral*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppPrimitiveType* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"PrimitiveType", node);
			PrintFields(static_cast<CppTypeOrExpr*>(node));
			PrintFields(static_cast<CppTypeOnly*>(node));
			PrintFields(static_cast<CppPrimitiveType*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppConstType* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"ConstType", node);
			PrintFields(static_cast<CppTypeOrExpr*>(node));
			PrintFields(static_cast<CppTypeOnly*>(node));
			PrintFields(static_cast<CppConstType*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppVolatileType* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"VolatileType", node);
			PrintFields(static_cast<CppTypeOrExpr*>(node));
			PrintFields(static_cast<CppTypeOnly*>(node));
			PrintFields(static_cast<CppVolatileType*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppNameIdentifier* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"NameIdentifier", node);
			PrintFields(static_cast<CppIdentifier*>(node));
			PrintFields(static_cast<CppNameIdentifier*>(node));
			EndObject();
		}

		void AstVisitor::Visit(CppOperatorIdentifier* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"OperatorIdentifier", node);
			PrintFields(static_cast<CppIdentifier*>(node));
			PrintFields(static_cast<CppOperatorIdentifier*>(node));
			EndObject();
		}

		AstVisitor::AstVisitor(vl::stream::StreamWriter& _writer)
			: vl::glr::JsonVisitorBase(_writer)
		{
		}

		void AstVisitor::Print(CppTypeOrExpr* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			node->Accept(static_cast<CppTypeOrExpr::IVisitor*>(this));
		}

		void AstVisitor::Print(CppIdentifier* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			node->Accept(static_cast<CppIdentifier::IVisitor*>(this));
		}

		void AstVisitor::Print(CppGenericArgument* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"GenericArgument", node);
			PrintFields(static_cast<CppGenericArgument*>(node));
			EndObject();
		}

		void AstVisitor::Print(CppGenericArguments* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"GenericArguments", node);
			PrintFields(static_cast<CppGenericArguments*>(node));
			EndObject();
		}

		void AstVisitor::Print(CppStringLiteralFragment* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"StringLiteralFragment", node);
			PrintFields(static_cast<CppStringLiteralFragment*>(node));
			EndObject();
		}

		void AstVisitor::Print(CppFile* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"File", node);
			PrintFields(static_cast<CppFile*>(node));
			EndObject();
		}

	}
}
