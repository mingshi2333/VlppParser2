/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Traverse.h"

namespace cpp_parser::traverse_visitor
{
	void AstVisitor::Traverse(vl::glr::ParsingToken& token) {}
	void AstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
	void AstVisitor::Traverse(CppAdvancedType* node) {}
	void AstVisitor::Traverse(CppBinaryExpr* node) {}
	void AstVisitor::Traverse(CppBlockStat* node) {}
	void AstVisitor::Traverse(CppBraceExpr* node) {}
	void AstVisitor::Traverse(CppBreakStat* node) {}
	void AstVisitor::Traverse(CppCallExpr* node) {}
	void AstVisitor::Traverse(CppCaseStat* node) {}
	void AstVisitor::Traverse(CppCastExpr* node) {}
	void AstVisitor::Traverse(CppClassBody* node) {}
	void AstVisitor::Traverse(CppClassDeclaration* node) {}
	void AstVisitor::Traverse(CppClassInheritance* node) {}
	void AstVisitor::Traverse(CppClassMemberPart* node) {}
	void AstVisitor::Traverse(CppConstType* node) {}
	void AstVisitor::Traverse(CppContinueStat* node) {}
	void AstVisitor::Traverse(CppDeclStat* node) {}
	void AstVisitor::Traverse(CppDeclaration* node) {}
	void AstVisitor::Traverse(CppDeclarator* node) {}
	void AstVisitor::Traverse(CppDeclaratorArrayPart* node) {}
	void AstVisitor::Traverse(CppDeclaratorFunctionPart* node) {}
	void AstVisitor::Traverse(CppDeclaratorFunctionPartBase* node) {}
	void AstVisitor::Traverse(CppDeclaratorFunctionPartBaseToResolve* node) {}
	void AstVisitor::Traverse(CppDeclaratorKeyword* node) {}
	void AstVisitor::Traverse(CppDeclaratorType* node) {}
	void AstVisitor::Traverse(CppDeclaratorVariablePart* node) {}
	void AstVisitor::Traverse(CppDeclaratorVariablePartBase* node) {}
	void AstVisitor::Traverse(CppDeclaratorVariablePartBaseToResolve* node) {}
	void AstVisitor::Traverse(CppDefaultStat* node) {}
	void AstVisitor::Traverse(CppDeleteExpr* node) {}
	void AstVisitor::Traverse(CppDoWhileStat* node) {}
	void AstVisitor::Traverse(CppEmptyStat* node) {}
	void AstVisitor::Traverse(CppEnumBody* node) {}
	void AstVisitor::Traverse(CppEnumDeclaration* node) {}
	void AstVisitor::Traverse(CppEnumItem* node) {}
	void AstVisitor::Traverse(CppExprOnly* node) {}
	void AstVisitor::Traverse(CppExprStat* node) {}
	void AstVisitor::Traverse(CppExternDeclaration* node) {}
	void AstVisitor::Traverse(CppFile* node) {}
	void AstVisitor::Traverse(CppForStat* node) {}
	void AstVisitor::Traverse(CppForStatConditionPart* node) {}
	void AstVisitor::Traverse(CppForStatIterateCondition* node) {}
	void AstVisitor::Traverse(CppForStatLoopCondition* node) {}
	void AstVisitor::Traverse(CppFriendTypeDeclaration* node) {}
	void AstVisitor::Traverse(CppFunctionKeyword* node) {}
	void AstVisitor::Traverse(CppGenericArgument* node) {}
	void AstVisitor::Traverse(CppGenericArguments* node) {}
	void AstVisitor::Traverse(CppGenericHeader* node) {}
	void AstVisitor::Traverse(CppGotoStat* node) {}
	void AstVisitor::Traverse(CppIdentifier* node) {}
	void AstVisitor::Traverse(CppIfElseStat* node) {}
	void AstVisitor::Traverse(CppIfExpr* node) {}
	void AstVisitor::Traverse(CppIndexExpr* node) {}
	void AstVisitor::Traverse(CppLabelStat* node) {}
	void AstVisitor::Traverse(CppLambdaCapture* node) {}
	void AstVisitor::Traverse(CppLambdaExpr* node) {}
	void AstVisitor::Traverse(CppNameIdentifier* node) {}
	void AstVisitor::Traverse(CppNamespaceDeclaration* node) {}
	void AstVisitor::Traverse(CppNamespaceName* node) {}
	void AstVisitor::Traverse(CppNewExpr* node) {}
	void AstVisitor::Traverse(CppNumericExprLiteral* node) {}
	void AstVisitor::Traverse(CppOperatorIdentifier* node) {}
	void AstVisitor::Traverse(CppOperatorTypeIdentifier* node) {}
	void AstVisitor::Traverse(CppOrdinaryGenericParameter* node) {}
	void AstVisitor::Traverse(CppParenthesisExpr* node) {}
	void AstVisitor::Traverse(CppPostfixUnaryExpr* node) {}
	void AstVisitor::Traverse(CppPrefixUnaryExpr* node) {}
	void AstVisitor::Traverse(CppPrimitiveExprLiteral* node) {}
	void AstVisitor::Traverse(CppPrimitiveType* node) {}
	void AstVisitor::Traverse(CppQualifiedName* node) {}
	void AstVisitor::Traverse(CppReturnStat* node) {}
	void AstVisitor::Traverse(CppSizeofExpr* node) {}
	void AstVisitor::Traverse(CppStatement* node) {}
	void AstVisitor::Traverse(CppStatementToResolve* node) {}
	void AstVisitor::Traverse(CppStaticAssertDeclaration* node) {}
	void AstVisitor::Traverse(CppStringLiteral* node) {}
	void AstVisitor::Traverse(CppStringLiteralFragment* node) {}
	void AstVisitor::Traverse(CppSwitchStat* node) {}
	void AstVisitor::Traverse(CppSysFuncExpr* node) {}
	void AstVisitor::Traverse(CppThrowExpr* node) {}
	void AstVisitor::Traverse(CppTryStat* node) {}
	void AstVisitor::Traverse(CppTryStatCatchPart* node) {}
	void AstVisitor::Traverse(CppTypeOnly* node) {}
	void AstVisitor::Traverse(CppTypeOrExpr* node) {}
	void AstVisitor::Traverse(CppTypeOrExprOrOthers* node) {}
	void AstVisitor::Traverse(CppTypeOrExprOrOthersToResolve* node) {}
	void AstVisitor::Traverse(CppTypeOrExprToResolve* node) {}
	void AstVisitor::Traverse(CppTypedefDeclaration* node) {}
	void AstVisitor::Traverse(CppUsingNamespaceDeclaration* node) {}
	void AstVisitor::Traverse(CppUsingTypeDeclaration* node) {}
	void AstVisitor::Traverse(CppUsingValueDeclaration* node) {}
	void AstVisitor::Traverse(CppVarBraceInit* node) {}
	void AstVisitor::Traverse(CppVarInit* node) {}
	void AstVisitor::Traverse(CppVarParanthesisInit* node) {}
	void AstVisitor::Traverse(CppVarStatInit* node) {}
	void AstVisitor::Traverse(CppVarStatInitItem* node) {}
	void AstVisitor::Traverse(CppVarValueInit* node) {}
	void AstVisitor::Traverse(CppVariablesDeclaration* node) {}
	void AstVisitor::Traverse(CppVariadicExpr* node) {}
	void AstVisitor::Traverse(CppVolatileType* node) {}
	void AstVisitor::Traverse(CppWhileStat* node) {}
	void AstVisitor::Traverse(Cpp__LeaveStat* node) {}
	void AstVisitor::Traverse(Cpp__TryStat* node) {}

	void AstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
	void AstVisitor::Finishing(CppAdvancedType* node) {}
	void AstVisitor::Finishing(CppBinaryExpr* node) {}
	void AstVisitor::Finishing(CppBlockStat* node) {}
	void AstVisitor::Finishing(CppBraceExpr* node) {}
	void AstVisitor::Finishing(CppBreakStat* node) {}
	void AstVisitor::Finishing(CppCallExpr* node) {}
	void AstVisitor::Finishing(CppCaseStat* node) {}
	void AstVisitor::Finishing(CppCastExpr* node) {}
	void AstVisitor::Finishing(CppClassBody* node) {}
	void AstVisitor::Finishing(CppClassDeclaration* node) {}
	void AstVisitor::Finishing(CppClassInheritance* node) {}
	void AstVisitor::Finishing(CppClassMemberPart* node) {}
	void AstVisitor::Finishing(CppConstType* node) {}
	void AstVisitor::Finishing(CppContinueStat* node) {}
	void AstVisitor::Finishing(CppDeclStat* node) {}
	void AstVisitor::Finishing(CppDeclaration* node) {}
	void AstVisitor::Finishing(CppDeclarator* node) {}
	void AstVisitor::Finishing(CppDeclaratorArrayPart* node) {}
	void AstVisitor::Finishing(CppDeclaratorFunctionPart* node) {}
	void AstVisitor::Finishing(CppDeclaratorFunctionPartBase* node) {}
	void AstVisitor::Finishing(CppDeclaratorFunctionPartBaseToResolve* node) {}
	void AstVisitor::Finishing(CppDeclaratorKeyword* node) {}
	void AstVisitor::Finishing(CppDeclaratorType* node) {}
	void AstVisitor::Finishing(CppDeclaratorVariablePart* node) {}
	void AstVisitor::Finishing(CppDeclaratorVariablePartBase* node) {}
	void AstVisitor::Finishing(CppDeclaratorVariablePartBaseToResolve* node) {}
	void AstVisitor::Finishing(CppDefaultStat* node) {}
	void AstVisitor::Finishing(CppDeleteExpr* node) {}
	void AstVisitor::Finishing(CppDoWhileStat* node) {}
	void AstVisitor::Finishing(CppEmptyStat* node) {}
	void AstVisitor::Finishing(CppEnumBody* node) {}
	void AstVisitor::Finishing(CppEnumDeclaration* node) {}
	void AstVisitor::Finishing(CppEnumItem* node) {}
	void AstVisitor::Finishing(CppExprOnly* node) {}
	void AstVisitor::Finishing(CppExprStat* node) {}
	void AstVisitor::Finishing(CppExternDeclaration* node) {}
	void AstVisitor::Finishing(CppFile* node) {}
	void AstVisitor::Finishing(CppForStat* node) {}
	void AstVisitor::Finishing(CppForStatConditionPart* node) {}
	void AstVisitor::Finishing(CppForStatIterateCondition* node) {}
	void AstVisitor::Finishing(CppForStatLoopCondition* node) {}
	void AstVisitor::Finishing(CppFriendTypeDeclaration* node) {}
	void AstVisitor::Finishing(CppFunctionKeyword* node) {}
	void AstVisitor::Finishing(CppGenericArgument* node) {}
	void AstVisitor::Finishing(CppGenericArguments* node) {}
	void AstVisitor::Finishing(CppGenericHeader* node) {}
	void AstVisitor::Finishing(CppGotoStat* node) {}
	void AstVisitor::Finishing(CppIdentifier* node) {}
	void AstVisitor::Finishing(CppIfElseStat* node) {}
	void AstVisitor::Finishing(CppIfExpr* node) {}
	void AstVisitor::Finishing(CppIndexExpr* node) {}
	void AstVisitor::Finishing(CppLabelStat* node) {}
	void AstVisitor::Finishing(CppLambdaCapture* node) {}
	void AstVisitor::Finishing(CppLambdaExpr* node) {}
	void AstVisitor::Finishing(CppNameIdentifier* node) {}
	void AstVisitor::Finishing(CppNamespaceDeclaration* node) {}
	void AstVisitor::Finishing(CppNamespaceName* node) {}
	void AstVisitor::Finishing(CppNewExpr* node) {}
	void AstVisitor::Finishing(CppNumericExprLiteral* node) {}
	void AstVisitor::Finishing(CppOperatorIdentifier* node) {}
	void AstVisitor::Finishing(CppOperatorTypeIdentifier* node) {}
	void AstVisitor::Finishing(CppOrdinaryGenericParameter* node) {}
	void AstVisitor::Finishing(CppParenthesisExpr* node) {}
	void AstVisitor::Finishing(CppPostfixUnaryExpr* node) {}
	void AstVisitor::Finishing(CppPrefixUnaryExpr* node) {}
	void AstVisitor::Finishing(CppPrimitiveExprLiteral* node) {}
	void AstVisitor::Finishing(CppPrimitiveType* node) {}
	void AstVisitor::Finishing(CppQualifiedName* node) {}
	void AstVisitor::Finishing(CppReturnStat* node) {}
	void AstVisitor::Finishing(CppSizeofExpr* node) {}
	void AstVisitor::Finishing(CppStatement* node) {}
	void AstVisitor::Finishing(CppStatementToResolve* node) {}
	void AstVisitor::Finishing(CppStaticAssertDeclaration* node) {}
	void AstVisitor::Finishing(CppStringLiteral* node) {}
	void AstVisitor::Finishing(CppStringLiteralFragment* node) {}
	void AstVisitor::Finishing(CppSwitchStat* node) {}
	void AstVisitor::Finishing(CppSysFuncExpr* node) {}
	void AstVisitor::Finishing(CppThrowExpr* node) {}
	void AstVisitor::Finishing(CppTryStat* node) {}
	void AstVisitor::Finishing(CppTryStatCatchPart* node) {}
	void AstVisitor::Finishing(CppTypeOnly* node) {}
	void AstVisitor::Finishing(CppTypeOrExpr* node) {}
	void AstVisitor::Finishing(CppTypeOrExprOrOthers* node) {}
	void AstVisitor::Finishing(CppTypeOrExprOrOthersToResolve* node) {}
	void AstVisitor::Finishing(CppTypeOrExprToResolve* node) {}
	void AstVisitor::Finishing(CppTypedefDeclaration* node) {}
	void AstVisitor::Finishing(CppUsingNamespaceDeclaration* node) {}
	void AstVisitor::Finishing(CppUsingTypeDeclaration* node) {}
	void AstVisitor::Finishing(CppUsingValueDeclaration* node) {}
	void AstVisitor::Finishing(CppVarBraceInit* node) {}
	void AstVisitor::Finishing(CppVarInit* node) {}
	void AstVisitor::Finishing(CppVarParanthesisInit* node) {}
	void AstVisitor::Finishing(CppVarStatInit* node) {}
	void AstVisitor::Finishing(CppVarStatInitItem* node) {}
	void AstVisitor::Finishing(CppVarValueInit* node) {}
	void AstVisitor::Finishing(CppVariablesDeclaration* node) {}
	void AstVisitor::Finishing(CppVariadicExpr* node) {}
	void AstVisitor::Finishing(CppVolatileType* node) {}
	void AstVisitor::Finishing(CppWhileStat* node) {}
	void AstVisitor::Finishing(Cpp__LeaveStat* node) {}
	void AstVisitor::Finishing(Cpp__TryStat* node) {}

	void AstVisitor::Visit(CppTypeOrExprOrOthersToResolve* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthersToResolve*>(node));
		for (auto&& listItem : node->candidates)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppTypeOrExprOrOthersToResolve*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeclaration* node)
	{
		node->Accept(static_cast<CppDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppTypeOrExpr* node)
	{
		node->Accept(static_cast<CppTypeOrExpr::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppGenericArgument* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppGenericArgument*>(node));
		InspectInto(node->argument.Obj());
		Traverse(node->variadic);
		Finishing(static_cast<CppGenericArgument*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppOrdinaryGenericParameter* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppOrdinaryGenericParameter*>(node));
		InspectInto(node->genericHeader.Obj());
		InspectInto(node->id.Obj());
		InspectInto(node->init.Obj());
		Traverse(node->typenameToken);
		Traverse(node->variadic);
		Finishing(static_cast<CppOrdinaryGenericParameter*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppVariablesDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppVariablesDeclaration*>(node));
		InspectInto(node->firstVarPart.Obj());
		InspectInto(node->type.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppVariablesDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppClassDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppClassDeclaration*>(node));
		InspectInto(node->body.Obj());
		Traverse(node->name);
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppClassDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppEnumDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppEnumDeclaration*>(node));
		InspectInto(node->body.Obj());
		Traverse(node->name);
		InspectInto(node->type.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppEnumDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppStaticAssertDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppStaticAssertDeclaration*>(node));
		InspectInto(node->expr.Obj());
		InspectInto(node->message.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppStaticAssertDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppTypedefDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppTypedefDeclaration*>(node));
		InspectInto(node->decl.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppTypedefDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppExternDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppExternDeclaration*>(node));
		for (auto&& listItem : node->decls)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppExternDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppNamespaceDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppNamespaceDeclaration*>(node));
		for (auto&& listItem : node->decls)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->names)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppNamespaceDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppUsingNamespaceDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppUsingNamespaceDeclaration*>(node));
		for (auto&& listItem : node->names)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppUsingNamespaceDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppUsingValueDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppUsingValueDeclaration*>(node));
		InspectInto(node->name.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppUsingValueDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppUsingTypeDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppUsingTypeDeclaration*>(node));
		Traverse(node->name);
		InspectInto(node->type.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppUsingTypeDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppFriendTypeDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppDeclaration*>(node));
		Traverse(static_cast<CppFriendTypeDeclaration*>(node));
		InspectInto(node->type.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppFriendTypeDeclaration*>(node));
		Finishing(static_cast<CppDeclaration*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppTypeOrExprToResolve* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppTypeOrExprToResolve*>(node));
		for (auto&& listItem : node->candidates)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppTypeOrExprToResolve*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppExprOnly* node)
	{
		node->Accept(static_cast<CppExprOnly::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppTypeOnly* node)
	{
		node->Accept(static_cast<CppTypeOnly::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppQualifiedName* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppQualifiedName*>(node));
		InspectInto(node->arguments.Obj());
		InspectInto(node->expr.Obj());
		InspectInto(node->id.Obj());
		InspectInto(node->parent.Obj());
		Finishing(static_cast<CppQualifiedName*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeclaratorType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppDeclaratorType*>(node));
		InspectInto(node->declarator.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->type.Obj());
		Finishing(static_cast<CppDeclaratorType*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppPrimitiveExprLiteral* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppPrimitiveExprLiteral*>(node));
		Finishing(static_cast<CppPrimitiveExprLiteral*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppNumericExprLiteral* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppNumericExprLiteral*>(node));
		Traverse(node->literal);
		Finishing(static_cast<CppNumericExprLiteral*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppStringLiteral* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppStringLiteral*>(node));
		for (auto&& listItem : node->fragments)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppStringLiteral*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppLambdaExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppLambdaExpr*>(node));
		for (auto&& listItem : node->captures)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->functionHeader.Obj());
		InspectInto(node->genericHeader.Obj());
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppLambdaExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppParenthesisExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppParenthesisExpr*>(node));
		InspectInto(node->expr.Obj());
		Finishing(static_cast<CppParenthesisExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppBraceExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppBraceExpr*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppBraceExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppCastExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppCastExpr*>(node));
		InspectInto(node->expr.Obj());
		Traverse(node->keyword);
		InspectInto(node->type.Obj());
		Finishing(static_cast<CppCastExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppSysFuncExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppSysFuncExpr*>(node));
		InspectInto(node->argument.Obj());
		Traverse(node->keyword);
		Traverse(node->variadic);
		Finishing(static_cast<CppSysFuncExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppSizeofExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppSizeofExpr*>(node));
		InspectInto(node->argument.Obj());
		Traverse(node->variadic);
		Finishing(static_cast<CppSizeofExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeleteExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppDeleteExpr*>(node));
		InspectInto(node->argument.Obj());
		Finishing(static_cast<CppDeleteExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppNewExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppNewExpr*>(node));
		for (auto&& listItem : node->arrayArguments)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->init.Obj());
		for (auto&& listItem : node->placementArguments)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->type)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppNewExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppPrefixUnaryExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppPrefixUnaryExpr*>(node));
		InspectInto(node->operand.Obj());
		Finishing(static_cast<CppPrefixUnaryExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppPostfixUnaryExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppPostfixUnaryExpr*>(node));
		InspectInto(node->operand.Obj());
		Finishing(static_cast<CppPostfixUnaryExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppIndexExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppIndexExpr*>(node));
		InspectInto(node->index.Obj());
		InspectInto(node->operand.Obj());
		Finishing(static_cast<CppIndexExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppCallExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppCallExpr*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->operand.Obj());
		Finishing(static_cast<CppCallExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppBinaryExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppBinaryExpr*>(node));
		InspectInto(node->left.Obj());
		InspectInto(node->right.Obj());
		Finishing(static_cast<CppBinaryExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppIfExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppIfExpr*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->falseBranch.Obj());
		InspectInto(node->trueBranch.Obj());
		Finishing(static_cast<CppIfExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppThrowExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppThrowExpr*>(node));
		InspectInto(node->argument.Obj());
		Finishing(static_cast<CppThrowExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppVariadicExpr* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppExprOnly*>(node));
		Traverse(static_cast<CppVariadicExpr*>(node));
		InspectInto(node->operand.Obj());
		Traverse(node->variadic);
		Finishing(static_cast<CppVariadicExpr*>(node));
		Finishing(static_cast<CppExprOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppPrimitiveType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppTypeOnly*>(node));
		Traverse(static_cast<CppPrimitiveType*>(node));
		Traverse(node->literal1);
		Traverse(node->literal2);
		Finishing(static_cast<CppPrimitiveType*>(node));
		Finishing(static_cast<CppTypeOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppConstType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppTypeOnly*>(node));
		Traverse(static_cast<CppConstType*>(node));
		InspectInto(node->type.Obj());
		Finishing(static_cast<CppConstType*>(node));
		Finishing(static_cast<CppTypeOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppVolatileType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
		Traverse(static_cast<CppTypeOrExpr*>(node));
		Traverse(static_cast<CppTypeOnly*>(node));
		Traverse(static_cast<CppVolatileType*>(node));
		InspectInto(node->type.Obj());
		Finishing(static_cast<CppVolatileType*>(node));
		Finishing(static_cast<CppTypeOnly*>(node));
		Finishing(static_cast<CppTypeOrExpr*>(node));
		Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppNameIdentifier* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppIdentifier*>(node));
		Traverse(static_cast<CppNameIdentifier*>(node));
		Traverse(node->name);
		Finishing(static_cast<CppNameIdentifier*>(node));
		Finishing(static_cast<CppIdentifier*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppOperatorIdentifier* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppIdentifier*>(node));
		Traverse(static_cast<CppOperatorIdentifier*>(node));
		Finishing(static_cast<CppOperatorIdentifier*>(node));
		Finishing(static_cast<CppIdentifier*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppOperatorTypeIdentifier* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppIdentifier*>(node));
		Traverse(static_cast<CppOperatorTypeIdentifier*>(node));
		InspectInto(node->type.Obj());
		Finishing(static_cast<CppOperatorTypeIdentifier*>(node));
		Finishing(static_cast<CppIdentifier*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeclaratorFunctionPartBaseToResolve* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppDeclaratorFunctionPartBase*>(node));
		Traverse(static_cast<CppDeclaratorFunctionPartBaseToResolve*>(node));
		for (auto&& listItem : node->candidates)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppDeclaratorFunctionPartBaseToResolve*>(node));
		Finishing(static_cast<CppDeclaratorFunctionPartBase*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeclaratorFunctionPart* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppDeclaratorFunctionPartBase*>(node));
		Traverse(static_cast<CppDeclaratorFunctionPart*>(node));
		InspectInto(node->deferredType.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->parameters)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->variadic);
		Finishing(static_cast<CppDeclaratorFunctionPart*>(node));
		Finishing(static_cast<CppDeclaratorFunctionPartBase*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppVarValueInit* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppVarInit*>(node));
		Traverse(static_cast<CppVarValueInit*>(node));
		InspectInto(node->expr.Obj());
		Finishing(static_cast<CppVarValueInit*>(node));
		Finishing(static_cast<CppVarInit*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppVarParanthesisInit* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppVarInit*>(node));
		Traverse(static_cast<CppVarParanthesisInit*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppVarParanthesisInit*>(node));
		Finishing(static_cast<CppVarInit*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppVarBraceInit* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppVarInit*>(node));
		Traverse(static_cast<CppVarBraceInit*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppVarBraceInit*>(node));
		Finishing(static_cast<CppVarInit*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppVarStatInit* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppVarInit*>(node));
		Traverse(static_cast<CppVarStatInit*>(node));
		for (auto&& listItem : node->initItems)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppVarStatInit*>(node));
		Finishing(static_cast<CppVarInit*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeclaratorVariablePartBaseToResolve* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppDeclaratorVariablePartBase*>(node));
		Traverse(static_cast<CppDeclaratorVariablePartBaseToResolve*>(node));
		for (auto&& listItem : node->candidates)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppDeclaratorVariablePartBaseToResolve*>(node));
		Finishing(static_cast<CppDeclaratorVariablePartBase*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeclaratorVariablePart* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppDeclaratorVariablePartBase*>(node));
		Traverse(static_cast<CppDeclaratorVariablePart*>(node));
		InspectInto(node->declarator.Obj());
		InspectInto(node->init.Obj());
		InspectInto(node->nextVarPart.Obj());
		Finishing(static_cast<CppDeclaratorVariablePart*>(node));
		Finishing(static_cast<CppDeclaratorVariablePartBase*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppStatementToResolve* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppStatementToResolve*>(node));
		for (auto&& listItem : node->candidates)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppStatementToResolve*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppEmptyStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppEmptyStat*>(node));
		Finishing(static_cast<CppEmptyStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppBlockStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppBlockStat*>(node));
		for (auto&& listItem : node->statements)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppBlockStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppExprStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppExprStat*>(node));
		InspectInto(node->expr.Obj());
		Finishing(static_cast<CppExprStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDeclStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppDeclStat*>(node));
		InspectInto(node->decl.Obj());
		Finishing(static_cast<CppDeclStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppBreakStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppBreakStat*>(node));
		Finishing(static_cast<CppBreakStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppContinueStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppContinueStat*>(node));
		Finishing(static_cast<CppContinueStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppReturnStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppReturnStat*>(node));
		InspectInto(node->expr.Obj());
		Finishing(static_cast<CppReturnStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppLabelStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppLabelStat*>(node));
		Traverse(node->label);
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppLabelStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppGotoStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppGotoStat*>(node));
		Traverse(node->label);
		Finishing(static_cast<CppGotoStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppCaseStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppCaseStat*>(node));
		InspectInto(node->expr.Obj());
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppCaseStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDefaultStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppDefaultStat*>(node));
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppDefaultStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(Cpp__LeaveStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<Cpp__LeaveStat*>(node));
		Finishing(static_cast<Cpp__LeaveStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppWhileStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppWhileStat*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppWhileStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppDoWhileStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppDoWhileStat*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppDoWhileStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppIfElseStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppIfElseStat*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->falseStat.Obj());
		InspectInto(node->trueStat.Obj());
		InspectInto(node->varsDecl.Obj());
		Finishing(static_cast<CppIfElseStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppForStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppForStat*>(node));
		InspectInto(node->conditionPart.Obj());
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppForStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppSwitchStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppSwitchStat*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppSwitchStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppTryStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<CppTryStat*>(node));
		for (auto&& listItem : node->catchParts)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->tryStat.Obj());
		Finishing(static_cast<CppTryStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(Cpp__TryStat* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStatement*>(node));
		Traverse(static_cast<Cpp__TryStat*>(node));
		InspectInto(node->exceptStat.Obj());
		InspectInto(node->filter.Obj());
		InspectInto(node->finallyStat.Obj());
		InspectInto(node->tryStat.Obj());
		Finishing(static_cast<Cpp__TryStat*>(node));
		Finishing(static_cast<CppStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppForStatLoopCondition* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppForStatConditionPart*>(node));
		Traverse(static_cast<CppForStatLoopCondition*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->sideEffect.Obj());
		InspectInto(node->varsDecl.Obj());
		Finishing(static_cast<CppForStatLoopCondition*>(node));
		Finishing(static_cast<CppForStatConditionPart*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(CppForStatIterateCondition* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppForStatConditionPart*>(node));
		Traverse(static_cast<CppForStatIterateCondition*>(node));
		InspectInto(node->collection.Obj());
		InspectInto(node->decl.Obj());
		Finishing(static_cast<CppForStatIterateCondition*>(node));
		Finishing(static_cast<CppForStatConditionPart*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppTypeOrExprOrOthers* node)
	{
		if (!node) return;
		node->Accept(static_cast<CppTypeOrExprOrOthers::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(CppIdentifier* node)
	{
		if (!node) return;
		node->Accept(static_cast<CppIdentifier::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(CppDeclaratorFunctionPartBase* node)
	{
		if (!node) return;
		node->Accept(static_cast<CppDeclaratorFunctionPartBase::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(CppVarInit* node)
	{
		if (!node) return;
		node->Accept(static_cast<CppVarInit::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(CppDeclaratorVariablePartBase* node)
	{
		if (!node) return;
		node->Accept(static_cast<CppDeclaratorVariablePartBase::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(CppStatement* node)
	{
		if (!node) return;
		node->Accept(static_cast<CppStatement::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(CppForStatConditionPart* node)
	{
		if (!node) return;
		node->Accept(static_cast<CppForStatConditionPart::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(CppGenericArguments* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppGenericArguments*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppGenericArguments*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppGenericHeader* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppGenericHeader*>(node));
		for (auto&& listItem : node->parameters)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppGenericHeader*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppStringLiteralFragment* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppStringLiteralFragment*>(node));
		Traverse(node->literal);
		Finishing(static_cast<CppStringLiteralFragment*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppLambdaCapture* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppLambdaCapture*>(node));
		InspectInto(node->id.Obj());
		InspectInto(node->init.Obj());
		Finishing(static_cast<CppLambdaCapture*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppAdvancedType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppAdvancedType*>(node));
		InspectInto(node->argument.Obj());
		Finishing(static_cast<CppAdvancedType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppDeclaratorKeyword* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppDeclaratorKeyword*>(node));
		Traverse(node->keyword);
		Finishing(static_cast<CppDeclaratorKeyword*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppFunctionKeyword* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppFunctionKeyword*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->keyword);
		Finishing(static_cast<CppFunctionKeyword*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppDeclaratorArrayPart* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppDeclaratorArrayPart*>(node));
		InspectInto(node->argument.Obj());
		Finishing(static_cast<CppDeclaratorArrayPart*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppDeclarator* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppDeclarator*>(node));
		for (auto&& listItem : node->advancedTypes)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->arrayParts)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->bitfield.Obj());
		InspectInto(node->funcPart.Obj());
		InspectInto(node->id.Obj());
		InspectInto(node->innerDeclarator.Obj());
		for (auto&& listItem : node->keywords)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->variadic);
		Finishing(static_cast<CppDeclarator*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppVarStatInitItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppVarStatInitItem*>(node));
		InspectInto(node->init.Obj());
		Traverse(node->name);
		Finishing(static_cast<CppVarStatInitItem*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppClassInheritance* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppClassInheritance*>(node));
		InspectInto(node->type.Obj());
		Finishing(static_cast<CppClassInheritance*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppClassMemberPart* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppClassMemberPart*>(node));
		for (auto&& listItem : node->decls)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppClassMemberPart*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppClassBody* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppClassBody*>(node));
		InspectInto(node->firstVarPart.Obj());
		for (auto&& listItem : node->inheritances)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->memberParts)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppClassBody*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppEnumItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppEnumItem*>(node));
		InspectInto(node->expr.Obj());
		Traverse(node->name);
		Finishing(static_cast<CppEnumItem*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppEnumBody* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppEnumBody*>(node));
		InspectInto(node->firstVarPart.Obj());
		for (auto&& listItem : node->items)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppEnumBody*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppNamespaceName* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppNamespaceName*>(node));
		Traverse(node->name);
		Finishing(static_cast<CppNamespaceName*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppTryStatCatchPart* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppTryStatCatchPart*>(node));
		InspectInto(node->decl.Obj());
		InspectInto(node->stat.Obj());
		Finishing(static_cast<CppTryStatCatchPart*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(CppFile* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<CppFile*>(node));
		for (auto&& listItem : node->decls)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<CppFile*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

}
