/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Traverse.h"

namespace cpp_parser
{
	namespace traverse_visitor
	{
		void AstVisitor::Traverse(vl::glr::ParsingToken& token) {}
		void AstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
		void AstVisitor::Traverse(CppBinaryExpr* node) {}
		void AstVisitor::Traverse(CppBraceExpr* node) {}
		void AstVisitor::Traverse(CppCallExpr* node) {}
		void AstVisitor::Traverse(CppCastExpr* node) {}
		void AstVisitor::Traverse(CppConstType* node) {}
		void AstVisitor::Traverse(CppDeleteExpr* node) {}
		void AstVisitor::Traverse(CppExprOnly* node) {}
		void AstVisitor::Traverse(CppFile* node) {}
		void AstVisitor::Traverse(CppGenericArgument* node) {}
		void AstVisitor::Traverse(CppGenericArguments* node) {}
		void AstVisitor::Traverse(CppIdentifier* node) {}
		void AstVisitor::Traverse(CppIfExpr* node) {}
		void AstVisitor::Traverse(CppIndexExpr* node) {}
		void AstVisitor::Traverse(CppNameIdentifier* node) {}
		void AstVisitor::Traverse(CppNewExpr* node) {}
		void AstVisitor::Traverse(CppNumericExprLiteral* node) {}
		void AstVisitor::Traverse(CppOperatorIdentifier* node) {}
		void AstVisitor::Traverse(CppParenthesisExpr* node) {}
		void AstVisitor::Traverse(CppPostfixUnaryExpr* node) {}
		void AstVisitor::Traverse(CppPrefixUnaryExpr* node) {}
		void AstVisitor::Traverse(CppPrimitiveExprLiteral* node) {}
		void AstVisitor::Traverse(CppPrimitiveType* node) {}
		void AstVisitor::Traverse(CppQualifiedName* node) {}
		void AstVisitor::Traverse(CppSizeofExpr* node) {}
		void AstVisitor::Traverse(CppStringLiteral* node) {}
		void AstVisitor::Traverse(CppStringLiteralFragment* node) {}
		void AstVisitor::Traverse(CppSysFuncExpr* node) {}
		void AstVisitor::Traverse(CppThrowExpr* node) {}
		void AstVisitor::Traverse(CppTypeOnly* node) {}
		void AstVisitor::Traverse(CppTypeOrExpr* node) {}
		void AstVisitor::Traverse(CppVolatileType* node) {}

		void AstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
		void AstVisitor::Finishing(CppBinaryExpr* node) {}
		void AstVisitor::Finishing(CppBraceExpr* node) {}
		void AstVisitor::Finishing(CppCallExpr* node) {}
		void AstVisitor::Finishing(CppCastExpr* node) {}
		void AstVisitor::Finishing(CppConstType* node) {}
		void AstVisitor::Finishing(CppDeleteExpr* node) {}
		void AstVisitor::Finishing(CppExprOnly* node) {}
		void AstVisitor::Finishing(CppFile* node) {}
		void AstVisitor::Finishing(CppGenericArgument* node) {}
		void AstVisitor::Finishing(CppGenericArguments* node) {}
		void AstVisitor::Finishing(CppIdentifier* node) {}
		void AstVisitor::Finishing(CppIfExpr* node) {}
		void AstVisitor::Finishing(CppIndexExpr* node) {}
		void AstVisitor::Finishing(CppNameIdentifier* node) {}
		void AstVisitor::Finishing(CppNewExpr* node) {}
		void AstVisitor::Finishing(CppNumericExprLiteral* node) {}
		void AstVisitor::Finishing(CppOperatorIdentifier* node) {}
		void AstVisitor::Finishing(CppParenthesisExpr* node) {}
		void AstVisitor::Finishing(CppPostfixUnaryExpr* node) {}
		void AstVisitor::Finishing(CppPrefixUnaryExpr* node) {}
		void AstVisitor::Finishing(CppPrimitiveExprLiteral* node) {}
		void AstVisitor::Finishing(CppPrimitiveType* node) {}
		void AstVisitor::Finishing(CppQualifiedName* node) {}
		void AstVisitor::Finishing(CppSizeofExpr* node) {}
		void AstVisitor::Finishing(CppStringLiteral* node) {}
		void AstVisitor::Finishing(CppStringLiteralFragment* node) {}
		void AstVisitor::Finishing(CppSysFuncExpr* node) {}
		void AstVisitor::Finishing(CppThrowExpr* node) {}
		void AstVisitor::Finishing(CppTypeOnly* node) {}
		void AstVisitor::Finishing(CppTypeOrExpr* node) {}
		void AstVisitor::Finishing(CppVolatileType* node) {}

		void AstVisitor::Visit(CppExprOnly* node)
		{
			node->Accept(static_cast<CppExprOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppTypeOnly* node)
		{
			node->Accept(static_cast<CppTypeOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppQualifiedName* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppQualifiedName*>(node));
			InspectInto(node->arguments.Obj());
			InspectInto(node->expr.Obj());
			InspectInto(node->id.Obj());
			InspectInto(node->parent.Obj());
			Finishing(static_cast<CppQualifiedName*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPrimitiveExprLiteral* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppPrimitiveExprLiteral*>(node));
			Finishing(static_cast<CppPrimitiveExprLiteral*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppNumericExprLiteral* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppNumericExprLiteral*>(node));
			Traverse(node->literal);
			Finishing(static_cast<CppNumericExprLiteral*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppStringLiteral* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppStringLiteral*>(node));
			for (auto&& listItem : node->fragments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppStringLiteral*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppParenthesisExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppParenthesisExpr*>(node));
			InspectInto(node->expr.Obj());
			Finishing(static_cast<CppParenthesisExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppBraceExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppBraceExpr*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppBraceExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppCastExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppCastExpr*>(node));
			InspectInto(node->expr.Obj());
			Traverse(node->keyword);
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppCastExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppSysFuncExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppSysFuncExpr*>(node));
			InspectInto(node->argument.Obj());
			Traverse(node->keyword);
			Traverse(node->variadic);
			Finishing(static_cast<CppSysFuncExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppSizeofExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppSizeofExpr*>(node));
			InspectInto(node->argument.Obj());
			Traverse(node->variadic);
			Finishing(static_cast<CppSizeofExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppDeleteExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppDeleteExpr*>(node));
			InspectInto(node->argument.Obj());
			Finishing(static_cast<CppDeleteExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppNewExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppNewExpr*>(node));
			for (auto&& listItem : node->initArguments)
			{
				InspectInto(listItem.Obj());
			}
			for (auto&& listItem : node->placementArguments)
			{
				InspectInto(listItem.Obj());
			}
			for (auto&& listItem : node->type)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppNewExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPrefixUnaryExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppPrefixUnaryExpr*>(node));
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppPrefixUnaryExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPostfixUnaryExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppPostfixUnaryExpr*>(node));
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppPostfixUnaryExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppIndexExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppIndexExpr*>(node));
			InspectInto(node->index.Obj());
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppIndexExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppCallExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppCallExpr*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppCallExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppBinaryExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppBinaryExpr*>(node));
			InspectInto(node->left.Obj());
			InspectInto(node->right.Obj());
			Finishing(static_cast<CppBinaryExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppIfExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppIfExpr*>(node));
			InspectInto(node->condition.Obj());
			InspectInto(node->falseBranch.Obj());
			InspectInto(node->trueBranch.Obj());
			Finishing(static_cast<CppIfExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppThrowExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppThrowExpr*>(node));
			InspectInto(node->argument.Obj());
			Finishing(static_cast<CppThrowExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPrimitiveType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppTypeOnly*>(node));
			Traverse(static_cast<CppPrimitiveType*>(node));
			Traverse(node->literal1);
			Traverse(node->literal2);
			Finishing(static_cast<CppPrimitiveType*>(node));
			Finishing(static_cast<CppTypeOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppConstType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppTypeOnly*>(node));
			Traverse(static_cast<CppConstType*>(node));
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppConstType*>(node));
			Finishing(static_cast<CppTypeOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppVolatileType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppTypeOnly*>(node));
			Traverse(static_cast<CppVolatileType*>(node));
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppVolatileType*>(node));
			Finishing(static_cast<CppTypeOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppNameIdentifier* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppIdentifier*>(node));
			Traverse(static_cast<CppNameIdentifier*>(node));
			Traverse(node->name);
			Finishing(static_cast<CppNameIdentifier*>(node));
			Finishing(static_cast<CppIdentifier*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppOperatorIdentifier* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppIdentifier*>(node));
			Traverse(static_cast<CppOperatorIdentifier*>(node));
			Finishing(static_cast<CppOperatorIdentifier*>(node));
			Finishing(static_cast<CppIdentifier*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppTypeOrExpr* node)
		{
			if (!node) return;
			node->Accept(static_cast<CppTypeOrExpr::IVisitor*>(this));
		}

		void AstVisitor::InspectInto(CppIdentifier* node)
		{
			if (!node) return;
			node->Accept(static_cast<CppIdentifier::IVisitor*>(this));
		}

		void AstVisitor::InspectInto(CppGenericArgument* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppGenericArgument*>(node));
			InspectInto(node->argument.Obj());
			Traverse(node->variadic);
			Finishing(static_cast<CppGenericArgument*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppGenericArguments* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppGenericArguments*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppGenericArguments*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppStringLiteralFragment* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStringLiteralFragment*>(node));
			Traverse(node->literal);
			Finishing(static_cast<CppStringLiteralFragment*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppFile* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppFile*>(node));
			Finishing(static_cast<CppFile*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

	}
}
