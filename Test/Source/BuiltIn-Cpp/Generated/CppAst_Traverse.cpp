/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Traverse.h"

namespace cpp_parser
{
	namespace traverse_visitor
	{
		void AstVisitor::Traverse(vl::glr::ParsingToken& token) {}
		void AstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
		void AstVisitor::Traverse(CppAdvancedType* node) {}
		void AstVisitor::Traverse(CppBinaryExpr* node) {}
		void AstVisitor::Traverse(CppBlockStat* node) {}
		void AstVisitor::Traverse(CppBraceExpr* node) {}
		void AstVisitor::Traverse(CppBreakStat* node) {}
		void AstVisitor::Traverse(CppCallExpr* node) {}
		void AstVisitor::Traverse(CppCaseStat* node) {}
		void AstVisitor::Traverse(CppCastExpr* node) {}
		void AstVisitor::Traverse(CppConstType* node) {}
		void AstVisitor::Traverse(CppContinueStat* node) {}
		void AstVisitor::Traverse(CppDeclaration* node) {}
		void AstVisitor::Traverse(CppDeclarator* node) {}
		void AstVisitor::Traverse(CppDeclaratorArrayPart* node) {}
		void AstVisitor::Traverse(CppDeclaratorFunctionPart* node) {}
		void AstVisitor::Traverse(CppDeclaratorKeyword* node) {}
		void AstVisitor::Traverse(CppDeclaratorType* node) {}
		void AstVisitor::Traverse(CppDefaultStat* node) {}
		void AstVisitor::Traverse(CppDeleteExpr* node) {}
		void AstVisitor::Traverse(CppEmptyStat* node) {}
		void AstVisitor::Traverse(CppExprOnly* node) {}
		void AstVisitor::Traverse(CppExprStat* node) {}
		void AstVisitor::Traverse(CppFile* node) {}
		void AstVisitor::Traverse(CppFunctionKeyword* node) {}
		void AstVisitor::Traverse(CppGenericArgument* node) {}
		void AstVisitor::Traverse(CppGenericArguments* node) {}
		void AstVisitor::Traverse(CppGotoStat* node) {}
		void AstVisitor::Traverse(CppIdentifier* node) {}
		void AstVisitor::Traverse(CppIfExpr* node) {}
		void AstVisitor::Traverse(CppIndexExpr* node) {}
		void AstVisitor::Traverse(CppLabelStat* node) {}
		void AstVisitor::Traverse(CppNameIdentifier* node) {}
		void AstVisitor::Traverse(CppNewExpr* node) {}
		void AstVisitor::Traverse(CppNumericExprLiteral* node) {}
		void AstVisitor::Traverse(CppOperatorIdentifier* node) {}
		void AstVisitor::Traverse(CppParenthesisExpr* node) {}
		void AstVisitor::Traverse(CppPostfixUnaryExpr* node) {}
		void AstVisitor::Traverse(CppPrefixUnaryExpr* node) {}
		void AstVisitor::Traverse(CppPrimitiveExprLiteral* node) {}
		void AstVisitor::Traverse(CppPrimitiveType* node) {}
		void AstVisitor::Traverse(CppQualifiedName* node) {}
		void AstVisitor::Traverse(CppReturnStat* node) {}
		void AstVisitor::Traverse(CppSingleVarDeclaration* node) {}
		void AstVisitor::Traverse(CppSizeofExpr* node) {}
		void AstVisitor::Traverse(CppStatement* node) {}
		void AstVisitor::Traverse(CppStaticAssertStat* node) {}
		void AstVisitor::Traverse(CppStringLiteral* node) {}
		void AstVisitor::Traverse(CppStringLiteralFragment* node) {}
		void AstVisitor::Traverse(CppSysFuncExpr* node) {}
		void AstVisitor::Traverse(CppThrowExpr* node) {}
		void AstVisitor::Traverse(CppTypeOnly* node) {}
		void AstVisitor::Traverse(CppTypeOrExpr* node) {}
		void AstVisitor::Traverse(CppTypeOrExprOrOthers* node) {}
		void AstVisitor::Traverse(CppVarBraceInit* node) {}
		void AstVisitor::Traverse(CppVarInit* node) {}
		void AstVisitor::Traverse(CppVarParanthesisInit* node) {}
		void AstVisitor::Traverse(CppVarValueInit* node) {}
		void AstVisitor::Traverse(CppVariadicExpr* node) {}
		void AstVisitor::Traverse(CppVolatileType* node) {}
		void AstVisitor::Traverse(Cpp__LeaveStat* node) {}

		void AstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
		void AstVisitor::Finishing(CppAdvancedType* node) {}
		void AstVisitor::Finishing(CppBinaryExpr* node) {}
		void AstVisitor::Finishing(CppBlockStat* node) {}
		void AstVisitor::Finishing(CppBraceExpr* node) {}
		void AstVisitor::Finishing(CppBreakStat* node) {}
		void AstVisitor::Finishing(CppCallExpr* node) {}
		void AstVisitor::Finishing(CppCaseStat* node) {}
		void AstVisitor::Finishing(CppCastExpr* node) {}
		void AstVisitor::Finishing(CppConstType* node) {}
		void AstVisitor::Finishing(CppContinueStat* node) {}
		void AstVisitor::Finishing(CppDeclaration* node) {}
		void AstVisitor::Finishing(CppDeclarator* node) {}
		void AstVisitor::Finishing(CppDeclaratorArrayPart* node) {}
		void AstVisitor::Finishing(CppDeclaratorFunctionPart* node) {}
		void AstVisitor::Finishing(CppDeclaratorKeyword* node) {}
		void AstVisitor::Finishing(CppDeclaratorType* node) {}
		void AstVisitor::Finishing(CppDefaultStat* node) {}
		void AstVisitor::Finishing(CppDeleteExpr* node) {}
		void AstVisitor::Finishing(CppEmptyStat* node) {}
		void AstVisitor::Finishing(CppExprOnly* node) {}
		void AstVisitor::Finishing(CppExprStat* node) {}
		void AstVisitor::Finishing(CppFile* node) {}
		void AstVisitor::Finishing(CppFunctionKeyword* node) {}
		void AstVisitor::Finishing(CppGenericArgument* node) {}
		void AstVisitor::Finishing(CppGenericArguments* node) {}
		void AstVisitor::Finishing(CppGotoStat* node) {}
		void AstVisitor::Finishing(CppIdentifier* node) {}
		void AstVisitor::Finishing(CppIfExpr* node) {}
		void AstVisitor::Finishing(CppIndexExpr* node) {}
		void AstVisitor::Finishing(CppLabelStat* node) {}
		void AstVisitor::Finishing(CppNameIdentifier* node) {}
		void AstVisitor::Finishing(CppNewExpr* node) {}
		void AstVisitor::Finishing(CppNumericExprLiteral* node) {}
		void AstVisitor::Finishing(CppOperatorIdentifier* node) {}
		void AstVisitor::Finishing(CppParenthesisExpr* node) {}
		void AstVisitor::Finishing(CppPostfixUnaryExpr* node) {}
		void AstVisitor::Finishing(CppPrefixUnaryExpr* node) {}
		void AstVisitor::Finishing(CppPrimitiveExprLiteral* node) {}
		void AstVisitor::Finishing(CppPrimitiveType* node) {}
		void AstVisitor::Finishing(CppQualifiedName* node) {}
		void AstVisitor::Finishing(CppReturnStat* node) {}
		void AstVisitor::Finishing(CppSingleVarDeclaration* node) {}
		void AstVisitor::Finishing(CppSizeofExpr* node) {}
		void AstVisitor::Finishing(CppStatement* node) {}
		void AstVisitor::Finishing(CppStaticAssertStat* node) {}
		void AstVisitor::Finishing(CppStringLiteral* node) {}
		void AstVisitor::Finishing(CppStringLiteralFragment* node) {}
		void AstVisitor::Finishing(CppSysFuncExpr* node) {}
		void AstVisitor::Finishing(CppThrowExpr* node) {}
		void AstVisitor::Finishing(CppTypeOnly* node) {}
		void AstVisitor::Finishing(CppTypeOrExpr* node) {}
		void AstVisitor::Finishing(CppTypeOrExprOrOthers* node) {}
		void AstVisitor::Finishing(CppVarBraceInit* node) {}
		void AstVisitor::Finishing(CppVarInit* node) {}
		void AstVisitor::Finishing(CppVarParanthesisInit* node) {}
		void AstVisitor::Finishing(CppVarValueInit* node) {}
		void AstVisitor::Finishing(CppVariadicExpr* node) {}
		void AstVisitor::Finishing(CppVolatileType* node) {}
		void AstVisitor::Finishing(Cpp__LeaveStat* node) {}

		void AstVisitor::Visit(CppDeclaration* node)
		{
			node->Accept(static_cast<CppDeclaration::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppTypeOrExpr* node)
		{
			node->Accept(static_cast<CppTypeOrExpr::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppGenericArgument* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppGenericArgument*>(node));
			InspectInto(node->argument.Obj());
			Traverse(node->variadic);
			Finishing(static_cast<CppGenericArgument*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppSingleVarDeclaration* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppDeclaration*>(node));
			Traverse(static_cast<CppSingleVarDeclaration*>(node));
			InspectInto(node->declarator.Obj());
			InspectInto(node->init.Obj());
			for (auto&& listItem : node->keywords)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppSingleVarDeclaration*>(node));
			Finishing(static_cast<CppDeclaration*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppExprOnly* node)
		{
			node->Accept(static_cast<CppExprOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppTypeOnly* node)
		{
			node->Accept(static_cast<CppTypeOnly::IVisitor*>(this));
		}

		void AstVisitor::Visit(CppQualifiedName* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppQualifiedName*>(node));
			InspectInto(node->arguments.Obj());
			InspectInto(node->expr.Obj());
			InspectInto(node->id.Obj());
			InspectInto(node->parent.Obj());
			Finishing(static_cast<CppQualifiedName*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppDeclaratorType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppDeclaratorType*>(node));
			InspectInto(node->declarator.Obj());
			for (auto&& listItem : node->keywords)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppDeclaratorType*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPrimitiveExprLiteral* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppPrimitiveExprLiteral*>(node));
			Finishing(static_cast<CppPrimitiveExprLiteral*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppNumericExprLiteral* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppNumericExprLiteral*>(node));
			Traverse(node->literal);
			Finishing(static_cast<CppNumericExprLiteral*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppStringLiteral* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppStringLiteral*>(node));
			for (auto&& listItem : node->fragments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppStringLiteral*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppParenthesisExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppParenthesisExpr*>(node));
			InspectInto(node->expr.Obj());
			Finishing(static_cast<CppParenthesisExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppBraceExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppBraceExpr*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppBraceExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppCastExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppCastExpr*>(node));
			InspectInto(node->expr.Obj());
			Traverse(node->keyword);
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppCastExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppSysFuncExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppSysFuncExpr*>(node));
			InspectInto(node->argument.Obj());
			Traverse(node->keyword);
			Traverse(node->variadic);
			Finishing(static_cast<CppSysFuncExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppSizeofExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppSizeofExpr*>(node));
			InspectInto(node->argument.Obj());
			Traverse(node->variadic);
			Finishing(static_cast<CppSizeofExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppDeleteExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppDeleteExpr*>(node));
			InspectInto(node->argument.Obj());
			Finishing(static_cast<CppDeleteExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppNewExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppNewExpr*>(node));
			InspectInto(node->init.Obj());
			for (auto&& listItem : node->placementArguments)
			{
				InspectInto(listItem.Obj());
			}
			for (auto&& listItem : node->type)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppNewExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPrefixUnaryExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppPrefixUnaryExpr*>(node));
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppPrefixUnaryExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPostfixUnaryExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppPostfixUnaryExpr*>(node));
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppPostfixUnaryExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppIndexExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppIndexExpr*>(node));
			InspectInto(node->index.Obj());
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppIndexExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppCallExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppCallExpr*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->operand.Obj());
			Finishing(static_cast<CppCallExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppBinaryExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppBinaryExpr*>(node));
			InspectInto(node->left.Obj());
			InspectInto(node->right.Obj());
			Finishing(static_cast<CppBinaryExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppIfExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppIfExpr*>(node));
			InspectInto(node->condition.Obj());
			InspectInto(node->falseBranch.Obj());
			InspectInto(node->trueBranch.Obj());
			Finishing(static_cast<CppIfExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppThrowExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppThrowExpr*>(node));
			InspectInto(node->argument.Obj());
			Finishing(static_cast<CppThrowExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppVariadicExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppExprOnly*>(node));
			Traverse(static_cast<CppVariadicExpr*>(node));
			InspectInto(node->operand.Obj());
			Traverse(node->variadic);
			Finishing(static_cast<CppVariadicExpr*>(node));
			Finishing(static_cast<CppExprOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppPrimitiveType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppTypeOnly*>(node));
			Traverse(static_cast<CppPrimitiveType*>(node));
			Traverse(node->literal1);
			Traverse(node->literal2);
			Finishing(static_cast<CppPrimitiveType*>(node));
			Finishing(static_cast<CppTypeOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppConstType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppTypeOnly*>(node));
			Traverse(static_cast<CppConstType*>(node));
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppConstType*>(node));
			Finishing(static_cast<CppTypeOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppVolatileType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppTypeOrExprOrOthers*>(node));
			Traverse(static_cast<CppTypeOrExpr*>(node));
			Traverse(static_cast<CppTypeOnly*>(node));
			Traverse(static_cast<CppVolatileType*>(node));
			InspectInto(node->type.Obj());
			Finishing(static_cast<CppVolatileType*>(node));
			Finishing(static_cast<CppTypeOnly*>(node));
			Finishing(static_cast<CppTypeOrExpr*>(node));
			Finishing(static_cast<CppTypeOrExprOrOthers*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppNameIdentifier* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppIdentifier*>(node));
			Traverse(static_cast<CppNameIdentifier*>(node));
			Traverse(node->name);
			Finishing(static_cast<CppNameIdentifier*>(node));
			Finishing(static_cast<CppIdentifier*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppOperatorIdentifier* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppIdentifier*>(node));
			Traverse(static_cast<CppOperatorIdentifier*>(node));
			Finishing(static_cast<CppOperatorIdentifier*>(node));
			Finishing(static_cast<CppIdentifier*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppVarValueInit* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppVarInit*>(node));
			Traverse(static_cast<CppVarValueInit*>(node));
			InspectInto(node->expr.Obj());
			Finishing(static_cast<CppVarValueInit*>(node));
			Finishing(static_cast<CppVarInit*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppVarParanthesisInit* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppVarInit*>(node));
			Traverse(static_cast<CppVarParanthesisInit*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppVarParanthesisInit*>(node));
			Finishing(static_cast<CppVarInit*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppVarBraceInit* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppVarInit*>(node));
			Traverse(static_cast<CppVarBraceInit*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppVarBraceInit*>(node));
			Finishing(static_cast<CppVarInit*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppEmptyStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppEmptyStat*>(node));
			Finishing(static_cast<CppEmptyStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppBlockStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppBlockStat*>(node));
			for (auto&& listItem : node->statements)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppBlockStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppExprStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppExprStat*>(node));
			InspectInto(node->expr.Obj());
			Finishing(static_cast<CppExprStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppBreakStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppBreakStat*>(node));
			Finishing(static_cast<CppBreakStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppContinueStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppContinueStat*>(node));
			Finishing(static_cast<CppContinueStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppReturnStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppReturnStat*>(node));
			InspectInto(node->expr.Obj());
			Finishing(static_cast<CppReturnStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppLabelStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppLabelStat*>(node));
			Traverse(node->label);
			InspectInto(node->stat.Obj());
			Finishing(static_cast<CppLabelStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppGotoStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppGotoStat*>(node));
			Traverse(node->label);
			Finishing(static_cast<CppGotoStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppCaseStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppCaseStat*>(node));
			InspectInto(node->expr.Obj());
			InspectInto(node->stat.Obj());
			Finishing(static_cast<CppCaseStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppDefaultStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppDefaultStat*>(node));
			InspectInto(node->stat.Obj());
			Finishing(static_cast<CppDefaultStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(Cpp__LeaveStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<Cpp__LeaveStat*>(node));
			Finishing(static_cast<Cpp__LeaveStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(CppStaticAssertStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStatement*>(node));
			Traverse(static_cast<CppStaticAssertStat*>(node));
			InspectInto(node->expr.Obj());
			InspectInto(node->message.Obj());
			Finishing(static_cast<CppStaticAssertStat*>(node));
			Finishing(static_cast<CppStatement*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppTypeOrExprOrOthers* node)
		{
			if (!node) return;
			node->Accept(static_cast<CppTypeOrExprOrOthers::IVisitor*>(this));
		}

		void AstVisitor::InspectInto(CppIdentifier* node)
		{
			if (!node) return;
			node->Accept(static_cast<CppIdentifier::IVisitor*>(this));
		}

		void AstVisitor::InspectInto(CppVarInit* node)
		{
			if (!node) return;
			node->Accept(static_cast<CppVarInit::IVisitor*>(this));
		}

		void AstVisitor::InspectInto(CppStatement* node)
		{
			if (!node) return;
			node->Accept(static_cast<CppStatement::IVisitor*>(this));
		}

		void AstVisitor::InspectInto(CppGenericArguments* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppGenericArguments*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<CppGenericArguments*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppStringLiteralFragment* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppStringLiteralFragment*>(node));
			Traverse(node->literal);
			Finishing(static_cast<CppStringLiteralFragment*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppAdvancedType* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppAdvancedType*>(node));
			InspectInto(node->argument.Obj());
			Finishing(static_cast<CppAdvancedType*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppDeclaratorKeyword* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppDeclaratorKeyword*>(node));
			Traverse(node->keyword);
			Finishing(static_cast<CppDeclaratorKeyword*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppFunctionKeyword* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppFunctionKeyword*>(node));
			for (auto&& listItem : node->arguments)
			{
				InspectInto(listItem.Obj());
			}
			Traverse(node->keyword);
			Finishing(static_cast<CppFunctionKeyword*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppDeclaratorFunctionPart* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppDeclaratorFunctionPart*>(node));
			InspectInto(node->deferredType.Obj());
			for (auto&& listItem : node->keywords)
			{
				InspectInto(listItem.Obj());
			}
			for (auto&& listItem : node->parameters)
			{
				InspectInto(listItem.Obj());
			}
			Traverse(node->variadic);
			Finishing(static_cast<CppDeclaratorFunctionPart*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppDeclaratorArrayPart* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppDeclaratorArrayPart*>(node));
			InspectInto(node->argument.Obj());
			Finishing(static_cast<CppDeclaratorArrayPart*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppDeclarator* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppDeclarator*>(node));
			for (auto&& listItem : node->advancedTypes)
			{
				InspectInto(listItem.Obj());
			}
			for (auto&& listItem : node->arrayParts)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->funcPart.Obj());
			InspectInto(node->id.Obj());
			InspectInto(node->innerDeclarator.Obj());
			for (auto&& listItem : node->keywords)
			{
				InspectInto(listItem.Obj());
			}
			Traverse(node->variadic);
			Finishing(static_cast<CppDeclarator*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(CppFile* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<CppFile*>(node));
			Finishing(static_cast<CppFile*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

	}
}
