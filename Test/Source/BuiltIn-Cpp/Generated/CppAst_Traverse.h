/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_AST_TRAVERSE_VISITOR
#define VCZH_PARSER2_BUILTIN_CPP_AST_AST_TRAVERSE_VISITOR

#include "CppAst.h"

namespace cpp_parser
{
	namespace traverse_visitor
	{
		/// <summary>A traverse visitor, overriding all abstract methods with AST visiting code.</summary>
		class AstVisitor
			: public vl::Object
			, protected virtual CppTypeOrExpr::IVisitor
			, protected virtual CppExprOnly::IVisitor
			, protected virtual CppTypeOnly::IVisitor
			, protected virtual CppIdentifier::IVisitor
		{
		protected:
			virtual void Traverse(vl::glr::ParsingToken& token);
			virtual void Traverse(vl::glr::ParsingAstBase* node);
			virtual void Traverse(CppBinaryExpr* node);
			virtual void Traverse(CppBraceExpr* node);
			virtual void Traverse(CppCastExpr* node);
			virtual void Traverse(CppConstType* node);
			virtual void Traverse(CppExprOnly* node);
			virtual void Traverse(CppFile* node);
			virtual void Traverse(CppGenericArgument* node);
			virtual void Traverse(CppGenericArguments* node);
			virtual void Traverse(CppIdentifier* node);
			virtual void Traverse(CppNameIdentifier* node);
			virtual void Traverse(CppNumericExprLiteral* node);
			virtual void Traverse(CppOperatorIdentifier* node);
			virtual void Traverse(CppParenthesisExpr* node);
			virtual void Traverse(CppPostfixUnaryExpr* node);
			virtual void Traverse(CppPrefixUnaryExpr* node);
			virtual void Traverse(CppPrimitiveExprLiteral* node);
			virtual void Traverse(CppPrimitiveType* node);
			virtual void Traverse(CppQualifiedName* node);
			virtual void Traverse(CppStringLiteral* node);
			virtual void Traverse(CppStringLiteralFragment* node);
			virtual void Traverse(CppSysFuncExpr* node);
			virtual void Traverse(CppTypeOnly* node);
			virtual void Traverse(CppTypeOrExpr* node);
			virtual void Traverse(CppVolatileType* node);

		protected:
			virtual void Finishing(vl::glr::ParsingAstBase* node);
			virtual void Finishing(CppBinaryExpr* node);
			virtual void Finishing(CppBraceExpr* node);
			virtual void Finishing(CppCastExpr* node);
			virtual void Finishing(CppConstType* node);
			virtual void Finishing(CppExprOnly* node);
			virtual void Finishing(CppFile* node);
			virtual void Finishing(CppGenericArgument* node);
			virtual void Finishing(CppGenericArguments* node);
			virtual void Finishing(CppIdentifier* node);
			virtual void Finishing(CppNameIdentifier* node);
			virtual void Finishing(CppNumericExprLiteral* node);
			virtual void Finishing(CppOperatorIdentifier* node);
			virtual void Finishing(CppParenthesisExpr* node);
			virtual void Finishing(CppPostfixUnaryExpr* node);
			virtual void Finishing(CppPrefixUnaryExpr* node);
			virtual void Finishing(CppPrimitiveExprLiteral* node);
			virtual void Finishing(CppPrimitiveType* node);
			virtual void Finishing(CppQualifiedName* node);
			virtual void Finishing(CppStringLiteral* node);
			virtual void Finishing(CppStringLiteralFragment* node);
			virtual void Finishing(CppSysFuncExpr* node);
			virtual void Finishing(CppTypeOnly* node);
			virtual void Finishing(CppTypeOrExpr* node);
			virtual void Finishing(CppVolatileType* node);

		protected:
			void Visit(CppExprOnly* node) override;
			void Visit(CppTypeOnly* node) override;
			void Visit(CppQualifiedName* node) override;

			void Visit(CppPrimitiveExprLiteral* node) override;
			void Visit(CppNumericExprLiteral* node) override;
			void Visit(CppStringLiteral* node) override;
			void Visit(CppParenthesisExpr* node) override;
			void Visit(CppBraceExpr* node) override;
			void Visit(CppCastExpr* node) override;
			void Visit(CppSysFuncExpr* node) override;
			void Visit(CppPrefixUnaryExpr* node) override;
			void Visit(CppPostfixUnaryExpr* node) override;
			void Visit(CppBinaryExpr* node) override;

			void Visit(CppPrimitiveType* node) override;
			void Visit(CppConstType* node) override;
			void Visit(CppVolatileType* node) override;

			void Visit(CppNameIdentifier* node) override;
			void Visit(CppOperatorIdentifier* node) override;

		public:
			void InspectInto(CppTypeOrExpr* node);
			void InspectInto(CppIdentifier* node);
			void InspectInto(CppGenericArgument* node);
			void InspectInto(CppGenericArguments* node);
			void InspectInto(CppStringLiteralFragment* node);
			void InspectInto(CppFile* node);
		};
	}
}
#endif