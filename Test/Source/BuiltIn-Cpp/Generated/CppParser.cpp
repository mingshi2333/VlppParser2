/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppParser.h"

namespace cpp_parser
{
	void CppParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 550; // 7035 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 38;
		static const vl::vint dataSolidRows = 2;
		static const vl::vint dataRows = 3;
		static const char* compressed[] = {
			"\x7B\x1B\x00\x00\x1E\x02\x00\x00\x88\x00\x01\x82\x80\x01\x03\x82\x81\x82\x06\x89\x82\x9E\x48\x83\x83\x7F\x87\x10\x8F\x8A\x80\x01\x89\x8B\x89\x8A\x10\x97\x98\x9F\x7A\x88\x8D\x8F\x8A\x1F\x96\x8A\x9B\x8C\x8B\x93\x8D\x90\x19\xA6\x9E\x8A\x90\x94\x96\x91\x84\x24\xA8\x92\x8E\x99\x90\x9B\x92\x9A\x33\xB6\xAB\x9A\x9D\x94\x9F\x96\x83\x31\xB8\xA5\x9E\x95\x98\xA3\x9A\xA2\x39\xC6\xBB\x8A\xAD\x9C\xA7\x9E\x87\x47\xCE\x85\xB0\xAB\xA4\xA9\xA6\xAB\x4F\x82\x81\xA8\xA3\xA2\xA9\xA4\xAC\x53\xDA\x91\xA0\xBF\xAA\xB1\xAA\xB3\x57\xE8\x99\xA1\x8B\xAE\xAD\xAE\xB2\x6F\xEA\xA1\xAC\xB3\xB2\xB9\xB2\xBA\x67\xF8\xA9\xBA\xBB\xB4\x89\xBA\xBE\x73\xFE\xB9\xA2\xCB\xBC\xC1\xBF\xB6\x70\xB2\xB1\xA0\xC7\xBE\xC1\xC0\xC4\x76\x8B\xCE\xCD\xC0\xCC\xC6\xC9\xCA\x93\x97\xFF\xB9\xCA\xC5\xCE\xA0\xCF\x5C\xA0\xEE\xA2\xD9\xC7\xCE\xD3\xD0\xA7\xA3\xE9\xC5\xD8\xD5\xD6\xD4\xD7\xAC\xAF\xF2\xD1\xD4\xD9\xC8\xD2\xDB\xAB\xB8\xF0\xDA\xD3\xDC\xDD\xDA\xCB\xB7\xC0\xF9\xC2\xEB\xDB\x89\x81\x86\xBF\x9C\xC3\xEA\xE5\xE4\xE5\xDE\xE2\xCF\xCE\xC9\xF8\xC4\xEB\xCD\xEB\xC1\xD7\x85\xD9\xE7",
			"\xC6\xED\xEC\xEC\xEF\xDA\xE0\xDC\xFF\xE4\xF1\xF1\xF3\xF1\xE6\xE9\xE8\xEB\xFF\xC2\xF1\xF7\xF3\xEF\xEA\xF1\xEC\xF4\xCE\xF5\xFA\xF8\xF7\xF2\xF9\xF4\xFA\xC8\xFD\xFE\xFD\xFF\x7C\x71\x72\x74\xBE\x45\x80\x77\x74\xF6\x41\x83\x7F\x82\xFB\x4C\x8A\x81\x83\x10\x8F\x82\x87\x80\xDB\x4E\x84\x85\x82\x17\xBE\x79\x84\x80\x1B\x82\x8B\x71\x85\x11\x9D\x86\x87\x87\x18\xA4\x8A\x86\x89\x1C\xA8\x8E\x85\x73\x20\x93\x8A\x8B\x88\x2C\xA5\x81\x8F\x89\x33\xA9\x85\x8F\x8A\xD1\x6D\x82\x89\x88\x2F\xBC\x87\x8C\x8C\x39\xB2\x81\x90\x8D\x43\xB6\x85\x90\x8E\x08\x84\x99\x92\x91\x4B\xBD\x58\x73\x41\x3D\xAE\x8F\x8E\x8F\x47\x80\x9D\x92\x95\x06\x84\x87\x81\x96\x3A\x91\x9B\x8E\x94\x55\x94\x97\x96\x98\x5C\x82\x93\x98\x98\x67\x9F\x9A\x9A\x97\x6C\x93\x98\x99\x99\x4A\xB0\x9C\x92\x9C\x48\xB4\x98\x97\x96\x78\x9A\x9A\x9D\x97\x6E\xAB\x9D\x9D\x9B\x61\xAF\x99\x9C\x9F\x81\xBE\x95\xA0\xA0\x69\x88\xA6\x9C\x99\x83\xA6\x9B\xA2\xA0\x7B\x8E\xAD\xA1\x9C\x93\xB3\x95\xA5\x9D\x97\xB7\x91\xA4\xA5\x9B\x96\xAD\xA4\xA6\x9F\x9A\xA4\xA1\xA2\x7F\xA5\xA1\x76\x00\x0A\x68\xA6\x72\x5B",
			"\x06\x02\x58\x67\xAA\x09\x6A\xA0\xAD\x40\xB2\x89\x73\x83\x44\x4F\x99\xAD\x61\xAD\x50\x8D\x73\x81\xAE\x04\x4A\xA1\x43\x00\xB3\x99\x99\x66\x64\xC5\xB3\xA0",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_File",
		};
		return results[index];
	}

	const wchar_t* ParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_File] BEGIN ",
			L"[1][_File] END [ENDING]",
			L"[2][_File]< \";\" @ >",
		};
		return results[index];
	}

	const wchar_t* ParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	Parser::Parser()
		: vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>(&CppTokenDeleter, &CppLexerData, &CppParserData)
	{
	};

	vl::vint32_t Parser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<cpp_parser::CppFile> Parser::Parse_File(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<cpp_parser::CppFile, ParserStates::_File>(input, this, codeIndex);
	};

	vl::Ptr<cpp_parser::CppFile> Parser::Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<cpp_parser::CppFile, ParserStates::_File>(tokens, this, codeIndex);
	};
}
