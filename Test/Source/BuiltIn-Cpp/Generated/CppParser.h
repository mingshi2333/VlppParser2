/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 126,
		_QualifiedNameFragment = 132,
		_MemberQualifiedNameFragment = 139,
		_QualifiedName = 142,
		_StringLiteralFragment = 161,
		_PrimitiveExpr = 165,
		_PrimitiveExpr_QualifiedName = 242,
		_PostfixUnaryExpr = 246,
		_NewInit = 270,
		_NewFragment = 286,
		_DeleteFragment = 294,
		_SizeofFragment = 300,
		_AllPrefixUnaryExpr_NoCStyleCast = 307,
		_AllPrefixUnaryExpr = 338,
		_PrefixUnaryExpr = 345,
		_MemberOperatorIdentifier = 350,
		_MemberOperatorQualifiedName = 355,
		_BExpr0 = 359,
		_BExpr1 = 368,
		_BExpr2 = 380,
		_BExpr3 = 389,
		_BExpr4 = 398,
		_BExpr5 = 413,
		_BExpr6 = 422,
		_BExpr7 = 428,
		_BExpr8 = 434,
		_BExpr9 = 440,
		_BExpr10 = 446,
		_ThrowExpr = 452,
		_BExpr_NoComma = 456,
		_BExpr = 498,
		_PrimitiveTypeLiteral = 505,
		_PrimitiveType = 523,
		_ShortType = 538,
		_ShortType_QualifiedName = 545,
		_LongType = 549,
		_TypeOnly = 558,
		_Type = 562,
		_ExprOnly_NoComma = 567,
		_Expr_NoComma = 574,
		_ExprOnly = 579,
		_Expr = 587,
		_TypeOrExpr_NoComma_NoLT = 592,
		_TypeOrExpr = 599,
		_File = 606,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	const wchar_t* ParserSwitchName(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif