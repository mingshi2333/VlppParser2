/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 136,
		_QualifiedNameFragment = 142,
		_MemberQualifiedNameFragment = 149,
		_QualifiedName = 152,
		_StringLiteralFragment = 168,
		_PrimitiveExpr = 172,
		_QualifiedName_PrimitiveExpr = 249,
		_PostfixUnaryExpr = 253,
		_NewInit = 267,
		_NewPrefix = 283,
		_NewExpr = 288,
		_DeletePrefix = 297,
		_DeleteExpr = 302,
		_SizeOfPrefix = 310,
		_SizeofExpr = 314,
		_AllPrefixUnaryExpr_NoCStyleCast = 324,
		_AllPrefixUnaryExpr = 345,
		_PrefixUnaryExpr = 352,
		_MemberOperatorIdentifier = 366,
		_MemberOperatorQualifiedName = 371,
		_BExpr0 = 375,
		_BExpr1 = 389,
		_BExpr2 = 403,
		_BExpr3 = 417,
		_PrimitiveTypeLiteral = 431,
		_PrimitiveType = 449,
		_QualifiedName_PrimitiveType = 464,
		_ShortType = 468,
		_LongType = 474,
		_AdvancedTypeNoCVNoMember = 484,
		_AdvancedTypeCV = 497,
		_AdvancedTypeNoMember = 501,
		_AdvancedTypeMember = 505,
		_DeclaratorKeyword = 509,
		_DeclaratorAKFirst = 529,
		_DeclaratorAKFollow = 533,
		_DeclaratorAKCV = 537,
		_DeclaratorAKMember = 540,
		_DeclaratorFunctionParameterWithoutKeyword = 543,
		_DeclaratorFunctionParameter = 553,
		_DeclaratorFunctionParameters = 564,
		_FunctionKeyword = 578,
		_DeclaratorFunctionPart = 604,
		_DeclaratorArrayPart = 610,
		_DeclaratorId = 615,
		_DeclaratorBeforeInner = 619,
		_DeclaratorAfterInner = 626,
		_InnerDeclaratorWithoutName = 631,
		_InnerDeclaratorInnerOptionalName = 635,
		_InnerDeclaratorInnerWithName = 639,
		_DeclaratorInnerWithoutName = 643,
		_DeclaratorInnerOptionalName = 649,
		_DeclaratorInnerWithName = 657,
		_DeclaratorWithoutName = 664,
		_DeclaratorOptionalName = 672,
		_DeclaratorWithName = 680,
		_Type = 685,
		_Expr_NoComma = 695,
		_Expr = 709,
		_TypeOrExpr_NoComma_NoGT = 723,
		_TypeOrExpr = 737,
		_File = 751,
		_BExpr4_SWITCH_COMBINED = 754,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 768,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 778,
		_BExpr_SWITCH_1allow_GT = 788,
		_BExpr10_SWITCH_0allow_GT = 802,
		_BExpr10_SWITCH_1allow_GT = 816,
		_BExpr4_SWITCH_0allow_GT = 830,
		_BExpr4_SWITCH_1allow_GT = 844,
		_BExpr5_SWITCH_0allow_GT = 858,
		_BExpr5_SWITCH_1allow_GT = 872,
		_BExpr6_SWITCH_0allow_GT = 886,
		_BExpr6_SWITCH_1allow_GT = 900,
		_BExpr7_SWITCH_0allow_GT = 914,
		_BExpr7_SWITCH_1allow_GT = 928,
		_BExpr8_SWITCH_0allow_GT = 942,
		_BExpr8_SWITCH_1allow_GT = 956,
		_BExpr9_SWITCH_0allow_GT = 970,
		_BExpr9_SWITCH_1allow_GT = 984,
		_BExpr_NoComma_SWITCH_0allow_GT = 998,
		_BExpr_NoComma_SWITCH_1allow_GT = 1012,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1026,
		_Expr_Raw_SWITCH_1allow_GT = 1040,
		_ThrowExpr_SWITCH_1allow_GT = 1054,
		_ThrowExpr_SWITCH_0allow_GT = 1058,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1062,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1076,
		_ShortType_LRI_Isolated_1 = 1090,
		_ShortType_LRI_Isolated_2 = 1094,
		_DeclaratorFunctionParameter_LRI_Isolated_1 = 1098,
		_GenericArgument_LRI_Original = 1103,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1107,
		_PostfixUnaryExpr_LRI_Original = 1112,
		_PrefixUnaryExpr_LRI_Original = 1144,
		_BExpr0_LRI_Original = 1148,
		_BExpr1_LRI_Original = 1157,
		_BExpr2_LRI_Original = 1169,
		_BExpr3_LRI_Original = 1178,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1187,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1190,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1202,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1217,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1226,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1235,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1241,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1247,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1253,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1259,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1265,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1271,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1277,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1283,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1289,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1295,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1337,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1379,
		_QualifiedName_PrimitiveType_LRI_Original = 1385,
		_ShortType_LRI_Original = 1390,
		_LongType_LRI_Original = 1396,
		_DeclaratorFunctionParameterWithoutKeyword_LRI_Original = 1403,
		_DeclaratorFunctionParameter_LRI_Original = 1409,
		_Type_LRI_Original = 1414,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1419,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1422,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1425,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1428,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1432,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1435,
		_Expr_NoComma_LRI_Original = 1439,
		_Expr_LRI_Original = 1442,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1445,
		_TypeOrExpr_LRI_Original = 1448,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif