/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_QualifiedNameFragment = 140,
		_MemberQualifiedNameFragment = 147,
		_SingleLevelQualifiedName = 151,
		_NextLevelQualifiedName = 161,
		_QualifiedName = 167,
		_QualifiedNameAfterTypename = 172,
		_StringLiteralFragment = 178,
		_LambdaCaptureId = 182,
		_LambdaCapture = 192,
		_LambdaExpr = 202,
		_PrimitiveExpr = 211,
		_QualifiedName_PrimitiveExpr = 289,
		_PostfixUnaryExpr = 293,
		_NewPrefix = 307,
		_NewExpr = 312,
		_DeletePrefix = 324,
		_DeleteExpr = 329,
		_SizeOfPrefix = 337,
		_SizeofExpr = 341,
		_AllPrefixUnaryExpr_NoCStyleCast = 351,
		_AllPrefixUnaryExpr = 372,
		_PrefixUnaryExpr = 379,
		_MemberOperatorIdentifier = 394,
		_BExpr0 = 399,
		_BExpr1 = 415,
		_BExpr2 = 431,
		_BExpr3 = 447,
		_BExpr4 = 463,
		_PrimitiveTypeLiteral = 479,
		_PrimitiveType = 497,
		_PM_PrimitiveType = 512,
		_PM_QualifiedName = 515,
		_CallConstructibleTypeBeforeDeclarator = 518,
		_ShortTypeBeforeDeclarator = 523,
		_CallConstructibleType = 529,
		_TypeBeforeDeclarator = 539,
		_TypeWithoutFuncVar = 549,
		_ExprStat = 559,
		_BlockStat = 585,
		_TryStatCatchPart = 590,
		_TryStat = 598,
		___TryStat = 604,
		_IfStatConditionPart = 615,
		_IfStat = 637,
		_ForStatConditionPart = 645,
		_ForStat = 666,
		_OtherStats = 673,
		_Stat = 715,
		_GenericParameterKeyword = 747,
		_OrdinaryGenericParameter = 754,
		_TypedGenericParameterInit = 761,
		_TypedGenericParameterVariablePart = 765,
		_TypedGenericParameter = 770,
		_GenericParameter = 780,
		_GenericHeader = 791,
		_GenericArgument = 797,
		_GenericArguments = 817,
		_AdvancedTypeNoCVNoMember = 823,
		_AdvancedTypeCV = 836,
		_AdvancedTypeNoMember = 840,
		_AdvancedTypeMember = 844,
		_DeclarationKeywordWithoutFriend = 848,
		_DeclarationKeyword = 852,
		_DeclaratorKeyword = 856,
		_DeclaratorAKFirst = 876,
		_DeclaratorAKFollow = 880,
		_DeclaratorAKCV = 884,
		_DeclaratorAKMember = 887,
		_DeclaratorAKCtorDtor = 890,
		_DeclaratorFunctionParameters = 893,
		_FunctionKeyword = 905,
		_DeclaratorFunctionPart = 931,
		_DeclaratorFunctionPartOptionalParameters = 937,
		_DeclaratorArrayPart = 946,
		_DeclaratorId = 951,
		_DeclaratorUntypedFuncId = 955,
		_DeclaratorBeforeInner = 960,
		_DeclaratorAfterInner = 967,
		_InnerDeclaratorWithoutName = 972,
		_InnerDeclaratorInnerOptionalName = 976,
		_InnerDeclaratorInnerRequiredName = 980,
		_DeclaratorInnerWithoutName = 984,
		_DeclaratorName = 989,
		_DeclaratorInnerOptionalName = 997,
		_DeclaratorInnerRequiredName = 1005,
		_DeclaratorWithoutNameAndFuncVar = 1013,
		_DeclaratorWithoutName = 1018,
		_DeclaratorOptionalName = 1026,
		_DeclaratorRequiredName = 1034,
		_DeclaratorUntypedFuncWithoutKeyword = 1041,
		_VarValueInit = 1046,
		_VarNewParanInit = 1050,
		_VarBraceInit = 1056,
		_VarCtorInit = 1062,
		_VarInit = 1066,
		_VarStatInitItemFirst = 1071,
		_VarStatInitItemSecond = 1076,
		_VarStatInit = 1081,
		_DeclaratorVariablePartWithoutInit = 1086,
		_DeclaratorVariablePartOptionalInitFirst = 1089,
		_DeclaratorVariablePartOptionalInitSecond = 1093,
		_DeclaratorVariablePartRequiredInit = 1097,
		_FunctionParameterVariablePart = 1101,
		_FunctionParameter = 1106,
		_CatchParameterVariablePart = 1117,
		_CatchParameter = 1120,
		_ExprOrVarCondition = 1131,
		_ForEachParameter = 1150,
		_MultiTypedefVarDeclVariablePart = 1154,
		_MultiTypedefVarsDeclWithoutKeyword = 1159,
		_MultiVarsDeclVariablePartFirst = 1163,
		_MultiVarsDeclVariablePartSecond = 1168,
		_MultiVarsDeclWithoutKeyword = 1173,
		_MultiVarsDecl = 1177,
		_UntypedFuncForwardDeclVariablePart = 1188,
		_UntypedFuncForwardDeclWithoutKeyword = 1191,
		_MultiVarsOrFuncForwardDeclWithoutKeyword = 1194,
		_MultiVarsOrFuncForwardDecl = 1205,
		_MultiVarsOrTypedFuncDeclVariablePartFollowing = 1217,
		_MultiVarsOrTypedFuncDeclVariablePart = 1224,
		_MultiVarsOrTypedFuncDeclWithoutKeyword = 1228,
		_UntypedFuncDeclVariablePart = 1232,
		_UntypedFuncDeclWithoutKeyword = 1237,
		_MultiVarsOrFuncDeclWithoutKeyword = 1240,
		_MultiVarsOrFuncDecl = 1251,
		_ClassInheritanceFirst = 1263,
		_ClassInheritanceSecond = 1280,
		_ClassMemberPartFirst = 1297,
		_ClassMemberPartSecond = 1301,
		_ClassBody = 1312,
		_ClassDeclPrefix = 1321,
		_ClassDecl = 1326,
		_ClassForwardDecl = 1332,
		_StaticAssertDecl = 1337,
		_TypedefCompatibleDecl = 1345,
		_TypedefDecl = 1357,
		_ExternDeclRejectSemicolon = 1361,
		_NsName = 1368,
		_NsDecl = 1371,
		_UsingNsDecl = 1379,
		_UsingValueDecl = 1386,
		_UsingTypeDecl = 1391,
		_FriendTypeDecl = 1397,
		_EnumItem = 1401,
		_EnumBody = 1406,
		_EnumDecl = 1415,
		_EnumForwardDecl = 1428,
		_DeclSharedWithoutSemicolonAcceptKeyword = 1439,
		_DeclSharedWithoutSemicolonAcceptKeywordButFriend = 1448,
		_DeclSharedWithoutSemicolon = 1452,
		_DeclNeedSemicolon = 1460,
		_DeclRejectSemicolon = 1474,
		_Type = 1490,
		_Expr_NoComma = 1501,
		_Expr = 1518,
		_Expr_Argument = 1536,
		_TypeOrExpr_NoComma_NoGT = 1554,
		_TypeOrExpr = 1572,
		_File = 1575,
		_BExpr5_SWITCH_COMBINED = 1579,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1595,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1606,
		_BExpr_SWITCH_1allow_GT = 1617,
		_BExpr10_SWITCH_0allow_GT = 1635,
		_BExpr10_SWITCH_1allow_GT = 1651,
		_BExpr11_SWITCH_0allow_GT = 1667,
		_BExpr11_SWITCH_1allow_GT = 1683,
		_BExpr5_SWITCH_0allow_GT = 1699,
		_BExpr5_SWITCH_1allow_GT = 1715,
		_BExpr6_SWITCH_0allow_GT = 1731,
		_BExpr6_SWITCH_1allow_GT = 1747,
		_BExpr7_SWITCH_0allow_GT = 1763,
		_BExpr7_SWITCH_1allow_GT = 1779,
		_BExpr8_SWITCH_0allow_GT = 1795,
		_BExpr8_SWITCH_1allow_GT = 1811,
		_BExpr9_SWITCH_0allow_GT = 1827,
		_BExpr9_SWITCH_1allow_GT = 1843,
		_BExpr_NoComma_SWITCH_0allow_GT = 1859,
		_BExpr_NoComma_SWITCH_1allow_GT = 1876,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1893,
		_Expr_Raw_SWITCH_1allow_GT = 1910,
		_ThrowExpr_SWITCH_1allow_GT = 1928,
		_ThrowExpr_SWITCH_0allow_GT = 1932,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1936,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1954,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1973,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1980,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1983,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1986,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1989,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1993,
		_ForStatConditionPart_LRI_Isolated_0 = 1997,
		_Stat_LRI_Isolated_1 = 2003,
		_Stat_LRI_Isolated_2 = 2006,
		_Stat_LRI_Isolated_3 = 2009,
		_Stat_LRI_Isolated_4 = 2012,
		_Stat_LRI_Isolated_5 = 2015,
		_Stat_LRI_Isolated_6 = 2018,
		_GenericParameter_LRI_Isolated_0 = 2021,
		_FunctionParameter_LRI_Isolated_2 = 2024,
		_CatchParameter_LRI_Isolated_2 = 2030,
		_ExprOrVarCondition_LRI_Isolated_2 = 2036,
		_MultiVarsDecl_LRI_Isolated_1 = 2042,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 2047,
		_MultiVarsOrFuncForwardDecl_LRI_Isolated_1 = 2050,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 2055,
		_MultiVarsOrFuncDecl_LRI_Isolated_1 = 2058,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2063,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2066,
		_DeclNeedSemicolon_LRI_Isolated_0 = 2069,
		_DeclNeedSemicolon_LRI_Isolated_2 = 2072,
		_DeclRejectSemicolon_LRI_Isolated_0 = 2077,
		_DeclRejectSemicolon_LRI_Isolated_1 = 2081,
		_DeclRejectSemicolon_LRI_Isolated_3 = 2084,
		_DeclRejectSemicolon_LRI_Isolated_4 = 2087,
		_Type_LRI_Isolated_2 = 2092,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2098,
		_PostfixUnaryExpr_LRI_Original = 2103,
		_PrefixUnaryExpr_LRI_Original = 2137,
		_BExpr0_LRI_Original = 2142,
		_BExpr1_LRI_Original = 2151,
		_BExpr2_LRI_Original = 2163,
		_BExpr3_LRI_Original = 2172,
		_BExpr4_LRI_Original = 2183,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2189,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2192,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2206,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2223,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2232,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2241,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2247,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2253,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2259,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2265,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2271,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2277,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2283,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2289,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2295,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2301,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2348,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2395,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2401,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2404,
		_PM_PrimitiveType_LRI_Original = 2407,
		_PM_QualifiedName_LRI_Original = 2411,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2415,
		_ShortTypeBeforeDeclarator_LRI_Original = 2421,
		_CallConstructibleType_LRI_Original = 2425,
		_TypeBeforeDeclarator_LRI_Original = 2436,
		_TypeWithoutFuncVar_LRI_Original = 2443,
		_ExprStat_LRI_Original = 2448,
		_IfStatConditionPart_LRI_Original = 2454,
		_ForStatConditionPart_LRI_Original = 2462,
		_Stat_LRI_Original = 2479,
		_TypedGenericParameter_LRI_Original = 2489,
		_GenericParameter_LRI_Original = 2494,
		_GenericArgument_LRI_Original = 2499,
		_FunctionParameter_LRI_Original = 2504,
		_CatchParameter_LRI_Original = 2511,
		_ExprOrVarCondition_LRI_Original = 2518,
		_MultiVarsDecl_LRI_Original = 2525,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2530,
		_MultiVarsOrFuncForwardDecl_LRI_Original = 2535,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Original = 2540,
		_MultiVarsOrFuncDecl_LRI_Original = 2545,
		_TypedefCompatibleDecl_LRI_Original = 2550,
		_DeclNeedSemicolon_LRI_Original = 2556,
		_DeclRejectSemicolon_LRI_Original = 2562,
		_Type_LRI_Original = 2570,
		_Expr_NoComma_LRI_Original = 2577,
		_Expr_LRI_Original = 2580,
		_Expr_Argument_LRI_Original = 2583,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2588,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2591,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2595,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2598,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2602,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif