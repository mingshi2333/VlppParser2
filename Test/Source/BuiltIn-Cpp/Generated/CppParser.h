/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 131,
		_GenericArgument = 136,
		_GenericArguments = 156,
		_QualifiedNameFragment = 162,
		_MemberQualifiedNameFragment = 169,
		_SingleLevelQualifiedName = 172,
		_NextLevelQualifiedName = 182,
		_QualifiedName = 188,
		_QualifiedNameAfterTypename = 193,
		_StringLiteralFragment = 199,
		_LambdaCaptureId = 203,
		_LambdaCapture = 213,
		_LambdaExpr = 223,
		_PrimitiveExpr = 232,
		_QualifiedName_PrimitiveExpr = 310,
		_PostfixUnaryExpr = 314,
		_NewPrefix = 328,
		_NewExpr = 333,
		_DeletePrefix = 345,
		_DeleteExpr = 350,
		_SizeOfPrefix = 358,
		_SizeofExpr = 362,
		_AllPrefixUnaryExpr_NoCStyleCast = 372,
		_AllPrefixUnaryExpr = 393,
		_PrefixUnaryExpr = 400,
		_MemberOperatorIdentifier = 415,
		_MemberOperatorQualifiedName = 420,
		_BExpr0 = 424,
		_BExpr1 = 440,
		_BExpr2 = 456,
		_BExpr3 = 472,
		_BExpr4 = 488,
		_PrimitiveTypeLiteral = 504,
		_PrimitiveType = 522,
		_PM_PrimitiveType = 537,
		_PM_QualifiedName = 540,
		_CallConstructibleTypeBeforeDeclarator = 543,
		_ShortTypeBeforeDeclarator = 548,
		_CallConstructibleType = 554,
		_TypeBeforeDeclarator = 564,
		_AdvancedTypeNoCVNoMember = 574,
		_AdvancedTypeCV = 587,
		_AdvancedTypeNoMember = 591,
		_AdvancedTypeMember = 595,
		_DeclaratorKeyword = 599,
		_DeclaratorAKFirst = 619,
		_DeclaratorAKFollow = 623,
		_DeclaratorAKCV = 627,
		_DeclaratorAKMember = 630,
		_DeclaratorFunctionParameters = 633,
		_FunctionKeyword = 645,
		_DeclaratorFunctionPart = 671,
		_DeclaratorFunctionPartOptionalParameters = 677,
		_DeclaratorArrayPart = 686,
		_DeclaratorId = 691,
		_DeclaratorBeforeInner = 696,
		_DeclaratorAfterInner = 703,
		_InnerDeclaratorWithoutName = 708,
		_InnerDeclaratorInnerOptionalName = 712,
		_InnerDeclaratorInnerRequiredName = 716,
		_DeclaratorInnerWithoutName = 720,
		_DeclaratorInnerOptionalName = 725,
		_DeclaratorInnerRequiredName = 737,
		_DeclaratorWithoutName = 749,
		_DeclaratorOptionalName = 757,
		_DeclaratorRequiredName = 765,
		_VarValueInit = 772,
		_VarNewParanInit = 776,
		_VarVarParanInit = 782,
		_VarBraceInit = 789,
		_VarCtorInit = 795,
		_VarInit = 799,
		_DeclaratorVariablePartWithoutInit = 804,
		_DeclaratorVariablePartOptionalInit = 807,
		_DeclaratorVariablePartRequiredInit = 811,
		_VarWithoutInit = 815,
		_VarRequiredInit = 825,
		_FunctionParameterVariablePart = 835,
		_FunctionParameter = 840,
		_CatchParameterVariablePart = 851,
		_CatchParameter = 854,
		_ExprOrVarWithInit = 865,
		_GenericParameterKeyword = 884,
		_OrdinaryGenericParameter = 891,
		_TypedGenericParameterInit = 898,
		_TypedGenericParameterVariablePart = 902,
		_TypedGenericParameter = 907,
		_GenericParameter = 917,
		_GenericHeader = 928,
		_VarsDeclWithoutKeyword = 934,
		_VarsDecl = 944,
		_ClassInheritanceFirst = 955,
		_ClassInheritanceSecond = 968,
		_ClassMemberPartFirst = 981,
		_ClassMemberPartSecond = 1009,
		_ClassBody = 1020,
		_ClassDeclPrefix = 1030,
		_ClassDecl = 1038,
		_ClassDeclForwardDecl = 1043,
		_StaticAssertDecl = 1047,
		_TypedefCompatibleDecl = 1055,
		_TypedefDecl = 1067,
		_ExternDecl = 1071,
		_NsName = 1078,
		_NsDecl = 1081,
		_EnumItem = 1089,
		_EnumBody = 1094,
		_EnumDecl = 1102,
		_EnumDeclForwardDecl = 1108,
		_Decl = 1113,
		_DeclWithSemicolon = 1130,
		_ExprStat = 1156,
		_BlockStat = 1188,
		_TryStatCatchPart = 1193,
		_TryStat = 1201,
		___TryStat = 1207,
		_IfStatConditionPart = 1218,
		_IfStat = 1240,
		_ForStatConditionPart = 1248,
		_ForStat = 1269,
		_OtherStats = 1276,
		_Stat = 1318,
		_Type = 1356,
		_Expr_NoComma = 1367,
		_Expr = 1384,
		_Expr_Argument = 1402,
		_TypeOrExpr_NoComma_NoGT = 1420,
		_TypeOrExpr = 1438,
		_File = 1457,
		_BExpr5_SWITCH_COMBINED = 1485,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1501,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1512,
		_BExpr_SWITCH_1allow_GT = 1523,
		_BExpr10_SWITCH_0allow_GT = 1541,
		_BExpr10_SWITCH_1allow_GT = 1557,
		_BExpr11_SWITCH_0allow_GT = 1573,
		_BExpr11_SWITCH_1allow_GT = 1589,
		_BExpr5_SWITCH_0allow_GT = 1605,
		_BExpr5_SWITCH_1allow_GT = 1621,
		_BExpr6_SWITCH_0allow_GT = 1637,
		_BExpr6_SWITCH_1allow_GT = 1653,
		_BExpr7_SWITCH_0allow_GT = 1669,
		_BExpr7_SWITCH_1allow_GT = 1685,
		_BExpr8_SWITCH_0allow_GT = 1701,
		_BExpr8_SWITCH_1allow_GT = 1717,
		_BExpr9_SWITCH_0allow_GT = 1733,
		_BExpr9_SWITCH_1allow_GT = 1749,
		_BExpr_NoComma_SWITCH_0allow_GT = 1765,
		_BExpr_NoComma_SWITCH_1allow_GT = 1782,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1799,
		_Expr_Raw_SWITCH_1allow_GT = 1816,
		_ThrowExpr_SWITCH_1allow_GT = 1834,
		_ThrowExpr_SWITCH_0allow_GT = 1838,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1842,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1860,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1879,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1886,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1889,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1892,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1895,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1899,
		_FunctionParameter_LRI_Isolated_2 = 1903,
		_CatchParameter_LRI_Isolated_2 = 1909,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1915,
		_GenericParameter_LRI_Isolated_0 = 1921,
		_VarsDecl_LRI_Isolated_1 = 1924,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 1929,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 1932,
		_Decl_LRI_Isolated_1 = 1935,
		_Decl_LRI_Isolated_2 = 1938,
		_Decl_LRI_Isolated_3 = 1941,
		_Decl_LRI_Isolated_4 = 1944,
		_Decl_LRI_Isolated_5 = 1947,
		_Decl_LRI_Isolated_6 = 1950,
		_DeclWithSemicolon_LRI_Isolated_1 = 1953,
		_DeclWithSemicolon_LRI_Isolated_2 = 1956,
		_ForStatConditionPart_LRI_Isolated_0 = 1959,
		_Stat_LRI_Isolated_1 = 1965,
		_Stat_LRI_Isolated_2 = 1968,
		_Stat_LRI_Isolated_3 = 1971,
		_Stat_LRI_Isolated_4 = 1974,
		_Stat_LRI_Isolated_5 = 1977,
		_Stat_LRI_Isolated_6 = 1980,
		_Type_LRI_Isolated_2 = 1983,
		_GenericArgument_LRI_Original = 1989,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1994,
		_PostfixUnaryExpr_LRI_Original = 1999,
		_PrefixUnaryExpr_LRI_Original = 2033,
		_BExpr0_LRI_Original = 2038,
		_BExpr1_LRI_Original = 2047,
		_BExpr2_LRI_Original = 2059,
		_BExpr3_LRI_Original = 2068,
		_BExpr4_LRI_Original = 2079,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2085,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2088,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2102,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2119,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2128,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2137,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2143,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2149,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2155,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2161,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2167,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2173,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2179,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2185,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2191,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2197,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2244,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2291,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2297,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2300,
		_PM_PrimitiveType_LRI_Original = 2303,
		_PM_QualifiedName_LRI_Original = 2307,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2311,
		_ShortTypeBeforeDeclarator_LRI_Original = 2317,
		_CallConstructibleType_LRI_Original = 2321,
		_TypeBeforeDeclarator_LRI_Original = 2332,
		_VarWithoutInit_LRI_Original = 2339,
		_VarRequiredInit_LRI_Original = 2343,
		_FunctionParameter_LRI_Original = 2347,
		_CatchParameter_LRI_Original = 2354,
		_ExprOrVarWithInit_LRI_Original = 2361,
		_TypedGenericParameter_LRI_Original = 2368,
		_GenericParameter_LRI_Original = 2373,
		_VarsDeclWithoutKeyword_LRI_Original = 2378,
		_VarsDecl_LRI_Original = 2384,
		_ClassMemberPartFirst_LRI_Original = 2389,
		_TypedefCompatibleDecl_LRI_Original = 2393,
		_Decl_LRI_Original = 2399,
		_DeclWithSemicolon_LRI_Original = 2409,
		_ExprStat_LRI_Original = 2416,
		_IfStatConditionPart_LRI_Original = 2422,
		_ForStatConditionPart_LRI_Original = 2430,
		_Stat_LRI_Original = 2447,
		_Type_LRI_Original = 2457,
		_Expr_NoComma_LRI_Original = 2464,
		_Expr_LRI_Original = 2467,
		_Expr_Argument_LRI_Original = 2470,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2475,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2478,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2482,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2485,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2489,
		_TypeOrExpr_LRI_Original = 2492,
		_File_LRI_Original = 2495,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif