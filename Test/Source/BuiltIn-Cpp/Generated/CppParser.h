/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 126,
		_QualifiedNameFragment = 132,
		_MemberQualifiedNameFragment = 139,
		_QualifiedName = 142,
		_StringLiteralFragment = 158,
		_PrimitiveExpr = 162,
		_PrimitiveExpr_QualifiedName = 239,
		_PostfixUnaryExpr = 243,
		_NewInit = 267,
		_NewFragment = 283,
		_DeleteFragment = 291,
		_SizeofFragment = 297,
		_AllPrefixUnaryExpr_NoCStyleCast = 304,
		_AllPrefixUnaryExpr = 335,
		_PrefixUnaryExpr = 342,
		_MemberOperatorIdentifier = 347,
		_MemberOperatorQualifiedName = 352,
		_BExpr0 = 356,
		_BExpr1 = 365,
		_BExpr2 = 377,
		_BExpr3 = 386,
		_BExpr4 = 395,
		_BExpr5 = 410,
		_BExpr6 = 419,
		_BExpr7 = 425,
		_BExpr8 = 431,
		_BExpr9 = 437,
		_BExpr10 = 443,
		_ThrowExpr = 449,
		_BExpr_NoComma = 453,
		_BExpr = 495,
		_PrimitiveTypeLiteral = 502,
		_PrimitiveType = 520,
		_ShortType = 535,
		_ShortType_QualifiedName = 542,
		_LongType = 546,
		_AdvancedTypeNoCVNoMember = 555,
		_AdvancedTypeCV = 568,
		_AdvancedTypeNoMember = 572,
		_AdvancedTypeMember = 576,
		_DeclaratorKeyword = 580,
		_DeclaratorAKFirst = 600,
		_DeclaratorAKFollow = 604,
		_DeclaratorAKCV = 608,
		_DeclaratorAKMember = 611,
		_DeclaratorFunctionParameter = 614,
		_DeclaratorFunctionParameters = 621,
		_DeclaratorFunctionPart = 629,
		_DeclaratorArrayPart = 634,
		_DeclaratorId = 639,
		_DeclaratorBeforeInner = 643,
		_DeclaratorAfterInner = 650,
		_InnerDeclaratorWithoutName = 655,
		_InnerDeclaratorInnerOptionalName = 659,
		_InnerDeclaratorInnerWithName = 663,
		_DeclaratorInnerWithoutName = 667,
		_DeclaratorInnerOptionalName = 672,
		_DeclaratorInnerWithName = 678,
		_DeclaratorWithoutName = 684,
		_DeclaratorOptionalName = 692,
		_DeclaratorWithName = 700,
		_TypeOrDeclarator = 705,
		_TypeOnly = 710,
		_Type = 714,
		_ExprOnly_NoComma = 719,
		_Expr_NoComma = 726,
		_ExprOnly = 731,
		_Expr = 739,
		_TypeOrExpr_NoComma_NoLT = 744,
		_TypeOrExpr = 751,
		_File = 758,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	const wchar_t* ParserSwitchName(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif