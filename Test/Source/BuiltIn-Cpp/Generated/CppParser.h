/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_AdvancedTypeNoCVNoMember = 579,
		_AdvancedTypeCV = 592,
		_AdvancedTypeNoMember = 596,
		_AdvancedTypeMember = 600,
		_DeclaratorKeyword = 604,
		_DeclaratorAKFirst = 624,
		_DeclaratorAKFollow = 628,
		_DeclaratorAKCV = 632,
		_DeclaratorAKMember = 635,
		_DeclaratorAKCtorDtor = 638,
		_DeclaratorFunctionParameters = 641,
		_FunctionKeyword = 653,
		_DeclaratorFunctionPart = 679,
		_DeclaratorFunctionPartOptionalParameters = 685,
		_DeclaratorArrayPart = 694,
		_DeclaratorId = 699,
		_DeclaratorUntypedFuncId = 703,
		_DeclaratorBeforeInner = 708,
		_DeclaratorAfterInner = 715,
		_InnerDeclaratorWithoutName = 720,
		_InnerDeclaratorInnerOptionalName = 724,
		_InnerDeclaratorInnerRequiredName = 728,
		_DeclaratorInnerWithoutName = 732,
		_DeclaratorInnerOptionalName = 737,
		_DeclaratorInnerRequiredName = 749,
		_DeclaratorWithoutName = 761,
		_DeclaratorOptionalName = 769,
		_DeclaratorRequiredName = 777,
		_DeclaratorUntypedFuncWithoutKeyword = 784,
		_VarValueInit = 789,
		_VarNewParanInit = 793,
		_VarVarParanInit = 799,
		_VarBraceInit = 806,
		_VarCtorInit = 812,
		_VarStatInit = 816,
		_VarInit = 819,
		_DeclaratorVariablePartWithoutInit = 824,
		_DeclaratorVariablePartOptionalInit = 827,
		_DeclaratorVariablePartRequiredInit = 831,
		_FunctionParameterVariablePart = 835,
		_FunctionParameter = 840,
		_GenericParameterKeyword = 851,
		_OrdinaryGenericParameter = 858,
		_TypedGenericParameterInit = 865,
		_TypedGenericParameterVariablePart = 869,
		_TypedGenericParameter = 874,
		_GenericParameter = 884,
		_GenericHeader = 895,
		_CatchParameterVariablePart = 901,
		_CatchParameter = 904,
		_ExprOrVarCondition = 915,
		_ForEachParameter = 934,
		_MultiVarsDeclVariablePart = 944,
		_MultiVarsDeclWithoutKeyword = 949,
		_MultiVarsDecl = 959,
		_UntypedFuncForwardDeclVariablePart = 970,
		_UntypedFuncForwardDeclWithoutKeyword = 973,
		_MultiVarsOrFuncForwardDeclWithoutKeyword = 976,
		_MultiVarsOrFuncForwardDecl = 987,
		_MultiVarsOrTypedFuncDeclVariablePart = 999,
		_MultiVarsOrTypedFuncDeclWithoutKeyword = 1008,
		_UntypedFuncDeclVariablePart = 1018,
		_UntypedFuncDeclWithoutKeyword = 1023,
		_MultiVarsOrFuncDeclWithoutKeyword = 1026,
		_MultiVarsOrFuncDecl = 1037,
		_ClassInheritanceFirst = 1049,
		_ClassInheritanceSecond = 1062,
		_ClassMemberPartFirst = 1075,
		_ClassMemberPartSecond = 1095,
		_ClassBody = 1106,
		_ClassDeclPrefix = 1115,
		_ClassDecl = 1123,
		_ClassForwardDecl = 1128,
		_StaticAssertDecl = 1132,
		_TypedefCompatibleDecl = 1140,
		_TypedefDecl = 1152,
		_ExternDecl = 1156,
		_NsName = 1163,
		_NsDecl = 1166,
		_EnumItem = 1174,
		_EnumBody = 1179,
		_EnumDecl = 1188,
		_EnumForwardDecl = 1194,
		_DeclWithoutVarsFuncSemicolon = 1199,
		_DeclInStat = 1207,
		_DeclWithSemicolon = 1220,
		_ExprStat = 1235,
		_BlockStat = 1259,
		_TryStatCatchPart = 1264,
		_TryStat = 1272,
		___TryStat = 1278,
		_IfStatConditionPart = 1289,
		_IfStat = 1311,
		_ForStatConditionPart = 1319,
		_ForStat = 1340,
		_OtherStats = 1347,
		_Stat = 1389,
		_Type = 1419,
		_Expr_NoComma = 1430,
		_Expr = 1447,
		_Expr_Argument = 1465,
		_TypeOrExpr_NoComma_NoGT = 1483,
		_TypeOrExpr = 1501,
		_File = 1520,
		_BExpr5_SWITCH_COMBINED = 1540,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1556,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1567,
		_BExpr_SWITCH_1allow_GT = 1578,
		_BExpr10_SWITCH_0allow_GT = 1596,
		_BExpr10_SWITCH_1allow_GT = 1612,
		_BExpr11_SWITCH_0allow_GT = 1628,
		_BExpr11_SWITCH_1allow_GT = 1644,
		_BExpr5_SWITCH_0allow_GT = 1660,
		_BExpr5_SWITCH_1allow_GT = 1676,
		_BExpr6_SWITCH_0allow_GT = 1692,
		_BExpr6_SWITCH_1allow_GT = 1708,
		_BExpr7_SWITCH_0allow_GT = 1724,
		_BExpr7_SWITCH_1allow_GT = 1740,
		_BExpr8_SWITCH_0allow_GT = 1756,
		_BExpr8_SWITCH_1allow_GT = 1772,
		_BExpr9_SWITCH_0allow_GT = 1788,
		_BExpr9_SWITCH_1allow_GT = 1804,
		_BExpr_NoComma_SWITCH_0allow_GT = 1820,
		_BExpr_NoComma_SWITCH_1allow_GT = 1837,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1854,
		_Expr_Raw_SWITCH_1allow_GT = 1871,
		_ThrowExpr_SWITCH_1allow_GT = 1889,
		_ThrowExpr_SWITCH_0allow_GT = 1893,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1897,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1915,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1934,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1941,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1944,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1947,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1950,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1954,
		_FunctionParameter_LRI_Isolated_2 = 1958,
		_GenericParameter_LRI_Isolated_0 = 1964,
		_CatchParameter_LRI_Isolated_2 = 1967,
		_ExprOrVarCondition_LRI_Isolated_2 = 1973,
		_MultiVarsDecl_LRI_Isolated_1 = 1979,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 1984,
		_MultiVarsOrFuncForwardDecl_LRI_Isolated_1 = 1987,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 1992,
		_MultiVarsOrFuncDecl_LRI_Isolated_1 = 1995,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2000,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2003,
		_DeclInStat_LRI_Isolated_0 = 2006,
		_DeclWithSemicolon_LRI_Isolated_0 = 2009,
		_DeclWithSemicolon_LRI_Isolated_2 = 2013,
		_DeclWithSemicolon_LRI_Isolated_3 = 2016,
		_ForStatConditionPart_LRI_Isolated_0 = 2019,
		_Stat_LRI_Isolated_1 = 2025,
		_Stat_LRI_Isolated_2 = 2028,
		_Stat_LRI_Isolated_3 = 2031,
		_Stat_LRI_Isolated_4 = 2034,
		_Stat_LRI_Isolated_5 = 2037,
		_Stat_LRI_Isolated_6 = 2040,
		_Type_LRI_Isolated_2 = 2043,
		_GenericArgument_LRI_Original = 2049,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2054,
		_PostfixUnaryExpr_LRI_Original = 2059,
		_PrefixUnaryExpr_LRI_Original = 2093,
		_BExpr0_LRI_Original = 2098,
		_BExpr1_LRI_Original = 2107,
		_BExpr2_LRI_Original = 2119,
		_BExpr3_LRI_Original = 2128,
		_BExpr4_LRI_Original = 2139,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2145,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2148,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2162,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2179,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2188,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2197,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2203,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2209,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2215,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2221,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2227,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2233,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2239,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2245,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2251,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2257,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2304,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2351,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2357,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2360,
		_PM_PrimitiveType_LRI_Original = 2363,
		_PM_QualifiedName_LRI_Original = 2367,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2371,
		_ShortTypeBeforeDeclarator_LRI_Original = 2377,
		_CallConstructibleType_LRI_Original = 2381,
		_TypeBeforeDeclarator_LRI_Original = 2392,
		_FunctionParameter_LRI_Original = 2399,
		_TypedGenericParameter_LRI_Original = 2406,
		_GenericParameter_LRI_Original = 2411,
		_CatchParameter_LRI_Original = 2416,
		_ExprOrVarCondition_LRI_Original = 2423,
		_ForEachParameter_LRI_Original = 2430,
		_MultiVarsDeclWithoutKeyword_LRI_Original = 2434,
		_MultiVarsDecl_LRI_Original = 2438,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2443,
		_MultiVarsOrFuncForwardDecl_LRI_Original = 2448,
		_MultiVarsOrTypedFuncDeclWithoutKeyword_LRI_Original = 2453,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Original = 2457,
		_MultiVarsOrFuncDecl_LRI_Original = 2462,
		_ClassMemberPartFirst_LRI_Original = 2467,
		_TypedefCompatibleDecl_LRI_Original = 2471,
		_DeclInStat_LRI_Original = 2477,
		_DeclWithSemicolon_LRI_Original = 2482,
		_ExprStat_LRI_Original = 2489,
		_IfStatConditionPart_LRI_Original = 2495,
		_ForStatConditionPart_LRI_Original = 2503,
		_Stat_LRI_Original = 2520,
		_Type_LRI_Original = 2530,
		_Expr_NoComma_LRI_Original = 2537,
		_Expr_LRI_Original = 2540,
		_Expr_Argument_LRI_Original = 2543,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2548,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2551,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2555,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2558,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2562,
		_TypeOrExpr_LRI_Original = 2565,
		_File_LRI_Original = 2568,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif