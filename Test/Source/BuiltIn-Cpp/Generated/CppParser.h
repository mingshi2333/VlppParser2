/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 135,
		_QualifiedNameFragment = 141,
		_MemberQualifiedNameFragment = 148,
		_QualifiedName = 151,
		_StringLiteralFragment = 167,
		_PrimitiveExpr = 171,
		_QualifiedName_PrimitiveExpr = 248,
		_PostfixUnaryExpr = 252,
		_NewInit = 265,
		_NewPrefix = 281,
		_NewExpr = 286,
		_DeletePrefix = 295,
		_DeleteExpr = 300,
		_SizeOfPrefix = 308,
		_SizeofExpr = 312,
		_AllPrefixUnaryExpr_NoCStyleCast = 322,
		_AllPrefixUnaryExpr = 343,
		_PrefixUnaryExpr = 350,
		_MemberOperatorIdentifier = 363,
		_MemberOperatorQualifiedName = 368,
		_BExpr0 = 372,
		_BExpr1 = 385,
		_BExpr2 = 398,
		_BExpr3 = 411,
		_PrimitiveTypeLiteral = 424,
		_PrimitiveType = 442,
		_QualifiedName_PrimitiveType = 457,
		_ShortType = 461,
		_LongType = 467,
		_AdvancedTypeNoCVNoMember = 477,
		_AdvancedTypeCV = 490,
		_AdvancedTypeNoMember = 494,
		_AdvancedTypeMember = 498,
		_DeclaratorKeyword = 502,
		_DeclaratorAKFirst = 522,
		_DeclaratorAKFollow = 526,
		_DeclaratorAKCV = 530,
		_DeclaratorAKMember = 533,
		_DeclaratorFunctionParameter = 536,
		_DeclaratorFunctionParameters = 547,
		_FunctionKeyword = 559,
		_DeclaratorFunctionPart = 585,
		_DeclaratorArrayPart = 591,
		_DeclaratorId = 596,
		_DeclaratorBeforeInner = 600,
		_DeclaratorAfterInner = 607,
		_InnerDeclaratorWithoutName = 612,
		_InnerDeclaratorInnerOptionalName = 616,
		_DeclaratorInnerWithoutName = 620,
		_DeclaratorInnerOptionalName = 625,
		_DeclaratorWithoutName = 633,
		_DeclaratorOptionalName = 641,
		_Type = 649,
		_Expr_NoComma = 659,
		_Expr = 672,
		_Expr_Argument = 685,
		_TypeOrExpr_NoComma_NoGT = 698,
		_TypeOrExpr = 711,
		_File = 724,
		_BExpr4_SWITCH_COMBINED = 727,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 740,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 750,
		_BExpr_SWITCH_1allow_GT = 760,
		_BExpr10_SWITCH_0allow_GT = 773,
		_BExpr10_SWITCH_1allow_GT = 786,
		_BExpr4_SWITCH_0allow_GT = 799,
		_BExpr4_SWITCH_1allow_GT = 812,
		_BExpr5_SWITCH_0allow_GT = 825,
		_BExpr5_SWITCH_1allow_GT = 838,
		_BExpr6_SWITCH_0allow_GT = 851,
		_BExpr6_SWITCH_1allow_GT = 864,
		_BExpr7_SWITCH_0allow_GT = 877,
		_BExpr7_SWITCH_1allow_GT = 890,
		_BExpr8_SWITCH_0allow_GT = 903,
		_BExpr8_SWITCH_1allow_GT = 916,
		_BExpr9_SWITCH_0allow_GT = 929,
		_BExpr9_SWITCH_1allow_GT = 942,
		_BExpr_NoComma_SWITCH_0allow_GT = 955,
		_BExpr_NoComma_SWITCH_1allow_GT = 968,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 981,
		_Expr_Raw_SWITCH_1allow_GT = 994,
		_ThrowExpr_SWITCH_1allow_GT = 1007,
		_ThrowExpr_SWITCH_0allow_GT = 1011,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1015,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1028,
		_ShortType_LRI_Isolated_1 = 1041,
		_ShortType_LRI_Isolated_2 = 1045,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1049,
		_GenericArgument_LRI_Original = 1057,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1062,
		_PostfixUnaryExpr_LRI_Original = 1067,
		_PrefixUnaryExpr_LRI_Original = 1099,
		_BExpr0_LRI_Original = 1103,
		_BExpr1_LRI_Original = 1112,
		_BExpr2_LRI_Original = 1124,
		_BExpr3_LRI_Original = 1133,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1142,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1145,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1157,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1172,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1181,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1190,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1196,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1202,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1208,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1214,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1220,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1226,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1232,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1238,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1244,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1250,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1292,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1334,
		_QualifiedName_PrimitiveType_LRI_Original = 1340,
		_ShortType_LRI_Original = 1345,
		_LongType_LRI_Original = 1351,
		_DeclaratorFunctionParameter_LRI_Original = 1358,
		_Type_LRI_Original = 1370,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1375,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1378,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1381,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1384,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1388,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1391,
		_Expr_NoComma_LRI_Original = 1395,
		_Expr_LRI_Original = 1398,
		_Expr_Argument_LRI_Original = 1401,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1406,
		_TypeOrExpr_LRI_Original = 1409,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif