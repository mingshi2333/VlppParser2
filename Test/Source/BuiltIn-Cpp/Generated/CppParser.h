/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 292,
		_DeleteExpr = 297,
		_SizeOfPrefix = 305,
		_SizeofExpr = 309,
		_AllPrefixUnaryExpr_NoCStyleCast = 319,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 364,
		_MemberOperatorQualifiedName = 369,
		_BExpr0 = 373,
		_BExpr1 = 391,
		_BExpr2 = 409,
		_BExpr3 = 427,
		_PrimitiveTypeLiteral = 445,
		_PrimitiveType = 463,
		_PM_PrimitiveType = 478,
		_PM_QualifiedName = 481,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 484,
		_ShortTypeBeforeDeclarator = 489,
		_TypeStartsWithKeywordBeforeDeclarator = 495,
		_TypeBeforeDeclarator = 503,
		_AdvancedTypeNoCVNoMember = 513,
		_AdvancedTypeCV = 526,
		_AdvancedTypeNoMember = 530,
		_AdvancedTypeMember = 534,
		_DeclaratorKeyword = 538,
		_DeclaratorAKFirst = 558,
		_DeclaratorAKFollow = 562,
		_DeclaratorAKCV = 566,
		_DeclaratorAKMember = 569,
		_DeclaratorFunctionParameters = 572,
		_FunctionKeyword = 584,
		_DeclaratorFunctionPart = 610,
		_DeclaratorArrayPart = 616,
		_DeclaratorId = 621,
		_DeclaratorBeforeInner = 625,
		_DeclaratorAfterInner = 632,
		_InnerDeclaratorWithoutName = 637,
		_InnerDeclaratorInnerOptionalName = 641,
		_InnerDeclaratorInnerRequiredName = 645,
		_DeclaratorInnerWithoutName = 649,
		_DeclaratorInnerOptionalName = 654,
		_DeclaratorInnerRequiredName = 662,
		_DeclaratorWithoutName = 670,
		_DeclaratorOptionalName = 678,
		_DeclaratorRequiredName = 686,
		_VarValueInit = 693,
		_VarNewParanInit = 697,
		_VarVarParanInit = 703,
		_VarBraceInit = 710,
		_VarCtorInit = 716,
		_VarInit = 720,
		_DeclaratorVariablePartWithoutInit = 725,
		_DeclaratorVariablePartOptionalInit = 728,
		_DeclaratorVariablePartRequiredInit = 732,
		_VarWithoutInit = 736,
		_VarRequiredInit = 746,
		_FunctionParameterVariablePart = 756,
		_FunctionParameter = 761,
		_CatchParameterVariablePart = 772,
		_CatchParameter = 775,
		_ExprOrVarWithInit = 785,
		_VarsDeclWithoutKeyword = 806,
		_VarsDecl = 816,
		_Decl = 827,
		_ExprStat = 838,
		_BlockStat = 860,
		_TryStatCatchPart = 865,
		_TryStat = 873,
		___TryStat = 879,
		_IfStatConditionPart = 890,
		_IfStat = 914,
		_OtherStats = 922,
		_Stat = 971,
		_TypeStartsWithKeyword = 998,
		_Type = 1007,
		_Expr_NoComma = 1018,
		_Expr = 1037,
		_Expr_Argument = 1057,
		_TypeOrExpr_NoComma_NoGT = 1077,
		_TypeOrExpr = 1096,
		_File = 1116,
		_BExpr4_SWITCH_COMBINED = 1119,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1137,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1148,
		_BExpr_SWITCH_1allow_GT = 1159,
		_BExpr10_SWITCH_0allow_GT = 1179,
		_BExpr10_SWITCH_1allow_GT = 1197,
		_BExpr4_SWITCH_0allow_GT = 1215,
		_BExpr4_SWITCH_1allow_GT = 1233,
		_BExpr5_SWITCH_0allow_GT = 1251,
		_BExpr5_SWITCH_1allow_GT = 1269,
		_BExpr6_SWITCH_0allow_GT = 1287,
		_BExpr6_SWITCH_1allow_GT = 1305,
		_BExpr7_SWITCH_0allow_GT = 1323,
		_BExpr7_SWITCH_1allow_GT = 1341,
		_BExpr8_SWITCH_0allow_GT = 1359,
		_BExpr8_SWITCH_1allow_GT = 1377,
		_BExpr9_SWITCH_0allow_GT = 1395,
		_BExpr9_SWITCH_1allow_GT = 1413,
		_BExpr_NoComma_SWITCH_0allow_GT = 1431,
		_BExpr_NoComma_SWITCH_1allow_GT = 1450,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1469,
		_Expr_Raw_SWITCH_1allow_GT = 1488,
		_ThrowExpr_SWITCH_1allow_GT = 1508,
		_ThrowExpr_SWITCH_0allow_GT = 1512,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1516,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1535,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1555,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1558,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1561,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1564,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1568,
		_FunctionParameter_LRI_Isolated_2 = 1572,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1578,
		_VarsDecl_LRI_Isolated_1 = 1584,
		_Stat_LRI_Isolated_1 = 1589,
		_Stat_LRI_Isolated_2 = 1592,
		_Stat_LRI_Isolated_3 = 1595,
		_Stat_LRI_Isolated_4 = 1598,
		_Stat_LRI_Isolated_5 = 1601,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1604,
		_Type_LRI_Isolated_2 = 1610,
		_GenericArgument_LRI_Original = 1616,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1621,
		_PostfixUnaryExpr_LRI_Original = 1626,
		_PrefixUnaryExpr_LRI_Original = 1658,
		_BExpr0_LRI_Original = 1663,
		_BExpr1_LRI_Original = 1672,
		_BExpr2_LRI_Original = 1684,
		_BExpr3_LRI_Original = 1693,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1702,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1705,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1717,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1732,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1741,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1750,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1756,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1762,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1768,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1774,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1780,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1786,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1792,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1798,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1804,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1810,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1853,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1896,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1902,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1905,
		_PM_PrimitiveType_LRI_Original = 1908,
		_PM_QualifiedName_LRI_Original = 1912,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1916,
		_ShortTypeBeforeDeclarator_LRI_Original = 1922,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1926,
		_TypeBeforeDeclarator_LRI_Original = 1933,
		_VarWithoutInit_LRI_Original = 1940,
		_VarRequiredInit_LRI_Original = 1944,
		_FunctionParameter_LRI_Original = 1948,
		_CatchParameter_LRI_Original = 1955,
		_ExprOrVarWithInit_LRI_Original = 1959,
		_VarsDeclWithoutKeyword_LRI_Original = 1966,
		_VarsDecl_LRI_Original = 1972,
		_Decl_LRI_Original = 1977,
		_ExprStat_LRI_Original = 1980,
		_IfStatConditionPart_LRI_Original = 1986,
		_Stat_LRI_Original = 1994,
		_TypeStartsWithKeyword_LRI_Original = 2003,
		_Type_LRI_Original = 2010,
		_Expr_NoComma_LRI_Original = 2017,
		_Expr_LRI_Original = 2020,
		_Expr_Argument_LRI_Original = 2023,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2028,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2031,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2035,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2038,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2042,
		_TypeOrExpr_LRI_Original = 2045,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif