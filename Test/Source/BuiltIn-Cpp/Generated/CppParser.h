/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 292,
		_DeleteExpr = 297,
		_SizeOfPrefix = 305,
		_SizeofExpr = 309,
		_AllPrefixUnaryExpr_NoCStyleCast = 319,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 364,
		_MemberOperatorQualifiedName = 369,
		_BExpr0 = 373,
		_BExpr1 = 391,
		_BExpr2 = 409,
		_BExpr3 = 427,
		_PrimitiveTypeLiteral = 445,
		_PrimitiveType = 463,
		_PM_PrimitiveType = 478,
		_PM_QualifiedName = 481,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 484,
		_ShortTypeBeforeDeclarator = 489,
		_TypeStartsWithKeywordBeforeDeclarator = 495,
		_TypeBeforeDeclarator = 503,
		_AdvancedTypeNoCVNoMember = 513,
		_AdvancedTypeCV = 526,
		_AdvancedTypeNoMember = 530,
		_AdvancedTypeMember = 534,
		_DeclaratorKeyword = 538,
		_DeclaratorAKFirst = 558,
		_DeclaratorAKFollow = 562,
		_DeclaratorAKCV = 566,
		_DeclaratorAKMember = 569,
		_DeclaratorFunctionParameters = 572,
		_FunctionKeyword = 584,
		_DeclaratorFunctionPart = 610,
		_DeclaratorArrayPart = 616,
		_DeclaratorId = 621,
		_DeclaratorBeforeInner = 625,
		_DeclaratorAfterInner = 632,
		_InnerDeclaratorWithoutName = 637,
		_InnerDeclaratorInnerOptionalName = 641,
		_InnerDeclaratorInnerRequiredName = 645,
		_DeclaratorInnerWithoutName = 649,
		_DeclaratorInnerOptionalName = 654,
		_DeclaratorInnerRequiredName = 662,
		_DeclaratorWithoutName = 670,
		_DeclaratorOptionalName = 678,
		_DeclaratorRequiredName = 686,
		_VarValueInit = 693,
		_VarNewParanInit = 697,
		_VarVarParanInit = 703,
		_VarBraceInit = 710,
		_VarCtorInit = 716,
		_VarInit = 720,
		_DeclaratorVariablePartWithoutInit = 725,
		_DeclaratorVariablePartOptionalInit = 728,
		_DeclaratorVariablePartRequiredInit = 732,
		_VarWithoutInit = 736,
		_VarRequiredInit = 746,
		_FunctionParameterVariablePart = 756,
		_FunctionParameter = 761,
		_CatchParameterVariablePart = 772,
		_CatchParameter = 775,
		_ExprOrVarWithInit = 785,
		_VarsDeclWithoutKeyword = 806,
		_VarsDecl = 816,
		_Decl = 827,
		_ExprStat = 838,
		_BlockStat = 860,
		_TryStatCatchPart = 865,
		_TryStat = 873,
		___TryStat = 879,
		_IfStatConditionPart = 890,
		_IfStat = 914,
		_ForStatConditionPart = 922,
		_ForStat = 935,
		_OtherStats = 942,
		_Stat = 991,
		_TypeStartsWithKeyword = 1019,
		_Type = 1028,
		_Expr_NoComma = 1039,
		_Expr = 1058,
		_Expr_Argument = 1078,
		_TypeOrExpr_NoComma_NoGT = 1098,
		_TypeOrExpr = 1117,
		_File = 1137,
		_BExpr4_SWITCH_COMBINED = 1140,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1158,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1169,
		_BExpr_SWITCH_1allow_GT = 1180,
		_BExpr10_SWITCH_0allow_GT = 1200,
		_BExpr10_SWITCH_1allow_GT = 1218,
		_BExpr4_SWITCH_0allow_GT = 1236,
		_BExpr4_SWITCH_1allow_GT = 1254,
		_BExpr5_SWITCH_0allow_GT = 1272,
		_BExpr5_SWITCH_1allow_GT = 1290,
		_BExpr6_SWITCH_0allow_GT = 1308,
		_BExpr6_SWITCH_1allow_GT = 1326,
		_BExpr7_SWITCH_0allow_GT = 1344,
		_BExpr7_SWITCH_1allow_GT = 1362,
		_BExpr8_SWITCH_0allow_GT = 1380,
		_BExpr8_SWITCH_1allow_GT = 1398,
		_BExpr9_SWITCH_0allow_GT = 1416,
		_BExpr9_SWITCH_1allow_GT = 1434,
		_BExpr_NoComma_SWITCH_0allow_GT = 1452,
		_BExpr_NoComma_SWITCH_1allow_GT = 1471,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1490,
		_Expr_Raw_SWITCH_1allow_GT = 1509,
		_ThrowExpr_SWITCH_1allow_GT = 1529,
		_ThrowExpr_SWITCH_0allow_GT = 1533,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1537,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1556,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1576,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1579,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1582,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1585,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1589,
		_FunctionParameter_LRI_Isolated_2 = 1593,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1599,
		_VarsDecl_LRI_Isolated_1 = 1605,
		_ForStatConditionPart_LRI_Isolated_0 = 1610,
		_Stat_LRI_Isolated_1 = 1616,
		_Stat_LRI_Isolated_2 = 1619,
		_Stat_LRI_Isolated_3 = 1622,
		_Stat_LRI_Isolated_4 = 1625,
		_Stat_LRI_Isolated_5 = 1628,
		_Stat_LRI_Isolated_6 = 1631,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1634,
		_Type_LRI_Isolated_2 = 1640,
		_GenericArgument_LRI_Original = 1646,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1651,
		_PostfixUnaryExpr_LRI_Original = 1656,
		_PrefixUnaryExpr_LRI_Original = 1688,
		_BExpr0_LRI_Original = 1693,
		_BExpr1_LRI_Original = 1702,
		_BExpr2_LRI_Original = 1714,
		_BExpr3_LRI_Original = 1723,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1732,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1735,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1747,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1762,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1771,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1780,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1786,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1792,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1798,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1804,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1810,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1816,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1822,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1828,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1834,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1840,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1883,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1926,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1932,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1935,
		_PM_PrimitiveType_LRI_Original = 1938,
		_PM_QualifiedName_LRI_Original = 1942,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1946,
		_ShortTypeBeforeDeclarator_LRI_Original = 1952,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1956,
		_TypeBeforeDeclarator_LRI_Original = 1963,
		_VarWithoutInit_LRI_Original = 1970,
		_VarRequiredInit_LRI_Original = 1974,
		_FunctionParameter_LRI_Original = 1978,
		_CatchParameter_LRI_Original = 1985,
		_ExprOrVarWithInit_LRI_Original = 1989,
		_VarsDeclWithoutKeyword_LRI_Original = 1996,
		_VarsDecl_LRI_Original = 2002,
		_Decl_LRI_Original = 2007,
		_ExprStat_LRI_Original = 2010,
		_IfStatConditionPart_LRI_Original = 2016,
		_ForStatConditionPart_LRI_Original = 2024,
		_Stat_LRI_Original = 2036,
		_TypeStartsWithKeyword_LRI_Original = 2046,
		_Type_LRI_Original = 2053,
		_Expr_NoComma_LRI_Original = 2060,
		_Expr_LRI_Original = 2063,
		_Expr_Argument_LRI_Original = 2066,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2071,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2074,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2078,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2081,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2085,
		_TypeOrExpr_LRI_Original = 2088,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif