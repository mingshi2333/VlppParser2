/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewInit = 275,
		_NewPrefix = 291,
		_NewExpr = 296,
		_DeletePrefix = 305,
		_DeleteExpr = 310,
		_SizeOfPrefix = 318,
		_SizeofExpr = 322,
		_AllPrefixUnaryExpr_NoCStyleCast = 332,
		_AllPrefixUnaryExpr = 353,
		_PrefixUnaryExpr = 360,
		_MemberOperatorIdentifier = 377,
		_MemberOperatorQualifiedName = 382,
		_BExpr0 = 386,
		_BExpr1 = 404,
		_BExpr2 = 422,
		_BExpr3 = 440,
		_PrimitiveTypeLiteral = 458,
		_PrimitiveType = 476,
		_PM_PrimitiveType = 491,
		_PM_QualifiedName = 494,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 497,
		_ShortTypeBeforeDeclarator = 502,
		_TypeStartsWithKeywordBeforeDeclarator = 508,
		_TypeBeforeDeclarator = 516,
		_AdvancedTypeNoCVNoMember = 526,
		_AdvancedTypeCV = 539,
		_AdvancedTypeNoMember = 543,
		_AdvancedTypeMember = 547,
		_DeclaratorKeyword = 551,
		_DeclaratorAKFirst = 571,
		_DeclaratorAKFollow = 575,
		_DeclaratorAKCV = 579,
		_DeclaratorAKMember = 582,
		_DeclaratorFunctionParameter = 585,
		_DeclaratorFunctionParameters = 596,
		_FunctionKeyword = 608,
		_DeclaratorFunctionPart = 634,
		_DeclaratorArrayPart = 640,
		_DeclaratorId = 645,
		_DeclaratorBeforeInner = 649,
		_DeclaratorAfterInner = 656,
		_InnerDeclaratorWithoutName = 661,
		_InnerDeclaratorInnerOptionalName = 665,
		_DeclaratorInnerWithoutName = 669,
		_DeclaratorInnerOptionalName = 674,
		_DeclaratorWithoutName = 682,
		_DeclaratorOptionalName = 690,
		_TypeStartsWithKeyword = 698,
		_Type = 707,
		_ExprStat = 718,
		_OtherStats = 738,
		_Stat = 773,
		_Expr_NoComma = 794,
		_Expr = 813,
		_Expr_Argument = 833,
		_TypeOrExpr_NoComma_NoGT = 853,
		_TypeOrExpr = 872,
		_File = 892,
		_BExpr4_SWITCH_COMBINED = 895,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 913,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 924,
		_BExpr_SWITCH_1allow_GT = 935,
		_BExpr10_SWITCH_0allow_GT = 955,
		_BExpr10_SWITCH_1allow_GT = 973,
		_BExpr4_SWITCH_0allow_GT = 991,
		_BExpr4_SWITCH_1allow_GT = 1009,
		_BExpr5_SWITCH_0allow_GT = 1027,
		_BExpr5_SWITCH_1allow_GT = 1045,
		_BExpr6_SWITCH_0allow_GT = 1063,
		_BExpr6_SWITCH_1allow_GT = 1081,
		_BExpr7_SWITCH_0allow_GT = 1099,
		_BExpr7_SWITCH_1allow_GT = 1117,
		_BExpr8_SWITCH_0allow_GT = 1135,
		_BExpr8_SWITCH_1allow_GT = 1153,
		_BExpr9_SWITCH_0allow_GT = 1171,
		_BExpr9_SWITCH_1allow_GT = 1189,
		_BExpr_NoComma_SWITCH_0allow_GT = 1207,
		_BExpr_NoComma_SWITCH_1allow_GT = 1226,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1245,
		_Expr_Raw_SWITCH_1allow_GT = 1264,
		_ThrowExpr_SWITCH_1allow_GT = 1284,
		_ThrowExpr_SWITCH_0allow_GT = 1288,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1292,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1311,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1331,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1334,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1337,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1340,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1344,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1348,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1356,
		_Type_LRI_Isolated_2 = 1362,
		_Stat_LRI_Isolated_1 = 1368,
		_GenericArgument_LRI_Original = 1371,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1376,
		_PostfixUnaryExpr_LRI_Original = 1381,
		_PrefixUnaryExpr_LRI_Original = 1413,
		_BExpr0_LRI_Original = 1418,
		_BExpr1_LRI_Original = 1427,
		_BExpr2_LRI_Original = 1439,
		_BExpr3_LRI_Original = 1448,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1457,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1460,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1472,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1487,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1496,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1505,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1511,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1517,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1523,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1529,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1535,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1541,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1547,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1553,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1559,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1565,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1608,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1651,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1657,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1660,
		_PM_PrimitiveType_LRI_Original = 1663,
		_PM_QualifiedName_LRI_Original = 1667,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1671,
		_ShortTypeBeforeDeclarator_LRI_Original = 1677,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1681,
		_TypeBeforeDeclarator_LRI_Original = 1688,
		_DeclaratorFunctionParameter_LRI_Original = 1695,
		_TypeStartsWithKeyword_LRI_Original = 1707,
		_Type_LRI_Original = 1714,
		_ExprStat_LRI_Original = 1721,
		_Stat_LRI_Original = 1725,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1730,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1733,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1737,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1740,
		_Expr_NoComma_LRI_Original = 1744,
		_Expr_LRI_Original = 1747,
		_Expr_Argument_LRI_Original = 1750,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1755,
		_TypeOrExpr_LRI_Original = 1758,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif