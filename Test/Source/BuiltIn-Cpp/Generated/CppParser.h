/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 292,
		_DeleteExpr = 297,
		_SizeOfPrefix = 305,
		_SizeofExpr = 309,
		_AllPrefixUnaryExpr_NoCStyleCast = 319,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 364,
		_MemberOperatorQualifiedName = 369,
		_BExpr0 = 373,
		_BExpr1 = 391,
		_BExpr2 = 409,
		_BExpr3 = 427,
		_PrimitiveTypeLiteral = 445,
		_PrimitiveType = 463,
		_PM_PrimitiveType = 478,
		_PM_QualifiedName = 481,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 484,
		_ShortTypeBeforeDeclarator = 489,
		_TypeStartsWithKeywordBeforeDeclarator = 495,
		_TypeBeforeDeclarator = 503,
		_AdvancedTypeNoCVNoMember = 513,
		_AdvancedTypeCV = 526,
		_AdvancedTypeNoMember = 530,
		_AdvancedTypeMember = 534,
		_DeclaratorKeyword = 538,
		_DeclaratorAKFirst = 558,
		_DeclaratorAKFollow = 562,
		_DeclaratorAKCV = 566,
		_DeclaratorAKMember = 569,
		_DeclaratorFunctionParameters = 572,
		_FunctionKeyword = 584,
		_DeclaratorFunctionPart = 610,
		_DeclaratorArrayPart = 616,
		_DeclaratorId = 621,
		_DeclaratorBeforeInner = 625,
		_DeclaratorAfterInner = 632,
		_InnerDeclaratorWithoutName = 637,
		_InnerDeclaratorInnerOptionalName = 641,
		_InnerDeclaratorInnerRequiredName = 645,
		_DeclaratorInnerWithoutName = 649,
		_DeclaratorInnerOptionalName = 654,
		_DeclaratorInnerRequiredName = 662,
		_DeclaratorWithoutName = 670,
		_DeclaratorOptionalName = 678,
		_DeclaratorRequiredName = 686,
		_VarValueInit = 693,
		_VarNewParanInit = 697,
		_VarVarParanInit = 703,
		_VarBraceInit = 710,
		_VarCtorInit = 716,
		_VarInit = 720,
		_FunctionParameterVariablePart = 725,
		_DeclaratorVariablePartWithoutInit = 730,
		_DeclaratorVariablePartOptionalInit = 733,
		_DeclaratorVariablePartRequiredInit = 737,
		_VarWithoutInit = 741,
		_VarRequiredInit = 751,
		_FunctionParameter = 761,
		_ExprOrVarWithInit = 772,
		_VarsDeclWithoutKeyword = 793,
		_VarsDecl = 803,
		_Decl = 814,
		_ExprStat = 825,
		_BlockStat = 847,
		_TryStatCatchPart = 852,
		_TryStat = 860,
		___TryStat = 866,
		_OtherStats = 877,
		_Stat = 934,
		_TypeStartsWithKeyword = 960,
		_Type = 969,
		_Expr_NoComma = 980,
		_Expr = 999,
		_Expr_Argument = 1019,
		_TypeOrExpr_NoComma_NoGT = 1039,
		_TypeOrExpr = 1058,
		_File = 1078,
		_BExpr4_SWITCH_COMBINED = 1081,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1099,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1110,
		_BExpr_SWITCH_1allow_GT = 1121,
		_BExpr10_SWITCH_0allow_GT = 1141,
		_BExpr10_SWITCH_1allow_GT = 1159,
		_BExpr4_SWITCH_0allow_GT = 1177,
		_BExpr4_SWITCH_1allow_GT = 1195,
		_BExpr5_SWITCH_0allow_GT = 1213,
		_BExpr5_SWITCH_1allow_GT = 1231,
		_BExpr6_SWITCH_0allow_GT = 1249,
		_BExpr6_SWITCH_1allow_GT = 1267,
		_BExpr7_SWITCH_0allow_GT = 1285,
		_BExpr7_SWITCH_1allow_GT = 1303,
		_BExpr8_SWITCH_0allow_GT = 1321,
		_BExpr8_SWITCH_1allow_GT = 1339,
		_BExpr9_SWITCH_0allow_GT = 1357,
		_BExpr9_SWITCH_1allow_GT = 1375,
		_BExpr_NoComma_SWITCH_0allow_GT = 1393,
		_BExpr_NoComma_SWITCH_1allow_GT = 1412,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1431,
		_Expr_Raw_SWITCH_1allow_GT = 1450,
		_ThrowExpr_SWITCH_1allow_GT = 1470,
		_ThrowExpr_SWITCH_0allow_GT = 1474,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1478,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1497,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1517,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1520,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1523,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1526,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1530,
		_FunctionParameter_LRI_Isolated_2 = 1534,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1540,
		_VarsDecl_LRI_Isolated_1 = 1546,
		_Stat_LRI_Isolated_1 = 1551,
		_Stat_LRI_Isolated_2 = 1554,
		_Stat_LRI_Isolated_3 = 1557,
		_Stat_LRI_Isolated_4 = 1560,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1563,
		_Type_LRI_Isolated_2 = 1569,
		_GenericArgument_LRI_Original = 1575,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1580,
		_PostfixUnaryExpr_LRI_Original = 1585,
		_PrefixUnaryExpr_LRI_Original = 1617,
		_BExpr0_LRI_Original = 1622,
		_BExpr1_LRI_Original = 1631,
		_BExpr2_LRI_Original = 1643,
		_BExpr3_LRI_Original = 1652,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1661,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1664,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1676,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1691,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1700,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1709,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1715,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1721,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1727,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1733,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1739,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1745,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1751,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1757,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1763,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1769,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1812,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1855,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1861,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1864,
		_PM_PrimitiveType_LRI_Original = 1867,
		_PM_QualifiedName_LRI_Original = 1871,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1875,
		_ShortTypeBeforeDeclarator_LRI_Original = 1881,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1885,
		_TypeBeforeDeclarator_LRI_Original = 1892,
		_VarWithoutInit_LRI_Original = 1899,
		_VarRequiredInit_LRI_Original = 1903,
		_FunctionParameter_LRI_Original = 1907,
		_ExprOrVarWithInit_LRI_Original = 1914,
		_VarsDeclWithoutKeyword_LRI_Original = 1921,
		_VarsDecl_LRI_Original = 1927,
		_Decl_LRI_Original = 1932,
		_ExprStat_LRI_Original = 1935,
		_Stat_LRI_Original = 1941,
		_TypeStartsWithKeyword_LRI_Original = 1949,
		_Type_LRI_Original = 1956,
		_Expr_NoComma_LRI_Original = 1963,
		_Expr_LRI_Original = 1966,
		_Expr_Argument_LRI_Original = 1969,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1974,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1977,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1981,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1984,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1988,
		_TypeOrExpr_LRI_Original = 1991,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif