/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_AdvancedTypeNoCVNoMember = 579,
		_AdvancedTypeCV = 592,
		_AdvancedTypeNoMember = 596,
		_AdvancedTypeMember = 600,
		_DeclaratorKeyword = 604,
		_DeclaratorAKFirst = 624,
		_DeclaratorAKFollow = 628,
		_DeclaratorAKCV = 632,
		_DeclaratorAKMember = 635,
		_DeclaratorAKCtorDtor = 638,
		_DeclaratorFunctionParameters = 642,
		_FunctionKeyword = 654,
		_DeclaratorFunctionPart = 680,
		_DeclaratorFunctionPartOptionalParameters = 686,
		_DeclaratorArrayPart = 695,
		_DeclaratorId = 700,
		_DeclaratorUntypedFuncId = 704,
		_DeclaratorBeforeInner = 709,
		_DeclaratorAfterInner = 716,
		_InnerDeclaratorWithoutName = 721,
		_InnerDeclaratorInnerOptionalName = 725,
		_InnerDeclaratorInnerRequiredName = 729,
		_DeclaratorInnerWithoutName = 733,
		_DeclaratorInnerOptionalName = 738,
		_DeclaratorInnerRequiredName = 750,
		_DeclaratorWithoutName = 762,
		_DeclaratorOptionalName = 770,
		_DeclaratorRequiredName = 778,
		_DeclaratorUntypedFunc = 785,
		_VarValueInit = 790,
		_VarNewParanInit = 794,
		_VarVarParanInit = 800,
		_VarBraceInit = 807,
		_VarCtorInit = 813,
		_VarStatInit = 817,
		_VarInit = 820,
		_DeclaratorVariablePartWithoutInit = 825,
		_DeclaratorVariablePartOptionalInit = 828,
		_DeclaratorVariablePartRequiredInit = 832,
		_DeclaratorUntypedFuncPartWithoutInit = 836,
		_DeclaratorUntypedFuncParRequiredInit = 839,
		_FunctionParameterVariablePart = 843,
		_FunctionParameter = 848,
		_GenericParameterKeyword = 859,
		_OrdinaryGenericParameter = 866,
		_TypedGenericParameterInit = 873,
		_TypedGenericParameterVariablePart = 877,
		_TypedGenericParameter = 882,
		_GenericParameter = 892,
		_GenericHeader = 903,
		_CatchParameterVariablePart = 909,
		_CatchParameter = 912,
		_ExprOrVarCondition = 923,
		_ForEachParameter = 942,
		_VarsDeclWithoutKeyword = 952,
		_VarsDecl = 962,
		_UntypedFuncForwardDeclWithoutKeyword = 973,
		_VarsOrFuncForwardDeclWithoutKeyword = 976,
		_VarsOrFuncForwardDecl = 987,
		_UntypedFuncDeclWithoutKeyword = 999,
		_VarsOrFuncDeclWithoutKeyword = 1002,
		_VarsOrFuncDecl = 1014,
		_ClassInheritanceFirst = 1027,
		_ClassInheritanceSecond = 1040,
		_ClassMemberPartFirst = 1053,
		_ClassMemberPartSecond = 1075,
		_ClassBody = 1086,
		_ClassDeclPrefix = 1096,
		_ClassDecl = 1104,
		_ClassForwardDecl = 1109,
		_StaticAssertDecl = 1113,
		_TypedefCompatibleDecl = 1121,
		_TypedefDecl = 1133,
		_ExternDecl = 1137,
		_NsName = 1144,
		_NsDecl = 1147,
		_EnumItem = 1155,
		_EnumBody = 1160,
		_EnumDecl = 1168,
		_EnumForwardDecl = 1174,
		_DeclWithoutVarsFuncSemicolon = 1179,
		_DeclInStat = 1187,
		_DeclWithSemicolon = 1200,
		_ExprStat = 1216,
		_BlockStat = 1240,
		_TryStatCatchPart = 1245,
		_TryStat = 1253,
		___TryStat = 1259,
		_IfStatConditionPart = 1270,
		_IfStat = 1292,
		_ForStatConditionPart = 1300,
		_ForStat = 1321,
		_OtherStats = 1328,
		_Stat = 1370,
		_Type = 1400,
		_Expr_NoComma = 1411,
		_Expr = 1428,
		_Expr_Argument = 1446,
		_TypeOrExpr_NoComma_NoGT = 1464,
		_TypeOrExpr = 1482,
		_File = 1501,
		_BExpr5_SWITCH_COMBINED = 1523,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1539,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1550,
		_BExpr_SWITCH_1allow_GT = 1561,
		_BExpr10_SWITCH_0allow_GT = 1579,
		_BExpr10_SWITCH_1allow_GT = 1595,
		_BExpr11_SWITCH_0allow_GT = 1611,
		_BExpr11_SWITCH_1allow_GT = 1627,
		_BExpr5_SWITCH_0allow_GT = 1643,
		_BExpr5_SWITCH_1allow_GT = 1659,
		_BExpr6_SWITCH_0allow_GT = 1675,
		_BExpr6_SWITCH_1allow_GT = 1691,
		_BExpr7_SWITCH_0allow_GT = 1707,
		_BExpr7_SWITCH_1allow_GT = 1723,
		_BExpr8_SWITCH_0allow_GT = 1739,
		_BExpr8_SWITCH_1allow_GT = 1755,
		_BExpr9_SWITCH_0allow_GT = 1771,
		_BExpr9_SWITCH_1allow_GT = 1787,
		_BExpr_NoComma_SWITCH_0allow_GT = 1803,
		_BExpr_NoComma_SWITCH_1allow_GT = 1820,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1837,
		_Expr_Raw_SWITCH_1allow_GT = 1854,
		_ThrowExpr_SWITCH_1allow_GT = 1872,
		_ThrowExpr_SWITCH_0allow_GT = 1876,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1880,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1898,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1917,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1924,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1927,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1930,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1933,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1937,
		_FunctionParameter_LRI_Isolated_2 = 1941,
		_GenericParameter_LRI_Isolated_0 = 1947,
		_CatchParameter_LRI_Isolated_2 = 1950,
		_ExprOrVarCondition_LRI_Isolated_2 = 1956,
		_VarsDecl_LRI_Isolated_1 = 1962,
		_VarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 1967,
		_VarsOrFuncForwardDecl_LRI_Isolated_1 = 1970,
		_VarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 1975,
		_VarsOrFuncDeclWithoutKeyword_LRI_Isolated_2 = 1979,
		_VarsOrFuncDecl_LRI_Isolated_1 = 1982,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 1987,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 1990,
		_DeclInStat_LRI_Isolated_0 = 1993,
		_DeclWithSemicolon_LRI_Isolated_0 = 1996,
		_DeclWithSemicolon_LRI_Isolated_2 = 2000,
		_DeclWithSemicolon_LRI_Isolated_3 = 2003,
		_ForStatConditionPart_LRI_Isolated_0 = 2006,
		_Stat_LRI_Isolated_1 = 2012,
		_Stat_LRI_Isolated_2 = 2015,
		_Stat_LRI_Isolated_3 = 2018,
		_Stat_LRI_Isolated_4 = 2021,
		_Stat_LRI_Isolated_5 = 2024,
		_Stat_LRI_Isolated_6 = 2027,
		_Type_LRI_Isolated_2 = 2030,
		_GenericArgument_LRI_Original = 2036,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2041,
		_PostfixUnaryExpr_LRI_Original = 2046,
		_PrefixUnaryExpr_LRI_Original = 2080,
		_BExpr0_LRI_Original = 2085,
		_BExpr1_LRI_Original = 2094,
		_BExpr2_LRI_Original = 2106,
		_BExpr3_LRI_Original = 2115,
		_BExpr4_LRI_Original = 2126,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2132,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2135,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2149,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2166,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2175,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2184,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2190,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2196,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2202,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2208,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2214,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2220,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2226,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2232,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2238,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2244,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2291,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2338,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2344,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2347,
		_PM_PrimitiveType_LRI_Original = 2350,
		_PM_QualifiedName_LRI_Original = 2354,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2358,
		_ShortTypeBeforeDeclarator_LRI_Original = 2364,
		_CallConstructibleType_LRI_Original = 2368,
		_TypeBeforeDeclarator_LRI_Original = 2379,
		_FunctionParameter_LRI_Original = 2386,
		_TypedGenericParameter_LRI_Original = 2393,
		_GenericParameter_LRI_Original = 2398,
		_CatchParameter_LRI_Original = 2403,
		_ExprOrVarCondition_LRI_Original = 2410,
		_ForEachParameter_LRI_Original = 2417,
		_VarsDeclWithoutKeyword_LRI_Original = 2421,
		_VarsDecl_LRI_Original = 2427,
		_VarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2432,
		_VarsOrFuncForwardDecl_LRI_Original = 2437,
		_VarsOrFuncDeclWithoutKeyword_LRI_Original = 2442,
		_VarsOrFuncDecl_LRI_Original = 2449,
		_ClassMemberPartFirst_LRI_Original = 2454,
		_TypedefCompatibleDecl_LRI_Original = 2458,
		_DeclInStat_LRI_Original = 2464,
		_DeclWithSemicolon_LRI_Original = 2469,
		_ExprStat_LRI_Original = 2476,
		_IfStatConditionPart_LRI_Original = 2482,
		_ForStatConditionPart_LRI_Original = 2490,
		_Stat_LRI_Original = 2507,
		_Type_LRI_Original = 2517,
		_Expr_NoComma_LRI_Original = 2524,
		_Expr_LRI_Original = 2527,
		_Expr_Argument_LRI_Original = 2530,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2535,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2538,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2542,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2545,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2549,
		_TypeOrExpr_LRI_Original = 2552,
		_File_LRI_Original = 2555,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif