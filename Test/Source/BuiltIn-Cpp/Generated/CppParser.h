/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 138,
		_QualifiedNameFragment = 144,
		_MemberQualifiedNameFragment = 151,
		_QualifiedName = 154,
		_StringLiteralFragment = 170,
		_PrimitiveExpr = 174,
		_QualifiedName_PrimitiveExpr = 251,
		_PostfixUnaryExpr = 255,
		_NewInit = 267,
		_NewPrefix = 283,
		_NewExpr = 288,
		_DeletePrefix = 297,
		_DeleteExpr = 302,
		_SizeOfPrefix = 310,
		_SizeofExpr = 314,
		_AllPrefixUnaryExpr_NoCStyleCast = 324,
		_AllPrefixUnaryExpr = 345,
		_PrefixUnaryExpr = 352,
		_MemberOperatorIdentifier = 365,
		_MemberOperatorQualifiedName = 370,
		_BExpr0 = 374,
		_BExpr1 = 388,
		_BExpr2 = 402,
		_BExpr3 = 416,
		_PrimitiveTypeLiteral = 430,
		_PrimitiveType = 448,
		_PM_PrimitiveType = 463,
		_PM_QualifiedName = 466,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 469,
		_ShortTypeBeforeDeclarator = 474,
		_TypeStartsWithKeywordBeforeDeclarator = 480,
		_TypeBeforeDeclarator = 488,
		_AdvancedTypeNoCVNoMember = 498,
		_AdvancedTypeCV = 511,
		_AdvancedTypeNoMember = 515,
		_AdvancedTypeMember = 519,
		_DeclaratorKeyword = 523,
		_DeclaratorAKFirst = 543,
		_DeclaratorAKFollow = 547,
		_DeclaratorAKCV = 551,
		_DeclaratorAKMember = 554,
		_DeclaratorFunctionParameter = 557,
		_DeclaratorFunctionParameters = 568,
		_FunctionKeyword = 580,
		_DeclaratorFunctionPart = 606,
		_DeclaratorArrayPart = 612,
		_DeclaratorId = 617,
		_DeclaratorBeforeInner = 621,
		_DeclaratorAfterInner = 628,
		_InnerDeclaratorWithoutName = 633,
		_InnerDeclaratorInnerOptionalName = 637,
		_DeclaratorInnerWithoutName = 641,
		_DeclaratorInnerOptionalName = 646,
		_DeclaratorWithoutName = 654,
		_DeclaratorOptionalName = 662,
		_TypeStartsWithKeyword = 670,
		_Type = 678,
		_Expr_NoComma = 688,
		_Expr = 703,
		_Expr_Argument = 719,
		_TypeOrExpr_NoComma_NoGT = 735,
		_TypeOrExpr = 750,
		_File = 766,
		_BExpr4_SWITCH_COMBINED = 769,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 783,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 793,
		_BExpr_SWITCH_1allow_GT = 803,
		_BExpr10_SWITCH_0allow_GT = 819,
		_BExpr10_SWITCH_1allow_GT = 833,
		_BExpr4_SWITCH_0allow_GT = 847,
		_BExpr4_SWITCH_1allow_GT = 861,
		_BExpr5_SWITCH_0allow_GT = 875,
		_BExpr5_SWITCH_1allow_GT = 889,
		_BExpr6_SWITCH_0allow_GT = 903,
		_BExpr6_SWITCH_1allow_GT = 917,
		_BExpr7_SWITCH_0allow_GT = 931,
		_BExpr7_SWITCH_1allow_GT = 945,
		_BExpr8_SWITCH_0allow_GT = 959,
		_BExpr8_SWITCH_1allow_GT = 973,
		_BExpr9_SWITCH_0allow_GT = 987,
		_BExpr9_SWITCH_1allow_GT = 1001,
		_BExpr_NoComma_SWITCH_0allow_GT = 1015,
		_BExpr_NoComma_SWITCH_1allow_GT = 1030,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1045,
		_Expr_Raw_SWITCH_1allow_GT = 1060,
		_ThrowExpr_SWITCH_1allow_GT = 1076,
		_ThrowExpr_SWITCH_0allow_GT = 1080,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1084,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1099,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1115,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1118,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1121,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1124,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1128,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1132,
		_GenericArgument_LRI_Original = 1140,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1145,
		_PostfixUnaryExpr_LRI_Original = 1150,
		_PrefixUnaryExpr_LRI_Original = 1182,
		_BExpr0_LRI_Original = 1187,
		_BExpr1_LRI_Original = 1196,
		_BExpr2_LRI_Original = 1208,
		_BExpr3_LRI_Original = 1217,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1226,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1229,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1241,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1256,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1265,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1274,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1280,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1286,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1292,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1298,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1304,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1310,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1316,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1322,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1328,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1334,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1377,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1420,
		_PM_PrimitiveType_LRI_Original = 1426,
		_PM_QualifiedName_LRI_Original = 1430,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1434,
		_ShortTypeBeforeDeclarator_LRI_Original = 1440,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1444,
		_TypeBeforeDeclarator_LRI_Original = 1451,
		_DeclaratorFunctionParameter_LRI_Original = 1458,
		_TypeStartsWithKeyword_LRI_Original = 1470,
		_Type_LRI_Original = 1475,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1480,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1483,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1486,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1489,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1493,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1496,
		_Expr_NoComma_LRI_Original = 1500,
		_Expr_LRI_Original = 1503,
		_Expr_Argument_LRI_Original = 1506,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1511,
		_TypeOrExpr_LRI_Original = 1514,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif