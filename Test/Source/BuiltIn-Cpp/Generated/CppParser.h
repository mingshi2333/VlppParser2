/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_AdvancedTypeNoCVNoMember = 579,
		_AdvancedTypeCV = 592,
		_AdvancedTypeNoMember = 596,
		_AdvancedTypeMember = 600,
		_DeclaratorKeyword = 604,
		_DeclaratorAKFirst = 624,
		_DeclaratorAKFollow = 628,
		_DeclaratorAKCV = 632,
		_DeclaratorAKMember = 635,
		_DeclaratorAKCtorDtor = 638,
		_DeclaratorFunctionParameters = 642,
		_FunctionKeyword = 654,
		_DeclaratorFunctionPart = 680,
		_DeclaratorFunctionPartOptionalParameters = 686,
		_DeclaratorArrayPart = 695,
		_DeclaratorId = 700,
		_DeclaratorUntypedFuncId = 704,
		_DeclaratorBeforeInner = 709,
		_DeclaratorAfterInner = 716,
		_InnerDeclaratorWithoutName = 721,
		_InnerDeclaratorInnerOptionalName = 725,
		_InnerDeclaratorInnerRequiredName = 729,
		_DeclaratorInnerWithoutName = 733,
		_DeclaratorInnerOptionalName = 738,
		_DeclaratorInnerRequiredName = 750,
		_DeclaratorWithoutName = 762,
		_DeclaratorOptionalName = 770,
		_DeclaratorRequiredName = 778,
		_DeclaratorUntypedFunc = 785,
		_VarValueInit = 790,
		_VarNewParanInit = 794,
		_VarVarParanInit = 800,
		_VarBraceInit = 807,
		_VarCtorInit = 813,
		_VarStatInit = 817,
		_VarInit = 820,
		_DeclaratorVariablePartWithoutInit = 825,
		_DeclaratorVariablePartOptionalInit = 828,
		_DeclaratorVariablePartRequiredInit = 832,
		_DeclaratorUntypedFuncPartWithoutInit = 836,
		_DeclaratorUntypedFuncParRequiredInit = 839,
		_FunctionParameterVariablePart = 843,
		_FunctionParameter = 848,
		_CatchParameterVariablePart = 859,
		_CatchParameter = 862,
		_ExprOrVarWithInit = 873,
		_GenericParameterKeyword = 892,
		_OrdinaryGenericParameter = 899,
		_TypedGenericParameterInit = 906,
		_TypedGenericParameterVariablePart = 910,
		_TypedGenericParameter = 915,
		_GenericParameter = 925,
		_GenericHeader = 936,
		_VarWithoutInit = 942,
		_VarsDeclWithoutKeyword = 952,
		_VarsDecl = 962,
		_VarsFuncForwardDeclWithoutKeyword = 973,
		_VarsFuncForwardDecl = 984,
		_FuncDeclWithoutKeyword = 996,
		_FuncDecl = 1000,
		_ClassInheritanceFirst = 1006,
		_ClassInheritanceSecond = 1019,
		_ClassMemberPartFirst = 1032,
		_ClassMemberPartSecond = 1064,
		_ClassBody = 1075,
		_ClassDeclPrefix = 1085,
		_ClassDecl = 1093,
		_ClassForwardDecl = 1098,
		_StaticAssertDecl = 1102,
		_TypedefCompatibleDecl = 1110,
		_TypedefDecl = 1122,
		_ExternDecl = 1126,
		_NsName = 1133,
		_NsDecl = 1136,
		_EnumItem = 1144,
		_EnumBody = 1149,
		_EnumDecl = 1157,
		_EnumForwardDecl = 1163,
		_Decl = 1168,
		_DeclWithSemicolon = 1186,
		_ExprStat = 1215,
		_BlockStat = 1249,
		_TryStatCatchPart = 1254,
		_TryStat = 1262,
		___TryStat = 1268,
		_IfStatConditionPart = 1279,
		_IfStat = 1301,
		_ForStatConditionPart = 1309,
		_ForStat = 1330,
		_OtherStats = 1337,
		_Stat = 1379,
		_Type = 1419,
		_Expr_NoComma = 1430,
		_Expr = 1447,
		_Expr_Argument = 1465,
		_TypeOrExpr_NoComma_NoGT = 1483,
		_TypeOrExpr = 1501,
		_File = 1520,
		_BExpr5_SWITCH_COMBINED = 1552,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1568,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1579,
		_BExpr_SWITCH_1allow_GT = 1590,
		_BExpr10_SWITCH_0allow_GT = 1608,
		_BExpr10_SWITCH_1allow_GT = 1624,
		_BExpr11_SWITCH_0allow_GT = 1640,
		_BExpr11_SWITCH_1allow_GT = 1656,
		_BExpr5_SWITCH_0allow_GT = 1672,
		_BExpr5_SWITCH_1allow_GT = 1688,
		_BExpr6_SWITCH_0allow_GT = 1704,
		_BExpr6_SWITCH_1allow_GT = 1720,
		_BExpr7_SWITCH_0allow_GT = 1736,
		_BExpr7_SWITCH_1allow_GT = 1752,
		_BExpr8_SWITCH_0allow_GT = 1768,
		_BExpr8_SWITCH_1allow_GT = 1784,
		_BExpr9_SWITCH_0allow_GT = 1800,
		_BExpr9_SWITCH_1allow_GT = 1816,
		_BExpr_NoComma_SWITCH_0allow_GT = 1832,
		_BExpr_NoComma_SWITCH_1allow_GT = 1849,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1866,
		_Expr_Raw_SWITCH_1allow_GT = 1883,
		_ThrowExpr_SWITCH_1allow_GT = 1901,
		_ThrowExpr_SWITCH_0allow_GT = 1905,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1909,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1927,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1946,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1953,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1956,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1959,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1962,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1966,
		_FunctionParameter_LRI_Isolated_2 = 1970,
		_CatchParameter_LRI_Isolated_2 = 1976,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1982,
		_GenericParameter_LRI_Isolated_0 = 1988,
		_VarsDecl_LRI_Isolated_1 = 1991,
		_VarsFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 1996,
		_VarsFuncForwardDecl_LRI_Isolated_1 = 1999,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2004,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2007,
		_Decl_LRI_Isolated_1 = 2010,
		_Decl_LRI_Isolated_2 = 2013,
		_Decl_LRI_Isolated_3 = 2016,
		_Decl_LRI_Isolated_4 = 2019,
		_Decl_LRI_Isolated_5 = 2022,
		_Decl_LRI_Isolated_6 = 2025,
		_DeclWithSemicolon_LRI_Isolated_1 = 2028,
		_DeclWithSemicolon_LRI_Isolated_2 = 2031,
		_DeclWithSemicolon_LRI_Isolated_3 = 2034,
		_ForStatConditionPart_LRI_Isolated_0 = 2037,
		_Stat_LRI_Isolated_1 = 2043,
		_Stat_LRI_Isolated_2 = 2046,
		_Stat_LRI_Isolated_3 = 2049,
		_Stat_LRI_Isolated_4 = 2052,
		_Stat_LRI_Isolated_5 = 2055,
		_Stat_LRI_Isolated_6 = 2058,
		_Type_LRI_Isolated_2 = 2061,
		_GenericArgument_LRI_Original = 2067,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2072,
		_PostfixUnaryExpr_LRI_Original = 2077,
		_PrefixUnaryExpr_LRI_Original = 2111,
		_BExpr0_LRI_Original = 2116,
		_BExpr1_LRI_Original = 2125,
		_BExpr2_LRI_Original = 2137,
		_BExpr3_LRI_Original = 2146,
		_BExpr4_LRI_Original = 2157,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2163,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2166,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2180,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2197,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2206,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2215,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2221,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2227,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2233,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2239,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2245,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2251,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2257,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2263,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2269,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2275,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2322,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2369,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2375,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2378,
		_PM_PrimitiveType_LRI_Original = 2381,
		_PM_QualifiedName_LRI_Original = 2385,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2389,
		_ShortTypeBeforeDeclarator_LRI_Original = 2395,
		_CallConstructibleType_LRI_Original = 2399,
		_TypeBeforeDeclarator_LRI_Original = 2410,
		_FunctionParameter_LRI_Original = 2417,
		_CatchParameter_LRI_Original = 2424,
		_ExprOrVarWithInit_LRI_Original = 2431,
		_TypedGenericParameter_LRI_Original = 2438,
		_GenericParameter_LRI_Original = 2443,
		_VarWithoutInit_LRI_Original = 2448,
		_VarsDeclWithoutKeyword_LRI_Original = 2452,
		_VarsDecl_LRI_Original = 2458,
		_VarsFuncForwardDeclWithoutKeyword_LRI_Original = 2463,
		_VarsFuncForwardDecl_LRI_Original = 2468,
		_ClassMemberPartFirst_LRI_Original = 2473,
		_TypedefCompatibleDecl_LRI_Original = 2477,
		_Decl_LRI_Original = 2483,
		_DeclWithSemicolon_LRI_Original = 2493,
		_ExprStat_LRI_Original = 2501,
		_IfStatConditionPart_LRI_Original = 2507,
		_ForStatConditionPart_LRI_Original = 2515,
		_Stat_LRI_Original = 2532,
		_Type_LRI_Original = 2542,
		_Expr_NoComma_LRI_Original = 2549,
		_Expr_LRI_Original = 2552,
		_Expr_Argument_LRI_Original = 2555,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2560,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2563,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2567,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2570,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2574,
		_TypeOrExpr_LRI_Original = 2577,
		_File_LRI_Original = 2580,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif