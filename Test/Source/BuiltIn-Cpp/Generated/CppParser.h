/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 119,
		_GenericArgument = 124,
		_GenericArguments = 144,
		_QualifiedNameFragment = 150,
		_MemberQualifiedNameFragment = 157,
		_SingleLevelQualifiedName = 160,
		_NextLevelQualifiedName = 170,
		_QualifiedName = 176,
		_QualifiedNameAfterTypename = 181,
		_StringLiteralFragment = 187,
		_LambdaCaptureId = 191,
		_LambdaCapture = 201,
		_LambdaExpr = 211,
		_PrimitiveExpr = 220,
		_QualifiedName_PrimitiveExpr = 298,
		_PostfixUnaryExpr = 302,
		_NewPrefix = 316,
		_NewExpr = 321,
		_DeletePrefix = 333,
		_DeleteExpr = 338,
		_SizeOfPrefix = 346,
		_SizeofExpr = 350,
		_AllPrefixUnaryExpr_NoCStyleCast = 360,
		_AllPrefixUnaryExpr = 381,
		_PrefixUnaryExpr = 388,
		_MemberOperatorIdentifier = 403,
		_MemberOperatorQualifiedName = 408,
		_BExpr0 = 412,
		_BExpr1 = 428,
		_BExpr2 = 444,
		_BExpr3 = 460,
		_PrimitiveTypeLiteral = 476,
		_PrimitiveType = 494,
		_PM_PrimitiveType = 509,
		_PM_QualifiedName = 512,
		_CallConstructibleTypeBeforeDeclarator = 515,
		_ShortTypeBeforeDeclarator = 520,
		_CallConstructibleType = 526,
		_TypeBeforeDeclarator = 536,
		_AdvancedTypeNoCVNoMember = 546,
		_AdvancedTypeCV = 559,
		_AdvancedTypeNoMember = 563,
		_AdvancedTypeMember = 567,
		_DeclaratorKeyword = 571,
		_DeclaratorAKFirst = 591,
		_DeclaratorAKFollow = 595,
		_DeclaratorAKCV = 599,
		_DeclaratorAKMember = 602,
		_DeclaratorFunctionParameters = 605,
		_FunctionKeyword = 617,
		_DeclaratorFunctionPart = 643,
		_DeclaratorFunctionPartOptionalParameters = 649,
		_DeclaratorArrayPart = 658,
		_DeclaratorId = 663,
		_DeclaratorBeforeInner = 667,
		_DeclaratorAfterInner = 674,
		_InnerDeclaratorWithoutName = 679,
		_InnerDeclaratorInnerOptionalName = 683,
		_InnerDeclaratorInnerRequiredName = 687,
		_DeclaratorInnerWithoutName = 691,
		_DeclaratorInnerOptionalName = 696,
		_DeclaratorInnerRequiredName = 704,
		_DeclaratorWithoutName = 712,
		_DeclaratorOptionalName = 720,
		_DeclaratorRequiredName = 728,
		_VarValueInit = 735,
		_VarNewParanInit = 739,
		_VarVarParanInit = 745,
		_VarBraceInit = 752,
		_VarCtorInit = 758,
		_VarInit = 762,
		_DeclaratorVariablePartWithoutInit = 767,
		_DeclaratorVariablePartOptionalInit = 770,
		_DeclaratorVariablePartRequiredInit = 774,
		_VarWithoutInit = 778,
		_VarRequiredInit = 788,
		_FunctionParameterVariablePart = 798,
		_FunctionParameter = 803,
		_CatchParameterVariablePart = 814,
		_CatchParameter = 817,
		_ExprOrVarWithInit = 828,
		_GenericParameterKeyword = 847,
		_OrdinaryGenericParameter = 854,
		_TypedGenericParameterInit = 861,
		_TypedGenericParameterVariablePart = 865,
		_TypedGenericParameter = 870,
		_GenericParameter = 880,
		_GenericHeader = 891,
		_VarsDeclWithoutKeyword = 897,
		_VarsDecl = 907,
		_OtherDecl = 918,
		_Decl = 926,
		_ExprStat = 938,
		_BlockStat = 960,
		_TryStatCatchPart = 965,
		_TryStat = 973,
		___TryStat = 979,
		_IfStatConditionPart = 990,
		_IfStat = 1012,
		_ForStatConditionPart = 1020,
		_ForStat = 1041,
		_OtherStats = 1048,
		_Stat = 1090,
		_Type = 1118,
		_Expr_NoComma = 1129,
		_Expr = 1146,
		_Expr_Argument = 1164,
		_TypeOrExpr_NoComma_NoGT = 1182,
		_TypeOrExpr = 1200,
		_File = 1219,
		_BExpr4_SWITCH_COMBINED = 1222,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1238,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1249,
		_BExpr_SWITCH_1allow_GT = 1260,
		_BExpr10_SWITCH_0allow_GT = 1278,
		_BExpr10_SWITCH_1allow_GT = 1294,
		_BExpr4_SWITCH_0allow_GT = 1310,
		_BExpr4_SWITCH_1allow_GT = 1326,
		_BExpr5_SWITCH_0allow_GT = 1342,
		_BExpr5_SWITCH_1allow_GT = 1358,
		_BExpr6_SWITCH_0allow_GT = 1374,
		_BExpr6_SWITCH_1allow_GT = 1390,
		_BExpr7_SWITCH_0allow_GT = 1406,
		_BExpr7_SWITCH_1allow_GT = 1422,
		_BExpr8_SWITCH_0allow_GT = 1438,
		_BExpr8_SWITCH_1allow_GT = 1454,
		_BExpr9_SWITCH_0allow_GT = 1470,
		_BExpr9_SWITCH_1allow_GT = 1486,
		_BExpr_NoComma_SWITCH_0allow_GT = 1502,
		_BExpr_NoComma_SWITCH_1allow_GT = 1519,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1536,
		_Expr_Raw_SWITCH_1allow_GT = 1553,
		_ThrowExpr_SWITCH_1allow_GT = 1571,
		_ThrowExpr_SWITCH_0allow_GT = 1575,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1579,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1597,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1616,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1623,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1626,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1629,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1632,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1636,
		_FunctionParameter_LRI_Isolated_2 = 1640,
		_CatchParameter_LRI_Isolated_2 = 1646,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1652,
		_GenericParameter_LRI_Isolated_0 = 1658,
		_VarsDecl_LRI_Isolated_1 = 1661,
		_Decl_LRI_Isolated_1 = 1666,
		_ForStatConditionPart_LRI_Isolated_0 = 1669,
		_Stat_LRI_Isolated_1 = 1675,
		_Stat_LRI_Isolated_2 = 1678,
		_Stat_LRI_Isolated_3 = 1681,
		_Stat_LRI_Isolated_4 = 1684,
		_Stat_LRI_Isolated_5 = 1687,
		_Stat_LRI_Isolated_6 = 1690,
		_Type_LRI_Isolated_2 = 1693,
		_GenericArgument_LRI_Original = 1699,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1704,
		_PostfixUnaryExpr_LRI_Original = 1709,
		_PrefixUnaryExpr_LRI_Original = 1743,
		_BExpr0_LRI_Original = 1748,
		_BExpr1_LRI_Original = 1757,
		_BExpr2_LRI_Original = 1769,
		_BExpr3_LRI_Original = 1778,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1787,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1790,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1802,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1817,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1826,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1835,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1841,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1847,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1853,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1859,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1865,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1871,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1877,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1883,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1889,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1895,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1938,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1981,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1987,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1990,
		_PM_PrimitiveType_LRI_Original = 1993,
		_PM_QualifiedName_LRI_Original = 1997,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2001,
		_ShortTypeBeforeDeclarator_LRI_Original = 2007,
		_CallConstructibleType_LRI_Original = 2011,
		_TypeBeforeDeclarator_LRI_Original = 2022,
		_VarWithoutInit_LRI_Original = 2029,
		_VarRequiredInit_LRI_Original = 2033,
		_FunctionParameter_LRI_Original = 2037,
		_CatchParameter_LRI_Original = 2044,
		_ExprOrVarWithInit_LRI_Original = 2051,
		_TypedGenericParameter_LRI_Original = 2058,
		_GenericParameter_LRI_Original = 2063,
		_VarsDeclWithoutKeyword_LRI_Original = 2068,
		_VarsDecl_LRI_Original = 2074,
		_Decl_LRI_Original = 2079,
		_ExprStat_LRI_Original = 2084,
		_IfStatConditionPart_LRI_Original = 2090,
		_ForStatConditionPart_LRI_Original = 2098,
		_Stat_LRI_Original = 2115,
		_Type_LRI_Original = 2125,
		_Expr_NoComma_LRI_Original = 2132,
		_Expr_LRI_Original = 2135,
		_Expr_Argument_LRI_Original = 2138,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2143,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2146,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2150,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2153,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2157,
		_TypeOrExpr_LRI_Original = 2160,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif