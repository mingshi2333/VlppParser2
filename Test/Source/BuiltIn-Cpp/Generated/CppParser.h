/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 292,
		_DeleteExpr = 297,
		_SizeOfPrefix = 305,
		_SizeofExpr = 309,
		_AllPrefixUnaryExpr_NoCStyleCast = 319,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 364,
		_MemberOperatorQualifiedName = 369,
		_BExpr0 = 373,
		_BExpr1 = 391,
		_BExpr2 = 409,
		_BExpr3 = 427,
		_PrimitiveTypeLiteral = 445,
		_PrimitiveType = 463,
		_PM_PrimitiveType = 478,
		_PM_QualifiedName = 481,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 484,
		_ShortTypeBeforeDeclarator = 489,
		_TypeStartsWithKeywordBeforeDeclarator = 495,
		_TypeBeforeDeclarator = 503,
		_AdvancedTypeNoCVNoMember = 513,
		_AdvancedTypeCV = 526,
		_AdvancedTypeNoMember = 530,
		_AdvancedTypeMember = 534,
		_DeclaratorKeyword = 538,
		_DeclaratorAKFirst = 558,
		_DeclaratorAKFollow = 562,
		_DeclaratorAKCV = 566,
		_DeclaratorAKMember = 569,
		_DeclaratorFunctionParameters = 572,
		_FunctionKeyword = 584,
		_DeclaratorFunctionPart = 610,
		_DeclaratorArrayPart = 616,
		_DeclaratorId = 621,
		_DeclaratorBeforeInner = 625,
		_DeclaratorAfterInner = 632,
		_InnerDeclaratorWithoutName = 637,
		_InnerDeclaratorInnerOptionalName = 641,
		_InnerDeclaratorInnerRequiredName = 645,
		_DeclaratorInnerWithoutName = 649,
		_DeclaratorInnerOptionalName = 654,
		_DeclaratorInnerRequiredName = 662,
		_DeclaratorWithoutName = 670,
		_DeclaratorOptionalName = 678,
		_DeclaratorRequiredName = 686,
		_VarValueInit = 693,
		_VarCtorInit = 697,
		_VarInit = 707,
		_FunctionParameter = 711,
		_ExprOrVarWithInit = 722,
		_ExprStat = 743,
		_OtherStats = 763,
		_Stat = 798,
		_TypeStartsWithKeyword = 819,
		_Type = 828,
		_Expr_NoComma = 839,
		_Expr = 858,
		_Expr_Argument = 878,
		_TypeOrExpr_NoComma_NoGT = 898,
		_TypeOrExpr = 917,
		_File = 937,
		_BExpr4_SWITCH_COMBINED = 940,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 958,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 969,
		_BExpr_SWITCH_1allow_GT = 980,
		_BExpr10_SWITCH_0allow_GT = 1000,
		_BExpr10_SWITCH_1allow_GT = 1018,
		_BExpr4_SWITCH_0allow_GT = 1036,
		_BExpr4_SWITCH_1allow_GT = 1054,
		_BExpr5_SWITCH_0allow_GT = 1072,
		_BExpr5_SWITCH_1allow_GT = 1090,
		_BExpr6_SWITCH_0allow_GT = 1108,
		_BExpr6_SWITCH_1allow_GT = 1126,
		_BExpr7_SWITCH_0allow_GT = 1144,
		_BExpr7_SWITCH_1allow_GT = 1162,
		_BExpr8_SWITCH_0allow_GT = 1180,
		_BExpr8_SWITCH_1allow_GT = 1198,
		_BExpr9_SWITCH_0allow_GT = 1216,
		_BExpr9_SWITCH_1allow_GT = 1234,
		_BExpr_NoComma_SWITCH_0allow_GT = 1252,
		_BExpr_NoComma_SWITCH_1allow_GT = 1271,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1290,
		_Expr_Raw_SWITCH_1allow_GT = 1309,
		_ThrowExpr_SWITCH_1allow_GT = 1329,
		_ThrowExpr_SWITCH_0allow_GT = 1333,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1337,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1356,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1376,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1379,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1382,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1385,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1389,
		_FunctionParameter_LRI_Isolated_3 = 1393,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1400,
		_Stat_LRI_Isolated_1 = 1407,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1410,
		_Type_LRI_Isolated_2 = 1416,
		_GenericArgument_LRI_Original = 1422,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1427,
		_PostfixUnaryExpr_LRI_Original = 1432,
		_PrefixUnaryExpr_LRI_Original = 1464,
		_BExpr0_LRI_Original = 1469,
		_BExpr1_LRI_Original = 1478,
		_BExpr2_LRI_Original = 1490,
		_BExpr3_LRI_Original = 1499,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1508,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1511,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1523,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1538,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1547,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1556,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1562,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1568,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1574,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1580,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1586,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1592,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1598,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1604,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1610,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1616,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1659,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1702,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1708,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1711,
		_PM_PrimitiveType_LRI_Original = 1714,
		_PM_QualifiedName_LRI_Original = 1718,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1722,
		_ShortTypeBeforeDeclarator_LRI_Original = 1728,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1732,
		_TypeBeforeDeclarator_LRI_Original = 1739,
		_FunctionParameter_LRI_Original = 1746,
		_ExprOrVarWithInit_LRI_Original = 1756,
		_ExprStat_LRI_Original = 1764,
		_Stat_LRI_Original = 1768,
		_TypeStartsWithKeyword_LRI_Original = 1773,
		_Type_LRI_Original = 1780,
		_Expr_NoComma_LRI_Original = 1787,
		_Expr_LRI_Original = 1790,
		_Expr_Argument_LRI_Original = 1793,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1798,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1801,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1805,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1808,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1812,
		_TypeOrExpr_LRI_Original = 1815,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif