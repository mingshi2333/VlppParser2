/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 138,
		_QualifiedNameFragment = 144,
		_MemberQualifiedNameFragment = 151,
		_QualifiedName = 154,
		_StringLiteralFragment = 170,
		_PrimitiveExpr = 174,
		_QualifiedName_PrimitiveExpr = 251,
		_PostfixUnaryExpr = 255,
		_NewInit = 267,
		_NewPrefix = 283,
		_NewExpr = 288,
		_DeletePrefix = 297,
		_DeleteExpr = 302,
		_SizeOfPrefix = 310,
		_SizeofExpr = 314,
		_AllPrefixUnaryExpr_NoCStyleCast = 324,
		_AllPrefixUnaryExpr = 345,
		_PrefixUnaryExpr = 352,
		_MemberOperatorIdentifier = 365,
		_MemberOperatorQualifiedName = 370,
		_BExpr0 = 374,
		_BExpr1 = 388,
		_BExpr2 = 402,
		_BExpr3 = 416,
		_PrimitiveTypeLiteral = 430,
		_PrimitiveType = 448,
		_QualifiedName_PrimitiveType = 463,
		_ShortType = 467,
		_LongType = 473,
		_AdvancedTypeNoCVNoMember = 483,
		_AdvancedTypeCV = 496,
		_AdvancedTypeNoMember = 500,
		_AdvancedTypeMember = 504,
		_DeclaratorKeyword = 508,
		_DeclaratorAKFirst = 528,
		_DeclaratorAKFollow = 532,
		_DeclaratorAKCV = 536,
		_DeclaratorAKMember = 539,
		_DeclaratorFunctionParameter = 542,
		_DeclaratorFunctionParameters = 553,
		_FunctionKeyword = 565,
		_DeclaratorFunctionPart = 591,
		_DeclaratorArrayPart = 597,
		_DeclaratorId = 602,
		_DeclaratorBeforeInner = 606,
		_DeclaratorAfterInner = 613,
		_InnerDeclaratorWithoutName = 618,
		_InnerDeclaratorInnerOptionalName = 622,
		_DeclaratorInnerWithoutName = 626,
		_DeclaratorInnerOptionalName = 631,
		_DeclaratorWithoutName = 639,
		_DeclaratorOptionalName = 647,
		_Type = 655,
		_Expr_NoComma = 665,
		_Expr = 680,
		_Expr_Argument = 696,
		_TypeOrExpr_NoComma_NoGT = 712,
		_TypeOrExpr = 727,
		_File = 743,
		_BExpr4_SWITCH_COMBINED = 746,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 760,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 770,
		_BExpr_SWITCH_1allow_GT = 780,
		_BExpr10_SWITCH_0allow_GT = 796,
		_BExpr10_SWITCH_1allow_GT = 810,
		_BExpr4_SWITCH_0allow_GT = 824,
		_BExpr4_SWITCH_1allow_GT = 838,
		_BExpr5_SWITCH_0allow_GT = 852,
		_BExpr5_SWITCH_1allow_GT = 866,
		_BExpr6_SWITCH_0allow_GT = 880,
		_BExpr6_SWITCH_1allow_GT = 894,
		_BExpr7_SWITCH_0allow_GT = 908,
		_BExpr7_SWITCH_1allow_GT = 922,
		_BExpr8_SWITCH_0allow_GT = 936,
		_BExpr8_SWITCH_1allow_GT = 950,
		_BExpr9_SWITCH_0allow_GT = 964,
		_BExpr9_SWITCH_1allow_GT = 978,
		_BExpr_NoComma_SWITCH_0allow_GT = 992,
		_BExpr_NoComma_SWITCH_1allow_GT = 1007,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1022,
		_Expr_Raw_SWITCH_1allow_GT = 1037,
		_ThrowExpr_SWITCH_1allow_GT = 1053,
		_ThrowExpr_SWITCH_0allow_GT = 1057,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1061,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1076,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1092,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1095,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1098,
		_ShortType_LRI_Isolated_1 = 1101,
		_ShortType_LRI_Isolated_2 = 1105,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1109,
		_GenericArgument_LRI_Original = 1117,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1122,
		_PostfixUnaryExpr_LRI_Original = 1127,
		_PrefixUnaryExpr_LRI_Original = 1159,
		_BExpr0_LRI_Original = 1164,
		_BExpr1_LRI_Original = 1173,
		_BExpr2_LRI_Original = 1185,
		_BExpr3_LRI_Original = 1194,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1203,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1206,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1218,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1233,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1242,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1251,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1257,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1263,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1269,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1275,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1281,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1287,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1293,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1299,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1305,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1311,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1354,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1397,
		_QualifiedName_PrimitiveType_LRI_Original = 1403,
		_ShortType_LRI_Original = 1408,
		_LongType_LRI_Original = 1414,
		_DeclaratorFunctionParameter_LRI_Original = 1421,
		_Type_LRI_Original = 1433,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1438,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1441,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1444,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1447,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1451,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1454,
		_Expr_NoComma_LRI_Original = 1458,
		_Expr_LRI_Original = 1461,
		_Expr_Argument_LRI_Original = 1464,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1469,
		_TypeOrExpr_LRI_Original = 1472,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif