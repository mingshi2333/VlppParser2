/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 134,
		_QualifiedNameFragment = 140,
		_MemberQualifiedNameFragment = 147,
		_QualifiedName = 150,
		_StringLiteralFragment = 166,
		_PrimitiveExpr = 170,
		_QualifiedName_PrimitiveExpr = 247,
		_PostfixUnaryExpr = 251,
		_NewInit = 263,
		_NewPrefix = 279,
		_NewExpr = 284,
		_DeletePrefix = 293,
		_DeleteExpr = 298,
		_SizeOfPrefix = 306,
		_SizeofExpr = 310,
		_AllPrefixUnaryExpr_NoCStyleCast = 320,
		_AllPrefixUnaryExpr = 341,
		_PrefixUnaryExpr = 348,
		_MemberOperatorIdentifier = 360,
		_MemberOperatorQualifiedName = 365,
		_BExpr0 = 369,
		_BExpr1 = 381,
		_BExpr2 = 393,
		_BExpr3 = 405,
		_PrimitiveTypeLiteral = 417,
		_PrimitiveType = 435,
		_QualifiedName_PrimitiveType = 450,
		_ShortType = 454,
		_LongType = 460,
		_AdvancedTypeNoCVNoMember = 470,
		_AdvancedTypeCV = 483,
		_AdvancedTypeNoMember = 487,
		_AdvancedTypeMember = 491,
		_DeclaratorKeyword = 495,
		_DeclaratorAKFirst = 515,
		_DeclaratorAKFollow = 519,
		_DeclaratorAKCV = 523,
		_DeclaratorAKMember = 526,
		_DeclaratorFunctionParameter = 529,
		_DeclaratorFunctionParameters = 540,
		_FunctionKeyword = 552,
		_DeclaratorFunctionPart = 578,
		_DeclaratorArrayPart = 584,
		_DeclaratorId = 589,
		_DeclaratorBeforeInner = 593,
		_DeclaratorAfterInner = 600,
		_InnerDeclaratorWithoutName = 605,
		_InnerDeclaratorInnerOptionalName = 609,
		_DeclaratorInnerWithoutName = 613,
		_DeclaratorInnerOptionalName = 618,
		_DeclaratorWithoutName = 626,
		_DeclaratorOptionalName = 634,
		_Type = 642,
		_Expr_NoComma = 652,
		_Expr = 664,
		_Expr_Argument = 676,
		_TypeOrExpr_NoComma_NoGT = 688,
		_TypeOrExpr = 700,
		_File = 712,
		_BExpr4_SWITCH_COMBINED = 715,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 727,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 737,
		_BExpr_SWITCH_1allow_GT = 747,
		_BExpr10_SWITCH_0allow_GT = 759,
		_BExpr10_SWITCH_1allow_GT = 771,
		_BExpr4_SWITCH_0allow_GT = 783,
		_BExpr4_SWITCH_1allow_GT = 795,
		_BExpr5_SWITCH_0allow_GT = 807,
		_BExpr5_SWITCH_1allow_GT = 819,
		_BExpr6_SWITCH_0allow_GT = 831,
		_BExpr6_SWITCH_1allow_GT = 843,
		_BExpr7_SWITCH_0allow_GT = 855,
		_BExpr7_SWITCH_1allow_GT = 867,
		_BExpr8_SWITCH_0allow_GT = 879,
		_BExpr8_SWITCH_1allow_GT = 891,
		_BExpr9_SWITCH_0allow_GT = 903,
		_BExpr9_SWITCH_1allow_GT = 915,
		_BExpr_NoComma_SWITCH_0allow_GT = 927,
		_BExpr_NoComma_SWITCH_1allow_GT = 939,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 951,
		_Expr_Raw_SWITCH_1allow_GT = 963,
		_ThrowExpr_SWITCH_1allow_GT = 975,
		_ThrowExpr_SWITCH_0allow_GT = 979,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 983,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 995,
		_ShortType_LRI_Isolated_1 = 1007,
		_ShortType_LRI_Isolated_2 = 1011,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1015,
		_GenericArgument_LRI_Original = 1023,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1028,
		_PostfixUnaryExpr_LRI_Original = 1033,
		_PrefixUnaryExpr_LRI_Original = 1065,
		_BExpr0_LRI_Original = 1069,
		_BExpr1_LRI_Original = 1078,
		_BExpr2_LRI_Original = 1090,
		_BExpr3_LRI_Original = 1099,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1108,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1111,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1123,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1138,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1147,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1156,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1162,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1168,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1174,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1180,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1186,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1192,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1198,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1204,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1210,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1216,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1258,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1300,
		_QualifiedName_PrimitiveType_LRI_Original = 1306,
		_ShortType_LRI_Original = 1311,
		_LongType_LRI_Original = 1317,
		_DeclaratorFunctionParameter_LRI_Original = 1324,
		_Type_LRI_Original = 1336,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1341,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1344,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1347,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1350,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1354,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1357,
		_Expr_NoComma_LRI_Original = 1361,
		_Expr_LRI_Original = 1364,
		_Expr_Argument_LRI_Original = 1367,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1372,
		_TypeOrExpr_LRI_Original = 1375,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif