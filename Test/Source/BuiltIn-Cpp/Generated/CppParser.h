/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 131,
		_GenericArgument = 136,
		_GenericArguments = 156,
		_QualifiedNameFragment = 162,
		_MemberQualifiedNameFragment = 169,
		_SingleLevelQualifiedName = 172,
		_NextLevelQualifiedName = 182,
		_QualifiedName = 188,
		_QualifiedNameAfterTypename = 193,
		_StringLiteralFragment = 199,
		_LambdaCaptureId = 203,
		_LambdaCapture = 213,
		_LambdaExpr = 223,
		_PrimitiveExpr = 232,
		_QualifiedName_PrimitiveExpr = 310,
		_PostfixUnaryExpr = 314,
		_NewPrefix = 328,
		_NewExpr = 333,
		_DeletePrefix = 345,
		_DeleteExpr = 350,
		_SizeOfPrefix = 358,
		_SizeofExpr = 362,
		_AllPrefixUnaryExpr_NoCStyleCast = 372,
		_AllPrefixUnaryExpr = 393,
		_PrefixUnaryExpr = 400,
		_MemberOperatorIdentifier = 415,
		_MemberOperatorQualifiedName = 420,
		_BExpr0 = 424,
		_BExpr1 = 440,
		_BExpr2 = 456,
		_BExpr3 = 472,
		_BExpr4 = 488,
		_PrimitiveTypeLiteral = 504,
		_PrimitiveType = 522,
		_PM_PrimitiveType = 537,
		_PM_QualifiedName = 540,
		_CallConstructibleTypeBeforeDeclarator = 543,
		_ShortTypeBeforeDeclarator = 548,
		_CallConstructibleType = 554,
		_TypeBeforeDeclarator = 564,
		_AdvancedTypeNoCVNoMember = 574,
		_AdvancedTypeCV = 587,
		_AdvancedTypeNoMember = 591,
		_AdvancedTypeMember = 595,
		_DeclaratorKeyword = 599,
		_DeclaratorAKFirst = 619,
		_DeclaratorAKFollow = 623,
		_DeclaratorAKCV = 627,
		_DeclaratorAKMember = 630,
		_DeclaratorFunctionParameters = 633,
		_FunctionKeyword = 645,
		_DeclaratorFunctionPart = 671,
		_DeclaratorFunctionPartOptionalParameters = 677,
		_DeclaratorArrayPart = 686,
		_DeclaratorId = 691,
		_DeclaratorBeforeInner = 695,
		_DeclaratorAfterInner = 702,
		_InnerDeclaratorWithoutName = 707,
		_InnerDeclaratorInnerOptionalName = 711,
		_InnerDeclaratorInnerRequiredName = 715,
		_DeclaratorInnerWithoutName = 719,
		_DeclaratorInnerOptionalName = 724,
		_DeclaratorInnerRequiredName = 736,
		_DeclaratorWithoutName = 748,
		_DeclaratorOptionalName = 756,
		_DeclaratorRequiredName = 764,
		_VarValueInit = 771,
		_VarNewParanInit = 775,
		_VarVarParanInit = 781,
		_VarBraceInit = 788,
		_VarCtorInit = 794,
		_VarInit = 798,
		_DeclaratorVariablePartWithoutInit = 803,
		_DeclaratorVariablePartOptionalInit = 806,
		_DeclaratorVariablePartRequiredInit = 810,
		_VarWithoutInit = 814,
		_VarRequiredInit = 824,
		_FunctionParameterVariablePart = 834,
		_FunctionParameter = 839,
		_CatchParameterVariablePart = 850,
		_CatchParameter = 853,
		_ExprOrVarWithInit = 864,
		_GenericParameterKeyword = 883,
		_OrdinaryGenericParameter = 890,
		_TypedGenericParameterInit = 897,
		_TypedGenericParameterVariablePart = 901,
		_TypedGenericParameter = 906,
		_GenericParameter = 916,
		_GenericHeader = 927,
		_VarsDeclWithoutKeyword = 933,
		_VarsDecl = 943,
		_ClassInheritanceFirst = 954,
		_ClassInheritanceSecond = 967,
		_ClassMemberPartFirst = 980,
		_ClassMemberPartSecond = 1008,
		_ClassBody = 1019,
		_ClassDeclPrefix = 1029,
		_ClassDecl = 1040,
		_ClassDeclForwardDecl = 1045,
		_StaticAssertDecl = 1049,
		_TypedefCompatibleDecl = 1057,
		_TypedefDecl = 1069,
		_ExternDecl = 1073,
		_NsName = 1080,
		_NsDecl = 1083,
		_EnumItem = 1091,
		_EnumBody = 1096,
		_EnumDecl = 1104,
		_EnumDeclForwardDecl = 1110,
		_Decl = 1115,
		_DeclWithSemicolon = 1132,
		_ExprStat = 1158,
		_BlockStat = 1190,
		_TryStatCatchPart = 1195,
		_TryStat = 1203,
		___TryStat = 1209,
		_IfStatConditionPart = 1220,
		_IfStat = 1242,
		_ForStatConditionPart = 1250,
		_ForStat = 1271,
		_OtherStats = 1278,
		_Stat = 1320,
		_Type = 1358,
		_Expr_NoComma = 1369,
		_Expr = 1386,
		_Expr_Argument = 1404,
		_TypeOrExpr_NoComma_NoGT = 1422,
		_TypeOrExpr = 1440,
		_File = 1459,
		_BExpr5_SWITCH_COMBINED = 1487,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1503,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1514,
		_BExpr_SWITCH_1allow_GT = 1525,
		_BExpr10_SWITCH_0allow_GT = 1543,
		_BExpr10_SWITCH_1allow_GT = 1559,
		_BExpr11_SWITCH_0allow_GT = 1575,
		_BExpr11_SWITCH_1allow_GT = 1591,
		_BExpr5_SWITCH_0allow_GT = 1607,
		_BExpr5_SWITCH_1allow_GT = 1623,
		_BExpr6_SWITCH_0allow_GT = 1639,
		_BExpr6_SWITCH_1allow_GT = 1655,
		_BExpr7_SWITCH_0allow_GT = 1671,
		_BExpr7_SWITCH_1allow_GT = 1687,
		_BExpr8_SWITCH_0allow_GT = 1703,
		_BExpr8_SWITCH_1allow_GT = 1719,
		_BExpr9_SWITCH_0allow_GT = 1735,
		_BExpr9_SWITCH_1allow_GT = 1751,
		_BExpr_NoComma_SWITCH_0allow_GT = 1767,
		_BExpr_NoComma_SWITCH_1allow_GT = 1784,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1801,
		_Expr_Raw_SWITCH_1allow_GT = 1818,
		_ThrowExpr_SWITCH_1allow_GT = 1836,
		_ThrowExpr_SWITCH_0allow_GT = 1840,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1844,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1862,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1881,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1888,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1891,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1894,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1897,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1901,
		_FunctionParameter_LRI_Isolated_2 = 1905,
		_CatchParameter_LRI_Isolated_2 = 1911,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1917,
		_GenericParameter_LRI_Isolated_0 = 1923,
		_VarsDecl_LRI_Isolated_1 = 1926,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 1931,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 1934,
		_Decl_LRI_Isolated_1 = 1937,
		_Decl_LRI_Isolated_2 = 1940,
		_Decl_LRI_Isolated_3 = 1943,
		_Decl_LRI_Isolated_4 = 1946,
		_Decl_LRI_Isolated_5 = 1949,
		_Decl_LRI_Isolated_6 = 1952,
		_DeclWithSemicolon_LRI_Isolated_1 = 1955,
		_DeclWithSemicolon_LRI_Isolated_2 = 1958,
		_ForStatConditionPart_LRI_Isolated_0 = 1961,
		_Stat_LRI_Isolated_1 = 1967,
		_Stat_LRI_Isolated_2 = 1970,
		_Stat_LRI_Isolated_3 = 1973,
		_Stat_LRI_Isolated_4 = 1976,
		_Stat_LRI_Isolated_5 = 1979,
		_Stat_LRI_Isolated_6 = 1982,
		_Type_LRI_Isolated_2 = 1985,
		_GenericArgument_LRI_Original = 1991,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1996,
		_PostfixUnaryExpr_LRI_Original = 2001,
		_PrefixUnaryExpr_LRI_Original = 2035,
		_BExpr0_LRI_Original = 2040,
		_BExpr1_LRI_Original = 2049,
		_BExpr2_LRI_Original = 2061,
		_BExpr3_LRI_Original = 2070,
		_BExpr4_LRI_Original = 2081,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2087,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2090,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2104,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2121,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2130,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2139,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2145,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2151,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2157,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2163,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2169,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2175,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2181,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2187,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2193,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2199,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2246,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2293,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2299,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2302,
		_PM_PrimitiveType_LRI_Original = 2305,
		_PM_QualifiedName_LRI_Original = 2309,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2313,
		_ShortTypeBeforeDeclarator_LRI_Original = 2319,
		_CallConstructibleType_LRI_Original = 2323,
		_TypeBeforeDeclarator_LRI_Original = 2334,
		_VarWithoutInit_LRI_Original = 2341,
		_VarRequiredInit_LRI_Original = 2345,
		_FunctionParameter_LRI_Original = 2349,
		_CatchParameter_LRI_Original = 2356,
		_ExprOrVarWithInit_LRI_Original = 2363,
		_TypedGenericParameter_LRI_Original = 2370,
		_GenericParameter_LRI_Original = 2375,
		_VarsDeclWithoutKeyword_LRI_Original = 2380,
		_VarsDecl_LRI_Original = 2386,
		_ClassMemberPartFirst_LRI_Original = 2391,
		_TypedefCompatibleDecl_LRI_Original = 2395,
		_Decl_LRI_Original = 2401,
		_DeclWithSemicolon_LRI_Original = 2411,
		_ExprStat_LRI_Original = 2418,
		_IfStatConditionPart_LRI_Original = 2424,
		_ForStatConditionPart_LRI_Original = 2432,
		_Stat_LRI_Original = 2449,
		_Type_LRI_Original = 2459,
		_Expr_NoComma_LRI_Original = 2466,
		_Expr_LRI_Original = 2469,
		_Expr_Argument_LRI_Original = 2472,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2477,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2480,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2484,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2487,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2491,
		_TypeOrExpr_LRI_Original = 2494,
		_File_LRI_Original = 2497,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif