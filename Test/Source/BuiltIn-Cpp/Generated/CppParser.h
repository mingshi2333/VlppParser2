/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewInit = 275,
		_NewPrefix = 291,
		_NewExpr = 296,
		_DeletePrefix = 305,
		_DeleteExpr = 310,
		_SizeOfPrefix = 318,
		_SizeofExpr = 322,
		_AllPrefixUnaryExpr_NoCStyleCast = 332,
		_AllPrefixUnaryExpr = 353,
		_PrefixUnaryExpr = 360,
		_MemberOperatorIdentifier = 377,
		_MemberOperatorQualifiedName = 382,
		_BExpr0 = 386,
		_BExpr1 = 404,
		_BExpr2 = 422,
		_BExpr3 = 440,
		_PrimitiveTypeLiteral = 458,
		_PrimitiveType = 476,
		_PM_PrimitiveType = 491,
		_PM_QualifiedName = 494,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 497,
		_ShortTypeBeforeDeclarator = 502,
		_TypeStartsWithKeywordBeforeDeclarator = 508,
		_TypeBeforeDeclarator = 516,
		_AdvancedTypeNoCVNoMember = 526,
		_AdvancedTypeCV = 539,
		_AdvancedTypeNoMember = 543,
		_AdvancedTypeMember = 547,
		_DeclaratorKeyword = 551,
		_DeclaratorAKFirst = 571,
		_DeclaratorAKFollow = 575,
		_DeclaratorAKCV = 579,
		_DeclaratorAKMember = 582,
		_DeclaratorFunctionParameter = 585,
		_DeclaratorFunctionParameters = 596,
		_FunctionKeyword = 608,
		_DeclaratorFunctionPart = 634,
		_DeclaratorArrayPart = 640,
		_DeclaratorId = 645,
		_DeclaratorBeforeInner = 649,
		_DeclaratorAfterInner = 656,
		_InnerDeclaratorWithoutName = 661,
		_InnerDeclaratorInnerOptionalName = 665,
		_InnerDeclaratorInnerRequiredName = 669,
		_DeclaratorInnerWithoutName = 673,
		_DeclaratorInnerOptionalName = 678,
		_DeclaratorInnerRequiredName = 686,
		_DeclaratorWithoutName = 694,
		_DeclaratorOptionalName = 702,
		_DeclaratorRequiredName = 710,
		_ExprStat = 717,
		_OtherStats = 737,
		_Stat = 772,
		_TypeStartsWithKeyword = 793,
		_Type = 802,
		_Expr_NoComma = 813,
		_Expr = 832,
		_Expr_Argument = 852,
		_TypeOrExpr_NoComma_NoGT = 872,
		_TypeOrExpr = 891,
		_File = 911,
		_BExpr4_SWITCH_COMBINED = 914,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 932,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 943,
		_BExpr_SWITCH_1allow_GT = 954,
		_BExpr10_SWITCH_0allow_GT = 974,
		_BExpr10_SWITCH_1allow_GT = 992,
		_BExpr4_SWITCH_0allow_GT = 1010,
		_BExpr4_SWITCH_1allow_GT = 1028,
		_BExpr5_SWITCH_0allow_GT = 1046,
		_BExpr5_SWITCH_1allow_GT = 1064,
		_BExpr6_SWITCH_0allow_GT = 1082,
		_BExpr6_SWITCH_1allow_GT = 1100,
		_BExpr7_SWITCH_0allow_GT = 1118,
		_BExpr7_SWITCH_1allow_GT = 1136,
		_BExpr8_SWITCH_0allow_GT = 1154,
		_BExpr8_SWITCH_1allow_GT = 1172,
		_BExpr9_SWITCH_0allow_GT = 1190,
		_BExpr9_SWITCH_1allow_GT = 1208,
		_BExpr_NoComma_SWITCH_0allow_GT = 1226,
		_BExpr_NoComma_SWITCH_1allow_GT = 1245,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1264,
		_Expr_Raw_SWITCH_1allow_GT = 1283,
		_ThrowExpr_SWITCH_1allow_GT = 1303,
		_ThrowExpr_SWITCH_0allow_GT = 1307,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1311,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1330,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1350,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1353,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1356,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1359,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1363,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1367,
		_Stat_LRI_Isolated_1 = 1375,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1378,
		_Type_LRI_Isolated_2 = 1384,
		_GenericArgument_LRI_Original = 1390,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1395,
		_PostfixUnaryExpr_LRI_Original = 1400,
		_PrefixUnaryExpr_LRI_Original = 1432,
		_BExpr0_LRI_Original = 1437,
		_BExpr1_LRI_Original = 1446,
		_BExpr2_LRI_Original = 1458,
		_BExpr3_LRI_Original = 1467,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1476,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1479,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1491,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1506,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1515,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1524,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1530,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1536,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1542,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1548,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1554,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1560,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1566,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1572,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1578,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1584,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1627,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1670,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1676,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1679,
		_PM_PrimitiveType_LRI_Original = 1682,
		_PM_QualifiedName_LRI_Original = 1686,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1690,
		_ShortTypeBeforeDeclarator_LRI_Original = 1696,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1700,
		_TypeBeforeDeclarator_LRI_Original = 1707,
		_DeclaratorFunctionParameter_LRI_Original = 1714,
		_ExprStat_LRI_Original = 1726,
		_Stat_LRI_Original = 1730,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1735,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1738,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1742,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1745,
		_TypeStartsWithKeyword_LRI_Original = 1749,
		_Type_LRI_Original = 1756,
		_Expr_NoComma_LRI_Original = 1763,
		_Expr_LRI_Original = 1766,
		_Expr_Argument_LRI_Original = 1769,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1774,
		_TypeOrExpr_LRI_Original = 1777,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif