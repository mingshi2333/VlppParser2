/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewInit = 275,
		_NewPrefix = 291,
		_NewExpr = 296,
		_DeletePrefix = 305,
		_DeleteExpr = 310,
		_SizeOfPrefix = 318,
		_SizeofExpr = 322,
		_AllPrefixUnaryExpr_NoCStyleCast = 332,
		_AllPrefixUnaryExpr = 353,
		_PrefixUnaryExpr = 360,
		_MemberOperatorIdentifier = 377,
		_MemberOperatorQualifiedName = 382,
		_BExpr0 = 386,
		_BExpr1 = 404,
		_BExpr2 = 422,
		_BExpr3 = 440,
		_PrimitiveTypeLiteral = 458,
		_PrimitiveType = 476,
		_PM_PrimitiveType = 491,
		_PM_QualifiedName = 494,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 497,
		_ShortTypeBeforeDeclarator = 502,
		_TypeStartsWithKeywordBeforeDeclarator = 508,
		_TypeBeforeDeclarator = 516,
		_AdvancedTypeNoCVNoMember = 526,
		_AdvancedTypeCV = 539,
		_AdvancedTypeNoMember = 543,
		_AdvancedTypeMember = 547,
		_DeclaratorKeyword = 551,
		_DeclaratorAKFirst = 571,
		_DeclaratorAKFollow = 575,
		_DeclaratorAKCV = 579,
		_DeclaratorAKMember = 582,
		_DeclaratorFunctionParameters = 585,
		_FunctionKeyword = 597,
		_DeclaratorFunctionPart = 623,
		_DeclaratorArrayPart = 629,
		_DeclaratorId = 634,
		_DeclaratorBeforeInner = 638,
		_DeclaratorAfterInner = 645,
		_InnerDeclaratorWithoutName = 650,
		_InnerDeclaratorInnerOptionalName = 654,
		_InnerDeclaratorInnerRequiredName = 658,
		_DeclaratorInnerWithoutName = 662,
		_DeclaratorInnerOptionalName = 667,
		_DeclaratorInnerRequiredName = 675,
		_DeclaratorWithoutName = 683,
		_DeclaratorOptionalName = 691,
		_DeclaratorRequiredName = 699,
		_TypeOrSingleVarDeclOptionalName = 706,
		_ExprStat = 717,
		_OtherStats = 739,
		_Stat = 774,
		_TypeStartsWithKeyword = 797,
		_Type = 806,
		_Expr_NoComma = 817,
		_Expr = 836,
		_Expr_Argument = 856,
		_TypeOrExpr_NoComma_NoGT = 876,
		_TypeOrExpr = 895,
		_DeclVar = 915,
		_DeclVarOrExpr = 926,
		_File = 947,
		_BExpr4_SWITCH_COMBINED = 950,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 968,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 979,
		_BExpr_SWITCH_1allow_GT = 990,
		_BExpr10_SWITCH_0allow_GT = 1010,
		_BExpr10_SWITCH_1allow_GT = 1028,
		_BExpr4_SWITCH_0allow_GT = 1046,
		_BExpr4_SWITCH_1allow_GT = 1064,
		_BExpr5_SWITCH_0allow_GT = 1082,
		_BExpr5_SWITCH_1allow_GT = 1100,
		_BExpr6_SWITCH_0allow_GT = 1118,
		_BExpr6_SWITCH_1allow_GT = 1136,
		_BExpr7_SWITCH_0allow_GT = 1154,
		_BExpr7_SWITCH_1allow_GT = 1172,
		_BExpr8_SWITCH_0allow_GT = 1190,
		_BExpr8_SWITCH_1allow_GT = 1208,
		_BExpr9_SWITCH_0allow_GT = 1226,
		_BExpr9_SWITCH_1allow_GT = 1244,
		_BExpr_NoComma_SWITCH_0allow_GT = 1262,
		_BExpr_NoComma_SWITCH_1allow_GT = 1281,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1300,
		_Expr_Raw_SWITCH_1allow_GT = 1319,
		_ThrowExpr_SWITCH_1allow_GT = 1339,
		_ThrowExpr_SWITCH_0allow_GT = 1343,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1347,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1366,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1386,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1389,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1392,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1395,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1399,
		_TypeOrSingleVarDeclOptionalName_LRI_Isolated_3 = 1403,
		_Stat_LRI_Isolated_1 = 1411,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1414,
		_Type_LRI_Isolated_2 = 1420,
		_DeclVar_LRI_Isolated_1 = 1426,
		_GenericArgument_LRI_Original = 1432,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1437,
		_PostfixUnaryExpr_LRI_Original = 1442,
		_PrefixUnaryExpr_LRI_Original = 1474,
		_BExpr0_LRI_Original = 1479,
		_BExpr1_LRI_Original = 1488,
		_BExpr2_LRI_Original = 1500,
		_BExpr3_LRI_Original = 1509,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1518,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1521,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1533,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1548,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1557,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1566,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1572,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1578,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1584,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1590,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1596,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1602,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1608,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1614,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1620,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1626,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1669,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1712,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1718,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1721,
		_PM_PrimitiveType_LRI_Original = 1724,
		_PM_QualifiedName_LRI_Original = 1728,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1732,
		_ShortTypeBeforeDeclarator_LRI_Original = 1738,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1742,
		_TypeBeforeDeclarator_LRI_Original = 1749,
		_TypeOrSingleVarDeclOptionalName_LRI_Original = 1756,
		_ExprStat_LRI_Original = 1768,
		_Stat_LRI_Original = 1772,
		_TypeStartsWithKeyword_LRI_Original = 1777,
		_Type_LRI_Original = 1784,
		_Expr_NoComma_LRI_Original = 1791,
		_Expr_LRI_Original = 1794,
		_Expr_Argument_LRI_Original = 1797,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1802,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1805,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1809,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1812,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1816,
		_TypeOrExpr_LRI_Original = 1819,
		_DeclVar_LRI_Original = 1822,
		_DeclVarOrExpr_LRI_Original = 1828,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif