/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 119,
		_GenericArgument = 124,
		_GenericArguments = 144,
		_QualifiedNameFragment = 150,
		_MemberQualifiedNameFragment = 157,
		_SingleLevelQualifiedName = 160,
		_NextLevelQualifiedName = 170,
		_QualifiedName = 176,
		_QualifiedNameAfterTypename = 181,
		_StringLiteralFragment = 187,
		_LambdaCaptureId = 191,
		_LambdaCapture = 201,
		_LambdaExpr = 211,
		_PrimitiveExpr = 220,
		_QualifiedName_PrimitiveExpr = 298,
		_PostfixUnaryExpr = 302,
		_NewPrefix = 316,
		_NewExpr = 321,
		_DeletePrefix = 333,
		_DeleteExpr = 338,
		_SizeOfPrefix = 346,
		_SizeofExpr = 350,
		_AllPrefixUnaryExpr_NoCStyleCast = 360,
		_AllPrefixUnaryExpr = 381,
		_PrefixUnaryExpr = 388,
		_MemberOperatorIdentifier = 403,
		_MemberOperatorQualifiedName = 408,
		_BExpr0 = 412,
		_BExpr1 = 428,
		_BExpr2 = 444,
		_BExpr3 = 460,
		_PrimitiveTypeLiteral = 476,
		_PrimitiveType = 494,
		_PM_PrimitiveType = 509,
		_PM_QualifiedName = 512,
		_CallConstructibleTypeBeforeDeclarator = 515,
		_ShortTypeBeforeDeclarator = 520,
		_CallConstructibleType = 526,
		_TypeBeforeDeclarator = 536,
		_AdvancedTypeNoCVNoMember = 546,
		_AdvancedTypeCV = 559,
		_AdvancedTypeNoMember = 563,
		_AdvancedTypeMember = 567,
		_DeclaratorKeyword = 571,
		_DeclaratorAKFirst = 591,
		_DeclaratorAKFollow = 595,
		_DeclaratorAKCV = 599,
		_DeclaratorAKMember = 602,
		_DeclaratorFunctionParameters = 605,
		_FunctionKeyword = 617,
		_DeclaratorFunctionPart = 643,
		_DeclaratorFunctionPartOptionalParameters = 649,
		_DeclaratorArrayPart = 658,
		_DeclaratorId = 663,
		_DeclaratorBeforeInner = 667,
		_DeclaratorAfterInner = 674,
		_InnerDeclaratorWithoutName = 679,
		_InnerDeclaratorInnerOptionalName = 683,
		_InnerDeclaratorInnerRequiredName = 687,
		_DeclaratorInnerWithoutName = 691,
		_DeclaratorInnerOptionalName = 696,
		_DeclaratorInnerRequiredName = 704,
		_DeclaratorWithoutName = 712,
		_DeclaratorOptionalName = 720,
		_DeclaratorRequiredName = 728,
		_VarValueInit = 735,
		_VarNewParanInit = 739,
		_VarVarParanInit = 745,
		_VarBraceInit = 752,
		_VarCtorInit = 758,
		_VarInit = 762,
		_DeclaratorVariablePartWithoutInit = 767,
		_DeclaratorVariablePartOptionalInit = 770,
		_DeclaratorVariablePartRequiredInit = 774,
		_VarWithoutInit = 778,
		_VarRequiredInit = 788,
		_FunctionParameterVariablePart = 798,
		_FunctionParameter = 803,
		_CatchParameterVariablePart = 814,
		_CatchParameter = 817,
		_ExprOrVarWithInit = 828,
		_GenericParameterKeyword = 847,
		_OrdinaryGenericParameter = 854,
		_TypedGenericParameterInit = 861,
		_TypedGenericParameterVariablePart = 865,
		_TypedGenericParameter = 870,
		_GenericParameter = 880,
		_GenericHeader = 891,
		_VarsDeclWithoutKeyword = 897,
		_VarsDecl = 907,
		_Decl = 918,
		_ExprStat = 929,
		_BlockStat = 949,
		_TryStatCatchPart = 954,
		_TryStat = 962,
		___TryStat = 968,
		_IfStatConditionPart = 979,
		_IfStat = 1001,
		_ForStatConditionPart = 1009,
		_ForStat = 1030,
		_OtherStats = 1037,
		_Stat = 1086,
		_Type = 1112,
		_Expr_NoComma = 1123,
		_Expr = 1140,
		_Expr_Argument = 1158,
		_TypeOrExpr_NoComma_NoGT = 1176,
		_TypeOrExpr = 1194,
		_File = 1213,
		_BExpr4_SWITCH_COMBINED = 1216,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1232,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1243,
		_BExpr_SWITCH_1allow_GT = 1254,
		_BExpr10_SWITCH_0allow_GT = 1272,
		_BExpr10_SWITCH_1allow_GT = 1288,
		_BExpr4_SWITCH_0allow_GT = 1304,
		_BExpr4_SWITCH_1allow_GT = 1320,
		_BExpr5_SWITCH_0allow_GT = 1336,
		_BExpr5_SWITCH_1allow_GT = 1352,
		_BExpr6_SWITCH_0allow_GT = 1368,
		_BExpr6_SWITCH_1allow_GT = 1384,
		_BExpr7_SWITCH_0allow_GT = 1400,
		_BExpr7_SWITCH_1allow_GT = 1416,
		_BExpr8_SWITCH_0allow_GT = 1432,
		_BExpr8_SWITCH_1allow_GT = 1448,
		_BExpr9_SWITCH_0allow_GT = 1464,
		_BExpr9_SWITCH_1allow_GT = 1480,
		_BExpr_NoComma_SWITCH_0allow_GT = 1496,
		_BExpr_NoComma_SWITCH_1allow_GT = 1513,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1530,
		_Expr_Raw_SWITCH_1allow_GT = 1547,
		_ThrowExpr_SWITCH_1allow_GT = 1565,
		_ThrowExpr_SWITCH_0allow_GT = 1569,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1573,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1591,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1610,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1617,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1620,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1623,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1626,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1630,
		_FunctionParameter_LRI_Isolated_2 = 1634,
		_CatchParameter_LRI_Isolated_2 = 1640,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1646,
		_GenericParameter_LRI_Isolated_0 = 1652,
		_VarsDecl_LRI_Isolated_1 = 1655,
		_ForStatConditionPart_LRI_Isolated_0 = 1660,
		_Stat_LRI_Isolated_1 = 1666,
		_Stat_LRI_Isolated_2 = 1669,
		_Stat_LRI_Isolated_3 = 1672,
		_Stat_LRI_Isolated_4 = 1675,
		_Stat_LRI_Isolated_5 = 1678,
		_Stat_LRI_Isolated_6 = 1681,
		_Type_LRI_Isolated_2 = 1684,
		_GenericArgument_LRI_Original = 1690,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1695,
		_PostfixUnaryExpr_LRI_Original = 1700,
		_PrefixUnaryExpr_LRI_Original = 1734,
		_BExpr0_LRI_Original = 1739,
		_BExpr1_LRI_Original = 1748,
		_BExpr2_LRI_Original = 1760,
		_BExpr3_LRI_Original = 1769,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1778,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1781,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1793,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1808,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1817,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1826,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1832,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1838,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1844,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1850,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1856,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1862,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1868,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1874,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1880,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1886,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1929,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1972,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1978,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1981,
		_PM_PrimitiveType_LRI_Original = 1984,
		_PM_QualifiedName_LRI_Original = 1988,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 1992,
		_ShortTypeBeforeDeclarator_LRI_Original = 1998,
		_CallConstructibleType_LRI_Original = 2002,
		_TypeBeforeDeclarator_LRI_Original = 2013,
		_VarWithoutInit_LRI_Original = 2020,
		_VarRequiredInit_LRI_Original = 2024,
		_FunctionParameter_LRI_Original = 2028,
		_CatchParameter_LRI_Original = 2035,
		_ExprOrVarWithInit_LRI_Original = 2042,
		_TypedGenericParameter_LRI_Original = 2049,
		_GenericParameter_LRI_Original = 2054,
		_VarsDeclWithoutKeyword_LRI_Original = 2059,
		_VarsDecl_LRI_Original = 2065,
		_Decl_LRI_Original = 2070,
		_ExprStat_LRI_Original = 2073,
		_IfStatConditionPart_LRI_Original = 2079,
		_ForStatConditionPart_LRI_Original = 2087,
		_Stat_LRI_Original = 2104,
		_Type_LRI_Original = 2114,
		_Expr_NoComma_LRI_Original = 2121,
		_Expr_LRI_Original = 2124,
		_Expr_Argument_LRI_Original = 2127,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2132,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2135,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2139,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2142,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2146,
		_TypeOrExpr_LRI_Original = 2149,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif