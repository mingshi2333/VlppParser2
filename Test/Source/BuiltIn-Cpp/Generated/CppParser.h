/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_LambdaCaptureId = 178,
		_LambdaCapture = 188,
		_LambdaExpr = 198,
		_PrimitiveExpr = 206,
		_QualifiedName_PrimitiveExpr = 284,
		_PostfixUnaryExpr = 288,
		_NewPrefix = 304,
		_NewExpr = 309,
		_DeletePrefix = 321,
		_DeleteExpr = 326,
		_SizeOfPrefix = 334,
		_SizeofExpr = 338,
		_AllPrefixUnaryExpr_NoCStyleCast = 348,
		_AllPrefixUnaryExpr = 369,
		_PrefixUnaryExpr = 376,
		_MemberOperatorIdentifier = 393,
		_MemberOperatorQualifiedName = 398,
		_BExpr0 = 402,
		_BExpr1 = 420,
		_BExpr2 = 438,
		_BExpr3 = 456,
		_PrimitiveTypeLiteral = 474,
		_PrimitiveType = 492,
		_PM_PrimitiveType = 507,
		_PM_QualifiedName = 510,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 513,
		_ShortTypeBeforeDeclarator = 518,
		_TypeStartsWithKeywordBeforeDeclarator = 524,
		_TypeBeforeDeclarator = 532,
		_AdvancedTypeNoCVNoMember = 542,
		_AdvancedTypeCV = 555,
		_AdvancedTypeNoMember = 559,
		_AdvancedTypeMember = 563,
		_DeclaratorKeyword = 567,
		_DeclaratorAKFirst = 587,
		_DeclaratorAKFollow = 591,
		_DeclaratorAKCV = 595,
		_DeclaratorAKMember = 598,
		_DeclaratorFunctionParameters = 601,
		_FunctionKeyword = 613,
		_DeclaratorFunctionPart = 639,
		_DeclaratorFunctionPartOptionalParameters = 645,
		_DeclaratorArrayPart = 654,
		_DeclaratorId = 659,
		_DeclaratorBeforeInner = 663,
		_DeclaratorAfterInner = 670,
		_InnerDeclaratorWithoutName = 675,
		_InnerDeclaratorInnerOptionalName = 679,
		_InnerDeclaratorInnerRequiredName = 683,
		_DeclaratorInnerWithoutName = 687,
		_DeclaratorInnerOptionalName = 692,
		_DeclaratorInnerRequiredName = 700,
		_DeclaratorWithoutName = 708,
		_DeclaratorOptionalName = 716,
		_DeclaratorRequiredName = 724,
		_VarValueInit = 731,
		_VarNewParanInit = 735,
		_VarVarParanInit = 741,
		_VarBraceInit = 748,
		_VarCtorInit = 754,
		_VarInit = 758,
		_DeclaratorVariablePartWithoutInit = 763,
		_DeclaratorVariablePartOptionalInit = 766,
		_DeclaratorVariablePartRequiredInit = 770,
		_VarWithoutInit = 774,
		_VarRequiredInit = 784,
		_FunctionParameterVariablePart = 794,
		_FunctionParameter = 799,
		_CatchParameterVariablePart = 810,
		_CatchParameter = 813,
		_ExprOrVarWithInit = 824,
		_VarsDeclWithoutKeyword = 845,
		_VarsDecl = 855,
		_Decl = 866,
		_ExprStat = 877,
		_BlockStat = 899,
		_TryStatCatchPart = 904,
		_TryStat = 912,
		___TryStat = 918,
		_IfStatConditionPart = 929,
		_IfStat = 953,
		_ForStatConditionPart = 961,
		_ForStat = 984,
		_OtherStats = 991,
		_Stat = 1040,
		_TypeStartsWithKeyword = 1068,
		_Type = 1077,
		_Expr_NoComma = 1088,
		_Expr = 1107,
		_Expr_Argument = 1127,
		_TypeOrExpr_NoComma_NoGT = 1147,
		_TypeOrExpr = 1166,
		_File = 1186,
		_BExpr4_SWITCH_COMBINED = 1189,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1207,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1218,
		_BExpr_SWITCH_1allow_GT = 1229,
		_BExpr10_SWITCH_0allow_GT = 1249,
		_BExpr10_SWITCH_1allow_GT = 1267,
		_BExpr4_SWITCH_0allow_GT = 1285,
		_BExpr4_SWITCH_1allow_GT = 1303,
		_BExpr5_SWITCH_0allow_GT = 1321,
		_BExpr5_SWITCH_1allow_GT = 1339,
		_BExpr6_SWITCH_0allow_GT = 1357,
		_BExpr6_SWITCH_1allow_GT = 1375,
		_BExpr7_SWITCH_0allow_GT = 1393,
		_BExpr7_SWITCH_1allow_GT = 1411,
		_BExpr8_SWITCH_0allow_GT = 1429,
		_BExpr8_SWITCH_1allow_GT = 1447,
		_BExpr9_SWITCH_0allow_GT = 1465,
		_BExpr9_SWITCH_1allow_GT = 1483,
		_BExpr_NoComma_SWITCH_0allow_GT = 1501,
		_BExpr_NoComma_SWITCH_1allow_GT = 1520,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1539,
		_Expr_Raw_SWITCH_1allow_GT = 1558,
		_ThrowExpr_SWITCH_1allow_GT = 1578,
		_ThrowExpr_SWITCH_0allow_GT = 1582,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1586,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1605,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1625,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1628,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1631,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1634,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1638,
		_FunctionParameter_LRI_Isolated_2 = 1642,
		_CatchParameter_LRI_Isolated_2 = 1648,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1654,
		_VarsDecl_LRI_Isolated_1 = 1660,
		_ForStatConditionPart_LRI_Isolated_0 = 1665,
		_Stat_LRI_Isolated_1 = 1671,
		_Stat_LRI_Isolated_2 = 1674,
		_Stat_LRI_Isolated_3 = 1677,
		_Stat_LRI_Isolated_4 = 1680,
		_Stat_LRI_Isolated_5 = 1683,
		_Stat_LRI_Isolated_6 = 1686,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1689,
		_Type_LRI_Isolated_2 = 1695,
		_GenericArgument_LRI_Original = 1701,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1706,
		_PostfixUnaryExpr_LRI_Original = 1711,
		_PrefixUnaryExpr_LRI_Original = 1743,
		_BExpr0_LRI_Original = 1748,
		_BExpr1_LRI_Original = 1757,
		_BExpr2_LRI_Original = 1769,
		_BExpr3_LRI_Original = 1778,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1787,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1790,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1802,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1817,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1826,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1835,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1841,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1847,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1853,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1859,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1865,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1871,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1877,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1883,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1889,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1895,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1938,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1981,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1987,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1990,
		_PM_PrimitiveType_LRI_Original = 1993,
		_PM_QualifiedName_LRI_Original = 1997,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2001,
		_ShortTypeBeforeDeclarator_LRI_Original = 2007,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2011,
		_TypeBeforeDeclarator_LRI_Original = 2018,
		_VarWithoutInit_LRI_Original = 2025,
		_VarRequiredInit_LRI_Original = 2029,
		_FunctionParameter_LRI_Original = 2033,
		_CatchParameter_LRI_Original = 2040,
		_ExprOrVarWithInit_LRI_Original = 2047,
		_VarsDeclWithoutKeyword_LRI_Original = 2054,
		_VarsDecl_LRI_Original = 2060,
		_Decl_LRI_Original = 2065,
		_ExprStat_LRI_Original = 2068,
		_IfStatConditionPart_LRI_Original = 2074,
		_ForStatConditionPart_LRI_Original = 2082,
		_Stat_LRI_Original = 2099,
		_TypeStartsWithKeyword_LRI_Original = 2109,
		_Type_LRI_Original = 2116,
		_Expr_NoComma_LRI_Original = 2123,
		_Expr_LRI_Original = 2126,
		_Expr_Argument_LRI_Original = 2129,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2134,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2137,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2141,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2144,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2148,
		_TypeOrExpr_LRI_Original = 2151,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif