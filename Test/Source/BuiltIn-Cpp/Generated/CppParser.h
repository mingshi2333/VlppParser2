/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 138,
		_QualifiedNameFragment = 144,
		_MemberQualifiedNameFragment = 151,
		_QualifiedName = 154,
		_StringLiteralFragment = 170,
		_PrimitiveExpr = 174,
		_QualifiedName_PrimitiveExpr = 251,
		_PostfixUnaryExpr = 255,
		_NewInit = 267,
		_NewPrefix = 283,
		_NewExpr = 288,
		_DeletePrefix = 297,
		_DeleteExpr = 302,
		_SizeOfPrefix = 310,
		_SizeofExpr = 314,
		_AllPrefixUnaryExpr_NoCStyleCast = 324,
		_AllPrefixUnaryExpr = 345,
		_PrefixUnaryExpr = 352,
		_MemberOperatorIdentifier = 365,
		_MemberOperatorQualifiedName = 370,
		_BExpr0 = 374,
		_BExpr1 = 388,
		_BExpr2 = 402,
		_BExpr3 = 416,
		_PrimitiveTypeLiteral = 430,
		_PrimitiveType = 448,
		_PM_PrimitiveType = 463,
		_PM_QualifiedName = 466,
		_TypeStartsWithKeywordBeforeDeclarator = 469,
		_TypeBeforeDeclarator = 474,
		_AdvancedTypeNoCVNoMember = 480,
		_AdvancedTypeCV = 493,
		_AdvancedTypeNoMember = 497,
		_AdvancedTypeMember = 501,
		_DeclaratorKeyword = 505,
		_DeclaratorAKFirst = 525,
		_DeclaratorAKFollow = 529,
		_DeclaratorAKCV = 533,
		_DeclaratorAKMember = 536,
		_DeclaratorFunctionParameter = 539,
		_DeclaratorFunctionParameters = 550,
		_FunctionKeyword = 562,
		_DeclaratorFunctionPart = 588,
		_DeclaratorArrayPart = 594,
		_DeclaratorId = 599,
		_DeclaratorBeforeInner = 603,
		_DeclaratorAfterInner = 610,
		_InnerDeclaratorWithoutName = 615,
		_InnerDeclaratorInnerOptionalName = 619,
		_DeclaratorInnerWithoutName = 623,
		_DeclaratorInnerOptionalName = 628,
		_DeclaratorWithoutName = 636,
		_DeclaratorOptionalName = 644,
		_TypeStartsWithKeyword = 652,
		_Type = 660,
		_Expr_NoComma = 670,
		_Expr = 685,
		_Expr_Argument = 701,
		_TypeOrExpr_NoComma_NoGT = 717,
		_TypeOrExpr = 732,
		_File = 748,
		_BExpr4_SWITCH_COMBINED = 751,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 765,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 775,
		_BExpr_SWITCH_1allow_GT = 785,
		_BExpr10_SWITCH_0allow_GT = 801,
		_BExpr10_SWITCH_1allow_GT = 815,
		_BExpr4_SWITCH_0allow_GT = 829,
		_BExpr4_SWITCH_1allow_GT = 843,
		_BExpr5_SWITCH_0allow_GT = 857,
		_BExpr5_SWITCH_1allow_GT = 871,
		_BExpr6_SWITCH_0allow_GT = 885,
		_BExpr6_SWITCH_1allow_GT = 899,
		_BExpr7_SWITCH_0allow_GT = 913,
		_BExpr7_SWITCH_1allow_GT = 927,
		_BExpr8_SWITCH_0allow_GT = 941,
		_BExpr8_SWITCH_1allow_GT = 955,
		_BExpr9_SWITCH_0allow_GT = 969,
		_BExpr9_SWITCH_1allow_GT = 983,
		_BExpr_NoComma_SWITCH_0allow_GT = 997,
		_BExpr_NoComma_SWITCH_1allow_GT = 1012,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1027,
		_Expr_Raw_SWITCH_1allow_GT = 1042,
		_ThrowExpr_SWITCH_1allow_GT = 1058,
		_ThrowExpr_SWITCH_0allow_GT = 1062,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1066,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1081,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1097,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1100,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1103,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1106,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1110,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1114,
		_GenericArgument_LRI_Original = 1122,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1127,
		_PostfixUnaryExpr_LRI_Original = 1132,
		_PrefixUnaryExpr_LRI_Original = 1164,
		_BExpr0_LRI_Original = 1169,
		_BExpr1_LRI_Original = 1178,
		_BExpr2_LRI_Original = 1190,
		_BExpr3_LRI_Original = 1199,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1208,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1211,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1223,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1238,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1247,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1256,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1262,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1268,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1274,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1280,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1286,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1292,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1298,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1304,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1310,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1316,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1359,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1402,
		_PM_PrimitiveType_LRI_Original = 1408,
		_PM_QualifiedName_LRI_Original = 1412,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1416,
		_TypeBeforeDeclarator_LRI_Original = 1422,
		_DeclaratorFunctionParameter_LRI_Original = 1426,
		_TypeStartsWithKeyword_LRI_Original = 1438,
		_Type_LRI_Original = 1443,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1448,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1451,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1454,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1457,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1461,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1464,
		_Expr_NoComma_LRI_Original = 1468,
		_Expr_LRI_Original = 1471,
		_Expr_Argument_LRI_Original = 1474,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1479,
		_TypeOrExpr_LRI_Original = 1482,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif