/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_LambdaCaptureId = 178,
		_LambdaCapture = 188,
		_LambdaExpr = 198,
		_PrimitiveExpr = 207,
		_QualifiedName_PrimitiveExpr = 285,
		_PostfixUnaryExpr = 289,
		_NewPrefix = 305,
		_NewExpr = 310,
		_DeletePrefix = 322,
		_DeleteExpr = 327,
		_SizeOfPrefix = 335,
		_SizeofExpr = 339,
		_AllPrefixUnaryExpr_NoCStyleCast = 349,
		_AllPrefixUnaryExpr = 370,
		_PrefixUnaryExpr = 377,
		_MemberOperatorIdentifier = 394,
		_MemberOperatorQualifiedName = 399,
		_BExpr0 = 403,
		_BExpr1 = 421,
		_BExpr2 = 439,
		_BExpr3 = 457,
		_PrimitiveTypeLiteral = 475,
		_PrimitiveType = 493,
		_PM_PrimitiveType = 508,
		_PM_QualifiedName = 511,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 514,
		_ShortTypeBeforeDeclarator = 519,
		_TypeStartsWithKeywordBeforeDeclarator = 525,
		_TypeBeforeDeclarator = 533,
		_AdvancedTypeNoCVNoMember = 543,
		_AdvancedTypeCV = 556,
		_AdvancedTypeNoMember = 560,
		_AdvancedTypeMember = 564,
		_DeclaratorKeyword = 568,
		_DeclaratorAKFirst = 588,
		_DeclaratorAKFollow = 592,
		_DeclaratorAKCV = 596,
		_DeclaratorAKMember = 599,
		_DeclaratorFunctionParameters = 602,
		_FunctionKeyword = 614,
		_DeclaratorFunctionPart = 640,
		_DeclaratorFunctionPartOptionalParameters = 646,
		_DeclaratorArrayPart = 655,
		_DeclaratorId = 660,
		_DeclaratorBeforeInner = 664,
		_DeclaratorAfterInner = 671,
		_InnerDeclaratorWithoutName = 676,
		_InnerDeclaratorInnerOptionalName = 680,
		_InnerDeclaratorInnerRequiredName = 684,
		_DeclaratorInnerWithoutName = 688,
		_DeclaratorInnerOptionalName = 693,
		_DeclaratorInnerRequiredName = 701,
		_DeclaratorWithoutName = 709,
		_DeclaratorOptionalName = 717,
		_DeclaratorRequiredName = 725,
		_VarValueInit = 732,
		_VarNewParanInit = 736,
		_VarVarParanInit = 742,
		_VarBraceInit = 749,
		_VarCtorInit = 755,
		_VarInit = 759,
		_DeclaratorVariablePartWithoutInit = 764,
		_DeclaratorVariablePartOptionalInit = 767,
		_DeclaratorVariablePartRequiredInit = 771,
		_VarWithoutInit = 775,
		_VarRequiredInit = 785,
		_FunctionParameterVariablePart = 795,
		_FunctionParameter = 800,
		_CatchParameterVariablePart = 811,
		_CatchParameter = 814,
		_ExprOrVarWithInit = 825,
		_GenericParameterKeyword = 846,
		_OrdinaryGenericParameter = 853,
		_TypedGenericParameterInit = 860,
		_TypedGenericParameterVariablePart = 864,
		_TypedGenericParameter = 869,
		_GenericParameter = 879,
		_GenericHeader = 890,
		_VarsDeclWithoutKeyword = 895,
		_VarsDecl = 905,
		_Decl = 916,
		_ExprStat = 927,
		_BlockStat = 949,
		_TryStatCatchPart = 954,
		_TryStat = 962,
		___TryStat = 968,
		_IfStatConditionPart = 979,
		_IfStat = 1003,
		_ForStatConditionPart = 1011,
		_ForStat = 1034,
		_OtherStats = 1041,
		_Stat = 1090,
		_TypeStartsWithKeyword = 1118,
		_Type = 1127,
		_Expr_NoComma = 1138,
		_Expr = 1157,
		_Expr_Argument = 1177,
		_TypeOrExpr_NoComma_NoGT = 1197,
		_TypeOrExpr = 1216,
		_File = 1236,
		_BExpr4_SWITCH_COMBINED = 1239,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1257,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1268,
		_BExpr_SWITCH_1allow_GT = 1279,
		_BExpr10_SWITCH_0allow_GT = 1299,
		_BExpr10_SWITCH_1allow_GT = 1317,
		_BExpr4_SWITCH_0allow_GT = 1335,
		_BExpr4_SWITCH_1allow_GT = 1353,
		_BExpr5_SWITCH_0allow_GT = 1371,
		_BExpr5_SWITCH_1allow_GT = 1389,
		_BExpr6_SWITCH_0allow_GT = 1407,
		_BExpr6_SWITCH_1allow_GT = 1425,
		_BExpr7_SWITCH_0allow_GT = 1443,
		_BExpr7_SWITCH_1allow_GT = 1461,
		_BExpr8_SWITCH_0allow_GT = 1479,
		_BExpr8_SWITCH_1allow_GT = 1497,
		_BExpr9_SWITCH_0allow_GT = 1515,
		_BExpr9_SWITCH_1allow_GT = 1533,
		_BExpr_NoComma_SWITCH_0allow_GT = 1551,
		_BExpr_NoComma_SWITCH_1allow_GT = 1570,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1589,
		_Expr_Raw_SWITCH_1allow_GT = 1608,
		_ThrowExpr_SWITCH_1allow_GT = 1628,
		_ThrowExpr_SWITCH_0allow_GT = 1632,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1636,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1655,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1675,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1678,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1681,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1684,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1688,
		_FunctionParameter_LRI_Isolated_2 = 1692,
		_CatchParameter_LRI_Isolated_2 = 1698,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1704,
		_GenericParameter_LRI_Isolated_0 = 1710,
		_VarsDecl_LRI_Isolated_1 = 1713,
		_ForStatConditionPart_LRI_Isolated_0 = 1718,
		_Stat_LRI_Isolated_1 = 1724,
		_Stat_LRI_Isolated_2 = 1727,
		_Stat_LRI_Isolated_3 = 1730,
		_Stat_LRI_Isolated_4 = 1733,
		_Stat_LRI_Isolated_5 = 1736,
		_Stat_LRI_Isolated_6 = 1739,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1742,
		_Type_LRI_Isolated_2 = 1748,
		_GenericArgument_LRI_Original = 1754,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1759,
		_PostfixUnaryExpr_LRI_Original = 1764,
		_PrefixUnaryExpr_LRI_Original = 1796,
		_BExpr0_LRI_Original = 1801,
		_BExpr1_LRI_Original = 1810,
		_BExpr2_LRI_Original = 1822,
		_BExpr3_LRI_Original = 1831,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1840,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1843,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1855,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1870,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1879,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1888,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1894,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1900,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1906,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1912,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1918,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1924,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1930,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1936,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1942,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1948,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1991,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2034,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2040,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2043,
		_PM_PrimitiveType_LRI_Original = 2046,
		_PM_QualifiedName_LRI_Original = 2050,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2054,
		_ShortTypeBeforeDeclarator_LRI_Original = 2060,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2064,
		_TypeBeforeDeclarator_LRI_Original = 2071,
		_VarWithoutInit_LRI_Original = 2078,
		_VarRequiredInit_LRI_Original = 2082,
		_FunctionParameter_LRI_Original = 2086,
		_CatchParameter_LRI_Original = 2093,
		_ExprOrVarWithInit_LRI_Original = 2100,
		_TypedGenericParameter_LRI_Original = 2107,
		_GenericParameter_LRI_Original = 2112,
		_VarsDeclWithoutKeyword_LRI_Original = 2117,
		_VarsDecl_LRI_Original = 2123,
		_Decl_LRI_Original = 2128,
		_ExprStat_LRI_Original = 2131,
		_IfStatConditionPart_LRI_Original = 2137,
		_ForStatConditionPart_LRI_Original = 2145,
		_Stat_LRI_Original = 2162,
		_TypeStartsWithKeyword_LRI_Original = 2172,
		_Type_LRI_Original = 2179,
		_Expr_NoComma_LRI_Original = 2186,
		_Expr_LRI_Original = 2189,
		_Expr_Argument_LRI_Original = 2192,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2197,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2200,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2204,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2207,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2211,
		_TypeOrExpr_LRI_Original = 2214,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif