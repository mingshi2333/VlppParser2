/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 292,
		_DeleteExpr = 297,
		_SizeOfPrefix = 305,
		_SizeofExpr = 309,
		_AllPrefixUnaryExpr_NoCStyleCast = 319,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 364,
		_MemberOperatorQualifiedName = 369,
		_BExpr0 = 373,
		_BExpr1 = 391,
		_BExpr2 = 409,
		_BExpr3 = 427,
		_PrimitiveTypeLiteral = 445,
		_PrimitiveType = 463,
		_PM_PrimitiveType = 478,
		_PM_QualifiedName = 481,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 484,
		_ShortTypeBeforeDeclarator = 489,
		_TypeStartsWithKeywordBeforeDeclarator = 495,
		_TypeBeforeDeclarator = 503,
		_AdvancedTypeNoCVNoMember = 513,
		_AdvancedTypeCV = 526,
		_AdvancedTypeNoMember = 530,
		_AdvancedTypeMember = 534,
		_DeclaratorKeyword = 538,
		_DeclaratorAKFirst = 558,
		_DeclaratorAKFollow = 562,
		_DeclaratorAKCV = 566,
		_DeclaratorAKMember = 569,
		_DeclaratorFunctionParameters = 572,
		_FunctionKeyword = 584,
		_DeclaratorFunctionPart = 610,
		_DeclaratorArrayPart = 616,
		_DeclaratorId = 621,
		_DeclaratorBeforeInner = 625,
		_DeclaratorAfterInner = 632,
		_InnerDeclaratorWithoutName = 637,
		_InnerDeclaratorInnerOptionalName = 641,
		_InnerDeclaratorInnerRequiredName = 645,
		_DeclaratorInnerWithoutName = 649,
		_DeclaratorInnerOptionalName = 654,
		_DeclaratorInnerRequiredName = 662,
		_DeclaratorWithoutName = 670,
		_DeclaratorOptionalName = 678,
		_DeclaratorRequiredName = 686,
		_VarValueInit = 693,
		_VarNewParanInit = 697,
		_VarVarParanInit = 703,
		_VarBraceInit = 710,
		_VarCtorInit = 716,
		_VarInit = 720,
		_FunctionParameterVariablePart = 725,
		_DeclaratorVariablePartWithoutInit = 730,
		_DeclaratorVariablePartOptionalInit = 733,
		_DeclaratorVariablePartRequiredInit = 737,
		_VarWithoutInit = 741,
		_VarRequiredInit = 751,
		_FunctionParameter = 761,
		_ExprOrVarWithInit = 772,
		_VarsDeclWithoutKeyword = 793,
		_VarsDecl = 803,
		_Decl = 814,
		_ExprStat = 825,
		_BlockStat = 847,
		_TryStatCatchPart = 852,
		_TryStat = 860,
		___TryStat = 866,
		_OtherStats = 877,
		_Stat = 932,
		_TypeStartsWithKeyword = 958,
		_Type = 967,
		_Expr_NoComma = 978,
		_Expr = 997,
		_Expr_Argument = 1017,
		_TypeOrExpr_NoComma_NoGT = 1037,
		_TypeOrExpr = 1056,
		_File = 1076,
		_BExpr4_SWITCH_COMBINED = 1079,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1097,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1108,
		_BExpr_SWITCH_1allow_GT = 1119,
		_BExpr10_SWITCH_0allow_GT = 1139,
		_BExpr10_SWITCH_1allow_GT = 1157,
		_BExpr4_SWITCH_0allow_GT = 1175,
		_BExpr4_SWITCH_1allow_GT = 1193,
		_BExpr5_SWITCH_0allow_GT = 1211,
		_BExpr5_SWITCH_1allow_GT = 1229,
		_BExpr6_SWITCH_0allow_GT = 1247,
		_BExpr6_SWITCH_1allow_GT = 1265,
		_BExpr7_SWITCH_0allow_GT = 1283,
		_BExpr7_SWITCH_1allow_GT = 1301,
		_BExpr8_SWITCH_0allow_GT = 1319,
		_BExpr8_SWITCH_1allow_GT = 1337,
		_BExpr9_SWITCH_0allow_GT = 1355,
		_BExpr9_SWITCH_1allow_GT = 1373,
		_BExpr_NoComma_SWITCH_0allow_GT = 1391,
		_BExpr_NoComma_SWITCH_1allow_GT = 1410,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1429,
		_Expr_Raw_SWITCH_1allow_GT = 1448,
		_ThrowExpr_SWITCH_1allow_GT = 1468,
		_ThrowExpr_SWITCH_0allow_GT = 1472,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1476,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1495,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1515,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1518,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1521,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1524,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1528,
		_FunctionParameter_LRI_Isolated_2 = 1532,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1538,
		_VarsDecl_LRI_Isolated_1 = 1544,
		_Stat_LRI_Isolated_1 = 1549,
		_Stat_LRI_Isolated_2 = 1552,
		_Stat_LRI_Isolated_3 = 1555,
		_Stat_LRI_Isolated_4 = 1558,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1561,
		_Type_LRI_Isolated_2 = 1567,
		_GenericArgument_LRI_Original = 1573,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1578,
		_PostfixUnaryExpr_LRI_Original = 1583,
		_PrefixUnaryExpr_LRI_Original = 1615,
		_BExpr0_LRI_Original = 1620,
		_BExpr1_LRI_Original = 1629,
		_BExpr2_LRI_Original = 1641,
		_BExpr3_LRI_Original = 1650,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1659,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1662,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1674,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1689,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1698,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1707,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1713,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1719,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1725,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1731,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1737,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1743,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1749,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1755,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1761,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1767,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1810,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1853,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1859,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1862,
		_PM_PrimitiveType_LRI_Original = 1865,
		_PM_QualifiedName_LRI_Original = 1869,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1873,
		_ShortTypeBeforeDeclarator_LRI_Original = 1879,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1883,
		_TypeBeforeDeclarator_LRI_Original = 1890,
		_VarWithoutInit_LRI_Original = 1897,
		_VarRequiredInit_LRI_Original = 1901,
		_FunctionParameter_LRI_Original = 1905,
		_ExprOrVarWithInit_LRI_Original = 1912,
		_VarsDeclWithoutKeyword_LRI_Original = 1919,
		_VarsDecl_LRI_Original = 1925,
		_Decl_LRI_Original = 1930,
		_ExprStat_LRI_Original = 1933,
		_Stat_LRI_Original = 1939,
		_TypeStartsWithKeyword_LRI_Original = 1947,
		_Type_LRI_Original = 1954,
		_Expr_NoComma_LRI_Original = 1961,
		_Expr_LRI_Original = 1964,
		_Expr_Argument_LRI_Original = 1967,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1972,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1975,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1979,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1982,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1986,
		_TypeOrExpr_LRI_Original = 1989,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif