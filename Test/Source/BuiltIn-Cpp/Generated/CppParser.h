/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_ExprStat = 579,
		_BlockStat = 605,
		_TryStatCatchPart = 610,
		_TryStat = 618,
		___TryStat = 624,
		_IfStatConditionPart = 635,
		_IfStat = 657,
		_ForStatConditionPart = 665,
		_ForStat = 686,
		_OtherStats = 693,
		_Stat = 735,
		_GenericParameterKeyword = 767,
		_OrdinaryGenericParameter = 774,
		_TypedGenericParameterInit = 781,
		_TypedGenericParameterVariablePart = 785,
		_TypedGenericParameter = 790,
		_GenericParameter = 800,
		_GenericHeader = 811,
		_AdvancedTypeNoCVNoMember = 817,
		_AdvancedTypeCV = 830,
		_AdvancedTypeNoMember = 834,
		_AdvancedTypeMember = 838,
		_DeclarationKeywordWithoutFriend = 842,
		_DeclarationKeyword = 846,
		_DeclaratorKeyword = 850,
		_DeclaratorAKFirst = 870,
		_DeclaratorAKFollow = 874,
		_DeclaratorAKCV = 878,
		_DeclaratorAKMember = 881,
		_DeclaratorAKCtorDtor = 884,
		_DeclaratorFunctionParameters = 887,
		_FunctionKeyword = 899,
		_DeclaratorFunctionPart = 925,
		_DeclaratorFunctionPartOptionalParameters = 932,
		_DeclaratorArrayPart = 941,
		_DeclaratorId = 946,
		_DeclaratorUntypedFuncId = 950,
		_DeclaratorBeforeInner = 955,
		_DeclaratorAfterInner = 962,
		_InnerDeclaratorWithoutName = 967,
		_InnerDeclaratorInnerOptionalName = 971,
		_InnerDeclaratorInnerRequiredName = 975,
		_DeclaratorInnerWithoutName = 979,
		_DeclaratorInnerOptionalName = 984,
		_DeclaratorInnerRequiredName = 996,
		_DeclaratorWithoutName = 1008,
		_DeclaratorOptionalName = 1016,
		_DeclaratorRequiredName = 1024,
		_DeclaratorUntypedFuncWithoutKeyword = 1031,
		_VarValueInit = 1036,
		_VarNewParanInit = 1040,
		_VarBraceInit = 1046,
		_VarCtorInit = 1052,
		_VarInit = 1056,
		_VarStatInitItemFirst = 1061,
		_VarStatInitItemSecond = 1066,
		_VarStatInit = 1071,
		_DeclaratorVariablePartWithoutInit = 1076,
		_DeclaratorVariablePartOptionalInitFirst = 1079,
		_DeclaratorVariablePartOptionalInitSecond = 1083,
		_DeclaratorVariablePartRequiredInit = 1087,
		_FunctionParameterVariablePart = 1091,
		_FunctionParameter = 1096,
		_CatchParameterVariablePart = 1107,
		_CatchParameter = 1110,
		_ExprOrVarCondition = 1121,
		_ForEachParameter = 1140,
		_MultiTypedefVarDeclVariablePart = 1150,
		_MultiTypedefVarsDeclWithoutKeyword = 1155,
		_MultiVarsDeclVariablePartFirst = 1165,
		_MultiVarsDeclVariablePartSecond = 1170,
		_MultiVarsDeclWithoutKeyword = 1175,
		_MultiVarsDecl = 1185,
		_UntypedFuncForwardDeclVariablePart = 1196,
		_UntypedFuncForwardDeclWithoutKeyword = 1199,
		_MultiVarsOrFuncForwardDeclWithoutKeyword = 1202,
		_MultiVarsOrFuncForwardDecl = 1213,
		_MultiVarsOrTypedFuncDeclVariablePartFollowing = 1225,
		_MultiVarsOrTypedFuncDeclVariablePart = 1232,
		_MultiVarsOrTypedFuncDeclWithoutKeyword = 1236,
		_UntypedFuncDeclVariablePart = 1246,
		_UntypedFuncDeclWithoutKeyword = 1251,
		_MultiVarsOrFuncDeclWithoutKeyword = 1254,
		_MultiVarsOrFuncDecl = 1265,
		_ClassInheritanceFirst = 1277,
		_ClassInheritanceSecond = 1290,
		_ClassMemberPartFirst = 1303,
		_ClassMemberPartSecond = 1325,
		_ClassBody = 1336,
		_ClassDeclPrefix = 1345,
		_ClassDecl = 1350,
		_ClassForwardDecl = 1355,
		_StaticAssertDecl = 1359,
		_TypedefCompatibleDecl = 1367,
		_TypedefDecl = 1379,
		_ExternDeclRejectSemicolon = 1383,
		_NsName = 1390,
		_NsDecl = 1393,
		_UsingNsDecl = 1401,
		_UsingValueDecl = 1408,
		_UsingTypeDecl = 1412,
		_FriendTypeDecl = 1418,
		_EnumItem = 1422,
		_EnumBody = 1427,
		_EnumDecl = 1436,
		_EnumForwardDecl = 1449,
		_DeclSharedWithoutSemicolonAcceptKeyword = 1460,
		_DeclSharedWithoutSemicolonAcceptKeywordButFriend = 1469,
		_DeclSharedWithoutSemicolon = 1473,
		_DeclNeedSemicolon = 1481,
		_DeclRejectSemicolon = 1495,
		_Type = 1511,
		_Expr_NoComma = 1522,
		_Expr = 1539,
		_Expr_Argument = 1557,
		_TypeOrExpr_NoComma_NoGT = 1575,
		_TypeOrExpr = 1593,
		_File = 1612,
		_BExpr5_SWITCH_COMBINED = 1634,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1650,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1661,
		_BExpr_SWITCH_1allow_GT = 1672,
		_BExpr10_SWITCH_0allow_GT = 1690,
		_BExpr10_SWITCH_1allow_GT = 1706,
		_BExpr11_SWITCH_0allow_GT = 1722,
		_BExpr11_SWITCH_1allow_GT = 1738,
		_BExpr5_SWITCH_0allow_GT = 1754,
		_BExpr5_SWITCH_1allow_GT = 1770,
		_BExpr6_SWITCH_0allow_GT = 1786,
		_BExpr6_SWITCH_1allow_GT = 1802,
		_BExpr7_SWITCH_0allow_GT = 1818,
		_BExpr7_SWITCH_1allow_GT = 1834,
		_BExpr8_SWITCH_0allow_GT = 1850,
		_BExpr8_SWITCH_1allow_GT = 1866,
		_BExpr9_SWITCH_0allow_GT = 1882,
		_BExpr9_SWITCH_1allow_GT = 1898,
		_BExpr_NoComma_SWITCH_0allow_GT = 1914,
		_BExpr_NoComma_SWITCH_1allow_GT = 1931,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1948,
		_Expr_Raw_SWITCH_1allow_GT = 1965,
		_ThrowExpr_SWITCH_1allow_GT = 1983,
		_ThrowExpr_SWITCH_0allow_GT = 1987,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1991,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 2009,
		_PostfixUnaryExpr_LRI_Isolated_1 = 2028,
		_PrefixUnaryExpr_LRI_Isolated_1 = 2035,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 2038,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 2041,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 2044,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 2048,
		_ForStatConditionPart_LRI_Isolated_0 = 2052,
		_Stat_LRI_Isolated_1 = 2058,
		_Stat_LRI_Isolated_2 = 2061,
		_Stat_LRI_Isolated_3 = 2064,
		_Stat_LRI_Isolated_4 = 2067,
		_Stat_LRI_Isolated_5 = 2070,
		_Stat_LRI_Isolated_6 = 2073,
		_GenericParameter_LRI_Isolated_0 = 2076,
		_FunctionParameter_LRI_Isolated_2 = 2079,
		_CatchParameter_LRI_Isolated_2 = 2085,
		_ExprOrVarCondition_LRI_Isolated_2 = 2091,
		_MultiVarsDecl_LRI_Isolated_1 = 2097,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 2102,
		_MultiVarsOrFuncForwardDecl_LRI_Isolated_1 = 2105,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 2110,
		_MultiVarsOrFuncDecl_LRI_Isolated_1 = 2113,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2118,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2121,
		_DeclNeedSemicolon_LRI_Isolated_0 = 2124,
		_DeclNeedSemicolon_LRI_Isolated_2 = 2127,
		_DeclRejectSemicolon_LRI_Isolated_0 = 2132,
		_DeclRejectSemicolon_LRI_Isolated_1 = 2136,
		_DeclRejectSemicolon_LRI_Isolated_3 = 2139,
		_DeclRejectSemicolon_LRI_Isolated_4 = 2142,
		_Type_LRI_Isolated_2 = 2147,
		_GenericArgument_LRI_Original = 2153,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2158,
		_PostfixUnaryExpr_LRI_Original = 2163,
		_PrefixUnaryExpr_LRI_Original = 2197,
		_BExpr0_LRI_Original = 2202,
		_BExpr1_LRI_Original = 2211,
		_BExpr2_LRI_Original = 2223,
		_BExpr3_LRI_Original = 2232,
		_BExpr4_LRI_Original = 2243,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2249,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2252,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2266,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2283,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2292,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2301,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2307,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2313,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2319,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2325,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2331,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2337,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2343,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2349,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2355,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2361,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2408,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2455,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2461,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2464,
		_PM_PrimitiveType_LRI_Original = 2467,
		_PM_QualifiedName_LRI_Original = 2471,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2475,
		_ShortTypeBeforeDeclarator_LRI_Original = 2481,
		_CallConstructibleType_LRI_Original = 2485,
		_TypeBeforeDeclarator_LRI_Original = 2496,
		_ExprStat_LRI_Original = 2503,
		_IfStatConditionPart_LRI_Original = 2509,
		_ForStatConditionPart_LRI_Original = 2517,
		_Stat_LRI_Original = 2534,
		_TypedGenericParameter_LRI_Original = 2544,
		_GenericParameter_LRI_Original = 2549,
		_FunctionParameter_LRI_Original = 2554,
		_CatchParameter_LRI_Original = 2561,
		_ExprOrVarCondition_LRI_Original = 2568,
		_ForEachParameter_LRI_Original = 2575,
		_MultiTypedefVarsDeclWithoutKeyword_LRI_Original = 2579,
		_MultiVarsDeclWithoutKeyword_LRI_Original = 2583,
		_MultiVarsDecl_LRI_Original = 2587,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2592,
		_MultiVarsOrFuncForwardDecl_LRI_Original = 2597,
		_MultiVarsOrTypedFuncDeclWithoutKeyword_LRI_Original = 2602,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Original = 2606,
		_MultiVarsOrFuncDecl_LRI_Original = 2611,
		_ClassMemberPartFirst_LRI_Original = 2616,
		_TypedefCompatibleDecl_LRI_Original = 2620,
		_DeclNeedSemicolon_LRI_Original = 2626,
		_DeclRejectSemicolon_LRI_Original = 2632,
		_Type_LRI_Original = 2640,
		_Expr_NoComma_LRI_Original = 2647,
		_Expr_LRI_Original = 2650,
		_Expr_Argument_LRI_Original = 2653,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2658,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2661,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2665,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2668,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2672,
		_TypeOrExpr_LRI_Original = 2675,
		_File_LRI_Original = 2678,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif