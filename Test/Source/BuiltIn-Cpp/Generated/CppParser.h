/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 119,
		_GenericArgument = 124,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_SingleLevelQualifiedName = 158,
		_NextLevelQualifiedName = 168,
		_QualifiedName = 174,
		_QualifiedNameAfterTypename = 179,
		_StringLiteralFragment = 185,
		_LambdaCaptureId = 189,
		_LambdaCapture = 199,
		_LambdaExpr = 209,
		_PrimitiveExpr = 218,
		_QualifiedName_PrimitiveExpr = 296,
		_PostfixUnaryExpr = 300,
		_NewPrefix = 314,
		_NewExpr = 319,
		_DeletePrefix = 331,
		_DeleteExpr = 336,
		_SizeOfPrefix = 344,
		_SizeofExpr = 348,
		_AllPrefixUnaryExpr_NoCStyleCast = 358,
		_AllPrefixUnaryExpr = 379,
		_PrefixUnaryExpr = 386,
		_MemberOperatorIdentifier = 401,
		_MemberOperatorQualifiedName = 406,
		_BExpr0 = 410,
		_BExpr1 = 426,
		_BExpr2 = 442,
		_BExpr3 = 458,
		_PrimitiveTypeLiteral = 474,
		_PrimitiveType = 492,
		_PM_PrimitiveType = 507,
		_PM_QualifiedName = 510,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 513,
		_ShortTypeBeforeDeclarator = 518,
		_CallConstructibleType = 524,
		_TypeBeforeDeclarator = 534,
		_AdvancedTypeNoCVNoMember = 544,
		_AdvancedTypeCV = 557,
		_AdvancedTypeNoMember = 561,
		_AdvancedTypeMember = 565,
		_DeclaratorKeyword = 569,
		_DeclaratorAKFirst = 589,
		_DeclaratorAKFollow = 593,
		_DeclaratorAKCV = 597,
		_DeclaratorAKMember = 600,
		_DeclaratorFunctionParameters = 603,
		_FunctionKeyword = 615,
		_DeclaratorFunctionPart = 641,
		_DeclaratorFunctionPartOptionalParameters = 647,
		_DeclaratorArrayPart = 656,
		_DeclaratorId = 661,
		_DeclaratorBeforeInner = 665,
		_DeclaratorAfterInner = 672,
		_InnerDeclaratorWithoutName = 677,
		_InnerDeclaratorInnerOptionalName = 681,
		_InnerDeclaratorInnerRequiredName = 685,
		_DeclaratorInnerWithoutName = 689,
		_DeclaratorInnerOptionalName = 694,
		_DeclaratorInnerRequiredName = 702,
		_DeclaratorWithoutName = 710,
		_DeclaratorOptionalName = 718,
		_DeclaratorRequiredName = 726,
		_VarValueInit = 733,
		_VarNewParanInit = 737,
		_VarVarParanInit = 743,
		_VarBraceInit = 750,
		_VarCtorInit = 756,
		_VarInit = 760,
		_DeclaratorVariablePartWithoutInit = 765,
		_DeclaratorVariablePartOptionalInit = 768,
		_DeclaratorVariablePartRequiredInit = 772,
		_VarWithoutInit = 776,
		_VarRequiredInit = 786,
		_FunctionParameterVariablePart = 796,
		_FunctionParameter = 801,
		_CatchParameterVariablePart = 812,
		_CatchParameter = 815,
		_ExprOrVarWithInit = 826,
		_GenericParameterKeyword = 845,
		_OrdinaryGenericParameter = 852,
		_TypedGenericParameterInit = 859,
		_TypedGenericParameterVariablePart = 863,
		_TypedGenericParameter = 868,
		_GenericParameter = 878,
		_GenericHeader = 889,
		_VarsDeclWithoutKeyword = 895,
		_VarsDecl = 905,
		_Decl = 916,
		_ExprStat = 927,
		_BlockStat = 947,
		_TryStatCatchPart = 952,
		_TryStat = 960,
		___TryStat = 966,
		_IfStatConditionPart = 977,
		_IfStat = 999,
		_ForStatConditionPart = 1007,
		_ForStat = 1028,
		_OtherStats = 1035,
		_Stat = 1084,
		_Type = 1110,
		_Expr_NoComma = 1121,
		_Expr = 1138,
		_Expr_Argument = 1156,
		_TypeOrExpr_NoComma_NoGT = 1174,
		_TypeOrExpr = 1191,
		_File = 1209,
		_BExpr4_SWITCH_COMBINED = 1212,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1228,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1239,
		_BExpr_SWITCH_1allow_GT = 1250,
		_BExpr10_SWITCH_0allow_GT = 1268,
		_BExpr10_SWITCH_1allow_GT = 1284,
		_BExpr4_SWITCH_0allow_GT = 1300,
		_BExpr4_SWITCH_1allow_GT = 1316,
		_BExpr5_SWITCH_0allow_GT = 1332,
		_BExpr5_SWITCH_1allow_GT = 1348,
		_BExpr6_SWITCH_0allow_GT = 1364,
		_BExpr6_SWITCH_1allow_GT = 1380,
		_BExpr7_SWITCH_0allow_GT = 1396,
		_BExpr7_SWITCH_1allow_GT = 1412,
		_BExpr8_SWITCH_0allow_GT = 1428,
		_BExpr8_SWITCH_1allow_GT = 1444,
		_BExpr9_SWITCH_0allow_GT = 1460,
		_BExpr9_SWITCH_1allow_GT = 1476,
		_BExpr_NoComma_SWITCH_0allow_GT = 1492,
		_BExpr_NoComma_SWITCH_1allow_GT = 1509,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1526,
		_Expr_Raw_SWITCH_1allow_GT = 1543,
		_ThrowExpr_SWITCH_1allow_GT = 1561,
		_ThrowExpr_SWITCH_0allow_GT = 1565,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1569,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1586,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1604,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1607,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1610,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1613,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1617,
		_FunctionParameter_LRI_Isolated_2 = 1621,
		_CatchParameter_LRI_Isolated_2 = 1627,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1633,
		_GenericParameter_LRI_Isolated_0 = 1639,
		_VarsDecl_LRI_Isolated_1 = 1642,
		_ForStatConditionPart_LRI_Isolated_0 = 1647,
		_Stat_LRI_Isolated_1 = 1653,
		_Stat_LRI_Isolated_2 = 1656,
		_Stat_LRI_Isolated_3 = 1659,
		_Stat_LRI_Isolated_4 = 1662,
		_Stat_LRI_Isolated_5 = 1665,
		_Stat_LRI_Isolated_6 = 1668,
		_Type_LRI_Isolated_2 = 1671,
		_GenericArgument_LRI_Original = 1677,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1682,
		_PostfixUnaryExpr_LRI_Original = 1687,
		_PrefixUnaryExpr_LRI_Original = 1719,
		_BExpr0_LRI_Original = 1724,
		_BExpr1_LRI_Original = 1733,
		_BExpr2_LRI_Original = 1745,
		_BExpr3_LRI_Original = 1754,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1763,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1766,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1778,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1793,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1802,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1811,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1817,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1823,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1829,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1835,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1841,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1847,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1853,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1859,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1865,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1871,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1914,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1957,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1963,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1966,
		_PM_PrimitiveType_LRI_Original = 1969,
		_PM_QualifiedName_LRI_Original = 1973,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1977,
		_ShortTypeBeforeDeclarator_LRI_Original = 1983,
		_CallConstructibleType_LRI_Original = 1987,
		_TypeBeforeDeclarator_LRI_Original = 1998,
		_VarWithoutInit_LRI_Original = 2005,
		_VarRequiredInit_LRI_Original = 2009,
		_FunctionParameter_LRI_Original = 2013,
		_CatchParameter_LRI_Original = 2020,
		_ExprOrVarWithInit_LRI_Original = 2027,
		_TypedGenericParameter_LRI_Original = 2034,
		_GenericParameter_LRI_Original = 2039,
		_VarsDeclWithoutKeyword_LRI_Original = 2044,
		_VarsDecl_LRI_Original = 2050,
		_Decl_LRI_Original = 2055,
		_ExprStat_LRI_Original = 2058,
		_IfStatConditionPart_LRI_Original = 2064,
		_ForStatConditionPart_LRI_Original = 2072,
		_Stat_LRI_Original = 2089,
		_Type_LRI_Original = 2099,
		_Expr_NoComma_LRI_Original = 2106,
		_Expr_LRI_Original = 2109,
		_Expr_Argument_LRI_Original = 2112,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2117,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2120,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2124,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2127,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2131,
		_TypeOrExpr_LRI_Original = 2134,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif