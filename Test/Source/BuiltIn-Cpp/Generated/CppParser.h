/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_AdvancedTypeNoCVNoMember = 579,
		_AdvancedTypeCV = 592,
		_AdvancedTypeNoMember = 596,
		_AdvancedTypeMember = 600,
		_DeclaratorKeyword = 604,
		_DeclaratorAKFirst = 624,
		_DeclaratorAKFollow = 628,
		_DeclaratorAKCV = 632,
		_DeclaratorAKMember = 635,
		_DeclaratorAKCtorDtor = 638,
		_DeclaratorFunctionParameters = 641,
		_FunctionKeyword = 653,
		_DeclaratorFunctionPart = 679,
		_DeclaratorFunctionPartOptionalParameters = 686,
		_DeclaratorArrayPart = 695,
		_DeclaratorId = 700,
		_DeclaratorUntypedFuncId = 704,
		_DeclaratorBeforeInner = 709,
		_DeclaratorAfterInner = 716,
		_InnerDeclaratorWithoutName = 721,
		_InnerDeclaratorInnerOptionalName = 725,
		_InnerDeclaratorInnerRequiredName = 729,
		_DeclaratorInnerWithoutName = 733,
		_DeclaratorInnerOptionalName = 738,
		_DeclaratorInnerRequiredName = 750,
		_DeclaratorWithoutName = 762,
		_DeclaratorOptionalName = 770,
		_DeclaratorRequiredName = 778,
		_DeclaratorUntypedFuncWithoutKeyword = 785,
		_VarValueInit = 790,
		_VarNewParanInit = 794,
		_VarVarParanInit = 800,
		_VarBraceInit = 807,
		_VarCtorInit = 813,
		_VarStatInit = 817,
		_VarInit = 820,
		_DeclaratorVariablePartWithoutInit = 825,
		_DeclaratorVariablePartOptionalInit = 828,
		_DeclaratorVariablePartRequiredInit = 832,
		_FunctionParameterVariablePart = 836,
		_FunctionParameter = 841,
		_GenericParameterKeyword = 852,
		_OrdinaryGenericParameter = 859,
		_TypedGenericParameterInit = 866,
		_TypedGenericParameterVariablePart = 870,
		_TypedGenericParameter = 875,
		_GenericParameter = 885,
		_GenericHeader = 896,
		_CatchParameterVariablePart = 902,
		_CatchParameter = 905,
		_ExprOrVarCondition = 916,
		_ForEachParameter = 935,
		_MultiVarsDeclVariablePart = 945,
		_MultiVarsDeclWithoutKeyword = 950,
		_MultiVarsDecl = 960,
		_UntypedFuncForwardDeclVariablePart = 971,
		_UntypedFuncForwardDeclWithoutKeyword = 974,
		_MultiVarsOrFuncForwardDeclWithoutKeyword = 977,
		_MultiVarsOrFuncForwardDecl = 988,
		_MultiVarsOrTypedFuncDeclVariablePart = 1000,
		_MultiVarsOrTypedFuncDeclWithoutKeyword = 1009,
		_UntypedFuncDeclVariablePart = 1019,
		_UntypedFuncDeclWithoutKeyword = 1024,
		_MultiVarsOrFuncDeclWithoutKeyword = 1027,
		_MultiVarsOrFuncDecl = 1038,
		_ClassInheritanceFirst = 1050,
		_ClassInheritanceSecond = 1063,
		_ClassMemberPartFirst = 1076,
		_ClassMemberPartSecond = 1096,
		_ClassBody = 1107,
		_ClassDeclPrefix = 1116,
		_ClassDecl = 1124,
		_ClassForwardDecl = 1129,
		_StaticAssertDecl = 1133,
		_TypedefCompatibleDecl = 1141,
		_TypedefDecl = 1153,
		_ExternDeclNeedSemicolon = 1157,
		_ExternDeclRejectSemicolon = 1162,
		_NsName = 1172,
		_NsDecl = 1175,
		_UsingNsDecl = 1183,
		_UsingValueDecl = 1190,
		_UsingTypeDecl = 1194,
		_EnumItem = 1200,
		_EnumBody = 1205,
		_EnumDecl = 1214,
		_EnumForwardDecl = 1227,
		_DeclSharedWithoutSemicolon = 1238,
		_DeclNeedSemicolon = 1249,
		_DeclRejectSemicolon = 1263,
		_ExprStat = 1278,
		_BlockStat = 1304,
		_TryStatCatchPart = 1309,
		_TryStat = 1317,
		___TryStat = 1323,
		_IfStatConditionPart = 1334,
		_IfStat = 1356,
		_ForStatConditionPart = 1364,
		_ForStat = 1385,
		_OtherStats = 1392,
		_Stat = 1434,
		_Type = 1466,
		_Expr_NoComma = 1477,
		_Expr = 1494,
		_Expr_Argument = 1512,
		_TypeOrExpr_NoComma_NoGT = 1530,
		_TypeOrExpr = 1548,
		_File = 1567,
		_BExpr5_SWITCH_COMBINED = 1587,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1603,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1614,
		_BExpr_SWITCH_1allow_GT = 1625,
		_BExpr10_SWITCH_0allow_GT = 1643,
		_BExpr10_SWITCH_1allow_GT = 1659,
		_BExpr11_SWITCH_0allow_GT = 1675,
		_BExpr11_SWITCH_1allow_GT = 1691,
		_BExpr5_SWITCH_0allow_GT = 1707,
		_BExpr5_SWITCH_1allow_GT = 1723,
		_BExpr6_SWITCH_0allow_GT = 1739,
		_BExpr6_SWITCH_1allow_GT = 1755,
		_BExpr7_SWITCH_0allow_GT = 1771,
		_BExpr7_SWITCH_1allow_GT = 1787,
		_BExpr8_SWITCH_0allow_GT = 1803,
		_BExpr8_SWITCH_1allow_GT = 1819,
		_BExpr9_SWITCH_0allow_GT = 1835,
		_BExpr9_SWITCH_1allow_GT = 1851,
		_BExpr_NoComma_SWITCH_0allow_GT = 1867,
		_BExpr_NoComma_SWITCH_1allow_GT = 1884,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1901,
		_Expr_Raw_SWITCH_1allow_GT = 1918,
		_ThrowExpr_SWITCH_1allow_GT = 1936,
		_ThrowExpr_SWITCH_0allow_GT = 1940,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1944,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1962,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1981,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1988,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1991,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1994,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1997,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 2001,
		_FunctionParameter_LRI_Isolated_2 = 2005,
		_GenericParameter_LRI_Isolated_0 = 2011,
		_CatchParameter_LRI_Isolated_2 = 2014,
		_ExprOrVarCondition_LRI_Isolated_2 = 2020,
		_MultiVarsDecl_LRI_Isolated_1 = 2026,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 2031,
		_MultiVarsOrFuncForwardDecl_LRI_Isolated_1 = 2034,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 2039,
		_MultiVarsOrFuncDecl_LRI_Isolated_1 = 2042,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2047,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2050,
		_DeclNeedSemicolon_LRI_Isolated_0 = 2053,
		_DeclNeedSemicolon_LRI_Isolated_2 = 2056,
		_DeclRejectSemicolon_LRI_Isolated_0 = 2059,
		_DeclRejectSemicolon_LRI_Isolated_2 = 2063,
		_DeclRejectSemicolon_LRI_Isolated_3 = 2066,
		_ForStatConditionPart_LRI_Isolated_0 = 2069,
		_Stat_LRI_Isolated_1 = 2075,
		_Stat_LRI_Isolated_2 = 2078,
		_Stat_LRI_Isolated_3 = 2081,
		_Stat_LRI_Isolated_4 = 2084,
		_Stat_LRI_Isolated_5 = 2087,
		_Stat_LRI_Isolated_6 = 2090,
		_Type_LRI_Isolated_2 = 2093,
		_GenericArgument_LRI_Original = 2099,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2104,
		_PostfixUnaryExpr_LRI_Original = 2109,
		_PrefixUnaryExpr_LRI_Original = 2143,
		_BExpr0_LRI_Original = 2148,
		_BExpr1_LRI_Original = 2157,
		_BExpr2_LRI_Original = 2169,
		_BExpr3_LRI_Original = 2178,
		_BExpr4_LRI_Original = 2189,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2195,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2198,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2212,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2229,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2238,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2247,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2253,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2259,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2265,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2271,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2277,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2283,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2289,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2295,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2301,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2307,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2354,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2401,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2407,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2410,
		_PM_PrimitiveType_LRI_Original = 2413,
		_PM_QualifiedName_LRI_Original = 2417,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2421,
		_ShortTypeBeforeDeclarator_LRI_Original = 2427,
		_CallConstructibleType_LRI_Original = 2431,
		_TypeBeforeDeclarator_LRI_Original = 2442,
		_FunctionParameter_LRI_Original = 2449,
		_TypedGenericParameter_LRI_Original = 2456,
		_GenericParameter_LRI_Original = 2461,
		_CatchParameter_LRI_Original = 2466,
		_ExprOrVarCondition_LRI_Original = 2473,
		_ForEachParameter_LRI_Original = 2480,
		_MultiVarsDeclWithoutKeyword_LRI_Original = 2484,
		_MultiVarsDecl_LRI_Original = 2488,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2493,
		_MultiVarsOrFuncForwardDecl_LRI_Original = 2498,
		_MultiVarsOrTypedFuncDeclWithoutKeyword_LRI_Original = 2503,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Original = 2507,
		_MultiVarsOrFuncDecl_LRI_Original = 2512,
		_ClassMemberPartFirst_LRI_Original = 2517,
		_TypedefCompatibleDecl_LRI_Original = 2521,
		_DeclNeedSemicolon_LRI_Original = 2527,
		_DeclRejectSemicolon_LRI_Original = 2533,
		_ExprStat_LRI_Original = 2540,
		_IfStatConditionPart_LRI_Original = 2546,
		_ForStatConditionPart_LRI_Original = 2554,
		_Stat_LRI_Original = 2571,
		_Type_LRI_Original = 2581,
		_Expr_NoComma_LRI_Original = 2588,
		_Expr_LRI_Original = 2591,
		_Expr_Argument_LRI_Original = 2594,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2599,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2602,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2606,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2609,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2613,
		_TypeOrExpr_LRI_Original = 2616,
		_File_LRI_Original = 2619,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif