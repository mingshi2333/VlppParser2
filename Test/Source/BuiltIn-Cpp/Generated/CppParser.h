/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewInit = 275,
		_NewPrefix = 291,
		_NewExpr = 296,
		_DeletePrefix = 305,
		_DeleteExpr = 310,
		_SizeOfPrefix = 318,
		_SizeofExpr = 322,
		_AllPrefixUnaryExpr_NoCStyleCast = 332,
		_AllPrefixUnaryExpr = 353,
		_PrefixUnaryExpr = 360,
		_MemberOperatorIdentifier = 377,
		_MemberOperatorQualifiedName = 382,
		_BExpr0 = 386,
		_BExpr1 = 404,
		_BExpr2 = 422,
		_BExpr3 = 440,
		_PrimitiveTypeLiteral = 458,
		_PrimitiveType = 476,
		_PM_PrimitiveType = 491,
		_PM_QualifiedName = 494,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 497,
		_ShortTypeBeforeDeclarator = 502,
		_TypeStartsWithKeywordBeforeDeclarator = 508,
		_TypeBeforeDeclarator = 516,
		_AdvancedTypeNoCVNoMember = 526,
		_AdvancedTypeCV = 539,
		_AdvancedTypeNoMember = 543,
		_AdvancedTypeMember = 547,
		_DeclaratorKeyword = 551,
		_DeclaratorAKFirst = 571,
		_DeclaratorAKFollow = 575,
		_DeclaratorAKCV = 579,
		_DeclaratorAKMember = 582,
		_DeclaratorFunctionParameter = 585,
		_DeclaratorFunctionParameters = 596,
		_FunctionKeyword = 608,
		_DeclaratorFunctionPart = 634,
		_DeclaratorArrayPart = 640,
		_DeclaratorId = 645,
		_DeclaratorBeforeInner = 649,
		_DeclaratorAfterInner = 656,
		_InnerDeclaratorWithoutName = 661,
		_InnerDeclaratorInnerOptionalName = 665,
		_InnerDeclaratorInnerRequiredName = 669,
		_DeclaratorInnerWithoutName = 673,
		_DeclaratorInnerOptionalName = 678,
		_DeclaratorInnerRequiredName = 686,
		_DeclaratorWithoutName = 694,
		_DeclaratorOptionalName = 702,
		_DeclaratorRequiredName = 710,
		_ExprStat = 717,
		_OtherStats = 737,
		_Stat = 772,
		_TypeStartsWithKeyword = 793,
		_Type = 802,
		_Expr_NoComma = 813,
		_Expr = 832,
		_Expr_Argument = 852,
		_TypeOrExpr_NoComma_NoGT = 872,
		_TypeOrExpr = 891,
		_DeclVar = 911,
		_DeclVarOrExpr = 922,
		_File = 943,
		_BExpr4_SWITCH_COMBINED = 946,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 964,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 975,
		_BExpr_SWITCH_1allow_GT = 986,
		_BExpr10_SWITCH_0allow_GT = 1006,
		_BExpr10_SWITCH_1allow_GT = 1024,
		_BExpr4_SWITCH_0allow_GT = 1042,
		_BExpr4_SWITCH_1allow_GT = 1060,
		_BExpr5_SWITCH_0allow_GT = 1078,
		_BExpr5_SWITCH_1allow_GT = 1096,
		_BExpr6_SWITCH_0allow_GT = 1114,
		_BExpr6_SWITCH_1allow_GT = 1132,
		_BExpr7_SWITCH_0allow_GT = 1150,
		_BExpr7_SWITCH_1allow_GT = 1168,
		_BExpr8_SWITCH_0allow_GT = 1186,
		_BExpr8_SWITCH_1allow_GT = 1204,
		_BExpr9_SWITCH_0allow_GT = 1222,
		_BExpr9_SWITCH_1allow_GT = 1240,
		_BExpr_NoComma_SWITCH_0allow_GT = 1258,
		_BExpr_NoComma_SWITCH_1allow_GT = 1277,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1296,
		_Expr_Raw_SWITCH_1allow_GT = 1315,
		_ThrowExpr_SWITCH_1allow_GT = 1335,
		_ThrowExpr_SWITCH_0allow_GT = 1339,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1343,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1362,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1382,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1385,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1388,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1391,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1395,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1399,
		_Stat_LRI_Isolated_1 = 1407,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1410,
		_Type_LRI_Isolated_2 = 1416,
		_DeclVar_LRI_Isolated_1 = 1422,
		_GenericArgument_LRI_Original = 1428,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1433,
		_PostfixUnaryExpr_LRI_Original = 1438,
		_PrefixUnaryExpr_LRI_Original = 1470,
		_BExpr0_LRI_Original = 1475,
		_BExpr1_LRI_Original = 1484,
		_BExpr2_LRI_Original = 1496,
		_BExpr3_LRI_Original = 1505,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1514,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1517,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1529,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1544,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1553,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1562,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1568,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1574,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1580,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1586,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1592,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1598,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1604,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1610,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1616,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1622,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1665,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1708,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1714,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1717,
		_PM_PrimitiveType_LRI_Original = 1720,
		_PM_QualifiedName_LRI_Original = 1724,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1728,
		_ShortTypeBeforeDeclarator_LRI_Original = 1734,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1738,
		_TypeBeforeDeclarator_LRI_Original = 1745,
		_DeclaratorFunctionParameter_LRI_Original = 1752,
		_ExprStat_LRI_Original = 1764,
		_Stat_LRI_Original = 1768,
		_TypeStartsWithKeyword_LRI_Original = 1773,
		_Type_LRI_Original = 1780,
		_Expr_NoComma_LRI_Original = 1787,
		_Expr_LRI_Original = 1790,
		_Expr_Argument_LRI_Original = 1793,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1798,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1801,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1805,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1808,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1812,
		_TypeOrExpr_LRI_Original = 1815,
		_DeclVar_LRI_Original = 1818,
		_DeclVarOrExpr_LRI_Original = 1824,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_DeclVarOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_DeclVarOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif