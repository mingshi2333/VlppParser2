/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 119,
		_GenericArgument = 124,
		_GenericArguments = 144,
		_QualifiedNameFragment = 150,
		_MemberQualifiedNameFragment = 157,
		_QualifiedName = 160,
		_StringLiteralFragment = 176,
		_LambdaCaptureId = 180,
		_LambdaCapture = 190,
		_LambdaExpr = 200,
		_PrimitiveExpr = 209,
		_QualifiedName_PrimitiveExpr = 287,
		_PostfixUnaryExpr = 291,
		_NewPrefix = 307,
		_NewExpr = 312,
		_DeletePrefix = 324,
		_DeleteExpr = 329,
		_SizeOfPrefix = 337,
		_SizeofExpr = 341,
		_AllPrefixUnaryExpr_NoCStyleCast = 351,
		_AllPrefixUnaryExpr = 372,
		_PrefixUnaryExpr = 379,
		_MemberOperatorIdentifier = 396,
		_MemberOperatorQualifiedName = 401,
		_BExpr0 = 405,
		_BExpr1 = 423,
		_BExpr2 = 441,
		_BExpr3 = 459,
		_PrimitiveTypeLiteral = 477,
		_PrimitiveType = 495,
		_PM_PrimitiveType = 510,
		_PM_QualifiedName = 513,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 516,
		_ShortTypeBeforeDeclarator = 521,
		_TypeStartsWithKeywordBeforeDeclarator = 527,
		_TypeBeforeDeclarator = 535,
		_AdvancedTypeNoCVNoMember = 545,
		_AdvancedTypeCV = 558,
		_AdvancedTypeNoMember = 562,
		_AdvancedTypeMember = 566,
		_DeclaratorKeyword = 570,
		_DeclaratorAKFirst = 590,
		_DeclaratorAKFollow = 594,
		_DeclaratorAKCV = 598,
		_DeclaratorAKMember = 601,
		_DeclaratorFunctionParameters = 604,
		_FunctionKeyword = 616,
		_DeclaratorFunctionPart = 642,
		_DeclaratorFunctionPartOptionalParameters = 648,
		_DeclaratorArrayPart = 657,
		_DeclaratorId = 662,
		_DeclaratorBeforeInner = 666,
		_DeclaratorAfterInner = 673,
		_InnerDeclaratorWithoutName = 678,
		_InnerDeclaratorInnerOptionalName = 682,
		_InnerDeclaratorInnerRequiredName = 686,
		_DeclaratorInnerWithoutName = 690,
		_DeclaratorInnerOptionalName = 695,
		_DeclaratorInnerRequiredName = 703,
		_DeclaratorWithoutName = 711,
		_DeclaratorOptionalName = 719,
		_DeclaratorRequiredName = 727,
		_VarValueInit = 734,
		_VarNewParanInit = 738,
		_VarVarParanInit = 744,
		_VarBraceInit = 751,
		_VarCtorInit = 757,
		_VarInit = 761,
		_DeclaratorVariablePartWithoutInit = 766,
		_DeclaratorVariablePartOptionalInit = 769,
		_DeclaratorVariablePartRequiredInit = 773,
		_VarWithoutInit = 777,
		_VarRequiredInit = 787,
		_FunctionParameterVariablePart = 797,
		_FunctionParameter = 802,
		_CatchParameterVariablePart = 813,
		_CatchParameter = 816,
		_ExprOrVarWithInit = 827,
		_GenericParameterKeyword = 848,
		_OrdinaryGenericParameter = 855,
		_TypedGenericParameterInit = 862,
		_TypedGenericParameterVariablePart = 866,
		_TypedGenericParameter = 871,
		_GenericParameter = 881,
		_GenericHeader = 892,
		_VarsDeclWithoutKeyword = 897,
		_VarsDecl = 907,
		_Decl = 918,
		_ExprStat = 929,
		_BlockStat = 951,
		_TryStatCatchPart = 956,
		_TryStat = 964,
		___TryStat = 970,
		_IfStatConditionPart = 981,
		_IfStat = 1005,
		_ForStatConditionPart = 1013,
		_ForStat = 1036,
		_OtherStats = 1043,
		_Stat = 1092,
		_TypeStartsWithKeyword = 1120,
		_Type = 1129,
		_Expr_NoComma = 1140,
		_Expr = 1159,
		_Expr_Argument = 1179,
		_TypeOrExpr_NoComma_NoGT = 1199,
		_TypeOrExpr = 1218,
		_File = 1238,
		_BExpr4_SWITCH_COMBINED = 1241,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1259,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1270,
		_BExpr_SWITCH_1allow_GT = 1281,
		_BExpr10_SWITCH_0allow_GT = 1301,
		_BExpr10_SWITCH_1allow_GT = 1319,
		_BExpr4_SWITCH_0allow_GT = 1337,
		_BExpr4_SWITCH_1allow_GT = 1355,
		_BExpr5_SWITCH_0allow_GT = 1373,
		_BExpr5_SWITCH_1allow_GT = 1391,
		_BExpr6_SWITCH_0allow_GT = 1409,
		_BExpr6_SWITCH_1allow_GT = 1427,
		_BExpr7_SWITCH_0allow_GT = 1445,
		_BExpr7_SWITCH_1allow_GT = 1463,
		_BExpr8_SWITCH_0allow_GT = 1481,
		_BExpr8_SWITCH_1allow_GT = 1499,
		_BExpr9_SWITCH_0allow_GT = 1517,
		_BExpr9_SWITCH_1allow_GT = 1535,
		_BExpr_NoComma_SWITCH_0allow_GT = 1553,
		_BExpr_NoComma_SWITCH_1allow_GT = 1572,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1591,
		_Expr_Raw_SWITCH_1allow_GT = 1610,
		_ThrowExpr_SWITCH_1allow_GT = 1630,
		_ThrowExpr_SWITCH_0allow_GT = 1634,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1638,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1657,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1677,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1680,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1683,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1686,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1690,
		_FunctionParameter_LRI_Isolated_2 = 1694,
		_CatchParameter_LRI_Isolated_2 = 1700,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1706,
		_GenericParameter_LRI_Isolated_0 = 1712,
		_VarsDecl_LRI_Isolated_1 = 1715,
		_ForStatConditionPart_LRI_Isolated_0 = 1720,
		_Stat_LRI_Isolated_1 = 1726,
		_Stat_LRI_Isolated_2 = 1729,
		_Stat_LRI_Isolated_3 = 1732,
		_Stat_LRI_Isolated_4 = 1735,
		_Stat_LRI_Isolated_5 = 1738,
		_Stat_LRI_Isolated_6 = 1741,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1744,
		_Type_LRI_Isolated_2 = 1750,
		_GenericArgument_LRI_Original = 1756,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1761,
		_PostfixUnaryExpr_LRI_Original = 1766,
		_PrefixUnaryExpr_LRI_Original = 1798,
		_BExpr0_LRI_Original = 1803,
		_BExpr1_LRI_Original = 1812,
		_BExpr2_LRI_Original = 1824,
		_BExpr3_LRI_Original = 1833,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1842,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1845,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1857,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1872,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1881,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1890,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1896,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1902,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1908,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1914,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1920,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1926,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1932,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1938,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1944,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1950,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1993,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2036,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2042,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2045,
		_PM_PrimitiveType_LRI_Original = 2048,
		_PM_QualifiedName_LRI_Original = 2052,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2056,
		_ShortTypeBeforeDeclarator_LRI_Original = 2062,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2066,
		_TypeBeforeDeclarator_LRI_Original = 2073,
		_VarWithoutInit_LRI_Original = 2080,
		_VarRequiredInit_LRI_Original = 2084,
		_FunctionParameter_LRI_Original = 2088,
		_CatchParameter_LRI_Original = 2095,
		_ExprOrVarWithInit_LRI_Original = 2102,
		_TypedGenericParameter_LRI_Original = 2109,
		_GenericParameter_LRI_Original = 2114,
		_VarsDeclWithoutKeyword_LRI_Original = 2119,
		_VarsDecl_LRI_Original = 2125,
		_Decl_LRI_Original = 2130,
		_ExprStat_LRI_Original = 2133,
		_IfStatConditionPart_LRI_Original = 2139,
		_ForStatConditionPart_LRI_Original = 2147,
		_Stat_LRI_Original = 2164,
		_TypeStartsWithKeyword_LRI_Original = 2174,
		_Type_LRI_Original = 2181,
		_Expr_NoComma_LRI_Original = 2188,
		_Expr_LRI_Original = 2191,
		_Expr_Argument_LRI_Original = 2194,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2199,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2202,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2206,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2209,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2213,
		_TypeOrExpr_LRI_Original = 2216,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif