/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_AdvancedTypeNoCVNoMember = 579,
		_AdvancedTypeCV = 592,
		_AdvancedTypeNoMember = 596,
		_AdvancedTypeMember = 600,
		_DeclarationKeywordWithoutFriend = 604,
		_DeclarationKeyword = 608,
		_DeclaratorKeyword = 612,
		_DeclaratorAKFirst = 631,
		_DeclaratorAKFollow = 635,
		_DeclaratorAKCV = 639,
		_DeclaratorAKMember = 642,
		_DeclaratorAKCtorDtor = 645,
		_DeclaratorFunctionParameters = 648,
		_FunctionKeyword = 660,
		_DeclaratorFunctionPart = 686,
		_DeclaratorFunctionPartOptionalParameters = 693,
		_DeclaratorArrayPart = 702,
		_DeclaratorId = 707,
		_DeclaratorUntypedFuncId = 711,
		_DeclaratorBeforeInner = 716,
		_DeclaratorAfterInner = 723,
		_InnerDeclaratorWithoutName = 728,
		_InnerDeclaratorInnerOptionalName = 732,
		_InnerDeclaratorInnerRequiredName = 736,
		_DeclaratorInnerWithoutName = 740,
		_DeclaratorInnerOptionalName = 745,
		_DeclaratorInnerRequiredName = 757,
		_DeclaratorWithoutName = 769,
		_DeclaratorOptionalName = 777,
		_DeclaratorRequiredName = 785,
		_DeclaratorUntypedFuncWithoutKeyword = 792,
		_VarValueInit = 797,
		_VarNewParanInit = 801,
		_VarVarParanInit = 807,
		_VarBraceInit = 814,
		_VarCtorInit = 820,
		_VarInit = 824,
		_VarStatInitItemFirst = 829,
		_VarStatInitItemSecond = 834,
		_VarStatInit = 839,
		_DeclaratorVariablePartWithoutInit = 844,
		_DeclaratorVariablePartOptionalInit = 847,
		_DeclaratorVariablePartRequiredInit = 851,
		_FunctionParameterVariablePart = 855,
		_FunctionParameter = 860,
		_GenericParameterKeyword = 871,
		_OrdinaryGenericParameter = 878,
		_TypedGenericParameterInit = 885,
		_TypedGenericParameterVariablePart = 889,
		_TypedGenericParameter = 894,
		_GenericParameter = 904,
		_GenericHeader = 915,
		_CatchParameterVariablePart = 921,
		_CatchParameter = 924,
		_ExprOrVarCondition = 935,
		_ForEachParameter = 954,
		_MultiTypedefVarDeclVariablePart = 964,
		_MultiTypedefVarsDeclWithoutKeyword = 969,
		_MultiVarsDeclVariablePart = 979,
		_MultiVarsDeclWithoutKeyword = 984,
		_MultiVarsDecl = 994,
		_UntypedFuncForwardDeclVariablePart = 1005,
		_UntypedFuncForwardDeclWithoutKeyword = 1008,
		_MultiVarsOrFuncForwardDeclWithoutKeyword = 1011,
		_MultiVarsOrFuncForwardDecl = 1022,
		_MultiVarsOrTypedFuncDeclVariablePart = 1034,
		_MultiVarsOrTypedFuncDeclWithoutKeyword = 1043,
		_UntypedFuncDeclVariablePart = 1053,
		_UntypedFuncDeclWithoutKeyword = 1058,
		_MultiVarsOrFuncDeclWithoutKeyword = 1061,
		_MultiVarsOrFuncDecl = 1072,
		_ClassInheritanceFirst = 1084,
		_ClassInheritanceSecond = 1097,
		_ClassMemberPartFirst = 1110,
		_ClassMemberPartSecond = 1130,
		_ClassBody = 1141,
		_ClassDeclPrefix = 1150,
		_ClassDecl = 1155,
		_ClassForwardDecl = 1160,
		_StaticAssertDecl = 1164,
		_TypedefCompatibleDecl = 1172,
		_TypedefDecl = 1184,
		_ExternDeclRejectSemicolon = 1188,
		_NsName = 1195,
		_NsDecl = 1198,
		_UsingNsDecl = 1206,
		_UsingValueDecl = 1213,
		_UsingTypeDecl = 1217,
		_FriendTypeDecl = 1223,
		_EnumItem = 1227,
		_EnumBody = 1232,
		_EnumDecl = 1241,
		_EnumForwardDecl = 1254,
		_DeclSharedWithoutSemicolonAcceptKeyword = 1265,
		_DeclSharedWithoutSemicolonAcceptKeywordButFriend = 1274,
		_DeclSharedWithoutSemicolon = 1278,
		_DeclNeedSemicolon = 1286,
		_DeclRejectSemicolon = 1299,
		_ExprStat = 1314,
		_BlockStat = 1338,
		_TryStatCatchPart = 1343,
		_TryStat = 1351,
		___TryStat = 1357,
		_IfStatConditionPart = 1368,
		_IfStat = 1390,
		_ForStatConditionPart = 1398,
		_ForStat = 1419,
		_OtherStats = 1426,
		_Stat = 1468,
		_Type = 1498,
		_Expr_NoComma = 1509,
		_Expr = 1526,
		_Expr_Argument = 1544,
		_TypeOrExpr_NoComma_NoGT = 1562,
		_TypeOrExpr = 1580,
		_File = 1599,
		_BExpr5_SWITCH_COMBINED = 1619,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1635,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1646,
		_BExpr_SWITCH_1allow_GT = 1657,
		_BExpr10_SWITCH_0allow_GT = 1675,
		_BExpr10_SWITCH_1allow_GT = 1691,
		_BExpr11_SWITCH_0allow_GT = 1707,
		_BExpr11_SWITCH_1allow_GT = 1723,
		_BExpr5_SWITCH_0allow_GT = 1739,
		_BExpr5_SWITCH_1allow_GT = 1755,
		_BExpr6_SWITCH_0allow_GT = 1771,
		_BExpr6_SWITCH_1allow_GT = 1787,
		_BExpr7_SWITCH_0allow_GT = 1803,
		_BExpr7_SWITCH_1allow_GT = 1819,
		_BExpr8_SWITCH_0allow_GT = 1835,
		_BExpr8_SWITCH_1allow_GT = 1851,
		_BExpr9_SWITCH_0allow_GT = 1867,
		_BExpr9_SWITCH_1allow_GT = 1883,
		_BExpr_NoComma_SWITCH_0allow_GT = 1899,
		_BExpr_NoComma_SWITCH_1allow_GT = 1916,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1933,
		_Expr_Raw_SWITCH_1allow_GT = 1950,
		_ThrowExpr_SWITCH_1allow_GT = 1968,
		_ThrowExpr_SWITCH_0allow_GT = 1972,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1976,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1994,
		_PostfixUnaryExpr_LRI_Isolated_1 = 2013,
		_PrefixUnaryExpr_LRI_Isolated_1 = 2020,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 2023,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 2026,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 2029,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 2033,
		_FunctionParameter_LRI_Isolated_2 = 2037,
		_GenericParameter_LRI_Isolated_0 = 2043,
		_CatchParameter_LRI_Isolated_2 = 2046,
		_ExprOrVarCondition_LRI_Isolated_2 = 2052,
		_MultiVarsDecl_LRI_Isolated_1 = 2058,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 2063,
		_MultiVarsOrFuncForwardDecl_LRI_Isolated_1 = 2066,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 2071,
		_MultiVarsOrFuncDecl_LRI_Isolated_1 = 2074,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2079,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2082,
		_DeclNeedSemicolon_LRI_Isolated_0 = 2085,
		_DeclRejectSemicolon_LRI_Isolated_0 = 2088,
		_DeclRejectSemicolon_LRI_Isolated_1 = 2092,
		_DeclRejectSemicolon_LRI_Isolated_3 = 2095,
		_ForStatConditionPart_LRI_Isolated_0 = 2098,
		_Stat_LRI_Isolated_1 = 2104,
		_Stat_LRI_Isolated_2 = 2107,
		_Stat_LRI_Isolated_3 = 2110,
		_Stat_LRI_Isolated_4 = 2113,
		_Stat_LRI_Isolated_5 = 2116,
		_Stat_LRI_Isolated_6 = 2119,
		_Type_LRI_Isolated_2 = 2122,
		_GenericArgument_LRI_Original = 2128,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2133,
		_PostfixUnaryExpr_LRI_Original = 2138,
		_PrefixUnaryExpr_LRI_Original = 2172,
		_BExpr0_LRI_Original = 2177,
		_BExpr1_LRI_Original = 2186,
		_BExpr2_LRI_Original = 2198,
		_BExpr3_LRI_Original = 2207,
		_BExpr4_LRI_Original = 2218,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2224,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2227,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2241,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2258,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2267,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2276,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2282,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2288,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2294,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2300,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2306,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2312,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2318,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2324,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2330,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2336,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2383,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2430,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2436,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2439,
		_PM_PrimitiveType_LRI_Original = 2442,
		_PM_QualifiedName_LRI_Original = 2446,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2450,
		_ShortTypeBeforeDeclarator_LRI_Original = 2456,
		_CallConstructibleType_LRI_Original = 2460,
		_TypeBeforeDeclarator_LRI_Original = 2471,
		_FunctionParameter_LRI_Original = 2478,
		_TypedGenericParameter_LRI_Original = 2485,
		_GenericParameter_LRI_Original = 2490,
		_CatchParameter_LRI_Original = 2495,
		_ExprOrVarCondition_LRI_Original = 2502,
		_ForEachParameter_LRI_Original = 2509,
		_MultiTypedefVarsDeclWithoutKeyword_LRI_Original = 2513,
		_MultiVarsDeclWithoutKeyword_LRI_Original = 2517,
		_MultiVarsDecl_LRI_Original = 2521,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2526,
		_MultiVarsOrFuncForwardDecl_LRI_Original = 2531,
		_MultiVarsOrTypedFuncDeclWithoutKeyword_LRI_Original = 2536,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Original = 2540,
		_MultiVarsOrFuncDecl_LRI_Original = 2545,
		_ClassMemberPartFirst_LRI_Original = 2550,
		_TypedefCompatibleDecl_LRI_Original = 2554,
		_DeclNeedSemicolon_LRI_Original = 2560,
		_DeclRejectSemicolon_LRI_Original = 2565,
		_ExprStat_LRI_Original = 2572,
		_IfStatConditionPart_LRI_Original = 2578,
		_ForStatConditionPart_LRI_Original = 2586,
		_Stat_LRI_Original = 2603,
		_Type_LRI_Original = 2613,
		_Expr_NoComma_LRI_Original = 2620,
		_Expr_LRI_Original = 2623,
		_Expr_Argument_LRI_Original = 2626,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2631,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2634,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2638,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2641,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2645,
		_TypeOrExpr_LRI_Original = 2648,
		_File_LRI_Original = 2651,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif