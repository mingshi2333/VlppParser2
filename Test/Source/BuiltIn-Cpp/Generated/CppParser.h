/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 131,
		_GenericArgument = 136,
		_GenericArguments = 156,
		_QualifiedNameFragment = 162,
		_MemberQualifiedNameFragment = 169,
		_SingleLevelQualifiedName = 172,
		_NextLevelQualifiedName = 182,
		_QualifiedName = 188,
		_QualifiedNameAfterTypename = 193,
		_StringLiteralFragment = 199,
		_LambdaCaptureId = 203,
		_LambdaCapture = 213,
		_LambdaExpr = 223,
		_PrimitiveExpr = 232,
		_QualifiedName_PrimitiveExpr = 310,
		_PostfixUnaryExpr = 314,
		_NewPrefix = 328,
		_NewExpr = 333,
		_DeletePrefix = 345,
		_DeleteExpr = 350,
		_SizeOfPrefix = 358,
		_SizeofExpr = 362,
		_AllPrefixUnaryExpr_NoCStyleCast = 372,
		_AllPrefixUnaryExpr = 393,
		_PrefixUnaryExpr = 400,
		_MemberOperatorIdentifier = 415,
		_MemberOperatorQualifiedName = 420,
		_BExpr0 = 424,
		_BExpr1 = 440,
		_BExpr2 = 456,
		_BExpr3 = 472,
		_BExpr4 = 488,
		_PrimitiveTypeLiteral = 504,
		_PrimitiveType = 522,
		_PM_PrimitiveType = 537,
		_PM_QualifiedName = 540,
		_CallConstructibleTypeBeforeDeclarator = 543,
		_ShortTypeBeforeDeclarator = 548,
		_CallConstructibleType = 554,
		_TypeBeforeDeclarator = 564,
		_AdvancedTypeNoCVNoMember = 574,
		_AdvancedTypeCV = 587,
		_AdvancedTypeNoMember = 591,
		_AdvancedTypeMember = 595,
		_DeclaratorKeyword = 599,
		_DeclaratorAKFirst = 619,
		_DeclaratorAKFollow = 623,
		_DeclaratorAKCV = 627,
		_DeclaratorAKMember = 630,
		_DeclaratorFunctionParameters = 633,
		_FunctionKeyword = 645,
		_DeclaratorFunctionPart = 671,
		_DeclaratorFunctionPartOptionalParameters = 677,
		_DeclaratorArrayPart = 686,
		_DeclaratorId = 691,
		_DeclaratorBeforeInner = 695,
		_DeclaratorAfterInner = 702,
		_InnerDeclaratorWithoutName = 707,
		_InnerDeclaratorInnerOptionalName = 711,
		_InnerDeclaratorInnerRequiredName = 715,
		_DeclaratorInnerWithoutName = 719,
		_DeclaratorInnerOptionalName = 724,
		_DeclaratorInnerRequiredName = 736,
		_DeclaratorWithoutName = 748,
		_DeclaratorOptionalName = 756,
		_DeclaratorRequiredName = 764,
		_VarValueInit = 771,
		_VarNewParanInit = 775,
		_VarVarParanInit = 781,
		_VarBraceInit = 788,
		_VarCtorInit = 794,
		_VarInit = 798,
		_DeclaratorVariablePartWithoutInit = 803,
		_DeclaratorVariablePartOptionalInit = 806,
		_DeclaratorVariablePartRequiredInit = 810,
		_VarWithoutInit = 814,
		_VarRequiredInit = 824,
		_FunctionParameterVariablePart = 834,
		_FunctionParameter = 839,
		_CatchParameterVariablePart = 850,
		_CatchParameter = 853,
		_ExprOrVarWithInit = 864,
		_GenericParameterKeyword = 883,
		_OrdinaryGenericParameter = 890,
		_TypedGenericParameterInit = 897,
		_TypedGenericParameterVariablePart = 901,
		_TypedGenericParameter = 906,
		_GenericParameter = 916,
		_GenericHeader = 927,
		_VarsDeclWithoutKeyword = 933,
		_VarsDecl = 943,
		_ClassInheritanceFirst = 954,
		_ClassInheritanceSecond = 967,
		_ClassMemberPartFirst = 980,
		_ClassMemberPartSecond = 1008,
		_ClassBody = 1019,
		_ClassDeclPrefix = 1029,
		_ClassDecl = 1037,
		_ClassDeclForwardDecl = 1042,
		_StaticAssertDecl = 1046,
		_TypedefCompatibleDecl = 1054,
		_TypedefDecl = 1066,
		_ExternDecl = 1070,
		_NsName = 1077,
		_NsDecl = 1080,
		_EnumItem = 1088,
		_EnumBody = 1093,
		_EnumDecl = 1101,
		_EnumDeclForwardDecl = 1107,
		_Decl = 1112,
		_DeclWithSemicolon = 1129,
		_ExprStat = 1155,
		_BlockStat = 1187,
		_TryStatCatchPart = 1192,
		_TryStat = 1200,
		___TryStat = 1206,
		_IfStatConditionPart = 1217,
		_IfStat = 1239,
		_ForStatConditionPart = 1247,
		_ForStat = 1268,
		_OtherStats = 1275,
		_Stat = 1317,
		_Type = 1355,
		_Expr_NoComma = 1366,
		_Expr = 1383,
		_Expr_Argument = 1401,
		_TypeOrExpr_NoComma_NoGT = 1419,
		_TypeOrExpr = 1437,
		_File = 1456,
		_BExpr5_SWITCH_COMBINED = 1484,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1500,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1511,
		_BExpr_SWITCH_1allow_GT = 1522,
		_BExpr10_SWITCH_0allow_GT = 1540,
		_BExpr10_SWITCH_1allow_GT = 1556,
		_BExpr11_SWITCH_0allow_GT = 1572,
		_BExpr11_SWITCH_1allow_GT = 1588,
		_BExpr5_SWITCH_0allow_GT = 1604,
		_BExpr5_SWITCH_1allow_GT = 1620,
		_BExpr6_SWITCH_0allow_GT = 1636,
		_BExpr6_SWITCH_1allow_GT = 1652,
		_BExpr7_SWITCH_0allow_GT = 1668,
		_BExpr7_SWITCH_1allow_GT = 1684,
		_BExpr8_SWITCH_0allow_GT = 1700,
		_BExpr8_SWITCH_1allow_GT = 1716,
		_BExpr9_SWITCH_0allow_GT = 1732,
		_BExpr9_SWITCH_1allow_GT = 1748,
		_BExpr_NoComma_SWITCH_0allow_GT = 1764,
		_BExpr_NoComma_SWITCH_1allow_GT = 1781,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1798,
		_Expr_Raw_SWITCH_1allow_GT = 1815,
		_ThrowExpr_SWITCH_1allow_GT = 1833,
		_ThrowExpr_SWITCH_0allow_GT = 1837,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1841,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1859,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1878,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1885,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1888,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1891,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1894,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1898,
		_FunctionParameter_LRI_Isolated_2 = 1902,
		_CatchParameter_LRI_Isolated_2 = 1908,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1914,
		_GenericParameter_LRI_Isolated_0 = 1920,
		_VarsDecl_LRI_Isolated_1 = 1923,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 1928,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 1931,
		_Decl_LRI_Isolated_1 = 1934,
		_Decl_LRI_Isolated_2 = 1937,
		_Decl_LRI_Isolated_3 = 1940,
		_Decl_LRI_Isolated_4 = 1943,
		_Decl_LRI_Isolated_5 = 1946,
		_Decl_LRI_Isolated_6 = 1949,
		_DeclWithSemicolon_LRI_Isolated_1 = 1952,
		_DeclWithSemicolon_LRI_Isolated_2 = 1955,
		_ForStatConditionPart_LRI_Isolated_0 = 1958,
		_Stat_LRI_Isolated_1 = 1964,
		_Stat_LRI_Isolated_2 = 1967,
		_Stat_LRI_Isolated_3 = 1970,
		_Stat_LRI_Isolated_4 = 1973,
		_Stat_LRI_Isolated_5 = 1976,
		_Stat_LRI_Isolated_6 = 1979,
		_Type_LRI_Isolated_2 = 1982,
		_GenericArgument_LRI_Original = 1988,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1993,
		_PostfixUnaryExpr_LRI_Original = 1998,
		_PrefixUnaryExpr_LRI_Original = 2032,
		_BExpr0_LRI_Original = 2037,
		_BExpr1_LRI_Original = 2046,
		_BExpr2_LRI_Original = 2058,
		_BExpr3_LRI_Original = 2067,
		_BExpr4_LRI_Original = 2078,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2084,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2087,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2101,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2118,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2127,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2136,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2142,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2148,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2154,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2160,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2166,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2172,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2178,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2184,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2190,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2196,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2243,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2290,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2296,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2299,
		_PM_PrimitiveType_LRI_Original = 2302,
		_PM_QualifiedName_LRI_Original = 2306,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2310,
		_ShortTypeBeforeDeclarator_LRI_Original = 2316,
		_CallConstructibleType_LRI_Original = 2320,
		_TypeBeforeDeclarator_LRI_Original = 2331,
		_VarWithoutInit_LRI_Original = 2338,
		_VarRequiredInit_LRI_Original = 2342,
		_FunctionParameter_LRI_Original = 2346,
		_CatchParameter_LRI_Original = 2353,
		_ExprOrVarWithInit_LRI_Original = 2360,
		_TypedGenericParameter_LRI_Original = 2367,
		_GenericParameter_LRI_Original = 2372,
		_VarsDeclWithoutKeyword_LRI_Original = 2377,
		_VarsDecl_LRI_Original = 2383,
		_ClassMemberPartFirst_LRI_Original = 2388,
		_TypedefCompatibleDecl_LRI_Original = 2392,
		_Decl_LRI_Original = 2398,
		_DeclWithSemicolon_LRI_Original = 2408,
		_ExprStat_LRI_Original = 2415,
		_IfStatConditionPart_LRI_Original = 2421,
		_ForStatConditionPart_LRI_Original = 2429,
		_Stat_LRI_Original = 2446,
		_Type_LRI_Original = 2456,
		_Expr_NoComma_LRI_Original = 2463,
		_Expr_LRI_Original = 2466,
		_Expr_Argument_LRI_Original = 2469,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2474,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2477,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2481,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2484,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2488,
		_TypeOrExpr_LRI_Original = 2491,
		_File_LRI_Original = 2494,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif