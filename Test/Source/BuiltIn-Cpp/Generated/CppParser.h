/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_AdvancedTypeNoCVNoMember = 579,
		_AdvancedTypeCV = 592,
		_AdvancedTypeNoMember = 596,
		_AdvancedTypeMember = 600,
		_DeclarationKeywordWithoutFriend = 604,
		_DeclarationKeyword = 608,
		_DeclaratorKeyword = 612,
		_DeclaratorAKFirst = 632,
		_DeclaratorAKFollow = 636,
		_DeclaratorAKCV = 640,
		_DeclaratorAKMember = 643,
		_DeclaratorAKCtorDtor = 646,
		_DeclaratorFunctionParameters = 649,
		_FunctionKeyword = 661,
		_DeclaratorFunctionPart = 687,
		_DeclaratorFunctionPartOptionalParameters = 694,
		_DeclaratorArrayPart = 703,
		_DeclaratorId = 708,
		_DeclaratorUntypedFuncId = 712,
		_DeclaratorBeforeInner = 717,
		_DeclaratorAfterInner = 724,
		_InnerDeclaratorWithoutName = 729,
		_InnerDeclaratorInnerOptionalName = 733,
		_InnerDeclaratorInnerRequiredName = 737,
		_DeclaratorInnerWithoutName = 741,
		_DeclaratorInnerOptionalName = 746,
		_DeclaratorInnerRequiredName = 758,
		_DeclaratorWithoutName = 770,
		_DeclaratorOptionalName = 778,
		_DeclaratorRequiredName = 786,
		_DeclaratorUntypedFuncWithoutKeyword = 793,
		_VarValueInit = 798,
		_VarNewParanInit = 802,
		_VarBraceInit = 808,
		_VarCtorInit = 814,
		_VarInit = 818,
		_VarStatInitItemFirst = 823,
		_VarStatInitItemSecond = 828,
		_VarStatInit = 833,
		_DeclaratorVariablePartWithoutInit = 838,
		_DeclaratorVariablePartOptionalInit = 841,
		_DeclaratorVariablePartRequiredInit = 845,
		_FunctionParameterVariablePart = 849,
		_FunctionParameter = 854,
		_GenericParameterKeyword = 865,
		_OrdinaryGenericParameter = 872,
		_TypedGenericParameterInit = 879,
		_TypedGenericParameterVariablePart = 883,
		_TypedGenericParameter = 888,
		_GenericParameter = 898,
		_GenericHeader = 909,
		_CatchParameterVariablePart = 915,
		_CatchParameter = 918,
		_ExprOrVarCondition = 929,
		_ForEachParameter = 948,
		_MultiTypedefVarDeclVariablePart = 958,
		_MultiTypedefVarsDeclWithoutKeyword = 963,
		_MultiVarsDeclVariablePart = 973,
		_MultiVarsDeclWithoutKeyword = 978,
		_MultiVarsDecl = 988,
		_UntypedFuncForwardDeclVariablePart = 999,
		_UntypedFuncForwardDeclWithoutKeyword = 1002,
		_MultiVarsOrFuncForwardDeclWithoutKeyword = 1005,
		_MultiVarsOrFuncForwardDecl = 1016,
		_MultiVarsOrTypedFuncDeclVariablePartFollowing = 1028,
		_MultiVarsOrTypedFuncDeclVariablePart = 1035,
		_MultiVarsOrTypedFuncDeclWithoutKeyword = 1039,
		_UntypedFuncDeclVariablePart = 1049,
		_UntypedFuncDeclWithoutKeyword = 1054,
		_MultiVarsOrFuncDeclWithoutKeyword = 1057,
		_MultiVarsOrFuncDecl = 1068,
		_ClassInheritanceFirst = 1080,
		_ClassInheritanceSecond = 1093,
		_ClassMemberPartFirst = 1106,
		_ClassMemberPartSecond = 1126,
		_ClassBody = 1137,
		_ClassDeclPrefix = 1146,
		_ClassDecl = 1151,
		_ClassForwardDecl = 1156,
		_StaticAssertDecl = 1160,
		_TypedefCompatibleDecl = 1168,
		_TypedefDecl = 1180,
		_ExternDeclRejectSemicolon = 1184,
		_NsName = 1191,
		_NsDecl = 1194,
		_UsingNsDecl = 1202,
		_UsingValueDecl = 1209,
		_UsingTypeDecl = 1213,
		_FriendTypeDecl = 1219,
		_EnumItem = 1223,
		_EnumBody = 1228,
		_EnumDecl = 1237,
		_EnumForwardDecl = 1250,
		_DeclSharedWithoutSemicolonAcceptKeyword = 1261,
		_DeclSharedWithoutSemicolonAcceptKeywordButFriend = 1270,
		_DeclSharedWithoutSemicolon = 1274,
		_DeclNeedSemicolon = 1282,
		_DeclRejectSemicolon = 1295,
		_ExprStat = 1310,
		_BlockStat = 1334,
		_TryStatCatchPart = 1339,
		_TryStat = 1347,
		___TryStat = 1353,
		_IfStatConditionPart = 1364,
		_IfStat = 1386,
		_ForStatConditionPart = 1394,
		_ForStat = 1415,
		_OtherStats = 1422,
		_Stat = 1464,
		_Type = 1494,
		_Expr_NoComma = 1505,
		_Expr = 1522,
		_Expr_Argument = 1540,
		_TypeOrExpr_NoComma_NoGT = 1558,
		_TypeOrExpr = 1576,
		_File = 1595,
		_BExpr5_SWITCH_COMBINED = 1615,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1631,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1642,
		_BExpr_SWITCH_1allow_GT = 1653,
		_BExpr10_SWITCH_0allow_GT = 1671,
		_BExpr10_SWITCH_1allow_GT = 1687,
		_BExpr11_SWITCH_0allow_GT = 1703,
		_BExpr11_SWITCH_1allow_GT = 1719,
		_BExpr5_SWITCH_0allow_GT = 1735,
		_BExpr5_SWITCH_1allow_GT = 1751,
		_BExpr6_SWITCH_0allow_GT = 1767,
		_BExpr6_SWITCH_1allow_GT = 1783,
		_BExpr7_SWITCH_0allow_GT = 1799,
		_BExpr7_SWITCH_1allow_GT = 1815,
		_BExpr8_SWITCH_0allow_GT = 1831,
		_BExpr8_SWITCH_1allow_GT = 1847,
		_BExpr9_SWITCH_0allow_GT = 1863,
		_BExpr9_SWITCH_1allow_GT = 1879,
		_BExpr_NoComma_SWITCH_0allow_GT = 1895,
		_BExpr_NoComma_SWITCH_1allow_GT = 1912,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1929,
		_Expr_Raw_SWITCH_1allow_GT = 1946,
		_ThrowExpr_SWITCH_1allow_GT = 1964,
		_ThrowExpr_SWITCH_0allow_GT = 1968,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1972,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1990,
		_PostfixUnaryExpr_LRI_Isolated_1 = 2009,
		_PrefixUnaryExpr_LRI_Isolated_1 = 2016,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 2019,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 2022,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 2025,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 2029,
		_FunctionParameter_LRI_Isolated_2 = 2033,
		_GenericParameter_LRI_Isolated_0 = 2039,
		_CatchParameter_LRI_Isolated_2 = 2042,
		_ExprOrVarCondition_LRI_Isolated_2 = 2048,
		_MultiVarsDecl_LRI_Isolated_1 = 2054,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 2059,
		_MultiVarsOrFuncForwardDecl_LRI_Isolated_1 = 2062,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 2067,
		_MultiVarsOrFuncDecl_LRI_Isolated_1 = 2070,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2075,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2078,
		_DeclNeedSemicolon_LRI_Isolated_0 = 2081,
		_DeclRejectSemicolon_LRI_Isolated_0 = 2084,
		_DeclRejectSemicolon_LRI_Isolated_1 = 2088,
		_DeclRejectSemicolon_LRI_Isolated_3 = 2091,
		_ForStatConditionPart_LRI_Isolated_0 = 2094,
		_Stat_LRI_Isolated_1 = 2100,
		_Stat_LRI_Isolated_2 = 2103,
		_Stat_LRI_Isolated_3 = 2106,
		_Stat_LRI_Isolated_4 = 2109,
		_Stat_LRI_Isolated_5 = 2112,
		_Stat_LRI_Isolated_6 = 2115,
		_Type_LRI_Isolated_2 = 2118,
		_GenericArgument_LRI_Original = 2124,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2129,
		_PostfixUnaryExpr_LRI_Original = 2134,
		_PrefixUnaryExpr_LRI_Original = 2168,
		_BExpr0_LRI_Original = 2173,
		_BExpr1_LRI_Original = 2182,
		_BExpr2_LRI_Original = 2194,
		_BExpr3_LRI_Original = 2203,
		_BExpr4_LRI_Original = 2214,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2220,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2223,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2237,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2254,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2263,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2272,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2278,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2284,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2290,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2296,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2302,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2308,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2314,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2320,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2326,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2332,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2379,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2426,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2432,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2435,
		_PM_PrimitiveType_LRI_Original = 2438,
		_PM_QualifiedName_LRI_Original = 2442,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2446,
		_ShortTypeBeforeDeclarator_LRI_Original = 2452,
		_CallConstructibleType_LRI_Original = 2456,
		_TypeBeforeDeclarator_LRI_Original = 2467,
		_FunctionParameter_LRI_Original = 2474,
		_TypedGenericParameter_LRI_Original = 2481,
		_GenericParameter_LRI_Original = 2486,
		_CatchParameter_LRI_Original = 2491,
		_ExprOrVarCondition_LRI_Original = 2498,
		_ForEachParameter_LRI_Original = 2505,
		_MultiTypedefVarsDeclWithoutKeyword_LRI_Original = 2509,
		_MultiVarsDeclWithoutKeyword_LRI_Original = 2513,
		_MultiVarsDecl_LRI_Original = 2517,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2522,
		_MultiVarsOrFuncForwardDecl_LRI_Original = 2527,
		_MultiVarsOrTypedFuncDeclWithoutKeyword_LRI_Original = 2532,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Original = 2536,
		_MultiVarsOrFuncDecl_LRI_Original = 2541,
		_ClassMemberPartFirst_LRI_Original = 2546,
		_TypedefCompatibleDecl_LRI_Original = 2550,
		_DeclNeedSemicolon_LRI_Original = 2556,
		_DeclRejectSemicolon_LRI_Original = 2561,
		_ExprStat_LRI_Original = 2568,
		_IfStatConditionPart_LRI_Original = 2574,
		_ForStatConditionPart_LRI_Original = 2582,
		_Stat_LRI_Original = 2599,
		_Type_LRI_Original = 2609,
		_Expr_NoComma_LRI_Original = 2616,
		_Expr_LRI_Original = 2619,
		_Expr_Argument_LRI_Original = 2622,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2627,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2630,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2634,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2637,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2641,
		_TypeOrExpr_LRI_Original = 2644,
		_File_LRI_Original = 2647,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif