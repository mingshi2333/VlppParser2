/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 136,
		_QualifiedNameFragment = 142,
		_MemberQualifiedNameFragment = 149,
		_QualifiedName = 152,
		_StringLiteralFragment = 168,
		_PrimitiveExpr = 172,
		_QualifiedName_PrimitiveExpr = 249,
		_PostfixUnaryExpr = 253,
		_NewInit = 265,
		_NewPrefix = 281,
		_NewExpr = 286,
		_DeletePrefix = 295,
		_DeleteExpr = 300,
		_SizeOfPrefix = 308,
		_SizeofExpr = 312,
		_AllPrefixUnaryExpr_NoCStyleCast = 322,
		_AllPrefixUnaryExpr = 343,
		_PrefixUnaryExpr = 350,
		_MemberOperatorIdentifier = 363,
		_MemberOperatorQualifiedName = 368,
		_BExpr0 = 372,
		_BExpr1 = 386,
		_BExpr2 = 400,
		_BExpr3 = 414,
		_PrimitiveTypeLiteral = 428,
		_PrimitiveType = 446,
		_QualifiedName_PrimitiveType = 461,
		_ShortType = 465,
		_LongType = 471,
		_AdvancedTypeNoCVNoMember = 481,
		_AdvancedTypeCV = 494,
		_AdvancedTypeNoMember = 498,
		_AdvancedTypeMember = 502,
		_DeclaratorKeyword = 506,
		_DeclaratorAKFirst = 526,
		_DeclaratorAKFollow = 530,
		_DeclaratorAKCV = 534,
		_DeclaratorAKMember = 537,
		_DeclaratorFunctionParameter = 540,
		_DeclaratorFunctionParameters = 551,
		_FunctionKeyword = 563,
		_DeclaratorFunctionPart = 589,
		_DeclaratorArrayPart = 595,
		_DeclaratorId = 600,
		_DeclaratorBeforeInner = 604,
		_DeclaratorAfterInner = 611,
		_InnerDeclaratorWithoutName = 616,
		_InnerDeclaratorInnerOptionalName = 620,
		_DeclaratorInnerWithoutName = 624,
		_DeclaratorInnerOptionalName = 629,
		_DeclaratorWithoutName = 637,
		_DeclaratorOptionalName = 645,
		_Type = 653,
		_Expr_NoComma = 663,
		_Expr = 677,
		_Expr_Argument = 691,
		_TypeOrExpr_NoComma_NoGT = 705,
		_TypeOrExpr = 719,
		_File = 733,
		_BExpr4_SWITCH_COMBINED = 736,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 750,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 760,
		_BExpr_SWITCH_1allow_GT = 770,
		_BExpr10_SWITCH_0allow_GT = 784,
		_BExpr10_SWITCH_1allow_GT = 798,
		_BExpr4_SWITCH_0allow_GT = 812,
		_BExpr4_SWITCH_1allow_GT = 826,
		_BExpr5_SWITCH_0allow_GT = 840,
		_BExpr5_SWITCH_1allow_GT = 854,
		_BExpr6_SWITCH_0allow_GT = 868,
		_BExpr6_SWITCH_1allow_GT = 882,
		_BExpr7_SWITCH_0allow_GT = 896,
		_BExpr7_SWITCH_1allow_GT = 910,
		_BExpr8_SWITCH_0allow_GT = 924,
		_BExpr8_SWITCH_1allow_GT = 938,
		_BExpr9_SWITCH_0allow_GT = 952,
		_BExpr9_SWITCH_1allow_GT = 966,
		_BExpr_NoComma_SWITCH_0allow_GT = 980,
		_BExpr_NoComma_SWITCH_1allow_GT = 994,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1008,
		_Expr_Raw_SWITCH_1allow_GT = 1022,
		_ThrowExpr_SWITCH_1allow_GT = 1036,
		_ThrowExpr_SWITCH_0allow_GT = 1040,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1044,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1058,
		_ShortType_LRI_Isolated_1 = 1072,
		_ShortType_LRI_Isolated_2 = 1076,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1080,
		_GenericArgument_LRI_Original = 1088,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1093,
		_PostfixUnaryExpr_LRI_Original = 1098,
		_PrefixUnaryExpr_LRI_Original = 1130,
		_BExpr0_LRI_Original = 1135,
		_BExpr1_LRI_Original = 1144,
		_BExpr2_LRI_Original = 1156,
		_BExpr3_LRI_Original = 1165,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1174,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1177,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1189,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1204,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1213,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1222,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1228,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1234,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1240,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1246,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1252,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1258,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1264,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1270,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1276,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1282,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1324,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1366,
		_QualifiedName_PrimitiveType_LRI_Original = 1372,
		_ShortType_LRI_Original = 1377,
		_LongType_LRI_Original = 1383,
		_DeclaratorFunctionParameter_LRI_Original = 1390,
		_Type_LRI_Original = 1402,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1407,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1410,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1413,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1416,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1420,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1423,
		_Expr_NoComma_LRI_Original = 1427,
		_Expr_LRI_Original = 1430,
		_Expr_Argument_LRI_Original = 1433,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1438,
		_TypeOrExpr_LRI_Original = 1441,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif