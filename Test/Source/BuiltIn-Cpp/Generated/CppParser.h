/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_QualifiedNameFragment = 140,
		_MemberQualifiedNameFragment = 147,
		_SingleLevelQualifiedName = 151,
		_NextLevelQualifiedName = 161,
		_QualifiedName = 167,
		_QualifiedNameAfterTypename = 172,
		_StringLiteralFragment = 178,
		_LambdaCaptureId = 182,
		_LambdaCapture = 192,
		_LambdaExpr = 202,
		_PrimitiveExpr = 211,
		_QualifiedName_PrimitiveExpr = 289,
		_PostfixUnaryExpr = 293,
		_NewPrefix = 307,
		_NewExpr = 312,
		_DeletePrefix = 324,
		_DeleteExpr = 329,
		_SizeOfPrefix = 337,
		_SizeofExpr = 341,
		_AllPrefixUnaryExpr_NoCStyleCast = 351,
		_AllPrefixUnaryExpr = 372,
		_PrefixUnaryExpr = 379,
		_MemberOperatorIdentifier = 394,
		_BExpr0 = 399,
		_BExpr1 = 415,
		_BExpr2 = 431,
		_BExpr3 = 447,
		_BExpr4 = 463,
		_PrimitiveTypeLiteral = 479,
		_PrimitiveType = 497,
		_PM_PrimitiveType = 512,
		_PM_QualifiedName = 515,
		_CallConstructibleTypeBeforeDeclarator = 518,
		_ShortTypeBeforeDeclarator = 523,
		_CallConstructibleType = 529,
		_TypeBeforeDeclarator = 539,
		_TypeWithoutFuncVar = 549,
		_ExprStat = 559,
		_BlockStat = 585,
		_TryStatCatchPart = 590,
		_TryStat = 598,
		___TryStat = 604,
		_IfStatConditionPart = 615,
		_IfStat = 637,
		_ForStatConditionPart = 645,
		_ForStat = 666,
		_OtherStats = 673,
		_Stat = 715,
		_GenericParameterKeyword = 747,
		_OrdinaryGenericParameter = 754,
		_TypedGenericParameterInit = 761,
		_TypedGenericParameterVariablePart = 765,
		_TypedGenericParameter = 770,
		_GenericParameter = 780,
		_GenericHeader = 791,
		_GenericArgument = 797,
		_GenericArguments = 817,
		_AdvancedTypeNoCVNoMember = 823,
		_AdvancedTypeCV = 836,
		_AdvancedTypeNoMember = 840,
		_AdvancedTypeMember = 844,
		_DeclarationKeywordWithoutFriend = 848,
		_DeclarationKeyword = 852,
		_DeclaratorKeyword = 856,
		_DeclaratorAKFirst = 876,
		_DeclaratorAKFollow = 880,
		_DeclaratorAKCV = 884,
		_DeclaratorAKMember = 887,
		_DeclaratorAKCtorDtor = 890,
		_DeclaratorFunctionParameters = 893,
		_FunctionKeyword = 905,
		_DeclaratorFunctionPart = 931,
		_DeclaratorFunctionPartOptionalParameters = 938,
		_DeclaratorArrayPart = 947,
		_DeclaratorId = 952,
		_DeclaratorUntypedFuncId = 956,
		_DeclaratorBeforeInner = 961,
		_DeclaratorAfterInner = 968,
		_InnerDeclaratorWithoutName = 973,
		_InnerDeclaratorInnerOptionalName = 977,
		_InnerDeclaratorInnerRequiredName = 981,
		_DeclaratorInnerWithoutName = 985,
		_DeclaratorName = 990,
		_DeclaratorInnerOptionalName = 998,
		_DeclaratorInnerRequiredName = 1006,
		_DeclaratorWithoutNameAndFuncVar = 1014,
		_DeclaratorWithoutName = 1019,
		_DeclaratorOptionalName = 1027,
		_DeclaratorRequiredName = 1035,
		_DeclaratorUntypedFuncWithoutKeyword = 1042,
		_VarValueInit = 1047,
		_VarNewParanInit = 1051,
		_VarBraceInit = 1057,
		_VarCtorInit = 1063,
		_VarInit = 1067,
		_VarStatInitItemFirst = 1072,
		_VarStatInitItemSecond = 1077,
		_VarStatInit = 1082,
		_DeclaratorVariablePartWithoutInit = 1087,
		_DeclaratorVariablePartOptionalInitFirst = 1090,
		_DeclaratorVariablePartOptionalInitSecond = 1094,
		_DeclaratorVariablePartRequiredInit = 1098,
		_FunctionParameterVariablePart = 1102,
		_FunctionParameter = 1107,
		_CatchParameterVariablePart = 1118,
		_CatchParameter = 1121,
		_ExprOrVarCondition = 1132,
		_ForEachParameter = 1151,
		_MultiTypedefVarDeclVariablePart = 1161,
		_MultiTypedefVarsDeclWithoutKeyword = 1166,
		_MultiVarsDeclVariablePartFirst = 1176,
		_MultiVarsDeclVariablePartSecond = 1181,
		_MultiVarsDeclWithoutKeyword = 1186,
		_MultiVarsDecl = 1196,
		_UntypedFuncForwardDeclVariablePart = 1207,
		_UntypedFuncForwardDeclWithoutKeyword = 1210,
		_MultiVarsOrFuncForwardDeclWithoutKeyword = 1213,
		_MultiVarsOrFuncForwardDecl = 1224,
		_MultiVarsOrTypedFuncDeclVariablePartFollowing = 1236,
		_MultiVarsOrTypedFuncDeclVariablePart = 1243,
		_MultiVarsOrTypedFuncDeclWithoutKeyword = 1247,
		_UntypedFuncDeclVariablePart = 1257,
		_UntypedFuncDeclWithoutKeyword = 1262,
		_MultiVarsOrFuncDeclWithoutKeyword = 1265,
		_MultiVarsOrFuncDecl = 1276,
		_ClassInheritanceFirst = 1288,
		_ClassInheritanceSecond = 1305,
		_ClassMemberPartFirst = 1322,
		_ClassMemberPartSecond = 1344,
		_ClassBody = 1355,
		_ClassDeclPrefix = 1364,
		_ClassDecl = 1369,
		_ClassForwardDecl = 1375,
		_StaticAssertDecl = 1380,
		_TypedefCompatibleDecl = 1388,
		_TypedefDecl = 1400,
		_ExternDeclRejectSemicolon = 1404,
		_NsName = 1411,
		_NsDecl = 1414,
		_UsingNsDecl = 1422,
		_UsingValueDecl = 1429,
		_UsingTypeDecl = 1434,
		_FriendTypeDecl = 1440,
		_EnumItem = 1444,
		_EnumBody = 1449,
		_EnumDecl = 1458,
		_EnumForwardDecl = 1471,
		_DeclSharedWithoutSemicolonAcceptKeyword = 1482,
		_DeclSharedWithoutSemicolonAcceptKeywordButFriend = 1491,
		_DeclSharedWithoutSemicolon = 1495,
		_DeclNeedSemicolon = 1503,
		_DeclRejectSemicolon = 1517,
		_Type = 1533,
		_Expr_NoComma = 1544,
		_Expr = 1561,
		_Expr_Argument = 1579,
		_TypeOrExpr_NoComma_NoGT = 1597,
		_TypeOrExpr = 1615,
		_File = 1634,
		_BExpr5_SWITCH_COMBINED = 1656,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1672,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1683,
		_BExpr_SWITCH_1allow_GT = 1694,
		_BExpr10_SWITCH_0allow_GT = 1712,
		_BExpr10_SWITCH_1allow_GT = 1728,
		_BExpr11_SWITCH_0allow_GT = 1744,
		_BExpr11_SWITCH_1allow_GT = 1760,
		_BExpr5_SWITCH_0allow_GT = 1776,
		_BExpr5_SWITCH_1allow_GT = 1792,
		_BExpr6_SWITCH_0allow_GT = 1808,
		_BExpr6_SWITCH_1allow_GT = 1824,
		_BExpr7_SWITCH_0allow_GT = 1840,
		_BExpr7_SWITCH_1allow_GT = 1856,
		_BExpr8_SWITCH_0allow_GT = 1872,
		_BExpr8_SWITCH_1allow_GT = 1888,
		_BExpr9_SWITCH_0allow_GT = 1904,
		_BExpr9_SWITCH_1allow_GT = 1920,
		_BExpr_NoComma_SWITCH_0allow_GT = 1936,
		_BExpr_NoComma_SWITCH_1allow_GT = 1953,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1970,
		_Expr_Raw_SWITCH_1allow_GT = 1987,
		_ThrowExpr_SWITCH_1allow_GT = 2005,
		_ThrowExpr_SWITCH_0allow_GT = 2009,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 2013,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 2031,
		_PostfixUnaryExpr_LRI_Isolated_1 = 2050,
		_PrefixUnaryExpr_LRI_Isolated_1 = 2057,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 2060,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 2063,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 2066,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 2070,
		_ForStatConditionPart_LRI_Isolated_0 = 2074,
		_Stat_LRI_Isolated_1 = 2080,
		_Stat_LRI_Isolated_2 = 2083,
		_Stat_LRI_Isolated_3 = 2086,
		_Stat_LRI_Isolated_4 = 2089,
		_Stat_LRI_Isolated_5 = 2092,
		_Stat_LRI_Isolated_6 = 2095,
		_GenericParameter_LRI_Isolated_0 = 2098,
		_FunctionParameter_LRI_Isolated_2 = 2101,
		_CatchParameter_LRI_Isolated_2 = 2107,
		_ExprOrVarCondition_LRI_Isolated_2 = 2113,
		_MultiVarsDecl_LRI_Isolated_1 = 2119,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 2124,
		_MultiVarsOrFuncForwardDecl_LRI_Isolated_1 = 2127,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Isolated_1 = 2132,
		_MultiVarsOrFuncDecl_LRI_Isolated_1 = 2135,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 2140,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 2143,
		_DeclNeedSemicolon_LRI_Isolated_0 = 2146,
		_DeclNeedSemicolon_LRI_Isolated_2 = 2149,
		_DeclRejectSemicolon_LRI_Isolated_0 = 2154,
		_DeclRejectSemicolon_LRI_Isolated_1 = 2158,
		_DeclRejectSemicolon_LRI_Isolated_3 = 2161,
		_DeclRejectSemicolon_LRI_Isolated_4 = 2164,
		_Type_LRI_Isolated_2 = 2169,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2175,
		_PostfixUnaryExpr_LRI_Original = 2180,
		_PrefixUnaryExpr_LRI_Original = 2214,
		_BExpr0_LRI_Original = 2219,
		_BExpr1_LRI_Original = 2228,
		_BExpr2_LRI_Original = 2240,
		_BExpr3_LRI_Original = 2249,
		_BExpr4_LRI_Original = 2260,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2266,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2269,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2283,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2300,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2309,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2318,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2324,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2330,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2336,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2342,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2348,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2354,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2360,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2366,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2372,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2378,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2425,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2472,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2478,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2481,
		_PM_PrimitiveType_LRI_Original = 2484,
		_PM_QualifiedName_LRI_Original = 2488,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2492,
		_ShortTypeBeforeDeclarator_LRI_Original = 2498,
		_CallConstructibleType_LRI_Original = 2502,
		_TypeBeforeDeclarator_LRI_Original = 2513,
		_TypeWithoutFuncVar_LRI_Original = 2520,
		_ExprStat_LRI_Original = 2525,
		_IfStatConditionPart_LRI_Original = 2531,
		_ForStatConditionPart_LRI_Original = 2539,
		_Stat_LRI_Original = 2556,
		_TypedGenericParameter_LRI_Original = 2566,
		_GenericParameter_LRI_Original = 2571,
		_GenericArgument_LRI_Original = 2576,
		_FunctionParameter_LRI_Original = 2581,
		_CatchParameter_LRI_Original = 2588,
		_ExprOrVarCondition_LRI_Original = 2595,
		_ForEachParameter_LRI_Original = 2602,
		_MultiTypedefVarsDeclWithoutKeyword_LRI_Original = 2606,
		_MultiVarsDeclWithoutKeyword_LRI_Original = 2610,
		_MultiVarsDecl_LRI_Original = 2614,
		_MultiVarsOrFuncForwardDeclWithoutKeyword_LRI_Original = 2619,
		_MultiVarsOrFuncForwardDecl_LRI_Original = 2624,
		_MultiVarsOrTypedFuncDeclWithoutKeyword_LRI_Original = 2629,
		_MultiVarsOrFuncDeclWithoutKeyword_LRI_Original = 2633,
		_MultiVarsOrFuncDecl_LRI_Original = 2638,
		_ClassMemberPartFirst_LRI_Original = 2643,
		_TypedefCompatibleDecl_LRI_Original = 2647,
		_DeclNeedSemicolon_LRI_Original = 2653,
		_DeclRejectSemicolon_LRI_Original = 2659,
		_Type_LRI_Original = 2667,
		_Expr_NoComma_LRI_Original = 2674,
		_Expr_LRI_Original = 2677,
		_Expr_Argument_LRI_Original = 2680,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2685,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2688,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2692,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2695,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2699,
		_TypeOrExpr_LRI_Original = 2702,
		_File_LRI_Original = 2705,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif