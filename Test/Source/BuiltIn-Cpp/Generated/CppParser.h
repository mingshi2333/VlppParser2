/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 126,
		_QualifiedNameFragment = 132,
		_MemberQualifiedNameFragment = 139,
		_QualifiedName = 142,
		_StringLiteralFragment = 161,
		_NewInit = 165,
		_NewFragment = 181,
		_DeleteFragment = 189,
		_PrimitiveExpr = 195,
		_PrimitiveExpr_QualifiedName = 302,
		_PostfixUnaryExpr = 306,
		_MemberOperatorIdentifier = 324,
		_MemberOperatorQualifiedName = 329,
		_BExpr0 = 333,
		_BExpr1 = 348,
		_BExpr2 = 360,
		_BExpr3 = 369,
		_BExpr4 = 378,
		_BExpr5 = 393,
		_BExpr6 = 402,
		_BExpr7 = 408,
		_BExpr8 = 414,
		_BExpr9 = 420,
		_BExpr10 = 426,
		_ThrowExpr = 432,
		_BExpr_NoComma = 436,
		_BExpr = 478,
		_PrimitiveTypeLiteral = 484,
		_PrimitiveType = 502,
		_ShortType = 517,
		_ShortType_QualifiedName = 524,
		_LongType = 528,
		_Type = 537,
		_Expr = 543,
		_Expr_NoComma = 550,
		_TypeOrExpr = 557,
		_TypeOrExpr_NoComma_NoLT = 567,
		_File = 577,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	const wchar_t* ParserSwitchName(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif