/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 138,
		_QualifiedNameFragment = 144,
		_MemberQualifiedNameFragment = 151,
		_QualifiedName = 154,
		_StringLiteralFragment = 170,
		_PrimitiveExpr = 174,
		_QualifiedName_PrimitiveExpr = 251,
		_PostfixUnaryExpr = 255,
		_NewInit = 267,
		_NewPrefix = 283,
		_NewExpr = 288,
		_DeletePrefix = 297,
		_DeleteExpr = 302,
		_SizeOfPrefix = 310,
		_SizeofExpr = 314,
		_AllPrefixUnaryExpr_NoCStyleCast = 324,
		_AllPrefixUnaryExpr = 345,
		_PrefixUnaryExpr = 352,
		_MemberOperatorIdentifier = 365,
		_MemberOperatorQualifiedName = 370,
		_BExpr0 = 374,
		_BExpr1 = 388,
		_BExpr2 = 402,
		_BExpr3 = 416,
		_PrimitiveTypeLiteral = 430,
		_PrimitiveType = 448,
		_QualifiedName_PrimitiveType = 463,
		_TypeBeforeDeclarator = 467,
		_AdvancedTypeNoCVNoMember = 473,
		_AdvancedTypeCV = 486,
		_AdvancedTypeNoMember = 490,
		_AdvancedTypeMember = 494,
		_DeclaratorKeyword = 498,
		_DeclaratorAKFirst = 518,
		_DeclaratorAKFollow = 522,
		_DeclaratorAKCV = 526,
		_DeclaratorAKMember = 529,
		_DeclaratorFunctionParameter = 532,
		_DeclaratorFunctionParameters = 543,
		_FunctionKeyword = 555,
		_DeclaratorFunctionPart = 581,
		_DeclaratorArrayPart = 587,
		_DeclaratorId = 592,
		_DeclaratorBeforeInner = 596,
		_DeclaratorAfterInner = 603,
		_InnerDeclaratorWithoutName = 608,
		_InnerDeclaratorInnerOptionalName = 612,
		_DeclaratorInnerWithoutName = 616,
		_DeclaratorInnerOptionalName = 621,
		_DeclaratorWithoutName = 629,
		_DeclaratorOptionalName = 637,
		_Type = 645,
		_Expr_NoComma = 655,
		_Expr = 670,
		_Expr_Argument = 686,
		_TypeOrExpr_NoComma_NoGT = 702,
		_TypeOrExpr = 717,
		_File = 733,
		_BExpr4_SWITCH_COMBINED = 736,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 750,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 760,
		_BExpr_SWITCH_1allow_GT = 770,
		_BExpr10_SWITCH_0allow_GT = 786,
		_BExpr10_SWITCH_1allow_GT = 800,
		_BExpr4_SWITCH_0allow_GT = 814,
		_BExpr4_SWITCH_1allow_GT = 828,
		_BExpr5_SWITCH_0allow_GT = 842,
		_BExpr5_SWITCH_1allow_GT = 856,
		_BExpr6_SWITCH_0allow_GT = 870,
		_BExpr6_SWITCH_1allow_GT = 884,
		_BExpr7_SWITCH_0allow_GT = 898,
		_BExpr7_SWITCH_1allow_GT = 912,
		_BExpr8_SWITCH_0allow_GT = 926,
		_BExpr8_SWITCH_1allow_GT = 940,
		_BExpr9_SWITCH_0allow_GT = 954,
		_BExpr9_SWITCH_1allow_GT = 968,
		_BExpr_NoComma_SWITCH_0allow_GT = 982,
		_BExpr_NoComma_SWITCH_1allow_GT = 997,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1012,
		_Expr_Raw_SWITCH_1allow_GT = 1027,
		_ThrowExpr_SWITCH_1allow_GT = 1043,
		_ThrowExpr_SWITCH_0allow_GT = 1047,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1051,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1066,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1082,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1085,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1088,
		_TypeBeforeDeclarator_LRI_Isolated_1 = 1091,
		_TypeBeforeDeclarator_LRI_Isolated_2 = 1095,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1099,
		_GenericArgument_LRI_Original = 1107,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1112,
		_PostfixUnaryExpr_LRI_Original = 1117,
		_PrefixUnaryExpr_LRI_Original = 1149,
		_BExpr0_LRI_Original = 1154,
		_BExpr1_LRI_Original = 1163,
		_BExpr2_LRI_Original = 1175,
		_BExpr3_LRI_Original = 1184,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1193,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1196,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1208,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1223,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1232,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1241,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1247,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1253,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1259,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1265,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1271,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1277,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1283,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1289,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1295,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1301,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1344,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1387,
		_QualifiedName_PrimitiveType_LRI_Original = 1393,
		_TypeBeforeDeclarator_LRI_Original = 1398,
		_DeclaratorFunctionParameter_LRI_Original = 1404,
		_Type_LRI_Original = 1416,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1421,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1424,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1427,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1430,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1434,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1437,
		_Expr_NoComma_LRI_Original = 1441,
		_Expr_LRI_Original = 1444,
		_Expr_Argument_LRI_Original = 1447,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1452,
		_TypeOrExpr_LRI_Original = 1455,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif