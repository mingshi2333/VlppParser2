/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 126,
		_QualifiedNameFragment = 132,
		_MemberQualifiedNameFragment = 139,
		_QualifiedName = 142,
		_StringLiteralFragment = 163,
		_PrimitiveExpr = 167,
		_PrimitiveExpr_QualifiedName = 244,
		_PostfixUnaryExpr = 248,
		_NewInit = 272,
		_NewFragment = 288,
		_DeleteFragment = 296,
		_SizeofFragment = 302,
		_AllPrefixUnaryExpr_NoCStyleCast = 309,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 352,
		_MemberOperatorQualifiedName = 357,
		_BExpr0 = 361,
		_BExpr1 = 370,
		_BExpr2 = 382,
		_BExpr3 = 391,
		_BExpr4 = 400,
		_BExpr5 = 415,
		_BExpr6 = 424,
		_BExpr7 = 430,
		_BExpr8 = 436,
		_BExpr9 = 442,
		_BExpr10 = 448,
		_ThrowExpr = 454,
		_BExpr_NoComma = 458,
		_BExpr = 500,
		_PrimitiveTypeLiteral = 507,
		_PrimitiveType = 525,
		_ShortType = 540,
		_ShortType_QualifiedName = 547,
		_LongType = 551,
		_AdvancedTypeNoCVNoMember = 560,
		_AdvancedTypeNoMember = 573,
		_AdvancedTypeMember = 578,
		_DeclaratorKeyword = 582,
		_DeclaratorAKFirst = 602,
		_DeclaratorAKFollow = 606,
		_DeclaratorFunctionParameter = 610,
		_DeclaratorFunctionParameters = 615,
		_DeclaratorFunctionPart = 624,
		_DeclaratorArrayPart = 629,
		_DeclaratorId = 634,
		_DeclaratorBeforeInner = 638,
		_DeclaratorAfterInner = 645,
		_DeclaratorInnerWithoutName = 650,
		_DeclaratorInnerOptionalName = 655,
		_DeclaratorInnerWithName = 661,
		_DeclaratorWithoutName = 667,
		_DeclaratorOptionalName = 675,
		_DeclaratorWithName = 683,
		_TypeOrDeclarator = 688,
		_TypeOnly = 693,
		_Type = 697,
		_ExprOnly_NoComma = 702,
		_Expr_NoComma = 709,
		_ExprOnly = 714,
		_Expr = 722,
		_TypeOrExpr_NoComma_NoLT = 727,
		_TypeOrExpr = 734,
		_File = 741,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	const wchar_t* ParserSwitchName(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif