/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 292,
		_DeleteExpr = 297,
		_SizeOfPrefix = 305,
		_SizeofExpr = 309,
		_AllPrefixUnaryExpr_NoCStyleCast = 319,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 364,
		_MemberOperatorQualifiedName = 369,
		_BExpr0 = 373,
		_BExpr1 = 391,
		_BExpr2 = 409,
		_BExpr3 = 427,
		_PrimitiveTypeLiteral = 445,
		_PrimitiveType = 463,
		_PM_PrimitiveType = 478,
		_PM_QualifiedName = 481,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 484,
		_ShortTypeBeforeDeclarator = 489,
		_TypeStartsWithKeywordBeforeDeclarator = 495,
		_TypeBeforeDeclarator = 503,
		_AdvancedTypeNoCVNoMember = 513,
		_AdvancedTypeCV = 526,
		_AdvancedTypeNoMember = 530,
		_AdvancedTypeMember = 534,
		_DeclaratorKeyword = 538,
		_DeclaratorAKFirst = 558,
		_DeclaratorAKFollow = 562,
		_DeclaratorAKCV = 566,
		_DeclaratorAKMember = 569,
		_DeclaratorFunctionParameters = 572,
		_FunctionKeyword = 584,
		_DeclaratorFunctionPart = 610,
		_DeclaratorArrayPart = 616,
		_DeclaratorId = 621,
		_DeclaratorBeforeInner = 625,
		_DeclaratorAfterInner = 632,
		_InnerDeclaratorWithoutName = 637,
		_InnerDeclaratorInnerOptionalName = 641,
		_InnerDeclaratorInnerRequiredName = 645,
		_DeclaratorInnerWithoutName = 649,
		_DeclaratorInnerOptionalName = 654,
		_DeclaratorInnerRequiredName = 662,
		_DeclaratorWithoutName = 670,
		_DeclaratorOptionalName = 678,
		_DeclaratorRequiredName = 686,
		_VarValueInit = 693,
		_VarNewParanInit = 697,
		_VarVarParanInit = 703,
		_VarBraceInit = 710,
		_VarCtorInit = 716,
		_VarInit = 720,
		_DeclaratorVariablePartWithoutInit = 725,
		_DeclaratorVariablePartOptionalInit = 728,
		_DeclaratorVariablePartRequiredInit = 732,
		_VarWithoutInit = 736,
		_VarRequiredInit = 746,
		_FunctionParameterVariablePart = 756,
		_FunctionParameter = 761,
		_CatchParameterVariablePart = 772,
		_CatchParameter = 775,
		_ExprOrVarWithInit = 786,
		_VarsDeclWithoutKeyword = 807,
		_VarsDecl = 817,
		_Decl = 828,
		_ExprStat = 839,
		_BlockStat = 861,
		_TryStatCatchPart = 866,
		_TryStat = 874,
		___TryStat = 880,
		_IfStatConditionPart = 891,
		_IfStat = 915,
		_ForStatConditionPart = 923,
		_ForStat = 946,
		_OtherStats = 953,
		_Stat = 1002,
		_TypeStartsWithKeyword = 1030,
		_Type = 1039,
		_Expr_NoComma = 1050,
		_Expr = 1069,
		_Expr_Argument = 1089,
		_TypeOrExpr_NoComma_NoGT = 1109,
		_TypeOrExpr = 1128,
		_File = 1148,
		_BExpr4_SWITCH_COMBINED = 1151,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1169,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1180,
		_BExpr_SWITCH_1allow_GT = 1191,
		_BExpr10_SWITCH_0allow_GT = 1211,
		_BExpr10_SWITCH_1allow_GT = 1229,
		_BExpr4_SWITCH_0allow_GT = 1247,
		_BExpr4_SWITCH_1allow_GT = 1265,
		_BExpr5_SWITCH_0allow_GT = 1283,
		_BExpr5_SWITCH_1allow_GT = 1301,
		_BExpr6_SWITCH_0allow_GT = 1319,
		_BExpr6_SWITCH_1allow_GT = 1337,
		_BExpr7_SWITCH_0allow_GT = 1355,
		_BExpr7_SWITCH_1allow_GT = 1373,
		_BExpr8_SWITCH_0allow_GT = 1391,
		_BExpr8_SWITCH_1allow_GT = 1409,
		_BExpr9_SWITCH_0allow_GT = 1427,
		_BExpr9_SWITCH_1allow_GT = 1445,
		_BExpr_NoComma_SWITCH_0allow_GT = 1463,
		_BExpr_NoComma_SWITCH_1allow_GT = 1482,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1501,
		_Expr_Raw_SWITCH_1allow_GT = 1520,
		_ThrowExpr_SWITCH_1allow_GT = 1540,
		_ThrowExpr_SWITCH_0allow_GT = 1544,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1548,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1567,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1587,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1590,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1593,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1596,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1600,
		_FunctionParameter_LRI_Isolated_2 = 1604,
		_CatchParameter_LRI_Isolated_2 = 1610,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1616,
		_VarsDecl_LRI_Isolated_1 = 1622,
		_ForStatConditionPart_LRI_Isolated_0 = 1627,
		_Stat_LRI_Isolated_1 = 1633,
		_Stat_LRI_Isolated_2 = 1636,
		_Stat_LRI_Isolated_3 = 1639,
		_Stat_LRI_Isolated_4 = 1642,
		_Stat_LRI_Isolated_5 = 1645,
		_Stat_LRI_Isolated_6 = 1648,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1651,
		_Type_LRI_Isolated_2 = 1657,
		_GenericArgument_LRI_Original = 1663,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1668,
		_PostfixUnaryExpr_LRI_Original = 1673,
		_PrefixUnaryExpr_LRI_Original = 1705,
		_BExpr0_LRI_Original = 1710,
		_BExpr1_LRI_Original = 1719,
		_BExpr2_LRI_Original = 1731,
		_BExpr3_LRI_Original = 1740,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1749,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1752,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1764,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1779,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1788,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1797,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1803,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1809,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1815,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1821,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1827,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1833,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1839,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1845,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1851,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1857,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1900,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1943,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1949,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1952,
		_PM_PrimitiveType_LRI_Original = 1955,
		_PM_QualifiedName_LRI_Original = 1959,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1963,
		_ShortTypeBeforeDeclarator_LRI_Original = 1969,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1973,
		_TypeBeforeDeclarator_LRI_Original = 1980,
		_VarWithoutInit_LRI_Original = 1987,
		_VarRequiredInit_LRI_Original = 1991,
		_FunctionParameter_LRI_Original = 1995,
		_CatchParameter_LRI_Original = 2002,
		_ExprOrVarWithInit_LRI_Original = 2009,
		_VarsDeclWithoutKeyword_LRI_Original = 2016,
		_VarsDecl_LRI_Original = 2022,
		_Decl_LRI_Original = 2027,
		_ExprStat_LRI_Original = 2030,
		_IfStatConditionPart_LRI_Original = 2036,
		_ForStatConditionPart_LRI_Original = 2044,
		_Stat_LRI_Original = 2061,
		_TypeStartsWithKeyword_LRI_Original = 2071,
		_Type_LRI_Original = 2078,
		_Expr_NoComma_LRI_Original = 2085,
		_Expr_LRI_Original = 2088,
		_Expr_Argument_LRI_Original = 2091,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2096,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2099,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2103,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2106,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2110,
		_TypeOrExpr_LRI_Original = 2113,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif