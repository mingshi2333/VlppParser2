/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 119,
		_GenericArgument = 124,
		_GenericArguments = 144,
		_QualifiedNameFragment = 150,
		_MemberQualifiedNameFragment = 157,
		_QualifiedName = 160,
		_StringLiteralFragment = 176,
		_LambdaCaptureId = 180,
		_LambdaCapture = 190,
		_LambdaExpr = 200,
		_PrimitiveExpr = 209,
		_QualifiedName_PrimitiveExpr = 287,
		_PostfixUnaryExpr = 291,
		_NewPrefix = 307,
		_NewExpr = 312,
		_DeletePrefix = 324,
		_DeleteExpr = 329,
		_SizeOfPrefix = 337,
		_SizeofExpr = 341,
		_AllPrefixUnaryExpr_NoCStyleCast = 351,
		_AllPrefixUnaryExpr = 372,
		_PrefixUnaryExpr = 379,
		_MemberOperatorIdentifier = 396,
		_MemberOperatorQualifiedName = 401,
		_BExpr0 = 405,
		_BExpr1 = 423,
		_BExpr2 = 441,
		_BExpr3 = 459,
		_PrimitiveTypeLiteral = 477,
		_PrimitiveType = 495,
		_PM_PrimitiveType = 510,
		_PM_QualifiedName = 513,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 516,
		_ShortTypeBeforeDeclarator = 521,
		_TypeStartsWithKeywordBeforeDeclarator = 527,
		_TypeBeforeDeclarator = 535,
		_AdvancedTypeNoCVNoMember = 545,
		_AdvancedTypeCV = 558,
		_AdvancedTypeNoMember = 562,
		_AdvancedTypeMember = 566,
		_DeclaratorKeyword = 570,
		_DeclaratorAKFirst = 590,
		_DeclaratorAKFollow = 594,
		_DeclaratorAKCV = 598,
		_DeclaratorAKMember = 601,
		_DeclaratorFunctionParameters = 604,
		_FunctionKeyword = 616,
		_DeclaratorFunctionPart = 642,
		_DeclaratorFunctionPartOptionalParameters = 648,
		_DeclaratorArrayPart = 657,
		_DeclaratorId = 662,
		_DeclaratorBeforeInner = 666,
		_DeclaratorAfterInner = 673,
		_InnerDeclaratorWithoutName = 678,
		_InnerDeclaratorInnerOptionalName = 682,
		_InnerDeclaratorInnerRequiredName = 686,
		_DeclaratorInnerWithoutName = 690,
		_DeclaratorInnerOptionalName = 695,
		_DeclaratorInnerRequiredName = 703,
		_DeclaratorWithoutName = 711,
		_DeclaratorOptionalName = 719,
		_DeclaratorRequiredName = 727,
		_VarValueInit = 734,
		_VarNewParanInit = 738,
		_VarVarParanInit = 744,
		_VarBraceInit = 751,
		_VarCtorInit = 757,
		_VarInit = 761,
		_DeclaratorVariablePartWithoutInit = 766,
		_DeclaratorVariablePartOptionalInit = 769,
		_DeclaratorVariablePartRequiredInit = 773,
		_VarWithoutInit = 777,
		_VarRequiredInit = 787,
		_FunctionParameterVariablePart = 797,
		_FunctionParameter = 802,
		_CatchParameterVariablePart = 813,
		_CatchParameter = 816,
		_ExprOrVarWithInit = 827,
		_GenericParameterKeyword = 848,
		_OrdinaryGenericParameter = 855,
		_TypedGenericParameterInit = 862,
		_TypedGenericParameterVariablePart = 866,
		_TypedGenericParameter = 871,
		_GenericParameter = 881,
		_GenericHeader = 892,
		_VarsDeclWithoutKeyword = 898,
		_VarsDecl = 908,
		_Decl = 919,
		_ExprStat = 930,
		_BlockStat = 952,
		_TryStatCatchPart = 957,
		_TryStat = 965,
		___TryStat = 971,
		_IfStatConditionPart = 982,
		_IfStat = 1006,
		_ForStatConditionPart = 1014,
		_ForStat = 1037,
		_OtherStats = 1044,
		_Stat = 1093,
		_TypeStartsWithKeyword = 1121,
		_Type = 1130,
		_Expr_NoComma = 1141,
		_Expr = 1160,
		_Expr_Argument = 1180,
		_TypeOrExpr_NoComma_NoGT = 1200,
		_TypeOrExpr = 1219,
		_File = 1239,
		_BExpr4_SWITCH_COMBINED = 1242,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1260,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1271,
		_BExpr_SWITCH_1allow_GT = 1282,
		_BExpr10_SWITCH_0allow_GT = 1302,
		_BExpr10_SWITCH_1allow_GT = 1320,
		_BExpr4_SWITCH_0allow_GT = 1338,
		_BExpr4_SWITCH_1allow_GT = 1356,
		_BExpr5_SWITCH_0allow_GT = 1374,
		_BExpr5_SWITCH_1allow_GT = 1392,
		_BExpr6_SWITCH_0allow_GT = 1410,
		_BExpr6_SWITCH_1allow_GT = 1428,
		_BExpr7_SWITCH_0allow_GT = 1446,
		_BExpr7_SWITCH_1allow_GT = 1464,
		_BExpr8_SWITCH_0allow_GT = 1482,
		_BExpr8_SWITCH_1allow_GT = 1500,
		_BExpr9_SWITCH_0allow_GT = 1518,
		_BExpr9_SWITCH_1allow_GT = 1536,
		_BExpr_NoComma_SWITCH_0allow_GT = 1554,
		_BExpr_NoComma_SWITCH_1allow_GT = 1573,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1592,
		_Expr_Raw_SWITCH_1allow_GT = 1611,
		_ThrowExpr_SWITCH_1allow_GT = 1631,
		_ThrowExpr_SWITCH_0allow_GT = 1635,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1639,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1658,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1678,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1681,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1684,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1687,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1691,
		_FunctionParameter_LRI_Isolated_2 = 1695,
		_CatchParameter_LRI_Isolated_2 = 1701,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1707,
		_GenericParameter_LRI_Isolated_0 = 1713,
		_VarsDecl_LRI_Isolated_1 = 1716,
		_ForStatConditionPart_LRI_Isolated_0 = 1721,
		_Stat_LRI_Isolated_1 = 1727,
		_Stat_LRI_Isolated_2 = 1730,
		_Stat_LRI_Isolated_3 = 1733,
		_Stat_LRI_Isolated_4 = 1736,
		_Stat_LRI_Isolated_5 = 1739,
		_Stat_LRI_Isolated_6 = 1742,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1745,
		_Type_LRI_Isolated_2 = 1751,
		_GenericArgument_LRI_Original = 1757,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1762,
		_PostfixUnaryExpr_LRI_Original = 1767,
		_PrefixUnaryExpr_LRI_Original = 1799,
		_BExpr0_LRI_Original = 1804,
		_BExpr1_LRI_Original = 1813,
		_BExpr2_LRI_Original = 1825,
		_BExpr3_LRI_Original = 1834,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1843,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1846,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1858,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1873,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1882,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1891,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1897,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1903,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1909,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1915,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1921,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1927,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1933,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1939,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1945,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1951,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1994,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2037,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2043,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2046,
		_PM_PrimitiveType_LRI_Original = 2049,
		_PM_QualifiedName_LRI_Original = 2053,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2057,
		_ShortTypeBeforeDeclarator_LRI_Original = 2063,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 2067,
		_TypeBeforeDeclarator_LRI_Original = 2074,
		_VarWithoutInit_LRI_Original = 2081,
		_VarRequiredInit_LRI_Original = 2085,
		_FunctionParameter_LRI_Original = 2089,
		_CatchParameter_LRI_Original = 2096,
		_ExprOrVarWithInit_LRI_Original = 2103,
		_TypedGenericParameter_LRI_Original = 2110,
		_GenericParameter_LRI_Original = 2115,
		_VarsDeclWithoutKeyword_LRI_Original = 2120,
		_VarsDecl_LRI_Original = 2126,
		_Decl_LRI_Original = 2131,
		_ExprStat_LRI_Original = 2134,
		_IfStatConditionPart_LRI_Original = 2140,
		_ForStatConditionPart_LRI_Original = 2148,
		_Stat_LRI_Original = 2165,
		_TypeStartsWithKeyword_LRI_Original = 2175,
		_Type_LRI_Original = 2182,
		_Expr_NoComma_LRI_Original = 2189,
		_Expr_LRI_Original = 2192,
		_Expr_Argument_LRI_Original = 2195,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2200,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2203,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2207,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2210,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2214,
		_TypeOrExpr_LRI_Original = 2217,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif