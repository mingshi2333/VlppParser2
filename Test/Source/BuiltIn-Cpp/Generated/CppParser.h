/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 131,
		_GenericArgument = 136,
		_GenericArguments = 156,
		_QualifiedNameFragment = 162,
		_MemberQualifiedNameFragment = 169,
		_SingleLevelQualifiedName = 172,
		_NextLevelQualifiedName = 182,
		_QualifiedName = 188,
		_QualifiedNameAfterTypename = 193,
		_StringLiteralFragment = 199,
		_LambdaCaptureId = 203,
		_LambdaCapture = 213,
		_LambdaExpr = 223,
		_PrimitiveExpr = 232,
		_QualifiedName_PrimitiveExpr = 310,
		_PostfixUnaryExpr = 314,
		_NewPrefix = 328,
		_NewExpr = 333,
		_DeletePrefix = 345,
		_DeleteExpr = 350,
		_SizeOfPrefix = 358,
		_SizeofExpr = 362,
		_AllPrefixUnaryExpr_NoCStyleCast = 372,
		_AllPrefixUnaryExpr = 393,
		_PrefixUnaryExpr = 400,
		_MemberOperatorIdentifier = 415,
		_MemberOperatorQualifiedName = 420,
		_BExpr0 = 424,
		_BExpr1 = 440,
		_BExpr2 = 456,
		_BExpr3 = 472,
		_BExpr4 = 488,
		_PrimitiveTypeLiteral = 504,
		_PrimitiveType = 522,
		_PM_PrimitiveType = 537,
		_PM_QualifiedName = 540,
		_CallConstructibleTypeBeforeDeclarator = 543,
		_ShortTypeBeforeDeclarator = 548,
		_CallConstructibleType = 554,
		_TypeBeforeDeclarator = 564,
		_AdvancedTypeNoCVNoMember = 574,
		_AdvancedTypeCV = 587,
		_AdvancedTypeNoMember = 591,
		_AdvancedTypeMember = 595,
		_DeclaratorKeyword = 599,
		_DeclaratorAKFirst = 619,
		_DeclaratorAKFollow = 623,
		_DeclaratorAKCV = 627,
		_DeclaratorAKMember = 630,
		_DeclaratorFunctionParameters = 633,
		_FunctionKeyword = 645,
		_DeclaratorFunctionPart = 671,
		_DeclaratorFunctionPartOptionalParameters = 677,
		_DeclaratorArrayPart = 686,
		_DeclaratorId = 691,
		_DeclaratorBeforeInner = 695,
		_DeclaratorAfterInner = 702,
		_InnerDeclaratorWithoutName = 707,
		_InnerDeclaratorInnerOptionalName = 711,
		_InnerDeclaratorInnerRequiredName = 715,
		_DeclaratorInnerWithoutName = 719,
		_DeclaratorInnerOptionalName = 724,
		_DeclaratorInnerRequiredName = 732,
		_DeclaratorWithoutName = 740,
		_DeclaratorOptionalName = 748,
		_DeclaratorRequiredName = 756,
		_VarValueInit = 763,
		_VarNewParanInit = 767,
		_VarVarParanInit = 773,
		_VarBraceInit = 780,
		_VarCtorInit = 786,
		_VarInit = 790,
		_DeclaratorVariablePartWithoutInit = 795,
		_DeclaratorVariablePartOptionalInit = 798,
		_DeclaratorVariablePartRequiredInit = 802,
		_VarWithoutInit = 806,
		_VarRequiredInit = 816,
		_FunctionParameterVariablePart = 826,
		_FunctionParameter = 831,
		_CatchParameterVariablePart = 842,
		_CatchParameter = 845,
		_ExprOrVarWithInit = 856,
		_GenericParameterKeyword = 875,
		_OrdinaryGenericParameter = 882,
		_TypedGenericParameterInit = 889,
		_TypedGenericParameterVariablePart = 893,
		_TypedGenericParameter = 898,
		_GenericParameter = 908,
		_GenericHeader = 919,
		_VarsDeclWithoutKeyword = 925,
		_VarsDecl = 935,
		_OtherDecl = 946,
		_Decl = 954,
		_ExprStat = 966,
		_BlockStat = 988,
		_TryStatCatchPart = 993,
		_TryStat = 1001,
		___TryStat = 1007,
		_IfStatConditionPart = 1018,
		_IfStat = 1040,
		_ForStatConditionPart = 1048,
		_ForStat = 1069,
		_OtherStats = 1076,
		_Stat = 1118,
		_Type = 1146,
		_Expr_NoComma = 1157,
		_Expr = 1174,
		_Expr_Argument = 1192,
		_TypeOrExpr_NoComma_NoGT = 1210,
		_TypeOrExpr = 1228,
		_File = 1247,
		_BExpr5_SWITCH_COMBINED = 1261,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1277,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1288,
		_BExpr_SWITCH_1allow_GT = 1299,
		_BExpr10_SWITCH_0allow_GT = 1317,
		_BExpr10_SWITCH_1allow_GT = 1333,
		_BExpr11_SWITCH_0allow_GT = 1349,
		_BExpr11_SWITCH_1allow_GT = 1365,
		_BExpr5_SWITCH_0allow_GT = 1381,
		_BExpr5_SWITCH_1allow_GT = 1397,
		_BExpr6_SWITCH_0allow_GT = 1413,
		_BExpr6_SWITCH_1allow_GT = 1429,
		_BExpr7_SWITCH_0allow_GT = 1445,
		_BExpr7_SWITCH_1allow_GT = 1461,
		_BExpr8_SWITCH_0allow_GT = 1477,
		_BExpr8_SWITCH_1allow_GT = 1493,
		_BExpr9_SWITCH_0allow_GT = 1509,
		_BExpr9_SWITCH_1allow_GT = 1525,
		_BExpr_NoComma_SWITCH_0allow_GT = 1541,
		_BExpr_NoComma_SWITCH_1allow_GT = 1558,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1575,
		_Expr_Raw_SWITCH_1allow_GT = 1592,
		_ThrowExpr_SWITCH_1allow_GT = 1610,
		_ThrowExpr_SWITCH_0allow_GT = 1614,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1618,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1636,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1655,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1662,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1665,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1668,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1671,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1675,
		_FunctionParameter_LRI_Isolated_2 = 1679,
		_CatchParameter_LRI_Isolated_2 = 1685,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1691,
		_GenericParameter_LRI_Isolated_0 = 1697,
		_VarsDecl_LRI_Isolated_1 = 1700,
		_Decl_LRI_Isolated_1 = 1705,
		_ForStatConditionPart_LRI_Isolated_0 = 1708,
		_Stat_LRI_Isolated_1 = 1714,
		_Stat_LRI_Isolated_2 = 1717,
		_Stat_LRI_Isolated_3 = 1720,
		_Stat_LRI_Isolated_4 = 1723,
		_Stat_LRI_Isolated_5 = 1726,
		_Stat_LRI_Isolated_6 = 1729,
		_Type_LRI_Isolated_2 = 1732,
		_GenericArgument_LRI_Original = 1738,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1743,
		_PostfixUnaryExpr_LRI_Original = 1748,
		_PrefixUnaryExpr_LRI_Original = 1782,
		_BExpr0_LRI_Original = 1787,
		_BExpr1_LRI_Original = 1796,
		_BExpr2_LRI_Original = 1808,
		_BExpr3_LRI_Original = 1817,
		_BExpr4_LRI_Original = 1828,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 1834,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1837,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1851,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1868,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1877,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1886,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1892,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1898,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1904,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1910,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1916,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1922,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1928,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 1934,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 1940,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1946,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1993,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2040,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2046,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2049,
		_PM_PrimitiveType_LRI_Original = 2052,
		_PM_QualifiedName_LRI_Original = 2056,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2060,
		_ShortTypeBeforeDeclarator_LRI_Original = 2066,
		_CallConstructibleType_LRI_Original = 2070,
		_TypeBeforeDeclarator_LRI_Original = 2081,
		_VarWithoutInit_LRI_Original = 2088,
		_VarRequiredInit_LRI_Original = 2092,
		_FunctionParameter_LRI_Original = 2096,
		_CatchParameter_LRI_Original = 2103,
		_ExprOrVarWithInit_LRI_Original = 2110,
		_TypedGenericParameter_LRI_Original = 2117,
		_GenericParameter_LRI_Original = 2122,
		_VarsDeclWithoutKeyword_LRI_Original = 2127,
		_VarsDecl_LRI_Original = 2133,
		_Decl_LRI_Original = 2138,
		_ExprStat_LRI_Original = 2143,
		_IfStatConditionPart_LRI_Original = 2149,
		_ForStatConditionPart_LRI_Original = 2157,
		_Stat_LRI_Original = 2174,
		_Type_LRI_Original = 2184,
		_Expr_NoComma_LRI_Original = 2191,
		_Expr_LRI_Original = 2194,
		_Expr_Argument_LRI_Original = 2197,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2202,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2205,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2209,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2212,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2216,
		_TypeOrExpr_LRI_Original = 2219,
		_File_LRI_Original = 2222,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif