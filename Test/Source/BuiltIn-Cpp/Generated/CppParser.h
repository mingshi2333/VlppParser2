/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_OperatorTypeIdentifier = 131,
		_Identifier = 135,
		_GenericArgument = 140,
		_GenericArguments = 160,
		_QualifiedNameFragment = 166,
		_MemberQualifiedNameFragment = 173,
		_SingleLevelQualifiedName = 177,
		_NextLevelQualifiedName = 187,
		_QualifiedName = 193,
		_QualifiedNameAfterTypename = 198,
		_StringLiteralFragment = 204,
		_LambdaCaptureId = 208,
		_LambdaCapture = 218,
		_LambdaExpr = 228,
		_PrimitiveExpr = 237,
		_QualifiedName_PrimitiveExpr = 315,
		_PostfixUnaryExpr = 319,
		_NewPrefix = 333,
		_NewExpr = 338,
		_DeletePrefix = 350,
		_DeleteExpr = 355,
		_SizeOfPrefix = 363,
		_SizeofExpr = 367,
		_AllPrefixUnaryExpr_NoCStyleCast = 377,
		_AllPrefixUnaryExpr = 398,
		_PrefixUnaryExpr = 405,
		_MemberOperatorIdentifier = 420,
		_MemberOperatorQualifiedName = 425,
		_BExpr0 = 429,
		_BExpr1 = 445,
		_BExpr2 = 461,
		_BExpr3 = 477,
		_BExpr4 = 493,
		_PrimitiveTypeLiteral = 509,
		_PrimitiveType = 527,
		_PM_PrimitiveType = 542,
		_PM_QualifiedName = 545,
		_CallConstructibleTypeBeforeDeclarator = 548,
		_ShortTypeBeforeDeclarator = 553,
		_CallConstructibleType = 559,
		_TypeBeforeDeclarator = 569,
		_AdvancedTypeNoCVNoMember = 579,
		_AdvancedTypeCV = 592,
		_AdvancedTypeNoMember = 596,
		_AdvancedTypeMember = 600,
		_DeclaratorKeyword = 604,
		_DeclaratorAKFirst = 624,
		_DeclaratorAKFollow = 628,
		_DeclaratorAKCV = 632,
		_DeclaratorAKMember = 635,
		_DeclaratorAKCtorDtor = 638,
		_DeclaratorFunctionParameters = 642,
		_FunctionKeyword = 654,
		_DeclaratorFunctionPart = 680,
		_DeclaratorFunctionPartOptionalParameters = 686,
		_DeclaratorArrayPart = 695,
		_DeclaratorId = 700,
		_DeclaratorUntypedFuncId = 704,
		_DeclaratorBeforeInner = 709,
		_DeclaratorAfterInner = 716,
		_InnerDeclaratorWithoutName = 721,
		_InnerDeclaratorInnerOptionalName = 725,
		_InnerDeclaratorInnerRequiredName = 729,
		_DeclaratorInnerWithoutName = 733,
		_DeclaratorInnerOptionalName = 738,
		_DeclaratorInnerRequiredName = 750,
		_DeclaratorWithoutName = 762,
		_DeclaratorOptionalName = 770,
		_DeclaratorRequiredName = 778,
		_DeclaratorUntypedFunc = 785,
		_VarValueInit = 790,
		_VarNewParanInit = 794,
		_VarVarParanInit = 800,
		_VarBraceInit = 807,
		_VarCtorInit = 813,
		_VarStatInit = 817,
		_VarInit = 820,
		_DeclaratorVariablePartWithoutInit = 825,
		_DeclaratorVariablePartOptionalInit = 828,
		_DeclaratorVariablePartRequiredInit = 832,
		_DeclaratorUntypedFuncPartWithoutInit = 836,
		_DeclaratorUntypedFuncParRequiredInit = 839,
		_FunctionParameterVariablePart = 843,
		_FunctionParameter = 848,
		_CatchParameterVariablePart = 859,
		_CatchParameter = 862,
		_ExprOrVarWithInit = 873,
		_GenericParameterKeyword = 892,
		_OrdinaryGenericParameter = 899,
		_TypedGenericParameterInit = 906,
		_TypedGenericParameterVariablePart = 910,
		_TypedGenericParameter = 915,
		_GenericParameter = 925,
		_GenericHeader = 936,
		_VarWithoutInit = 942,
		_VarsDeclWithoutKeyword = 952,
		_VarsDecl = 962,
		_VarsFuncForwardDeclWithoutKeyword = 973,
		_VarsFuncForwardDecl = 984,
		_VarsFuncDeclWithoutKeyword = 996,
		_VarsFuncDecl = 1009,
		_ClassInheritanceFirst = 1023,
		_ClassInheritanceSecond = 1036,
		_ClassMemberPartFirst = 1049,
		_ClassMemberPartSecond = 1071,
		_ClassBody = 1082,
		_ClassDeclPrefix = 1092,
		_ClassDecl = 1100,
		_ClassForwardDecl = 1105,
		_StaticAssertDecl = 1109,
		_TypedefCompatibleDecl = 1117,
		_TypedefDecl = 1129,
		_ExternDecl = 1133,
		_NsName = 1140,
		_NsDecl = 1143,
		_EnumItem = 1151,
		_EnumBody = 1156,
		_EnumDecl = 1164,
		_EnumForwardDecl = 1170,
		_DeclWithoutVarsFuncSemicolon = 1175,
		_DeclInStat = 1183,
		_DeclWithSemicolon = 1196,
		_ExprStat = 1213,
		_BlockStat = 1237,
		_TryStatCatchPart = 1242,
		_TryStat = 1250,
		___TryStat = 1256,
		_IfStatConditionPart = 1267,
		_IfStat = 1289,
		_ForStatConditionPart = 1297,
		_ForStat = 1318,
		_OtherStats = 1325,
		_Stat = 1367,
		_Type = 1397,
		_Expr_NoComma = 1408,
		_Expr = 1425,
		_Expr_Argument = 1443,
		_TypeOrExpr_NoComma_NoGT = 1461,
		_TypeOrExpr = 1479,
		_File = 1498,
		_BExpr5_SWITCH_COMBINED = 1520,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1536,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1547,
		_BExpr_SWITCH_1allow_GT = 1558,
		_BExpr10_SWITCH_0allow_GT = 1576,
		_BExpr10_SWITCH_1allow_GT = 1592,
		_BExpr11_SWITCH_0allow_GT = 1608,
		_BExpr11_SWITCH_1allow_GT = 1624,
		_BExpr5_SWITCH_0allow_GT = 1640,
		_BExpr5_SWITCH_1allow_GT = 1656,
		_BExpr6_SWITCH_0allow_GT = 1672,
		_BExpr6_SWITCH_1allow_GT = 1688,
		_BExpr7_SWITCH_0allow_GT = 1704,
		_BExpr7_SWITCH_1allow_GT = 1720,
		_BExpr8_SWITCH_0allow_GT = 1736,
		_BExpr8_SWITCH_1allow_GT = 1752,
		_BExpr9_SWITCH_0allow_GT = 1768,
		_BExpr9_SWITCH_1allow_GT = 1784,
		_BExpr_NoComma_SWITCH_0allow_GT = 1800,
		_BExpr_NoComma_SWITCH_1allow_GT = 1817,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1834,
		_Expr_Raw_SWITCH_1allow_GT = 1851,
		_ThrowExpr_SWITCH_1allow_GT = 1869,
		_ThrowExpr_SWITCH_0allow_GT = 1873,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1877,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1895,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1914,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1921,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1924,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1927,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1930,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1934,
		_FunctionParameter_LRI_Isolated_2 = 1938,
		_CatchParameter_LRI_Isolated_2 = 1944,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1950,
		_GenericParameter_LRI_Isolated_0 = 1956,
		_VarsDecl_LRI_Isolated_1 = 1959,
		_VarsFuncForwardDeclWithoutKeyword_LRI_Isolated_1 = 1964,
		_VarsFuncForwardDecl_LRI_Isolated_1 = 1967,
		_VarsFuncDeclWithoutKeyword_LRI_Isolated_1 = 1972,
		_VarsFuncDecl_LRI_Isolated_1 = 1975,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 1980,
		_TypedefCompatibleDecl_LRI_Isolated_2 = 1983,
		_DeclInStat_LRI_Isolated_0 = 1986,
		_DeclWithSemicolon_LRI_Isolated_0 = 1989,
		_DeclWithSemicolon_LRI_Isolated_2 = 1993,
		_DeclWithSemicolon_LRI_Isolated_3 = 1996,
		_ForStatConditionPart_LRI_Isolated_0 = 1999,
		_Stat_LRI_Isolated_1 = 2005,
		_Stat_LRI_Isolated_2 = 2008,
		_Stat_LRI_Isolated_3 = 2011,
		_Stat_LRI_Isolated_4 = 2014,
		_Stat_LRI_Isolated_5 = 2017,
		_Stat_LRI_Isolated_6 = 2020,
		_Type_LRI_Isolated_2 = 2023,
		_GenericArgument_LRI_Original = 2029,
		_QualifiedName_PrimitiveExpr_LRI_Original = 2034,
		_PostfixUnaryExpr_LRI_Original = 2039,
		_PrefixUnaryExpr_LRI_Original = 2073,
		_BExpr0_LRI_Original = 2078,
		_BExpr1_LRI_Original = 2087,
		_BExpr2_LRI_Original = 2099,
		_BExpr3_LRI_Original = 2108,
		_BExpr4_LRI_Original = 2119,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2125,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2128,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2142,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2159,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2168,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2177,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2183,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2189,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2195,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2201,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2207,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2213,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2219,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2225,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2231,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2237,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2284,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2331,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2337,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2340,
		_PM_PrimitiveType_LRI_Original = 2343,
		_PM_QualifiedName_LRI_Original = 2347,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2351,
		_ShortTypeBeforeDeclarator_LRI_Original = 2357,
		_CallConstructibleType_LRI_Original = 2361,
		_TypeBeforeDeclarator_LRI_Original = 2372,
		_FunctionParameter_LRI_Original = 2379,
		_CatchParameter_LRI_Original = 2386,
		_ExprOrVarWithInit_LRI_Original = 2393,
		_TypedGenericParameter_LRI_Original = 2400,
		_GenericParameter_LRI_Original = 2405,
		_VarWithoutInit_LRI_Original = 2410,
		_VarsDeclWithoutKeyword_LRI_Original = 2414,
		_VarsDecl_LRI_Original = 2420,
		_VarsFuncForwardDeclWithoutKeyword_LRI_Original = 2425,
		_VarsFuncForwardDecl_LRI_Original = 2430,
		_VarsFuncDeclWithoutKeyword_LRI_Original = 2435,
		_VarsFuncDecl_LRI_Original = 2441,
		_ClassMemberPartFirst_LRI_Original = 2446,
		_TypedefCompatibleDecl_LRI_Original = 2450,
		_DeclInStat_LRI_Original = 2456,
		_DeclWithSemicolon_LRI_Original = 2461,
		_ExprStat_LRI_Original = 2468,
		_IfStatConditionPart_LRI_Original = 2474,
		_ForStatConditionPart_LRI_Original = 2482,
		_Stat_LRI_Original = 2499,
		_Type_LRI_Original = 2509,
		_Expr_NoComma_LRI_Original = 2516,
		_Expr_LRI_Original = 2519,
		_Expr_Argument_LRI_Original = 2522,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2527,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2530,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2534,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2537,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2541,
		_TypeOrExpr_LRI_Original = 2544,
		_File_LRI_Original = 2547,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif