/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 136,
		_QualifiedNameFragment = 142,
		_MemberQualifiedNameFragment = 149,
		_QualifiedName = 152,
		_StringLiteralFragment = 168,
		_PrimitiveExpr = 172,
		_QualifiedName_PrimitiveExpr = 249,
		_PostfixUnaryExpr = 253,
		_NewInit = 267,
		_NewPrefix = 283,
		_NewExpr = 288,
		_DeletePrefix = 297,
		_DeleteExpr = 302,
		_SizeOfPrefix = 310,
		_SizeofExpr = 314,
		_AllPrefixUnaryExpr_NoCStyleCast = 324,
		_AllPrefixUnaryExpr = 345,
		_PrefixUnaryExpr = 352,
		_MemberOperatorIdentifier = 366,
		_MemberOperatorQualifiedName = 371,
		_BExpr0 = 375,
		_BExpr1 = 389,
		_BExpr2 = 403,
		_BExpr3 = 417,
		_PrimitiveTypeLiteral = 431,
		_PrimitiveType = 449,
		_QualifiedName_PrimitiveType = 464,
		_ShortType = 468,
		_LongType = 474,
		_AdvancedTypeNoCVNoMember = 484,
		_AdvancedTypeCV = 497,
		_AdvancedTypeNoMember = 501,
		_AdvancedTypeMember = 505,
		_DeclaratorKeyword = 509,
		_DeclaratorAKFirst = 529,
		_DeclaratorAKFollow = 533,
		_DeclaratorAKCV = 537,
		_DeclaratorAKMember = 540,
		_DeclaratorFunctionParameter = 543,
		_DeclaratorFunctionParameters = 554,
		_FunctionKeyword = 566,
		_DeclaratorFunctionPart = 592,
		_DeclaratorArrayPart = 598,
		_DeclaratorId = 603,
		_DeclaratorBeforeInner = 607,
		_DeclaratorAfterInner = 614,
		_InnerDeclaratorWithoutName = 619,
		_InnerDeclaratorInnerOptionalName = 623,
		_DeclaratorInnerWithoutName = 627,
		_DeclaratorInnerOptionalName = 632,
		_DeclaratorWithoutName = 640,
		_DeclaratorOptionalName = 648,
		_Type = 656,
		_Expr_NoComma = 666,
		_Expr = 680,
		_Expr_Argument = 694,
		_TypeOrExpr_NoComma_NoGT = 708,
		_TypeOrExpr = 722,
		_File = 736,
		_BExpr4_SWITCH_COMBINED = 739,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 753,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 763,
		_BExpr_SWITCH_1allow_GT = 773,
		_BExpr10_SWITCH_0allow_GT = 787,
		_BExpr10_SWITCH_1allow_GT = 801,
		_BExpr4_SWITCH_0allow_GT = 815,
		_BExpr4_SWITCH_1allow_GT = 829,
		_BExpr5_SWITCH_0allow_GT = 843,
		_BExpr5_SWITCH_1allow_GT = 857,
		_BExpr6_SWITCH_0allow_GT = 871,
		_BExpr6_SWITCH_1allow_GT = 885,
		_BExpr7_SWITCH_0allow_GT = 899,
		_BExpr7_SWITCH_1allow_GT = 913,
		_BExpr8_SWITCH_0allow_GT = 927,
		_BExpr8_SWITCH_1allow_GT = 941,
		_BExpr9_SWITCH_0allow_GT = 955,
		_BExpr9_SWITCH_1allow_GT = 969,
		_BExpr_NoComma_SWITCH_0allow_GT = 983,
		_BExpr_NoComma_SWITCH_1allow_GT = 997,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1011,
		_Expr_Raw_SWITCH_1allow_GT = 1025,
		_ThrowExpr_SWITCH_1allow_GT = 1039,
		_ThrowExpr_SWITCH_0allow_GT = 1043,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1047,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1061,
		_ShortType_LRI_Isolated_1 = 1075,
		_ShortType_LRI_Isolated_2 = 1079,
		_DeclaratorFunctionParameter_LRI_Isolated_3 = 1083,
		_GenericArgument_LRI_Original = 1091,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1096,
		_PostfixUnaryExpr_LRI_Original = 1101,
		_PrefixUnaryExpr_LRI_Original = 1133,
		_BExpr0_LRI_Original = 1137,
		_BExpr1_LRI_Original = 1146,
		_BExpr2_LRI_Original = 1158,
		_BExpr3_LRI_Original = 1167,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1176,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1179,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1191,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1206,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1215,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1224,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1230,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1236,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1242,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1248,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1254,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1260,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1266,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1272,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1278,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1284,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1326,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1368,
		_QualifiedName_PrimitiveType_LRI_Original = 1374,
		_ShortType_LRI_Original = 1379,
		_LongType_LRI_Original = 1385,
		_DeclaratorFunctionParameter_LRI_Original = 1392,
		_Type_LRI_Original = 1404,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1409,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1412,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1415,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1418,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1422,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1425,
		_Expr_NoComma_LRI_Original = 1429,
		_Expr_LRI_Original = 1432,
		_Expr_Argument_LRI_Original = 1435,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1440,
		_TypeOrExpr_LRI_Original = 1443,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif