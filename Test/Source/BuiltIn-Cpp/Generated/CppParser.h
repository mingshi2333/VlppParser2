/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewInit = 275,
		_NewPrefix = 291,
		_NewExpr = 296,
		_DeletePrefix = 305,
		_DeleteExpr = 310,
		_SizeOfPrefix = 318,
		_SizeofExpr = 322,
		_AllPrefixUnaryExpr_NoCStyleCast = 332,
		_AllPrefixUnaryExpr = 353,
		_PrefixUnaryExpr = 360,
		_MemberOperatorIdentifier = 377,
		_MemberOperatorQualifiedName = 382,
		_BExpr0 = 386,
		_BExpr1 = 404,
		_BExpr2 = 422,
		_BExpr3 = 440,
		_PrimitiveTypeLiteral = 458,
		_PrimitiveType = 476,
		_PM_PrimitiveType = 491,
		_PM_QualifiedName = 494,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 497,
		_ShortTypeBeforeDeclarator = 502,
		_TypeStartsWithKeywordBeforeDeclarator = 508,
		_TypeBeforeDeclarator = 516,
		_AdvancedTypeNoCVNoMember = 526,
		_AdvancedTypeCV = 539,
		_AdvancedTypeNoMember = 543,
		_AdvancedTypeMember = 547,
		_DeclaratorKeyword = 551,
		_DeclaratorAKFirst = 571,
		_DeclaratorAKFollow = 575,
		_DeclaratorAKCV = 579,
		_DeclaratorAKMember = 582,
		_DeclaratorFunctionParameter = 585,
		_DeclaratorFunctionParameters = 608,
		_FunctionKeyword = 620,
		_DeclaratorFunctionPart = 646,
		_DeclaratorArrayPart = 652,
		_DeclaratorId = 657,
		_DeclaratorBeforeInner = 661,
		_DeclaratorAfterInner = 668,
		_InnerDeclaratorWithoutName = 673,
		_InnerDeclaratorInnerOptionalName = 677,
		_InnerDeclaratorInnerRequiredName = 681,
		_DeclaratorInnerWithoutName = 685,
		_DeclaratorInnerOptionalName = 690,
		_DeclaratorInnerRequiredName = 698,
		_DeclaratorWithoutName = 706,
		_DeclaratorOptionalName = 714,
		_DeclaratorRequiredName = 722,
		_SingleVarDeclOptionalName = 729,
		_ExprStat = 740,
		_OtherStats = 762,
		_Stat = 797,
		_TypeStartsWithKeyword = 820,
		_Type = 829,
		_Expr_NoComma = 840,
		_Expr = 859,
		_Expr_Argument = 879,
		_TypeOrExpr_NoComma_NoGT = 899,
		_TypeOrExpr = 918,
		_DeclVar = 938,
		_DeclVarOrExpr = 949,
		_File = 970,
		_BExpr4_SWITCH_COMBINED = 973,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 991,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1002,
		_BExpr_SWITCH_1allow_GT = 1013,
		_BExpr10_SWITCH_0allow_GT = 1033,
		_BExpr10_SWITCH_1allow_GT = 1051,
		_BExpr4_SWITCH_0allow_GT = 1069,
		_BExpr4_SWITCH_1allow_GT = 1087,
		_BExpr5_SWITCH_0allow_GT = 1105,
		_BExpr5_SWITCH_1allow_GT = 1123,
		_BExpr6_SWITCH_0allow_GT = 1141,
		_BExpr6_SWITCH_1allow_GT = 1159,
		_BExpr7_SWITCH_0allow_GT = 1177,
		_BExpr7_SWITCH_1allow_GT = 1195,
		_BExpr8_SWITCH_0allow_GT = 1213,
		_BExpr8_SWITCH_1allow_GT = 1231,
		_BExpr9_SWITCH_0allow_GT = 1249,
		_BExpr9_SWITCH_1allow_GT = 1267,
		_BExpr_NoComma_SWITCH_0allow_GT = 1285,
		_BExpr_NoComma_SWITCH_1allow_GT = 1304,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1323,
		_Expr_Raw_SWITCH_1allow_GT = 1342,
		_ThrowExpr_SWITCH_1allow_GT = 1362,
		_ThrowExpr_SWITCH_0allow_GT = 1366,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1370,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1389,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1409,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1412,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1415,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1418,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1422,
		_SingleVarDeclOptionalName_LRI_Isolated_2 = 1426,
		_Stat_LRI_Isolated_1 = 1434,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1437,
		_Type_LRI_Isolated_2 = 1443,
		_DeclVar_LRI_Isolated_1 = 1449,
		_GenericArgument_LRI_Original = 1455,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1460,
		_PostfixUnaryExpr_LRI_Original = 1465,
		_PrefixUnaryExpr_LRI_Original = 1497,
		_BExpr0_LRI_Original = 1502,
		_BExpr1_LRI_Original = 1511,
		_BExpr2_LRI_Original = 1523,
		_BExpr3_LRI_Original = 1532,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1541,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1544,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1556,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1571,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1580,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1589,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1595,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1601,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1607,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1613,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1619,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1625,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1631,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1637,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1643,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1649,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1692,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1735,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1741,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1744,
		_PM_PrimitiveType_LRI_Original = 1747,
		_PM_QualifiedName_LRI_Original = 1751,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1755,
		_ShortTypeBeforeDeclarator_LRI_Original = 1761,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1765,
		_TypeBeforeDeclarator_LRI_Original = 1772,
		_DeclaratorFunctionParameter_LRI_Original = 1779,
		_SingleVarDeclOptionalName_LRI_Original = 1783,
		_ExprStat_LRI_Original = 1794,
		_Stat_LRI_Original = 1798,
		_TypeStartsWithKeyword_LRI_Original = 1803,
		_Type_LRI_Original = 1810,
		_Expr_NoComma_LRI_Original = 1817,
		_Expr_LRI_Original = 1820,
		_Expr_Argument_LRI_Original = 1823,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1828,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1831,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1835,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1838,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1842,
		_TypeOrExpr_LRI_Original = 1845,
		_DeclVar_LRI_Original = 1848,
		_DeclVarOrExpr_LRI_Original = 1854,
		_SingleVarDeclOptionalName__TypeBeforeDeclarator_LRI_Prefix = 1858,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_DeclVarOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_DeclVarOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif