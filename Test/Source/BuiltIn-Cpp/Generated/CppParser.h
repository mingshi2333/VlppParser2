/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifierNewArray = 20,
		_OperatorIdentifierDeleteArray = 24,
		_OperatorIdentifier = 28,
		_Identifier = 131,
		_GenericArgument = 136,
		_GenericArguments = 156,
		_QualifiedNameFragment = 162,
		_MemberQualifiedNameFragment = 169,
		_SingleLevelQualifiedName = 172,
		_NextLevelQualifiedName = 182,
		_QualifiedName = 188,
		_QualifiedNameAfterTypename = 193,
		_StringLiteralFragment = 199,
		_LambdaCaptureId = 203,
		_LambdaCapture = 213,
		_LambdaExpr = 223,
		_PrimitiveExpr = 232,
		_QualifiedName_PrimitiveExpr = 310,
		_PostfixUnaryExpr = 314,
		_NewPrefix = 328,
		_NewExpr = 333,
		_DeletePrefix = 345,
		_DeleteExpr = 350,
		_SizeOfPrefix = 358,
		_SizeofExpr = 362,
		_AllPrefixUnaryExpr_NoCStyleCast = 372,
		_AllPrefixUnaryExpr = 393,
		_PrefixUnaryExpr = 400,
		_MemberOperatorIdentifier = 415,
		_MemberOperatorQualifiedName = 420,
		_BExpr0 = 424,
		_BExpr1 = 440,
		_BExpr2 = 456,
		_BExpr3 = 472,
		_BExpr4 = 488,
		_PrimitiveTypeLiteral = 504,
		_PrimitiveType = 522,
		_PM_PrimitiveType = 537,
		_PM_QualifiedName = 540,
		_CallConstructibleTypeBeforeDeclarator = 543,
		_ShortTypeBeforeDeclarator = 548,
		_CallConstructibleType = 554,
		_TypeBeforeDeclarator = 564,
		_AdvancedTypeNoCVNoMember = 574,
		_AdvancedTypeCV = 587,
		_AdvancedTypeNoMember = 591,
		_AdvancedTypeMember = 595,
		_DeclaratorKeyword = 599,
		_DeclaratorAKFirst = 618,
		_DeclaratorAKFollow = 622,
		_DeclaratorAKCV = 626,
		_DeclaratorAKMember = 629,
		_DeclaratorFunctionParameters = 632,
		_FunctionKeyword = 644,
		_DeclaratorFunctionPart = 670,
		_DeclaratorFunctionPartOptionalParameters = 676,
		_DeclaratorArrayPart = 685,
		_DeclaratorId = 690,
		_DeclaratorBeforeInner = 694,
		_DeclaratorAfterInner = 701,
		_InnerDeclaratorWithoutName = 706,
		_InnerDeclaratorInnerOptionalName = 710,
		_InnerDeclaratorInnerRequiredName = 714,
		_DeclaratorInnerWithoutName = 718,
		_DeclaratorInnerOptionalName = 723,
		_DeclaratorInnerRequiredName = 731,
		_DeclaratorWithoutName = 739,
		_DeclaratorOptionalName = 747,
		_DeclaratorRequiredName = 755,
		_VarValueInit = 762,
		_VarNewParanInit = 766,
		_VarVarParanInit = 772,
		_VarBraceInit = 779,
		_VarCtorInit = 785,
		_VarInit = 789,
		_DeclaratorVariablePartWithoutInit = 794,
		_DeclaratorVariablePartOptionalInit = 797,
		_DeclaratorVariablePartRequiredInit = 801,
		_VarWithoutInit = 805,
		_VarRequiredInit = 815,
		_FunctionParameterVariablePart = 825,
		_FunctionParameter = 830,
		_CatchParameterVariablePart = 841,
		_CatchParameter = 844,
		_ExprOrVarWithInit = 855,
		_GenericParameterKeyword = 874,
		_OrdinaryGenericParameter = 881,
		_TypedGenericParameterInit = 888,
		_TypedGenericParameterVariablePart = 892,
		_TypedGenericParameter = 897,
		_GenericParameter = 907,
		_GenericHeader = 918,
		_VarsDeclWithoutKeyword = 924,
		_VarsDecl = 934,
		_ClassInheritanceFirst = 945,
		_ClassInheritanceSecond = 958,
		_ClassMemberPart = 971,
		_ClassBody = 988,
		_ClassDeclPartial = 997,
		_ClassDeclInTypedef = 1001,
		_ClassDecl = 1012,
		_NsName = 1023,
		_NsDecl = 1026,
		_TypedefCompatibleDecl = 1034,
		_TypedefDecl = 1045,
		_FriendDecl = 1049,
		_StaticAssertDecl = 1053,
		_EnumItem = 1061,
		_EnumBody = 1066,
		_EnumDeclPartial = 1074,
		_EnumDecl = 1078,
		_OtherDecl = 1089,
		_Decl = 1096,
		_DeclWithSemicolon = 1108,
		_ExprStat = 1122,
		_BlockStat = 1144,
		_TryStatCatchPart = 1149,
		_TryStat = 1157,
		___TryStat = 1163,
		_IfStatConditionPart = 1174,
		_IfStat = 1196,
		_ForStatConditionPart = 1204,
		_ForStat = 1225,
		_OtherStats = 1232,
		_Stat = 1274,
		_Type = 1302,
		_Expr_NoComma = 1313,
		_Expr = 1330,
		_Expr_Argument = 1348,
		_TypeOrExpr_NoComma_NoGT = 1366,
		_TypeOrExpr = 1384,
		_File = 1403,
		_BExpr5_SWITCH_COMBINED = 1417,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1433,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1444,
		_BExpr_SWITCH_1allow_GT = 1455,
		_BExpr10_SWITCH_0allow_GT = 1473,
		_BExpr10_SWITCH_1allow_GT = 1489,
		_BExpr11_SWITCH_0allow_GT = 1505,
		_BExpr11_SWITCH_1allow_GT = 1521,
		_BExpr5_SWITCH_0allow_GT = 1537,
		_BExpr5_SWITCH_1allow_GT = 1553,
		_BExpr6_SWITCH_0allow_GT = 1569,
		_BExpr6_SWITCH_1allow_GT = 1585,
		_BExpr7_SWITCH_0allow_GT = 1601,
		_BExpr7_SWITCH_1allow_GT = 1617,
		_BExpr8_SWITCH_0allow_GT = 1633,
		_BExpr8_SWITCH_1allow_GT = 1649,
		_BExpr9_SWITCH_0allow_GT = 1665,
		_BExpr9_SWITCH_1allow_GT = 1681,
		_BExpr_NoComma_SWITCH_0allow_GT = 1697,
		_BExpr_NoComma_SWITCH_1allow_GT = 1714,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1731,
		_Expr_Raw_SWITCH_1allow_GT = 1748,
		_ThrowExpr_SWITCH_1allow_GT = 1766,
		_ThrowExpr_SWITCH_0allow_GT = 1770,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1774,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1792,
		_PostfixUnaryExpr_LRI_Isolated_1 = 1811,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1818,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1821,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1824,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_1 = 1827,
		_CallConstructibleTypeBeforeDeclarator_LRI_Isolated_2 = 1831,
		_FunctionParameter_LRI_Isolated_2 = 1835,
		_CatchParameter_LRI_Isolated_2 = 1841,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1847,
		_GenericParameter_LRI_Isolated_0 = 1853,
		_VarsDecl_LRI_Isolated_1 = 1856,
		_ClassMemberPart_LRI_Isolated_1 = 1861,
		_ClassMemberPart_LRI_Isolated_2 = 1866,
		_ClassMemberPart_LRI_Isolated_3 = 1871,
		_TypedefCompatibleDecl_LRI_Isolated_1 = 1876,
		_Decl_LRI_Isolated_1 = 1879,
		_ForStatConditionPart_LRI_Isolated_0 = 1882,
		_Stat_LRI_Isolated_1 = 1888,
		_Stat_LRI_Isolated_2 = 1891,
		_Stat_LRI_Isolated_3 = 1894,
		_Stat_LRI_Isolated_4 = 1897,
		_Stat_LRI_Isolated_5 = 1900,
		_Stat_LRI_Isolated_6 = 1903,
		_Type_LRI_Isolated_2 = 1906,
		_GenericArgument_LRI_Original = 1912,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1917,
		_PostfixUnaryExpr_LRI_Original = 1922,
		_PrefixUnaryExpr_LRI_Original = 1956,
		_BExpr0_LRI_Original = 1961,
		_BExpr1_LRI_Original = 1970,
		_BExpr2_LRI_Original = 1982,
		_BExpr3_LRI_Original = 1991,
		_BExpr4_LRI_Original = 2002,
		_BExpr5_SWITCH_COMBINED_LRI_Original = 2008,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 2011,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 2025,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 2042,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 2051,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 2060,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 2066,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 2072,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 2078,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 2084,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 2090,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 2096,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 2102,
		_BExpr11_SWITCH_0allow_GT_LRI_Original = 2108,
		_BExpr11_SWITCH_1allow_GT_LRI_Original = 2114,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 2120,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 2167,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 2214,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 2220,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 2223,
		_PM_PrimitiveType_LRI_Original = 2226,
		_PM_QualifiedName_LRI_Original = 2230,
		_CallConstructibleTypeBeforeDeclarator_LRI_Original = 2234,
		_ShortTypeBeforeDeclarator_LRI_Original = 2240,
		_CallConstructibleType_LRI_Original = 2244,
		_TypeBeforeDeclarator_LRI_Original = 2255,
		_VarWithoutInit_LRI_Original = 2262,
		_VarRequiredInit_LRI_Original = 2266,
		_FunctionParameter_LRI_Original = 2270,
		_CatchParameter_LRI_Original = 2277,
		_ExprOrVarWithInit_LRI_Original = 2284,
		_TypedGenericParameter_LRI_Original = 2291,
		_GenericParameter_LRI_Original = 2296,
		_VarsDeclWithoutKeyword_LRI_Original = 2301,
		_VarsDecl_LRI_Original = 2307,
		_ClassMemberPart_LRI_Original = 2312,
		_TypedefCompatibleDecl_LRI_Original = 2320,
		_Decl_LRI_Original = 2325,
		_DeclWithSemicolon_LRI_Original = 2330,
		_ExprStat_LRI_Original = 2334,
		_IfStatConditionPart_LRI_Original = 2340,
		_ForStatConditionPart_LRI_Original = 2348,
		_Stat_LRI_Original = 2365,
		_Type_LRI_Original = 2375,
		_Expr_NoComma_LRI_Original = 2382,
		_Expr_LRI_Original = 2385,
		_Expr_Argument_LRI_Original = 2388,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 2393,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 2396,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 2400,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 2403,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 2407,
		_TypeOrExpr_LRI_Original = 2410,
		_File_LRI_Original = 2413,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppBlockStat> Parse_Stat_LRI_Isolated_1(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTryStat> Parse_Stat_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::Cpp__TryStat> Parse_Stat_LRI_Isolated_3(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppIfElseStat> Parse_Stat_LRI_Isolated_4(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppForStat> Parse_Stat_LRI_Isolated_5(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Isolated_6(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppDeclaratorType> Parse_Type_LRI_Isolated_2(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif