/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 289,
		_DeleteExpr = 294,
		_SizeOfPrefix = 302,
		_SizeofExpr = 306,
		_AllPrefixUnaryExpr_NoCStyleCast = 316,
		_AllPrefixUnaryExpr = 337,
		_PrefixUnaryExpr = 344,
		_MemberOperatorIdentifier = 361,
		_MemberOperatorQualifiedName = 366,
		_BExpr0 = 370,
		_BExpr1 = 388,
		_BExpr2 = 406,
		_BExpr3 = 424,
		_PrimitiveTypeLiteral = 442,
		_PrimitiveType = 460,
		_PM_PrimitiveType = 475,
		_PM_QualifiedName = 478,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 481,
		_ShortTypeBeforeDeclarator = 486,
		_TypeStartsWithKeywordBeforeDeclarator = 492,
		_TypeBeforeDeclarator = 500,
		_AdvancedTypeNoCVNoMember = 510,
		_AdvancedTypeCV = 523,
		_AdvancedTypeNoMember = 527,
		_AdvancedTypeMember = 531,
		_DeclaratorKeyword = 535,
		_DeclaratorAKFirst = 555,
		_DeclaratorAKFollow = 559,
		_DeclaratorAKCV = 563,
		_DeclaratorAKMember = 566,
		_DeclaratorFunctionParameters = 569,
		_FunctionKeyword = 581,
		_DeclaratorFunctionPart = 607,
		_DeclaratorArrayPart = 613,
		_DeclaratorId = 618,
		_DeclaratorBeforeInner = 622,
		_DeclaratorAfterInner = 629,
		_InnerDeclaratorWithoutName = 634,
		_InnerDeclaratorInnerOptionalName = 638,
		_InnerDeclaratorInnerRequiredName = 642,
		_DeclaratorInnerWithoutName = 646,
		_DeclaratorInnerOptionalName = 651,
		_DeclaratorInnerRequiredName = 659,
		_DeclaratorWithoutName = 667,
		_DeclaratorOptionalName = 675,
		_DeclaratorRequiredName = 683,
		_VarValueInit = 690,
		_VarCtorInit = 694,
		_VarInit = 704,
		_FunctionParameter = 708,
		_ExprOrVarWithInit = 719,
		_ExprStat = 740,
		_OtherStats = 760,
		_Stat = 795,
		_TypeStartsWithKeyword = 816,
		_Type = 825,
		_Expr_NoComma = 836,
		_Expr = 855,
		_Expr_Argument = 875,
		_TypeOrExpr_NoComma_NoGT = 895,
		_TypeOrExpr = 914,
		_File = 934,
		_BExpr4_SWITCH_COMBINED = 937,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 955,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 966,
		_BExpr_SWITCH_1allow_GT = 977,
		_BExpr10_SWITCH_0allow_GT = 997,
		_BExpr10_SWITCH_1allow_GT = 1015,
		_BExpr4_SWITCH_0allow_GT = 1033,
		_BExpr4_SWITCH_1allow_GT = 1051,
		_BExpr5_SWITCH_0allow_GT = 1069,
		_BExpr5_SWITCH_1allow_GT = 1087,
		_BExpr6_SWITCH_0allow_GT = 1105,
		_BExpr6_SWITCH_1allow_GT = 1123,
		_BExpr7_SWITCH_0allow_GT = 1141,
		_BExpr7_SWITCH_1allow_GT = 1159,
		_BExpr8_SWITCH_0allow_GT = 1177,
		_BExpr8_SWITCH_1allow_GT = 1195,
		_BExpr9_SWITCH_0allow_GT = 1213,
		_BExpr9_SWITCH_1allow_GT = 1231,
		_BExpr_NoComma_SWITCH_0allow_GT = 1249,
		_BExpr_NoComma_SWITCH_1allow_GT = 1268,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1287,
		_Expr_Raw_SWITCH_1allow_GT = 1306,
		_ThrowExpr_SWITCH_1allow_GT = 1326,
		_ThrowExpr_SWITCH_0allow_GT = 1330,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1334,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1353,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1373,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1376,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1379,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1382,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1386,
		_FunctionParameter_LRI_Isolated_3 = 1390,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1397,
		_Stat_LRI_Isolated_1 = 1404,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1407,
		_Type_LRI_Isolated_2 = 1413,
		_GenericArgument_LRI_Original = 1419,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1424,
		_PostfixUnaryExpr_LRI_Original = 1429,
		_PrefixUnaryExpr_LRI_Original = 1461,
		_BExpr0_LRI_Original = 1466,
		_BExpr1_LRI_Original = 1475,
		_BExpr2_LRI_Original = 1487,
		_BExpr3_LRI_Original = 1496,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1505,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1508,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1520,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1535,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1544,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1553,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1559,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1565,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1571,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1577,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1583,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1589,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1595,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1601,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1607,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1613,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1656,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1699,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1705,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1708,
		_PM_PrimitiveType_LRI_Original = 1711,
		_PM_QualifiedName_LRI_Original = 1715,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1719,
		_ShortTypeBeforeDeclarator_LRI_Original = 1725,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1729,
		_TypeBeforeDeclarator_LRI_Original = 1736,
		_FunctionParameter_LRI_Original = 1743,
		_ExprOrVarWithInit_LRI_Original = 1753,
		_ExprStat_LRI_Original = 1761,
		_Stat_LRI_Original = 1765,
		_TypeStartsWithKeyword_LRI_Original = 1770,
		_Type_LRI_Original = 1777,
		_Expr_NoComma_LRI_Original = 1784,
		_Expr_LRI_Original = 1787,
		_Expr_Argument_LRI_Original = 1790,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1795,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1798,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1802,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1805,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1809,
		_TypeOrExpr_LRI_Original = 1812,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif