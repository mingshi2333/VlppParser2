/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_CPP_PARSER_SYNTAX

#include "Cpp_Assembler.h"
#include "Cpp_Lexer.h"

namespace cpp_parser
{
	enum class ParserStates
	{
		_NameIdentifier = 0,
		_DtorIdentifier = 3,
		_TypeIdentifier = 7,
		_OperatorIdentifier = 20,
		_Identifier = 117,
		_GenericArgument = 122,
		_GenericArguments = 142,
		_QualifiedNameFragment = 148,
		_MemberQualifiedNameFragment = 155,
		_QualifiedName = 158,
		_StringLiteralFragment = 174,
		_PrimitiveExpr = 178,
		_QualifiedName_PrimitiveExpr = 255,
		_PostfixUnaryExpr = 259,
		_NewPrefix = 275,
		_NewExpr = 280,
		_DeletePrefix = 292,
		_DeleteExpr = 297,
		_SizeOfPrefix = 305,
		_SizeofExpr = 309,
		_AllPrefixUnaryExpr_NoCStyleCast = 319,
		_AllPrefixUnaryExpr = 340,
		_PrefixUnaryExpr = 347,
		_MemberOperatorIdentifier = 364,
		_MemberOperatorQualifiedName = 369,
		_BExpr0 = 373,
		_BExpr1 = 391,
		_BExpr2 = 409,
		_BExpr3 = 427,
		_PrimitiveTypeLiteral = 445,
		_PrimitiveType = 463,
		_PM_PrimitiveType = 478,
		_PM_QualifiedName = 481,
		_ShortTypeStartsWithKeywordBeforeDeclarator = 484,
		_ShortTypeBeforeDeclarator = 489,
		_TypeStartsWithKeywordBeforeDeclarator = 495,
		_TypeBeforeDeclarator = 503,
		_AdvancedTypeNoCVNoMember = 513,
		_AdvancedTypeCV = 526,
		_AdvancedTypeNoMember = 530,
		_AdvancedTypeMember = 534,
		_DeclaratorKeyword = 538,
		_DeclaratorAKFirst = 558,
		_DeclaratorAKFollow = 562,
		_DeclaratorAKCV = 566,
		_DeclaratorAKMember = 569,
		_DeclaratorFunctionParameters = 572,
		_FunctionKeyword = 584,
		_DeclaratorFunctionPart = 610,
		_DeclaratorArrayPart = 616,
		_DeclaratorId = 621,
		_DeclaratorBeforeInner = 625,
		_DeclaratorAfterInner = 632,
		_InnerDeclaratorWithoutName = 637,
		_InnerDeclaratorInnerOptionalName = 641,
		_InnerDeclaratorInnerRequiredName = 645,
		_DeclaratorInnerWithoutName = 649,
		_DeclaratorInnerOptionalName = 654,
		_DeclaratorInnerRequiredName = 662,
		_DeclaratorWithoutName = 670,
		_DeclaratorOptionalName = 678,
		_DeclaratorRequiredName = 686,
		_VarValueInit = 693,
		_VarCtorInit = 697,
		_VarInit = 707,
		_FunctionParameterVariablePart = 711,
		_DeclaratorVariablePartOptionalInit = 716,
		_DeclaratorVariablePartRequiredInit = 720,
		_FunctionParameter = 724,
		_ExprOrVarWithInit = 735,
		_VarsDeclWithoutKeyword = 756,
		_VarsDecl = 766,
		_Decl = 777,
		_ExprStat = 788,
		_OtherStats = 810,
		_Stat = 845,
		_TypeStartsWithKeyword = 868,
		_Type = 877,
		_Expr_NoComma = 888,
		_Expr = 907,
		_Expr_Argument = 927,
		_TypeOrExpr_NoComma_NoGT = 947,
		_TypeOrExpr = 966,
		_File = 986,
		_BExpr4_SWITCH_COMBINED = 989,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED = 1007,
		_TypeOrExpr_Raw_SWITCH_COMBINED = 1018,
		_BExpr_SWITCH_1allow_GT = 1029,
		_BExpr10_SWITCH_0allow_GT = 1049,
		_BExpr10_SWITCH_1allow_GT = 1067,
		_BExpr4_SWITCH_0allow_GT = 1085,
		_BExpr4_SWITCH_1allow_GT = 1103,
		_BExpr5_SWITCH_0allow_GT = 1121,
		_BExpr5_SWITCH_1allow_GT = 1139,
		_BExpr6_SWITCH_0allow_GT = 1157,
		_BExpr6_SWITCH_1allow_GT = 1175,
		_BExpr7_SWITCH_0allow_GT = 1193,
		_BExpr7_SWITCH_1allow_GT = 1211,
		_BExpr8_SWITCH_0allow_GT = 1229,
		_BExpr8_SWITCH_1allow_GT = 1247,
		_BExpr9_SWITCH_0allow_GT = 1265,
		_BExpr9_SWITCH_1allow_GT = 1283,
		_BExpr_NoComma_SWITCH_0allow_GT = 1301,
		_BExpr_NoComma_SWITCH_1allow_GT = 1320,
		_Expr_NoComma_Raw_SWITCH_1allow_GT = 1339,
		_Expr_Raw_SWITCH_1allow_GT = 1358,
		_ThrowExpr_SWITCH_1allow_GT = 1378,
		_ThrowExpr_SWITCH_0allow_GT = 1382,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT = 1386,
		_TypeOrExpr_Raw_SWITCH_1allow_GT = 1405,
		_PrefixUnaryExpr_LRI_Isolated_1 = 1425,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Isolated_1 = 1428,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Isolated_1 = 1431,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_1 = 1434,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Isolated_2 = 1438,
		_FunctionParameter_LRI_Isolated_2 = 1442,
		_ExprOrVarWithInit_LRI_Isolated_2 = 1448,
		_VarsDecl_LRI_Isolated_1 = 1454,
		_Stat_LRI_Isolated_1 = 1459,
		_TypeStartsWithKeyword_LRI_Isolated_2 = 1462,
		_Type_LRI_Isolated_2 = 1468,
		_GenericArgument_LRI_Original = 1474,
		_QualifiedName_PrimitiveExpr_LRI_Original = 1479,
		_PostfixUnaryExpr_LRI_Original = 1484,
		_PrefixUnaryExpr_LRI_Original = 1516,
		_BExpr0_LRI_Original = 1521,
		_BExpr1_LRI_Original = 1530,
		_BExpr2_LRI_Original = 1542,
		_BExpr3_LRI_Original = 1551,
		_BExpr4_SWITCH_COMBINED_LRI_Original = 1560,
		_BExpr4_SWITCH_0allow_GT_LRI_Original = 1563,
		_BExpr4_SWITCH_1allow_GT_LRI_Original = 1575,
		_BExpr5_SWITCH_0allow_GT_LRI_Original = 1590,
		_BExpr5_SWITCH_1allow_GT_LRI_Original = 1599,
		_BExpr6_SWITCH_0allow_GT_LRI_Original = 1608,
		_BExpr6_SWITCH_1allow_GT_LRI_Original = 1614,
		_BExpr7_SWITCH_0allow_GT_LRI_Original = 1620,
		_BExpr7_SWITCH_1allow_GT_LRI_Original = 1626,
		_BExpr8_SWITCH_0allow_GT_LRI_Original = 1632,
		_BExpr8_SWITCH_1allow_GT_LRI_Original = 1638,
		_BExpr9_SWITCH_0allow_GT_LRI_Original = 1644,
		_BExpr9_SWITCH_1allow_GT_LRI_Original = 1650,
		_BExpr10_SWITCH_0allow_GT_LRI_Original = 1656,
		_BExpr10_SWITCH_1allow_GT_LRI_Original = 1662,
		_BExpr_NoComma_SWITCH_0allow_GT_LRI_Original = 1668,
		_BExpr_NoComma_SWITCH_1allow_GT_LRI_Original = 1711,
		_BExpr_SWITCH_1allow_GT_LRI_Original = 1754,
		_Expr_NoComma_Raw_SWITCH_1allow_GT_LRI_Original = 1760,
		_Expr_Raw_SWITCH_1allow_GT_LRI_Original = 1763,
		_PM_PrimitiveType_LRI_Original = 1766,
		_PM_QualifiedName_LRI_Original = 1770,
		_ShortTypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1774,
		_ShortTypeBeforeDeclarator_LRI_Original = 1780,
		_TypeStartsWithKeywordBeforeDeclarator_LRI_Original = 1784,
		_TypeBeforeDeclarator_LRI_Original = 1791,
		_FunctionParameter_LRI_Original = 1798,
		_ExprOrVarWithInit_LRI_Original = 1805,
		_VarsDeclWithoutKeyword_LRI_Original = 1812,
		_VarsDecl_LRI_Original = 1818,
		_Decl_LRI_Original = 1823,
		_ExprStat_LRI_Original = 1826,
		_Stat_LRI_Original = 1832,
		_TypeStartsWithKeyword_LRI_Original = 1837,
		_Type_LRI_Original = 1844,
		_Expr_NoComma_LRI_Original = 1851,
		_Expr_LRI_Original = 1854,
		_Expr_Argument_LRI_Original = 1857,
		_TypeOrExpr_NoComma_Raw_SWITCH_COMBINED_LRI_Original = 1862,
		_TypeOrExpr_NoComma_Raw_SWITCH_0allow_GT_LRI_Original = 1865,
		_TypeOrExpr_Raw_SWITCH_COMBINED_LRI_Original = 1869,
		_TypeOrExpr_Raw_SWITCH_1allow_GT_LRI_Original = 1872,
		_TypeOrExpr_NoComma_NoGT_LRI_Original = 1876,
		_TypeOrExpr_LRI_Original = 1879,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void CppParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<CppTokens, ParserStates, CppAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppStatement> Parse_Stat(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_Expr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppTypeOrExpr> Parse_TypeOrExpr(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<cpp_parser::CppFile> Parse_File(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif