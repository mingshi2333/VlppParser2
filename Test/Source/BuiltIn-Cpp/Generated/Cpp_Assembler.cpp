/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "Cpp_Assembler.h"

namespace cpp_parser
{

/***********************************************************************
CppAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> CppAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = CppCppTypeName((CppClasses)type);
		switch((CppClasses)type)
		{
		case CppClasses::AdvancedType:
			return vl::Ptr(new cpp_parser::CppAdvancedType);
		case CppClasses::BinaryExpr:
			return vl::Ptr(new cpp_parser::CppBinaryExpr);
		case CppClasses::BlockStat:
			return vl::Ptr(new cpp_parser::CppBlockStat);
		case CppClasses::BraceExpr:
			return vl::Ptr(new cpp_parser::CppBraceExpr);
		case CppClasses::BreakStat:
			return vl::Ptr(new cpp_parser::CppBreakStat);
		case CppClasses::CallExpr:
			return vl::Ptr(new cpp_parser::CppCallExpr);
		case CppClasses::CaseStat:
			return vl::Ptr(new cpp_parser::CppCaseStat);
		case CppClasses::CastExpr:
			return vl::Ptr(new cpp_parser::CppCastExpr);
		case CppClasses::ClassBody:
			return vl::Ptr(new cpp_parser::CppClassBody);
		case CppClasses::ClassDeclaration:
			return vl::Ptr(new cpp_parser::CppClassDeclaration);
		case CppClasses::ClassInheritance:
			return vl::Ptr(new cpp_parser::CppClassInheritance);
		case CppClasses::ClassMemberPart:
			return vl::Ptr(new cpp_parser::CppClassMemberPart);
		case CppClasses::ConstType:
			return vl::Ptr(new cpp_parser::CppConstType);
		case CppClasses::ContinueStat:
			return vl::Ptr(new cpp_parser::CppContinueStat);
		case CppClasses::DeclStat:
			return vl::Ptr(new cpp_parser::CppDeclStat);
		case CppClasses::DeclarationToResolve:
			return vl::Ptr(new cpp_parser::CppDeclarationToResolve);
		case CppClasses::Declarator:
			return vl::Ptr(new cpp_parser::CppDeclarator);
		case CppClasses::DeclaratorArrayPart:
			return vl::Ptr(new cpp_parser::CppDeclaratorArrayPart);
		case CppClasses::DeclaratorFunctionPartCommon:
			return vl::Ptr(new cpp_parser::CppDeclaratorFunctionPartCommon);
		case CppClasses::DeclaratorFunctionPartToResolve:
			return vl::Ptr(new cpp_parser::CppDeclaratorFunctionPartToResolve);
		case CppClasses::DeclaratorKeyword:
			return vl::Ptr(new cpp_parser::CppDeclaratorKeyword);
		case CppClasses::DeclaratorType:
			return vl::Ptr(new cpp_parser::CppDeclaratorType);
		case CppClasses::DeclaratorVariablePartCommon:
			return vl::Ptr(new cpp_parser::CppDeclaratorVariablePartCommon);
		case CppClasses::DeclaratorVariablePartToResolve:
			return vl::Ptr(new cpp_parser::CppDeclaratorVariablePartToResolve);
		case CppClasses::DefaultStat:
			return vl::Ptr(new cpp_parser::CppDefaultStat);
		case CppClasses::DeleteExpr:
			return vl::Ptr(new cpp_parser::CppDeleteExpr);
		case CppClasses::DoWhileStat:
			return vl::Ptr(new cpp_parser::CppDoWhileStat);
		case CppClasses::EmptyStat:
			return vl::Ptr(new cpp_parser::CppEmptyStat);
		case CppClasses::EnumBody:
			return vl::Ptr(new cpp_parser::CppEnumBody);
		case CppClasses::EnumDeclaration:
			return vl::Ptr(new cpp_parser::CppEnumDeclaration);
		case CppClasses::EnumItem:
			return vl::Ptr(new cpp_parser::CppEnumItem);
		case CppClasses::ExprStat:
			return vl::Ptr(new cpp_parser::CppExprStat);
		case CppClasses::ExternDeclaration:
			return vl::Ptr(new cpp_parser::CppExternDeclaration);
		case CppClasses::File:
			return vl::Ptr(new cpp_parser::CppFile);
		case CppClasses::ForStat:
			return vl::Ptr(new cpp_parser::CppForStat);
		case CppClasses::ForStatIterateCondition:
			return vl::Ptr(new cpp_parser::CppForStatIterateCondition);
		case CppClasses::ForStatLoopCondition:
			return vl::Ptr(new cpp_parser::CppForStatLoopCondition);
		case CppClasses::FriendTypeDeclaration:
			return vl::Ptr(new cpp_parser::CppFriendTypeDeclaration);
		case CppClasses::FunctionKeyword:
			return vl::Ptr(new cpp_parser::CppFunctionKeyword);
		case CppClasses::GenericArgument:
			return vl::Ptr(new cpp_parser::CppGenericArgument);
		case CppClasses::GenericArguments:
			return vl::Ptr(new cpp_parser::CppGenericArguments);
		case CppClasses::GenericHeader:
			return vl::Ptr(new cpp_parser::CppGenericHeader);
		case CppClasses::GotoStat:
			return vl::Ptr(new cpp_parser::CppGotoStat);
		case CppClasses::IfElseStat:
			return vl::Ptr(new cpp_parser::CppIfElseStat);
		case CppClasses::IfExpr:
			return vl::Ptr(new cpp_parser::CppIfExpr);
		case CppClasses::IndexExpr:
			return vl::Ptr(new cpp_parser::CppIndexExpr);
		case CppClasses::LabelStat:
			return vl::Ptr(new cpp_parser::CppLabelStat);
		case CppClasses::LambdaCapture:
			return vl::Ptr(new cpp_parser::CppLambdaCapture);
		case CppClasses::LambdaExpr:
			return vl::Ptr(new cpp_parser::CppLambdaExpr);
		case CppClasses::NameIdentifier:
			return vl::Ptr(new cpp_parser::CppNameIdentifier);
		case CppClasses::NamespaceDeclaration:
			return vl::Ptr(new cpp_parser::CppNamespaceDeclaration);
		case CppClasses::NamespaceName:
			return vl::Ptr(new cpp_parser::CppNamespaceName);
		case CppClasses::NewExpr:
			return vl::Ptr(new cpp_parser::CppNewExpr);
		case CppClasses::NumericExprLiteral:
			return vl::Ptr(new cpp_parser::CppNumericExprLiteral);
		case CppClasses::OperatorIdentifier:
			return vl::Ptr(new cpp_parser::CppOperatorIdentifier);
		case CppClasses::OperatorTypeIdentifier:
			return vl::Ptr(new cpp_parser::CppOperatorTypeIdentifier);
		case CppClasses::OrdinaryGenericParameter:
			return vl::Ptr(new cpp_parser::CppOrdinaryGenericParameter);
		case CppClasses::ParenthesisExpr:
			return vl::Ptr(new cpp_parser::CppParenthesisExpr);
		case CppClasses::PostfixUnaryExpr:
			return vl::Ptr(new cpp_parser::CppPostfixUnaryExpr);
		case CppClasses::PrefixUnaryExpr:
			return vl::Ptr(new cpp_parser::CppPrefixUnaryExpr);
		case CppClasses::PrimitiveExprLiteral:
			return vl::Ptr(new cpp_parser::CppPrimitiveExprLiteral);
		case CppClasses::PrimitiveType:
			return vl::Ptr(new cpp_parser::CppPrimitiveType);
		case CppClasses::QualifiedName:
			return vl::Ptr(new cpp_parser::CppQualifiedName);
		case CppClasses::ReturnStat:
			return vl::Ptr(new cpp_parser::CppReturnStat);
		case CppClasses::SizeofExpr:
			return vl::Ptr(new cpp_parser::CppSizeofExpr);
		case CppClasses::StatementToResolve:
			return vl::Ptr(new cpp_parser::CppStatementToResolve);
		case CppClasses::StaticAssertDeclaration:
			return vl::Ptr(new cpp_parser::CppStaticAssertDeclaration);
		case CppClasses::StringLiteral:
			return vl::Ptr(new cpp_parser::CppStringLiteral);
		case CppClasses::StringLiteralFragment:
			return vl::Ptr(new cpp_parser::CppStringLiteralFragment);
		case CppClasses::SwitchStat:
			return vl::Ptr(new cpp_parser::CppSwitchStat);
		case CppClasses::SysFuncExpr:
			return vl::Ptr(new cpp_parser::CppSysFuncExpr);
		case CppClasses::TemplateDeclaration:
			return vl::Ptr(new cpp_parser::CppTemplateDeclaration);
		case CppClasses::ThrowExpr:
			return vl::Ptr(new cpp_parser::CppThrowExpr);
		case CppClasses::TryStat:
			return vl::Ptr(new cpp_parser::CppTryStat);
		case CppClasses::TryStatCatchPart:
			return vl::Ptr(new cpp_parser::CppTryStatCatchPart);
		case CppClasses::TypeOrExprOrOthersToResolve:
			return vl::Ptr(new cpp_parser::CppTypeOrExprOrOthersToResolve);
		case CppClasses::TypeOrExprToResolve:
			return vl::Ptr(new cpp_parser::CppTypeOrExprToResolve);
		case CppClasses::TypedefDeclaration:
			return vl::Ptr(new cpp_parser::CppTypedefDeclaration);
		case CppClasses::UsingNamespaceDeclaration:
			return vl::Ptr(new cpp_parser::CppUsingNamespaceDeclaration);
		case CppClasses::UsingTypeDeclaration:
			return vl::Ptr(new cpp_parser::CppUsingTypeDeclaration);
		case CppClasses::UsingValueDeclaration:
			return vl::Ptr(new cpp_parser::CppUsingValueDeclaration);
		case CppClasses::VarBraceInit:
			return vl::Ptr(new cpp_parser::CppVarBraceInit);
		case CppClasses::VarParanthesisInit:
			return vl::Ptr(new cpp_parser::CppVarParanthesisInit);
		case CppClasses::VarStatInit:
			return vl::Ptr(new cpp_parser::CppVarStatInit);
		case CppClasses::VarStatInitItem:
			return vl::Ptr(new cpp_parser::CppVarStatInitItem);
		case CppClasses::VarValueInit:
			return vl::Ptr(new cpp_parser::CppVarValueInit);
		case CppClasses::VariablesDeclaration:
			return vl::Ptr(new cpp_parser::CppVariablesDeclaration);
		case CppClasses::VariadicExpr:
			return vl::Ptr(new cpp_parser::CppVariadicExpr);
		case CppClasses::VolatileType:
			return vl::Ptr(new cpp_parser::CppVolatileType);
		case CppClasses::WhileStat:
			return vl::Ptr(new cpp_parser::CppWhileStat);
		case CppClasses::__LeaveStat:
			return vl::Ptr(new cpp_parser::Cpp__LeaveStat);
		case CppClasses::__TryStat:
			return vl::Ptr(new cpp_parser::Cpp__TryStat);
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void CppAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = CppCppFieldName((CppFields)field);
		switch((CppFields)field)
		{
		case CppFields::AdvancedType_argument:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppAdvancedType::argument, object, field, value, cppFieldName);
		case CppFields::BinaryExpr_left:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppBinaryExpr::left, object, field, value, cppFieldName);
		case CppFields::BinaryExpr_right:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppBinaryExpr::right, object, field, value, cppFieldName);
		case CppFields::BlockStat_statements:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppBlockStat::statements, object, field, value, cppFieldName);
		case CppFields::BraceExpr_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppBraceExpr::arguments, object, field, value, cppFieldName);
		case CppFields::CallExpr_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppCallExpr::arguments, object, field, value, cppFieldName);
		case CppFields::CallExpr_operand:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppCallExpr::operand, object, field, value, cppFieldName);
		case CppFields::CaseStat_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppCaseStat::expr, object, field, value, cppFieldName);
		case CppFields::CaseStat_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppCaseStat::stat, object, field, value, cppFieldName);
		case CppFields::CastExpr_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppCastExpr::expr, object, field, value, cppFieldName);
		case CppFields::CastExpr_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppCastExpr::type, object, field, value, cppFieldName);
		case CppFields::ClassBody_firstVarPart:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppClassBody::firstVarPart, object, field, value, cppFieldName);
		case CppFields::ClassBody_inheritances:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppClassBody::inheritances, object, field, value, cppFieldName);
		case CppFields::ClassBody_memberParts:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppClassBody::memberParts, object, field, value, cppFieldName);
		case CppFields::ClassDeclaration_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppClassDeclaration::arguments, object, field, value, cppFieldName);
		case CppFields::ClassDeclaration_body:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppClassDeclaration::body, object, field, value, cppFieldName);
		case CppFields::ClassInheritance_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppClassInheritance::type, object, field, value, cppFieldName);
		case CppFields::ClassMemberPart_decls:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppClassMemberPart::decls, object, field, value, cppFieldName);
		case CppFields::ConstType_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppConstType::type, object, field, value, cppFieldName);
		case CppFields::DeclStat_decl:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclStat::decl, object, field, value, cppFieldName);
		case CppFields::DeclarationCommon_keywords:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarationCommon::keywords, object, field, value, cppFieldName);
		case CppFields::DeclarationToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarationToResolve::candidates, object, field, value, cppFieldName);
		case CppFields::Declarator_advancedTypes:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::advancedTypes, object, field, value, cppFieldName);
		case CppFields::Declarator_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::arguments, object, field, value, cppFieldName);
		case CppFields::Declarator_arrayParts:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::arrayParts, object, field, value, cppFieldName);
		case CppFields::Declarator_bitfield:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::bitfield, object, field, value, cppFieldName);
		case CppFields::Declarator_funcPart:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::funcPart, object, field, value, cppFieldName);
		case CppFields::Declarator_id:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::id, object, field, value, cppFieldName);
		case CppFields::Declarator_innerDeclarator:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::innerDeclarator, object, field, value, cppFieldName);
		case CppFields::Declarator_keywords:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclarator::keywords, object, field, value, cppFieldName);
		case CppFields::DeclaratorArrayPart_argument:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorArrayPart::argument, object, field, value, cppFieldName);
		case CppFields::DeclaratorFunctionPartCommon_deferredType:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorFunctionPartCommon::deferredType, object, field, value, cppFieldName);
		case CppFields::DeclaratorFunctionPartCommon_keywords:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorFunctionPartCommon::keywords, object, field, value, cppFieldName);
		case CppFields::DeclaratorFunctionPartCommon_parameters:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorFunctionPartCommon::parameters, object, field, value, cppFieldName);
		case CppFields::DeclaratorFunctionPartToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorFunctionPartToResolve::candidates, object, field, value, cppFieldName);
		case CppFields::DeclaratorType_declarator:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorType::declarator, object, field, value, cppFieldName);
		case CppFields::DeclaratorType_keywords:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorType::keywords, object, field, value, cppFieldName);
		case CppFields::DeclaratorType_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorType::type, object, field, value, cppFieldName);
		case CppFields::DeclaratorVariablePartCommon_declarator:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorVariablePartCommon::declarator, object, field, value, cppFieldName);
		case CppFields::DeclaratorVariablePartCommon_init:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorVariablePartCommon::init, object, field, value, cppFieldName);
		case CppFields::DeclaratorVariablePartCommon_nextVarPart:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorVariablePartCommon::nextVarPart, object, field, value, cppFieldName);
		case CppFields::DeclaratorVariablePartToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeclaratorVariablePartToResolve::candidates, object, field, value, cppFieldName);
		case CppFields::DefaultStat_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDefaultStat::stat, object, field, value, cppFieldName);
		case CppFields::DeleteExpr_argument:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDeleteExpr::argument, object, field, value, cppFieldName);
		case CppFields::DoWhileStat_condition:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDoWhileStat::condition, object, field, value, cppFieldName);
		case CppFields::DoWhileStat_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppDoWhileStat::stat, object, field, value, cppFieldName);
		case CppFields::EnumBody_firstVarPart:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppEnumBody::firstVarPart, object, field, value, cppFieldName);
		case CppFields::EnumBody_items:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppEnumBody::items, object, field, value, cppFieldName);
		case CppFields::EnumDeclaration_body:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppEnumDeclaration::body, object, field, value, cppFieldName);
		case CppFields::EnumDeclaration_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppEnumDeclaration::type, object, field, value, cppFieldName);
		case CppFields::EnumItem_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppEnumItem::expr, object, field, value, cppFieldName);
		case CppFields::ExprStat_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppExprStat::expr, object, field, value, cppFieldName);
		case CppFields::ExternDeclaration_decls:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppExternDeclaration::decls, object, field, value, cppFieldName);
		case CppFields::File_decls:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppFile::decls, object, field, value, cppFieldName);
		case CppFields::ForStat_conditionPart:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppForStat::conditionPart, object, field, value, cppFieldName);
		case CppFields::ForStat_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppForStat::stat, object, field, value, cppFieldName);
		case CppFields::ForStatIterateCondition_collection:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppForStatIterateCondition::collection, object, field, value, cppFieldName);
		case CppFields::ForStatIterateCondition_decl:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppForStatIterateCondition::decl, object, field, value, cppFieldName);
		case CppFields::ForStatLoopCondition_condition:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppForStatLoopCondition::condition, object, field, value, cppFieldName);
		case CppFields::ForStatLoopCondition_sideEffect:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppForStatLoopCondition::sideEffect, object, field, value, cppFieldName);
		case CppFields::ForStatLoopCondition_varsDecl:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppForStatLoopCondition::varsDecl, object, field, value, cppFieldName);
		case CppFields::FriendTypeDeclaration_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppFriendTypeDeclaration::type, object, field, value, cppFieldName);
		case CppFields::FunctionKeyword_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppFunctionKeyword::arguments, object, field, value, cppFieldName);
		case CppFields::GenericArgument_argument:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppGenericArgument::argument, object, field, value, cppFieldName);
		case CppFields::GenericArguments_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppGenericArguments::arguments, object, field, value, cppFieldName);
		case CppFields::GenericHeader_parameters:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppGenericHeader::parameters, object, field, value, cppFieldName);
		case CppFields::IfElseStat_condition:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIfElseStat::condition, object, field, value, cppFieldName);
		case CppFields::IfElseStat_falseStat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIfElseStat::falseStat, object, field, value, cppFieldName);
		case CppFields::IfElseStat_trueStat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIfElseStat::trueStat, object, field, value, cppFieldName);
		case CppFields::IfElseStat_varsDecl:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIfElseStat::varsDecl, object, field, value, cppFieldName);
		case CppFields::IfExpr_condition:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIfExpr::condition, object, field, value, cppFieldName);
		case CppFields::IfExpr_falseBranch:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIfExpr::falseBranch, object, field, value, cppFieldName);
		case CppFields::IfExpr_trueBranch:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIfExpr::trueBranch, object, field, value, cppFieldName);
		case CppFields::IndexExpr_index:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIndexExpr::index, object, field, value, cppFieldName);
		case CppFields::IndexExpr_operand:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppIndexExpr::operand, object, field, value, cppFieldName);
		case CppFields::LabelStat_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppLabelStat::stat, object, field, value, cppFieldName);
		case CppFields::LambdaCapture_id:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppLambdaCapture::id, object, field, value, cppFieldName);
		case CppFields::LambdaCapture_init:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppLambdaCapture::init, object, field, value, cppFieldName);
		case CppFields::LambdaExpr_captures:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppLambdaExpr::captures, object, field, value, cppFieldName);
		case CppFields::LambdaExpr_functionHeader:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppLambdaExpr::functionHeader, object, field, value, cppFieldName);
		case CppFields::LambdaExpr_genericHeader:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppLambdaExpr::genericHeader, object, field, value, cppFieldName);
		case CppFields::LambdaExpr_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppLambdaExpr::stat, object, field, value, cppFieldName);
		case CppFields::NamespaceDeclaration_decls:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppNamespaceDeclaration::decls, object, field, value, cppFieldName);
		case CppFields::NamespaceDeclaration_names:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppNamespaceDeclaration::names, object, field, value, cppFieldName);
		case CppFields::NewExpr_arrayArguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppNewExpr::arrayArguments, object, field, value, cppFieldName);
		case CppFields::NewExpr_init:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppNewExpr::init, object, field, value, cppFieldName);
		case CppFields::NewExpr_placementArguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppNewExpr::placementArguments, object, field, value, cppFieldName);
		case CppFields::NewExpr_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppNewExpr::type, object, field, value, cppFieldName);
		case CppFields::OperatorTypeIdentifier_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppOperatorTypeIdentifier::type, object, field, value, cppFieldName);
		case CppFields::OrdinaryGenericParameter_genericHeader:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppOrdinaryGenericParameter::genericHeader, object, field, value, cppFieldName);
		case CppFields::OrdinaryGenericParameter_id:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppOrdinaryGenericParameter::id, object, field, value, cppFieldName);
		case CppFields::OrdinaryGenericParameter_init:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppOrdinaryGenericParameter::init, object, field, value, cppFieldName);
		case CppFields::ParenthesisExpr_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppParenthesisExpr::expr, object, field, value, cppFieldName);
		case CppFields::PostfixUnaryExpr_operand:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppPostfixUnaryExpr::operand, object, field, value, cppFieldName);
		case CppFields::PrefixUnaryExpr_operand:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppPrefixUnaryExpr::operand, object, field, value, cppFieldName);
		case CppFields::QualifiedName_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppQualifiedName::arguments, object, field, value, cppFieldName);
		case CppFields::QualifiedName_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppQualifiedName::expr, object, field, value, cppFieldName);
		case CppFields::QualifiedName_id:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppQualifiedName::id, object, field, value, cppFieldName);
		case CppFields::QualifiedName_parent:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppQualifiedName::parent, object, field, value, cppFieldName);
		case CppFields::ReturnStat_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppReturnStat::expr, object, field, value, cppFieldName);
		case CppFields::SizeofExpr_argument:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppSizeofExpr::argument, object, field, value, cppFieldName);
		case CppFields::StatementToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppStatementToResolve::candidates, object, field, value, cppFieldName);
		case CppFields::StaticAssertDeclaration_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppStaticAssertDeclaration::expr, object, field, value, cppFieldName);
		case CppFields::StaticAssertDeclaration_message:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppStaticAssertDeclaration::message, object, field, value, cppFieldName);
		case CppFields::StringLiteral_fragments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppStringLiteral::fragments, object, field, value, cppFieldName);
		case CppFields::SwitchStat_condition:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppSwitchStat::condition, object, field, value, cppFieldName);
		case CppFields::SwitchStat_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppSwitchStat::stat, object, field, value, cppFieldName);
		case CppFields::SysFuncExpr_argument:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppSysFuncExpr::argument, object, field, value, cppFieldName);
		case CppFields::TemplateDeclaration_decl:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTemplateDeclaration::decl, object, field, value, cppFieldName);
		case CppFields::TemplateDeclaration_genericHeader:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTemplateDeclaration::genericHeader, object, field, value, cppFieldName);
		case CppFields::ThrowExpr_argument:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppThrowExpr::argument, object, field, value, cppFieldName);
		case CppFields::TryStat_catchParts:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTryStat::catchParts, object, field, value, cppFieldName);
		case CppFields::TryStat_tryStat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTryStat::tryStat, object, field, value, cppFieldName);
		case CppFields::TryStatCatchPart_decl:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTryStatCatchPart::decl, object, field, value, cppFieldName);
		case CppFields::TryStatCatchPart_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTryStatCatchPart::stat, object, field, value, cppFieldName);
		case CppFields::TypeOrExprOrOthersToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTypeOrExprOrOthersToResolve::candidates, object, field, value, cppFieldName);
		case CppFields::TypeOrExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTypeOrExprToResolve::candidates, object, field, value, cppFieldName);
		case CppFields::TypedefDeclaration_decl:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppTypedefDeclaration::decl, object, field, value, cppFieldName);
		case CppFields::UsingNamespaceDeclaration_names:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppUsingNamespaceDeclaration::names, object, field, value, cppFieldName);
		case CppFields::UsingTypeDeclaration_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppUsingTypeDeclaration::type, object, field, value, cppFieldName);
		case CppFields::UsingValueDeclaration_name:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppUsingValueDeclaration::name, object, field, value, cppFieldName);
		case CppFields::VarBraceInit_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVarBraceInit::arguments, object, field, value, cppFieldName);
		case CppFields::VarParanthesisInit_arguments:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVarParanthesisInit::arguments, object, field, value, cppFieldName);
		case CppFields::VarStatInit_initItems:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVarStatInit::initItems, object, field, value, cppFieldName);
		case CppFields::VarStatInit_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVarStatInit::stat, object, field, value, cppFieldName);
		case CppFields::VarStatInitItem_init:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVarStatInitItem::init, object, field, value, cppFieldName);
		case CppFields::VarValueInit_expr:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVarValueInit::expr, object, field, value, cppFieldName);
		case CppFields::VariablesDeclaration_firstVarPart:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVariablesDeclaration::firstVarPart, object, field, value, cppFieldName);
		case CppFields::VariablesDeclaration_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVariablesDeclaration::type, object, field, value, cppFieldName);
		case CppFields::VariadicExpr_operand:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVariadicExpr::operand, object, field, value, cppFieldName);
		case CppFields::VolatileType_type:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppVolatileType::type, object, field, value, cppFieldName);
		case CppFields::WhileStat_condition:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppWhileStat::condition, object, field, value, cppFieldName);
		case CppFields::WhileStat_stat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::CppWhileStat::stat, object, field, value, cppFieldName);
		case CppFields::__TryStat_exceptStat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::Cpp__TryStat::exceptStat, object, field, value, cppFieldName);
		case CppFields::__TryStat_filter:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::Cpp__TryStat::filter, object, field, value, cppFieldName);
		case CppFields::__TryStat_finallyStat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::Cpp__TryStat::finallyStat, object, field, value, cppFieldName);
		case CppFields::__TryStat_tryStat:
			return vl::glr::AssemblerSetObjectField(&cpp_parser::Cpp__TryStat::tryStat, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void CppAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = CppCppFieldName((CppFields)field);
		switch((CppFields)field)
		{
		case CppFields::CastExpr_keyword:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppCastExpr::keyword, object, field, token, tokenIndex, cppFieldName);
		case CppFields::ClassDeclaration_name:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppClassDeclaration::name, object, field, token, tokenIndex, cppFieldName);
		case CppFields::ClassInheritance_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppClassInheritance::variadic, object, field, token, tokenIndex, cppFieldName);
		case CppFields::Declarator_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppDeclarator::variadic, object, field, token, tokenIndex, cppFieldName);
		case CppFields::DeclaratorFunctionPartCommon_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppDeclaratorFunctionPartCommon::variadic, object, field, token, tokenIndex, cppFieldName);
		case CppFields::DeclaratorKeyword_keyword:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppDeclaratorKeyword::keyword, object, field, token, tokenIndex, cppFieldName);
		case CppFields::EnumDeclaration_name:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppEnumDeclaration::name, object, field, token, tokenIndex, cppFieldName);
		case CppFields::EnumItem_name:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppEnumItem::name, object, field, token, tokenIndex, cppFieldName);
		case CppFields::FunctionKeyword_keyword:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppFunctionKeyword::keyword, object, field, token, tokenIndex, cppFieldName);
		case CppFields::GenericArgument_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppGenericArgument::variadic, object, field, token, tokenIndex, cppFieldName);
		case CppFields::GotoStat_label:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppGotoStat::label, object, field, token, tokenIndex, cppFieldName);
		case CppFields::LabelStat_label:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppLabelStat::label, object, field, token, tokenIndex, cppFieldName);
		case CppFields::NameIdentifier_name:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppNameIdentifier::name, object, field, token, tokenIndex, cppFieldName);
		case CppFields::NamespaceName_name:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppNamespaceName::name, object, field, token, tokenIndex, cppFieldName);
		case CppFields::NumericExprLiteral_literal:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppNumericExprLiteral::literal, object, field, token, tokenIndex, cppFieldName);
		case CppFields::OrdinaryGenericParameter_typenameToken:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppOrdinaryGenericParameter::typenameToken, object, field, token, tokenIndex, cppFieldName);
		case CppFields::OrdinaryGenericParameter_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppOrdinaryGenericParameter::variadic, object, field, token, tokenIndex, cppFieldName);
		case CppFields::PrimitiveType_literal1:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppPrimitiveType::literal1, object, field, token, tokenIndex, cppFieldName);
		case CppFields::PrimitiveType_literal2:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppPrimitiveType::literal2, object, field, token, tokenIndex, cppFieldName);
		case CppFields::SizeofExpr_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppSizeofExpr::variadic, object, field, token, tokenIndex, cppFieldName);
		case CppFields::StringLiteralFragment_literal:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppStringLiteralFragment::literal, object, field, token, tokenIndex, cppFieldName);
		case CppFields::SysFuncExpr_keyword:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppSysFuncExpr::keyword, object, field, token, tokenIndex, cppFieldName);
		case CppFields::SysFuncExpr_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppSysFuncExpr::variadic, object, field, token, tokenIndex, cppFieldName);
		case CppFields::UsingTypeDeclaration_name:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppUsingTypeDeclaration::name, object, field, token, tokenIndex, cppFieldName);
		case CppFields::UsingValueDeclaration_typenameKeyword:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppUsingValueDeclaration::typenameKeyword, object, field, token, tokenIndex, cppFieldName);
		case CppFields::VarStatInitItem_name:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppVarStatInitItem::name, object, field, token, tokenIndex, cppFieldName);
		case CppFields::VariadicExpr_variadic:
			return vl::glr::AssemblerSetTokenField(&cpp_parser::CppVariadicExpr::variadic, object, field, token, tokenIndex, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
		}
	}

	void CppAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = CppCppFieldName((CppFields)field);
		switch((CppFields)field)
		{
		case CppFields::AdvancedType_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppAdvancedType::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::BinaryExpr_op:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppBinaryExpr::op, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::CallExpr_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppCallExpr::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::ClassDeclaration_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppClassDeclaration::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::ClassInheritance_accessor:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppClassInheritance::accessor, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::ClassMemberPart_accessor:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppClassMemberPart::accessor, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::DeleteExpr_array:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppDeleteExpr::array, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::DeleteExpr_scope:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppDeleteExpr::scope, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::EnumDeclaration_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppEnumDeclaration::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::LambdaCapture_objKind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppLambdaCapture::objKind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::LambdaCapture_refKind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppLambdaCapture::refKind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::NameIdentifier_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppNameIdentifier::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::NewExpr_scope:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppNewExpr::scope, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::NumericExprLiteral_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppNumericExprLiteral::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::OperatorIdentifier_op:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppOperatorIdentifier::op, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::PostfixUnaryExpr_op:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppPostfixUnaryExpr::op, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::PrefixUnaryExpr_op:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppPrefixUnaryExpr::op, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::PrimitiveExprLiteral_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppPrimitiveExprLiteral::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::PrimitiveType_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppPrimitiveType::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::QualifiedName_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppQualifiedName::kind, object, field, enumItem, weakAssignment, cppFieldName);
		case CppFields::StringLiteralFragment_kind:
			return vl::glr::AssemblerSetEnumField(&cpp_parser::CppStringLiteralFragment::kind, object, field, enumItem, weakAssignment, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
		}
	}

	const wchar_t* CppTypeName(CppClasses type)
	{
		const wchar_t* results[] = {
			L"AdvancedType",
			L"BinaryExpr",
			L"BlockStat",
			L"BraceExpr",
			L"BreakStat",
			L"CallExpr",
			L"CaseStat",
			L"CastExpr",
			L"ClassBody",
			L"ClassDeclaration",
			L"ClassInheritance",
			L"ClassMemberPart",
			L"ConstType",
			L"ContinueStat",
			L"DeclStat",
			L"Declaration",
			L"DeclarationCommon",
			L"DeclarationToResolve",
			L"Declarator",
			L"DeclaratorArrayPart",
			L"DeclaratorFunctionPart",
			L"DeclaratorFunctionPartCommon",
			L"DeclaratorFunctionPartToResolve",
			L"DeclaratorKeyword",
			L"DeclaratorType",
			L"DeclaratorVariablePart",
			L"DeclaratorVariablePartCommon",
			L"DeclaratorVariablePartToResolve",
			L"DefaultStat",
			L"DeleteExpr",
			L"DoWhileStat",
			L"EmptyStat",
			L"EnumBody",
			L"EnumDeclaration",
			L"EnumItem",
			L"ExprOnly",
			L"ExprStat",
			L"ExternDeclaration",
			L"File",
			L"ForStat",
			L"ForStatConditionPart",
			L"ForStatIterateCondition",
			L"ForStatLoopCondition",
			L"FriendTypeDeclaration",
			L"FunctionKeyword",
			L"GenericArgument",
			L"GenericArguments",
			L"GenericHeader",
			L"GotoStat",
			L"Identifier",
			L"IfElseStat",
			L"IfExpr",
			L"IndexExpr",
			L"LabelStat",
			L"LambdaCapture",
			L"LambdaExpr",
			L"NameIdentifier",
			L"NamespaceDeclaration",
			L"NamespaceName",
			L"NewExpr",
			L"NumericExprLiteral",
			L"OperatorIdentifier",
			L"OperatorTypeIdentifier",
			L"OrdinaryGenericParameter",
			L"ParenthesisExpr",
			L"PostfixUnaryExpr",
			L"PrefixUnaryExpr",
			L"PrimitiveExprLiteral",
			L"PrimitiveType",
			L"QualifiedName",
			L"ReturnStat",
			L"SizeofExpr",
			L"Statement",
			L"StatementToResolve",
			L"StaticAssertDeclaration",
			L"StringLiteral",
			L"StringLiteralFragment",
			L"SwitchStat",
			L"SysFuncExpr",
			L"TemplateDeclaration",
			L"ThrowExpr",
			L"TryStat",
			L"TryStatCatchPart",
			L"TypeOnly",
			L"TypeOrExpr",
			L"TypeOrExprOrOthers",
			L"TypeOrExprOrOthersToResolve",
			L"TypeOrExprToResolve",
			L"TypedefDeclaration",
			L"UsingNamespaceDeclaration",
			L"UsingTypeDeclaration",
			L"UsingValueDeclaration",
			L"VarBraceInit",
			L"VarInit",
			L"VarParanthesisInit",
			L"VarStatInit",
			L"VarStatInitItem",
			L"VarValueInit",
			L"VariablesDeclaration",
			L"VariadicExpr",
			L"VolatileType",
			L"WhileStat",
			L"__LeaveStat",
			L"__TryStat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 104 ? results[index] : nullptr;
	}

	const wchar_t* CppCppTypeName(CppClasses type)
	{
		const wchar_t* results[] = {
			L"cpp_parser::CppAdvancedType",
			L"cpp_parser::CppBinaryExpr",
			L"cpp_parser::CppBlockStat",
			L"cpp_parser::CppBraceExpr",
			L"cpp_parser::CppBreakStat",
			L"cpp_parser::CppCallExpr",
			L"cpp_parser::CppCaseStat",
			L"cpp_parser::CppCastExpr",
			L"cpp_parser::CppClassBody",
			L"cpp_parser::CppClassDeclaration",
			L"cpp_parser::CppClassInheritance",
			L"cpp_parser::CppClassMemberPart",
			L"cpp_parser::CppConstType",
			L"cpp_parser::CppContinueStat",
			L"cpp_parser::CppDeclStat",
			L"cpp_parser::CppDeclaration",
			L"cpp_parser::CppDeclarationCommon",
			L"cpp_parser::CppDeclarationToResolve",
			L"cpp_parser::CppDeclarator",
			L"cpp_parser::CppDeclaratorArrayPart",
			L"cpp_parser::CppDeclaratorFunctionPart",
			L"cpp_parser::CppDeclaratorFunctionPartCommon",
			L"cpp_parser::CppDeclaratorFunctionPartToResolve",
			L"cpp_parser::CppDeclaratorKeyword",
			L"cpp_parser::CppDeclaratorType",
			L"cpp_parser::CppDeclaratorVariablePart",
			L"cpp_parser::CppDeclaratorVariablePartCommon",
			L"cpp_parser::CppDeclaratorVariablePartToResolve",
			L"cpp_parser::CppDefaultStat",
			L"cpp_parser::CppDeleteExpr",
			L"cpp_parser::CppDoWhileStat",
			L"cpp_parser::CppEmptyStat",
			L"cpp_parser::CppEnumBody",
			L"cpp_parser::CppEnumDeclaration",
			L"cpp_parser::CppEnumItem",
			L"cpp_parser::CppExprOnly",
			L"cpp_parser::CppExprStat",
			L"cpp_parser::CppExternDeclaration",
			L"cpp_parser::CppFile",
			L"cpp_parser::CppForStat",
			L"cpp_parser::CppForStatConditionPart",
			L"cpp_parser::CppForStatIterateCondition",
			L"cpp_parser::CppForStatLoopCondition",
			L"cpp_parser::CppFriendTypeDeclaration",
			L"cpp_parser::CppFunctionKeyword",
			L"cpp_parser::CppGenericArgument",
			L"cpp_parser::CppGenericArguments",
			L"cpp_parser::CppGenericHeader",
			L"cpp_parser::CppGotoStat",
			L"cpp_parser::CppIdentifier",
			L"cpp_parser::CppIfElseStat",
			L"cpp_parser::CppIfExpr",
			L"cpp_parser::CppIndexExpr",
			L"cpp_parser::CppLabelStat",
			L"cpp_parser::CppLambdaCapture",
			L"cpp_parser::CppLambdaExpr",
			L"cpp_parser::CppNameIdentifier",
			L"cpp_parser::CppNamespaceDeclaration",
			L"cpp_parser::CppNamespaceName",
			L"cpp_parser::CppNewExpr",
			L"cpp_parser::CppNumericExprLiteral",
			L"cpp_parser::CppOperatorIdentifier",
			L"cpp_parser::CppOperatorTypeIdentifier",
			L"cpp_parser::CppOrdinaryGenericParameter",
			L"cpp_parser::CppParenthesisExpr",
			L"cpp_parser::CppPostfixUnaryExpr",
			L"cpp_parser::CppPrefixUnaryExpr",
			L"cpp_parser::CppPrimitiveExprLiteral",
			L"cpp_parser::CppPrimitiveType",
			L"cpp_parser::CppQualifiedName",
			L"cpp_parser::CppReturnStat",
			L"cpp_parser::CppSizeofExpr",
			L"cpp_parser::CppStatement",
			L"cpp_parser::CppStatementToResolve",
			L"cpp_parser::CppStaticAssertDeclaration",
			L"cpp_parser::CppStringLiteral",
			L"cpp_parser::CppStringLiteralFragment",
			L"cpp_parser::CppSwitchStat",
			L"cpp_parser::CppSysFuncExpr",
			L"cpp_parser::CppTemplateDeclaration",
			L"cpp_parser::CppThrowExpr",
			L"cpp_parser::CppTryStat",
			L"cpp_parser::CppTryStatCatchPart",
			L"cpp_parser::CppTypeOnly",
			L"cpp_parser::CppTypeOrExpr",
			L"cpp_parser::CppTypeOrExprOrOthers",
			L"cpp_parser::CppTypeOrExprOrOthersToResolve",
			L"cpp_parser::CppTypeOrExprToResolve",
			L"cpp_parser::CppTypedefDeclaration",
			L"cpp_parser::CppUsingNamespaceDeclaration",
			L"cpp_parser::CppUsingTypeDeclaration",
			L"cpp_parser::CppUsingValueDeclaration",
			L"cpp_parser::CppVarBraceInit",
			L"cpp_parser::CppVarInit",
			L"cpp_parser::CppVarParanthesisInit",
			L"cpp_parser::CppVarStatInit",
			L"cpp_parser::CppVarStatInitItem",
			L"cpp_parser::CppVarValueInit",
			L"cpp_parser::CppVariablesDeclaration",
			L"cpp_parser::CppVariadicExpr",
			L"cpp_parser::CppVolatileType",
			L"cpp_parser::CppWhileStat",
			L"cpp_parser::Cpp__LeaveStat",
			L"cpp_parser::Cpp__TryStat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 104 ? results[index] : nullptr;
	}

	const wchar_t* CppFieldName(CppFields field)
	{
		const wchar_t* results[] = {
			L"AdvancedType::argument",
			L"AdvancedType::kind",
			L"BinaryExpr::left",
			L"BinaryExpr::op",
			L"BinaryExpr::right",
			L"BlockStat::statements",
			L"BraceExpr::arguments",
			L"CallExpr::arguments",
			L"CallExpr::kind",
			L"CallExpr::operand",
			L"CaseStat::expr",
			L"CaseStat::stat",
			L"CastExpr::expr",
			L"CastExpr::keyword",
			L"CastExpr::type",
			L"ClassBody::firstVarPart",
			L"ClassBody::inheritances",
			L"ClassBody::memberParts",
			L"ClassDeclaration::arguments",
			L"ClassDeclaration::body",
			L"ClassDeclaration::kind",
			L"ClassDeclaration::name",
			L"ClassInheritance::accessor",
			L"ClassInheritance::type",
			L"ClassInheritance::variadic",
			L"ClassMemberPart::accessor",
			L"ClassMemberPart::decls",
			L"ConstType::type",
			L"DeclStat::decl",
			L"DeclarationCommon::keywords",
			L"DeclarationToResolve::candidates",
			L"Declarator::advancedTypes",
			L"Declarator::arguments",
			L"Declarator::arrayParts",
			L"Declarator::bitfield",
			L"Declarator::funcPart",
			L"Declarator::id",
			L"Declarator::innerDeclarator",
			L"Declarator::keywords",
			L"Declarator::variadic",
			L"DeclaratorArrayPart::argument",
			L"DeclaratorFunctionPartCommon::deferredType",
			L"DeclaratorFunctionPartCommon::keywords",
			L"DeclaratorFunctionPartCommon::parameters",
			L"DeclaratorFunctionPartCommon::variadic",
			L"DeclaratorFunctionPartToResolve::candidates",
			L"DeclaratorKeyword::keyword",
			L"DeclaratorType::declarator",
			L"DeclaratorType::keywords",
			L"DeclaratorType::type",
			L"DeclaratorVariablePartCommon::declarator",
			L"DeclaratorVariablePartCommon::init",
			L"DeclaratorVariablePartCommon::nextVarPart",
			L"DeclaratorVariablePartToResolve::candidates",
			L"DefaultStat::stat",
			L"DeleteExpr::argument",
			L"DeleteExpr::array",
			L"DeleteExpr::scope",
			L"DoWhileStat::condition",
			L"DoWhileStat::stat",
			L"EnumBody::firstVarPart",
			L"EnumBody::items",
			L"EnumDeclaration::body",
			L"EnumDeclaration::kind",
			L"EnumDeclaration::name",
			L"EnumDeclaration::type",
			L"EnumItem::expr",
			L"EnumItem::name",
			L"ExprStat::expr",
			L"ExternDeclaration::decls",
			L"File::decls",
			L"ForStat::conditionPart",
			L"ForStat::stat",
			L"ForStatIterateCondition::collection",
			L"ForStatIterateCondition::decl",
			L"ForStatLoopCondition::condition",
			L"ForStatLoopCondition::sideEffect",
			L"ForStatLoopCondition::varsDecl",
			L"FriendTypeDeclaration::type",
			L"FunctionKeyword::arguments",
			L"FunctionKeyword::keyword",
			L"GenericArgument::argument",
			L"GenericArgument::variadic",
			L"GenericArguments::arguments",
			L"GenericHeader::parameters",
			L"GotoStat::label",
			L"IfElseStat::condition",
			L"IfElseStat::falseStat",
			L"IfElseStat::trueStat",
			L"IfElseStat::varsDecl",
			L"IfExpr::condition",
			L"IfExpr::falseBranch",
			L"IfExpr::trueBranch",
			L"IndexExpr::index",
			L"IndexExpr::operand",
			L"LabelStat::label",
			L"LabelStat::stat",
			L"LambdaCapture::id",
			L"LambdaCapture::init",
			L"LambdaCapture::objKind",
			L"LambdaCapture::refKind",
			L"LambdaExpr::captures",
			L"LambdaExpr::functionHeader",
			L"LambdaExpr::genericHeader",
			L"LambdaExpr::stat",
			L"NameIdentifier::kind",
			L"NameIdentifier::name",
			L"NamespaceDeclaration::decls",
			L"NamespaceDeclaration::names",
			L"NamespaceName::name",
			L"NewExpr::arrayArguments",
			L"NewExpr::init",
			L"NewExpr::placementArguments",
			L"NewExpr::scope",
			L"NewExpr::type",
			L"NumericExprLiteral::kind",
			L"NumericExprLiteral::literal",
			L"OperatorIdentifier::op",
			L"OperatorTypeIdentifier::type",
			L"OrdinaryGenericParameter::genericHeader",
			L"OrdinaryGenericParameter::id",
			L"OrdinaryGenericParameter::init",
			L"OrdinaryGenericParameter::typenameToken",
			L"OrdinaryGenericParameter::variadic",
			L"ParenthesisExpr::expr",
			L"PostfixUnaryExpr::op",
			L"PostfixUnaryExpr::operand",
			L"PrefixUnaryExpr::op",
			L"PrefixUnaryExpr::operand",
			L"PrimitiveExprLiteral::kind",
			L"PrimitiveType::kind",
			L"PrimitiveType::literal1",
			L"PrimitiveType::literal2",
			L"QualifiedName::arguments",
			L"QualifiedName::expr",
			L"QualifiedName::id",
			L"QualifiedName::kind",
			L"QualifiedName::parent",
			L"ReturnStat::expr",
			L"SizeofExpr::argument",
			L"SizeofExpr::variadic",
			L"StatementToResolve::candidates",
			L"StaticAssertDeclaration::expr",
			L"StaticAssertDeclaration::message",
			L"StringLiteral::fragments",
			L"StringLiteralFragment::kind",
			L"StringLiteralFragment::literal",
			L"SwitchStat::condition",
			L"SwitchStat::stat",
			L"SysFuncExpr::argument",
			L"SysFuncExpr::keyword",
			L"SysFuncExpr::variadic",
			L"TemplateDeclaration::decl",
			L"TemplateDeclaration::genericHeader",
			L"ThrowExpr::argument",
			L"TryStat::catchParts",
			L"TryStat::tryStat",
			L"TryStatCatchPart::decl",
			L"TryStatCatchPart::stat",
			L"TypeOrExprOrOthersToResolve::candidates",
			L"TypeOrExprToResolve::candidates",
			L"TypedefDeclaration::decl",
			L"UsingNamespaceDeclaration::names",
			L"UsingTypeDeclaration::name",
			L"UsingTypeDeclaration::type",
			L"UsingValueDeclaration::name",
			L"UsingValueDeclaration::typenameKeyword",
			L"VarBraceInit::arguments",
			L"VarParanthesisInit::arguments",
			L"VarStatInit::initItems",
			L"VarStatInit::stat",
			L"VarStatInitItem::init",
			L"VarStatInitItem::name",
			L"VarValueInit::expr",
			L"VariablesDeclaration::firstVarPart",
			L"VariablesDeclaration::type",
			L"VariadicExpr::operand",
			L"VariadicExpr::variadic",
			L"VolatileType::type",
			L"WhileStat::condition",
			L"WhileStat::stat",
			L"__TryStat::exceptStat",
			L"__TryStat::filter",
			L"__TryStat::finallyStat",
			L"__TryStat::tryStat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 185 ? results[index] : nullptr;
	}

	const wchar_t* CppCppFieldName(CppFields field)
	{
		const wchar_t* results[] = {
			L"cpp_parser::CppAdvancedType::argument",
			L"cpp_parser::CppAdvancedType::kind",
			L"cpp_parser::CppBinaryExpr::left",
			L"cpp_parser::CppBinaryExpr::op",
			L"cpp_parser::CppBinaryExpr::right",
			L"cpp_parser::CppBlockStat::statements",
			L"cpp_parser::CppBraceExpr::arguments",
			L"cpp_parser::CppCallExpr::arguments",
			L"cpp_parser::CppCallExpr::kind",
			L"cpp_parser::CppCallExpr::operand",
			L"cpp_parser::CppCaseStat::expr",
			L"cpp_parser::CppCaseStat::stat",
			L"cpp_parser::CppCastExpr::expr",
			L"cpp_parser::CppCastExpr::keyword",
			L"cpp_parser::CppCastExpr::type",
			L"cpp_parser::CppClassBody::firstVarPart",
			L"cpp_parser::CppClassBody::inheritances",
			L"cpp_parser::CppClassBody::memberParts",
			L"cpp_parser::CppClassDeclaration::arguments",
			L"cpp_parser::CppClassDeclaration::body",
			L"cpp_parser::CppClassDeclaration::kind",
			L"cpp_parser::CppClassDeclaration::name",
			L"cpp_parser::CppClassInheritance::accessor",
			L"cpp_parser::CppClassInheritance::type",
			L"cpp_parser::CppClassInheritance::variadic",
			L"cpp_parser::CppClassMemberPart::accessor",
			L"cpp_parser::CppClassMemberPart::decls",
			L"cpp_parser::CppConstType::type",
			L"cpp_parser::CppDeclStat::decl",
			L"cpp_parser::CppDeclarationCommon::keywords",
			L"cpp_parser::CppDeclarationToResolve::candidates",
			L"cpp_parser::CppDeclarator::advancedTypes",
			L"cpp_parser::CppDeclarator::arguments",
			L"cpp_parser::CppDeclarator::arrayParts",
			L"cpp_parser::CppDeclarator::bitfield",
			L"cpp_parser::CppDeclarator::funcPart",
			L"cpp_parser::CppDeclarator::id",
			L"cpp_parser::CppDeclarator::innerDeclarator",
			L"cpp_parser::CppDeclarator::keywords",
			L"cpp_parser::CppDeclarator::variadic",
			L"cpp_parser::CppDeclaratorArrayPart::argument",
			L"cpp_parser::CppDeclaratorFunctionPartCommon::deferredType",
			L"cpp_parser::CppDeclaratorFunctionPartCommon::keywords",
			L"cpp_parser::CppDeclaratorFunctionPartCommon::parameters",
			L"cpp_parser::CppDeclaratorFunctionPartCommon::variadic",
			L"cpp_parser::CppDeclaratorFunctionPartToResolve::candidates",
			L"cpp_parser::CppDeclaratorKeyword::keyword",
			L"cpp_parser::CppDeclaratorType::declarator",
			L"cpp_parser::CppDeclaratorType::keywords",
			L"cpp_parser::CppDeclaratorType::type",
			L"cpp_parser::CppDeclaratorVariablePartCommon::declarator",
			L"cpp_parser::CppDeclaratorVariablePartCommon::init",
			L"cpp_parser::CppDeclaratorVariablePartCommon::nextVarPart",
			L"cpp_parser::CppDeclaratorVariablePartToResolve::candidates",
			L"cpp_parser::CppDefaultStat::stat",
			L"cpp_parser::CppDeleteExpr::argument",
			L"cpp_parser::CppDeleteExpr::array",
			L"cpp_parser::CppDeleteExpr::scope",
			L"cpp_parser::CppDoWhileStat::condition",
			L"cpp_parser::CppDoWhileStat::stat",
			L"cpp_parser::CppEnumBody::firstVarPart",
			L"cpp_parser::CppEnumBody::items",
			L"cpp_parser::CppEnumDeclaration::body",
			L"cpp_parser::CppEnumDeclaration::kind",
			L"cpp_parser::CppEnumDeclaration::name",
			L"cpp_parser::CppEnumDeclaration::type",
			L"cpp_parser::CppEnumItem::expr",
			L"cpp_parser::CppEnumItem::name",
			L"cpp_parser::CppExprStat::expr",
			L"cpp_parser::CppExternDeclaration::decls",
			L"cpp_parser::CppFile::decls",
			L"cpp_parser::CppForStat::conditionPart",
			L"cpp_parser::CppForStat::stat",
			L"cpp_parser::CppForStatIterateCondition::collection",
			L"cpp_parser::CppForStatIterateCondition::decl",
			L"cpp_parser::CppForStatLoopCondition::condition",
			L"cpp_parser::CppForStatLoopCondition::sideEffect",
			L"cpp_parser::CppForStatLoopCondition::varsDecl",
			L"cpp_parser::CppFriendTypeDeclaration::type",
			L"cpp_parser::CppFunctionKeyword::arguments",
			L"cpp_parser::CppFunctionKeyword::keyword",
			L"cpp_parser::CppGenericArgument::argument",
			L"cpp_parser::CppGenericArgument::variadic",
			L"cpp_parser::CppGenericArguments::arguments",
			L"cpp_parser::CppGenericHeader::parameters",
			L"cpp_parser::CppGotoStat::label",
			L"cpp_parser::CppIfElseStat::condition",
			L"cpp_parser::CppIfElseStat::falseStat",
			L"cpp_parser::CppIfElseStat::trueStat",
			L"cpp_parser::CppIfElseStat::varsDecl",
			L"cpp_parser::CppIfExpr::condition",
			L"cpp_parser::CppIfExpr::falseBranch",
			L"cpp_parser::CppIfExpr::trueBranch",
			L"cpp_parser::CppIndexExpr::index",
			L"cpp_parser::CppIndexExpr::operand",
			L"cpp_parser::CppLabelStat::label",
			L"cpp_parser::CppLabelStat::stat",
			L"cpp_parser::CppLambdaCapture::id",
			L"cpp_parser::CppLambdaCapture::init",
			L"cpp_parser::CppLambdaCapture::objKind",
			L"cpp_parser::CppLambdaCapture::refKind",
			L"cpp_parser::CppLambdaExpr::captures",
			L"cpp_parser::CppLambdaExpr::functionHeader",
			L"cpp_parser::CppLambdaExpr::genericHeader",
			L"cpp_parser::CppLambdaExpr::stat",
			L"cpp_parser::CppNameIdentifier::kind",
			L"cpp_parser::CppNameIdentifier::name",
			L"cpp_parser::CppNamespaceDeclaration::decls",
			L"cpp_parser::CppNamespaceDeclaration::names",
			L"cpp_parser::CppNamespaceName::name",
			L"cpp_parser::CppNewExpr::arrayArguments",
			L"cpp_parser::CppNewExpr::init",
			L"cpp_parser::CppNewExpr::placementArguments",
			L"cpp_parser::CppNewExpr::scope",
			L"cpp_parser::CppNewExpr::type",
			L"cpp_parser::CppNumericExprLiteral::kind",
			L"cpp_parser::CppNumericExprLiteral::literal",
			L"cpp_parser::CppOperatorIdentifier::op",
			L"cpp_parser::CppOperatorTypeIdentifier::type",
			L"cpp_parser::CppOrdinaryGenericParameter::genericHeader",
			L"cpp_parser::CppOrdinaryGenericParameter::id",
			L"cpp_parser::CppOrdinaryGenericParameter::init",
			L"cpp_parser::CppOrdinaryGenericParameter::typenameToken",
			L"cpp_parser::CppOrdinaryGenericParameter::variadic",
			L"cpp_parser::CppParenthesisExpr::expr",
			L"cpp_parser::CppPostfixUnaryExpr::op",
			L"cpp_parser::CppPostfixUnaryExpr::operand",
			L"cpp_parser::CppPrefixUnaryExpr::op",
			L"cpp_parser::CppPrefixUnaryExpr::operand",
			L"cpp_parser::CppPrimitiveExprLiteral::kind",
			L"cpp_parser::CppPrimitiveType::kind",
			L"cpp_parser::CppPrimitiveType::literal1",
			L"cpp_parser::CppPrimitiveType::literal2",
			L"cpp_parser::CppQualifiedName::arguments",
			L"cpp_parser::CppQualifiedName::expr",
			L"cpp_parser::CppQualifiedName::id",
			L"cpp_parser::CppQualifiedName::kind",
			L"cpp_parser::CppQualifiedName::parent",
			L"cpp_parser::CppReturnStat::expr",
			L"cpp_parser::CppSizeofExpr::argument",
			L"cpp_parser::CppSizeofExpr::variadic",
			L"cpp_parser::CppStatementToResolve::candidates",
			L"cpp_parser::CppStaticAssertDeclaration::expr",
			L"cpp_parser::CppStaticAssertDeclaration::message",
			L"cpp_parser::CppStringLiteral::fragments",
			L"cpp_parser::CppStringLiteralFragment::kind",
			L"cpp_parser::CppStringLiteralFragment::literal",
			L"cpp_parser::CppSwitchStat::condition",
			L"cpp_parser::CppSwitchStat::stat",
			L"cpp_parser::CppSysFuncExpr::argument",
			L"cpp_parser::CppSysFuncExpr::keyword",
			L"cpp_parser::CppSysFuncExpr::variadic",
			L"cpp_parser::CppTemplateDeclaration::decl",
			L"cpp_parser::CppTemplateDeclaration::genericHeader",
			L"cpp_parser::CppThrowExpr::argument",
			L"cpp_parser::CppTryStat::catchParts",
			L"cpp_parser::CppTryStat::tryStat",
			L"cpp_parser::CppTryStatCatchPart::decl",
			L"cpp_parser::CppTryStatCatchPart::stat",
			L"cpp_parser::CppTypeOrExprOrOthersToResolve::candidates",
			L"cpp_parser::CppTypeOrExprToResolve::candidates",
			L"cpp_parser::CppTypedefDeclaration::decl",
			L"cpp_parser::CppUsingNamespaceDeclaration::names",
			L"cpp_parser::CppUsingTypeDeclaration::name",
			L"cpp_parser::CppUsingTypeDeclaration::type",
			L"cpp_parser::CppUsingValueDeclaration::name",
			L"cpp_parser::CppUsingValueDeclaration::typenameKeyword",
			L"cpp_parser::CppVarBraceInit::arguments",
			L"cpp_parser::CppVarParanthesisInit::arguments",
			L"cpp_parser::CppVarStatInit::initItems",
			L"cpp_parser::CppVarStatInit::stat",
			L"cpp_parser::CppVarStatInitItem::init",
			L"cpp_parser::CppVarStatInitItem::name",
			L"cpp_parser::CppVarValueInit::expr",
			L"cpp_parser::CppVariablesDeclaration::firstVarPart",
			L"cpp_parser::CppVariablesDeclaration::type",
			L"cpp_parser::CppVariadicExpr::operand",
			L"cpp_parser::CppVariadicExpr::variadic",
			L"cpp_parser::CppVolatileType::type",
			L"cpp_parser::CppWhileStat::condition",
			L"cpp_parser::CppWhileStat::stat",
			L"cpp_parser::Cpp__TryStat::exceptStat",
			L"cpp_parser::Cpp__TryStat::filter",
			L"cpp_parser::Cpp__TryStat::finallyStat",
			L"cpp_parser::Cpp__TryStat::tryStat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 185 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> CppAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = CppCppTypeName((CppClasses)type);
		switch((CppClasses)type)
		{
		case CppClasses::BinaryExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppBinaryExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::BlockStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppBlockStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::BraceExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppBraceExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::BreakStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppBreakStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppCallExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::CaseStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppCaseStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::CastExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppCastExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::ClassDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppClassDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::ConstType:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppConstType, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::ContinueStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppContinueStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::Declaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclarationCommon:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclarationCommon, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclarationToResolve:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclarationToResolve, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclaratorFunctionPart:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaratorFunctionPart, cpp_parser::CppDeclaratorFunctionPartToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclaratorFunctionPartCommon:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaratorFunctionPartCommon, cpp_parser::CppDeclaratorFunctionPartToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclaratorFunctionPartToResolve:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaratorFunctionPartToResolve, cpp_parser::CppDeclaratorFunctionPartToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclaratorType:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaratorType, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclaratorVariablePart:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaratorVariablePart, cpp_parser::CppDeclaratorVariablePartToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclaratorVariablePartCommon:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaratorVariablePartCommon, cpp_parser::CppDeclaratorVariablePartToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeclaratorVariablePartToResolve:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeclaratorVariablePartToResolve, cpp_parser::CppDeclaratorVariablePartToResolve>(type, candidates, cppTypeName);
		case CppClasses::DefaultStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDefaultStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::DeleteExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDeleteExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::DoWhileStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppDoWhileStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::EmptyStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppEmptyStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::EnumDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppEnumDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::ExprOnly:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppExprOnly, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::ExprStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppExprStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::ExternDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppExternDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::ForStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppForStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::FriendTypeDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppFriendTypeDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::GenericArgument:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppGenericArgument, cpp_parser::CppTypeOrExprOrOthersToResolve>(type, candidates, cppTypeName);
		case CppClasses::GotoStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppGotoStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::IfElseStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppIfElseStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::IfExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppIfExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::IndexExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppIndexExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::LabelStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppLabelStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::LambdaExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppLambdaExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::NamespaceDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppNamespaceDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::NewExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppNewExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::NumericExprLiteral:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppNumericExprLiteral, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::OrdinaryGenericParameter:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppOrdinaryGenericParameter, cpp_parser::CppTypeOrExprOrOthersToResolve>(type, candidates, cppTypeName);
		case CppClasses::ParenthesisExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppParenthesisExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::PostfixUnaryExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppPostfixUnaryExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::PrefixUnaryExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppPrefixUnaryExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::PrimitiveExprLiteral:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppPrimitiveExprLiteral, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::PrimitiveType:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppPrimitiveType, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::QualifiedName:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppQualifiedName, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::ReturnStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppReturnStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::SizeofExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppSizeofExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::Statement:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppStatement, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::StatementToResolve:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppStatementToResolve, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::StaticAssertDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppStaticAssertDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::StringLiteral:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppStringLiteral, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::SwitchStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppSwitchStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::SysFuncExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppSysFuncExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::TemplateDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTemplateDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::ThrowExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppThrowExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::TryStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTryStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::TypeOnly:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTypeOnly, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::TypeOrExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTypeOrExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::TypeOrExprOrOthers:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTypeOrExprOrOthers, cpp_parser::CppTypeOrExprOrOthersToResolve>(type, candidates, cppTypeName);
		case CppClasses::TypeOrExprOrOthersToResolve:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTypeOrExprOrOthersToResolve, cpp_parser::CppTypeOrExprOrOthersToResolve>(type, candidates, cppTypeName);
		case CppClasses::TypeOrExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTypeOrExprToResolve, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::TypedefDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppTypedefDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::UsingNamespaceDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppUsingNamespaceDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::UsingTypeDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppUsingTypeDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::UsingValueDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppUsingValueDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::VariablesDeclaration:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppVariablesDeclaration, cpp_parser::CppDeclarationToResolve>(type, candidates, cppTypeName);
		case CppClasses::VariadicExpr:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppVariadicExpr, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::VolatileType:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppVolatileType, cpp_parser::CppTypeOrExprToResolve>(type, candidates, cppTypeName);
		case CppClasses::WhileStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::CppWhileStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::__LeaveStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::Cpp__LeaveStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		case CppClasses::__TryStat:
			return vl::glr::AssemblerResolveAmbiguity<cpp_parser::Cpp__TryStat, cpp_parser::CppStatementToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
