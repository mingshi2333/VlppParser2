/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		ConstType = 0,
		ExprOnly = 1,
		File = 2,
		GenericArgument = 3,
		GenericArguments = 4,
		Identifier = 5,
		NameIdentifier = 6,
		NumericExprLiteral = 7,
		OperatorIdentifier = 8,
		PrimitiveExprLiteral = 9,
		PrimitiveType = 10,
		QualifiedName = 11,
		StringLiteral = 12,
		StringLiteralFragment = 13,
		TypeOnly = 14,
		TypeOrExpr = 15,
		VolatileType = 16,
	};

	enum class CppFields : vl::vint32_t
	{
		ConstType_type = 0,
		GenericArgument_argument = 1,
		GenericArgument_variadic = 2,
		GenericArguments_arguments = 3,
		NameIdentifier_kind = 4,
		NameIdentifier_name = 5,
		NumericExprLiteral_kind = 6,
		NumericExprLiteral_literal = 7,
		OperatorIdentifier_op = 8,
		PrimitiveExprLiteral_kind = 9,
		PrimitiveType_kind = 10,
		PrimitiveType_literal1 = 11,
		PrimitiveType_literal2 = 12,
		QualifiedName_arguments = 13,
		QualifiedName_expr = 14,
		QualifiedName_id = 15,
		QualifiedName_kind = 16,
		QualifiedName_parent = 17,
		StringLiteral_fragments = 18,
		StringLiteralFragment_kind = 19,
		StringLiteralFragment_literal = 20,
		VolatileType_type = 21,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif