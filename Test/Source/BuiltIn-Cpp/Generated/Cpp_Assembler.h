/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		BinaryExpr = 0,
		BraceExpr = 1,
		CallExpr = 2,
		CastExpr = 3,
		ConstType = 4,
		ExprOnly = 5,
		File = 6,
		GenericArgument = 7,
		GenericArguments = 8,
		Identifier = 9,
		IndexExpr = 10,
		NameIdentifier = 11,
		NumericExprLiteral = 12,
		OperatorIdentifier = 13,
		ParenthesisExpr = 14,
		PostfixUnaryExpr = 15,
		PrefixUnaryExpr = 16,
		PrimitiveExprLiteral = 17,
		PrimitiveType = 18,
		QualifiedName = 19,
		StringLiteral = 20,
		StringLiteralFragment = 21,
		SysFuncExpr = 22,
		TypeOnly = 23,
		TypeOrExpr = 24,
		VolatileType = 25,
	};

	enum class CppFields : vl::vint32_t
	{
		BinaryExpr_first = 0,
		BinaryExpr_op = 1,
		BinaryExpr_second = 2,
		BraceExpr_arguments = 3,
		CallExpr_arguments = 4,
		CallExpr_operand = 5,
		CastExpr_expr = 6,
		CastExpr_keyword = 7,
		CastExpr_type = 8,
		ConstType_type = 9,
		GenericArgument_argument = 10,
		GenericArgument_variadic = 11,
		GenericArguments_arguments = 12,
		IndexExpr_index = 13,
		IndexExpr_operand = 14,
		NameIdentifier_kind = 15,
		NameIdentifier_name = 16,
		NumericExprLiteral_kind = 17,
		NumericExprLiteral_literal = 18,
		OperatorIdentifier_op = 19,
		ParenthesisExpr_expr = 20,
		PostfixUnaryExpr_op = 21,
		PostfixUnaryExpr_operand = 22,
		PrefixUnaryExpr_op = 23,
		PrefixUnaryExpr_operand = 24,
		PrimitiveExprLiteral_kind = 25,
		PrimitiveType_kind = 26,
		PrimitiveType_literal1 = 27,
		PrimitiveType_literal2 = 28,
		QualifiedName_arguments = 29,
		QualifiedName_expr = 30,
		QualifiedName_id = 31,
		QualifiedName_kind = 32,
		QualifiedName_parent = 33,
		StringLiteral_fragments = 34,
		StringLiteralFragment_kind = 35,
		StringLiteralFragment_literal = 36,
		SysFuncExpr_argument = 37,
		SysFuncExpr_keyword = 38,
		SysFuncExpr_variadic = 39,
		VolatileType_type = 40,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif