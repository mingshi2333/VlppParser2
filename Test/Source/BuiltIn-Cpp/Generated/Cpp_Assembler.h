/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		AdvancedType = 0,
		BinaryExpr = 1,
		BlockStat = 2,
		BraceExpr = 3,
		BreakStat = 4,
		CallExpr = 5,
		CaseStat = 6,
		CastExpr = 7,
		ConstType = 8,
		ContinueStat = 9,
		DeclStat = 10,
		Declaration = 11,
		Declarator = 12,
		DeclaratorArrayPart = 13,
		DeclaratorFunctionPart = 14,
		DeclaratorKeyword = 15,
		DeclaratorType = 16,
		DeclaratorVariablePart = 17,
		DefaultStat = 18,
		DeleteExpr = 19,
		DoWhileStat = 20,
		EmptyStat = 21,
		ExprOnly = 22,
		ExprStat = 23,
		File = 24,
		ForEachStat = 25,
		ForStat = 26,
		FunctionKeyword = 27,
		GenericArgument = 28,
		GenericArguments = 29,
		GotoStat = 30,
		Identifier = 31,
		IfElseStat = 32,
		IfExpr = 33,
		IndexExpr = 34,
		LabelStat = 35,
		MultipleVarDeclaration = 36,
		NameIdentifier = 37,
		NewExpr = 38,
		NumericExprLiteral = 39,
		OperatorIdentifier = 40,
		ParenthesisExpr = 41,
		PostfixUnaryExpr = 42,
		PrefixUnaryExpr = 43,
		PrimitiveExprLiteral = 44,
		PrimitiveType = 45,
		QualifiedName = 46,
		ReturnStat = 47,
		SingleVarDeclaration = 48,
		SizeofExpr = 49,
		Statement = 50,
		StaticAssertStat = 51,
		StringLiteral = 52,
		StringLiteralFragment = 53,
		SwitchStat = 54,
		SysFuncExpr = 55,
		ThrowExpr = 56,
		TryStat = 57,
		TryStatCatchPart = 58,
		TypeOnly = 59,
		TypeOrExpr = 60,
		TypeOrExprOrOthers = 61,
		VarBraceInit = 62,
		VarInit = 63,
		VarParanthesisInit = 64,
		VarValueInit = 65,
		VariadicExpr = 66,
		VolatileType = 67,
		WhileStat = 68,
		__LeaveStat = 69,
		__TryStat = 70,
	};

	enum class CppFields : vl::vint32_t
	{
		AdvancedType_argument = 0,
		AdvancedType_kind = 1,
		BinaryExpr_left = 2,
		BinaryExpr_op = 3,
		BinaryExpr_right = 4,
		BlockStat_statements = 5,
		BraceExpr_arguments = 6,
		CallExpr_arguments = 7,
		CallExpr_kind = 8,
		CallExpr_operand = 9,
		CaseStat_expr = 10,
		CaseStat_stat = 11,
		CastExpr_expr = 12,
		CastExpr_keyword = 13,
		CastExpr_type = 14,
		ConstType_type = 15,
		DeclStat_decl = 16,
		Declarator_advancedTypes = 17,
		Declarator_arrayParts = 18,
		Declarator_funcPart = 19,
		Declarator_id = 20,
		Declarator_innerDeclarator = 21,
		Declarator_keywords = 22,
		Declarator_variadic = 23,
		DeclaratorArrayPart_argument = 24,
		DeclaratorFunctionPart_deferredType = 25,
		DeclaratorFunctionPart_keywords = 26,
		DeclaratorFunctionPart_parameters = 27,
		DeclaratorFunctionPart_variadic = 28,
		DeclaratorKeyword_keyword = 29,
		DeclaratorType_declarator = 30,
		DeclaratorType_keywords = 31,
		DeclaratorType_type = 32,
		DeclaratorVariablePart_declarator = 33,
		DeclaratorVariablePart_init = 34,
		DefaultStat_stat = 35,
		DeleteExpr_argument = 36,
		DeleteExpr_array = 37,
		DeleteExpr_scope = 38,
		DoWhileStat_condition = 39,
		DoWhileStat_stat = 40,
		ExprStat_expr = 41,
		ForEachStat_collection = 42,
		ForEachStat_decl = 43,
		ForEachStat_stat = 44,
		ForStat_condition = 45,
		ForStat_decl = 46,
		ForStat_sideEffect = 47,
		ForStat_stat = 48,
		FunctionKeyword_arguments = 49,
		FunctionKeyword_keyword = 50,
		GenericArgument_argument = 51,
		GenericArgument_variadic = 52,
		GenericArguments_arguments = 53,
		GotoStat_label = 54,
		IfElseStat_condition = 55,
		IfElseStat_falseStat = 56,
		IfElseStat_trueStat = 57,
		IfExpr_condition = 58,
		IfExpr_falseBranch = 59,
		IfExpr_trueBranch = 60,
		IndexExpr_index = 61,
		IndexExpr_operand = 62,
		LabelStat_label = 63,
		LabelStat_stat = 64,
		MultipleVarDeclaration_keywords = 65,
		MultipleVarDeclaration_type = 66,
		MultipleVarDeclaration_varParts = 67,
		NameIdentifier_kind = 68,
		NameIdentifier_name = 69,
		NewExpr_arrayArguments = 70,
		NewExpr_init = 71,
		NewExpr_placementArguments = 72,
		NewExpr_scope = 73,
		NewExpr_type = 74,
		NumericExprLiteral_kind = 75,
		NumericExprLiteral_literal = 76,
		OperatorIdentifier_op = 77,
		ParenthesisExpr_expr = 78,
		PostfixUnaryExpr_op = 79,
		PostfixUnaryExpr_operand = 80,
		PrefixUnaryExpr_op = 81,
		PrefixUnaryExpr_operand = 82,
		PrimitiveExprLiteral_kind = 83,
		PrimitiveType_kind = 84,
		PrimitiveType_literal1 = 85,
		PrimitiveType_literal2 = 86,
		QualifiedName_arguments = 87,
		QualifiedName_expr = 88,
		QualifiedName_id = 89,
		QualifiedName_kind = 90,
		QualifiedName_parent = 91,
		ReturnStat_expr = 92,
		SingleVarDeclaration_keywords = 93,
		SingleVarDeclaration_type = 94,
		SingleVarDeclaration_varPart = 95,
		SizeofExpr_argument = 96,
		SizeofExpr_variadic = 97,
		StaticAssertStat_expr = 98,
		StaticAssertStat_message = 99,
		StringLiteral_fragments = 100,
		StringLiteralFragment_kind = 101,
		StringLiteralFragment_literal = 102,
		SwitchStat_condition = 103,
		SwitchStat_stat = 104,
		SysFuncExpr_argument = 105,
		SysFuncExpr_keyword = 106,
		SysFuncExpr_variadic = 107,
		ThrowExpr_argument = 108,
		TryStat_catchParts = 109,
		TryStat_tryStat = 110,
		TryStatCatchPart_decl = 111,
		TryStatCatchPart_stat = 112,
		VarBraceInit_arguments = 113,
		VarParanthesisInit_arguments = 114,
		VarValueInit_expr = 115,
		VariadicExpr_operand = 116,
		VariadicExpr_variadic = 117,
		VolatileType_type = 118,
		WhileStat_condition = 119,
		WhileStat_stat = 120,
		__TryStat_exceptStat = 121,
		__TryStat_filter = 122,
		__TryStat_finallyStat = 123,
		__TryStat_tryStat = 124,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif