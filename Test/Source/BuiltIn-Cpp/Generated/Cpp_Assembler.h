/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		AdvancedType = 0,
		BinaryExpr = 1,
		BraceExpr = 2,
		CallExpr = 3,
		CastExpr = 4,
		ConstType = 5,
		Declarator = 6,
		DeclaratorArrayPart = 7,
		DeclaratorFunctionPart = 8,
		DeclaratorKeyword = 9,
		DeclaratorType = 10,
		DeleteExpr = 11,
		ExprOnly = 12,
		File = 13,
		FunctionParameter = 14,
		GenericArgument = 15,
		GenericArguments = 16,
		Identifier = 17,
		IfExpr = 18,
		IndexExpr = 19,
		NameIdentifier = 20,
		NewExpr = 21,
		NumericExprLiteral = 22,
		OperatorIdentifier = 23,
		ParenthesisExpr = 24,
		PostfixUnaryExpr = 25,
		PrefixUnaryExpr = 26,
		PrimitiveExprLiteral = 27,
		PrimitiveType = 28,
		QualifiedName = 29,
		SizeofExpr = 30,
		StringLiteral = 31,
		StringLiteralFragment = 32,
		SysFuncExpr = 33,
		ThrowExpr = 34,
		TypeOnly = 35,
		TypeOrExpr = 36,
		VolatileType = 37,
	};

	enum class CppFields : vl::vint32_t
	{
		AdvancedType_argument = 0,
		AdvancedType_kind = 1,
		BinaryExpr_left = 2,
		BinaryExpr_op = 3,
		BinaryExpr_right = 4,
		BraceExpr_arguments = 5,
		CallExpr_arguments = 6,
		CallExpr_operand = 7,
		CastExpr_expr = 8,
		CastExpr_keyword = 9,
		CastExpr_type = 10,
		ConstType_type = 11,
		Declarator_advancedTypes = 12,
		Declarator_arrayParts = 13,
		Declarator_funcPart = 14,
		Declarator_id = 15,
		Declarator_innerDeclarator = 16,
		Declarator_keywords = 17,
		DeclaratorArrayPart_argument = 18,
		DeclaratorFunctionPart_parameters = 19,
		DeclaratorFunctionPart_variadic = 20,
		DeclaratorKeyword_keyword = 21,
		DeclaratorType_declarator = 22,
		DeclaratorType_type = 23,
		DeleteExpr_argument = 24,
		DeleteExpr_array = 25,
		DeleteExpr_scope = 26,
		FunctionParameter_declarator = 27,
		FunctionParameter_type = 28,
		FunctionParameter_variadic = 29,
		GenericArgument_argument = 30,
		GenericArgument_variadic = 31,
		GenericArguments_arguments = 32,
		IfExpr_condition = 33,
		IfExpr_falseBranch = 34,
		IfExpr_trueBranch = 35,
		IndexExpr_index = 36,
		IndexExpr_operand = 37,
		NameIdentifier_kind = 38,
		NameIdentifier_name = 39,
		NewExpr_init = 40,
		NewExpr_initArguments = 41,
		NewExpr_placementArguments = 42,
		NewExpr_scope = 43,
		NewExpr_type = 44,
		NumericExprLiteral_kind = 45,
		NumericExprLiteral_literal = 46,
		OperatorIdentifier_op = 47,
		ParenthesisExpr_expr = 48,
		PostfixUnaryExpr_op = 49,
		PostfixUnaryExpr_operand = 50,
		PrefixUnaryExpr_op = 51,
		PrefixUnaryExpr_operand = 52,
		PrimitiveExprLiteral_kind = 53,
		PrimitiveType_kind = 54,
		PrimitiveType_literal1 = 55,
		PrimitiveType_literal2 = 56,
		QualifiedName_arguments = 57,
		QualifiedName_expr = 58,
		QualifiedName_id = 59,
		QualifiedName_kind = 60,
		QualifiedName_parent = 61,
		SizeofExpr_argument = 62,
		SizeofExpr_variadic = 63,
		StringLiteral_fragments = 64,
		StringLiteralFragment_kind = 65,
		StringLiteralFragment_literal = 66,
		SysFuncExpr_argument = 67,
		SysFuncExpr_keyword = 68,
		SysFuncExpr_variadic = 69,
		ThrowExpr_argument = 70,
		VolatileType_type = 71,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif