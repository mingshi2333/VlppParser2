/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		AdvancedType = 0,
		BinaryExpr = 1,
		BlockStat = 2,
		BraceExpr = 3,
		BreakStat = 4,
		CallExpr = 5,
		CaseStat = 6,
		CastExpr = 7,
		ConstType = 8,
		ContinueStat = 9,
		DeclStat = 10,
		Declaration = 11,
		Declarator = 12,
		DeclaratorArrayPart = 13,
		DeclaratorFunctionPart = 14,
		DeclaratorKeyword = 15,
		DeclaratorType = 16,
		DeclaratorVariablePart = 17,
		DefaultStat = 18,
		DeleteExpr = 19,
		EmptyStat = 20,
		ExprOnly = 21,
		ExprStat = 22,
		File = 23,
		FunctionKeyword = 24,
		GenericArgument = 25,
		GenericArguments = 26,
		GotoStat = 27,
		Identifier = 28,
		IfExpr = 29,
		IndexExpr = 30,
		LabelStat = 31,
		MultipleVarDeclaration = 32,
		NameIdentifier = 33,
		NewExpr = 34,
		NumericExprLiteral = 35,
		OperatorIdentifier = 36,
		ParenthesisExpr = 37,
		PostfixUnaryExpr = 38,
		PrefixUnaryExpr = 39,
		PrimitiveExprLiteral = 40,
		PrimitiveType = 41,
		QualifiedName = 42,
		ReturnStat = 43,
		SingleVarDeclaration = 44,
		SizeofExpr = 45,
		Statement = 46,
		StaticAssertStat = 47,
		StringLiteral = 48,
		StringLiteralFragment = 49,
		SysFuncExpr = 50,
		ThrowExpr = 51,
		TypeOnly = 52,
		TypeOrExpr = 53,
		TypeOrExprOrOthers = 54,
		VarBraceInit = 55,
		VarInit = 56,
		VarParanthesisInit = 57,
		VarValueInit = 58,
		VariadicExpr = 59,
		VolatileType = 60,
		__LeaveStat = 61,
	};

	enum class CppFields : vl::vint32_t
	{
		AdvancedType_argument = 0,
		AdvancedType_kind = 1,
		BinaryExpr_left = 2,
		BinaryExpr_op = 3,
		BinaryExpr_right = 4,
		BlockStat_statements = 5,
		BraceExpr_arguments = 6,
		CallExpr_arguments = 7,
		CallExpr_kind = 8,
		CallExpr_operand = 9,
		CaseStat_expr = 10,
		CaseStat_stat = 11,
		CastExpr_expr = 12,
		CastExpr_keyword = 13,
		CastExpr_type = 14,
		ConstType_type = 15,
		DeclStat_decl = 16,
		Declarator_advancedTypes = 17,
		Declarator_arrayParts = 18,
		Declarator_funcPart = 19,
		Declarator_id = 20,
		Declarator_innerDeclarator = 21,
		Declarator_keywords = 22,
		Declarator_variadic = 23,
		DeclaratorArrayPart_argument = 24,
		DeclaratorFunctionPart_deferredType = 25,
		DeclaratorFunctionPart_keywords = 26,
		DeclaratorFunctionPart_parameters = 27,
		DeclaratorFunctionPart_variadic = 28,
		DeclaratorKeyword_keyword = 29,
		DeclaratorType_declarator = 30,
		DeclaratorType_keywords = 31,
		DeclaratorType_type = 32,
		DeclaratorVariablePart_declarator = 33,
		DeclaratorVariablePart_init = 34,
		DefaultStat_stat = 35,
		DeleteExpr_argument = 36,
		DeleteExpr_array = 37,
		DeleteExpr_scope = 38,
		ExprStat_expr = 39,
		FunctionKeyword_arguments = 40,
		FunctionKeyword_keyword = 41,
		GenericArgument_argument = 42,
		GenericArgument_variadic = 43,
		GenericArguments_arguments = 44,
		GotoStat_label = 45,
		IfExpr_condition = 46,
		IfExpr_falseBranch = 47,
		IfExpr_trueBranch = 48,
		IndexExpr_index = 49,
		IndexExpr_operand = 50,
		LabelStat_label = 51,
		LabelStat_stat = 52,
		MultipleVarDeclaration_keywords = 53,
		MultipleVarDeclaration_type = 54,
		MultipleVarDeclaration_varParts = 55,
		NameIdentifier_kind = 56,
		NameIdentifier_name = 57,
		NewExpr_arrayArguments = 58,
		NewExpr_init = 59,
		NewExpr_placementArguments = 60,
		NewExpr_scope = 61,
		NewExpr_type = 62,
		NumericExprLiteral_kind = 63,
		NumericExprLiteral_literal = 64,
		OperatorIdentifier_op = 65,
		ParenthesisExpr_expr = 66,
		PostfixUnaryExpr_op = 67,
		PostfixUnaryExpr_operand = 68,
		PrefixUnaryExpr_op = 69,
		PrefixUnaryExpr_operand = 70,
		PrimitiveExprLiteral_kind = 71,
		PrimitiveType_kind = 72,
		PrimitiveType_literal1 = 73,
		PrimitiveType_literal2 = 74,
		QualifiedName_arguments = 75,
		QualifiedName_expr = 76,
		QualifiedName_id = 77,
		QualifiedName_kind = 78,
		QualifiedName_parent = 79,
		ReturnStat_expr = 80,
		SingleVarDeclaration_keywords = 81,
		SingleVarDeclaration_type = 82,
		SingleVarDeclaration_varPart = 83,
		SizeofExpr_argument = 84,
		SizeofExpr_variadic = 85,
		StaticAssertStat_expr = 86,
		StaticAssertStat_message = 87,
		StringLiteral_fragments = 88,
		StringLiteralFragment_kind = 89,
		StringLiteralFragment_literal = 90,
		SysFuncExpr_argument = 91,
		SysFuncExpr_keyword = 92,
		SysFuncExpr_variadic = 93,
		ThrowExpr_argument = 94,
		VarBraceInit_arguments = 95,
		VarParanthesisInit_arguments = 96,
		VarValueInit_expr = 97,
		VariadicExpr_operand = 98,
		VariadicExpr_variadic = 99,
		VolatileType_type = 100,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif