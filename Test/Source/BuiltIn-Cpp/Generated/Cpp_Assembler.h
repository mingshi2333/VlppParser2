/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		BinaryExpr = 0,
		BraceExpr = 1,
		CallExpr = 2,
		CastExpr = 3,
		ConstType = 4,
		DeleteExpr = 5,
		ExprOnly = 6,
		File = 7,
		GenericArgument = 8,
		GenericArguments = 9,
		Identifier = 10,
		IfExpr = 11,
		IndexExpr = 12,
		NameIdentifier = 13,
		NumericExprLiteral = 14,
		OperatorIdentifier = 15,
		ParenthesisExpr = 16,
		PostfixUnaryExpr = 17,
		PrefixUnaryExpr = 18,
		PrimitiveExprLiteral = 19,
		PrimitiveType = 20,
		QualifiedName = 21,
		StringLiteral = 22,
		StringLiteralFragment = 23,
		SysFuncExpr = 24,
		ThrowExpr = 25,
		TypeOnly = 26,
		TypeOrExpr = 27,
		VolatileType = 28,
	};

	enum class CppFields : vl::vint32_t
	{
		BinaryExpr_left = 0,
		BinaryExpr_op = 1,
		BinaryExpr_right = 2,
		BraceExpr_arguments = 3,
		CallExpr_arguments = 4,
		CallExpr_operand = 5,
		CastExpr_expr = 6,
		CastExpr_keyword = 7,
		CastExpr_type = 8,
		ConstType_type = 9,
		DeleteExpr_argument = 10,
		DeleteExpr_array = 11,
		DeleteExpr_scope = 12,
		GenericArgument_argument = 13,
		GenericArgument_variadic = 14,
		GenericArguments_arguments = 15,
		IfExpr_condition = 16,
		IfExpr_falseBranch = 17,
		IfExpr_trueBranch = 18,
		IndexExpr_index = 19,
		IndexExpr_operand = 20,
		NameIdentifier_kind = 21,
		NameIdentifier_name = 22,
		NumericExprLiteral_kind = 23,
		NumericExprLiteral_literal = 24,
		OperatorIdentifier_op = 25,
		ParenthesisExpr_expr = 26,
		PostfixUnaryExpr_op = 27,
		PostfixUnaryExpr_operand = 28,
		PrefixUnaryExpr_op = 29,
		PrefixUnaryExpr_operand = 30,
		PrimitiveExprLiteral_kind = 31,
		PrimitiveType_kind = 32,
		PrimitiveType_literal1 = 33,
		PrimitiveType_literal2 = 34,
		QualifiedName_arguments = 35,
		QualifiedName_expr = 36,
		QualifiedName_id = 37,
		QualifiedName_kind = 38,
		QualifiedName_parent = 39,
		StringLiteral_fragments = 40,
		StringLiteralFragment_kind = 41,
		StringLiteralFragment_literal = 42,
		SysFuncExpr_argument = 43,
		SysFuncExpr_keyword = 44,
		SysFuncExpr_variadic = 45,
		ThrowExpr_argument = 46,
		VolatileType_type = 47,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif