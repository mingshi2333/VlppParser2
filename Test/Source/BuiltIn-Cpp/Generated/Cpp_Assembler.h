/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		AdvancedType = 0,
		BinaryExpr = 1,
		BlockStat = 2,
		BraceExpr = 3,
		BreakStat = 4,
		CallExpr = 5,
		CaseStat = 6,
		CastExpr = 7,
		ClassBody = 8,
		ClassDeclaration = 9,
		ClassInheritance = 10,
		ClassMemberPart = 11,
		ConstType = 12,
		ContinueStat = 13,
		DeclStat = 14,
		Declaration = 15,
		Declarator = 16,
		DeclaratorArrayPart = 17,
		DeclaratorFunctionPart = 18,
		DeclaratorKeyword = 19,
		DeclaratorType = 20,
		DeclaratorVariablePart = 21,
		DefaultStat = 22,
		DeleteExpr = 23,
		DoWhileStat = 24,
		EmptyStat = 25,
		EnumBody = 26,
		EnumDeclaration = 27,
		EnumItem = 28,
		ExprOnly = 29,
		ExprStat = 30,
		ExternDeclaration = 31,
		File = 32,
		ForStat = 33,
		ForStatConditionPart = 34,
		ForStatIterateCondition = 35,
		ForStatLoopCondition = 36,
		FunctionKeyword = 37,
		GenericArgument = 38,
		GenericArguments = 39,
		GenericHeader = 40,
		GotoStat = 41,
		Identifier = 42,
		IfElseStat = 43,
		IfExpr = 44,
		IndexExpr = 45,
		LabelStat = 46,
		LambdaCapture = 47,
		LambdaExpr = 48,
		NameIdentifier = 49,
		NamespaceDeclaration = 50,
		NamespaceName = 51,
		NewExpr = 52,
		NumericExprLiteral = 53,
		OperatorIdentifier = 54,
		OperatorTypeIdentifier = 55,
		OrdinaryGenericParameter = 56,
		ParenthesisExpr = 57,
		PostfixUnaryExpr = 58,
		PrefixUnaryExpr = 59,
		PrimitiveExprLiteral = 60,
		PrimitiveType = 61,
		QualifiedName = 62,
		ReturnStat = 63,
		SizeofExpr = 64,
		Statement = 65,
		StatementToResolve = 66,
		StaticAssertDeclaration = 67,
		StringLiteral = 68,
		StringLiteralFragment = 69,
		SwitchStat = 70,
		SysFuncExpr = 71,
		ThrowExpr = 72,
		TryStat = 73,
		TryStatCatchPart = 74,
		TypeOnly = 75,
		TypeOrExpr = 76,
		TypeOrExprOrOthers = 77,
		TypeOrExprOrOthersToResolve = 78,
		TypeOrExprToResolve = 79,
		TypedefDeclaration = 80,
		UsingNamespaceDeclaration = 81,
		UsingTypeDeclaration = 82,
		UsingValueDeclaration = 83,
		VarBraceInit = 84,
		VarInit = 85,
		VarParanthesisInit = 86,
		VarStatInit = 87,
		VarValueInit = 88,
		VariablesDeclaration = 89,
		VariadicExpr = 90,
		VolatileType = 91,
		WhileStat = 92,
		__LeaveStat = 93,
		__TryStat = 94,
	};

	enum class CppFields : vl::vint32_t
	{
		AdvancedType_argument = 0,
		AdvancedType_kind = 1,
		BinaryExpr_left = 2,
		BinaryExpr_op = 3,
		BinaryExpr_right = 4,
		BlockStat_statements = 5,
		BraceExpr_arguments = 6,
		CallExpr_arguments = 7,
		CallExpr_kind = 8,
		CallExpr_operand = 9,
		CaseStat_expr = 10,
		CaseStat_stat = 11,
		CastExpr_expr = 12,
		CastExpr_keyword = 13,
		CastExpr_type = 14,
		ClassBody_firstVarPart = 15,
		ClassBody_inheritances = 16,
		ClassBody_memberParts = 17,
		ClassDeclaration_body = 18,
		ClassDeclaration_friendToken = 19,
		ClassDeclaration_kind = 20,
		ClassDeclaration_name = 21,
		ClassInheritance_accessor = 22,
		ClassInheritance_type = 23,
		ClassMemberPart_accessor = 24,
		ClassMemberPart_decls = 25,
		ConstType_type = 26,
		DeclStat_decl = 27,
		Declarator_advancedTypes = 28,
		Declarator_arrayParts = 29,
		Declarator_bitfield = 30,
		Declarator_funcPart = 31,
		Declarator_id = 32,
		Declarator_innerDeclarator = 33,
		Declarator_keywords = 34,
		Declarator_variadic = 35,
		DeclaratorArrayPart_argument = 36,
		DeclaratorFunctionPart_deferredType = 37,
		DeclaratorFunctionPart_keywords = 38,
		DeclaratorFunctionPart_parameters = 39,
		DeclaratorFunctionPart_variadic = 40,
		DeclaratorKeyword_keyword = 41,
		DeclaratorType_declarator = 42,
		DeclaratorType_keywords = 43,
		DeclaratorType_type = 44,
		DeclaratorVariablePart_declarator = 45,
		DeclaratorVariablePart_init = 46,
		DeclaratorVariablePart_nextVarPart = 47,
		DefaultStat_stat = 48,
		DeleteExpr_argument = 49,
		DeleteExpr_array = 50,
		DeleteExpr_scope = 51,
		DoWhileStat_condition = 52,
		DoWhileStat_stat = 53,
		EnumBody_firstVarPart = 54,
		EnumBody_items = 55,
		EnumDeclaration_body = 56,
		EnumDeclaration_kind = 57,
		EnumDeclaration_name = 58,
		EnumDeclaration_type = 59,
		EnumItem_expr = 60,
		EnumItem_name = 61,
		ExprStat_expr = 62,
		ExternDeclaration_decls = 63,
		File_decls = 64,
		ForStat_conditionPart = 65,
		ForStat_stat = 66,
		ForStatIterateCondition_collection = 67,
		ForStatIterateCondition_decl = 68,
		ForStatLoopCondition_condition = 69,
		ForStatLoopCondition_sideEffect = 70,
		ForStatLoopCondition_varsDecl = 71,
		FunctionKeyword_arguments = 72,
		FunctionKeyword_keyword = 73,
		GenericArgument_argument = 74,
		GenericArgument_variadic = 75,
		GenericArguments_arguments = 76,
		GenericHeader_parameters = 77,
		GotoStat_label = 78,
		IfElseStat_condition = 79,
		IfElseStat_falseStat = 80,
		IfElseStat_trueStat = 81,
		IfElseStat_varsDecl = 82,
		IfExpr_condition = 83,
		IfExpr_falseBranch = 84,
		IfExpr_trueBranch = 85,
		IndexExpr_index = 86,
		IndexExpr_operand = 87,
		LabelStat_label = 88,
		LabelStat_stat = 89,
		LambdaCapture_id = 90,
		LambdaCapture_init = 91,
		LambdaCapture_objKind = 92,
		LambdaCapture_refKind = 93,
		LambdaExpr_captures = 94,
		LambdaExpr_functionHeader = 95,
		LambdaExpr_genericHeader = 96,
		LambdaExpr_stat = 97,
		NameIdentifier_kind = 98,
		NameIdentifier_name = 99,
		NamespaceDeclaration_decls = 100,
		NamespaceDeclaration_names = 101,
		NamespaceName_name = 102,
		NewExpr_arrayArguments = 103,
		NewExpr_init = 104,
		NewExpr_placementArguments = 105,
		NewExpr_scope = 106,
		NewExpr_type = 107,
		NumericExprLiteral_kind = 108,
		NumericExprLiteral_literal = 109,
		OperatorIdentifier_op = 110,
		OperatorTypeIdentifier_type = 111,
		OrdinaryGenericParameter_genericHeader = 112,
		OrdinaryGenericParameter_id = 113,
		OrdinaryGenericParameter_init = 114,
		OrdinaryGenericParameter_typenameToken = 115,
		OrdinaryGenericParameter_variadic = 116,
		ParenthesisExpr_expr = 117,
		PostfixUnaryExpr_op = 118,
		PostfixUnaryExpr_operand = 119,
		PrefixUnaryExpr_op = 120,
		PrefixUnaryExpr_operand = 121,
		PrimitiveExprLiteral_kind = 122,
		PrimitiveType_kind = 123,
		PrimitiveType_literal1 = 124,
		PrimitiveType_literal2 = 125,
		QualifiedName_arguments = 126,
		QualifiedName_expr = 127,
		QualifiedName_id = 128,
		QualifiedName_kind = 129,
		QualifiedName_parent = 130,
		ReturnStat_expr = 131,
		SizeofExpr_argument = 132,
		SizeofExpr_variadic = 133,
		StatementToResolve_candidates = 134,
		StaticAssertDeclaration_expr = 135,
		StaticAssertDeclaration_message = 136,
		StringLiteral_fragments = 137,
		StringLiteralFragment_kind = 138,
		StringLiteralFragment_literal = 139,
		SwitchStat_condition = 140,
		SwitchStat_stat = 141,
		SysFuncExpr_argument = 142,
		SysFuncExpr_keyword = 143,
		SysFuncExpr_variadic = 144,
		ThrowExpr_argument = 145,
		TryStat_catchParts = 146,
		TryStat_tryStat = 147,
		TryStatCatchPart_decl = 148,
		TryStatCatchPart_stat = 149,
		TypeOrExprOrOthersToResolve_candidates = 150,
		TypeOrExprToResolve_candidates = 151,
		TypedefDeclaration_decl = 152,
		UsingNamespaceDeclaration_names = 153,
		UsingTypeDeclaration_name = 154,
		UsingTypeDeclaration_type = 155,
		UsingValueDeclaration_name = 156,
		VarBraceInit_arguments = 157,
		VarParanthesisInit_arguments = 158,
		VarStatInit_stat = 159,
		VarValueInit_expr = 160,
		VariablesDeclaration_firstVarPart = 161,
		VariablesDeclaration_keywords = 162,
		VariablesDeclaration_type = 163,
		VariadicExpr_operand = 164,
		VariadicExpr_variadic = 165,
		VolatileType_type = 166,
		WhileStat_condition = 167,
		WhileStat_stat = 168,
		__TryStat_exceptStat = 169,
		__TryStat_filter = 170,
		__TryStat_finallyStat = 171,
		__TryStat_tryStat = 172,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif