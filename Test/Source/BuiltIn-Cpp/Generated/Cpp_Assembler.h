/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		AdvancedType = 0,
		BinaryExpr = 1,
		BlockStat = 2,
		BraceExpr = 3,
		BreakStat = 4,
		CallExpr = 5,
		CaseStat = 6,
		CastExpr = 7,
		ClassBody = 8,
		ClassDeclaration = 9,
		ClassInheritance = 10,
		ClassMemberPart = 11,
		ConstType = 12,
		ContinueStat = 13,
		DeclStat = 14,
		Declaration = 15,
		DeclarationBase = 16,
		DeclarationBaseToResolve = 17,
		Declarator = 18,
		DeclaratorArrayPart = 19,
		DeclaratorFunctionPart = 20,
		DeclaratorFunctionPartBase = 21,
		DeclaratorFunctionPartBaseToResolve = 22,
		DeclaratorKeyword = 23,
		DeclaratorType = 24,
		DeclaratorVariablePart = 25,
		DeclaratorVariablePartBase = 26,
		DeclaratorVariablePartBaseToResolve = 27,
		DefaultStat = 28,
		DeleteExpr = 29,
		DoWhileStat = 30,
		EmptyStat = 31,
		EnumBody = 32,
		EnumDeclaration = 33,
		EnumItem = 34,
		ExprOnly = 35,
		ExprStat = 36,
		ExternDeclaration = 37,
		File = 38,
		ForStat = 39,
		ForStatConditionPart = 40,
		ForStatIterateCondition = 41,
		ForStatLoopCondition = 42,
		FriendTypeDeclaration = 43,
		FunctionKeyword = 44,
		GenericArgument = 45,
		GenericArguments = 46,
		GenericHeader = 47,
		GotoStat = 48,
		Identifier = 49,
		IfElseStat = 50,
		IfExpr = 51,
		IndexExpr = 52,
		LabelStat = 53,
		LambdaCapture = 54,
		LambdaExpr = 55,
		NameIdentifier = 56,
		NamespaceDeclaration = 57,
		NamespaceName = 58,
		NewExpr = 59,
		NumericExprLiteral = 60,
		OperatorIdentifier = 61,
		OperatorTypeIdentifier = 62,
		OrdinaryGenericParameter = 63,
		ParenthesisExpr = 64,
		PostfixUnaryExpr = 65,
		PrefixUnaryExpr = 66,
		PrimitiveExprLiteral = 67,
		PrimitiveType = 68,
		QualifiedName = 69,
		ReturnStat = 70,
		SizeofExpr = 71,
		Statement = 72,
		StatementToResolve = 73,
		StaticAssertDeclaration = 74,
		StringLiteral = 75,
		StringLiteralFragment = 76,
		SwitchStat = 77,
		SysFuncExpr = 78,
		TemplateDeclaration = 79,
		ThrowExpr = 80,
		TryStat = 81,
		TryStatCatchPart = 82,
		TypeOnly = 83,
		TypeOrExpr = 84,
		TypeOrExprOrOthers = 85,
		TypeOrExprOrOthersToResolve = 86,
		TypeOrExprToResolve = 87,
		TypedefDeclaration = 88,
		UsingNamespaceDeclaration = 89,
		UsingTypeDeclaration = 90,
		UsingValueDeclaration = 91,
		VarBraceInit = 92,
		VarInit = 93,
		VarParanthesisInit = 94,
		VarStatInit = 95,
		VarStatInitItem = 96,
		VarValueInit = 97,
		VariablesDeclaration = 98,
		VariadicExpr = 99,
		VolatileType = 100,
		WhileStat = 101,
		__LeaveStat = 102,
		__TryStat = 103,
	};

	enum class CppFields : vl::vint32_t
	{
		AdvancedType_argument = 0,
		AdvancedType_kind = 1,
		BinaryExpr_left = 2,
		BinaryExpr_op = 3,
		BinaryExpr_right = 4,
		BlockStat_statements = 5,
		BraceExpr_arguments = 6,
		CallExpr_arguments = 7,
		CallExpr_kind = 8,
		CallExpr_operand = 9,
		CaseStat_expr = 10,
		CaseStat_stat = 11,
		CastExpr_expr = 12,
		CastExpr_keyword = 13,
		CastExpr_type = 14,
		ClassBody_firstVarPart = 15,
		ClassBody_inheritances = 16,
		ClassBody_memberParts = 17,
		ClassDeclaration_arguments = 18,
		ClassDeclaration_body = 19,
		ClassDeclaration_kind = 20,
		ClassDeclaration_name = 21,
		ClassInheritance_accessor = 22,
		ClassInheritance_type = 23,
		ClassInheritance_variadic = 24,
		ClassMemberPart_accessor = 25,
		ClassMemberPart_decls = 26,
		ConstType_type = 27,
		DeclStat_decl = 28,
		Declaration_keywords = 29,
		DeclarationBaseToResolve_candidates = 30,
		Declarator_advancedTypes = 31,
		Declarator_arguments = 32,
		Declarator_arrayParts = 33,
		Declarator_bitfield = 34,
		Declarator_funcPart = 35,
		Declarator_id = 36,
		Declarator_innerDeclarator = 37,
		Declarator_keywords = 38,
		Declarator_variadic = 39,
		DeclaratorArrayPart_argument = 40,
		DeclaratorFunctionPart_deferredType = 41,
		DeclaratorFunctionPart_keywords = 42,
		DeclaratorFunctionPart_parameters = 43,
		DeclaratorFunctionPart_variadic = 44,
		DeclaratorFunctionPartBaseToResolve_candidates = 45,
		DeclaratorKeyword_keyword = 46,
		DeclaratorType_declarator = 47,
		DeclaratorType_keywords = 48,
		DeclaratorType_type = 49,
		DeclaratorVariablePart_declarator = 50,
		DeclaratorVariablePart_init = 51,
		DeclaratorVariablePart_nextVarPart = 52,
		DeclaratorVariablePartBaseToResolve_candidates = 53,
		DefaultStat_stat = 54,
		DeleteExpr_argument = 55,
		DeleteExpr_array = 56,
		DeleteExpr_scope = 57,
		DoWhileStat_condition = 58,
		DoWhileStat_stat = 59,
		EnumBody_firstVarPart = 60,
		EnumBody_items = 61,
		EnumDeclaration_body = 62,
		EnumDeclaration_kind = 63,
		EnumDeclaration_name = 64,
		EnumDeclaration_type = 65,
		EnumItem_expr = 66,
		EnumItem_name = 67,
		ExprStat_expr = 68,
		ExternDeclaration_decls = 69,
		File_decls = 70,
		ForStat_conditionPart = 71,
		ForStat_stat = 72,
		ForStatIterateCondition_collection = 73,
		ForStatIterateCondition_decl = 74,
		ForStatLoopCondition_condition = 75,
		ForStatLoopCondition_sideEffect = 76,
		ForStatLoopCondition_varsDecl = 77,
		FriendTypeDeclaration_type = 78,
		FunctionKeyword_arguments = 79,
		FunctionKeyword_keyword = 80,
		GenericArgument_argument = 81,
		GenericArgument_variadic = 82,
		GenericArguments_arguments = 83,
		GenericHeader_parameters = 84,
		GotoStat_label = 85,
		IfElseStat_condition = 86,
		IfElseStat_falseStat = 87,
		IfElseStat_trueStat = 88,
		IfElseStat_varsDecl = 89,
		IfExpr_condition = 90,
		IfExpr_falseBranch = 91,
		IfExpr_trueBranch = 92,
		IndexExpr_index = 93,
		IndexExpr_operand = 94,
		LabelStat_label = 95,
		LabelStat_stat = 96,
		LambdaCapture_id = 97,
		LambdaCapture_init = 98,
		LambdaCapture_objKind = 99,
		LambdaCapture_refKind = 100,
		LambdaExpr_captures = 101,
		LambdaExpr_functionHeader = 102,
		LambdaExpr_genericHeader = 103,
		LambdaExpr_stat = 104,
		NameIdentifier_kind = 105,
		NameIdentifier_name = 106,
		NamespaceDeclaration_decls = 107,
		NamespaceDeclaration_names = 108,
		NamespaceName_name = 109,
		NewExpr_arrayArguments = 110,
		NewExpr_init = 111,
		NewExpr_placementArguments = 112,
		NewExpr_scope = 113,
		NewExpr_type = 114,
		NumericExprLiteral_kind = 115,
		NumericExprLiteral_literal = 116,
		OperatorIdentifier_op = 117,
		OperatorTypeIdentifier_type = 118,
		OrdinaryGenericParameter_genericHeader = 119,
		OrdinaryGenericParameter_id = 120,
		OrdinaryGenericParameter_init = 121,
		OrdinaryGenericParameter_typenameToken = 122,
		OrdinaryGenericParameter_variadic = 123,
		ParenthesisExpr_expr = 124,
		PostfixUnaryExpr_op = 125,
		PostfixUnaryExpr_operand = 126,
		PrefixUnaryExpr_op = 127,
		PrefixUnaryExpr_operand = 128,
		PrimitiveExprLiteral_kind = 129,
		PrimitiveType_kind = 130,
		PrimitiveType_literal1 = 131,
		PrimitiveType_literal2 = 132,
		QualifiedName_arguments = 133,
		QualifiedName_expr = 134,
		QualifiedName_id = 135,
		QualifiedName_kind = 136,
		QualifiedName_parent = 137,
		ReturnStat_expr = 138,
		SizeofExpr_argument = 139,
		SizeofExpr_variadic = 140,
		StatementToResolve_candidates = 141,
		StaticAssertDeclaration_expr = 142,
		StaticAssertDeclaration_message = 143,
		StringLiteral_fragments = 144,
		StringLiteralFragment_kind = 145,
		StringLiteralFragment_literal = 146,
		SwitchStat_condition = 147,
		SwitchStat_stat = 148,
		SysFuncExpr_argument = 149,
		SysFuncExpr_keyword = 150,
		SysFuncExpr_variadic = 151,
		TemplateDeclaration_decl = 152,
		TemplateDeclaration_genericHeader = 153,
		ThrowExpr_argument = 154,
		TryStat_catchParts = 155,
		TryStat_tryStat = 156,
		TryStatCatchPart_decl = 157,
		TryStatCatchPart_stat = 158,
		TypeOrExprOrOthersToResolve_candidates = 159,
		TypeOrExprToResolve_candidates = 160,
		TypedefDeclaration_decl = 161,
		UsingNamespaceDeclaration_names = 162,
		UsingTypeDeclaration_name = 163,
		UsingTypeDeclaration_type = 164,
		UsingValueDeclaration_name = 165,
		UsingValueDeclaration_typenameKeyword = 166,
		VarBraceInit_arguments = 167,
		VarParanthesisInit_arguments = 168,
		VarStatInit_initItems = 169,
		VarStatInit_stat = 170,
		VarStatInitItem_init = 171,
		VarStatInitItem_name = 172,
		VarValueInit_expr = 173,
		VariablesDeclaration_firstVarPart = 174,
		VariablesDeclaration_type = 175,
		VariadicExpr_operand = 176,
		VariadicExpr_variadic = 177,
		VolatileType_type = 178,
		WhileStat_condition = 179,
		WhileStat_stat = 180,
		__TryStat_exceptStat = 181,
		__TryStat_filter = 182,
		__TryStat_finallyStat = 183,
		__TryStat_tryStat = 184,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif