/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		AdvancedType = 0,
		ArrayDeclarator = 1,
		BinaryExpr = 2,
		BraceExpr = 3,
		CallExpr = 4,
		CastExpr = 5,
		ConstType = 6,
		Declarator = 7,
		DeclaratorKeyword = 8,
		DeleteExpr = 9,
		ExprOnly = 10,
		File = 11,
		FunctionDeclarator = 12,
		GenericArgument = 13,
		GenericArguments = 14,
		Identifier = 15,
		IfExpr = 16,
		IndexExpr = 17,
		NameIdentifier = 18,
		NewExpr = 19,
		NumericExprLiteral = 20,
		OperatorIdentifier = 21,
		ParenthesisExpr = 22,
		PostfixUnaryExpr = 23,
		PrefixUnaryExpr = 24,
		PrimitiveExprLiteral = 25,
		PrimitiveType = 26,
		QualifiedName = 27,
		SizeofExpr = 28,
		StringLiteral = 29,
		StringLiteralFragment = 30,
		SysFuncExpr = 31,
		ThrowExpr = 32,
		TypeOnly = 33,
		TypeOrExpr = 34,
		VolatileType = 35,
	};

	enum class CppFields : vl::vint32_t
	{
		AdvancedType_kind = 0,
		AdvancedType_parent = 1,
		BinaryExpr_left = 2,
		BinaryExpr_op = 3,
		BinaryExpr_right = 4,
		BraceExpr_arguments = 5,
		CallExpr_arguments = 6,
		CallExpr_operand = 7,
		CastExpr_expr = 8,
		CastExpr_keyword = 9,
		CastExpr_type = 10,
		ConstType_type = 11,
		Declarator_advancedTypes = 12,
		Declarator_arrayDecls = 13,
		Declarator_funcDecl = 14,
		Declarator_id = 15,
		Declarator_innerDeclarator = 16,
		Declarator_keywords = 17,
		Declarator_type = 18,
		DeclaratorKeyword_keyword = 19,
		DeleteExpr_argument = 20,
		DeleteExpr_array = 21,
		DeleteExpr_scope = 22,
		GenericArgument_argument = 23,
		GenericArgument_variadic = 24,
		GenericArguments_arguments = 25,
		IfExpr_condition = 26,
		IfExpr_falseBranch = 27,
		IfExpr_trueBranch = 28,
		IndexExpr_index = 29,
		IndexExpr_operand = 30,
		NameIdentifier_kind = 31,
		NameIdentifier_name = 32,
		NewExpr_init = 33,
		NewExpr_initArguments = 34,
		NewExpr_placementArguments = 35,
		NewExpr_scope = 36,
		NewExpr_type = 37,
		NumericExprLiteral_kind = 38,
		NumericExprLiteral_literal = 39,
		OperatorIdentifier_op = 40,
		ParenthesisExpr_expr = 41,
		PostfixUnaryExpr_op = 42,
		PostfixUnaryExpr_operand = 43,
		PrefixUnaryExpr_op = 44,
		PrefixUnaryExpr_operand = 45,
		PrimitiveExprLiteral_kind = 46,
		PrimitiveType_kind = 47,
		PrimitiveType_literal1 = 48,
		PrimitiveType_literal2 = 49,
		QualifiedName_arguments = 50,
		QualifiedName_expr = 51,
		QualifiedName_id = 52,
		QualifiedName_kind = 53,
		QualifiedName_parent = 54,
		SizeofExpr_argument = 55,
		SizeofExpr_variadic = 56,
		StringLiteral_fragments = 57,
		StringLiteralFragment_kind = 58,
		StringLiteralFragment_literal = 59,
		SysFuncExpr_argument = 60,
		SysFuncExpr_keyword = 61,
		SysFuncExpr_variadic = 62,
		ThrowExpr_argument = 63,
		VolatileType_type = 64,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif