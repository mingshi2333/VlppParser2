/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_CPP_AST_ASSEMBLER

#include "CppAst.h"

namespace cpp_parser
{
	enum class CppClasses : vl::vint32_t
	{
		AdvancedType = 0,
		BinaryExpr = 1,
		BlockStat = 2,
		BraceExpr = 3,
		BreakStat = 4,
		CallExpr = 5,
		CaseStat = 6,
		CastExpr = 7,
		ClassBody = 8,
		ClassDeclaration = 9,
		ClassInheritance = 10,
		ClassMemberPart = 11,
		ConstType = 12,
		ContinueStat = 13,
		DeclStat = 14,
		Declaration = 15,
		Declarator = 16,
		DeclaratorArrayPart = 17,
		DeclaratorFunctionPart = 18,
		DeclaratorKeyword = 19,
		DeclaratorType = 20,
		DeclaratorVariablePart = 21,
		DefaultStat = 22,
		DeleteExpr = 23,
		DoWhileStat = 24,
		EmptyStat = 25,
		EnumBody = 26,
		EnumDeclaration = 27,
		EnumItem = 28,
		ExprOnly = 29,
		ExprStat = 30,
		File = 31,
		ForStat = 32,
		ForStatConditionPart = 33,
		ForStatIterateCondition = 34,
		ForStatLoopCondition = 35,
		FriendDeclaration = 36,
		FunctionKeyword = 37,
		GenericArgument = 38,
		GenericArguments = 39,
		GenericHeader = 40,
		GotoStat = 41,
		Identifier = 42,
		IfElseStat = 43,
		IfExpr = 44,
		IndexExpr = 45,
		LabelStat = 46,
		LambdaCapture = 47,
		LambdaExpr = 48,
		MultipleVarDeclaration = 49,
		NameIdentifier = 50,
		NamespaceDeclaration = 51,
		NamespaceName = 52,
		NewExpr = 53,
		NumericExprLiteral = 54,
		OperatorIdentifier = 55,
		OrdinaryGenericParameter = 56,
		ParenthesisExpr = 57,
		PostfixUnaryExpr = 58,
		PrefixUnaryExpr = 59,
		PrimitiveExprLiteral = 60,
		PrimitiveType = 61,
		QualifiedName = 62,
		ReturnStat = 63,
		SingleVarDeclaration = 64,
		SizeofExpr = 65,
		Statement = 66,
		StatementToResolve = 67,
		StaticAssertDeclaration = 68,
		StringLiteral = 69,
		StringLiteralFragment = 70,
		SwitchStat = 71,
		SysFuncExpr = 72,
		ThrowExpr = 73,
		TryStat = 74,
		TryStatCatchPart = 75,
		TypeOnly = 76,
		TypeOrExpr = 77,
		TypeOrExprOrOthers = 78,
		TypeOrExprOrOthersToResolve = 79,
		TypeOrExprToResolve = 80,
		TypedefDeclaration = 81,
		VarBraceInit = 82,
		VarInit = 83,
		VarParanthesisInit = 84,
		VarValueInit = 85,
		VariadicExpr = 86,
		VolatileType = 87,
		WhileStat = 88,
		__LeaveStat = 89,
		__TryStat = 90,
	};

	enum class CppFields : vl::vint32_t
	{
		AdvancedType_argument = 0,
		AdvancedType_kind = 1,
		BinaryExpr_left = 2,
		BinaryExpr_op = 3,
		BinaryExpr_right = 4,
		BlockStat_statements = 5,
		BraceExpr_arguments = 6,
		CallExpr_arguments = 7,
		CallExpr_kind = 8,
		CallExpr_operand = 9,
		CaseStat_expr = 10,
		CaseStat_stat = 11,
		CastExpr_expr = 12,
		CastExpr_keyword = 13,
		CastExpr_type = 14,
		ClassBody_inheritances = 15,
		ClassBody_memberParts = 16,
		ClassBody_varParts = 17,
		ClassDeclaration_body = 18,
		ClassDeclaration_kind = 19,
		ClassDeclaration_name = 20,
		ClassInheritance_accessor = 21,
		ClassInheritance_type = 22,
		ClassMemberPart_accessor = 23,
		ClassMemberPart_decls = 24,
		ConstType_type = 25,
		DeclStat_decl = 26,
		Declarator_advancedTypes = 27,
		Declarator_arrayParts = 28,
		Declarator_funcPart = 29,
		Declarator_id = 30,
		Declarator_innerDeclarator = 31,
		Declarator_keywords = 32,
		Declarator_variadic = 33,
		DeclaratorArrayPart_argument = 34,
		DeclaratorFunctionPart_deferredType = 35,
		DeclaratorFunctionPart_keywords = 36,
		DeclaratorFunctionPart_parameters = 37,
		DeclaratorFunctionPart_variadic = 38,
		DeclaratorKeyword_keyword = 39,
		DeclaratorType_declarator = 40,
		DeclaratorType_keywords = 41,
		DeclaratorType_type = 42,
		DeclaratorVariablePart_declarator = 43,
		DeclaratorVariablePart_init = 44,
		DefaultStat_stat = 45,
		DeleteExpr_argument = 46,
		DeleteExpr_array = 47,
		DeleteExpr_scope = 48,
		DoWhileStat_condition = 49,
		DoWhileStat_stat = 50,
		EnumBody_items = 51,
		EnumDeclaration_body = 52,
		EnumDeclaration_kind = 53,
		EnumDeclaration_name = 54,
		EnumDeclaration_type = 55,
		EnumItem_expr = 56,
		EnumItem_name = 57,
		ExprStat_expr = 58,
		File_decls = 59,
		ForStat_conditionPart = 60,
		ForStat_stat = 61,
		ForStatIterateCondition_collection = 62,
		ForStatIterateCondition_decl = 63,
		ForStatLoopCondition_condition = 64,
		ForStatLoopCondition_sideEffect = 65,
		ForStatLoopCondition_varsDecl = 66,
		FriendDeclaration_decl = 67,
		FunctionKeyword_arguments = 68,
		FunctionKeyword_keyword = 69,
		GenericArgument_argument = 70,
		GenericArgument_variadic = 71,
		GenericArguments_arguments = 72,
		GenericHeader_parameters = 73,
		GotoStat_label = 74,
		IfElseStat_condition = 75,
		IfElseStat_falseStat = 76,
		IfElseStat_trueStat = 77,
		IfElseStat_varsDecl = 78,
		IfExpr_condition = 79,
		IfExpr_falseBranch = 80,
		IfExpr_trueBranch = 81,
		IndexExpr_index = 82,
		IndexExpr_operand = 83,
		LabelStat_label = 84,
		LabelStat_stat = 85,
		LambdaCapture_id = 86,
		LambdaCapture_init = 87,
		LambdaCapture_objKind = 88,
		LambdaCapture_refKind = 89,
		LambdaExpr_captures = 90,
		LambdaExpr_functionHeader = 91,
		LambdaExpr_genericHeader = 92,
		LambdaExpr_stat = 93,
		MultipleVarDeclaration_keywords = 94,
		MultipleVarDeclaration_type = 95,
		MultipleVarDeclaration_varParts = 96,
		NameIdentifier_kind = 97,
		NameIdentifier_name = 98,
		NamespaceDeclaration_decls = 99,
		NamespaceDeclaration_names = 100,
		NamespaceName_name = 101,
		NewExpr_arrayArguments = 102,
		NewExpr_init = 103,
		NewExpr_placementArguments = 104,
		NewExpr_scope = 105,
		NewExpr_type = 106,
		NumericExprLiteral_kind = 107,
		NumericExprLiteral_literal = 108,
		OperatorIdentifier_op = 109,
		OrdinaryGenericParameter_genericHeader = 110,
		OrdinaryGenericParameter_id = 111,
		OrdinaryGenericParameter_init = 112,
		OrdinaryGenericParameter_typenameToken = 113,
		OrdinaryGenericParameter_variadic = 114,
		ParenthesisExpr_expr = 115,
		PostfixUnaryExpr_op = 116,
		PostfixUnaryExpr_operand = 117,
		PrefixUnaryExpr_op = 118,
		PrefixUnaryExpr_operand = 119,
		PrimitiveExprLiteral_kind = 120,
		PrimitiveType_kind = 121,
		PrimitiveType_literal1 = 122,
		PrimitiveType_literal2 = 123,
		QualifiedName_arguments = 124,
		QualifiedName_expr = 125,
		QualifiedName_id = 126,
		QualifiedName_kind = 127,
		QualifiedName_parent = 128,
		ReturnStat_expr = 129,
		SingleVarDeclaration_keywords = 130,
		SingleVarDeclaration_type = 131,
		SingleVarDeclaration_varPart = 132,
		SizeofExpr_argument = 133,
		SizeofExpr_variadic = 134,
		StatementToResolve_candidates = 135,
		StaticAssertDeclaration_expr = 136,
		StaticAssertDeclaration_message = 137,
		StringLiteral_fragments = 138,
		StringLiteralFragment_kind = 139,
		StringLiteralFragment_literal = 140,
		SwitchStat_condition = 141,
		SwitchStat_stat = 142,
		SysFuncExpr_argument = 143,
		SysFuncExpr_keyword = 144,
		SysFuncExpr_variadic = 145,
		ThrowExpr_argument = 146,
		TryStat_catchParts = 147,
		TryStat_tryStat = 148,
		TryStatCatchPart_decl = 149,
		TryStatCatchPart_stat = 150,
		TypeOrExprOrOthersToResolve_candidates = 151,
		TypeOrExprToResolve_candidates = 152,
		TypedefDeclaration_decl = 153,
		VarBraceInit_arguments = 154,
		VarParanthesisInit_arguments = 155,
		VarValueInit_expr = 156,
		VariadicExpr_operand = 157,
		VariadicExpr_variadic = 158,
		VolatileType_type = 159,
		WhileStat_condition = 160,
		WhileStat_stat = 161,
		__TryStat_exceptStat = 162,
		__TryStat_filter = 163,
		__TryStat_finallyStat = 164,
		__TryStat_tryStat = 165,
	};

	extern const wchar_t* CppTypeName(CppClasses type);
	extern const wchar_t* CppCppTypeName(CppClasses type);
	extern const wchar_t* CppFieldName(CppFields field);
	extern const wchar_t* CppCppFieldName(CppFields field);

	class CppAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif