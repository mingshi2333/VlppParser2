/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_LEXER
#define VCZH_PARSER2_BUILTIN_CPP_LEXER

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace cpp_parser
{
	enum class CppTokens : vl::vint32_t
	{
		ALIGNAS = 0,
		__PTR32 = 1,
		__PTR64 = 2,
		OPERATOR = 3,
		NEW = 4,
		DELETE = 5,
		CONSTEXPR = 6,
		CONST = 7,
		VOLATILE = 8,
		OVERRIDE = 9,
		NOEXCEPT = 10,
		THROW = 11,
		DECLTYPE = 12,
		__CDECL = 13,
		__CLRCALL = 14,
		__STDCALL = 15,
		__FASTCALL = 16,
		__THISCALL = 17,
		__VECTORCALL = 18,
		TYPE_AUTO = 19,
		TYPE_VOID = 20,
		TYPE_BOOL = 21,
		TYPE_CHAR = 22,
		TYPE_WCHAR_T = 23,
		TYPE_CHAR16_T = 24,
		TYPE_CHAR32_T = 25,
		TYPE_SHORT = 26,
		TYPE_INT = 27,
		TYPE___INT8 = 28,
		TYPE___INT16 = 29,
		TYPE___INT32 = 30,
		TYPE___INT64 = 31,
		TYPE_LONG = 32,
		TYPE_FLOAT = 33,
		TYPE_DOUBLE = 34,
		SIGNED = 35,
		UNSIGNED = 36,
		STATIC = 37,
		VIRTUAL = 38,
		EXPLICIT = 39,
		INLINE = 40,
		__INLINE = 41,
		__FORCEINLINE = 42,
		REGISTER = 43,
		MUTABLE = 44,
		THREAD_LOCAL = 45,
		DECL_ABSTRACT = 46,
		DECL_FINAL = 47,
		DECL_CLASS = 48,
		DECL_STRUCT = 49,
		DECL_ENUM = 50,
		DECL_UNION = 51,
		DECL_NAMESPACE = 52,
		DECL_TYPEDEF = 53,
		DECL_USING = 54,
		DECL_FRIEND = 55,
		DECL_EXTERN = 56,
		DECL_TEMPLATE = 57,
		STAT_ASM = 58,
		STAT_RETURN = 59,
		STAT_BREAK = 60,
		STAT_CONTINUE = 61,
		STAT_GOTO = 62,
		STAT_IF = 63,
		STAT_ELSE = 64,
		STAT_WHILE = 65,
		STAT_DO = 66,
		STAT_FOR = 67,
		STAT_SWITCH = 68,
		STAT_CASE = 69,
		STAT_DEFAULT = 70,
		STAT_TRY = 71,
		STAT_CATCH = 72,
		STAT___TRY = 73,
		STAT___EXCEPT = 74,
		STAT___FINALLY = 75,
		STAT___LEAVE = 76,
		STAT___IF_EXISTS = 77,
		STAT___IF_NOT_EXISTS = 78,
		EXPR_TRUE = 79,
		EXPR_FALSE = 80,
		EXPR_THIS = 81,
		EXPR_NULLPTR = 82,
		EXPR___NULLPTR = 83,
		EXPR_TYPEID = 84,
		EXPR_SIZEOF = 85,
		EXPR_DYNAMIC_CAST = 86,
		EXPR_STATIC_CAST = 87,
		EXPR_CONST_CAST = 88,
		EXPR_REINTERPRET_CAST = 89,
		EXPR_SAFE_CAST = 90,
		TYPENAME = 91,
		PUBLIC = 92,
		PROTECTED = 93,
		PRIVATE = 94,
		__PRAGMA = 95,
		__DECLSPEC = 96,
		STATIC_ASSERT = 97,
		LBRACE = 98,
		RBRACE = 99,
		LBRACKET = 100,
		RBRACKET = 101,
		LPARENTHESIS = 102,
		RPARENTHESIS = 103,
		LT = 104,
		GT = 105,
		EQ = 106,
		NOT = 107,
		PERCENT = 108,
		COLON = 109,
		SEMICOLON = 110,
		DOT = 111,
		QUESTIONMARK = 112,
		COMMA = 113,
		MUL = 114,
		ADD = 115,
		SUB = 116,
		DIV = 117,
		XOR = 118,
		AND = 119,
		OR = 120,
		REVERT = 121,
		SHARP = 122,
		INT = 123,
		HEX = 124,
		BIN = 125,
		FLOAT = 126,
		FLOATHEX = 127,
		MACRO_LPREFIX = 128,
		STRING = 129,
		CHAR = 130,
		ID = 131,
		SPACE = 132,
		DOCUMENT = 133,
		COMMENT1 = 134,
		COMMENT2 = 135,
	};

	constexpr vl::vint CppTokenCount = 136;
	extern bool CppTokenDeleter(vl::vint token);
	extern const wchar_t* CppTokenId(CppTokens token);
	extern const wchar_t* CppTokenDisplayText(CppTokens token);
	extern const wchar_t* CppTokenRegex(CppTokens token);
	extern void CppLexerData(vl::stream::IStream& outputStream);
}
#endif