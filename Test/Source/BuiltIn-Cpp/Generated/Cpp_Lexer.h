/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Cpp
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_CPP_LEXER
#define VCZH_PARSER2_BUILTIN_CPP_LEXER

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace cpp_parser
{
	enum class CppTokens : vl::vint32_t
	{
		ALIGNAS = 0,
		__PTR32 = 1,
		__PTR64 = 2,
		OPERATOR = 3,
		NEW = 4,
		DELETE = 5,
		CONSTEXPR = 6,
		CONST = 7,
		VOLATILE = 8,
		OVERRIDE = 9,
		NOEXCEPT = 10,
		THROW = 11,
		DECLTYPE = 12,
		__CDECL = 13,
		__CLRCALL = 14,
		__STDCALL = 15,
		__FASTCALL = 16,
		__THISCALL = 17,
		__VECTORCALL = 18,
		TYPE_AUTO = 19,
		TYPE_VOID = 20,
		TYPE_BOOL = 21,
		TYPE_CHAR = 22,
		TYPE_WCHAR_T = 23,
		TYPE_CHAR8_T = 24,
		TYPE_CHAR16_T = 25,
		TYPE_CHAR32_T = 26,
		TYPE_SHORT = 27,
		TYPE_INT = 28,
		TYPE___INT8 = 29,
		TYPE___INT16 = 30,
		TYPE___INT32 = 31,
		TYPE___INT64 = 32,
		TYPE_LONG = 33,
		TYPE_FLOAT = 34,
		TYPE_DOUBLE = 35,
		SIGNED = 36,
		UNSIGNED = 37,
		STATIC = 38,
		VIRTUAL = 39,
		EXPLICIT = 40,
		INLINE = 41,
		__INLINE = 42,
		__FORCEINLINE = 43,
		REGISTER = 44,
		MUTABLE = 45,
		THREAD_LOCAL = 46,
		DECL_ABSTRACT = 47,
		DECL_FINAL = 48,
		DECL_CLASS = 49,
		DECL_STRUCT = 50,
		DECL_ENUM = 51,
		DECL_UNION = 52,
		DECL_NAMESPACE = 53,
		DECL_TYPEDEF = 54,
		DECL_USING = 55,
		DECL_FRIEND = 56,
		DECL_EXTERN = 57,
		DECL_TEMPLATE = 58,
		STAT_ASM = 59,
		STAT_RETURN = 60,
		STAT_BREAK = 61,
		STAT_CONTINUE = 62,
		STAT_GOTO = 63,
		STAT_IF = 64,
		STAT_ELSE = 65,
		STAT_WHILE = 66,
		STAT_DO = 67,
		STAT_FOR = 68,
		STAT_SWITCH = 69,
		STAT_CASE = 70,
		STAT_DEFAULT = 71,
		STAT_TRY = 72,
		STAT_CATCH = 73,
		STAT___TRY = 74,
		STAT___EXCEPT = 75,
		STAT___FINALLY = 76,
		STAT___LEAVE = 77,
		STAT___IF_EXISTS = 78,
		STAT___IF_NOT_EXISTS = 79,
		EXPR_TRUE = 80,
		EXPR_FALSE = 81,
		EXPR_THIS = 82,
		EXPR_NULLPTR = 83,
		EXPR___NULLPTR = 84,
		EXPR_TYPEID = 85,
		EXPR_ALIGNOF = 86,
		EXPR___ALIGNOF = 87,
		EXPR___UUIDOF = 88,
		EXPR_SIZEOF = 89,
		EXPR_DYNAMIC_CAST = 90,
		EXPR_STATIC_CAST = 91,
		EXPR_CONST_CAST = 92,
		EXPR_REINTERPRET_CAST = 93,
		EXPR_SAFE_CAST = 94,
		TYPENAME = 95,
		PUBLIC = 96,
		PROTECTED = 97,
		PRIVATE = 98,
		__PRAGMA = 99,
		__DECLSPEC = 100,
		STATIC_ASSERT = 101,
		VARIADIC = 102,
		SCOPE = 103,
		LBRACE = 104,
		RBRACE = 105,
		LBRACKET = 106,
		RBRACKET = 107,
		LPARENTHESIS = 108,
		RPARENTHESIS = 109,
		LT = 110,
		GT = 111,
		EQ = 112,
		NE = 113,
		COMPARE = 114,
		ASSIGN = 115,
		NOT = 116,
		MOD_ASSIGN = 117,
		MOD = 118,
		COLON = 119,
		SEMICOLON = 120,
		MEMBER_DEREF = 121,
		MEMBER = 122,
		QUESTIONMARK = 123,
		COMMA = 124,
		MUL_ASSIGN = 125,
		MUL = 126,
		INCREASE = 127,
		PLUS_ASSIGN = 128,
		PLUS = 129,
		POINTER_DEREF = 130,
		POINTER = 131,
		DECREASE = 132,
		MINUS_ASSIGN = 133,
		MINUS = 134,
		DIV_ASSIGN = 135,
		DIV = 136,
		XOR_ASSIGN = 137,
		XOR = 138,
		AND_ASSIGN = 139,
		AND_AND = 140,
		AND = 141,
		OR_ASSIGN = 142,
		OR_OR = 143,
		OR = 144,
		REVERT_ASSIGN = 145,
		REVERT = 146,
		SHARP = 147,
		INT = 148,
		HEX = 149,
		BIN = 150,
		FLOAT = 151,
		FLOATHEX = 152,
		MACRO_LPREFIX = 153,
		STRING = 154,
		CHAR = 155,
		ID = 156,
		SPACE = 157,
		DOCUMENT = 158,
		COMMENT1 = 159,
		COMMENT2 = 160,
	};

	constexpr vl::vint CppTokenCount = 161;
	extern bool CppTokenDeleter(vl::vint token);
	extern const wchar_t* CppTokenId(CppTokens token);
	extern const wchar_t* CppTokenDisplayText(CppTokens token);
	extern const wchar_t* CppTokenRegex(CppTokens token);
	extern void CppLexerData(vl::stream::IStream& outputStream);
}
#endif