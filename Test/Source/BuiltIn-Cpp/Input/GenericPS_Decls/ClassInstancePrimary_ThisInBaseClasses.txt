template<typename T>
struct A
{
	auto _A()					{ return this; }
	auto _A() const				{ return this; }
	auto _A() volatile			{ return this; }
	auto _A() const volatile	{ return this; }
};

template<typename T>
struct A<T[]>
{
};

struct B : A<int>
{
	auto _B()					{ return this; }
	auto _B() const				{ return this; }
	auto _B() volatile			{ return this; }
	auto _B() const volatile	{ return this; }
};

template<typename T>
struct C
{
	auto _C()					{ return this; }
	auto _C() const				{ return this; }
	auto _C() volatile			{ return this; }
	auto _C() const volatile	{ return this; }
};

template<typename T>
struct C<T[]>
{
};

template<typename T>
struct D : B, C<double>
{
	auto _D()					{ return this; }
	auto _D() const				{ return this; }
	auto _D() volatile			{ return this; }
	auto _D() const volatile	{ return this; }

	auto A_()					{ return _A(); }
	auto A_() const				{ return _A(); }
	auto A_() volatile			{ return _A(); }
	auto A_() const volatile	{ return _A(); }

	auto B_()					{ return _B(); }
	auto B_() const				{ return _B(); }
	auto B_() volatile			{ return _B(); }
	auto B_() const volatile	{ return _B(); }

	auto C_()					{ return _C(); }
	auto C_() const				{ return _C(); }
	auto C_() volatile			{ return _C(); }
	auto C_() const volatile	{ return _C(); }

	auto D_()					{ return _D(); }
	auto D_() const				{ return _D(); }
	auto D_() volatile			{ return _D(); }
	auto D_() const volatile	{ return _D(); }
};

template<typename T>
struct D<T[]>
{
};

D<char> d;
const D<char> cd;
volatile D<char> vd;
volatile const D<char> cvd;