template<typename X>
struct Field;

template<typename X>
struct Field<X[]>;

template<typename T>
struct S
{
	Field<T> f;
	Field<T>& r;
	const Field<T> c;
	static Field<T> s;

	template<typename U> void M1(U p)					{}
	template<typename U> void C1(U p)const				{}
	template<typename U> void V1(U p)volatile			{}
	template<typename U> void CV1(U p)const volatile	{}
	template<typename U> static void F1(U p)			{}

	template<typename U>void M2(U p);
	template<typename U>void C2(U p)const;
	template<typename U>void V2(U p)volatile;
	template<typename U>void CV2(U p)const volatile;
	template<typename U>static void F2(U p);
};

template<typename T>
struct S<T[]>
{
};

template<typename A>	template<typename B>	void S<A>::M2(B p)					{}
template<typename A>	template<typename B>	void S<A>::C2(B p)const				{}
template<typename A>	template<typename B>	void S<A>::V2(B p)volatile			{}
template<typename A>	template<typename B>	void S<A>::CV2(B p)const volatile	{}
template<typename A>	template<typename B>	void S<A>::F2(B p)					{}