namespace a::b
{
	class Something
	{
	public:
		static const int a = 0;
		static const int b;

		Something();
		Something(const Something&);
		Something(Something&&);
		explicit Something(int);
		~Something();

		void Do();
		virtual void Do(int) = 0;
		explicit operator bool()const;
		explicit operator bool();
		Something operator++();
		Something operator++(int);
	};
}
namespace a::b
{
	const int Something::b = 0;
	Something::Something(){}
	Something::Something(const Something&){}
	Something::Something(Something&&){}
	Something::Something(int){}
	Something::~Something(){}
	void Something::Do(){}
	void Something::Do(int) {}
	Something::operator bool()const{}
	Something::operator bool(){}
	Something Something::operator++(){}
	Something Something::operator++(int){}
}