/*  0 */void F();
/*  1 */void F(){}

/*  2 */int F(...);
/*  3 */int F(...){}

/*  4 */template<typename T> T F(T);
/*  5 */template<typename T> T F(T t){}

/*  6 */template<typename T, typename U> T F(U*);
/*  7 */template<typename T, typename U> T F(U* pu){}

		class C
		{
			struct S{};
		
/* 12 */ 	void F(S);
/* 13 */ 	int F(S, ...);
/* 14 */ 	template<typename T> auto F(S s, T t) -> decltype(s, t);
/* 15 */ 	template<typename T, typename U> auto F(S s, U* u) -> decltype(s, u);
		};
 
/*  8 */ void C::F(S){}
/*  9 */ int C::F(S, ...){}
/* 10 */ template<typename T> auto C::F(S ss, T tt) -> decltype(ss, tt) {}
/* 11 */ template<typename T, typename U> auto C::F(S ss, U* uu) -> decltype(ss, uu) {}