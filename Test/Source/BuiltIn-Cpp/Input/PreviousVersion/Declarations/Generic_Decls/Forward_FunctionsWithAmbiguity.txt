/*  0 */void F(int(&)[1]);
/*  1 */void F(int(&)[1]){}

/*  2 */void F(int(&)[2]);
/*  3 */void F(int(&)[2]){}

/*  4 */template<typename T> T F(T(&)[1]);
/*  5 */template<typename T> T F(T(&)[1]){}

/*  6 */template<typename T> T F(T(&)[2]);
/*  7 */template<typename T> T F(T(&)[2]){}

/*  8 */template<typename T, int U> T F(T(&)[U]);
/*  9 */template<typename T, int U> T F(T(&)[U]){}

		class C
		{
			struct S{};

/* 15 */	void F(S, int(&)[1]);
/* 16 */	void F(S, int(&)[2]);
/* 17 */	template<typename T> T F(S, T(&)[1]);
/* 18 */	template<typename T> T F(S, T(&)[2]);
/* 19 */	template<typename T, int U> T F(S, T(&)[U]);
		};

/* 10 */void C::F(S, int(&)[1]){}
/* 11 */void C::F(S, int(&)[2]){}
/* 12 */template<typename T> T C::F(S, T(&)[1]){}
/* 13 */template<typename T> T C::F(S, T(&)[2]){}
/* 14 */template<typename T, int U> T C::F(S, T(&)[U]){}