namespace ns
{
	struct A
	{
		template<int X, typename T>
		struct B
		{
			struct C
			{
				template<typename U, int Y>
				struct D
				{
					static const int field;
					void Method(T, U);
					template<typename V> void Method(T, U*, V, V*);
					template<typename V> void Method(T*, U, V*, V);

					D(T, U);
					~D();
					template<typename V> D(T, U*, V, V*);
					template<typename V> D(T*, U, V*, V);
				};
			};
		};
	};
}

namespace ns
{
	template<int _1, typename X>	template<typename Y, int _2>							int A::B<_1, X>::C::D<Y, _2>::field = 0;
	template<int _1, typename X>	template<typename Y, int _2>							void A::B<_1, X>::C::D<Y, _2>::Method(X, Y){}
	template<int _1, typename X>	template<typename Y, int _2>	template<typename Z>	void A::B<_1, X>::C::D<Y, _2>::Method(X, Y*, Z, Z*){}
	template<int _1, typename X>	template<typename Y, int _2>	template<typename Z>	void A::B<_1, X>::C::D<Y, _2>::Method(X*, Y, Z*, Z){}
	template<int _1, typename X>	template<typename Y, int _2>							A::B<_1, X>::C::D<Y, _2>::D(X, Y){}
	template<int _1, typename X>	template<typename Y, int _2>							A::B<_1, X>::C::D<Y, _2>::~D(){}
	template<int _1, typename X>	template<typename Y, int _2>	template<typename Z>	A::B<_1, X>::C::D<Y, _2>::D(X, Y*, Z, Z*){}
	template<int _1, typename X>	template<typename Y, int _2>	template<typename Z>	A::B<_1, X>::C::D<Y, _2>::D(X*, Y, Z*, Z){}
}