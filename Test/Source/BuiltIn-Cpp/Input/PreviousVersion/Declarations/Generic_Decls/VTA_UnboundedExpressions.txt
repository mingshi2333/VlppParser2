struct A
{
	void*			operator++()const;
	A				operator++(int)const;
	float			operator+(int)const;
	double			operator,(int)const;
	A*				operator*(A)const;
};

struct B
{
	char*			operator++()const;
	B				operator++(int)const;
	int*			operator+(int)const;
	bool*			operator,(int)const;
	B*				operator*(B)const;
};

struct C1
{
	int*			operator[](int)const;
	bool*			operator[](bool)const;
	char*			operator[](char)const;
	double*			operator[](double)const;
	C1*				operator[](C1)const;

	int				x;
	static int		y;
};

struct C2
{
	C2*				operator[](C2)const;

	bool			x;
	static bool		y;
};

struct C3
{
	C3*				operator[](C3)const;

	char			x;
	static char		y;
};

struct C4
{
	C4*				operator[](C4)const;

	double			x;
	static double	y;
};

template<typename T>
T Value = T{};

template<typename ...TArgs>
using Cast = void(*)(decltype((TArgs)nullptr)...);

template<typename ...TArgs>
using Parenthesis = void(*)(decltype((Value<TArgs>))...);

template<typename ...TArgs>
using PrefixUnary = void(*)(decltype(++((TArgs&)Value<TArgs>))...);

template<typename ...TArgs>
using PostfixUnary = void(*)(decltype(((TArgs&)Value<TArgs>)++)...);

template<typename ...TArgs>
using Binary1 = void(*)(decltype(Value<TArgs>+1)...);

template<typename ...TArgs>
using Binary2 = void(*)(decltype(Value<TArgs>,1)...);

template<typename ...TArgs>
using Binary3 = void(*)(decltype(Value<TArgs>*Value<TArgs>)...);

template<typename ...TArgs>
using Array1 = void(*)(decltype(Value<C1>[Value<TArgs>])...);

template<typename ...TArgs>
using Array2 = void(*)(decltype(Value<TArgs*>[0])...);

template<typename ...TArgs>
using Array3 = void(*)(decltype(Value<TArgs>[Value<TArgs>])...);

template<typename ...TArgs>
using Child = void(*)(decltype(&TArgs::x)..., decltype(TArgs::y)...);

template<typename ...TArgs>
using FieldId1 = void(*)(decltype(Value<TArgs>.x)...);

template<typename ...TArgs>
using FieldId2 = void(*)(decltype(Value<C1>.TArgs::x)...);

template<typename ...TArgs>
using FieldId3 = void(*)(decltype(Value<TArgs>.TArgs::x)...);

template<typename ...TArgs>
using FieldChild1 = void(*)(decltype(Value<TArgs*>->x)...);

template<typename ...TArgs>
using FieldChild2 = void(*)(decltype(Value<C1*>->TArgs::x)...);

template<typename ...TArgs>
using FieldChild3 = void(*)(decltype(Value<TArgs*>->TArgs::x)...);