int alignas(0)
int *
int * __ptr32
int * __ptr64
int &&
int &

int * const
int * __ptr32 const
int * __ptr64 const
int && const
int & const

int * volatile
int * __ptr32 volatile
int * __ptr64 volatile
int && volatile
int & volatile

int * const volatile
int * __ptr32 const volatile
int * __ptr64 const volatile
int && const volatile
int & const volatile

int * volatile const
int * __ptr32 volatile const
int * __ptr64 volatile const
int && volatile const
int & volatile const

int * const & && volatile __cdecl
int * const & && volatile __clrcall X::
int * const & && volatile __stdcall ::X:: *
int * const & && volatile __fastcall X::Y:: &
int * const & && volatile __thiscall ::X::Y:: &&
int * const & && volatile __vectorcall ::X<int>::Y<0>::Z:: * const & && volatile

int [10]
int * const [10][20][30]
int ()
int * const (void)
auto __cdecl (int)
auto __cdecl (int x)
auto __cdecl (int (*x)())
decltype(auto) __stdcall (...)
int ((float, double))[10]
int ((*)(float, double))[10]
int (&(float, double))[10]
int (&(*)(float, double))[10]

int * (const & (void))[10][20][30]
int * (const & (*)(int, bool(&)[10], float(*)(int, bool, float) = nullptr))[10][20][30]
int * (const & (*)(int x, bool(& y)[10], float(* z)(int, bool, float) = nullptr))[10][20][30]

decltype(auto) X::(int a, Y<Z> ...b, ...) -> ::X<int>::Y<0>::Z
decltype(auto) X::(int a, Y<Z> ...b, ...) -> ::X<int>::Y<0>::Z:: * const & && volatile (&[10])(int)
decltype(auto) X::(int a, Y<Z> ...b, ...) constexpr const volatile && & override final mutable noexcept noexcept(10) throw () throw(bool) throw(int, float, bool) -> ::X<int>::Y<0>::Z
decltype(auto) constexpr extern static mutable thread_local virtual explicit friend abstract __fastcall inline __inline __forceinline X::(int a, Y<Z> ...b, ...)
constexpr extern static mutable thread_local virtual explicit decltype(auto) friend abstract __fastcall inline __inline __forceinline X::(int a, Y<Z> ...b, ...)
constexpr extern static mutable thread_local virtual explicit decltype(auto) friend abstract __fastcall inline __inline __forceinline X::(int a, Y<Z> ...b, ...) constexpr const volatile && & override final mutable noexcept noexcept(10) throw () throw(bool) throw(int, float, bool) -> ::X<int>::Y<0>::Z::