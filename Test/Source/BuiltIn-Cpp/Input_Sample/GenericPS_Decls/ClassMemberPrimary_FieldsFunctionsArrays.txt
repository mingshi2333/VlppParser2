template<typename Tx, typename Ty>
struct X
{
	Tx x;
	Ty y;
};

template<typename Tx, typename Ty>
struct X<Tx[], Ty[]>
{
};

template<typename Tx, typename Ty>
struct Y
{
	Tx x;
	Ty y;

	X<Tx*, Ty&>* operator->();
};

template<typename Tx, typename Ty>
struct Y<Tx[], Ty[]>
{
};

template<typename Tx, typename Ty>
struct Z
{
	Tx x;
	Ty y;

	Y<const Tx, volatile Ty> operator->();
	X<const Tx, volatile Ty> operator()(int);
	Y<const Tx, volatile Ty> operator()(void*);
	X<const Tx, volatile Ty> operator[](const char*);
	Y<const Tx, volatile Ty> operator[](Z<Tx, Ty>&&);

	static Tx F(double);
	Ty G(void*);
};

template<typename Tx, typename Ty>
struct Z<Tx[], Ty[]>
{
};

X<char, wchar_t> (*x)(int) = nullptr;
Y<float, double> (*const y)(int) = nullptr;

X<char, wchar_t> (*(*x2)(void*))(int) = nullptr;
Y<float, double> (*const (*const y2)(void*))(int) = nullptr;

Z<void*, char*> z;
Z<void*, char*>* pz = nullptr;