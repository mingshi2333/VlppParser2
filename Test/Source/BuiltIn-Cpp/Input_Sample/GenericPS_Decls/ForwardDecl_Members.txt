namespace ns
{
	struct A
	{
		template<int X, typename T>
		struct B
		{
			struct C
			{
				template<typename U, int Y>
				struct D
				{
					static const bool field;
					void Method(T, U);
					template<typename V> void Method(T, U*, V, V*);
					template<typename V> void Method(T*, U, V*, V);
				};

				template<int Y, typename U1, typename U2, typename U3>
				struct D<U1(*)(U2, U3), Y>
				{
					static const bool field;
					void Method(T, U1);
					template<typename V> void Method(T, U2*, V, V*);
					template<typename V> void Method(T*, U3, V*, V);
				};
			};
		};

		template<typename T1, typename T2, typename T3, int X>
		struct B<X, T1(*)(T2, T3)>
		{
			struct C
			{
				template<typename U, int Y>
				struct D
				{
					static const bool field;
					void Method(T1, U);
					template<typename V> void Method(T2, U*, V, V*);
					template<typename V> void Method(T3*, U, V*, V);
				};

				template<int Y, typename U1, typename U2, typename U3>
				struct D<U1(*)(U2, U3), Y>
				{
					static const bool field;
					void Method(T1, U1);
					template<typename V> void Method(T2, U2*, V, V*);
					template<typename V> void Method(T3*, U3, V*, V);
				};
			};
		};
	};
}

namespace ns
{
	template<int _1, typename X>								template<typename Y, int _2>														bool A::B<_1, X>::C::D<Y, _2>::field = false;
	template<int _1, typename X>								template<typename Y, int _2>														void A::B<_1, X>::C::D<Y, _2>::Method(X, Y){}
	template<int _1, typename X>								template<typename Y, int _2>								template<typename Z>	void A::B<_1, X>::C::D<Y, _2>::Method(X, Y*, Z, Z*){}
	template<int _1, typename X>								template<typename Y, int _2>								template<typename Z>	void A::B<_1, X>::C::D<Y, _2>::Method(X*, Y, Z*, Z){}

	template<int _1, typename X>								template<int _2, typename Y1, typename Y2, typename Y3>								bool A::B<_1, X>::C::D<Y1(*)(Y2, Y3), _2>::field = false;
	template<int _1, typename X>								template<int _2, typename Y1, typename Y2, typename Y3>								void A::B<_1, X>::C::D<Y1(*)(Y2, Y3), _2>::Method(X, Y1){}
	template<int _1, typename X>								template<int _2, typename Y1, typename Y2, typename Y3>		template<typename Z>	void A::B<_1, X>::C::D<Y1(*)(Y2, Y3), _2>::Method(X, Y2*, Z, Z*){}
	template<int _1, typename X>								template<int _2, typename Y1, typename Y2, typename Y3>		template<typename Z>	void A::B<_1, X>::C::D<Y1(*)(Y2, Y3), _2>::Method(X*, Y3, Z*, Z){}

	template<typename X1, typename X2, typename X3, int _1>		template<typename Y, int _2>														bool A::B<_1, X1(*)(X2, X3)>::C::D<Y, _2>::field = false;
	template<typename X1, typename X2, typename X3, int _1>		template<typename Y, int _2>														void A::B<_1, X1(*)(X2, X3)>::C::D<Y, _2>::Method(X1, Y){}
	template<typename X1, typename X2, typename X3, int _1>		template<typename Y, int _2>								template<typename Z>	void A::B<_1, X1(*)(X2, X3)>::C::D<Y, _2>::Method(X2, Y*, Z, Z*){}
	template<typename X1, typename X2, typename X3, int _1>		template<typename Y, int _2>								template<typename Z>	void A::B<_1, X1(*)(X2, X3)>::C::D<Y, _2>::Method(X3*, Y, Z*, Z){}

	template<typename X1, typename X2, typename X3, int _1>		template<int _2, typename Y1, typename Y2, typename Y3>								bool A::B<_1, X1(*)(X2, X3)>::C::D<Y1(*)(Y2, Y3), _2>::field = false;
	template<typename X1, typename X2, typename X3, int _1>		template<int _2, typename Y1, typename Y2, typename Y3>								void A::B<_1, X1(*)(X2, X3)>::C::D<Y1(*)(Y2, Y3), _2>::Method(X1, Y1){}
	template<typename X1, typename X2, typename X3, int _1>		template<int _2, typename Y1, typename Y2, typename Y3>		template<typename Z>	void A::B<_1, X1(*)(X2, X3)>::C::D<Y1(*)(Y2, Y3), _2>::Method(X2, Y2*, Z, Z*){}
	template<typename X1, typename X2, typename X3, int _1>		template<int _2, typename Y1, typename Y2, typename Y3>		template<typename Z>	void A::B<_1, X1(*)(X2, X3)>::C::D<Y1(*)(Y2, Y3), _2>::Method(X3*, Y3, Z*, Z){}
}