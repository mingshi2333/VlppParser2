namespace a { struct A{ static int*		G(void*); operator void*(); }; int		F(A); }
namespace b { struct B{ static bool*	G(void*); operator void*(); }; bool		F(B); }
namespace c { struct C{ static char*	G(void*); operator void*(); }; char		F(C); }
namespace d { struct D{ static double*	G(void*); operator void*(); }; double	F(D); }
void* F(...);

template<typename ...TArgs>
auto Func1 = {F(TArgs{})...};

template<typename ...TArgs>
auto Func2 = {TArgs::G(nullptr)...};

template<typename ...TArgs>
auto Func3 = {TArgs::G(TArgs{})...};

int H(void);
bool H(int);
char H(int, int);
double H(int, int, int);
void H(...);

template<int ...Args>
auto Func4 = H(-Args...);