template<typename T, T Value>
auto Id = Value;

template<typename T, T Value>
auto Parenthesis = (Value);

template<typename T, typename U, T Value>
auto Cast = (U)Value;

template<typename T, T Value>
auto Throw = throw Value;

template<typename T, T Value>
auto New = new T(Value);

template<typename T, T Value>
auto Delete = delete Value;

template<typename T>
auto Child = T::Value;

template<typename T, T Value>
auto Field1 = Value.field;

template<typename T, T Value>
auto Field2 = Value.T::field;

template<typename T, T* Value>
auto PtrField1 = Value->field;

template<typename T, T* Value>
auto PtrField2 = Value->T::field;

template<typename T, T Value>
auto Array = Value[0];

template<typename T, T Value>
auto Func = Value(0);

template<typename T, T Value>
auto Ctor = T(Value);

template<typename T, T Value>
auto Init = {nullptr, Value, 0};

template<typename T, T Value>
auto Postfix = {Value++, Value--};

template<typename T, T Value>
auto Prefix = {++Value, --Value, &Value, *Value};

template<typename T, typename U, T ValueT, U ValueU>
auto Binary1 = ValueT.*ValueU;

template<typename T, typename U, T ValueT, U ValueU>
auto Binary2 = ValueT->*ValueU;

template<typename T, typename U, T ValueT, U ValueU>
auto Binary3 = ValueT+ValueU;

template<typename T, typename U, T ValueT, U ValueU>
auto Binary4 = ValueT, ValueU;

template<typename T, T Value>
auto If = Value ? Value : Value;

struct S
{
	static auto Value = 0;
	double field;

	__int8 operator++();
	__int16 operator--();
	__int32 operator~();
	__int64 operator!();
	float operator+();
	double operator&();
	char operator*();
};