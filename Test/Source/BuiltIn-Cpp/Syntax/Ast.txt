//////////////////////////////////////////////////////////////////
// Base Types
//////////////////////////////////////////////////////////////////

class TypeOrExpr
{
}

class ExprOnly : TypeOrExpr
{
}

class TypeOnly : TypeOrExpr
{
}

//////////////////////////////////////////////////////////////////
// QualifiedName
//////////////////////////////////////////////////////////////////

enum NameKinds
{
    Normal,
    Enum,
    EnumClass,
    Class,
    Struct,
    Union,
    Dtor,
    UserDefinedLiteral,
}

class Identifier
{
}

class NameIdentifier : Identifier
{
    var kind : NameKinds;
    var name : token;
}

enum Operators
{
    New,
    NewArray,
    Delete,
    DeleteArray,

    Comma,
    RoundBracket,
    Parantheses,
    Bracket,
    PointerDeref,
    Pointer,
    MemberDeref,
    Member,

    EQ, NE, LT, LE, GT, GE,
    Not,
    Revert,
    Xor,

    And,
    BitwiseAnd,
    Or,
    BitwiseOr,
    Mul,
    Div,
    Mod,
    Plus,
    Increase,
    Minus,
    Decrease,
    LeftShift,
    RightShift,

    Assign,
    RevertAssign,
    XorAssign,
    AndAssign,
    OrAssign,
    MulAssign,
    DivAssign,
    ModAssign,
    PlusAssign,
    MinusAssign,
    LeftShiftAssign,
    RightShiftAssign,
}

class OperatorIdentifier : Identifier
{
    var op : Operators;
}

class GenericArgument
{
    var argument : TypeOrExpr;
    var variadic : token;
}

class GenericArguments
{
    var arguments : GenericArgument[];
}

enum QualifiedNameKinds
{
    Root,
    Context,
    Auto,
    Decltype,
    DecltypeAuto,
    Member,
}

class QualifiedName : TypeOrExpr
{
    var kind : QualifiedNameKinds;
    var expr : TypeOrExpr;
    var parent : QualifiedName;
    var id : Identifier;
    var arguments : GenericArguments;
}

//////////////////////////////////////////////////////////////////
// PrimitiveExpr
//////////////////////////////////////////////////////////////////

enum PrimitiveExprLiteralKinds
{
    True,
    False,
    Nullptr,
    This,
    __Nullptr,
}

class PrimitiveExprLiteral : ExprOnly
{
    var kind : PrimitiveExprLiteralKinds;
}

enum NumericExprLiteralKinds
{
    Integer,
    Hex,
    Binary,
    Float,
    FloatHex,
    Char,
}

class NumericExprLiteral : ExprOnly
{
    var kind : NumericExprLiteralKinds;
    var literal : token;
}

enum StringLiteralKinds
{
    String,
    Macro_LPREFIX,
}

class StringLiteralFragment
{
    var kind : StringLiteralKinds;
    var literal : token;
}

class StringLiteral : ExprOnly
{
    var fragments : StringLiteralFragment[];
}

//////////////////////////////////////////////////////////////////
// PrimitiveExpr (Composable)
//////////////////////////////////////////////////////////////////

class ParenthesisExpr : ExprOnly
{
    var expr : TypeOrExpr;
}

class BraceExpr : ExprOnly
{
    var arguments : TypeOrExpr[];
}

class CastExpr : ExprOnly
{
    var keyword : token;
    var type : TypeOrExpr;
    var expr : TypeOrExpr;
}

class SysFuncExpr : ExprOnly
{
    var keyword : token;
    var variadic : token;
    var argument : TypeOrExpr;
}

enum OperatorScope
{
    Root,
    Context,
}

class SizeofExpr : ExprOnly
{
    var argument : TypeOrExpr;
    var variadic : token;
}

enum OperatorArray
{
    Array,
    NotArray,
}

class DeleteExpr : ExprOnly
{
    var scope : OperatorScope;
    var array : OperatorArray;
    var argument : TypeOrExpr;
}

enum OperatorInit
{
    None,
    Array,
    Parenthesis,
    Brace,
}

class NewExpr : ExprOnly
{
    var scope : OperatorScope;
    var init : OperatorInit;
    var type : TypeOrExpr[];
    var placementArguments : TypeOrExpr[];
    var initArguments : TypeOrExpr[];
}

//////////////////////////////////////////////////////////////////
// OperatorExpr
//////////////////////////////////////////////////////////////////

class PrefixUnaryExpr : ExprOnly
{
    var op : Operators;
    var operand : TypeOrExpr;
}

class PostfixUnaryExpr : ExprOnly
{
    var op : Operators;
    var operand : TypeOrExpr;
}

class IndexExpr : ExprOnly
{
    var operand : TypeOrExpr;
    var index : TypeOrExpr;
}

class CallExpr : ExprOnly
{
    var operand : TypeOrExpr;
    var arguments : TypeOrExpr[];
}

class BinaryExpr : ExprOnly
{
    var op : Operators;
    var left : TypeOrExpr;
    var right : TypeOrExpr;
}

class IfExpr : ExprOnly
{
    var condition : TypeOrExpr;
    var trueBranch : TypeOrExpr;
    var falseBranch : TypeOrExpr;
}

class ThrowExpr : ExprOnly
{
    var argument : TypeOrExpr;
}

//////////////////////////////////////////////////////////////////
// PrimitiveType
//////////////////////////////////////////////////////////////////

enum PrimitiveTypeKinds
{
    Neutral,
    Signed,
    Unsigned,
}

class PrimitiveType : TypeOnly
{
    var kind : PrimitiveTypeKinds;
    var literal1 : token;
    var literal2 : token;
}

class ConstType : TypeOnly
{
    // QualifiedName, PrimitiveType, ConstType, VolatileType
    var type : TypeOrExpr;
}

class VolatileType : TypeOnly
{
    // QualifiedName, PrimitiveType, ConstType, VolatileType
    var type : TypeOrExpr;
}

//////////////////////////////////////////////////////////////////
// Declarator
//////////////////////////////////////////////////////////////////

enum AdvancedTypeKinds
{
    LRef,
    RRef,
    Const,
    Volatile,
    Pointer,
    Pointer32,
    Pointer64,
    Member,
    AlignAs,
}

class AdvancedType
{
    var kind : AdvancedTypeKinds;
    var argument : TypeOrExpr;
}

class DeclaratorKeyword
{
    var keyword : token;
}

class FunctionKeyword
{
    var keyword : token;
    var arguments : TypeOrExpr[];
}

class FunctionParameter
{
    var type : TypeOrExpr;
    var declarator : Declarator;
    var variadic : token;
    var defaultValue : TypeOrExpr;
}

class DeclaratorFunctionPart
{
    var parameters : FunctionParameter[];
    var variadic : token;
    var keywords : FunctionKeyword[];
    var deferredType : TypeOrExpr;
}

class DeclaratorArrayPart
{
    var argument : TypeOrExpr;
}

class Declarator
{
    var keywords : DeclaratorKeyword[];
    var advancedTypes : AdvancedType[];
    var id : Identifier;
    var innerDeclarator : Declarator;
    var funcPart : DeclaratorFunctionPart;
    var arrayParts : DeclaratorArrayPart[];
}

class DeclaratorType : TypeOrExpr
{
    var type : TypeOrExpr;
    var declarator : Declarator;
}

//////////////////////////////////////////////////////////////////
// File
//////////////////////////////////////////////////////////////////

class File
{
}