//////////////////////////////////////////////////////////////////
// Statements
//////////////////////////////////////////////////////////////////

class EmptyStat : Statement
{
}

@public class BlockStat : Statement
{
    var statements : Statement[];
}

class ExprStat : Statement
{
    var expr : TypeOrExpr;
}

class DeclStat : Statement
{
    var decl : Declaration;
}

class BreakStat : Statement
{
}

class ContinueStat : Statement
{
}

class ReturnStat : Statement
{
    var expr : TypeOrExpr;
}

class LabelStat : Statement
{
    var label : token;
    var stat : Statement;
}

class GotoStat : Statement
{
    var label : token;
}

class CaseStat : Statement
{
    var expr : TypeOrExpr;
    var stat : Statement;
}

class DefaultStat : Statement
{
    var stat : Statement;
}

class __LeaveStat : Statement
{
}

class WhileStat : Statement
{
    var condition : TypeOrExprOrOthers;
    var stat : Statement;
}

class DoWhileStat : Statement
{
    var condition : TypeOrExpr;
    var stat : Statement;
}

class IfElseStat : Statement
{
    var varsDecl : VariablesDeclaration;
    var condition : TypeOrExprOrOthers;
    var trueStat : Statement;
    var falseStat : Statement;
}

class ForStatConditionPart
{
}

class ForStatLoopCondition : ForStatConditionPart
{
    var varsDecl : TypeOrExprOrOthers;
    var condition : TypeOrExpr;
    var sideEffect : TypeOrExpr;
}

class ForStatIterateCondition : ForStatConditionPart
{
    var decl : VariablesDeclaration;
    var collection : TypeOrExpr;
}

class ForStat : Statement
{
    var conditionPart : ForStatConditionPart;
    var stat : Statement;
}

class SwitchStat : Statement
{
    var condition : TypeOrExprOrOthers;
    var stat : Statement;
}

class TryStatCatchPart
{
    var decl : TypeOrExprOrOthers;
    var stat : Statement;
}

class TryStat : Statement
{
    var tryStat : Statement;
    var catchParts : TryStatCatchPart[];
}

class __TryStat : Statement
{
    var tryStat : Statement;
    var exceptStat : Statement;
    var finallyStat : Statement;
    var filter : TypeOrExpr;
}