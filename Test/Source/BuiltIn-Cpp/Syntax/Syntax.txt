//////////////////////////////////////////////////////////////////
// QualifiedName
//////////////////////////////////////////////////////////////////

_NameIdentifier
  ::= ID:name                       as NameIdentifier {kind = Normal}
  ;

_DtorIdentifier
  ::= "~" ID:name                   as NameIdentifier {kind = Dtor}
  ;

_TypeIdentifier
  ::= "enum" ID:name                as NameIdentifier {kind = Enum}
  ::= "enum" "class" ID:name        as NameIdentifier {kind = EnumClass}
  ::= "class" ID:name               as NameIdentifier {kind = Class}
  ::= "struct" ID:name              as NameIdentifier {kind = Struct}
  ::= "union" ID:name               as NameIdentifier {kind = Union}
  ;

_OperatorIdentifier
  ::= "operator" '""' ID:name       as NameIdentifier {kind = UserDefinedLiteral}
  ::= "operator" "new"              as OperatorIdentifier {op = New}
  ::= "operator" "new" "[" "]"      as OperatorIdentifier {op = NewArray}
  ::= "operator" "delete"           as OperatorIdentifier {op = Delete}
  ::= "operator" "delete" "[" "]"   as OperatorIdentifier {op = DeleteArray}
  ::= "operator" ","                as OperatorIdentifier {op = Comma}
  ::= "operator" "(" ")"            as OperatorIdentifier {op = Parantheses}
  ::= "operator" "[" "]"            as OperatorIdentifier {op = Bracket}
  ::= "operator" "->*"              as OperatorIdentifier {op = PointerDeref}
  ::= "operator" "->"               as OperatorIdentifier {op = Pointer}
  ::= "operator" "!="               as OperatorIdentifier {op = NE}
  ::= "operator" "!"                as OperatorIdentifier {op = Not}
  ::= "operator" "=="               as OperatorIdentifier {op = EQ}
  ::= "operator" "="                as OperatorIdentifier {op = Assign}
  ::= "operator" "~="               as OperatorIdentifier {op = RevertAssign}
  ::= "operator" "~"                as OperatorIdentifier {op = Revert}
  ::= "operator" "^="               as OperatorIdentifier {op = XorAssign}
  ::= "operator" "^"                as OperatorIdentifier {op = Xor}
  ::= "operator" "&&"               as OperatorIdentifier {op = And}
  ::= "operator" "&="               as OperatorIdentifier {op = AndAssign}
  ::= "operator" "&"                as OperatorIdentifier {op = BitwiseAnd}
  ::= "operator" "||"               as OperatorIdentifier {op = Or}
  ::= "operator" "|="               as OperatorIdentifier {op = OrAssign}
  ::= "operator" "|"                as OperatorIdentifier {op = BitwiseOr}
  ::= "operator" "*="               as OperatorIdentifier {op = MulAssign}
  ::= "operator" "*"                as OperatorIdentifier {op = Mul}
  ::= "operator" "/="               as OperatorIdentifier {op = DivAssign}
  ::= "operator" "/"                as OperatorIdentifier {op = Div}
  ::= "operator" "%="               as OperatorIdentifier {op = ModAssign}
  ::= "operator" "%"                as OperatorIdentifier {op = Mod}
  ::= "operator" "+="               as OperatorIdentifier {op = PlusAssign}
  ::= "operator" "++"               as OperatorIdentifier {op = Increase}
  ::= "operator" "+"                as OperatorIdentifier {op = Plus}
  ::= "operator" "-="               as OperatorIdentifier {op = MinusAssign}
  ::= "operator" "--"               as OperatorIdentifier {op = Decrease}
  ::= "operator" "-"                as OperatorIdentifier {op = Minus}
  ::= "operator" "<<="              as OperatorIdentifier {op = LeftShiftAssign}
  ::= "operator" "<<"               as OperatorIdentifier {op = LeftShift}
  ::= "operator" "<="               as OperatorIdentifier {op = LE}
  ::= "operator" "<"                as OperatorIdentifier {op = LT}
  ::= "operator" ">>="              as OperatorIdentifier {op = RightShiftAssign}
  ::= "operator" ">>"               as OperatorIdentifier {op = RightShift}
  ::= "operator" ">="               as OperatorIdentifier {op = GE}
  ::= "operator" ">"                as OperatorIdentifier {op = GT}
  ;

_Identifier
  ::= !_NameIdentifier
  ::= !_TypeIdentifier
  ::= !_OperatorIdentifier
  ;

_GenericArgument
  ::= _TypeOrExpr_NoComma_NoLT:argument ["...":variadic] as GenericArgument
  ;

_GenericArguments
  ::= "<" {_GenericArgument:arguments ; ","} ">" as GenericArguments
  ;

_QualifiedNameFragment
  ::= _Identifier:id [_GenericArguments:arguments] as partial QualifiedName
  ::= "template" _Identifier:id _GenericArguments:arguments as partial QualifiedName
  ;

_MemberQualifiedNameFragment
  ::= _DtorIdentifier:id as partial QualifiedName
  ;

_QualifiedName
  ::= _QualifiedNameFragment as QualifiedName {kind = Context}
  ::= "::" _QualifiedNameFragment as QualifiedName {kind = Root}
  ::= "decltype" "(" "auto" ")" as QualifiedName {kind = DecltypeAuto}
  ::= "decltype" "(" _Expr:expr ")" as QualifiedName {kind = Decltype}
  ::= _QualifiedName:parent "::" _QualifiedNameFragment as QualifiedName {kind = Member}
  ::= _QualifiedName:parent "::" _MemberQualifiedNameFragment as QualifiedName {kind = Member}
  ;

//////////////////////////////////////////////////////////////////
// PrimitiveExpr + UnaryExpr
//////////////////////////////////////////////////////////////////

_StringLiteralFragment
  ::= MACRO_LPREFIX as StringLiteralFragment {kind = Macro_LPREFIX}
  ::= STRING:literal as StringLiteralFragment {kind = String}
  ;

_NewInit
  ::= "[" _Expr:initArguments "]" {"[" _Expr:initArguments "]"} as partial NewExpr {init = Array}
  ::= "(" {_Expr_NoComma:initArguments ; ","} ")" as partial NewExpr {init = Parenthesis}
  ::= "{" {_Expr_NoComma:initArguments ; ","} "}" as partial NewExpr {init = Brace}
  ;

_NewFragment
  ::= ["(" {_Expr_NoComma:placementArguments ; ","} ")"] _QualifiedName:type [_NewInit] as partial NewExpr {init ?= None}
  ;

_DeleteFragment
  ::= _PrimitiveExpr_QualifiedName:argument as partial DeleteExpr {array = NotArray}
  ::= "[" "]" _PrimitiveExpr_QualifiedName:argument as partial DeleteExpr {array = Array}
  ;

_PrimitiveExpr : TypeOrExpr
  ::= "true" as PrimitiveExprLiteral {kind = True}
  ::= "false" as PrimitiveExprLiteral {kind = False}
  ::= "nullptr" as PrimitiveExprLiteral {kind = Nullptr}
  ::= "this" as PrimitiveExprLiteral {kind = This}
  ::= "__nullptr" as PrimitiveExprLiteral {kind = __Nullptr}
  ::= INT:literal as NumericExprLiteral {kind = Integer}
  ::= HEX:literal as NumericExprLiteral {kind = Hex}
  ::= BIN:literal as NumericExprLiteral {kind = Binary}
  ::= FLOAT:literal as NumericExprLiteral {kind = Float}
  ::= FLOATHEX:literal as NumericExprLiteral {kind = FloatHex}
  ::= CHAR:literal as NumericExprLiteral {kind = Char}
  ::= _StringLiteralFragment:fragments {_StringLiteralFragment:fragments} as StringLiteral
  ::= "(" _Expr:expr ")" as ParenthesisExpr
  ::= "{" {_Expr_NoComma:arguments ; ","} "}" as BraceExpr
  ::= "dynamic_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "static_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "const_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "reinterpret_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "safe_cast":keyword "<" _Type:type ">" "(" _Expr:expr ")" as CastExpr
  ::= "typeid":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "alignof":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "__alignof":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "__uuidof":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "noexcept":keyword "(" _TypeOrExpr:argument ")" as SysFuncExpr
  ::= "(" _Type:type ")" _PrimitiveExpr_QualifiedName:expr as CastExpr
  ::= "++" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = Increase}
  ::= "--" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = Decrease}
  ::= "~" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = Revert}
  ::= "!" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = Not}
  ::= "-" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = Minus}
  ::= "+" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = Plus}
  ::= "&" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = BitwiseAnd}
  ::= "*" _PrimitiveExpr_QualifiedName:operand as PrefixUnaryExpr {op = Mul}
  ::= "new" _NewFragment as NewExpr {scope = Context}
  ::= "::" "new" _NewFragment as NewExpr {scope = Root}
  ::= "delete" _DeleteFragment as DeleteExpr {scope = Context}
  ::= "::" "delete" _DeleteFragment as DeleteExpr {scope = Root}
  ;

_PrimitiveExpr_QualifiedName
  ::= !_PrimitiveExpr
  ::= !_QualifiedName
  ;

_PostfixUnaryExpr
  ::= left_recursion_placeholder(Shared,Expr)
  ::= !_PrimitiveExpr_QualifiedName
  ::= _PostfixUnaryExpr:operand "++" as PostfixUnaryExpr {op = Increase}
  ::= _PostfixUnaryExpr:operand "--" as PostfixUnaryExpr {op = Decrease}
  ::= _PostfixUnaryExpr:operand "[" _Expr:index "]" as IndexExpr
  ::= _PostfixUnaryExpr:operand "(" {_Expr_NoComma:arguments ; ","} ")" as CallExpr
  ;

//////////////////////////////////////////////////////////////////
// BinaryExpr
//////////////////////////////////////////////////////////////////

_MemberOperatorIdentifier
  ::= !_NameIdentifier
  ::= !_DtorIdentifier
  ::= !_OperatorIdentifier
  ;

_MemberOperatorQualifiedName
  ::= _Identifier:id [_GenericArguments:arguments] as QualifiedName {kind = Context}
  ;

_BExpr0
  ::= !_PostfixUnaryExpr
  ::= _BExpr0:left "." _MemberOperatorQualifiedName:right as BinaryExpr {op = Member}
  ::= _BExpr0:left "->" _MemberOperatorQualifiedName:right as BinaryExpr {op = Pointer}
  ::= _BExpr0:left ".*" _PostfixUnaryExpr:right as BinaryExpr {op = MemberDeref}
  ::= _BExpr0:left "->*" _PostfixUnaryExpr:right as BinaryExpr {op = PointerDeref}
  ;

_BExpr1
  ::= !_BExpr0
  ::= _BExpr1:left "*" _BExpr0:right as BinaryExpr {op = Mul}
  ::= _BExpr1:left "/" _BExpr0:right as BinaryExpr {op = Div}
  ::= _BExpr1:left "%" _BExpr0:right as BinaryExpr {op = Mod}
  ;

_BExpr2
  ::= !_BExpr1
  ::= _BExpr2:left "+" _BExpr1:right as BinaryExpr {op = Plus}
  ::= _BExpr2:left "-" _BExpr1:right as BinaryExpr {op = Minus}
  ;

_BExpr3
  ::= !_BExpr2
  ::= _BExpr3:left "<<" _BExpr2:right as BinaryExpr {op = LeftShift}
  ::= _BExpr3:left ">>" _BExpr2:right as BinaryExpr {op = RightShift}
  ;

_BExpr4
  ::= !_BExpr3
  ::= _BExpr4:left "<" _BExpr3:right as BinaryExpr {op = LT}
  ::= _BExpr4:left ">" _BExpr3:right as BinaryExpr {op = GT}
  ::= _BExpr4:left "<=" _BExpr3:right as BinaryExpr {op = LE}
  ::= _BExpr4:left ">=" _BExpr3:right as BinaryExpr {op = GE}
  ;

_BExpr5
  ::= !_BExpr4
  ::= _BExpr5:left "==" _BExpr4:right as BinaryExpr {op = EQ}
  ::= _BExpr5:left "!=" _BExpr4:right as BinaryExpr {op = NE}
  ;

_BExpr6
  ::= !_BExpr5
  ::= _BExpr6:left "&" _BExpr5:right as BinaryExpr {op = BitwiseAnd}
  ;

_BExpr7
  ::= !_BExpr6
  ::= _BExpr7:left "^" _BExpr6:right as BinaryExpr {op = Xor}
  ;

_BExpr8
  ::= !_BExpr7
  ::= _BExpr8:left "|" _BExpr7:right as BinaryExpr {op = BitwiseOr}
  ;

_BExpr9
  ::= !_BExpr8
  ::= _BExpr9:left "&&" _BExpr8:right as BinaryExpr {op = And}
  ;

_BExpr10
  ::= !_BExpr9
  ::= _BExpr10:left "||" _BExpr9:right as BinaryExpr {op = Or}
  ;

_ThrowExpr
  ::= "throw" [_BExpr10:argument] as ThrowExpr
  ;

_BExpr_NoComma
  ::= !_BExpr10
  ::= !_ThrowExpr
  ::= _BExpr10:condition "?" _Expr:trueBranch ":" _BExpr_NoComma:falseBranch as IfExpr
  ::= _BExpr10:left "=" _BExpr_NoComma:right as BinaryExpr {op = Assign}
  ::= _BExpr10:left "*=" _BExpr_NoComma:right as BinaryExpr {op = MulAssign}
  ::= _BExpr10:left "/=" _BExpr_NoComma:right as BinaryExpr {op = DivAssign}
  ::= _BExpr10:left "%=" _BExpr_NoComma:right as BinaryExpr {op = ModAssign}
  ::= _BExpr10:left "+=" _BExpr_NoComma:right as BinaryExpr {op = PlusAssign}
  ::= _BExpr10:left "-=" _BExpr_NoComma:right as BinaryExpr {op = MinusAssign}
  ::= _BExpr10:left "<<=" _BExpr_NoComma:right as BinaryExpr {op = LeftShiftAssign}
  ::= _BExpr10:left ">>=" _BExpr_NoComma:right as BinaryExpr {op = RightShiftAssign}
  ::= _BExpr10:left "&=" _BExpr_NoComma:right as BinaryExpr {op = AndAssign}
  ::= _BExpr10:left "|=" _BExpr_NoComma:right as BinaryExpr {op = OrAssign}
  ::= _BExpr10:left "^=" _BExpr_NoComma:right as BinaryExpr {op = XorAssign}
  ;

_BExpr
  ::= !_BExpr_NoComma
  ::= _BExpr:left "," _BExpr_NoComma:right as BinaryExpr {op = Comma}
  ;

//////////////////////////////////////////////////////////////////
// PrimitiveType
//////////////////////////////////////////////////////////////////

_PrimitiveTypeLiteral
  ::= "wchar_t":literal1                 as partial PrimitiveType
  ::= "char8_t":literal1                 as partial PrimitiveType
  ::= "char16_t":literal1                as partial PrimitiveType
  ::= "char32_t":literal1                as partial PrimitiveType
  ::= "char":literal1                    as partial PrimitiveType
  ::= "short":literal1                   as partial PrimitiveType
  ::= "int":literal1                     as partial PrimitiveType
  ::= "__int8":literal1                  as partial PrimitiveType
  ::= "__int16":literal1                 as partial PrimitiveType
  ::= "__int32":literal1                 as partial PrimitiveType
  ::= "__int64":literal1                 as partial PrimitiveType
  ::= "long":literal1                    as partial PrimitiveType
  ::= "long":literal1 "int":literal2     as partial PrimitiveType
  ::= "long":literal1 "long":literal2    as partial PrimitiveType
  ;

_PrimitiveType
  ::= "signed" [_PrimitiveTypeLiteral]   as PrimitiveType {kind = Signed}
  ::= "unsigned" [_PrimitiveTypeLiteral] as PrimitiveType {kind = Unsigned}
  ::= "void":literal1                    as PrimitiveType {kind = Neutral}
  ::= "bool":literal1                    as PrimitiveType {kind = Neutral}
  ::= "float":literal1                   as PrimitiveType {kind = Neutral}
  ::= "double":literal1                  as PrimitiveType {kind = Neutral}
  ::= "long":literal1 "double":literal2  as PrimitiveType {kind = Neutral}
  ::= _PrimitiveTypeLiteral              as PrimitiveType {kind = Neutral}
  ::= "typename" !_QualifiedName
  ;

_ShortType : TypeOrExpr
  ::= "const" _ShortType_QualifiedName:type as ConstType
  ::= "volatile" _ShortType_QualifiedName:type as VolatileType
  ::= !_PrimitiveType
  ;

_ShortType_QualifiedName
  ::= !_QualifiedName
  ::= !_ShortType
  ;

_LongType
  ::= left_recursion_placeholder(Shared,Type)
  ::= !_ShortType_QualifiedName
  ::= _LongType:type "const" as ConstType
  ::= _LongType:type "volatile" as VolatileType
  ;

//////////////////////////////////////////////////////////////////
// _Type
//////////////////////////////////////////////////////////////////

_Type
  ::= !_QualifiedName left_recursion_inject(Shared) _LongType
  ::= !_ShortType left_recursion_inject(Type) _LongType
  ;

//////////////////////////////////////////////////////////////////
// _Expr
//////////////////////////////////////////////////////////////////

_Expr
  ::= !_QualifiedName left_recursion_inject(Shared) _BExpr
  ::= !_PrimitiveExpr left_recursion_inject(Expr) _BExpr
  ::= !_ThrowExpr
  ;

_Expr_NoComma
  ::= !_QualifiedName left_recursion_inject(Shared) _BExpr_NoComma
  ::= !_PrimitiveExpr left_recursion_inject(Expr) _BExpr_NoComma
  ::= !_ThrowExpr
  ;

//////////////////////////////////////////////////////////////////
// TypeOrExpr
//////////////////////////////////////////////////////////////////

_TypeOrExpr
  ::= !_QualifiedName left_recursion_inject(Shared) _LongType | _BExpr
  ::= !_ShortType left_recursion_inject(Type) _LongType
  ::= !_PrimitiveExpr left_recursion_inject(Expr) _BExpr
  ::= !_ThrowExpr
  ;

_TypeOrExpr_NoComma_NoLT
  ::= !_QualifiedName left_recursion_inject(Shared) _LongType | _BExpr_NoComma
  ::= !_ShortType left_recursion_inject(Type) _LongType
  ::= !_PrimitiveExpr left_recursion_inject(Expr) _BExpr_NoComma
  ::= !_ThrowExpr
  ;

//////////////////////////////////////////////////////////////////
// SYNTAX
//////////////////////////////////////////////////////////////////

_File
  ::= ";" as File
  ;