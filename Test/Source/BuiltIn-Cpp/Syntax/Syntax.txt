//////////////////////////////////////////////////////////////////
// QualifiedName
//////////////////////////////////////////////////////////////////

_Name
  ::= ID:name                 as Name {kind = Normal}
  ::= "~" ID:name             as Name {kind = Dtor}
  ::= "enum" ID:name          as Name {kind = Enum}
  ::= "enum" "class" ID:name  as Name {kind = EnumClass}
  ::= "class" ID:name         as Name {kind = Class}
  ::= "struct" ID:name        as Name {kind = Struct}
  ::= "union" ID:name         as Name {kind = Union}
  ::= "operator" '""' ID:name as Name {kind = UserDefinedLiteral}
  ;

_OperatorName
  ::= "operator" "new"              as OperatorName {op = New}
  ::= "operator" "new" "[" "]"      as OperatorName {op = NewArray}
  ::= "operator" "delete"           as OperatorName {op = Delete}
  ::= "operator" "delete" "[" "]"   as OperatorName {op = DeleteArray}
  ::= "operator" ","                as OperatorName {op = Comma}
  ::= "operator" "(" ")"            as OperatorName {op = Parantheses}
  ::= "operator" "[" "]"            as OperatorName {op = Bracket}
  ::= "operator" "->*"              as OperatorName {op = PointerDeref}
  ::= "operator" "->"               as OperatorName {op = Pointer}
  ::= "operator" "!="               as OperatorName {op = NE}
  ::= "operator" "!"                as OperatorName {op = Not}
  ::= "operator" "=="               as OperatorName {op = EQ}
  ::= "operator" "="                as OperatorName {op = Assign}
  ::= "operator" "~="               as OperatorName {op = RevertAssign}
  ::= "operator" "~"                as OperatorName {op = Revert}
  ::= "operator" "^="               as OperatorName {op = XorAssign}
  ::= "operator" "^"                as OperatorName {op = Xor}
  ::= "operator" "&&"               as OperatorName {op = And}
  ::= "operator" "&="               as OperatorName {op = AndAssign}
  ::= "operator" "&"                as OperatorName {op = BitwiseAnd}
  ::= "operator" "||"               as OperatorName {op = Or}
  ::= "operator" "|="               as OperatorName {op = OrAssign}
  ::= "operator" "|"                as OperatorName {op = BitwiseOr}
  ::= "operator" "*="               as OperatorName {op = MulAssign}
  ::= "operator" "*"                as OperatorName {op = Mul}
  ::= "operator" "/="               as OperatorName {op = DivAssign}
  ::= "operator" "/"                as OperatorName {op = Div}
  ::= "operator" "%="               as OperatorName {op = ModAssign}
  ::= "operator" "%"                as OperatorName {op = Mod}
  ::= "operator" "+="               as OperatorName {op = PlusAssign}
  ::= "operator" "++"               as OperatorName {op = Increase}
  ::= "operator" "+"                as OperatorName {op = Plus}
  ::= "operator" "-="               as OperatorName {op = MinusAssign}
  ::= "operator" "--"               as OperatorName {op = Decrease}
  ::= "operator" "-"                as OperatorName {op = Minus}
  ::= "operator" "<<="              as OperatorName {op = LeftShiftAssign}
  ::= "operator" "<<"               as OperatorName {op = LeftShift}
  ::= "operator" "<="               as OperatorName {op = LE}
  ::= "operator" "<"                as OperatorName {op = LT}
  ::= "operator" ">>="              as OperatorName {op = RightShiftAssign}
  ::= "operator" ">>"               as OperatorName {op = RightShift}
  ::= "operator" ">="               as OperatorName {op = GE}
  ::= "operator" ">"                as OperatorName {op = GT}
  ;

_QualifiedName
  ::= !_Name
  ::= !_OperatorName
  ;

//////////////////////////////////////////////////////////////////
// TypeOrExpr
//////////////////////////////////////////////////////////////////

_TypeOrExpr
  ::= !_QualifiedName
  ;

//////////////////////////////////////////////////////////////////
// SYNTAX
//////////////////////////////////////////////////////////////////

_File
  ::= ";" as File
  ;