//////////////////////////////////////////////////////////////////
// Static Assert Declaration
//////////////////////////////////////////////////////////////////

_StaticAssertDecl
  ::= "static_assert" "(" _Expr_NoComma:expr ["," _Expr_NoComma:message] ")" as StaticAssertDeclaration
  ;
  
//////////////////////////////////////////////////////////////////
// Typedef Declaration
//////////////////////////////////////////////////////////////////

_TypedefCompatibleDecl
  ::= !_MultiTypedefVarsDeclWithoutKeyword
  ::= !_ClassDecl
  ::= !_EnumDecl
  ;

_TypedefDecl
  ::= "typedef" _TypedefCompatibleDecl:decl as TypedefDeclaration
  ;
  
//////////////////////////////////////////////////////////////////
// Extern Declaration
//////////////////////////////////////////////////////////////////

_ExternDeclRejectSemicolon
  ::= "extern" [STRING] "{" {_DeclRejectSemicolon:decls} "}" as ExternDeclaration
  ;
  
//////////////////////////////////////////////////////////////////
// Namespace Declaration
//////////////////////////////////////////////////////////////////

_NsName
  ::= ID:name as NamespaceName
  ;

_NsDecl
  ::= "namespace" {_NsName:names ; "::"} "{" {_DeclRejectSemicolon:decls} "}" as NamespaceDeclaration
  ;
  
//////////////////////////////////////////////////////////////////
// Using Declaration
//////////////////////////////////////////////////////////////////

_UsingNsDecl
  ::= "using" "namespace" _NsName:names {"::" _NsName:names} as UsingNamespaceDeclaration
  ;

_UsingValueDecl
  ::= "using" _QualifiedName:name as UsingValueDeclaration
  ;

_UsingTypeDecl
  ::= "using" ID:name "=" _Type:type as UsingTypeDeclaration
  ;
  
//////////////////////////////////////////////////////////////////
// Friend Declaration
//////////////////////////////////////////////////////////////////

_FriendTypeDecl
  ::= "friend" _QualifiedName:type as FriendTypeDeclaration
  ;

//////////////////////////////////////////////////////////////////
// Enum Declaration
//////////////////////////////////////////////////////////////////

_EnumItem
  ::= ID:name ["=" _Expr:expr] as EnumItem
  ;

_EnumBody
  ::= "{" [_EnumItem:items {"," _EnumItem:items} [","]] "}" [_MultiVarsDeclVariablePart:firstVarPart] as EnumBody
  ;

_EnumDecl
  ::= "enum" [ID:name] [":" _Type:type] _EnumBody:body as EnumDeclaration {kind = Enum}
  ::= "enum" "class" ID:name [":" _Type:type] _EnumBody:body as EnumDeclaration {kind = EnumClass}
  ;

_EnumForwardDecl
  ::= "enum" ID:name [":" _Type:type] as EnumDeclaration {kind = Enum}
  ::= "enum" "class"ID:name [":" _Type:type] as EnumDeclaration {kind = EnumClass}
  ;