//////////////////////////////////////////////////////////////////
// Mixed Declarations
//////////////////////////////////////////////////////////////////

_VarValueInit
  ::= "=" _Expr_NoComma:expr as VarValueInit
  ;

_VarNewParanInit
  ::= "(" {_Expr_Argument:arguments ; ","} ")" as VarParanthesisInit
  ;

_VarVarParanInit
  ::= "(" _Expr_Argument:arguments {"," _Expr_Argument:arguments} ")" as VarParanthesisInit
  ;

_VarBraceInit
  ::= "{" {_Expr_Argument:arguments ; ","} "}" as VarBraceInit
  ;

_VarCtorInit
  ::= !_VarNewParanInit
  ::= !_VarBraceInit
  ;

_VarInit
  ::= !_VarValueInit
  ::= !_VarVarParanInit
  ::= !_VarBraceInit
  ;

//================================================================

_DeclaratorVariablePartWithoutInit
  ::= _DeclaratorRequiredName:declarator as DeclaratorVariablePart
  ;

_DeclaratorVariablePartOptionalInit
  ::= _DeclaratorRequiredName:declarator [_VarInit:init] as DeclaratorVariablePart
  ;

_DeclaratorVariablePartRequiredInit
  ::= _DeclaratorRequiredName:declarator _VarInit:init as DeclaratorVariablePart
  ;

//================================================================

_VarWithoutInit
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartWithoutInit:varPart as SingleVarDeclaration
  ;

_VarRequiredInit
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartRequiredInit:varPart as SingleVarDeclaration
  ;

//================================================================

_FunctionParameterVariablePart
  ::= _VarValueInit:init as DeclaratorVariablePart
  ::= _DeclaratorOptionalName:declarator [_VarValueInit:init] as DeclaratorVariablePart
  ;

_FunctionParameter
  ::= !_TypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type _FunctionParameterVariablePart:varPart as SingleVarDeclaration
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords}
      _TypeBeforeDeclarator:type [_FunctionParameterVariablePart:varPart] as SingleVarDeclaration
  ;

//================================================================

_CatchParameterVariablePart
  ::= _DeclaratorOptionalName:declarator as DeclaratorVariablePart
  ;

_CatchParameter
  ::= !_TypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type _CatchParameterVariablePart:varPart as SingleVarDeclaration
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords}
      _TypeBeforeDeclarator:type _CatchParameterVariablePart:varPart as SingleVarDeclaration
  ;

//================================================================

_ExprOrVarWithInit
  ::= !_Expr
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartRequiredInit:varPart as SingleVarDeclaration
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords}
      _TypeBeforeDeclarator:type _DeclaratorVariablePartRequiredInit:varPart as SingleVarDeclaration
  ;

//////////////////////////////////////////////////////////////////
// Generic Header
//////////////////////////////////////////////////////////////////

_GenericParameterKeyword
  ::= "typename":typenameToken as partial GenericParameter
  ::= "class":typenameToken as partial GenericParameter
  ;

_OrdinaryGenericParameter
  ::= _GenericParameterKeyword ["...":variadic] [_DeclaratorId:id] ["=" _TypeOrExpr:init] as OrdinaryGenericParameter
  ;

_TypedGenericParameterInit
  ::= "=" _TypeOrExpr:expr as VarValueInit
  ;

_TypedGenericParameterVariablePart
  ::= _TypedGenericParameterInit:init as DeclaratorVariablePart
  ::= _DeclaratorOptionalName:declarator [_TypedGenericParameterInit:init] as DeclaratorVariablePart
  ;

_TypedGenericParameterDeclaration
  ::= !_TypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type _TypedGenericParameterVariablePart:varPart as SingleVarDeclaration
  ;

_TypedGenericParameter
  ::= _TypedGenericParameterDeclaration:varDecl as TypedGenericParameter
  ;

_GenericParameter
  ::= !_OrdinaryGenericParameter
  ::= !_TypedGenericParameter
  ;

_GenericHeader
  ::= "<" {_GenericParameter:parameters} ">" as GenericHeader
  ;

//////////////////////////////////////////////////////////////////
// Variable Declarations
//////////////////////////////////////////////////////////////////

_VarsDeclWithoutKeyword
  ::= _TypeBeforeDeclarator:type _DeclaratorVariablePartOptionalInit:varParts {"," _DeclaratorVariablePartOptionalInit:varParts} as MultipleVarDeclaration
  ;

_VarsDecl
  ::= !_VarsDeclWithoutKeyword
  ::= _DeclaratorKeyword:keywords {_DeclaratorKeyword:keywords} !_VarsDeclWithoutKeyword
  ;

_Decl
  ::= !_VarsDecl
  ;