//////////////////////////////////////////////////////////////////
// PrimitiveType
//////////////////////////////////////////////////////////////////

_PrimitiveTypeLiteral
  ::= "wchar_t":literal1                 as partial PrimitiveType
  ::= "char8_t":literal1                 as partial PrimitiveType
  ::= "char16_t":literal1                as partial PrimitiveType
  ::= "char32_t":literal1                as partial PrimitiveType
  ::= "char":literal1                    as partial PrimitiveType
  ::= "short":literal1                   as partial PrimitiveType
  ::= "int":literal1                     as partial PrimitiveType
  ::= "__int8":literal1                  as partial PrimitiveType
  ::= "__int16":literal1                 as partial PrimitiveType
  ::= "__int32":literal1                 as partial PrimitiveType
  ::= "__int64":literal1                 as partial PrimitiveType
  ::= "long":literal1                    as partial PrimitiveType
  ::= "long":literal1 "int":literal2     as partial PrimitiveType
  ::= "long":literal1 "long":literal2    as partial PrimitiveType
  ;

_PrimitiveType
  ::= "signed" [_PrimitiveTypeLiteral]   as PrimitiveType {kind = Signed}
  ::= "unsigned" [_PrimitiveTypeLiteral] as PrimitiveType {kind = Unsigned}
  ::= "void":literal1                    as PrimitiveType {kind = Neutral}
  ::= "bool":literal1                    as PrimitiveType {kind = Neutral}
  ::= "float":literal1                   as PrimitiveType {kind = Neutral}
  ::= "double":literal1                  as PrimitiveType {kind = Neutral}
  ::= "long":literal1 "double":literal2  as PrimitiveType {kind = Neutral}
  ::= _PrimitiveTypeLiteral              as PrimitiveType {kind = Neutral}
  ::= "typename" !_QualifiedNameAfterTypename
  ;

_PM_PrimitiveType
  ::= !prefix_merge(_PrimitiveType)
  ;

_PM_QualifiedName
  ::= !prefix_merge(_QualifiedName)
  ;

_ShortTypeStartsWithKeywordBeforeDeclarator
  ::= !_PM_PrimitiveType
  ::= "const" _TypeBeforeDeclarator:type as ConstType
  ::= "volatile" _TypeBeforeDeclarator:type as VolatileType
  ;

_ShortTypeBeforeDeclarator : TypeOrExpr
  ::= !_PM_QualifiedName
  ::= !_ShortTypeStartsWithKeywordBeforeDeclarator
  ;

_TypeStartsWithKeywordBeforeDeclarator
  ::= !_ShortTypeStartsWithKeywordBeforeDeclarator
  ::= _TypeStartsWithKeywordBeforeDeclarator:type "const" as ConstType
  ::= _TypeStartsWithKeywordBeforeDeclarator:type "volatile" as VolatileType
  ;

_TypeBeforeDeclarator
  ::= !_ShortTypeBeforeDeclarator
  ::= _TypeBeforeDeclarator:type "const" as ConstType
  ::= _TypeBeforeDeclarator:type "volatile" as VolatileType
  ;