/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void WorkflowPredefinedType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowTopQualifiedType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowReferenceType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowRawPointerType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowSharedPointerType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowNullableType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowEnumerableType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowMapType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowObservableListType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowFunctionType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowChildType::Accept(WorkflowType::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowNamespaceDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowFunctionDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowVariableDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowEventDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowPropertyDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowConstructorDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowDestructorDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowClassDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowEnumDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowStructDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowVirtualCfeDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowAutoPropertyDeclaration::Accept(WorkflowVirtualCfeDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowCastResultInterfaceDeclaration::Accept(WorkflowVirtualCfeDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowVirtualCseDeclaration::Accept(WorkflowDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowStateMachineDeclaration::Accept(WorkflowVirtualCseDeclaration::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowBreakStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowContinueStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowReturnStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowDeleteStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowRaiseExceptionStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowIfStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowWhileStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowTryStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowBlockStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowGotoStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowVariableStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowExpressionStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowVirtualCseStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowForEachStatement::Accept(WorkflowVirtualCseStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowSwitchStatement::Accept(WorkflowVirtualCseStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowCoProviderStatement::Accept(WorkflowVirtualCseStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowCoroutineStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowCoPauseStatement::Accept(WorkflowCoroutineStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowCoOperatorStatement::Accept(WorkflowCoroutineStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowStateMachineStatement::Accept(WorkflowStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowStateSwitchStatement::Accept(WorkflowStateMachineStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowStateInvokeStatement::Accept(WorkflowStateMachineStatement::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowThisExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowTopQualifiedExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowReferenceExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowOrderedNameExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowOrderedLambdaExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowMemberExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowChildExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowLiteralExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowFloatingExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowIntegerExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowStringExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowUnaryExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowBinaryExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowLetExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowIfExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowRangeExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowSetTestingExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowConstructorExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowInferExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowTypeCastingExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowTypeTestingExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowTypeOfTypeExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowTypeOfExpressionExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowAttachEventExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowDetachEventExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowObserveExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowCallExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowFunctionExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowNewClassExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowNewInterfaceExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowVirtualCfeExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowFormatExpression::Accept(WorkflowVirtualCfeExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowVirtualCseExpression::Accept(WorkflowExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowBindExpression::Accept(WorkflowVirtualCseExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowNewCoroutineExpression::Accept(WorkflowVirtualCseExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowMixinCastExpression::Accept(WorkflowVirtualCseExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowExpectedTypeCastExpression::Accept(WorkflowVirtualCseExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowCoOperatorExpression::Accept(WorkflowVirtualCseExpression::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowModuleUsingNameFragment::Accept(WorkflowModuleUsingFragment::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void WorkflowModuleUsingWildCardFragment::Accept(WorkflowModuleUsingFragment::IVisitor* visitor)
			{
				visitor->Visit(this);
			}
		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION

			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowClassMemberKind, system::workflow::WorkflowClassMemberKind)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowType, system::workflow::WorkflowType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowType::IVisitor, system::workflow::WorkflowType::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowExpression, system::workflow::WorkflowExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowExpression::IVisitor, system::workflow::WorkflowExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStatement, system::workflow::WorkflowStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStatement::IVisitor, system::workflow::WorkflowStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowAttribute, system::workflow::WorkflowAttribute)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowDeclaration, system::workflow::WorkflowDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowDeclaration::IVisitor, system::workflow::WorkflowDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowPredefinedTypeName, system::workflow::WorkflowPredefinedTypeName)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowPredefinedType, system::workflow::WorkflowPredefinedType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTopQualifiedType, system::workflow::WorkflowTopQualifiedType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowReferenceType, system::workflow::WorkflowReferenceType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowRawPointerType, system::workflow::WorkflowRawPointerType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowSharedPointerType, system::workflow::WorkflowSharedPointerType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowNullableType, system::workflow::WorkflowNullableType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowEnumerableType, system::workflow::WorkflowEnumerableType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowMapWritability, system::workflow::WorkflowMapWritability)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowMapType, system::workflow::WorkflowMapType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowObservableListType, system::workflow::WorkflowObservableListType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowFunctionType, system::workflow::WorkflowFunctionType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowChildType, system::workflow::WorkflowChildType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowNamespaceDeclaration, system::workflow::WorkflowNamespaceDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowFunctionArgument, system::workflow::WorkflowFunctionArgument)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowFunctionAnonymity, system::workflow::WorkflowFunctionAnonymity)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowFunctionDeclaration, system::workflow::WorkflowFunctionDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVariableDeclaration, system::workflow::WorkflowVariableDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowEventDeclaration, system::workflow::WorkflowEventDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowPropertyDeclaration, system::workflow::WorkflowPropertyDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowClassKind, system::workflow::WorkflowClassKind)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowConstructorType, system::workflow::WorkflowConstructorType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowBaseConstructorCall, system::workflow::WorkflowBaseConstructorCall)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowConstructorDeclaration, system::workflow::WorkflowConstructorDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowDestructorDeclaration, system::workflow::WorkflowDestructorDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowClassDeclaration, system::workflow::WorkflowClassDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowEnumKind, system::workflow::WorkflowEnumKind)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowEnumItemKind, system::workflow::WorkflowEnumItemKind)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowEnumItemIntersection, system::workflow::WorkflowEnumItemIntersection)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowEnumItem, system::workflow::WorkflowEnumItem)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowEnumDeclaration, system::workflow::WorkflowEnumDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStructMember, system::workflow::WorkflowStructMember)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStructDeclaration, system::workflow::WorkflowStructDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCfeDeclaration, system::workflow::WorkflowVirtualCfeDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor, system::workflow::WorkflowVirtualCfeDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowAPConst, system::workflow::WorkflowAPConst)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowAPObserve, system::workflow::WorkflowAPObserve)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowAutoPropertyDeclaration, system::workflow::WorkflowAutoPropertyDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCastResultInterfaceDeclaration, system::workflow::WorkflowCastResultInterfaceDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCseDeclaration, system::workflow::WorkflowVirtualCseDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCseDeclaration::IVisitor, system::workflow::WorkflowVirtualCseDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateInput, system::workflow::WorkflowStateInput)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateDeclaration, system::workflow::WorkflowStateDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateMachineDeclaration, system::workflow::WorkflowStateMachineDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowBreakStatement, system::workflow::WorkflowBreakStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowContinueStatement, system::workflow::WorkflowContinueStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowReturnStatement, system::workflow::WorkflowReturnStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowDeleteStatement, system::workflow::WorkflowDeleteStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowRaiseExceptionStatement, system::workflow::WorkflowRaiseExceptionStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowIfStatement, system::workflow::WorkflowIfStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowWhileStatement, system::workflow::WorkflowWhileStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTryStatement, system::workflow::WorkflowTryStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowBlockStatement, system::workflow::WorkflowBlockStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowGotoStatement, system::workflow::WorkflowGotoStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVariableStatement, system::workflow::WorkflowVariableStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowExpressionStatement, system::workflow::WorkflowExpressionStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCseStatement, system::workflow::WorkflowVirtualCseStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor, system::workflow::WorkflowVirtualCseStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowForEachDirection, system::workflow::WorkflowForEachDirection)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowForEachStatement, system::workflow::WorkflowForEachStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowSwitchCase, system::workflow::WorkflowSwitchCase)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowSwitchStatement, system::workflow::WorkflowSwitchStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCoProviderStatement, system::workflow::WorkflowCoProviderStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCoroutineStatement, system::workflow::WorkflowCoroutineStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor, system::workflow::WorkflowCoroutineStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCoPauseStatement, system::workflow::WorkflowCoPauseStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCoOperatorStatement, system::workflow::WorkflowCoOperatorStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateSwitchType, system::workflow::WorkflowStateSwitchType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateInvokeType, system::workflow::WorkflowStateInvokeType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateMachineStatement, system::workflow::WorkflowStateMachineStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor, system::workflow::WorkflowStateMachineStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateSwitchArgument, system::workflow::WorkflowStateSwitchArgument)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateSwitchCase, system::workflow::WorkflowStateSwitchCase)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateSwitchStatement, system::workflow::WorkflowStateSwitchStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStateInvokeStatement, system::workflow::WorkflowStateInvokeStatement)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowThisExpression, system::workflow::WorkflowThisExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTopQualifiedExpression, system::workflow::WorkflowTopQualifiedExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowReferenceExpression, system::workflow::WorkflowReferenceExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowOrderedNameExpression, system::workflow::WorkflowOrderedNameExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowOrderedLambdaExpression, system::workflow::WorkflowOrderedLambdaExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowMemberExpression, system::workflow::WorkflowMemberExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowChildExpression, system::workflow::WorkflowChildExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowLiteralValue, system::workflow::WorkflowLiteralValue)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowLiteralExpression, system::workflow::WorkflowLiteralExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowFloatingExpression, system::workflow::WorkflowFloatingExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowIntegerExpression, system::workflow::WorkflowIntegerExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowStringExpression, system::workflow::WorkflowStringExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowUnaryOperator, system::workflow::WorkflowUnaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowUnaryExpression, system::workflow::WorkflowUnaryExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowBinaryOperator, system::workflow::WorkflowBinaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowBinaryExpression, system::workflow::WorkflowBinaryExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowLetVariable, system::workflow::WorkflowLetVariable)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowLetExpression, system::workflow::WorkflowLetExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowIfExpression, system::workflow::WorkflowIfExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowRangeBoundary, system::workflow::WorkflowRangeBoundary)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowRangeExpression, system::workflow::WorkflowRangeExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowSetTesting, system::workflow::WorkflowSetTesting)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowSetTestingExpression, system::workflow::WorkflowSetTestingExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowConstructorArgument, system::workflow::WorkflowConstructorArgument)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowConstructorExpression, system::workflow::WorkflowConstructorExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowInferExpression, system::workflow::WorkflowInferExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTypeCastingStrategy, system::workflow::WorkflowTypeCastingStrategy)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTypeCastingExpression, system::workflow::WorkflowTypeCastingExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTypeTesting, system::workflow::WorkflowTypeTesting)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTypeTestingExpression, system::workflow::WorkflowTypeTestingExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTypeOfTypeExpression, system::workflow::WorkflowTypeOfTypeExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowTypeOfExpressionExpression, system::workflow::WorkflowTypeOfExpressionExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowAttachEventExpression, system::workflow::WorkflowAttachEventExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowDetachEventExpression, system::workflow::WorkflowDetachEventExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowObserveType, system::workflow::WorkflowObserveType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowObserveExpression, system::workflow::WorkflowObserveExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCallExpression, system::workflow::WorkflowCallExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowFunctionExpression, system::workflow::WorkflowFunctionExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowNewClassExpression, system::workflow::WorkflowNewClassExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowNewInterfaceExpression, system::workflow::WorkflowNewInterfaceExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCfeExpression, system::workflow::WorkflowVirtualCfeExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCfeExpression::IVisitor, system::workflow::WorkflowVirtualCfeExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowFormatExpression, system::workflow::WorkflowFormatExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCseExpression, system::workflow::WorkflowVirtualCseExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor, system::workflow::WorkflowVirtualCseExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowBindExpression, system::workflow::WorkflowBindExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowNewCoroutineExpression, system::workflow::WorkflowNewCoroutineExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowMixinCastExpression, system::workflow::WorkflowMixinCastExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowExpectedTypeCastExpression, system::workflow::WorkflowExpectedTypeCastExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowCoOperatorExpression, system::workflow::WorkflowCoOperatorExpression)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModuleUsingFragment, system::workflow::WorkflowModuleUsingFragment)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor, system::workflow::WorkflowModuleUsingFragment::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModuleUsingNameFragment, system::workflow::WorkflowModuleUsingNameFragment)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModuleUsingWildCardFragment, system::workflow::WorkflowModuleUsingWildCardFragment)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModuleUsingItem, system::workflow::WorkflowModuleUsingItem)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModuleUsingPath, system::workflow::WorkflowModuleUsingPath)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModuleType, system::workflow::WorkflowModuleType)
			IMPL_TYPE_INFO_RENAME(vl::glr::workflow::WorkflowModule, system::workflow::WorkflowModule)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowClassMemberKind)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowClassMemberKind)
				ENUM_NAMESPACE_ITEM(Static)
				ENUM_NAMESPACE_ITEM(Override)
				ENUM_NAMESPACE_ITEM(Normal)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowClassMemberKind)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowType)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowExpression)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStatement)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowAttribute)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowAttribute>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(category)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowAttribute)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowDeclaration)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(classMemberKind)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowDeclaration)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowPredefinedTypeName)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowPredefinedTypeName)
				ENUM_NAMESPACE_ITEM(Void)
				ENUM_NAMESPACE_ITEM(Object)
				ENUM_NAMESPACE_ITEM(Interface)
				ENUM_NAMESPACE_ITEM(Int)
				ENUM_NAMESPACE_ITEM(UInt)
				ENUM_NAMESPACE_ITEM(Float)
				ENUM_NAMESPACE_ITEM(Double)
				ENUM_NAMESPACE_ITEM(String)
				ENUM_NAMESPACE_ITEM(Char)
				ENUM_NAMESPACE_ITEM(Bool)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowPredefinedTypeName)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowPredefinedType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowPredefinedType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowPredefinedType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowTopQualifiedType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowTopQualifiedType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowTopQualifiedType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowReferenceType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowReferenceType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowReferenceType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowRawPointerType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowRawPointerType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowRawPointerType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowSharedPointerType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowSharedPointerType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowSharedPointerType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowNullableType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowNullableType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowNullableType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumerableType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowEnumerableType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumerableType)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowMapWritability)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowMapWritability)
				ENUM_NAMESPACE_ITEM(Readonly)
				ENUM_NAMESPACE_ITEM(Writable)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowMapWritability)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowMapType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowMapType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(writability)
				CLASS_MEMBER_FIELD(key)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowMapType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowObservableListType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowObservableListType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowObservableListType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowFunctionType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(result)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowChildType)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowChildType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowChildType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowNamespaceDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowNamespaceDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowNamespaceDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionArgument)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowFunctionArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionArgument)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowFunctionAnonymity)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowFunctionAnonymity)
				ENUM_NAMESPACE_ITEM(Named)
				ENUM_NAMESPACE_ITEM(Anonymous)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowFunctionAnonymity)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowFunctionDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(anonymity)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(returnType)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowVariableDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowVariableDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowVariableDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowEventDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowEventDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowEventDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowPropertyDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowPropertyDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(getter)
				CLASS_MEMBER_FIELD(setter)
				CLASS_MEMBER_FIELD(valueChangedEvent)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowPropertyDeclaration)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowClassKind)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowClassKind)
				ENUM_NAMESPACE_ITEM(Class)
				ENUM_NAMESPACE_ITEM(Interface)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowClassKind)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowConstructorType)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowConstructorType)
				ENUM_NAMESPACE_ITEM(Undefined)
				ENUM_NAMESPACE_ITEM(SharedPtr)
				ENUM_NAMESPACE_ITEM(RawPtr)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowConstructorType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowBaseConstructorCall)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowBaseConstructorCall>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowBaseConstructorCall)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowConstructorDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowConstructorDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(constructorType)
				CLASS_MEMBER_FIELD(baseConstructorCalls)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowConstructorDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowDestructorDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowDestructorDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowDestructorDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowClassDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowClassDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(constructorType)
				CLASS_MEMBER_FIELD(baseTypes)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowClassDeclaration)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowEnumKind)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowEnumKind)
				ENUM_NAMESPACE_ITEM(Normal)
				ENUM_NAMESPACE_ITEM(Flag)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowEnumKind)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowEnumItemKind)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowEnumItemKind)
				ENUM_NAMESPACE_ITEM(Constant)
				ENUM_NAMESPACE_ITEM(Intersection)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowEnumItemKind)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumItemIntersection)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowEnumItemIntersection>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumItemIntersection)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumItem)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowEnumItem>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(number)
				CLASS_MEMBER_FIELD(intersections)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumItem)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowEnumDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowEnumDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStructMember)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStructMember>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStructMember)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStructDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStructDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(members)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStructDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCfeDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_FIELD(expandedDeclarations)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCfeDeclaration)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowAPConst)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowAPConst)
				ENUM_NAMESPACE_ITEM(Readonly)
				ENUM_NAMESPACE_ITEM(Writable)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowAPConst)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowAPObserve)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowAPObserve)
				ENUM_NAMESPACE_ITEM(Observable)
				ENUM_NAMESPACE_ITEM(NotObservable)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowAPObserve)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowAutoPropertyDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCfeDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowAutoPropertyDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(configConst)
				CLASS_MEMBER_FIELD(configObserve)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowAutoPropertyDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowCastResultInterfaceDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCfeDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowCastResultInterfaceDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(baseType)
				CLASS_MEMBER_FIELD(elementType)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowCastResultInterfaceDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCseDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowDeclaration)

				CLASS_MEMBER_FIELD(expandedDeclarations)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCseDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateInput)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStateInput>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateInput)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateDeclaration)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStateDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateMachineDeclaration)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStateMachineDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(inputs)
				CLASS_MEMBER_FIELD(states)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateMachineDeclaration)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowBreakStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowBreakStatement>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowBreakStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowContinueStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowContinueStatement>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowContinueStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowReturnStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowReturnStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowReturnStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowDeleteStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowDeleteStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowDeleteStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowRaiseExceptionStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowRaiseExceptionStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowRaiseExceptionStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowIfStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowIfStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(trueBranch)
				CLASS_MEMBER_FIELD(falseBranch)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowIfStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowWhileStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowWhileStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(condition)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowWhileStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowTryStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowTryStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(protectedStatement)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(catchStatement)
				CLASS_MEMBER_FIELD(finallyStatement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowTryStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowBlockStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowBlockStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statements)
				CLASS_MEMBER_FIELD(endLabel)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowBlockStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowGotoStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowGotoStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(label)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowGotoStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowVariableStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowVariableStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(variable)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowVariableStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowExpressionStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowExpressionStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowExpressionStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCseStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

				CLASS_MEMBER_FIELD(expandedStatement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCseStatement)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowForEachDirection)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowForEachDirection)
				ENUM_NAMESPACE_ITEM(Normal)
				ENUM_NAMESPACE_ITEM(Reversed)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowForEachDirection)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowForEachStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowForEachStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(direction)
				CLASS_MEMBER_FIELD(collection)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowForEachStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowSwitchCase)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowSwitchCase>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowSwitchCase)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowSwitchStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowSwitchStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(caseBranches)
				CLASS_MEMBER_FIELD(defaultBranch)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowSwitchStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowCoProviderStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowCoProviderStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowCoProviderStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowCoroutineStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowCoroutineStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowCoPauseStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowCoroutineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowCoPauseStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowCoPauseStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowCoOperatorStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowCoroutineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowCoOperatorStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(varName)
				CLASS_MEMBER_FIELD(opName)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowCoOperatorStatement)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowStateSwitchType)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowStateSwitchType)
				ENUM_NAMESPACE_ITEM(Default)
				ENUM_NAMESPACE_ITEM(Pass)
				ENUM_NAMESPACE_ITEM(PassAndReturn)
				ENUM_NAMESPACE_ITEM(Ignore)
				ENUM_NAMESPACE_ITEM(IgnoreAndReturn)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowStateSwitchType)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowStateInvokeType)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowStateInvokeType)
				ENUM_NAMESPACE_ITEM(Goto)
				ENUM_NAMESPACE_ITEM(Push)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowStateInvokeType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateMachineStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStatement)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateMachineStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateSwitchArgument)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStateSwitchArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateSwitchArgument)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateSwitchCase)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStateSwitchCase>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateSwitchCase)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateSwitchStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStateMachineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStateSwitchStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(caseBranches)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateSwitchStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStateInvokeStatement)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowStateMachineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStateInvokeStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStateInvokeStatement)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowThisExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowThisExpression>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowThisExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowTopQualifiedExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowTopQualifiedExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowTopQualifiedExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowReferenceExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowReferenceExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowReferenceExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowOrderedNameExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowOrderedNameExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowOrderedNameExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowOrderedLambdaExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowOrderedLambdaExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(body)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowOrderedLambdaExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowMemberExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowMemberExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowMemberExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowChildExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowChildExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowChildExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowLiteralValue)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowLiteralValue)
				ENUM_NAMESPACE_ITEM(Null)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowLiteralValue)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowLiteralExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowLiteralExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowLiteralExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowFloatingExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowFloatingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowFloatingExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowIntegerExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowIntegerExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowIntegerExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowStringExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowStringExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowStringExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowUnaryOperator)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowUnaryOperator)
				ENUM_NAMESPACE_ITEM(Positive)
				ENUM_NAMESPACE_ITEM(Negative)
				ENUM_NAMESPACE_ITEM(Not)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowUnaryOperator)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowUnaryExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowUnaryExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(operand)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowUnaryExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowBinaryOperator)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowBinaryOperator)
				ENUM_NAMESPACE_ITEM(Assign)
				ENUM_NAMESPACE_ITEM(Index)
				ENUM_NAMESPACE_ITEM(FlagAnd)
				ENUM_NAMESPACE_ITEM(FlagOr)
				ENUM_NAMESPACE_ITEM(FailedThen)
				ENUM_NAMESPACE_ITEM(Exp)
				ENUM_NAMESPACE_ITEM(Add)
				ENUM_NAMESPACE_ITEM(Sub)
				ENUM_NAMESPACE_ITEM(Mul)
				ENUM_NAMESPACE_ITEM(Div)
				ENUM_NAMESPACE_ITEM(Mod)
				ENUM_NAMESPACE_ITEM(Shl)
				ENUM_NAMESPACE_ITEM(Shr)
				ENUM_NAMESPACE_ITEM(LT)
				ENUM_NAMESPACE_ITEM(GT)
				ENUM_NAMESPACE_ITEM(LE)
				ENUM_NAMESPACE_ITEM(GE)
				ENUM_NAMESPACE_ITEM(EQ)
				ENUM_NAMESPACE_ITEM(NE)
				ENUM_NAMESPACE_ITEM(Xor)
				ENUM_NAMESPACE_ITEM(And)
				ENUM_NAMESPACE_ITEM(Or)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowBinaryOperator)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowBinaryExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowBinaryExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowBinaryExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowLetVariable)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowLetVariable>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowLetVariable)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowLetExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowLetExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(variables)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowLetExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowIfExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowIfExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(condition)
				CLASS_MEMBER_FIELD(trueBranch)
				CLASS_MEMBER_FIELD(falseBranch)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowIfExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowRangeBoundary)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowRangeBoundary)
				ENUM_NAMESPACE_ITEM(Inclusive)
				ENUM_NAMESPACE_ITEM(Exclusive)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowRangeBoundary)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowRangeExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowRangeExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(begin)
				CLASS_MEMBER_FIELD(beginBoundary)
				CLASS_MEMBER_FIELD(end)
				CLASS_MEMBER_FIELD(endBoundary)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowRangeExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowSetTesting)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowSetTesting)
				ENUM_NAMESPACE_ITEM(In)
				ENUM_NAMESPACE_ITEM(NotIn)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowSetTesting)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowSetTestingExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowSetTestingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(test)
				CLASS_MEMBER_FIELD(element)
				CLASS_MEMBER_FIELD(collection)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowSetTestingExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowConstructorArgument)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowConstructorArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(key)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowConstructorArgument)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowConstructorExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowConstructorExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowConstructorExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowInferExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowInferExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowInferExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowTypeCastingStrategy)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowTypeCastingStrategy)
				ENUM_NAMESPACE_ITEM(Strong)
				ENUM_NAMESPACE_ITEM(Weak)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowTypeCastingStrategy)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeCastingExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowTypeCastingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(strategy)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeCastingExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowTypeTesting)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowTypeTesting)
				ENUM_NAMESPACE_ITEM(IsType)
				ENUM_NAMESPACE_ITEM(IsNotType)
				ENUM_NAMESPACE_ITEM(IsNull)
				ENUM_NAMESPACE_ITEM(IsNotNull)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowTypeTesting)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeTestingExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowTypeTestingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(test)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeTestingExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeOfTypeExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowTypeOfTypeExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeOfTypeExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeOfExpressionExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowTypeOfExpressionExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowTypeOfExpressionExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowAttachEventExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowAttachEventExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(event)
				CLASS_MEMBER_FIELD(function)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowAttachEventExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowDetachEventExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowDetachEventExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(event)
				CLASS_MEMBER_FIELD(handler)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowDetachEventExpression)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowObserveType)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowObserveType)
				ENUM_NAMESPACE_ITEM(SimpleObserve)
				ENUM_NAMESPACE_ITEM(ExtendedObserve)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowObserveType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowObserveExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowObserveExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(observeType)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(events)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowObserveExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowCallExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowCallExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(function)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowCallExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowFunctionExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(function)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowFunctionExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowNewClassExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowNewClassExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowNewClassExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowNewInterfaceExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowNewInterfaceExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowNewInterfaceExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCfeExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_FIELD(expandedExpression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCfeExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowFormatExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCfeExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowFormatExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowFormatExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCseExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowExpression)

				CLASS_MEMBER_FIELD(expandedExpression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowVirtualCseExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowBindExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowBindExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowBindExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowNewCoroutineExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowNewCoroutineExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowNewCoroutineExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowMixinCastExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowMixinCastExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowMixinCastExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowExpectedTypeCastExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowExpectedTypeCastExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(strategy)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowExpectedTypeCastExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowCoOperatorExpression)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowCoOperatorExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowCoOperatorExpression)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingFragment)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingFragment)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingNameFragment)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowModuleUsingFragment)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowModuleUsingNameFragment>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingNameFragment)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingWildCardFragment)
				CLASS_MEMBER_BASE(vl::glr::workflow::WorkflowModuleUsingFragment)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowModuleUsingWildCardFragment>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingWildCardFragment)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingItem)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowModuleUsingItem>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(fragments)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingItem)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingPath)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowModuleUsingPath>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowModuleUsingPath)

			BEGIN_ENUM_ITEM(vl::glr::workflow::WorkflowModuleType)
				ENUM_ITEM_NAMESPACE(vl::glr::workflow::WorkflowModuleType)
				ENUM_NAMESPACE_ITEM(Module)
				ENUM_NAMESPACE_ITEM(Unit)
			END_ENUM_ITEM(vl::glr::workflow::WorkflowModuleType)

			BEGIN_CLASS_MEMBER(vl::glr::workflow::WorkflowModule)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::glr::workflow::WorkflowModule>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(moduleType)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(paths)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::glr::workflow::WorkflowModule)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowType::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowPredefinedType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowTopQualifiedType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowReferenceType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowRawPointerType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowSharedPointerType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowNullableType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowEnumerableType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowMapType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowObservableListType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowFunctionType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowType::IVisitor::*)(vl::glr::workflow::WorkflowChildType* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowType)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowThisExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowTopQualifiedExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowReferenceExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowOrderedNameExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowOrderedLambdaExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowMemberExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowChildExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowLiteralExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowFloatingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowIntegerExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowStringExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowUnaryExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowBinaryExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowLetExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowIfExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowRangeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowSetTestingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowConstructorExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowInferExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowTypeCastingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowTypeTestingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowTypeOfTypeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowTypeOfExpressionExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowAttachEventExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowDetachEventExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowObserveExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowCallExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowFunctionExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowNewClassExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowNewInterfaceExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowVirtualCfeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowExpression::IVisitor::*)(vl::glr::workflow::WorkflowVirtualCseExpression* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowExpression)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowBreakStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowContinueStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowReturnStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowDeleteStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowRaiseExceptionStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowIfStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowWhileStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowTryStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowBlockStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowGotoStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowVariableStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowExpressionStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowVirtualCseStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowCoroutineStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStatement::IVisitor::*)(vl::glr::workflow::WorkflowStateMachineStatement* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowStatement)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowNamespaceDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowFunctionDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowVariableDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowEventDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowPropertyDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowConstructorDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowDestructorDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowClassDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowEnumDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowStructDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowVirtualCfeDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowVirtualCseDeclaration* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowDeclaration)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowAutoPropertyDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowCastResultInterfaceDeclaration* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCfeDeclaration)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCseDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseDeclaration::IVisitor::*)(vl::glr::workflow::WorkflowStateMachineDeclaration* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCseDeclaration)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor::*)(vl::glr::workflow::WorkflowForEachStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor::*)(vl::glr::workflow::WorkflowSwitchStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor::*)(vl::glr::workflow::WorkflowCoProviderStatement* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCseStatement)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor::*)(vl::glr::workflow::WorkflowCoPauseStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor::*)(vl::glr::workflow::WorkflowCoOperatorStatement* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowCoroutineStatement)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor::*)(vl::glr::workflow::WorkflowStateSwitchStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor::*)(vl::glr::workflow::WorkflowStateInvokeStatement* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowStateMachineStatement)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCfeExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCfeExpression::IVisitor::*)(vl::glr::workflow::WorkflowFormatExpression* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCfeExpression)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor::*)(vl::glr::workflow::WorkflowBindExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor::*)(vl::glr::workflow::WorkflowNewCoroutineExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor::*)(vl::glr::workflow::WorkflowMixinCastExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor::*)(vl::glr::workflow::WorkflowExpectedTypeCastExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor::*)(vl::glr::workflow::WorkflowCoOperatorExpression* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowVirtualCseExpression)

			BEGIN_INTERFACE_MEMBER(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor::*)(vl::glr::workflow::WorkflowModuleUsingNameFragment* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor::*)(vl::glr::workflow::WorkflowModuleUsingWildCardFragment* node))
			END_INTERFACE_MEMBER(vl::glr::workflow::WorkflowModuleUsingFragment)

#endif

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
			class WorkflowAstTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowClassMemberKind)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowType::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowExpression::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStatement::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowAttribute)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowPredefinedTypeName)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowPredefinedType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTopQualifiedType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowReferenceType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowRawPointerType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowSharedPointerType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowNullableType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowEnumerableType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowMapWritability)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowMapType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowObservableListType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowFunctionType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowChildType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowNamespaceDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowFunctionArgument)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowFunctionAnonymity)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowFunctionDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVariableDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowEventDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowPropertyDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowClassKind)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowConstructorType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowBaseConstructorCall)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowConstructorDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowDestructorDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowClassDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowEnumKind)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowEnumItemKind)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowEnumItemIntersection)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowEnumItem)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowEnumDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStructMember)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStructDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowAPConst)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowAPObserve)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowAutoPropertyDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCastResultInterfaceDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateInput)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateMachineDeclaration)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowBreakStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowContinueStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowReturnStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowDeleteStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowRaiseExceptionStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowIfStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowWhileStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTryStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowBlockStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowGotoStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVariableStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowExpressionStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowForEachDirection)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowForEachStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowSwitchCase)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowSwitchStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCoProviderStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCoroutineStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCoPauseStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCoOperatorStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateInvokeType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateMachineStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchArgument)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchCase)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStateInvokeStatement)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowThisExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTopQualifiedExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowReferenceExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowOrderedNameExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowOrderedLambdaExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowMemberExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowChildExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowLiteralValue)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowLiteralExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowFloatingExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowIntegerExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowStringExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowUnaryOperator)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowUnaryExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowBinaryOperator)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowBinaryExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowLetVariable)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowLetExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowIfExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowRangeBoundary)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowRangeExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowSetTesting)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowSetTestingExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowConstructorArgument)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowConstructorExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowInferExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTypeCastingStrategy)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTypeCastingExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTypeTesting)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTypeTestingExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTypeOfTypeExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowTypeOfExpressionExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowAttachEventExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowDetachEventExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowObserveType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowObserveExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCallExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowFunctionExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowNewClassExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowNewInterfaceExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeExpression::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowFormatExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowBindExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowNewCoroutineExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowMixinCastExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowExpectedTypeCastExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowCoOperatorExpression)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingFragment)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingNameFragment)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingWildCardFragment)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingItem)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingPath)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModuleType)
					ADD_TYPE_INFO(vl::glr::workflow::WorkflowModule)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif
#endif

			bool WorkflowAstLoadTypes()
			{
#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
				if (auto manager = GetGlobalTypeManager())
				{
					Ptr<ITypeLoader> loader = new WorkflowAstTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
