/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST
#define VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			class WorkflowAttachEventExpression;
			class WorkflowAttribute;
			class WorkflowAutoPropertyDeclaration;
			class WorkflowBaseConstructorCall;
			class WorkflowBinaryExpression;
			class WorkflowBindExpression;
			class WorkflowBlockStatement;
			class WorkflowBreakStatement;
			class WorkflowCallExpression;
			class WorkflowCastResultInterfaceDeclaration;
			class WorkflowChildExpression;
			class WorkflowChildType;
			class WorkflowClassDeclaration;
			class WorkflowClassMember;
			class WorkflowCoOperatorExpression;
			class WorkflowCoOperatorStatement;
			class WorkflowCoPauseStatement;
			class WorkflowCoProviderStatement;
			class WorkflowConstructorArgument;
			class WorkflowConstructorDeclaration;
			class WorkflowConstructorExpression;
			class WorkflowContinueStatement;
			class WorkflowCoroutineStatement;
			class WorkflowDeclaration;
			class WorkflowDeleteStatement;
			class WorkflowDestructorDeclaration;
			class WorkflowDetachEventExpression;
			class WorkflowEnumDeclaration;
			class WorkflowEnumItem;
			class WorkflowEnumItemIntersection;
			class WorkflowEnumerableType;
			class WorkflowEventDeclaration;
			class WorkflowExpectedTypeCastExpression;
			class WorkflowExpression;
			class WorkflowExpressionStatement;
			class WorkflowFloatingExpression;
			class WorkflowForEachStatement;
			class WorkflowFormatExpression;
			class WorkflowFunctionArgument;
			class WorkflowFunctionDeclaration;
			class WorkflowFunctionExpression;
			class WorkflowFunctionType;
			class WorkflowGotoStatement;
			class WorkflowIfExpression;
			class WorkflowIfStatement;
			class WorkflowInferExpression;
			class WorkflowIntegerExpression;
			class WorkflowLetExpression;
			class WorkflowLetVariable;
			class WorkflowLiteralExpression;
			class WorkflowMapType;
			class WorkflowMemberExpression;
			class WorkflowMixinCastExpression;
			class WorkflowModule;
			class WorkflowModuleUsingFragment;
			class WorkflowModuleUsingItem;
			class WorkflowModuleUsingNameFragment;
			class WorkflowModuleUsingPath;
			class WorkflowModuleUsingWildCardFragment;
			class WorkflowNamespaceDeclaration;
			class WorkflowNewClassExpression;
			class WorkflowNewCoroutineExpression;
			class WorkflowNewInterfaceExpression;
			class WorkflowNullableType;
			class WorkflowObservableListType;
			class WorkflowObserveExpression;
			class WorkflowOrderedLambdaExpression;
			class WorkflowOrderedNameExpression;
			class WorkflowPredefinedType;
			class WorkflowPropertyDeclaration;
			class WorkflowRaiseExceptionStatement;
			class WorkflowRangeExpression;
			class WorkflowRawPointerType;
			class WorkflowReferenceExpression;
			class WorkflowReferenceType;
			class WorkflowReturnStatement;
			class WorkflowSetTestingExpression;
			class WorkflowSharedPointerType;
			class WorkflowStateDeclaration;
			class WorkflowStateInput;
			class WorkflowStateInvokeStatement;
			class WorkflowStateMachineDeclaration;
			class WorkflowStateMachineStatement;
			class WorkflowStateSwitchArgument;
			class WorkflowStateSwitchCase;
			class WorkflowStateSwitchStatement;
			class WorkflowStatement;
			class WorkflowStringExpression;
			class WorkflowStructDeclaration;
			class WorkflowStructMember;
			class WorkflowSwitchCase;
			class WorkflowSwitchStatement;
			class WorkflowThisExpression;
			class WorkflowTopQualifiedExpression;
			class WorkflowTopQualifiedType;
			class WorkflowTryStatement;
			class WorkflowType;
			class WorkflowTypeCastingExpression;
			class WorkflowTypeOfExpressionExpression;
			class WorkflowTypeOfTypeExpression;
			class WorkflowTypeTestingExpression;
			class WorkflowUnaryExpression;
			class WorkflowVariableDeclaration;
			class WorkflowVariableStatement;
			class WorkflowVirtualCfeDeclaration;
			class WorkflowVirtualCfeExpression;
			class WorkflowVirtualCseDeclaration;
			class WorkflowVirtualCseExpression;
			class WorkflowVirtualCseStatement;
			class WorkflowWhileStatement;

			enum class WorkflowClassMemberKind
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Static = 0,
				Override = 1,
				Normal = 2,
			};

			enum class WorkflowPredefinedTypeName
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Void = 0,
				Object = 1,
				Interface = 2,
				Int = 3,
				UInt = 4,
				Float = 5,
				Double = 6,
				String = 7,
				Char = 8,
				Bool = 9,
			};

			enum class WorkflowMapWritability
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Readonly = 0,
				Writable = 1,
			};

			enum class WorkflowFunctionAnonymity
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Named = 0,
				Anonymous = 1,
			};

			enum class WorkflowClassKind
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Class = 0,
				Interface = 1,
			};

			enum class WorkflowConstructorType
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Undefined = 0,
				SharedPtr = 1,
				RawPtr = 2,
			};

			enum class WorkflowEnumKind
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Normal = 0,
				Flag = 1,
			};

			enum class WorkflowEnumItemKind
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Constant = 0,
				Intersection = 1,
			};

			enum class WorkflowAPConst
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Readonly = 0,
				Writable = 1,
			};

			enum class WorkflowAPObserve
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Observable = 0,
				NotObservable = 1,
			};

			enum class WorkflowForEachDirection
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Normal = 0,
				Reversed = 1,
			};

			enum class WorkflowStateSwitchType
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Default = 0,
				Pass = 1,
				PassAndReturn = 2,
				Ignore = 3,
				IgnoreAndReturn = 4,
			};

			enum class WorkflowStateInvokeType
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Goto = 0,
				Push = 1,
			};

			enum class WorkflowLiteralValue
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Null = 0,
				True = 1,
				False = 2,
			};

			enum class WorkflowUnaryOperator
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Positive = 0,
				Negative = 1,
				Not = 2,
			};

			enum class WorkflowBinaryOperator
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Assign = 0,
				Index = 1,
				FlagAnd = 2,
				FlagOr = 3,
				FailedThen = 4,
				Exp = 5,
				Add = 6,
				Sub = 7,
				Mul = 8,
				Div = 9,
				Mod = 10,
				Shl = 11,
				Shr = 12,
				LT = 13,
				GT = 14,
				LE = 15,
				GE = 16,
				EQ = 17,
				NE = 18,
				Xor = 19,
				And = 20,
				Or = 21,
			};

			enum class WorkflowRangeBoundary
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Inclusive = 0,
				Exclusive = 1,
			};

			enum class WorkflowSetTesting
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				In = 0,
				NotIn = 1,
			};

			enum class WorkflowTypeCastingStrategy
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Strong = 0,
				Weak = 1,
			};

			enum class WorkflowTypeTesting
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				IsType = 0,
				IsNotType = 1,
				IsNull = 2,
				IsNotNull = 3,
			};

			enum class WorkflowObserveType
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				SimpleObserve = 0,
				ExtendedObserve = 1,
			};

			enum class WorkflowModuleType
			{
				UNDEFINED_ENUM_ITEM_VALUE = -1,
				Module = 0,
				Unit = 1,
			};

			class WorkflowClassMember : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowClassMember>
			{
			public:
				WorkflowClassMemberKind kind = WorkflowClassMemberKind::UNDEFINED_ENUM_ITEM_VALUE;
			};

			class WorkflowType abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowType>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowPredefinedType* node) = 0;
					virtual void Visit(WorkflowTopQualifiedType* node) = 0;
					virtual void Visit(WorkflowReferenceType* node) = 0;
					virtual void Visit(WorkflowRawPointerType* node) = 0;
					virtual void Visit(WorkflowSharedPointerType* node) = 0;
					virtual void Visit(WorkflowNullableType* node) = 0;
					virtual void Visit(WorkflowEnumerableType* node) = 0;
					virtual void Visit(WorkflowMapType* node) = 0;
					virtual void Visit(WorkflowObservableListType* node) = 0;
					virtual void Visit(WorkflowFunctionType* node) = 0;
					virtual void Visit(WorkflowChildType* node) = 0;
				};

				virtual void Accept(WorkflowType::IVisitor* visitor) = 0;

			};

			class WorkflowExpression abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowExpression>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowThisExpression* node) = 0;
					virtual void Visit(WorkflowTopQualifiedExpression* node) = 0;
					virtual void Visit(WorkflowReferenceExpression* node) = 0;
					virtual void Visit(WorkflowOrderedNameExpression* node) = 0;
					virtual void Visit(WorkflowOrderedLambdaExpression* node) = 0;
					virtual void Visit(WorkflowMemberExpression* node) = 0;
					virtual void Visit(WorkflowChildExpression* node) = 0;
					virtual void Visit(WorkflowLiteralExpression* node) = 0;
					virtual void Visit(WorkflowFloatingExpression* node) = 0;
					virtual void Visit(WorkflowIntegerExpression* node) = 0;
					virtual void Visit(WorkflowStringExpression* node) = 0;
					virtual void Visit(WorkflowUnaryExpression* node) = 0;
					virtual void Visit(WorkflowBinaryExpression* node) = 0;
					virtual void Visit(WorkflowLetExpression* node) = 0;
					virtual void Visit(WorkflowIfExpression* node) = 0;
					virtual void Visit(WorkflowRangeExpression* node) = 0;
					virtual void Visit(WorkflowSetTestingExpression* node) = 0;
					virtual void Visit(WorkflowConstructorExpression* node) = 0;
					virtual void Visit(WorkflowInferExpression* node) = 0;
					virtual void Visit(WorkflowTypeCastingExpression* node) = 0;
					virtual void Visit(WorkflowTypeTestingExpression* node) = 0;
					virtual void Visit(WorkflowTypeOfTypeExpression* node) = 0;
					virtual void Visit(WorkflowTypeOfExpressionExpression* node) = 0;
					virtual void Visit(WorkflowAttachEventExpression* node) = 0;
					virtual void Visit(WorkflowDetachEventExpression* node) = 0;
					virtual void Visit(WorkflowObserveExpression* node) = 0;
					virtual void Visit(WorkflowCallExpression* node) = 0;
					virtual void Visit(WorkflowFunctionExpression* node) = 0;
					virtual void Visit(WorkflowNewClassExpression* node) = 0;
					virtual void Visit(WorkflowNewInterfaceExpression* node) = 0;
					virtual void Visit(WorkflowVirtualCfeExpression* node) = 0;
					virtual void Visit(WorkflowVirtualCseExpression* node) = 0;
				};

				virtual void Accept(WorkflowExpression::IVisitor* visitor) = 0;

			};

			class WorkflowStatement abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowStatement>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowBreakStatement* node) = 0;
					virtual void Visit(WorkflowContinueStatement* node) = 0;
					virtual void Visit(WorkflowReturnStatement* node) = 0;
					virtual void Visit(WorkflowDeleteStatement* node) = 0;
					virtual void Visit(WorkflowRaiseExceptionStatement* node) = 0;
					virtual void Visit(WorkflowIfStatement* node) = 0;
					virtual void Visit(WorkflowWhileStatement* node) = 0;
					virtual void Visit(WorkflowTryStatement* node) = 0;
					virtual void Visit(WorkflowBlockStatement* node) = 0;
					virtual void Visit(WorkflowGotoStatement* node) = 0;
					virtual void Visit(WorkflowVariableStatement* node) = 0;
					virtual void Visit(WorkflowExpressionStatement* node) = 0;
					virtual void Visit(WorkflowVirtualCseStatement* node) = 0;
					virtual void Visit(WorkflowCoroutineStatement* node) = 0;
					virtual void Visit(WorkflowStateMachineStatement* node) = 0;
				};

				virtual void Accept(WorkflowStatement::IVisitor* visitor) = 0;

			};

			class WorkflowAttribute : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowAttribute>
			{
			public:
				vl::glr::ParsingToken category;
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowExpression> value;
			};

			class WorkflowDeclaration abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowDeclaration>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowNamespaceDeclaration* node) = 0;
					virtual void Visit(WorkflowFunctionDeclaration* node) = 0;
					virtual void Visit(WorkflowVariableDeclaration* node) = 0;
					virtual void Visit(WorkflowEventDeclaration* node) = 0;
					virtual void Visit(WorkflowPropertyDeclaration* node) = 0;
					virtual void Visit(WorkflowConstructorDeclaration* node) = 0;
					virtual void Visit(WorkflowDestructorDeclaration* node) = 0;
					virtual void Visit(WorkflowClassDeclaration* node) = 0;
					virtual void Visit(WorkflowEnumDeclaration* node) = 0;
					virtual void Visit(WorkflowStructDeclaration* node) = 0;
					virtual void Visit(WorkflowVirtualCfeDeclaration* node) = 0;
					virtual void Visit(WorkflowVirtualCseDeclaration* node) = 0;
				};

				virtual void Accept(WorkflowDeclaration::IVisitor* visitor) = 0;

				vl::collections::List<vl::Ptr<WorkflowAttribute>> attributes;
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowClassMember> classMember;
			};

			class WorkflowPredefinedType : public WorkflowType, vl::reflection::Description<WorkflowPredefinedType>
			{
			public:
				WorkflowPredefinedTypeName name = WorkflowPredefinedTypeName::UNDEFINED_ENUM_ITEM_VALUE;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowTopQualifiedType : public WorkflowType, vl::reflection::Description<WorkflowTopQualifiedType>
			{
			public:
				vl::glr::ParsingToken name;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowReferenceType : public WorkflowType, vl::reflection::Description<WorkflowReferenceType>
			{
			public:
				vl::glr::ParsingToken name;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowRawPointerType : public WorkflowType, vl::reflection::Description<WorkflowRawPointerType>
			{
			public:
				vl::Ptr<WorkflowType> element;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowSharedPointerType : public WorkflowType, vl::reflection::Description<WorkflowSharedPointerType>
			{
			public:
				vl::Ptr<WorkflowType> element;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowNullableType : public WorkflowType, vl::reflection::Description<WorkflowNullableType>
			{
			public:
				vl::Ptr<WorkflowType> element;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowEnumerableType : public WorkflowType, vl::reflection::Description<WorkflowEnumerableType>
			{
			public:
				vl::Ptr<WorkflowType> element;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowMapType : public WorkflowType, vl::reflection::Description<WorkflowMapType>
			{
			public:
				WorkflowMapWritability writability = WorkflowMapWritability::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowType> key;
				vl::Ptr<WorkflowType> value;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowObservableListType : public WorkflowType, vl::reflection::Description<WorkflowObservableListType>
			{
			public:
				vl::Ptr<WorkflowType> element;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowFunctionType : public WorkflowType, vl::reflection::Description<WorkflowFunctionType>
			{
			public:
				vl::Ptr<WorkflowType> result;
				vl::collections::List<vl::Ptr<WorkflowType>> arguments;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowChildType : public WorkflowType, vl::reflection::Description<WorkflowChildType>
			{
			public:
				vl::Ptr<WorkflowType> parent;
				vl::glr::ParsingToken name;

				void Accept(WorkflowType::IVisitor* visitor) override;
			};

			class WorkflowNamespaceDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowNamespaceDeclaration>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowDeclaration>> declarations;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowFunctionArgument : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowFunctionArgument>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowAttribute>> attributes;
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowType> type;
			};

			class WorkflowFunctionDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowFunctionDeclaration>
			{
			public:
				WorkflowFunctionAnonymity anonymity = WorkflowFunctionAnonymity::UNDEFINED_ENUM_ITEM_VALUE;
				vl::collections::List<vl::Ptr<WorkflowFunctionArgument>> arguments;
				vl::Ptr<WorkflowType> returnType;
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowVariableDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowVariableDeclaration>
			{
			public:
				vl::Ptr<WorkflowType> type;
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowEventDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowEventDeclaration>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowType>> arguments;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowPropertyDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowPropertyDeclaration>
			{
			public:
				vl::Ptr<WorkflowType> type;
				vl::glr::ParsingToken getter;
				vl::glr::ParsingToken setter;
				vl::glr::ParsingToken valueChangedEvent;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowBaseConstructorCall : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowBaseConstructorCall>
			{
			public:
				vl::Ptr<WorkflowType> type;
				vl::collections::List<vl::Ptr<WorkflowExpression>> arguments;
			};

			class WorkflowConstructorDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowConstructorDeclaration>
			{
			public:
				WorkflowConstructorType constructorType = WorkflowConstructorType::UNDEFINED_ENUM_ITEM_VALUE;
				vl::collections::List<vl::Ptr<WorkflowBaseConstructorCall>> baseConstructorCalls;
				vl::collections::List<vl::Ptr<WorkflowFunctionArgument>> arguments;
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowDestructorDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowDestructorDeclaration>
			{
			public:
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowClassDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowClassDeclaration>
			{
			public:
				WorkflowClassKind kind = WorkflowClassKind::UNDEFINED_ENUM_ITEM_VALUE;
				WorkflowConstructorType constructorType = WorkflowConstructorType::UNDEFINED_ENUM_ITEM_VALUE;
				vl::collections::List<vl::Ptr<WorkflowType>> baseTypes;
				vl::collections::List<vl::Ptr<WorkflowDeclaration>> declarations;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowEnumItemIntersection : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowEnumItemIntersection>
			{
			public:
				vl::glr::ParsingToken name;
			};

			class WorkflowEnumItem : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowEnumItem>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowAttribute>> attributes;
				vl::glr::ParsingToken name;
				WorkflowEnumItemKind kind = WorkflowEnumItemKind::UNDEFINED_ENUM_ITEM_VALUE;
				vl::glr::ParsingToken number;
				vl::collections::List<vl::Ptr<WorkflowEnumItemIntersection>> intersections;
			};

			class WorkflowEnumDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowEnumDeclaration>
			{
			public:
				WorkflowEnumKind kind = WorkflowEnumKind::UNDEFINED_ENUM_ITEM_VALUE;
				vl::collections::List<vl::Ptr<WorkflowEnumItem>> items;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowStructMember : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowStructMember>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowAttribute>> attributes;
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowType> type;
			};

			class WorkflowStructDeclaration : public WorkflowDeclaration, vl::reflection::Description<WorkflowStructDeclaration>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowStructMember>> members;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowVirtualCfeDeclaration abstract : public WorkflowDeclaration, vl::reflection::Description<WorkflowVirtualCfeDeclaration>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowAutoPropertyDeclaration* node) = 0;
					virtual void Visit(WorkflowCastResultInterfaceDeclaration* node) = 0;
				};

				virtual void Accept(WorkflowVirtualCfeDeclaration::IVisitor* visitor) = 0;

				vl::collections::List<vl::Ptr<WorkflowDeclaration>> expandedDeclarations;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowAutoPropertyDeclaration : public WorkflowVirtualCfeDeclaration, vl::reflection::Description<WorkflowAutoPropertyDeclaration>
			{
			public:
				vl::Ptr<WorkflowType> type;
				WorkflowAPConst configConst = WorkflowAPConst::UNDEFINED_ENUM_ITEM_VALUE;
				WorkflowAPObserve configObserve = WorkflowAPObserve::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowVirtualCfeDeclaration::IVisitor* visitor) override;
			};

			class WorkflowCastResultInterfaceDeclaration : public WorkflowVirtualCfeDeclaration, vl::reflection::Description<WorkflowCastResultInterfaceDeclaration>
			{
			public:
				vl::Ptr<WorkflowType> baseType;
				vl::Ptr<WorkflowType> elementType;

				void Accept(WorkflowVirtualCfeDeclaration::IVisitor* visitor) override;
			};

			class WorkflowVirtualCseDeclaration abstract : public WorkflowDeclaration, vl::reflection::Description<WorkflowVirtualCseDeclaration>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowStateMachineDeclaration* node) = 0;
				};

				virtual void Accept(WorkflowVirtualCseDeclaration::IVisitor* visitor) = 0;

				vl::collections::List<vl::Ptr<WorkflowDeclaration>> expandedDeclarations;

				void Accept(WorkflowDeclaration::IVisitor* visitor) override;
			};

			class WorkflowStateInput : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowStateInput>
			{
			public:
				vl::glr::ParsingToken name;
				vl::collections::List<vl::Ptr<WorkflowFunctionArgument>> arguments;
			};

			class WorkflowStateDeclaration : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowStateDeclaration>
			{
			public:
				vl::glr::ParsingToken name;
				vl::collections::List<vl::Ptr<WorkflowFunctionArgument>> arguments;
				vl::Ptr<WorkflowStatement> statement;
			};

			class WorkflowStateMachineDeclaration : public WorkflowVirtualCseDeclaration, vl::reflection::Description<WorkflowStateMachineDeclaration>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowStateInput>> inputs;
				vl::collections::List<vl::Ptr<WorkflowStateDeclaration>> states;

				void Accept(WorkflowVirtualCseDeclaration::IVisitor* visitor) override;
			};

			class WorkflowBreakStatement : public WorkflowStatement, vl::reflection::Description<WorkflowBreakStatement>
			{
			public:

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowContinueStatement : public WorkflowStatement, vl::reflection::Description<WorkflowContinueStatement>
			{
			public:

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowReturnStatement : public WorkflowStatement, vl::reflection::Description<WorkflowReturnStatement>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowDeleteStatement : public WorkflowStatement, vl::reflection::Description<WorkflowDeleteStatement>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowRaiseExceptionStatement : public WorkflowStatement, vl::reflection::Description<WorkflowRaiseExceptionStatement>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowIfStatement : public WorkflowStatement, vl::reflection::Description<WorkflowIfStatement>
			{
			public:
				vl::Ptr<WorkflowType> type;
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowExpression> expression;
				vl::Ptr<WorkflowStatement> trueBranch;
				vl::Ptr<WorkflowStatement> falseBranch;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowWhileStatement : public WorkflowStatement, vl::reflection::Description<WorkflowWhileStatement>
			{
			public:
				vl::Ptr<WorkflowExpression> condition;
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowTryStatement : public WorkflowStatement, vl::reflection::Description<WorkflowTryStatement>
			{
			public:
				vl::Ptr<WorkflowStatement> protectedStatement;
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowStatement> catchStatement;
				vl::Ptr<WorkflowStatement> finallyStatement;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowBlockStatement : public WorkflowStatement, vl::reflection::Description<WorkflowBlockStatement>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowStatement>> statements;
				vl::glr::ParsingToken endLabel;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowGotoStatement : public WorkflowStatement, vl::reflection::Description<WorkflowGotoStatement>
			{
			public:
				vl::glr::ParsingToken label;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowVariableStatement : public WorkflowStatement, vl::reflection::Description<WorkflowVariableStatement>
			{
			public:
				vl::Ptr<WorkflowVariableDeclaration> variable;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowExpressionStatement : public WorkflowStatement, vl::reflection::Description<WorkflowExpressionStatement>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowVirtualCseStatement abstract : public WorkflowStatement, vl::reflection::Description<WorkflowVirtualCseStatement>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowForEachStatement* node) = 0;
					virtual void Visit(WorkflowSwitchStatement* node) = 0;
					virtual void Visit(WorkflowCoProviderStatement* node) = 0;
				};

				virtual void Accept(WorkflowVirtualCseStatement::IVisitor* visitor) = 0;

				vl::Ptr<WorkflowStatement> expandedStatement;

				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowForEachStatement : public WorkflowVirtualCseStatement, vl::reflection::Description<WorkflowForEachStatement>
			{
			public:
				vl::glr::ParsingToken name;
				WorkflowForEachDirection direction = WorkflowForEachDirection::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> collection;
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowVirtualCseStatement::IVisitor* visitor) override;
			};

			class WorkflowSwitchCase : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowSwitchCase>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;
				vl::Ptr<WorkflowStatement> statement;
			};

			class WorkflowSwitchStatement : public WorkflowVirtualCseStatement, vl::reflection::Description<WorkflowSwitchStatement>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;
				vl::collections::List<vl::Ptr<WorkflowSwitchCase>> caseBranches;
				vl::Ptr<WorkflowStatement> defaultBranch;

				void Accept(WorkflowVirtualCseStatement::IVisitor* visitor) override;
			};

			class WorkflowCoProviderStatement : public WorkflowVirtualCseStatement, vl::reflection::Description<WorkflowCoProviderStatement>
			{
			public:
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowVirtualCseStatement::IVisitor* visitor) override;
			};

			class WorkflowCoroutineStatement abstract : public WorkflowStatement, vl::reflection::Description<WorkflowCoroutineStatement>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowCoPauseStatement* node) = 0;
					virtual void Visit(WorkflowCoOperatorStatement* node) = 0;
				};

				virtual void Accept(WorkflowCoroutineStatement::IVisitor* visitor) = 0;


				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowCoPauseStatement : public WorkflowCoroutineStatement, vl::reflection::Description<WorkflowCoPauseStatement>
			{
			public:
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowCoroutineStatement::IVisitor* visitor) override;
			};

			class WorkflowCoOperatorStatement : public WorkflowCoroutineStatement, vl::reflection::Description<WorkflowCoOperatorStatement>
			{
			public:
				vl::glr::ParsingToken varName;
				vl::glr::ParsingToken opName;
				vl::collections::List<vl::Ptr<WorkflowExpression>> arguments;

				void Accept(WorkflowCoroutineStatement::IVisitor* visitor) override;
			};

			class WorkflowStateMachineStatement abstract : public WorkflowStatement, vl::reflection::Description<WorkflowStateMachineStatement>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowStateSwitchStatement* node) = 0;
					virtual void Visit(WorkflowStateInvokeStatement* node) = 0;
				};

				virtual void Accept(WorkflowStateMachineStatement::IVisitor* visitor) = 0;


				void Accept(WorkflowStatement::IVisitor* visitor) override;
			};

			class WorkflowStateSwitchArgument : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowStateSwitchArgument>
			{
			public:
				vl::glr::ParsingToken name;
			};

			class WorkflowStateSwitchCase : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowStateSwitchCase>
			{
			public:
				vl::glr::ParsingToken name;
				vl::collections::List<vl::Ptr<WorkflowStateSwitchArgument>> arguments;
				vl::Ptr<WorkflowStatement> statement;
			};

			class WorkflowStateSwitchStatement : public WorkflowStateMachineStatement, vl::reflection::Description<WorkflowStateSwitchStatement>
			{
			public:
				WorkflowStateSwitchType type = WorkflowStateSwitchType::UNDEFINED_ENUM_ITEM_VALUE;
				vl::collections::List<vl::Ptr<WorkflowStateSwitchCase>> caseBranches;

				void Accept(WorkflowStateMachineStatement::IVisitor* visitor) override;
			};

			class WorkflowStateInvokeStatement : public WorkflowStateMachineStatement, vl::reflection::Description<WorkflowStateInvokeStatement>
			{
			public:
				WorkflowStateInvokeType type = WorkflowStateInvokeType::UNDEFINED_ENUM_ITEM_VALUE;
				vl::glr::ParsingToken name;
				vl::collections::List<vl::Ptr<WorkflowExpression>> arguments;

				void Accept(WorkflowStateMachineStatement::IVisitor* visitor) override;
			};

			class WorkflowThisExpression : public WorkflowExpression, vl::reflection::Description<WorkflowThisExpression>
			{
			public:

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowTopQualifiedExpression : public WorkflowExpression, vl::reflection::Description<WorkflowTopQualifiedExpression>
			{
			public:
				vl::glr::ParsingToken name;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowReferenceExpression : public WorkflowExpression, vl::reflection::Description<WorkflowReferenceExpression>
			{
			public:
				vl::glr::ParsingToken name;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowOrderedNameExpression : public WorkflowExpression, vl::reflection::Description<WorkflowOrderedNameExpression>
			{
			public:
				vl::glr::ParsingToken name;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowOrderedLambdaExpression : public WorkflowExpression, vl::reflection::Description<WorkflowOrderedLambdaExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> body;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowMemberExpression : public WorkflowExpression, vl::reflection::Description<WorkflowMemberExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> parent;
				vl::glr::ParsingToken name;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowChildExpression : public WorkflowExpression, vl::reflection::Description<WorkflowChildExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> parent;
				vl::glr::ParsingToken name;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowLiteralExpression : public WorkflowExpression, vl::reflection::Description<WorkflowLiteralExpression>
			{
			public:
				WorkflowLiteralValue value = WorkflowLiteralValue::UNDEFINED_ENUM_ITEM_VALUE;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowFloatingExpression : public WorkflowExpression, vl::reflection::Description<WorkflowFloatingExpression>
			{
			public:
				vl::glr::ParsingToken value;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowIntegerExpression : public WorkflowExpression, vl::reflection::Description<WorkflowIntegerExpression>
			{
			public:
				vl::glr::ParsingToken value;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowStringExpression : public WorkflowExpression, vl::reflection::Description<WorkflowStringExpression>
			{
			public:
				vl::glr::ParsingToken value;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowUnaryExpression : public WorkflowExpression, vl::reflection::Description<WorkflowUnaryExpression>
			{
			public:
				WorkflowUnaryOperator op = WorkflowUnaryOperator::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> operand;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowBinaryExpression : public WorkflowExpression, vl::reflection::Description<WorkflowBinaryExpression>
			{
			public:
				WorkflowBinaryOperator op = WorkflowBinaryOperator::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> first;
				vl::Ptr<WorkflowExpression> second;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowLetVariable : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowLetVariable>
			{
			public:
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowExpression> value;
			};

			class WorkflowLetExpression : public WorkflowExpression, vl::reflection::Description<WorkflowLetExpression>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowLetVariable>> variables;
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowIfExpression : public WorkflowExpression, vl::reflection::Description<WorkflowIfExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> condition;
				vl::Ptr<WorkflowExpression> trueBranch;
				vl::Ptr<WorkflowExpression> falseBranch;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowRangeExpression : public WorkflowExpression, vl::reflection::Description<WorkflowRangeExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> begin;
				WorkflowRangeBoundary beginBoundary = WorkflowRangeBoundary::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> end;
				WorkflowRangeBoundary endBoundary = WorkflowRangeBoundary::UNDEFINED_ENUM_ITEM_VALUE;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowSetTestingExpression : public WorkflowExpression, vl::reflection::Description<WorkflowSetTestingExpression>
			{
			public:
				WorkflowSetTesting test = WorkflowSetTesting::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> element;
				vl::Ptr<WorkflowExpression> collection;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowConstructorArgument : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowConstructorArgument>
			{
			public:
				vl::Ptr<WorkflowExpression> key;
				vl::Ptr<WorkflowExpression> value;
			};

			class WorkflowConstructorExpression : public WorkflowExpression, vl::reflection::Description<WorkflowConstructorExpression>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowConstructorArgument>> arguments;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowInferExpression : public WorkflowExpression, vl::reflection::Description<WorkflowInferExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;
				vl::Ptr<WorkflowType> type;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowTypeCastingExpression : public WorkflowExpression, vl::reflection::Description<WorkflowTypeCastingExpression>
			{
			public:
				WorkflowTypeCastingStrategy strategy = WorkflowTypeCastingStrategy::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> expression;
				vl::Ptr<WorkflowType> type;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowTypeTestingExpression : public WorkflowExpression, vl::reflection::Description<WorkflowTypeTestingExpression>
			{
			public:
				WorkflowTypeTesting test = WorkflowTypeTesting::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> expression;
				vl::Ptr<WorkflowType> type;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowTypeOfTypeExpression : public WorkflowExpression, vl::reflection::Description<WorkflowTypeOfTypeExpression>
			{
			public:
				vl::Ptr<WorkflowType> type;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowTypeOfExpressionExpression : public WorkflowExpression, vl::reflection::Description<WorkflowTypeOfExpressionExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowAttachEventExpression : public WorkflowExpression, vl::reflection::Description<WorkflowAttachEventExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> event;
				vl::Ptr<WorkflowExpression> function;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowDetachEventExpression : public WorkflowExpression, vl::reflection::Description<WorkflowDetachEventExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> event;
				vl::Ptr<WorkflowExpression> handler;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowObserveExpression : public WorkflowExpression, vl::reflection::Description<WorkflowObserveExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> parent;
				WorkflowObserveType observeType = WorkflowObserveType::UNDEFINED_ENUM_ITEM_VALUE;
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowExpression> expression;
				vl::collections::List<vl::Ptr<WorkflowExpression>> events;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowCallExpression : public WorkflowExpression, vl::reflection::Description<WorkflowCallExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> function;
				vl::collections::List<vl::Ptr<WorkflowExpression>> arguments;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowFunctionExpression : public WorkflowExpression, vl::reflection::Description<WorkflowFunctionExpression>
			{
			public:
				vl::Ptr<WorkflowFunctionDeclaration> function;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowNewClassExpression : public WorkflowExpression, vl::reflection::Description<WorkflowNewClassExpression>
			{
			public:
				vl::Ptr<WorkflowType> type;
				vl::collections::List<vl::Ptr<WorkflowExpression>> arguments;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowNewInterfaceExpression : public WorkflowExpression, vl::reflection::Description<WorkflowNewInterfaceExpression>
			{
			public:
				vl::Ptr<WorkflowType> type;
				vl::collections::List<vl::Ptr<WorkflowDeclaration>> declarations;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowVirtualCfeExpression abstract : public WorkflowExpression, vl::reflection::Description<WorkflowVirtualCfeExpression>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowFormatExpression* node) = 0;
				};

				virtual void Accept(WorkflowVirtualCfeExpression::IVisitor* visitor) = 0;

				vl::Ptr<WorkflowExpression> expandedExpression;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowFormatExpression : public WorkflowVirtualCfeExpression, vl::reflection::Description<WorkflowFormatExpression>
			{
			public:
				vl::glr::ParsingToken value;

				void Accept(WorkflowVirtualCfeExpression::IVisitor* visitor) override;
			};

			class WorkflowVirtualCseExpression abstract : public WorkflowExpression, vl::reflection::Description<WorkflowVirtualCseExpression>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowBindExpression* node) = 0;
					virtual void Visit(WorkflowNewCoroutineExpression* node) = 0;
					virtual void Visit(WorkflowMixinCastExpression* node) = 0;
					virtual void Visit(WorkflowExpectedTypeCastExpression* node) = 0;
					virtual void Visit(WorkflowCoOperatorExpression* node) = 0;
				};

				virtual void Accept(WorkflowVirtualCseExpression::IVisitor* visitor) = 0;

				vl::Ptr<WorkflowExpression> expandedExpression;

				void Accept(WorkflowExpression::IVisitor* visitor) override;
			};

			class WorkflowBindExpression : public WorkflowVirtualCseExpression, vl::reflection::Description<WorkflowBindExpression>
			{
			public:
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowVirtualCseExpression::IVisitor* visitor) override;
			};

			class WorkflowNewCoroutineExpression : public WorkflowVirtualCseExpression, vl::reflection::Description<WorkflowNewCoroutineExpression>
			{
			public:
				vl::glr::ParsingToken name;
				vl::Ptr<WorkflowStatement> statement;

				void Accept(WorkflowVirtualCseExpression::IVisitor* visitor) override;
			};

			class WorkflowMixinCastExpression : public WorkflowVirtualCseExpression, vl::reflection::Description<WorkflowMixinCastExpression>
			{
			public:
				vl::Ptr<WorkflowType> type;
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowVirtualCseExpression::IVisitor* visitor) override;
			};

			class WorkflowExpectedTypeCastExpression : public WorkflowVirtualCseExpression, vl::reflection::Description<WorkflowExpectedTypeCastExpression>
			{
			public:
				WorkflowTypeCastingStrategy strategy = WorkflowTypeCastingStrategy::UNDEFINED_ENUM_ITEM_VALUE;
				vl::Ptr<WorkflowExpression> expression;

				void Accept(WorkflowVirtualCseExpression::IVisitor* visitor) override;
			};

			class WorkflowCoOperatorExpression : public WorkflowVirtualCseExpression, vl::reflection::Description<WorkflowCoOperatorExpression>
			{
			public:
				vl::glr::ParsingToken name;

				void Accept(WorkflowVirtualCseExpression::IVisitor* visitor) override;
			};

			class WorkflowModuleUsingFragment abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowModuleUsingFragment>
			{
			public:
				class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
				{
				public:
					virtual void Visit(WorkflowModuleUsingNameFragment* node) = 0;
					virtual void Visit(WorkflowModuleUsingWildCardFragment* node) = 0;
				};

				virtual void Accept(WorkflowModuleUsingFragment::IVisitor* visitor) = 0;

			};

			class WorkflowModuleUsingNameFragment : public WorkflowModuleUsingFragment, vl::reflection::Description<WorkflowModuleUsingNameFragment>
			{
			public:
				vl::glr::ParsingToken name;

				void Accept(WorkflowModuleUsingFragment::IVisitor* visitor) override;
			};

			class WorkflowModuleUsingWildCardFragment : public WorkflowModuleUsingFragment, vl::reflection::Description<WorkflowModuleUsingWildCardFragment>
			{
			public:

				void Accept(WorkflowModuleUsingFragment::IVisitor* visitor) override;
			};

			class WorkflowModuleUsingItem : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowModuleUsingItem>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowModuleUsingFragment>> fragments;
			};

			class WorkflowModuleUsingPath : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowModuleUsingPath>
			{
			public:
				vl::collections::List<vl::Ptr<WorkflowModuleUsingItem>> items;
			};

			class WorkflowModule : public vl::glr::ParsingAstBase, vl::reflection::Description<WorkflowModule>
			{
			public:
				WorkflowModuleType moduleType = WorkflowModuleType::UNDEFINED_ENUM_ITEM_VALUE;
				vl::glr::ParsingToken name;
				vl::collections::List<vl::Ptr<WorkflowModuleUsingPath>> paths;
				vl::collections::List<vl::Ptr<WorkflowDeclaration>> declarations;
			};
		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowClassMemberKind)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowClassMember)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowType::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowExpression::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStatement::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowAttribute)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowDeclaration::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowPredefinedTypeName)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowPredefinedType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTopQualifiedType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowReferenceType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowRawPointerType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowSharedPointerType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowNullableType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowEnumerableType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowMapWritability)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowMapType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowObservableListType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowFunctionType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowChildType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowNamespaceDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowFunctionArgument)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowFunctionAnonymity)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowFunctionDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVariableDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowEventDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowPropertyDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowClassKind)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowConstructorType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowBaseConstructorCall)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowConstructorDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowDestructorDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowClassDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowEnumKind)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowEnumItemKind)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowEnumItemIntersection)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowEnumItem)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowEnumDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStructMember)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStructDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowAPConst)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowAPObserve)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowAutoPropertyDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCastResultInterfaceDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseDeclaration::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateInput)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateMachineDeclaration)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowBreakStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowContinueStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowReturnStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowDeleteStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowRaiseExceptionStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowIfStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowWhileStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTryStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowBlockStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowGotoStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVariableStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowExpressionStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowForEachDirection)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowForEachStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowSwitchCase)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowSwitchStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCoProviderStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCoroutineStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCoPauseStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCoOperatorStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateInvokeType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateMachineStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchArgument)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchCase)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateSwitchStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStateInvokeStatement)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowThisExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTopQualifiedExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowReferenceExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowOrderedNameExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowOrderedLambdaExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowMemberExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowChildExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowLiteralValue)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowLiteralExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowFloatingExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowIntegerExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowStringExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowUnaryOperator)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowUnaryExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowBinaryOperator)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowBinaryExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowLetVariable)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowLetExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowIfExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowRangeBoundary)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowRangeExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowSetTesting)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowSetTestingExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowConstructorArgument)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowConstructorExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowInferExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTypeCastingStrategy)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTypeCastingExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTypeTesting)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTypeTestingExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTypeOfTypeExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowTypeOfExpressionExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowAttachEventExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowDetachEventExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowObserveType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowObserveExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCallExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowFunctionExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowNewClassExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowNewInterfaceExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCfeExpression::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowFormatExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowBindExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowNewCoroutineExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowMixinCastExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowExpectedTypeCastExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowCoOperatorExpression)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingFragment)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingNameFragment)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingWildCardFragment)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingItem)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModuleUsingPath)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModuleType)
			DECL_TYPE_INFO(vl::glr::workflow::WorkflowModule)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowType::IVisitor)
				void Visit(vl::glr::workflow::WorkflowPredefinedType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowTopQualifiedType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowReferenceType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowRawPointerType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowSharedPointerType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowNullableType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowEnumerableType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowMapType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowObservableListType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowFunctionType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowChildType* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowType::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowExpression::IVisitor)
				void Visit(vl::glr::workflow::WorkflowThisExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowTopQualifiedExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowReferenceExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowOrderedNameExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowOrderedLambdaExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowMemberExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowChildExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowLiteralExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowFloatingExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowIntegerExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowStringExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowUnaryExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowBinaryExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowLetExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowIfExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowRangeExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowSetTestingExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowConstructorExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowInferExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowTypeCastingExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowTypeTestingExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowTypeOfTypeExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowTypeOfExpressionExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowAttachEventExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowDetachEventExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowObserveExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowCallExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowFunctionExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowNewClassExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowNewInterfaceExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowVirtualCfeExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowVirtualCseExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowExpression::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowStatement::IVisitor)
				void Visit(vl::glr::workflow::WorkflowBreakStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowContinueStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowReturnStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowDeleteStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowRaiseExceptionStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowIfStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowWhileStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowTryStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowBlockStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowGotoStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowVariableStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowExpressionStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowVirtualCseStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowCoroutineStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowStateMachineStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowStatement::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowDeclaration::IVisitor)
				void Visit(vl::glr::workflow::WorkflowNamespaceDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowFunctionDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowVariableDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowEventDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowPropertyDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowConstructorDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowDestructorDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowClassDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowEnumDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowStructDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowVirtualCfeDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowVirtualCseDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowDeclaration::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor)
				void Visit(vl::glr::workflow::WorkflowAutoPropertyDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowCastResultInterfaceDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowVirtualCfeDeclaration::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowVirtualCseDeclaration::IVisitor)
				void Visit(vl::glr::workflow::WorkflowStateMachineDeclaration* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowVirtualCseDeclaration::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor)
				void Visit(vl::glr::workflow::WorkflowForEachStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowSwitchStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowCoProviderStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowVirtualCseStatement::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor)
				void Visit(vl::glr::workflow::WorkflowCoPauseStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowCoOperatorStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowCoroutineStatement::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor)
				void Visit(vl::glr::workflow::WorkflowStateSwitchStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowStateInvokeStatement* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowStateMachineStatement::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowVirtualCfeExpression::IVisitor)
				void Visit(vl::glr::workflow::WorkflowFormatExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowVirtualCfeExpression::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor)
				void Visit(vl::glr::workflow::WorkflowBindExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowNewCoroutineExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowMixinCastExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowExpectedTypeCastExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowCoOperatorExpression* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowVirtualCseExpression::IVisitor)

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor)
				void Visit(vl::glr::workflow::WorkflowModuleUsingNameFragment* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(vl::glr::workflow::WorkflowModuleUsingWildCardFragment* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(vl::glr::workflow::WorkflowModuleUsingFragment::IVisitor)

#endif
#endif
			/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
			/// <returns>Returns true if this operation succeeded.</returns>
			extern bool WorkflowAstLoadTypes();
		}
	}
}
#endif