/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Builder.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace builder
			{

/***********************************************************************
AttachEventExpressionBuilder
***********************************************************************/

				AttachEventExpressionBuilder& AttachEventExpressionBuilder::event(const vl::Ptr<WfExpression>& value)
				{
					node->event = value;
					return *this;
				}

				AttachEventExpressionBuilder& AttachEventExpressionBuilder::function(const vl::Ptr<WfExpression>& value)
				{
					node->function = value;
					return *this;
				}

/***********************************************************************
AttributeBuilder
***********************************************************************/

				AttributeBuilder& AttributeBuilder::category(const vl::WString& value)
				{
					node->category.value = value;
					return *this;
				}

				AttributeBuilder& AttributeBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				AttributeBuilder& AttributeBuilder::value(const vl::Ptr<WfExpression>& value)
				{
					node->value = value;
					return *this;
				}

/***********************************************************************
AutoPropertyDeclarationBuilder
***********************************************************************/

				AutoPropertyDeclarationBuilder& AutoPropertyDeclarationBuilder::configConst(WfAPConst value)
				{
					node->configConst = value;
					return *this;
				}

				AutoPropertyDeclarationBuilder& AutoPropertyDeclarationBuilder::configObserve(WfAPObserve value)
				{
					node->configObserve = value;
					return *this;
				}

				AutoPropertyDeclarationBuilder& AutoPropertyDeclarationBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				AutoPropertyDeclarationBuilder& AutoPropertyDeclarationBuilder::functionKind(WfFunctionKind value)
				{
					node->functionKind = value;
					return *this;
				}

				AutoPropertyDeclarationBuilder& AutoPropertyDeclarationBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
BaseConstructorCallBuilder
***********************************************************************/

				BaseConstructorCallBuilder& BaseConstructorCallBuilder::arguments(const vl::Ptr<WfExpression>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				BaseConstructorCallBuilder& BaseConstructorCallBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
BinaryExpressionBuilder
***********************************************************************/

				BinaryExpressionBuilder& BinaryExpressionBuilder::first(const vl::Ptr<WfExpression>& value)
				{
					node->first = value;
					return *this;
				}

				BinaryExpressionBuilder& BinaryExpressionBuilder::op(WfBinaryOperator value)
				{
					node->op = value;
					return *this;
				}

				BinaryExpressionBuilder& BinaryExpressionBuilder::second(const vl::Ptr<WfExpression>& value)
				{
					node->second = value;
					return *this;
				}

/***********************************************************************
BindExpressionBuilder
***********************************************************************/

				BindExpressionBuilder& BindExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

/***********************************************************************
BlockStatementBuilder
***********************************************************************/

				BlockStatementBuilder& BlockStatementBuilder::endLabel(const vl::WString& value)
				{
					node->endLabel.value = value;
					return *this;
				}

				BlockStatementBuilder& BlockStatementBuilder::statements(const vl::Ptr<WfStatement>& value)
				{
					node->statements.Add(value);
					return *this;
				}

/***********************************************************************
CallExpressionBuilder
***********************************************************************/

				CallExpressionBuilder& CallExpressionBuilder::arguments(const vl::Ptr<WfExpression>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				CallExpressionBuilder& CallExpressionBuilder::function(const vl::Ptr<WfExpression>& value)
				{
					node->function = value;
					return *this;
				}

/***********************************************************************
CastResultInterfaceDeclarationBuilder
***********************************************************************/

				CastResultInterfaceDeclarationBuilder& CastResultInterfaceDeclarationBuilder::baseType(const vl::Ptr<WfType>& value)
				{
					node->baseType = value;
					return *this;
				}

				CastResultInterfaceDeclarationBuilder& CastResultInterfaceDeclarationBuilder::elementType(const vl::Ptr<WfType>& value)
				{
					node->elementType = value;
					return *this;
				}

/***********************************************************************
ChildExpressionBuilder
***********************************************************************/

				ChildExpressionBuilder& ChildExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				ChildExpressionBuilder& ChildExpressionBuilder::parent(const vl::Ptr<WfExpression>& value)
				{
					node->parent = value;
					return *this;
				}

/***********************************************************************
ChildTypeBuilder
***********************************************************************/

				ChildTypeBuilder& ChildTypeBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				ChildTypeBuilder& ChildTypeBuilder::parent(const vl::Ptr<WfType>& value)
				{
					node->parent = value;
					return *this;
				}

/***********************************************************************
ClassDeclarationBuilder
***********************************************************************/

				ClassDeclarationBuilder& ClassDeclarationBuilder::baseTypes(const vl::Ptr<WfType>& value)
				{
					node->baseTypes.Add(value);
					return *this;
				}

				ClassDeclarationBuilder& ClassDeclarationBuilder::constructorType(WfConstructorType value)
				{
					node->constructorType = value;
					return *this;
				}

				ClassDeclarationBuilder& ClassDeclarationBuilder::declarations(const vl::Ptr<WfDeclaration>& value)
				{
					node->declarations.Add(value);
					return *this;
				}

				ClassDeclarationBuilder& ClassDeclarationBuilder::kind(WfClassKind value)
				{
					node->kind = value;
					return *this;
				}

/***********************************************************************
CoOperatorExpressionBuilder
***********************************************************************/

				CoOperatorExpressionBuilder& CoOperatorExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
CoOperatorStatementBuilder
***********************************************************************/

				CoOperatorStatementBuilder& CoOperatorStatementBuilder::arguments(const vl::Ptr<WfExpression>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				CoOperatorStatementBuilder& CoOperatorStatementBuilder::opName(const vl::WString& value)
				{
					node->opName.value = value;
					return *this;
				}

				CoOperatorStatementBuilder& CoOperatorStatementBuilder::varName(const vl::WString& value)
				{
					node->varName.value = value;
					return *this;
				}

/***********************************************************************
CoPauseStatementBuilder
***********************************************************************/

				CoPauseStatementBuilder& CoPauseStatementBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
CoProviderStatementBuilder
***********************************************************************/

				CoProviderStatementBuilder& CoProviderStatementBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				CoProviderStatementBuilder& CoProviderStatementBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
ConstructorArgumentBuilder
***********************************************************************/

				ConstructorArgumentBuilder& ConstructorArgumentBuilder::key(const vl::Ptr<WfExpression>& value)
				{
					node->key = value;
					return *this;
				}

				ConstructorArgumentBuilder& ConstructorArgumentBuilder::value(const vl::Ptr<WfExpression>& value)
				{
					node->value = value;
					return *this;
				}

/***********************************************************************
ConstructorDeclarationBuilder
***********************************************************************/

				ConstructorDeclarationBuilder& ConstructorDeclarationBuilder::arguments(const vl::Ptr<WfFunctionArgument>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				ConstructorDeclarationBuilder& ConstructorDeclarationBuilder::baseConstructorCalls(const vl::Ptr<WfBaseConstructorCall>& value)
				{
					node->baseConstructorCalls.Add(value);
					return *this;
				}

				ConstructorDeclarationBuilder& ConstructorDeclarationBuilder::constructorType(WfConstructorType value)
				{
					node->constructorType = value;
					return *this;
				}

				ConstructorDeclarationBuilder& ConstructorDeclarationBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
ConstructorExpressionBuilder
***********************************************************************/

				ConstructorExpressionBuilder& ConstructorExpressionBuilder::arguments(const vl::Ptr<WfConstructorArgument>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

/***********************************************************************
DeclarationBuilder
***********************************************************************/

				DeclarationBuilder& DeclarationBuilder::attributes(const vl::Ptr<WfAttribute>& value)
				{
					node->attributes.Add(value);
					return *this;
				}

				DeclarationBuilder& DeclarationBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
DeleteStatementBuilder
***********************************************************************/

				DeleteStatementBuilder& DeleteStatementBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

/***********************************************************************
DestructorDeclarationBuilder
***********************************************************************/

				DestructorDeclarationBuilder& DestructorDeclarationBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
DetachEventExpressionBuilder
***********************************************************************/

				DetachEventExpressionBuilder& DetachEventExpressionBuilder::event(const vl::Ptr<WfExpression>& value)
				{
					node->event = value;
					return *this;
				}

				DetachEventExpressionBuilder& DetachEventExpressionBuilder::handler(const vl::Ptr<WfExpression>& value)
				{
					node->handler = value;
					return *this;
				}

/***********************************************************************
EnumDeclarationBuilder
***********************************************************************/

				EnumDeclarationBuilder& EnumDeclarationBuilder::items(const vl::Ptr<WfEnumItem>& value)
				{
					node->items.Add(value);
					return *this;
				}

				EnumDeclarationBuilder& EnumDeclarationBuilder::kind(WfEnumKind value)
				{
					node->kind = value;
					return *this;
				}

/***********************************************************************
EnumItemBuilder
***********************************************************************/

				EnumItemBuilder& EnumItemBuilder::attributes(const vl::Ptr<WfAttribute>& value)
				{
					node->attributes.Add(value);
					return *this;
				}

				EnumItemBuilder& EnumItemBuilder::intersections(const vl::Ptr<WfEnumItemIntersection>& value)
				{
					node->intersections.Add(value);
					return *this;
				}

				EnumItemBuilder& EnumItemBuilder::kind(WfEnumItemKind value)
				{
					node->kind = value;
					return *this;
				}

				EnumItemBuilder& EnumItemBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				EnumItemBuilder& EnumItemBuilder::number(const vl::WString& value)
				{
					node->number.value = value;
					return *this;
				}

/***********************************************************************
EnumItemIntersectionBuilder
***********************************************************************/

				EnumItemIntersectionBuilder& EnumItemIntersectionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
EnumerableTypeBuilder
***********************************************************************/

				EnumerableTypeBuilder& EnumerableTypeBuilder::element(const vl::Ptr<WfType>& value)
				{
					node->element = value;
					return *this;
				}

/***********************************************************************
EventDeclarationBuilder
***********************************************************************/

				EventDeclarationBuilder& EventDeclarationBuilder::arguments(const vl::Ptr<WfType>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

/***********************************************************************
ExpectedTypeCastExpressionBuilder
***********************************************************************/

				ExpectedTypeCastExpressionBuilder& ExpectedTypeCastExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				ExpectedTypeCastExpressionBuilder& ExpectedTypeCastExpressionBuilder::strategy(WfTypeCastingStrategy value)
				{
					node->strategy = value;
					return *this;
				}

/***********************************************************************
ExpressionStatementBuilder
***********************************************************************/

				ExpressionStatementBuilder& ExpressionStatementBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

/***********************************************************************
FloatingExpressionBuilder
***********************************************************************/

				FloatingExpressionBuilder& FloatingExpressionBuilder::value(const vl::WString& value)
				{
					node->value.value = value;
					return *this;
				}

/***********************************************************************
ForEachStatementBuilder
***********************************************************************/

				ForEachStatementBuilder& ForEachStatementBuilder::collection(const vl::Ptr<WfExpression>& value)
				{
					node->collection = value;
					return *this;
				}

				ForEachStatementBuilder& ForEachStatementBuilder::direction(WfForEachDirection value)
				{
					node->direction = value;
					return *this;
				}

				ForEachStatementBuilder& ForEachStatementBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				ForEachStatementBuilder& ForEachStatementBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
FormatExpressionBuilder
***********************************************************************/

				FormatExpressionBuilder& FormatExpressionBuilder::value(const vl::WString& value)
				{
					node->value.value = value;
					return *this;
				}

/***********************************************************************
FunctionArgumentBuilder
***********************************************************************/

				FunctionArgumentBuilder& FunctionArgumentBuilder::attributes(const vl::Ptr<WfAttribute>& value)
				{
					node->attributes.Add(value);
					return *this;
				}

				FunctionArgumentBuilder& FunctionArgumentBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				FunctionArgumentBuilder& FunctionArgumentBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
FunctionDeclarationBuilder
***********************************************************************/

				FunctionDeclarationBuilder& FunctionDeclarationBuilder::anonymity(WfFunctionAnonymity value)
				{
					node->anonymity = value;
					return *this;
				}

				FunctionDeclarationBuilder& FunctionDeclarationBuilder::arguments(const vl::Ptr<WfFunctionArgument>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				FunctionDeclarationBuilder& FunctionDeclarationBuilder::functionKind(WfFunctionKind value)
				{
					node->functionKind = value;
					return *this;
				}

				FunctionDeclarationBuilder& FunctionDeclarationBuilder::returnType(const vl::Ptr<WfType>& value)
				{
					node->returnType = value;
					return *this;
				}

				FunctionDeclarationBuilder& FunctionDeclarationBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
FunctionExpressionBuilder
***********************************************************************/

				FunctionExpressionBuilder& FunctionExpressionBuilder::function(const vl::Ptr<WfFunctionDeclaration>& value)
				{
					node->function = value;
					return *this;
				}

/***********************************************************************
FunctionTypeBuilder
***********************************************************************/

				FunctionTypeBuilder& FunctionTypeBuilder::arguments(const vl::Ptr<WfType>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				FunctionTypeBuilder& FunctionTypeBuilder::result(const vl::Ptr<WfType>& value)
				{
					node->result = value;
					return *this;
				}

/***********************************************************************
GotoStatementBuilder
***********************************************************************/

				GotoStatementBuilder& GotoStatementBuilder::label(const vl::WString& value)
				{
					node->label.value = value;
					return *this;
				}

/***********************************************************************
IfExpressionBuilder
***********************************************************************/

				IfExpressionBuilder& IfExpressionBuilder::condition(const vl::Ptr<WfExpression>& value)
				{
					node->condition = value;
					return *this;
				}

				IfExpressionBuilder& IfExpressionBuilder::falseBranch(const vl::Ptr<WfExpression>& value)
				{
					node->falseBranch = value;
					return *this;
				}

				IfExpressionBuilder& IfExpressionBuilder::trueBranch(const vl::Ptr<WfExpression>& value)
				{
					node->trueBranch = value;
					return *this;
				}

/***********************************************************************
IfStatementBuilder
***********************************************************************/

				IfStatementBuilder& IfStatementBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				IfStatementBuilder& IfStatementBuilder::falseBranch(const vl::Ptr<WfStatement>& value)
				{
					node->falseBranch = value;
					return *this;
				}

				IfStatementBuilder& IfStatementBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				IfStatementBuilder& IfStatementBuilder::trueBranch(const vl::Ptr<WfStatement>& value)
				{
					node->trueBranch = value;
					return *this;
				}

				IfStatementBuilder& IfStatementBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
InferExpressionBuilder
***********************************************************************/

				InferExpressionBuilder& InferExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				InferExpressionBuilder& InferExpressionBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
IntegerExpressionBuilder
***********************************************************************/

				IntegerExpressionBuilder& IntegerExpressionBuilder::value(const vl::WString& value)
				{
					node->value.value = value;
					return *this;
				}

/***********************************************************************
LetExpressionBuilder
***********************************************************************/

				LetExpressionBuilder& LetExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				LetExpressionBuilder& LetExpressionBuilder::variables(const vl::Ptr<WfLetVariable>& value)
				{
					node->variables.Add(value);
					return *this;
				}

/***********************************************************************
LetVariableBuilder
***********************************************************************/

				LetVariableBuilder& LetVariableBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				LetVariableBuilder& LetVariableBuilder::value(const vl::Ptr<WfExpression>& value)
				{
					node->value = value;
					return *this;
				}

/***********************************************************************
LiteralExpressionBuilder
***********************************************************************/

				LiteralExpressionBuilder& LiteralExpressionBuilder::value(WfLiteralValue value)
				{
					node->value = value;
					return *this;
				}

/***********************************************************************
MapTypeBuilder
***********************************************************************/

				MapTypeBuilder& MapTypeBuilder::key(const vl::Ptr<WfType>& value)
				{
					node->key = value;
					return *this;
				}

				MapTypeBuilder& MapTypeBuilder::value(const vl::Ptr<WfType>& value)
				{
					node->value = value;
					return *this;
				}

				MapTypeBuilder& MapTypeBuilder::writability(WfMapWritability value)
				{
					node->writability = value;
					return *this;
				}

/***********************************************************************
MemberExpressionBuilder
***********************************************************************/

				MemberExpressionBuilder& MemberExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				MemberExpressionBuilder& MemberExpressionBuilder::parent(const vl::Ptr<WfExpression>& value)
				{
					node->parent = value;
					return *this;
				}

/***********************************************************************
MixinCastExpressionBuilder
***********************************************************************/

				MixinCastExpressionBuilder& MixinCastExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				MixinCastExpressionBuilder& MixinCastExpressionBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
ModuleBuilder
***********************************************************************/

				ModuleBuilder& ModuleBuilder::declarations(const vl::Ptr<WfDeclaration>& value)
				{
					node->declarations.Add(value);
					return *this;
				}

				ModuleBuilder& ModuleBuilder::moduleType(WfModuleType value)
				{
					node->moduleType = value;
					return *this;
				}

				ModuleBuilder& ModuleBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				ModuleBuilder& ModuleBuilder::paths(const vl::Ptr<WfModuleUsingPath>& value)
				{
					node->paths.Add(value);
					return *this;
				}

/***********************************************************************
ModuleUsingItemBuilder
***********************************************************************/

				ModuleUsingItemBuilder& ModuleUsingItemBuilder::fragments(const vl::Ptr<WfModuleUsingFragment>& value)
				{
					node->fragments.Add(value);
					return *this;
				}

/***********************************************************************
ModuleUsingNameFragmentBuilder
***********************************************************************/

				ModuleUsingNameFragmentBuilder& ModuleUsingNameFragmentBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
ModuleUsingPathBuilder
***********************************************************************/

				ModuleUsingPathBuilder& ModuleUsingPathBuilder::items(const vl::Ptr<WfModuleUsingItem>& value)
				{
					node->items.Add(value);
					return *this;
				}

/***********************************************************************
NamespaceDeclarationBuilder
***********************************************************************/

				NamespaceDeclarationBuilder& NamespaceDeclarationBuilder::declarations(const vl::Ptr<WfDeclaration>& value)
				{
					node->declarations.Add(value);
					return *this;
				}

/***********************************************************************
NewClassExpressionBuilder
***********************************************************************/

				NewClassExpressionBuilder& NewClassExpressionBuilder::arguments(const vl::Ptr<WfExpression>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				NewClassExpressionBuilder& NewClassExpressionBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
NewCoroutineExpressionBuilder
***********************************************************************/

				NewCoroutineExpressionBuilder& NewCoroutineExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				NewCoroutineExpressionBuilder& NewCoroutineExpressionBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
NewInterfaceExpressionBuilder
***********************************************************************/

				NewInterfaceExpressionBuilder& NewInterfaceExpressionBuilder::declarations(const vl::Ptr<WfDeclaration>& value)
				{
					node->declarations.Add(value);
					return *this;
				}

				NewInterfaceExpressionBuilder& NewInterfaceExpressionBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
NullableTypeBuilder
***********************************************************************/

				NullableTypeBuilder& NullableTypeBuilder::element(const vl::Ptr<WfType>& value)
				{
					node->element = value;
					return *this;
				}

/***********************************************************************
ObservableListTypeBuilder
***********************************************************************/

				ObservableListTypeBuilder& ObservableListTypeBuilder::element(const vl::Ptr<WfType>& value)
				{
					node->element = value;
					return *this;
				}

/***********************************************************************
ObserveExpressionBuilder
***********************************************************************/

				ObserveExpressionBuilder& ObserveExpressionBuilder::events(const vl::Ptr<WfExpression>& value)
				{
					node->events.Add(value);
					return *this;
				}

				ObserveExpressionBuilder& ObserveExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				ObserveExpressionBuilder& ObserveExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				ObserveExpressionBuilder& ObserveExpressionBuilder::observeType(WfObserveType value)
				{
					node->observeType = value;
					return *this;
				}

				ObserveExpressionBuilder& ObserveExpressionBuilder::parent(const vl::Ptr<WfExpression>& value)
				{
					node->parent = value;
					return *this;
				}

/***********************************************************************
OrderedLambdaExpressionBuilder
***********************************************************************/

				OrderedLambdaExpressionBuilder& OrderedLambdaExpressionBuilder::body(const vl::Ptr<WfExpression>& value)
				{
					node->body = value;
					return *this;
				}

/***********************************************************************
OrderedNameExpressionBuilder
***********************************************************************/

				OrderedNameExpressionBuilder& OrderedNameExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
PredefinedTypeBuilder
***********************************************************************/

				PredefinedTypeBuilder& PredefinedTypeBuilder::name(WfPredefinedTypeName value)
				{
					node->name = value;
					return *this;
				}

/***********************************************************************
PropertyDeclarationBuilder
***********************************************************************/

				PropertyDeclarationBuilder& PropertyDeclarationBuilder::getter(const vl::WString& value)
				{
					node->getter.value = value;
					return *this;
				}

				PropertyDeclarationBuilder& PropertyDeclarationBuilder::setter(const vl::WString& value)
				{
					node->setter.value = value;
					return *this;
				}

				PropertyDeclarationBuilder& PropertyDeclarationBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

				PropertyDeclarationBuilder& PropertyDeclarationBuilder::valueChangedEvent(const vl::WString& value)
				{
					node->valueChangedEvent.value = value;
					return *this;
				}

/***********************************************************************
RaiseExceptionStatementBuilder
***********************************************************************/

				RaiseExceptionStatementBuilder& RaiseExceptionStatementBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

/***********************************************************************
RangeExpressionBuilder
***********************************************************************/

				RangeExpressionBuilder& RangeExpressionBuilder::begin(const vl::Ptr<WfExpression>& value)
				{
					node->begin = value;
					return *this;
				}

				RangeExpressionBuilder& RangeExpressionBuilder::beginBoundary(WfRangeBoundary value)
				{
					node->beginBoundary = value;
					return *this;
				}

				RangeExpressionBuilder& RangeExpressionBuilder::end(const vl::Ptr<WfExpression>& value)
				{
					node->end = value;
					return *this;
				}

				RangeExpressionBuilder& RangeExpressionBuilder::endBoundary(WfRangeBoundary value)
				{
					node->endBoundary = value;
					return *this;
				}

/***********************************************************************
RawPointerTypeBuilder
***********************************************************************/

				RawPointerTypeBuilder& RawPointerTypeBuilder::element(const vl::Ptr<WfType>& value)
				{
					node->element = value;
					return *this;
				}

/***********************************************************************
ReferenceExpressionBuilder
***********************************************************************/

				ReferenceExpressionBuilder& ReferenceExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
ReferenceTypeBuilder
***********************************************************************/

				ReferenceTypeBuilder& ReferenceTypeBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
ReturnStatementBuilder
***********************************************************************/

				ReturnStatementBuilder& ReturnStatementBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

/***********************************************************************
SetTestingExpressionBuilder
***********************************************************************/

				SetTestingExpressionBuilder& SetTestingExpressionBuilder::collection(const vl::Ptr<WfExpression>& value)
				{
					node->collection = value;
					return *this;
				}

				SetTestingExpressionBuilder& SetTestingExpressionBuilder::element(const vl::Ptr<WfExpression>& value)
				{
					node->element = value;
					return *this;
				}

				SetTestingExpressionBuilder& SetTestingExpressionBuilder::test(WfSetTesting value)
				{
					node->test = value;
					return *this;
				}

/***********************************************************************
SharedPointerTypeBuilder
***********************************************************************/

				SharedPointerTypeBuilder& SharedPointerTypeBuilder::element(const vl::Ptr<WfType>& value)
				{
					node->element = value;
					return *this;
				}

/***********************************************************************
StateDeclarationBuilder
***********************************************************************/

				StateDeclarationBuilder& StateDeclarationBuilder::arguments(const vl::Ptr<WfFunctionArgument>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				StateDeclarationBuilder& StateDeclarationBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				StateDeclarationBuilder& StateDeclarationBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
StateInputBuilder
***********************************************************************/

				StateInputBuilder& StateInputBuilder::arguments(const vl::Ptr<WfFunctionArgument>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				StateInputBuilder& StateInputBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
StateInvokeStatementBuilder
***********************************************************************/

				StateInvokeStatementBuilder& StateInvokeStatementBuilder::arguments(const vl::Ptr<WfExpression>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				StateInvokeStatementBuilder& StateInvokeStatementBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				StateInvokeStatementBuilder& StateInvokeStatementBuilder::type(WfStateInvokeType value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
StateMachineDeclarationBuilder
***********************************************************************/

				StateMachineDeclarationBuilder& StateMachineDeclarationBuilder::inputs(const vl::Ptr<WfStateInput>& value)
				{
					node->inputs.Add(value);
					return *this;
				}

				StateMachineDeclarationBuilder& StateMachineDeclarationBuilder::states(const vl::Ptr<WfStateDeclaration>& value)
				{
					node->states.Add(value);
					return *this;
				}

/***********************************************************************
StateSwitchArgumentBuilder
***********************************************************************/

				StateSwitchArgumentBuilder& StateSwitchArgumentBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
StateSwitchCaseBuilder
***********************************************************************/

				StateSwitchCaseBuilder& StateSwitchCaseBuilder::arguments(const vl::Ptr<WfStateSwitchArgument>& value)
				{
					node->arguments.Add(value);
					return *this;
				}

				StateSwitchCaseBuilder& StateSwitchCaseBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				StateSwitchCaseBuilder& StateSwitchCaseBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
StateSwitchStatementBuilder
***********************************************************************/

				StateSwitchStatementBuilder& StateSwitchStatementBuilder::caseBranches(const vl::Ptr<WfStateSwitchCase>& value)
				{
					node->caseBranches.Add(value);
					return *this;
				}

				StateSwitchStatementBuilder& StateSwitchStatementBuilder::type(WfStateSwitchType value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
StringExpressionBuilder
***********************************************************************/

				StringExpressionBuilder& StringExpressionBuilder::value(const vl::WString& value)
				{
					node->value.value = value;
					return *this;
				}

/***********************************************************************
StructDeclarationBuilder
***********************************************************************/

				StructDeclarationBuilder& StructDeclarationBuilder::members(const vl::Ptr<WfStructMember>& value)
				{
					node->members.Add(value);
					return *this;
				}

/***********************************************************************
StructMemberBuilder
***********************************************************************/

				StructMemberBuilder& StructMemberBuilder::attributes(const vl::Ptr<WfAttribute>& value)
				{
					node->attributes.Add(value);
					return *this;
				}

				StructMemberBuilder& StructMemberBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				StructMemberBuilder& StructMemberBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
SwitchCaseBuilder
***********************************************************************/

				SwitchCaseBuilder& SwitchCaseBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				SwitchCaseBuilder& SwitchCaseBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}

/***********************************************************************
SwitchStatementBuilder
***********************************************************************/

				SwitchStatementBuilder& SwitchStatementBuilder::caseBranches(const vl::Ptr<WfSwitchCase>& value)
				{
					node->caseBranches.Add(value);
					return *this;
				}

				SwitchStatementBuilder& SwitchStatementBuilder::defaultBranch(const vl::Ptr<WfStatement>& value)
				{
					node->defaultBranch = value;
					return *this;
				}

				SwitchStatementBuilder& SwitchStatementBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

/***********************************************************************
TopQualifiedExpressionBuilder
***********************************************************************/

				TopQualifiedExpressionBuilder& TopQualifiedExpressionBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
TopQualifiedTypeBuilder
***********************************************************************/

				TopQualifiedTypeBuilder& TopQualifiedTypeBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

/***********************************************************************
TryStatementBuilder
***********************************************************************/

				TryStatementBuilder& TryStatementBuilder::catchStatement(const vl::Ptr<WfStatement>& value)
				{
					node->catchStatement = value;
					return *this;
				}

				TryStatementBuilder& TryStatementBuilder::finallyStatement(const vl::Ptr<WfStatement>& value)
				{
					node->finallyStatement = value;
					return *this;
				}

				TryStatementBuilder& TryStatementBuilder::name(const vl::WString& value)
				{
					node->name.value = value;
					return *this;
				}

				TryStatementBuilder& TryStatementBuilder::protectedStatement(const vl::Ptr<WfStatement>& value)
				{
					node->protectedStatement = value;
					return *this;
				}

/***********************************************************************
TypeCastingExpressionBuilder
***********************************************************************/

				TypeCastingExpressionBuilder& TypeCastingExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				TypeCastingExpressionBuilder& TypeCastingExpressionBuilder::strategy(WfTypeCastingStrategy value)
				{
					node->strategy = value;
					return *this;
				}

				TypeCastingExpressionBuilder& TypeCastingExpressionBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
TypeOfExpressionExpressionBuilder
***********************************************************************/

				TypeOfExpressionExpressionBuilder& TypeOfExpressionExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

/***********************************************************************
TypeOfTypeExpressionBuilder
***********************************************************************/

				TypeOfTypeExpressionBuilder& TypeOfTypeExpressionBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
TypeTestingExpressionBuilder
***********************************************************************/

				TypeTestingExpressionBuilder& TypeTestingExpressionBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				TypeTestingExpressionBuilder& TypeTestingExpressionBuilder::test(WfTypeTesting value)
				{
					node->test = value;
					return *this;
				}

				TypeTestingExpressionBuilder& TypeTestingExpressionBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
UnaryExpressionBuilder
***********************************************************************/

				UnaryExpressionBuilder& UnaryExpressionBuilder::op(WfUnaryOperator value)
				{
					node->op = value;
					return *this;
				}

				UnaryExpressionBuilder& UnaryExpressionBuilder::operand(const vl::Ptr<WfExpression>& value)
				{
					node->operand = value;
					return *this;
				}

/***********************************************************************
VariableDeclarationBuilder
***********************************************************************/

				VariableDeclarationBuilder& VariableDeclarationBuilder::expression(const vl::Ptr<WfExpression>& value)
				{
					node->expression = value;
					return *this;
				}

				VariableDeclarationBuilder& VariableDeclarationBuilder::type(const vl::Ptr<WfType>& value)
				{
					node->type = value;
					return *this;
				}

/***********************************************************************
VariableStatementBuilder
***********************************************************************/

				VariableStatementBuilder& VariableStatementBuilder::variable(const vl::Ptr<WfVariableDeclaration>& value)
				{
					node->variable = value;
					return *this;
				}

/***********************************************************************
VirtualCfeDeclarationBuilder
***********************************************************************/

				VirtualCfeDeclarationBuilder& VirtualCfeDeclarationBuilder::expandedDeclarations(const vl::Ptr<WfDeclaration>& value)
				{
					node->expandedDeclarations.Add(value);
					return *this;
				}

/***********************************************************************
VirtualCfeExpressionBuilder
***********************************************************************/

				VirtualCfeExpressionBuilder& VirtualCfeExpressionBuilder::expandedExpression(const vl::Ptr<WfExpression>& value)
				{
					node->expandedExpression = value;
					return *this;
				}

/***********************************************************************
VirtualCseDeclarationBuilder
***********************************************************************/

				VirtualCseDeclarationBuilder& VirtualCseDeclarationBuilder::expandedDeclarations(const vl::Ptr<WfDeclaration>& value)
				{
					node->expandedDeclarations.Add(value);
					return *this;
				}

/***********************************************************************
VirtualCseExpressionBuilder
***********************************************************************/

				VirtualCseExpressionBuilder& VirtualCseExpressionBuilder::expandedExpression(const vl::Ptr<WfExpression>& value)
				{
					node->expandedExpression = value;
					return *this;
				}

/***********************************************************************
VirtualCseStatementBuilder
***********************************************************************/

				VirtualCseStatementBuilder& VirtualCseStatementBuilder::expandedStatement(const vl::Ptr<WfStatement>& value)
				{
					node->expandedStatement = value;
					return *this;
				}

/***********************************************************************
WhileStatementBuilder
***********************************************************************/

				WhileStatementBuilder& WhileStatementBuilder::condition(const vl::Ptr<WfExpression>& value)
				{
					node->condition = value;
					return *this;
				}

				WhileStatementBuilder& WhileStatementBuilder::statement(const vl::Ptr<WfStatement>& value)
				{
					node->statement = value;
					return *this;
				}
			}
		}
	}
}
