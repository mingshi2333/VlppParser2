/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Copy.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace copy_visitor
			{
				void AstVisitor::CopyFields(WorkflowAttachEventExpression* from, WorkflowAttachEventExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->event = CopyNode(from->event.Obj());
					to->function = CopyNode(from->function.Obj());
				}

				void AstVisitor::CopyFields(WorkflowAttribute* from, WorkflowAttribute* to)
				{
					to->category = from->category;
					to->name = from->name;
					to->value = CopyNode(from->value.Obj());
				}

				void AstVisitor::CopyFields(WorkflowAutoPropertyDeclaration* from, WorkflowAutoPropertyDeclaration* to)
				{
					CopyFields(static_cast<WorkflowVirtualCfeDeclaration*>(from), static_cast<WorkflowVirtualCfeDeclaration*>(to));
					to->configConst = from->configConst;
					to->configObserve = from->configObserve;
					to->expression = CopyNode(from->expression.Obj());
					to->functionKind = from->functionKind;
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowBaseConstructorCall* from, WorkflowBaseConstructorCall* to)
				{
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowBinaryExpression* from, WorkflowBinaryExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->first = CopyNode(from->first.Obj());
					to->op = from->op;
					to->second = CopyNode(from->second.Obj());
				}

				void AstVisitor::CopyFields(WorkflowBindExpression* from, WorkflowBindExpression* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseExpression*>(from), static_cast<WorkflowVirtualCseExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowBlockStatement* from, WorkflowBlockStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->endLabel = from->endLabel;
					for (auto&& listItem : from->statements)
					{
						to->statements.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowBreakStatement* from, WorkflowBreakStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
				}

				void AstVisitor::CopyFields(WorkflowCallExpression* from, WorkflowCallExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->function = CopyNode(from->function.Obj());
				}

				void AstVisitor::CopyFields(WorkflowCastResultInterfaceDeclaration* from, WorkflowCastResultInterfaceDeclaration* to)
				{
					CopyFields(static_cast<WorkflowVirtualCfeDeclaration*>(from), static_cast<WorkflowVirtualCfeDeclaration*>(to));
					to->baseType = CopyNode(from->baseType.Obj());
					to->elementType = CopyNode(from->elementType.Obj());
				}

				void AstVisitor::CopyFields(WorkflowChildExpression* from, WorkflowChildExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->name = from->name;
					to->parent = CopyNode(from->parent.Obj());
				}

				void AstVisitor::CopyFields(WorkflowChildType* from, WorkflowChildType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->name = from->name;
					to->parent = CopyNode(from->parent.Obj());
				}

				void AstVisitor::CopyFields(WorkflowClassDeclaration* from, WorkflowClassDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->baseTypes)
					{
						to->baseTypes.Add(CopyNode(listItem.Obj()));
					}
					to->constructorType = from->constructorType;
					for (auto&& listItem : from->declarations)
					{
						to->declarations.Add(CopyNode(listItem.Obj()));
					}
					to->kind = from->kind;
				}

				void AstVisitor::CopyFields(WorkflowCoOperatorExpression* from, WorkflowCoOperatorExpression* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseExpression*>(from), static_cast<WorkflowVirtualCseExpression*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowCoOperatorStatement* from, WorkflowCoOperatorStatement* to)
				{
					CopyFields(static_cast<WorkflowCoroutineStatement*>(from), static_cast<WorkflowCoroutineStatement*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->opName = from->opName;
					to->varName = from->varName;
				}

				void AstVisitor::CopyFields(WorkflowCoPauseStatement* from, WorkflowCoPauseStatement* to)
				{
					CopyFields(static_cast<WorkflowCoroutineStatement*>(from), static_cast<WorkflowCoroutineStatement*>(to));
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowCoProviderStatement* from, WorkflowCoProviderStatement* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseStatement*>(from), static_cast<WorkflowVirtualCseStatement*>(to));
					to->name = from->name;
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowConstructorArgument* from, WorkflowConstructorArgument* to)
				{
					to->key = CopyNode(from->key.Obj());
					to->value = CopyNode(from->value.Obj());
				}

				void AstVisitor::CopyFields(WorkflowConstructorDeclaration* from, WorkflowConstructorDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					for (auto&& listItem : from->baseConstructorCalls)
					{
						to->baseConstructorCalls.Add(CopyNode(listItem.Obj()));
					}
					to->constructorType = from->constructorType;
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowConstructorExpression* from, WorkflowConstructorExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowContinueStatement* from, WorkflowContinueStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
				}

				void AstVisitor::CopyFields(WorkflowCoroutineStatement* from, WorkflowCoroutineStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
				}

				void AstVisitor::CopyFields(WorkflowDeclaration* from, WorkflowDeclaration* to)
				{
					for (auto&& listItem : from->attributes)
					{
						to->attributes.Add(CopyNode(listItem.Obj()));
					}
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowDeleteStatement* from, WorkflowDeleteStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->expression = CopyNode(from->expression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowDestructorDeclaration* from, WorkflowDestructorDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowDetachEventExpression* from, WorkflowDetachEventExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->event = CopyNode(from->event.Obj());
					to->handler = CopyNode(from->handler.Obj());
				}

				void AstVisitor::CopyFields(WorkflowEnumDeclaration* from, WorkflowEnumDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->items)
					{
						to->items.Add(CopyNode(listItem.Obj()));
					}
					to->kind = from->kind;
				}

				void AstVisitor::CopyFields(WorkflowEnumItem* from, WorkflowEnumItem* to)
				{
					for (auto&& listItem : from->attributes)
					{
						to->attributes.Add(CopyNode(listItem.Obj()));
					}
					for (auto&& listItem : from->intersections)
					{
						to->intersections.Add(CopyNode(listItem.Obj()));
					}
					to->kind = from->kind;
					to->name = from->name;
					to->number = from->number;
				}

				void AstVisitor::CopyFields(WorkflowEnumItemIntersection* from, WorkflowEnumItemIntersection* to)
				{
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowEnumerableType* from, WorkflowEnumerableType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->element = CopyNode(from->element.Obj());
				}

				void AstVisitor::CopyFields(WorkflowEventDeclaration* from, WorkflowEventDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowExpectedTypeCastExpression* from, WorkflowExpectedTypeCastExpression* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseExpression*>(from), static_cast<WorkflowVirtualCseExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
					to->strategy = from->strategy;
				}

				void AstVisitor::CopyFields(WorkflowExpression* from, WorkflowExpression* to)
				{
				}

				void AstVisitor::CopyFields(WorkflowExpressionStatement* from, WorkflowExpressionStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->expression = CopyNode(from->expression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowFloatingExpression* from, WorkflowFloatingExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->value = from->value;
				}

				void AstVisitor::CopyFields(WorkflowForEachStatement* from, WorkflowForEachStatement* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseStatement*>(from), static_cast<WorkflowVirtualCseStatement*>(to));
					to->collection = CopyNode(from->collection.Obj());
					to->direction = from->direction;
					to->name = from->name;
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowFormatExpression* from, WorkflowFormatExpression* to)
				{
					CopyFields(static_cast<WorkflowVirtualCfeExpression*>(from), static_cast<WorkflowVirtualCfeExpression*>(to));
					to->value = from->value;
				}

				void AstVisitor::CopyFields(WorkflowFunctionArgument* from, WorkflowFunctionArgument* to)
				{
					for (auto&& listItem : from->attributes)
					{
						to->attributes.Add(CopyNode(listItem.Obj()));
					}
					to->name = from->name;
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowFunctionDeclaration* from, WorkflowFunctionDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					to->anonymity = from->anonymity;
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->functionKind = from->functionKind;
					to->returnType = CopyNode(from->returnType.Obj());
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowFunctionExpression* from, WorkflowFunctionExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->function = CopyNode(from->function.Obj());
				}

				void AstVisitor::CopyFields(WorkflowFunctionType* from, WorkflowFunctionType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->result = CopyNode(from->result.Obj());
				}

				void AstVisitor::CopyFields(WorkflowGotoStatement* from, WorkflowGotoStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->label = from->label;
				}

				void AstVisitor::CopyFields(WorkflowIfExpression* from, WorkflowIfExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->condition = CopyNode(from->condition.Obj());
					to->falseBranch = CopyNode(from->falseBranch.Obj());
					to->trueBranch = CopyNode(from->trueBranch.Obj());
				}

				void AstVisitor::CopyFields(WorkflowIfStatement* from, WorkflowIfStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->expression = CopyNode(from->expression.Obj());
					to->falseBranch = CopyNode(from->falseBranch.Obj());
					to->name = from->name;
					to->trueBranch = CopyNode(from->trueBranch.Obj());
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowInferExpression* from, WorkflowInferExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowIntegerExpression* from, WorkflowIntegerExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->value = from->value;
				}

				void AstVisitor::CopyFields(WorkflowLetExpression* from, WorkflowLetExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
					for (auto&& listItem : from->variables)
					{
						to->variables.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowLetVariable* from, WorkflowLetVariable* to)
				{
					to->name = from->name;
					to->value = CopyNode(from->value.Obj());
				}

				void AstVisitor::CopyFields(WorkflowLiteralExpression* from, WorkflowLiteralExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->value = from->value;
				}

				void AstVisitor::CopyFields(WorkflowMapType* from, WorkflowMapType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->key = CopyNode(from->key.Obj());
					to->value = CopyNode(from->value.Obj());
					to->writability = from->writability;
				}

				void AstVisitor::CopyFields(WorkflowMemberExpression* from, WorkflowMemberExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->name = from->name;
					to->parent = CopyNode(from->parent.Obj());
				}

				void AstVisitor::CopyFields(WorkflowMixinCastExpression* from, WorkflowMixinCastExpression* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseExpression*>(from), static_cast<WorkflowVirtualCseExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowModule* from, WorkflowModule* to)
				{
					for (auto&& listItem : from->declarations)
					{
						to->declarations.Add(CopyNode(listItem.Obj()));
					}
					to->moduleType = from->moduleType;
					to->name = from->name;
					for (auto&& listItem : from->paths)
					{
						to->paths.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowModuleUsingFragment* from, WorkflowModuleUsingFragment* to)
				{
				}

				void AstVisitor::CopyFields(WorkflowModuleUsingItem* from, WorkflowModuleUsingItem* to)
				{
					for (auto&& listItem : from->fragments)
					{
						to->fragments.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowModuleUsingNameFragment* from, WorkflowModuleUsingNameFragment* to)
				{
					CopyFields(static_cast<WorkflowModuleUsingFragment*>(from), static_cast<WorkflowModuleUsingFragment*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowModuleUsingPath* from, WorkflowModuleUsingPath* to)
				{
					for (auto&& listItem : from->items)
					{
						to->items.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowModuleUsingWildCardFragment* from, WorkflowModuleUsingWildCardFragment* to)
				{
					CopyFields(static_cast<WorkflowModuleUsingFragment*>(from), static_cast<WorkflowModuleUsingFragment*>(to));
				}

				void AstVisitor::CopyFields(WorkflowNamespaceDeclaration* from, WorkflowNamespaceDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->declarations)
					{
						to->declarations.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowNewClassExpression* from, WorkflowNewClassExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowNewCoroutineExpression* from, WorkflowNewCoroutineExpression* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseExpression*>(from), static_cast<WorkflowVirtualCseExpression*>(to));
					to->name = from->name;
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowNewInterfaceExpression* from, WorkflowNewInterfaceExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					for (auto&& listItem : from->declarations)
					{
						to->declarations.Add(CopyNode(listItem.Obj()));
					}
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowNullableType* from, WorkflowNullableType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->element = CopyNode(from->element.Obj());
				}

				void AstVisitor::CopyFields(WorkflowObservableListType* from, WorkflowObservableListType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->element = CopyNode(from->element.Obj());
				}

				void AstVisitor::CopyFields(WorkflowObserveExpression* from, WorkflowObserveExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					for (auto&& listItem : from->events)
					{
						to->events.Add(CopyNode(listItem.Obj()));
					}
					to->expression = CopyNode(from->expression.Obj());
					to->name = from->name;
					to->observeType = from->observeType;
					to->parent = CopyNode(from->parent.Obj());
				}

				void AstVisitor::CopyFields(WorkflowOrderedLambdaExpression* from, WorkflowOrderedLambdaExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->body = CopyNode(from->body.Obj());
				}

				void AstVisitor::CopyFields(WorkflowOrderedNameExpression* from, WorkflowOrderedNameExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowPredefinedType* from, WorkflowPredefinedType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowPropertyDeclaration* from, WorkflowPropertyDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					to->getter = from->getter;
					to->setter = from->setter;
					to->type = CopyNode(from->type.Obj());
					to->valueChangedEvent = from->valueChangedEvent;
				}

				void AstVisitor::CopyFields(WorkflowRaiseExceptionStatement* from, WorkflowRaiseExceptionStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->expression = CopyNode(from->expression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowRangeExpression* from, WorkflowRangeExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->begin = CopyNode(from->begin.Obj());
					to->beginBoundary = from->beginBoundary;
					to->end = CopyNode(from->end.Obj());
					to->endBoundary = from->endBoundary;
				}

				void AstVisitor::CopyFields(WorkflowRawPointerType* from, WorkflowRawPointerType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->element = CopyNode(from->element.Obj());
				}

				void AstVisitor::CopyFields(WorkflowReferenceExpression* from, WorkflowReferenceExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowReferenceType* from, WorkflowReferenceType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowReturnStatement* from, WorkflowReturnStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->expression = CopyNode(from->expression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowSetTestingExpression* from, WorkflowSetTestingExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->collection = CopyNode(from->collection.Obj());
					to->element = CopyNode(from->element.Obj());
					to->test = from->test;
				}

				void AstVisitor::CopyFields(WorkflowSharedPointerType* from, WorkflowSharedPointerType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->element = CopyNode(from->element.Obj());
				}

				void AstVisitor::CopyFields(WorkflowStateDeclaration* from, WorkflowStateDeclaration* to)
				{
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->name = from->name;
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowStateInput* from, WorkflowStateInput* to)
				{
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowStateInvokeStatement* from, WorkflowStateInvokeStatement* to)
				{
					CopyFields(static_cast<WorkflowStateMachineStatement*>(from), static_cast<WorkflowStateMachineStatement*>(to));
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->name = from->name;
					to->type = from->type;
				}

				void AstVisitor::CopyFields(WorkflowStateMachineDeclaration* from, WorkflowStateMachineDeclaration* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseDeclaration*>(from), static_cast<WorkflowVirtualCseDeclaration*>(to));
					for (auto&& listItem : from->inputs)
					{
						to->inputs.Add(CopyNode(listItem.Obj()));
					}
					for (auto&& listItem : from->states)
					{
						to->states.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowStateMachineStatement* from, WorkflowStateMachineStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
				}

				void AstVisitor::CopyFields(WorkflowStateSwitchArgument* from, WorkflowStateSwitchArgument* to)
				{
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowStateSwitchCase* from, WorkflowStateSwitchCase* to)
				{
					for (auto&& listItem : from->arguments)
					{
						to->arguments.Add(CopyNode(listItem.Obj()));
					}
					to->name = from->name;
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowStateSwitchStatement* from, WorkflowStateSwitchStatement* to)
				{
					CopyFields(static_cast<WorkflowStateMachineStatement*>(from), static_cast<WorkflowStateMachineStatement*>(to));
					for (auto&& listItem : from->caseBranches)
					{
						to->caseBranches.Add(CopyNode(listItem.Obj()));
					}
					to->type = from->type;
				}

				void AstVisitor::CopyFields(WorkflowStatement* from, WorkflowStatement* to)
				{
				}

				void AstVisitor::CopyFields(WorkflowStringExpression* from, WorkflowStringExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->value = from->value;
				}

				void AstVisitor::CopyFields(WorkflowStructDeclaration* from, WorkflowStructDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->members)
					{
						to->members.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowStructMember* from, WorkflowStructMember* to)
				{
					for (auto&& listItem : from->attributes)
					{
						to->attributes.Add(CopyNode(listItem.Obj()));
					}
					to->name = from->name;
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowSwitchCase* from, WorkflowSwitchCase* to)
				{
					to->expression = CopyNode(from->expression.Obj());
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowSwitchStatement* from, WorkflowSwitchStatement* to)
				{
					CopyFields(static_cast<WorkflowVirtualCseStatement*>(from), static_cast<WorkflowVirtualCseStatement*>(to));
					for (auto&& listItem : from->caseBranches)
					{
						to->caseBranches.Add(CopyNode(listItem.Obj()));
					}
					to->defaultBranch = CopyNode(from->defaultBranch.Obj());
					to->expression = CopyNode(from->expression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowThisExpression* from, WorkflowThisExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
				}

				void AstVisitor::CopyFields(WorkflowTopQualifiedExpression* from, WorkflowTopQualifiedExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowTopQualifiedType* from, WorkflowTopQualifiedType* to)
				{
					CopyFields(static_cast<WorkflowType*>(from), static_cast<WorkflowType*>(to));
					to->name = from->name;
				}

				void AstVisitor::CopyFields(WorkflowTryStatement* from, WorkflowTryStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->catchStatement = CopyNode(from->catchStatement.Obj());
					to->finallyStatement = CopyNode(from->finallyStatement.Obj());
					to->name = from->name;
					to->protectedStatement = CopyNode(from->protectedStatement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowType* from, WorkflowType* to)
				{
				}

				void AstVisitor::CopyFields(WorkflowTypeCastingExpression* from, WorkflowTypeCastingExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
					to->strategy = from->strategy;
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowTypeOfExpressionExpression* from, WorkflowTypeOfExpressionExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowTypeOfTypeExpression* from, WorkflowTypeOfTypeExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowTypeTestingExpression* from, WorkflowTypeTestingExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->expression = CopyNode(from->expression.Obj());
					to->test = from->test;
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowUnaryExpression* from, WorkflowUnaryExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->op = from->op;
					to->operand = CopyNode(from->operand.Obj());
				}

				void AstVisitor::CopyFields(WorkflowVariableDeclaration* from, WorkflowVariableDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					to->expression = CopyNode(from->expression.Obj());
					to->type = CopyNode(from->type.Obj());
				}

				void AstVisitor::CopyFields(WorkflowVariableStatement* from, WorkflowVariableStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->variable = CopyNode(from->variable.Obj());
				}

				void AstVisitor::CopyFields(WorkflowVirtualCfeDeclaration* from, WorkflowVirtualCfeDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->expandedDeclarations)
					{
						to->expandedDeclarations.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowVirtualCfeExpression* from, WorkflowVirtualCfeExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->expandedExpression = CopyNode(from->expandedExpression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowVirtualCseDeclaration* from, WorkflowVirtualCseDeclaration* to)
				{
					CopyFields(static_cast<WorkflowDeclaration*>(from), static_cast<WorkflowDeclaration*>(to));
					for (auto&& listItem : from->expandedDeclarations)
					{
						to->expandedDeclarations.Add(CopyNode(listItem.Obj()));
					}
				}

				void AstVisitor::CopyFields(WorkflowVirtualCseExpression* from, WorkflowVirtualCseExpression* to)
				{
					CopyFields(static_cast<WorkflowExpression*>(from), static_cast<WorkflowExpression*>(to));
					to->expandedExpression = CopyNode(from->expandedExpression.Obj());
				}

				void AstVisitor::CopyFields(WorkflowVirtualCseStatement* from, WorkflowVirtualCseStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->expandedStatement = CopyNode(from->expandedStatement.Obj());
				}

				void AstVisitor::CopyFields(WorkflowWhileStatement* from, WorkflowWhileStatement* to)
				{
					CopyFields(static_cast<WorkflowStatement*>(from), static_cast<WorkflowStatement*>(to));
					to->condition = CopyNode(from->condition.Obj());
					to->statement = CopyNode(from->statement.Obj());
				}

				void AstVisitor::Visit(WorkflowAttribute* node)
				{
					auto newNode = vl::MakePtr<WorkflowAttribute>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowFunctionArgument* node)
				{
					auto newNode = vl::MakePtr<WorkflowFunctionArgument>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowBaseConstructorCall* node)
				{
					auto newNode = vl::MakePtr<WorkflowBaseConstructorCall>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowEnumItemIntersection* node)
				{
					auto newNode = vl::MakePtr<WorkflowEnumItemIntersection>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowEnumItem* node)
				{
					auto newNode = vl::MakePtr<WorkflowEnumItem>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStructMember* node)
				{
					auto newNode = vl::MakePtr<WorkflowStructMember>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStateInput* node)
				{
					auto newNode = vl::MakePtr<WorkflowStateInput>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStateDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowStateDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowSwitchCase* node)
				{
					auto newNode = vl::MakePtr<WorkflowSwitchCase>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStateSwitchArgument* node)
				{
					auto newNode = vl::MakePtr<WorkflowStateSwitchArgument>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStateSwitchCase* node)
				{
					auto newNode = vl::MakePtr<WorkflowStateSwitchCase>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowLetVariable* node)
				{
					auto newNode = vl::MakePtr<WorkflowLetVariable>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowConstructorArgument* node)
				{
					auto newNode = vl::MakePtr<WorkflowConstructorArgument>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowModuleUsingItem* node)
				{
					auto newNode = vl::MakePtr<WorkflowModuleUsingItem>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowModuleUsingPath* node)
				{
					auto newNode = vl::MakePtr<WorkflowModuleUsingPath>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowModule* node)
				{
					auto newNode = vl::MakePtr<WorkflowModule>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowPredefinedType* node)
				{
					auto newNode = vl::MakePtr<WorkflowPredefinedType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowTopQualifiedType* node)
				{
					auto newNode = vl::MakePtr<WorkflowTopQualifiedType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowReferenceType* node)
				{
					auto newNode = vl::MakePtr<WorkflowReferenceType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowRawPointerType* node)
				{
					auto newNode = vl::MakePtr<WorkflowRawPointerType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowSharedPointerType* node)
				{
					auto newNode = vl::MakePtr<WorkflowSharedPointerType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowNullableType* node)
				{
					auto newNode = vl::MakePtr<WorkflowNullableType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowEnumerableType* node)
				{
					auto newNode = vl::MakePtr<WorkflowEnumerableType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowMapType* node)
				{
					auto newNode = vl::MakePtr<WorkflowMapType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowObservableListType* node)
				{
					auto newNode = vl::MakePtr<WorkflowObservableListType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowFunctionType* node)
				{
					auto newNode = vl::MakePtr<WorkflowFunctionType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowChildType* node)
				{
					auto newNode = vl::MakePtr<WorkflowChildType>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowThisExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowThisExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowTopQualifiedExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowTopQualifiedExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowReferenceExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowReferenceExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowOrderedNameExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowOrderedNameExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowOrderedLambdaExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowOrderedLambdaExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowMemberExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowMemberExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowChildExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowChildExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowLiteralExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowLiteralExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowFloatingExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowFloatingExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowIntegerExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowIntegerExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStringExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowStringExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowUnaryExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowUnaryExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowBinaryExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowBinaryExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowLetExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowLetExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowIfExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowIfExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowRangeExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowRangeExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowSetTestingExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowSetTestingExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowConstructorExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowConstructorExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowInferExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowInferExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowTypeCastingExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowTypeCastingExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowTypeTestingExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowTypeTestingExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowTypeOfTypeExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowTypeOfTypeExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowTypeOfExpressionExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowTypeOfExpressionExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowAttachEventExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowAttachEventExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowDetachEventExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowDetachEventExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowObserveExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowObserveExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowCallExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowCallExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowFunctionExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowFunctionExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowNewClassExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowNewClassExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowNewInterfaceExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowNewInterfaceExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowVirtualCfeExpression* node)
				{
					node->Accept(static_cast<WorkflowVirtualCfeExpression::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowVirtualCseExpression* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseExpression::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowBreakStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowBreakStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowContinueStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowContinueStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowReturnStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowReturnStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowDeleteStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowDeleteStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowRaiseExceptionStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowRaiseExceptionStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowIfStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowIfStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowWhileStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowWhileStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowTryStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowTryStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowBlockStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowBlockStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowGotoStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowGotoStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowVariableStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowVariableStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowExpressionStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowExpressionStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowVirtualCseStatement* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowCoroutineStatement* node)
				{
					node->Accept(static_cast<WorkflowCoroutineStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowStateMachineStatement* node)
				{
					node->Accept(static_cast<WorkflowStateMachineStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowNamespaceDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowNamespaceDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowFunctionDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowFunctionDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowVariableDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowVariableDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowEventDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowEventDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowPropertyDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowPropertyDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowConstructorDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowConstructorDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowDestructorDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowDestructorDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowClassDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowClassDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowEnumDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowEnumDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStructDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowStructDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowVirtualCfeDeclaration* node)
				{
					node->Accept(static_cast<WorkflowVirtualCfeDeclaration::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowVirtualCseDeclaration* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseDeclaration::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowAutoPropertyDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowAutoPropertyDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowCastResultInterfaceDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowCastResultInterfaceDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStateMachineDeclaration* node)
				{
					auto newNode = vl::MakePtr<WorkflowStateMachineDeclaration>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowForEachStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowForEachStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowSwitchStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowSwitchStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowCoProviderStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowCoProviderStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowCoPauseStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowCoPauseStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowCoOperatorStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowCoOperatorStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStateSwitchStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowStateSwitchStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowStateInvokeStatement* node)
				{
					auto newNode = vl::MakePtr<WorkflowStateInvokeStatement>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowFormatExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowFormatExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowBindExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowBindExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowNewCoroutineExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowNewCoroutineExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowMixinCastExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowMixinCastExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowExpectedTypeCastExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowExpectedTypeCastExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowCoOperatorExpression* node)
				{
					auto newNode = vl::MakePtr<WorkflowCoOperatorExpression>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowModuleUsingNameFragment* node)
				{
					auto newNode = vl::MakePtr<WorkflowModuleUsingNameFragment>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				void AstVisitor::Visit(WorkflowModuleUsingWildCardFragment* node)
				{
					auto newNode = vl::MakePtr<WorkflowModuleUsingWildCardFragment>();
					CopyFields(node, newNode.Obj());
					this->result = newNode;
				}

				vl::Ptr<WorkflowType> AstVisitor::CopyNode(WorkflowType* node)
				{
					if (!node) return nullptr;
					node->Accept(static_cast<WorkflowType::IVisitor*>(this));
					return this->result.Cast<WorkflowType>();
				}

				vl::Ptr<WorkflowExpression> AstVisitor::CopyNode(WorkflowExpression* node)
				{
					if (!node) return nullptr;
					node->Accept(static_cast<WorkflowExpression::IVisitor*>(this));
					return this->result.Cast<WorkflowExpression>();
				}

				vl::Ptr<WorkflowStatement> AstVisitor::CopyNode(WorkflowStatement* node)
				{
					if (!node) return nullptr;
					node->Accept(static_cast<WorkflowStatement::IVisitor*>(this));
					return this->result.Cast<WorkflowStatement>();
				}

				vl::Ptr<WorkflowDeclaration> AstVisitor::CopyNode(WorkflowDeclaration* node)
				{
					if (!node) return nullptr;
					node->Accept(static_cast<WorkflowDeclaration::IVisitor*>(this));
					return this->result.Cast<WorkflowDeclaration>();
				}

				vl::Ptr<WorkflowModuleUsingFragment> AstVisitor::CopyNode(WorkflowModuleUsingFragment* node)
				{
					if (!node) return nullptr;
					node->Accept(static_cast<WorkflowModuleUsingFragment::IVisitor*>(this));
					return this->result.Cast<WorkflowModuleUsingFragment>();
				}

				vl::Ptr<WorkflowAttribute> AstVisitor::CopyNode(WorkflowAttribute* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowAttribute>();
				}

				vl::Ptr<WorkflowFunctionArgument> AstVisitor::CopyNode(WorkflowFunctionArgument* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowFunctionArgument>();
				}

				vl::Ptr<WorkflowBaseConstructorCall> AstVisitor::CopyNode(WorkflowBaseConstructorCall* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowBaseConstructorCall>();
				}

				vl::Ptr<WorkflowEnumItemIntersection> AstVisitor::CopyNode(WorkflowEnumItemIntersection* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowEnumItemIntersection>();
				}

				vl::Ptr<WorkflowEnumItem> AstVisitor::CopyNode(WorkflowEnumItem* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowEnumItem>();
				}

				vl::Ptr<WorkflowStructMember> AstVisitor::CopyNode(WorkflowStructMember* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowStructMember>();
				}

				vl::Ptr<WorkflowStateInput> AstVisitor::CopyNode(WorkflowStateInput* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowStateInput>();
				}

				vl::Ptr<WorkflowStateDeclaration> AstVisitor::CopyNode(WorkflowStateDeclaration* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowStateDeclaration>();
				}

				vl::Ptr<WorkflowSwitchCase> AstVisitor::CopyNode(WorkflowSwitchCase* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowSwitchCase>();
				}

				vl::Ptr<WorkflowStateSwitchArgument> AstVisitor::CopyNode(WorkflowStateSwitchArgument* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowStateSwitchArgument>();
				}

				vl::Ptr<WorkflowStateSwitchCase> AstVisitor::CopyNode(WorkflowStateSwitchCase* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowStateSwitchCase>();
				}

				vl::Ptr<WorkflowLetVariable> AstVisitor::CopyNode(WorkflowLetVariable* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowLetVariable>();
				}

				vl::Ptr<WorkflowConstructorArgument> AstVisitor::CopyNode(WorkflowConstructorArgument* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowConstructorArgument>();
				}

				vl::Ptr<WorkflowModuleUsingItem> AstVisitor::CopyNode(WorkflowModuleUsingItem* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowModuleUsingItem>();
				}

				vl::Ptr<WorkflowModuleUsingPath> AstVisitor::CopyNode(WorkflowModuleUsingPath* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowModuleUsingPath>();
				}

				vl::Ptr<WorkflowModule> AstVisitor::CopyNode(WorkflowModule* node)
				{
					if (!node) return nullptr;
					Visit(node);
					return this->result.Cast<WorkflowModule>();
				}

				vl::Ptr<WorkflowAttachEventExpression> AstVisitor::CopyNode(WorkflowAttachEventExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowAttachEventExpression>();
				}

				vl::Ptr<WorkflowAutoPropertyDeclaration> AstVisitor::CopyNode(WorkflowAutoPropertyDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowAutoPropertyDeclaration>();
				}

				vl::Ptr<WorkflowBinaryExpression> AstVisitor::CopyNode(WorkflowBinaryExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowBinaryExpression>();
				}

				vl::Ptr<WorkflowBindExpression> AstVisitor::CopyNode(WorkflowBindExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowBindExpression>();
				}

				vl::Ptr<WorkflowBlockStatement> AstVisitor::CopyNode(WorkflowBlockStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowBlockStatement>();
				}

				vl::Ptr<WorkflowBreakStatement> AstVisitor::CopyNode(WorkflowBreakStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowBreakStatement>();
				}

				vl::Ptr<WorkflowCallExpression> AstVisitor::CopyNode(WorkflowCallExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowCallExpression>();
				}

				vl::Ptr<WorkflowCastResultInterfaceDeclaration> AstVisitor::CopyNode(WorkflowCastResultInterfaceDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowCastResultInterfaceDeclaration>();
				}

				vl::Ptr<WorkflowChildExpression> AstVisitor::CopyNode(WorkflowChildExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowChildExpression>();
				}

				vl::Ptr<WorkflowChildType> AstVisitor::CopyNode(WorkflowChildType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowChildType>();
				}

				vl::Ptr<WorkflowClassDeclaration> AstVisitor::CopyNode(WorkflowClassDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowClassDeclaration>();
				}

				vl::Ptr<WorkflowCoOperatorExpression> AstVisitor::CopyNode(WorkflowCoOperatorExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowCoOperatorExpression>();
				}

				vl::Ptr<WorkflowCoOperatorStatement> AstVisitor::CopyNode(WorkflowCoOperatorStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowCoOperatorStatement>();
				}

				vl::Ptr<WorkflowCoPauseStatement> AstVisitor::CopyNode(WorkflowCoPauseStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowCoPauseStatement>();
				}

				vl::Ptr<WorkflowCoProviderStatement> AstVisitor::CopyNode(WorkflowCoProviderStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowCoProviderStatement>();
				}

				vl::Ptr<WorkflowConstructorDeclaration> AstVisitor::CopyNode(WorkflowConstructorDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowConstructorDeclaration>();
				}

				vl::Ptr<WorkflowConstructorExpression> AstVisitor::CopyNode(WorkflowConstructorExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowConstructorExpression>();
				}

				vl::Ptr<WorkflowContinueStatement> AstVisitor::CopyNode(WorkflowContinueStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowContinueStatement>();
				}

				vl::Ptr<WorkflowCoroutineStatement> AstVisitor::CopyNode(WorkflowCoroutineStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowCoroutineStatement>();
				}

				vl::Ptr<WorkflowDeleteStatement> AstVisitor::CopyNode(WorkflowDeleteStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowDeleteStatement>();
				}

				vl::Ptr<WorkflowDestructorDeclaration> AstVisitor::CopyNode(WorkflowDestructorDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowDestructorDeclaration>();
				}

				vl::Ptr<WorkflowDetachEventExpression> AstVisitor::CopyNode(WorkflowDetachEventExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowDetachEventExpression>();
				}

				vl::Ptr<WorkflowEnumDeclaration> AstVisitor::CopyNode(WorkflowEnumDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowEnumDeclaration>();
				}

				vl::Ptr<WorkflowEnumerableType> AstVisitor::CopyNode(WorkflowEnumerableType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowEnumerableType>();
				}

				vl::Ptr<WorkflowEventDeclaration> AstVisitor::CopyNode(WorkflowEventDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowEventDeclaration>();
				}

				vl::Ptr<WorkflowExpectedTypeCastExpression> AstVisitor::CopyNode(WorkflowExpectedTypeCastExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowExpectedTypeCastExpression>();
				}

				vl::Ptr<WorkflowExpressionStatement> AstVisitor::CopyNode(WorkflowExpressionStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowExpressionStatement>();
				}

				vl::Ptr<WorkflowFloatingExpression> AstVisitor::CopyNode(WorkflowFloatingExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowFloatingExpression>();
				}

				vl::Ptr<WorkflowForEachStatement> AstVisitor::CopyNode(WorkflowForEachStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowForEachStatement>();
				}

				vl::Ptr<WorkflowFormatExpression> AstVisitor::CopyNode(WorkflowFormatExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowFormatExpression>();
				}

				vl::Ptr<WorkflowFunctionDeclaration> AstVisitor::CopyNode(WorkflowFunctionDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowFunctionDeclaration>();
				}

				vl::Ptr<WorkflowFunctionExpression> AstVisitor::CopyNode(WorkflowFunctionExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowFunctionExpression>();
				}

				vl::Ptr<WorkflowFunctionType> AstVisitor::CopyNode(WorkflowFunctionType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowFunctionType>();
				}

				vl::Ptr<WorkflowGotoStatement> AstVisitor::CopyNode(WorkflowGotoStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowGotoStatement>();
				}

				vl::Ptr<WorkflowIfExpression> AstVisitor::CopyNode(WorkflowIfExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowIfExpression>();
				}

				vl::Ptr<WorkflowIfStatement> AstVisitor::CopyNode(WorkflowIfStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowIfStatement>();
				}

				vl::Ptr<WorkflowInferExpression> AstVisitor::CopyNode(WorkflowInferExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowInferExpression>();
				}

				vl::Ptr<WorkflowIntegerExpression> AstVisitor::CopyNode(WorkflowIntegerExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowIntegerExpression>();
				}

				vl::Ptr<WorkflowLetExpression> AstVisitor::CopyNode(WorkflowLetExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowLetExpression>();
				}

				vl::Ptr<WorkflowLiteralExpression> AstVisitor::CopyNode(WorkflowLiteralExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowLiteralExpression>();
				}

				vl::Ptr<WorkflowMapType> AstVisitor::CopyNode(WorkflowMapType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowMapType>();
				}

				vl::Ptr<WorkflowMemberExpression> AstVisitor::CopyNode(WorkflowMemberExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowMemberExpression>();
				}

				vl::Ptr<WorkflowMixinCastExpression> AstVisitor::CopyNode(WorkflowMixinCastExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowMixinCastExpression>();
				}

				vl::Ptr<WorkflowModuleUsingNameFragment> AstVisitor::CopyNode(WorkflowModuleUsingNameFragment* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowModuleUsingFragment*>(node)).Cast<WorkflowModuleUsingNameFragment>();
				}

				vl::Ptr<WorkflowModuleUsingWildCardFragment> AstVisitor::CopyNode(WorkflowModuleUsingWildCardFragment* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowModuleUsingFragment*>(node)).Cast<WorkflowModuleUsingWildCardFragment>();
				}

				vl::Ptr<WorkflowNamespaceDeclaration> AstVisitor::CopyNode(WorkflowNamespaceDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowNamespaceDeclaration>();
				}

				vl::Ptr<WorkflowNewClassExpression> AstVisitor::CopyNode(WorkflowNewClassExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowNewClassExpression>();
				}

				vl::Ptr<WorkflowNewCoroutineExpression> AstVisitor::CopyNode(WorkflowNewCoroutineExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowNewCoroutineExpression>();
				}

				vl::Ptr<WorkflowNewInterfaceExpression> AstVisitor::CopyNode(WorkflowNewInterfaceExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowNewInterfaceExpression>();
				}

				vl::Ptr<WorkflowNullableType> AstVisitor::CopyNode(WorkflowNullableType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowNullableType>();
				}

				vl::Ptr<WorkflowObservableListType> AstVisitor::CopyNode(WorkflowObservableListType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowObservableListType>();
				}

				vl::Ptr<WorkflowObserveExpression> AstVisitor::CopyNode(WorkflowObserveExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowObserveExpression>();
				}

				vl::Ptr<WorkflowOrderedLambdaExpression> AstVisitor::CopyNode(WorkflowOrderedLambdaExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowOrderedLambdaExpression>();
				}

				vl::Ptr<WorkflowOrderedNameExpression> AstVisitor::CopyNode(WorkflowOrderedNameExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowOrderedNameExpression>();
				}

				vl::Ptr<WorkflowPredefinedType> AstVisitor::CopyNode(WorkflowPredefinedType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowPredefinedType>();
				}

				vl::Ptr<WorkflowPropertyDeclaration> AstVisitor::CopyNode(WorkflowPropertyDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowPropertyDeclaration>();
				}

				vl::Ptr<WorkflowRaiseExceptionStatement> AstVisitor::CopyNode(WorkflowRaiseExceptionStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowRaiseExceptionStatement>();
				}

				vl::Ptr<WorkflowRangeExpression> AstVisitor::CopyNode(WorkflowRangeExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowRangeExpression>();
				}

				vl::Ptr<WorkflowRawPointerType> AstVisitor::CopyNode(WorkflowRawPointerType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowRawPointerType>();
				}

				vl::Ptr<WorkflowReferenceExpression> AstVisitor::CopyNode(WorkflowReferenceExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowReferenceExpression>();
				}

				vl::Ptr<WorkflowReferenceType> AstVisitor::CopyNode(WorkflowReferenceType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowReferenceType>();
				}

				vl::Ptr<WorkflowReturnStatement> AstVisitor::CopyNode(WorkflowReturnStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowReturnStatement>();
				}

				vl::Ptr<WorkflowSetTestingExpression> AstVisitor::CopyNode(WorkflowSetTestingExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowSetTestingExpression>();
				}

				vl::Ptr<WorkflowSharedPointerType> AstVisitor::CopyNode(WorkflowSharedPointerType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowSharedPointerType>();
				}

				vl::Ptr<WorkflowStateInvokeStatement> AstVisitor::CopyNode(WorkflowStateInvokeStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowStateInvokeStatement>();
				}

				vl::Ptr<WorkflowStateMachineDeclaration> AstVisitor::CopyNode(WorkflowStateMachineDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowStateMachineDeclaration>();
				}

				vl::Ptr<WorkflowStateMachineStatement> AstVisitor::CopyNode(WorkflowStateMachineStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowStateMachineStatement>();
				}

				vl::Ptr<WorkflowStateSwitchStatement> AstVisitor::CopyNode(WorkflowStateSwitchStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowStateSwitchStatement>();
				}

				vl::Ptr<WorkflowStringExpression> AstVisitor::CopyNode(WorkflowStringExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowStringExpression>();
				}

				vl::Ptr<WorkflowStructDeclaration> AstVisitor::CopyNode(WorkflowStructDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowStructDeclaration>();
				}

				vl::Ptr<WorkflowSwitchStatement> AstVisitor::CopyNode(WorkflowSwitchStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowSwitchStatement>();
				}

				vl::Ptr<WorkflowThisExpression> AstVisitor::CopyNode(WorkflowThisExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowThisExpression>();
				}

				vl::Ptr<WorkflowTopQualifiedExpression> AstVisitor::CopyNode(WorkflowTopQualifiedExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowTopQualifiedExpression>();
				}

				vl::Ptr<WorkflowTopQualifiedType> AstVisitor::CopyNode(WorkflowTopQualifiedType* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowType*>(node)).Cast<WorkflowTopQualifiedType>();
				}

				vl::Ptr<WorkflowTryStatement> AstVisitor::CopyNode(WorkflowTryStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowTryStatement>();
				}

				vl::Ptr<WorkflowTypeCastingExpression> AstVisitor::CopyNode(WorkflowTypeCastingExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowTypeCastingExpression>();
				}

				vl::Ptr<WorkflowTypeOfExpressionExpression> AstVisitor::CopyNode(WorkflowTypeOfExpressionExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowTypeOfExpressionExpression>();
				}

				vl::Ptr<WorkflowTypeOfTypeExpression> AstVisitor::CopyNode(WorkflowTypeOfTypeExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowTypeOfTypeExpression>();
				}

				vl::Ptr<WorkflowTypeTestingExpression> AstVisitor::CopyNode(WorkflowTypeTestingExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowTypeTestingExpression>();
				}

				vl::Ptr<WorkflowUnaryExpression> AstVisitor::CopyNode(WorkflowUnaryExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowUnaryExpression>();
				}

				vl::Ptr<WorkflowVariableDeclaration> AstVisitor::CopyNode(WorkflowVariableDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowVariableDeclaration>();
				}

				vl::Ptr<WorkflowVariableStatement> AstVisitor::CopyNode(WorkflowVariableStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowVariableStatement>();
				}

				vl::Ptr<WorkflowVirtualCfeDeclaration> AstVisitor::CopyNode(WorkflowVirtualCfeDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowVirtualCfeDeclaration>();
				}

				vl::Ptr<WorkflowVirtualCfeExpression> AstVisitor::CopyNode(WorkflowVirtualCfeExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowVirtualCfeExpression>();
				}

				vl::Ptr<WorkflowVirtualCseDeclaration> AstVisitor::CopyNode(WorkflowVirtualCseDeclaration* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowDeclaration*>(node)).Cast<WorkflowVirtualCseDeclaration>();
				}

				vl::Ptr<WorkflowVirtualCseExpression> AstVisitor::CopyNode(WorkflowVirtualCseExpression* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowExpression*>(node)).Cast<WorkflowVirtualCseExpression>();
				}

				vl::Ptr<WorkflowVirtualCseStatement> AstVisitor::CopyNode(WorkflowVirtualCseStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowVirtualCseStatement>();
				}

				vl::Ptr<WorkflowWhileStatement> AstVisitor::CopyNode(WorkflowWhileStatement* node)
				{
					if (!node) return nullptr;
					return CopyNode(static_cast<WorkflowStatement*>(node)).Cast<WorkflowWhileStatement>();
				}

			}
		}
	}
}
