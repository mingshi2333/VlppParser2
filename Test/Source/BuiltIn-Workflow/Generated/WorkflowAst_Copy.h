/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_COPY_VISITOR
#define VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_COPY_VISITOR

#include "WorkflowAst.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace copy_visitor
			{
				/// <summary>A copy visitor, overriding all abstract methods with AST copying code.</summary>
				class AstVisitor
					: public virtual vl::glr::CopyVisitorBase
					, protected virtual WorkflowType::IVisitor
					, protected virtual WorkflowExpression::IVisitor
					, protected virtual WorkflowStatement::IVisitor
					, protected virtual WorkflowDeclaration::IVisitor
					, protected virtual WorkflowVirtualCfeDeclaration::IVisitor
					, protected virtual WorkflowVirtualCseDeclaration::IVisitor
					, protected virtual WorkflowVirtualCseStatement::IVisitor
					, protected virtual WorkflowCoroutineStatement::IVisitor
					, protected virtual WorkflowStateMachineStatement::IVisitor
					, protected virtual WorkflowVirtualCfeExpression::IVisitor
					, protected virtual WorkflowVirtualCseExpression::IVisitor
					, protected virtual WorkflowModuleUsingFragment::IVisitor
				{
				protected:
					void CopyFields(WorkflowAttachEventExpression* from, WorkflowAttachEventExpression* to);
					void CopyFields(WorkflowAttribute* from, WorkflowAttribute* to);
					void CopyFields(WorkflowAutoPropertyDeclaration* from, WorkflowAutoPropertyDeclaration* to);
					void CopyFields(WorkflowBaseConstructorCall* from, WorkflowBaseConstructorCall* to);
					void CopyFields(WorkflowBinaryExpression* from, WorkflowBinaryExpression* to);
					void CopyFields(WorkflowBindExpression* from, WorkflowBindExpression* to);
					void CopyFields(WorkflowBlockStatement* from, WorkflowBlockStatement* to);
					void CopyFields(WorkflowBreakStatement* from, WorkflowBreakStatement* to);
					void CopyFields(WorkflowCallExpression* from, WorkflowCallExpression* to);
					void CopyFields(WorkflowCastResultInterfaceDeclaration* from, WorkflowCastResultInterfaceDeclaration* to);
					void CopyFields(WorkflowChildExpression* from, WorkflowChildExpression* to);
					void CopyFields(WorkflowChildType* from, WorkflowChildType* to);
					void CopyFields(WorkflowClassDeclaration* from, WorkflowClassDeclaration* to);
					void CopyFields(WorkflowCoOperatorExpression* from, WorkflowCoOperatorExpression* to);
					void CopyFields(WorkflowCoOperatorStatement* from, WorkflowCoOperatorStatement* to);
					void CopyFields(WorkflowCoPauseStatement* from, WorkflowCoPauseStatement* to);
					void CopyFields(WorkflowCoProviderStatement* from, WorkflowCoProviderStatement* to);
					void CopyFields(WorkflowConstructorArgument* from, WorkflowConstructorArgument* to);
					void CopyFields(WorkflowConstructorDeclaration* from, WorkflowConstructorDeclaration* to);
					void CopyFields(WorkflowConstructorExpression* from, WorkflowConstructorExpression* to);
					void CopyFields(WorkflowContinueStatement* from, WorkflowContinueStatement* to);
					void CopyFields(WorkflowCoroutineStatement* from, WorkflowCoroutineStatement* to);
					void CopyFields(WorkflowDeclaration* from, WorkflowDeclaration* to);
					void CopyFields(WorkflowDeleteStatement* from, WorkflowDeleteStatement* to);
					void CopyFields(WorkflowDestructorDeclaration* from, WorkflowDestructorDeclaration* to);
					void CopyFields(WorkflowDetachEventExpression* from, WorkflowDetachEventExpression* to);
					void CopyFields(WorkflowEnumDeclaration* from, WorkflowEnumDeclaration* to);
					void CopyFields(WorkflowEnumItem* from, WorkflowEnumItem* to);
					void CopyFields(WorkflowEnumItemIntersection* from, WorkflowEnumItemIntersection* to);
					void CopyFields(WorkflowEnumerableType* from, WorkflowEnumerableType* to);
					void CopyFields(WorkflowEventDeclaration* from, WorkflowEventDeclaration* to);
					void CopyFields(WorkflowExpectedTypeCastExpression* from, WorkflowExpectedTypeCastExpression* to);
					void CopyFields(WorkflowExpression* from, WorkflowExpression* to);
					void CopyFields(WorkflowExpressionStatement* from, WorkflowExpressionStatement* to);
					void CopyFields(WorkflowFloatingExpression* from, WorkflowFloatingExpression* to);
					void CopyFields(WorkflowForEachStatement* from, WorkflowForEachStatement* to);
					void CopyFields(WorkflowFormatExpression* from, WorkflowFormatExpression* to);
					void CopyFields(WorkflowFunctionArgument* from, WorkflowFunctionArgument* to);
					void CopyFields(WorkflowFunctionDeclaration* from, WorkflowFunctionDeclaration* to);
					void CopyFields(WorkflowFunctionExpression* from, WorkflowFunctionExpression* to);
					void CopyFields(WorkflowFunctionType* from, WorkflowFunctionType* to);
					void CopyFields(WorkflowGotoStatement* from, WorkflowGotoStatement* to);
					void CopyFields(WorkflowIfExpression* from, WorkflowIfExpression* to);
					void CopyFields(WorkflowIfStatement* from, WorkflowIfStatement* to);
					void CopyFields(WorkflowInferExpression* from, WorkflowInferExpression* to);
					void CopyFields(WorkflowIntegerExpression* from, WorkflowIntegerExpression* to);
					void CopyFields(WorkflowLetExpression* from, WorkflowLetExpression* to);
					void CopyFields(WorkflowLetVariable* from, WorkflowLetVariable* to);
					void CopyFields(WorkflowLiteralExpression* from, WorkflowLiteralExpression* to);
					void CopyFields(WorkflowMapType* from, WorkflowMapType* to);
					void CopyFields(WorkflowMemberExpression* from, WorkflowMemberExpression* to);
					void CopyFields(WorkflowMixinCastExpression* from, WorkflowMixinCastExpression* to);
					void CopyFields(WorkflowModule* from, WorkflowModule* to);
					void CopyFields(WorkflowModuleUsingFragment* from, WorkflowModuleUsingFragment* to);
					void CopyFields(WorkflowModuleUsingItem* from, WorkflowModuleUsingItem* to);
					void CopyFields(WorkflowModuleUsingNameFragment* from, WorkflowModuleUsingNameFragment* to);
					void CopyFields(WorkflowModuleUsingPath* from, WorkflowModuleUsingPath* to);
					void CopyFields(WorkflowModuleUsingWildCardFragment* from, WorkflowModuleUsingWildCardFragment* to);
					void CopyFields(WorkflowNamespaceDeclaration* from, WorkflowNamespaceDeclaration* to);
					void CopyFields(WorkflowNewClassExpression* from, WorkflowNewClassExpression* to);
					void CopyFields(WorkflowNewCoroutineExpression* from, WorkflowNewCoroutineExpression* to);
					void CopyFields(WorkflowNewInterfaceExpression* from, WorkflowNewInterfaceExpression* to);
					void CopyFields(WorkflowNullableType* from, WorkflowNullableType* to);
					void CopyFields(WorkflowObservableListType* from, WorkflowObservableListType* to);
					void CopyFields(WorkflowObserveExpression* from, WorkflowObserveExpression* to);
					void CopyFields(WorkflowOrderedLambdaExpression* from, WorkflowOrderedLambdaExpression* to);
					void CopyFields(WorkflowOrderedNameExpression* from, WorkflowOrderedNameExpression* to);
					void CopyFields(WorkflowPredefinedType* from, WorkflowPredefinedType* to);
					void CopyFields(WorkflowPropertyDeclaration* from, WorkflowPropertyDeclaration* to);
					void CopyFields(WorkflowRaiseExceptionStatement* from, WorkflowRaiseExceptionStatement* to);
					void CopyFields(WorkflowRangeExpression* from, WorkflowRangeExpression* to);
					void CopyFields(WorkflowRawPointerType* from, WorkflowRawPointerType* to);
					void CopyFields(WorkflowReferenceExpression* from, WorkflowReferenceExpression* to);
					void CopyFields(WorkflowReferenceType* from, WorkflowReferenceType* to);
					void CopyFields(WorkflowReturnStatement* from, WorkflowReturnStatement* to);
					void CopyFields(WorkflowSetTestingExpression* from, WorkflowSetTestingExpression* to);
					void CopyFields(WorkflowSharedPointerType* from, WorkflowSharedPointerType* to);
					void CopyFields(WorkflowStateDeclaration* from, WorkflowStateDeclaration* to);
					void CopyFields(WorkflowStateInput* from, WorkflowStateInput* to);
					void CopyFields(WorkflowStateInvokeStatement* from, WorkflowStateInvokeStatement* to);
					void CopyFields(WorkflowStateMachineDeclaration* from, WorkflowStateMachineDeclaration* to);
					void CopyFields(WorkflowStateMachineStatement* from, WorkflowStateMachineStatement* to);
					void CopyFields(WorkflowStateSwitchArgument* from, WorkflowStateSwitchArgument* to);
					void CopyFields(WorkflowStateSwitchCase* from, WorkflowStateSwitchCase* to);
					void CopyFields(WorkflowStateSwitchStatement* from, WorkflowStateSwitchStatement* to);
					void CopyFields(WorkflowStatement* from, WorkflowStatement* to);
					void CopyFields(WorkflowStringExpression* from, WorkflowStringExpression* to);
					void CopyFields(WorkflowStructDeclaration* from, WorkflowStructDeclaration* to);
					void CopyFields(WorkflowStructMember* from, WorkflowStructMember* to);
					void CopyFields(WorkflowSwitchCase* from, WorkflowSwitchCase* to);
					void CopyFields(WorkflowSwitchStatement* from, WorkflowSwitchStatement* to);
					void CopyFields(WorkflowThisExpression* from, WorkflowThisExpression* to);
					void CopyFields(WorkflowTopQualifiedExpression* from, WorkflowTopQualifiedExpression* to);
					void CopyFields(WorkflowTopQualifiedType* from, WorkflowTopQualifiedType* to);
					void CopyFields(WorkflowTryStatement* from, WorkflowTryStatement* to);
					void CopyFields(WorkflowType* from, WorkflowType* to);
					void CopyFields(WorkflowTypeCastingExpression* from, WorkflowTypeCastingExpression* to);
					void CopyFields(WorkflowTypeOfExpressionExpression* from, WorkflowTypeOfExpressionExpression* to);
					void CopyFields(WorkflowTypeOfTypeExpression* from, WorkflowTypeOfTypeExpression* to);
					void CopyFields(WorkflowTypeTestingExpression* from, WorkflowTypeTestingExpression* to);
					void CopyFields(WorkflowUnaryExpression* from, WorkflowUnaryExpression* to);
					void CopyFields(WorkflowVariableDeclaration* from, WorkflowVariableDeclaration* to);
					void CopyFields(WorkflowVariableStatement* from, WorkflowVariableStatement* to);
					void CopyFields(WorkflowVirtualCfeDeclaration* from, WorkflowVirtualCfeDeclaration* to);
					void CopyFields(WorkflowVirtualCfeExpression* from, WorkflowVirtualCfeExpression* to);
					void CopyFields(WorkflowVirtualCseDeclaration* from, WorkflowVirtualCseDeclaration* to);
					void CopyFields(WorkflowVirtualCseExpression* from, WorkflowVirtualCseExpression* to);
					void CopyFields(WorkflowVirtualCseStatement* from, WorkflowVirtualCseStatement* to);
					void CopyFields(WorkflowWhileStatement* from, WorkflowWhileStatement* to);

				protected:
					virtual void Visit(WorkflowAttribute* node);
					virtual void Visit(WorkflowFunctionArgument* node);
					virtual void Visit(WorkflowBaseConstructorCall* node);
					virtual void Visit(WorkflowEnumItemIntersection* node);
					virtual void Visit(WorkflowEnumItem* node);
					virtual void Visit(WorkflowStructMember* node);
					virtual void Visit(WorkflowStateInput* node);
					virtual void Visit(WorkflowStateDeclaration* node);
					virtual void Visit(WorkflowSwitchCase* node);
					virtual void Visit(WorkflowStateSwitchArgument* node);
					virtual void Visit(WorkflowStateSwitchCase* node);
					virtual void Visit(WorkflowLetVariable* node);
					virtual void Visit(WorkflowConstructorArgument* node);
					virtual void Visit(WorkflowModuleUsingItem* node);
					virtual void Visit(WorkflowModuleUsingPath* node);
					virtual void Visit(WorkflowModule* node);

					void Visit(WorkflowPredefinedType* node) override;
					void Visit(WorkflowTopQualifiedType* node) override;
					void Visit(WorkflowReferenceType* node) override;
					void Visit(WorkflowRawPointerType* node) override;
					void Visit(WorkflowSharedPointerType* node) override;
					void Visit(WorkflowNullableType* node) override;
					void Visit(WorkflowEnumerableType* node) override;
					void Visit(WorkflowMapType* node) override;
					void Visit(WorkflowObservableListType* node) override;
					void Visit(WorkflowFunctionType* node) override;
					void Visit(WorkflowChildType* node) override;

					void Visit(WorkflowThisExpression* node) override;
					void Visit(WorkflowTopQualifiedExpression* node) override;
					void Visit(WorkflowReferenceExpression* node) override;
					void Visit(WorkflowOrderedNameExpression* node) override;
					void Visit(WorkflowOrderedLambdaExpression* node) override;
					void Visit(WorkflowMemberExpression* node) override;
					void Visit(WorkflowChildExpression* node) override;
					void Visit(WorkflowLiteralExpression* node) override;
					void Visit(WorkflowFloatingExpression* node) override;
					void Visit(WorkflowIntegerExpression* node) override;
					void Visit(WorkflowStringExpression* node) override;
					void Visit(WorkflowUnaryExpression* node) override;
					void Visit(WorkflowBinaryExpression* node) override;
					void Visit(WorkflowLetExpression* node) override;
					void Visit(WorkflowIfExpression* node) override;
					void Visit(WorkflowRangeExpression* node) override;
					void Visit(WorkflowSetTestingExpression* node) override;
					void Visit(WorkflowConstructorExpression* node) override;
					void Visit(WorkflowInferExpression* node) override;
					void Visit(WorkflowTypeCastingExpression* node) override;
					void Visit(WorkflowTypeTestingExpression* node) override;
					void Visit(WorkflowTypeOfTypeExpression* node) override;
					void Visit(WorkflowTypeOfExpressionExpression* node) override;
					void Visit(WorkflowAttachEventExpression* node) override;
					void Visit(WorkflowDetachEventExpression* node) override;
					void Visit(WorkflowObserveExpression* node) override;
					void Visit(WorkflowCallExpression* node) override;
					void Visit(WorkflowFunctionExpression* node) override;
					void Visit(WorkflowNewClassExpression* node) override;
					void Visit(WorkflowNewInterfaceExpression* node) override;
					void Visit(WorkflowVirtualCfeExpression* node) override;
					void Visit(WorkflowVirtualCseExpression* node) override;

					void Visit(WorkflowBreakStatement* node) override;
					void Visit(WorkflowContinueStatement* node) override;
					void Visit(WorkflowReturnStatement* node) override;
					void Visit(WorkflowDeleteStatement* node) override;
					void Visit(WorkflowRaiseExceptionStatement* node) override;
					void Visit(WorkflowIfStatement* node) override;
					void Visit(WorkflowWhileStatement* node) override;
					void Visit(WorkflowTryStatement* node) override;
					void Visit(WorkflowBlockStatement* node) override;
					void Visit(WorkflowGotoStatement* node) override;
					void Visit(WorkflowVariableStatement* node) override;
					void Visit(WorkflowExpressionStatement* node) override;
					void Visit(WorkflowVirtualCseStatement* node) override;
					void Visit(WorkflowCoroutineStatement* node) override;
					void Visit(WorkflowStateMachineStatement* node) override;

					void Visit(WorkflowNamespaceDeclaration* node) override;
					void Visit(WorkflowFunctionDeclaration* node) override;
					void Visit(WorkflowVariableDeclaration* node) override;
					void Visit(WorkflowEventDeclaration* node) override;
					void Visit(WorkflowPropertyDeclaration* node) override;
					void Visit(WorkflowConstructorDeclaration* node) override;
					void Visit(WorkflowDestructorDeclaration* node) override;
					void Visit(WorkflowClassDeclaration* node) override;
					void Visit(WorkflowEnumDeclaration* node) override;
					void Visit(WorkflowStructDeclaration* node) override;
					void Visit(WorkflowVirtualCfeDeclaration* node) override;
					void Visit(WorkflowVirtualCseDeclaration* node) override;

					void Visit(WorkflowAutoPropertyDeclaration* node) override;
					void Visit(WorkflowCastResultInterfaceDeclaration* node) override;

					void Visit(WorkflowStateMachineDeclaration* node) override;

					void Visit(WorkflowForEachStatement* node) override;
					void Visit(WorkflowSwitchStatement* node) override;
					void Visit(WorkflowCoProviderStatement* node) override;

					void Visit(WorkflowCoPauseStatement* node) override;
					void Visit(WorkflowCoOperatorStatement* node) override;

					void Visit(WorkflowStateSwitchStatement* node) override;
					void Visit(WorkflowStateInvokeStatement* node) override;

					void Visit(WorkflowFormatExpression* node) override;

					void Visit(WorkflowBindExpression* node) override;
					void Visit(WorkflowNewCoroutineExpression* node) override;
					void Visit(WorkflowMixinCastExpression* node) override;
					void Visit(WorkflowExpectedTypeCastExpression* node) override;
					void Visit(WorkflowCoOperatorExpression* node) override;

					void Visit(WorkflowModuleUsingNameFragment* node) override;
					void Visit(WorkflowModuleUsingWildCardFragment* node) override;

				public:
					virtual vl::Ptr<WorkflowType> CopyNode(WorkflowType* node);
					virtual vl::Ptr<WorkflowExpression> CopyNode(WorkflowExpression* node);
					virtual vl::Ptr<WorkflowStatement> CopyNode(WorkflowStatement* node);
					virtual vl::Ptr<WorkflowDeclaration> CopyNode(WorkflowDeclaration* node);
					virtual vl::Ptr<WorkflowModuleUsingFragment> CopyNode(WorkflowModuleUsingFragment* node);
					virtual vl::Ptr<WorkflowAttribute> CopyNode(WorkflowAttribute* node);
					virtual vl::Ptr<WorkflowFunctionArgument> CopyNode(WorkflowFunctionArgument* node);
					virtual vl::Ptr<WorkflowBaseConstructorCall> CopyNode(WorkflowBaseConstructorCall* node);
					virtual vl::Ptr<WorkflowEnumItemIntersection> CopyNode(WorkflowEnumItemIntersection* node);
					virtual vl::Ptr<WorkflowEnumItem> CopyNode(WorkflowEnumItem* node);
					virtual vl::Ptr<WorkflowStructMember> CopyNode(WorkflowStructMember* node);
					virtual vl::Ptr<WorkflowStateInput> CopyNode(WorkflowStateInput* node);
					virtual vl::Ptr<WorkflowStateDeclaration> CopyNode(WorkflowStateDeclaration* node);
					virtual vl::Ptr<WorkflowSwitchCase> CopyNode(WorkflowSwitchCase* node);
					virtual vl::Ptr<WorkflowStateSwitchArgument> CopyNode(WorkflowStateSwitchArgument* node);
					virtual vl::Ptr<WorkflowStateSwitchCase> CopyNode(WorkflowStateSwitchCase* node);
					virtual vl::Ptr<WorkflowLetVariable> CopyNode(WorkflowLetVariable* node);
					virtual vl::Ptr<WorkflowConstructorArgument> CopyNode(WorkflowConstructorArgument* node);
					virtual vl::Ptr<WorkflowModuleUsingItem> CopyNode(WorkflowModuleUsingItem* node);
					virtual vl::Ptr<WorkflowModuleUsingPath> CopyNode(WorkflowModuleUsingPath* node);
					virtual vl::Ptr<WorkflowModule> CopyNode(WorkflowModule* node);

					vl::Ptr<WorkflowAttachEventExpression> CopyNode(WorkflowAttachEventExpression* node);
					vl::Ptr<WorkflowAutoPropertyDeclaration> CopyNode(WorkflowAutoPropertyDeclaration* node);
					vl::Ptr<WorkflowBinaryExpression> CopyNode(WorkflowBinaryExpression* node);
					vl::Ptr<WorkflowBindExpression> CopyNode(WorkflowBindExpression* node);
					vl::Ptr<WorkflowBlockStatement> CopyNode(WorkflowBlockStatement* node);
					vl::Ptr<WorkflowBreakStatement> CopyNode(WorkflowBreakStatement* node);
					vl::Ptr<WorkflowCallExpression> CopyNode(WorkflowCallExpression* node);
					vl::Ptr<WorkflowCastResultInterfaceDeclaration> CopyNode(WorkflowCastResultInterfaceDeclaration* node);
					vl::Ptr<WorkflowChildExpression> CopyNode(WorkflowChildExpression* node);
					vl::Ptr<WorkflowChildType> CopyNode(WorkflowChildType* node);
					vl::Ptr<WorkflowClassDeclaration> CopyNode(WorkflowClassDeclaration* node);
					vl::Ptr<WorkflowCoOperatorExpression> CopyNode(WorkflowCoOperatorExpression* node);
					vl::Ptr<WorkflowCoOperatorStatement> CopyNode(WorkflowCoOperatorStatement* node);
					vl::Ptr<WorkflowCoPauseStatement> CopyNode(WorkflowCoPauseStatement* node);
					vl::Ptr<WorkflowCoProviderStatement> CopyNode(WorkflowCoProviderStatement* node);
					vl::Ptr<WorkflowConstructorDeclaration> CopyNode(WorkflowConstructorDeclaration* node);
					vl::Ptr<WorkflowConstructorExpression> CopyNode(WorkflowConstructorExpression* node);
					vl::Ptr<WorkflowContinueStatement> CopyNode(WorkflowContinueStatement* node);
					vl::Ptr<WorkflowCoroutineStatement> CopyNode(WorkflowCoroutineStatement* node);
					vl::Ptr<WorkflowDeleteStatement> CopyNode(WorkflowDeleteStatement* node);
					vl::Ptr<WorkflowDestructorDeclaration> CopyNode(WorkflowDestructorDeclaration* node);
					vl::Ptr<WorkflowDetachEventExpression> CopyNode(WorkflowDetachEventExpression* node);
					vl::Ptr<WorkflowEnumDeclaration> CopyNode(WorkflowEnumDeclaration* node);
					vl::Ptr<WorkflowEnumerableType> CopyNode(WorkflowEnumerableType* node);
					vl::Ptr<WorkflowEventDeclaration> CopyNode(WorkflowEventDeclaration* node);
					vl::Ptr<WorkflowExpectedTypeCastExpression> CopyNode(WorkflowExpectedTypeCastExpression* node);
					vl::Ptr<WorkflowExpressionStatement> CopyNode(WorkflowExpressionStatement* node);
					vl::Ptr<WorkflowFloatingExpression> CopyNode(WorkflowFloatingExpression* node);
					vl::Ptr<WorkflowForEachStatement> CopyNode(WorkflowForEachStatement* node);
					vl::Ptr<WorkflowFormatExpression> CopyNode(WorkflowFormatExpression* node);
					vl::Ptr<WorkflowFunctionDeclaration> CopyNode(WorkflowFunctionDeclaration* node);
					vl::Ptr<WorkflowFunctionExpression> CopyNode(WorkflowFunctionExpression* node);
					vl::Ptr<WorkflowFunctionType> CopyNode(WorkflowFunctionType* node);
					vl::Ptr<WorkflowGotoStatement> CopyNode(WorkflowGotoStatement* node);
					vl::Ptr<WorkflowIfExpression> CopyNode(WorkflowIfExpression* node);
					vl::Ptr<WorkflowIfStatement> CopyNode(WorkflowIfStatement* node);
					vl::Ptr<WorkflowInferExpression> CopyNode(WorkflowInferExpression* node);
					vl::Ptr<WorkflowIntegerExpression> CopyNode(WorkflowIntegerExpression* node);
					vl::Ptr<WorkflowLetExpression> CopyNode(WorkflowLetExpression* node);
					vl::Ptr<WorkflowLiteralExpression> CopyNode(WorkflowLiteralExpression* node);
					vl::Ptr<WorkflowMapType> CopyNode(WorkflowMapType* node);
					vl::Ptr<WorkflowMemberExpression> CopyNode(WorkflowMemberExpression* node);
					vl::Ptr<WorkflowMixinCastExpression> CopyNode(WorkflowMixinCastExpression* node);
					vl::Ptr<WorkflowModuleUsingNameFragment> CopyNode(WorkflowModuleUsingNameFragment* node);
					vl::Ptr<WorkflowModuleUsingWildCardFragment> CopyNode(WorkflowModuleUsingWildCardFragment* node);
					vl::Ptr<WorkflowNamespaceDeclaration> CopyNode(WorkflowNamespaceDeclaration* node);
					vl::Ptr<WorkflowNewClassExpression> CopyNode(WorkflowNewClassExpression* node);
					vl::Ptr<WorkflowNewCoroutineExpression> CopyNode(WorkflowNewCoroutineExpression* node);
					vl::Ptr<WorkflowNewInterfaceExpression> CopyNode(WorkflowNewInterfaceExpression* node);
					vl::Ptr<WorkflowNullableType> CopyNode(WorkflowNullableType* node);
					vl::Ptr<WorkflowObservableListType> CopyNode(WorkflowObservableListType* node);
					vl::Ptr<WorkflowObserveExpression> CopyNode(WorkflowObserveExpression* node);
					vl::Ptr<WorkflowOrderedLambdaExpression> CopyNode(WorkflowOrderedLambdaExpression* node);
					vl::Ptr<WorkflowOrderedNameExpression> CopyNode(WorkflowOrderedNameExpression* node);
					vl::Ptr<WorkflowPredefinedType> CopyNode(WorkflowPredefinedType* node);
					vl::Ptr<WorkflowPropertyDeclaration> CopyNode(WorkflowPropertyDeclaration* node);
					vl::Ptr<WorkflowRaiseExceptionStatement> CopyNode(WorkflowRaiseExceptionStatement* node);
					vl::Ptr<WorkflowRangeExpression> CopyNode(WorkflowRangeExpression* node);
					vl::Ptr<WorkflowRawPointerType> CopyNode(WorkflowRawPointerType* node);
					vl::Ptr<WorkflowReferenceExpression> CopyNode(WorkflowReferenceExpression* node);
					vl::Ptr<WorkflowReferenceType> CopyNode(WorkflowReferenceType* node);
					vl::Ptr<WorkflowReturnStatement> CopyNode(WorkflowReturnStatement* node);
					vl::Ptr<WorkflowSetTestingExpression> CopyNode(WorkflowSetTestingExpression* node);
					vl::Ptr<WorkflowSharedPointerType> CopyNode(WorkflowSharedPointerType* node);
					vl::Ptr<WorkflowStateInvokeStatement> CopyNode(WorkflowStateInvokeStatement* node);
					vl::Ptr<WorkflowStateMachineDeclaration> CopyNode(WorkflowStateMachineDeclaration* node);
					vl::Ptr<WorkflowStateMachineStatement> CopyNode(WorkflowStateMachineStatement* node);
					vl::Ptr<WorkflowStateSwitchStatement> CopyNode(WorkflowStateSwitchStatement* node);
					vl::Ptr<WorkflowStringExpression> CopyNode(WorkflowStringExpression* node);
					vl::Ptr<WorkflowStructDeclaration> CopyNode(WorkflowStructDeclaration* node);
					vl::Ptr<WorkflowSwitchStatement> CopyNode(WorkflowSwitchStatement* node);
					vl::Ptr<WorkflowThisExpression> CopyNode(WorkflowThisExpression* node);
					vl::Ptr<WorkflowTopQualifiedExpression> CopyNode(WorkflowTopQualifiedExpression* node);
					vl::Ptr<WorkflowTopQualifiedType> CopyNode(WorkflowTopQualifiedType* node);
					vl::Ptr<WorkflowTryStatement> CopyNode(WorkflowTryStatement* node);
					vl::Ptr<WorkflowTypeCastingExpression> CopyNode(WorkflowTypeCastingExpression* node);
					vl::Ptr<WorkflowTypeOfExpressionExpression> CopyNode(WorkflowTypeOfExpressionExpression* node);
					vl::Ptr<WorkflowTypeOfTypeExpression> CopyNode(WorkflowTypeOfTypeExpression* node);
					vl::Ptr<WorkflowTypeTestingExpression> CopyNode(WorkflowTypeTestingExpression* node);
					vl::Ptr<WorkflowUnaryExpression> CopyNode(WorkflowUnaryExpression* node);
					vl::Ptr<WorkflowVariableDeclaration> CopyNode(WorkflowVariableDeclaration* node);
					vl::Ptr<WorkflowVariableStatement> CopyNode(WorkflowVariableStatement* node);
					vl::Ptr<WorkflowVirtualCfeDeclaration> CopyNode(WorkflowVirtualCfeDeclaration* node);
					vl::Ptr<WorkflowVirtualCfeExpression> CopyNode(WorkflowVirtualCfeExpression* node);
					vl::Ptr<WorkflowVirtualCseDeclaration> CopyNode(WorkflowVirtualCseDeclaration* node);
					vl::Ptr<WorkflowVirtualCseExpression> CopyNode(WorkflowVirtualCseExpression* node);
					vl::Ptr<WorkflowVirtualCseStatement> CopyNode(WorkflowVirtualCseStatement* node);
					vl::Ptr<WorkflowWhileStatement> CopyNode(WorkflowWhileStatement* node);
				};
			}
		}
	}
}
#endif