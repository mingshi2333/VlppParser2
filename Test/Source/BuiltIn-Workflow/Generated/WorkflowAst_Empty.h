/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_EMPTY_VISITOR
#define VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_EMPTY_VISITOR

#include "WorkflowAst.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace empty_visitor
			{
				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class TypeVisitor : public vl::Object, public WorkflowType::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowPredefinedType* node) override;
					void Visit(WorkflowTopQualifiedType* node) override;
					void Visit(WorkflowReferenceType* node) override;
					void Visit(WorkflowRawPointerType* node) override;
					void Visit(WorkflowSharedPointerType* node) override;
					void Visit(WorkflowNullableType* node) override;
					void Visit(WorkflowEnumerableType* node) override;
					void Visit(WorkflowMapType* node) override;
					void Visit(WorkflowObservableListType* node) override;
					void Visit(WorkflowFunctionType* node) override;
					void Visit(WorkflowChildType* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class ExpressionVisitor : public vl::Object, public WorkflowExpression::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------
					virtual void Dispatch(WorkflowVirtualCfeExpression* node) = 0;
					virtual void Dispatch(WorkflowVirtualCseExpression* node) = 0;

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowThisExpression* node) override;
					void Visit(WorkflowTopQualifiedExpression* node) override;
					void Visit(WorkflowReferenceExpression* node) override;
					void Visit(WorkflowOrderedNameExpression* node) override;
					void Visit(WorkflowOrderedLambdaExpression* node) override;
					void Visit(WorkflowMemberExpression* node) override;
					void Visit(WorkflowChildExpression* node) override;
					void Visit(WorkflowLiteralExpression* node) override;
					void Visit(WorkflowFloatingExpression* node) override;
					void Visit(WorkflowIntegerExpression* node) override;
					void Visit(WorkflowStringExpression* node) override;
					void Visit(WorkflowUnaryExpression* node) override;
					void Visit(WorkflowBinaryExpression* node) override;
					void Visit(WorkflowLetExpression* node) override;
					void Visit(WorkflowIfExpression* node) override;
					void Visit(WorkflowRangeExpression* node) override;
					void Visit(WorkflowSetTestingExpression* node) override;
					void Visit(WorkflowConstructorExpression* node) override;
					void Visit(WorkflowInferExpression* node) override;
					void Visit(WorkflowTypeCastingExpression* node) override;
					void Visit(WorkflowTypeTestingExpression* node) override;
					void Visit(WorkflowTypeOfTypeExpression* node) override;
					void Visit(WorkflowTypeOfExpressionExpression* node) override;
					void Visit(WorkflowAttachEventExpression* node) override;
					void Visit(WorkflowDetachEventExpression* node) override;
					void Visit(WorkflowObserveExpression* node) override;
					void Visit(WorkflowCallExpression* node) override;
					void Visit(WorkflowFunctionExpression* node) override;
					void Visit(WorkflowNewClassExpression* node) override;
					void Visit(WorkflowNewInterfaceExpression* node) override;
					void Visit(WorkflowVirtualCfeExpression* node) override;
					void Visit(WorkflowVirtualCseExpression* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class StatementVisitor : public vl::Object, public WorkflowStatement::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------
					virtual void Dispatch(WorkflowVirtualCseStatement* node) = 0;
					virtual void Dispatch(WorkflowCoroutineStatement* node) = 0;
					virtual void Dispatch(WorkflowStateMachineStatement* node) = 0;

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowBreakStatement* node) override;
					void Visit(WorkflowContinueStatement* node) override;
					void Visit(WorkflowReturnStatement* node) override;
					void Visit(WorkflowDeleteStatement* node) override;
					void Visit(WorkflowRaiseExceptionStatement* node) override;
					void Visit(WorkflowIfStatement* node) override;
					void Visit(WorkflowWhileStatement* node) override;
					void Visit(WorkflowTryStatement* node) override;
					void Visit(WorkflowBlockStatement* node) override;
					void Visit(WorkflowGotoStatement* node) override;
					void Visit(WorkflowVariableStatement* node) override;
					void Visit(WorkflowExpressionStatement* node) override;
					void Visit(WorkflowVirtualCseStatement* node) override;
					void Visit(WorkflowCoroutineStatement* node) override;
					void Visit(WorkflowStateMachineStatement* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class DeclarationVisitor : public vl::Object, public WorkflowDeclaration::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------
					virtual void Dispatch(WorkflowVirtualCfeDeclaration* node) = 0;
					virtual void Dispatch(WorkflowVirtualCseDeclaration* node) = 0;

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowNamespaceDeclaration* node) override;
					void Visit(WorkflowFunctionDeclaration* node) override;
					void Visit(WorkflowVariableDeclaration* node) override;
					void Visit(WorkflowEventDeclaration* node) override;
					void Visit(WorkflowPropertyDeclaration* node) override;
					void Visit(WorkflowConstructorDeclaration* node) override;
					void Visit(WorkflowDestructorDeclaration* node) override;
					void Visit(WorkflowClassDeclaration* node) override;
					void Visit(WorkflowEnumDeclaration* node) override;
					void Visit(WorkflowStructDeclaration* node) override;
					void Visit(WorkflowVirtualCfeDeclaration* node) override;
					void Visit(WorkflowVirtualCseDeclaration* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class VirtualCfeDeclarationVisitor : public vl::Object, public WorkflowVirtualCfeDeclaration::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowAutoPropertyDeclaration* node) override;
					void Visit(WorkflowCastResultInterfaceDeclaration* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class VirtualCseDeclarationVisitor : public vl::Object, public WorkflowVirtualCseDeclaration::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowStateMachineDeclaration* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class VirtualCseStatementVisitor : public vl::Object, public WorkflowVirtualCseStatement::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowForEachStatement* node) override;
					void Visit(WorkflowSwitchStatement* node) override;
					void Visit(WorkflowCoProviderStatement* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class CoroutineStatementVisitor : public vl::Object, public WorkflowCoroutineStatement::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowCoPauseStatement* node) override;
					void Visit(WorkflowCoOperatorStatement* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class StateMachineStatementVisitor : public vl::Object, public WorkflowStateMachineStatement::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowStateSwitchStatement* node) override;
					void Visit(WorkflowStateInvokeStatement* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class VirtualCfeExpressionVisitor : public vl::Object, public WorkflowVirtualCfeExpression::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowFormatExpression* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class VirtualCseExpressionVisitor : public vl::Object, public WorkflowVirtualCseExpression::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowBindExpression* node) override;
					void Visit(WorkflowNewCoroutineExpression* node) override;
					void Visit(WorkflowMixinCastExpression* node) override;
					void Visit(WorkflowExpectedTypeCastExpression* node) override;
					void Visit(WorkflowCoOperatorExpression* node) override;
				};

				/// <summary>An empty visitor, overriding all abstract methods with empty implementations.</summary>
				class ModuleUsingFragmentVisitor : public vl::Object, public WorkflowModuleUsingFragment::IVisitor
				{
				protected:
					// Dispatch (virtual) --------------------------------

				public:
					// Visitor Members -----------------------------------
					void Visit(WorkflowModuleUsingNameFragment* node) override;
					void Visit(WorkflowModuleUsingWildCardFragment* node) override;
				};

			}
		}
	}
}
#endif