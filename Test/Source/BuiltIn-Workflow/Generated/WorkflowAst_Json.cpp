/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Json.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace json_visitor
			{
				void AstVisitor::PrintFields(WorkflowAttachEventExpression* node)
				{
					BeginField(L"event");
					Print(node->event.Obj());
					EndField();
					BeginField(L"function");
					Print(node->function.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowAttribute* node)
				{
					BeginField(L"category");
					WriteToken(node->category);
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"value");
					Print(node->value.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowAutoPropertyDeclaration* node)
				{
					BeginField(L"configConst");
					switch (node->configConst)
					{
					case vl::glr::workflow::WorkflowAPConst::Readonly:
						WriteString(L"Readonly");
						break;
					case vl::glr::workflow::WorkflowAPConst::Writable:
						WriteString(L"Writable");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"configObserve");
					switch (node->configObserve)
					{
					case vl::glr::workflow::WorkflowAPObserve::NotObservable:
						WriteString(L"NotObservable");
						break;
					case vl::glr::workflow::WorkflowAPObserve::Observable:
						WriteString(L"Observable");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"functionKind");
					switch (node->functionKind)
					{
					case vl::glr::workflow::WorkflowFunctionKind::Normal:
						WriteString(L"Normal");
						break;
					case vl::glr::workflow::WorkflowFunctionKind::Override:
						WriteString(L"Override");
						break;
					case vl::glr::workflow::WorkflowFunctionKind::Static:
						WriteString(L"Static");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowBaseConstructorCall* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowBinaryExpression* node)
				{
					BeginField(L"first");
					Print(node->first.Obj());
					EndField();
					BeginField(L"op");
					switch (node->op)
					{
					case vl::glr::workflow::WorkflowBinaryOperator::Add:
						WriteString(L"Add");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::And:
						WriteString(L"And");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Assign:
						WriteString(L"Assign");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Div:
						WriteString(L"Div");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::EQ:
						WriteString(L"EQ");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Exp:
						WriteString(L"Exp");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::FailedThen:
						WriteString(L"FailedThen");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::FlagAnd:
						WriteString(L"FlagAnd");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::FlagOr:
						WriteString(L"FlagOr");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::GE:
						WriteString(L"GE");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::GT:
						WriteString(L"GT");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Index:
						WriteString(L"Index");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::LE:
						WriteString(L"LE");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::LT:
						WriteString(L"LT");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Mod:
						WriteString(L"Mod");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Mul:
						WriteString(L"Mul");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::NE:
						WriteString(L"NE");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Or:
						WriteString(L"Or");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Shl:
						WriteString(L"Shl");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Shr:
						WriteString(L"Shr");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Sub:
						WriteString(L"Sub");
						break;
					case vl::glr::workflow::WorkflowBinaryOperator::Xor:
						WriteString(L"Xor");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"second");
					Print(node->second.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowBindExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowBlockStatement* node)
				{
					BeginField(L"endLabel");
					WriteToken(node->endLabel);
					EndField();
					BeginField(L"statements");
					BeginArray();
					for (auto&& listItem : node->statements)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowBreakStatement* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowCallExpression* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"function");
					Print(node->function.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowCastResultInterfaceDeclaration* node)
				{
					BeginField(L"baseType");
					Print(node->baseType.Obj());
					EndField();
					BeginField(L"elementType");
					Print(node->elementType.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowChildExpression* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"parent");
					Print(node->parent.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowChildType* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"parent");
					Print(node->parent.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowClassDeclaration* node)
				{
					BeginField(L"baseTypes");
					BeginArray();
					for (auto&& listItem : node->baseTypes)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"constructorType");
					switch (node->constructorType)
					{
					case vl::glr::workflow::WorkflowConstructorType::RawPtr:
						WriteString(L"RawPtr");
						break;
					case vl::glr::workflow::WorkflowConstructorType::SharedPtr:
						WriteString(L"SharedPtr");
						break;
					case vl::glr::workflow::WorkflowConstructorType::Undefined:
						WriteString(L"Undefined");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"declarations");
					BeginArray();
					for (auto&& listItem : node->declarations)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"kind");
					switch (node->kind)
					{
					case vl::glr::workflow::WorkflowClassKind::Class:
						WriteString(L"Class");
						break;
					case vl::glr::workflow::WorkflowClassKind::Interface:
						WriteString(L"Interface");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowCoOperatorExpression* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowCoOperatorStatement* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"opName");
					WriteToken(node->opName);
					EndField();
					BeginField(L"varName");
					WriteToken(node->varName);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowCoPauseStatement* node)
				{
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowCoProviderStatement* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowConstructorArgument* node)
				{
					BeginField(L"key");
					Print(node->key.Obj());
					EndField();
					BeginField(L"value");
					Print(node->value.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowConstructorDeclaration* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"baseConstructorCalls");
					BeginArray();
					for (auto&& listItem : node->baseConstructorCalls)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"constructorType");
					switch (node->constructorType)
					{
					case vl::glr::workflow::WorkflowConstructorType::RawPtr:
						WriteString(L"RawPtr");
						break;
					case vl::glr::workflow::WorkflowConstructorType::SharedPtr:
						WriteString(L"SharedPtr");
						break;
					case vl::glr::workflow::WorkflowConstructorType::Undefined:
						WriteString(L"Undefined");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowConstructorExpression* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowContinueStatement* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowCoroutineStatement* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowDeclaration* node)
				{
					BeginField(L"attributes");
					BeginArray();
					for (auto&& listItem : node->attributes)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowDeleteStatement* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowDestructorDeclaration* node)
				{
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowDetachEventExpression* node)
				{
					BeginField(L"event");
					Print(node->event.Obj());
					EndField();
					BeginField(L"handler");
					Print(node->handler.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowEnumDeclaration* node)
				{
					BeginField(L"items");
					BeginArray();
					for (auto&& listItem : node->items)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"kind");
					switch (node->kind)
					{
					case vl::glr::workflow::WorkflowEnumKind::Flag:
						WriteString(L"Flag");
						break;
					case vl::glr::workflow::WorkflowEnumKind::Normal:
						WriteString(L"Normal");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowEnumItem* node)
				{
					BeginField(L"attributes");
					BeginArray();
					for (auto&& listItem : node->attributes)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"intersections");
					BeginArray();
					for (auto&& listItem : node->intersections)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"kind");
					switch (node->kind)
					{
					case vl::glr::workflow::WorkflowEnumItemKind::Constant:
						WriteString(L"Constant");
						break;
					case vl::glr::workflow::WorkflowEnumItemKind::Intersection:
						WriteString(L"Intersection");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"number");
					WriteToken(node->number);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowEnumItemIntersection* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowEnumerableType* node)
				{
					BeginField(L"element");
					Print(node->element.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowEventDeclaration* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowExpectedTypeCastExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"strategy");
					switch (node->strategy)
					{
					case vl::glr::workflow::WorkflowTypeCastingStrategy::Strong:
						WriteString(L"Strong");
						break;
					case vl::glr::workflow::WorkflowTypeCastingStrategy::Weak:
						WriteString(L"Weak");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowExpression* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowExpressionStatement* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowFloatingExpression* node)
				{
					BeginField(L"value");
					WriteToken(node->value);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowForEachStatement* node)
				{
					BeginField(L"collection");
					Print(node->collection.Obj());
					EndField();
					BeginField(L"direction");
					switch (node->direction)
					{
					case vl::glr::workflow::WorkflowForEachDirection::Normal:
						WriteString(L"Normal");
						break;
					case vl::glr::workflow::WorkflowForEachDirection::Reversed:
						WriteString(L"Reversed");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowFormatExpression* node)
				{
					BeginField(L"value");
					WriteToken(node->value);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowFunctionArgument* node)
				{
					BeginField(L"attributes");
					BeginArray();
					for (auto&& listItem : node->attributes)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowFunctionDeclaration* node)
				{
					BeginField(L"anonymity");
					switch (node->anonymity)
					{
					case vl::glr::workflow::WorkflowFunctionAnonymity::Anonymous:
						WriteString(L"Anonymous");
						break;
					case vl::glr::workflow::WorkflowFunctionAnonymity::Named:
						WriteString(L"Named");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"functionKind");
					switch (node->functionKind)
					{
					case vl::glr::workflow::WorkflowFunctionKind::Normal:
						WriteString(L"Normal");
						break;
					case vl::glr::workflow::WorkflowFunctionKind::Override:
						WriteString(L"Override");
						break;
					case vl::glr::workflow::WorkflowFunctionKind::Static:
						WriteString(L"Static");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"returnType");
					Print(node->returnType.Obj());
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowFunctionExpression* node)
				{
					BeginField(L"function");
					Print(node->function.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowFunctionType* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"result");
					Print(node->result.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowGotoStatement* node)
				{
					BeginField(L"label");
					WriteToken(node->label);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowIfExpression* node)
				{
					BeginField(L"condition");
					Print(node->condition.Obj());
					EndField();
					BeginField(L"falseBranch");
					Print(node->falseBranch.Obj());
					EndField();
					BeginField(L"trueBranch");
					Print(node->trueBranch.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowIfStatement* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"falseBranch");
					Print(node->falseBranch.Obj());
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"trueBranch");
					Print(node->trueBranch.Obj());
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowInferExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowIntegerExpression* node)
				{
					BeginField(L"value");
					WriteToken(node->value);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowLetExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"variables");
					BeginArray();
					for (auto&& listItem : node->variables)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowLetVariable* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"value");
					Print(node->value.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowLiteralExpression* node)
				{
					BeginField(L"value");
					switch (node->value)
					{
					case vl::glr::workflow::WorkflowLiteralValue::False:
						WriteString(L"False");
						break;
					case vl::glr::workflow::WorkflowLiteralValue::Null:
						WriteString(L"Null");
						break;
					case vl::glr::workflow::WorkflowLiteralValue::True:
						WriteString(L"True");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowMapType* node)
				{
					BeginField(L"key");
					Print(node->key.Obj());
					EndField();
					BeginField(L"value");
					Print(node->value.Obj());
					EndField();
					BeginField(L"writability");
					switch (node->writability)
					{
					case vl::glr::workflow::WorkflowMapWritability::Readonly:
						WriteString(L"Readonly");
						break;
					case vl::glr::workflow::WorkflowMapWritability::Writable:
						WriteString(L"Writable");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowMemberExpression* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"parent");
					Print(node->parent.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowMixinCastExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowModule* node)
				{
					BeginField(L"declarations");
					BeginArray();
					for (auto&& listItem : node->declarations)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"moduleType");
					switch (node->moduleType)
					{
					case vl::glr::workflow::WorkflowModuleType::Module:
						WriteString(L"Module");
						break;
					case vl::glr::workflow::WorkflowModuleType::Unit:
						WriteString(L"Unit");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"paths");
					BeginArray();
					for (auto&& listItem : node->paths)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowModuleUsingFragment* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowModuleUsingItem* node)
				{
					BeginField(L"fragments");
					BeginArray();
					for (auto&& listItem : node->fragments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowModuleUsingNameFragment* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowModuleUsingPath* node)
				{
					BeginField(L"items");
					BeginArray();
					for (auto&& listItem : node->items)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowModuleUsingWildCardFragment* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowNamespaceDeclaration* node)
				{
					BeginField(L"declarations");
					BeginArray();
					for (auto&& listItem : node->declarations)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowNewClassExpression* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowNewCoroutineExpression* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowNewInterfaceExpression* node)
				{
					BeginField(L"declarations");
					BeginArray();
					for (auto&& listItem : node->declarations)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowNullableType* node)
				{
					BeginField(L"element");
					Print(node->element.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowObservableListType* node)
				{
					BeginField(L"element");
					Print(node->element.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowObserveExpression* node)
				{
					BeginField(L"events");
					BeginArray();
					for (auto&& listItem : node->events)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"observeType");
					switch (node->observeType)
					{
					case vl::glr::workflow::WorkflowObserveType::ExtendedObserve:
						WriteString(L"ExtendedObserve");
						break;
					case vl::glr::workflow::WorkflowObserveType::SimpleObserve:
						WriteString(L"SimpleObserve");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"parent");
					Print(node->parent.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowOrderedLambdaExpression* node)
				{
					BeginField(L"body");
					Print(node->body.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowOrderedNameExpression* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowPredefinedType* node)
				{
					BeginField(L"name");
					switch (node->name)
					{
					case vl::glr::workflow::WorkflowPredefinedTypeName::Bool:
						WriteString(L"Bool");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::Char:
						WriteString(L"Char");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::Double:
						WriteString(L"Double");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::Float:
						WriteString(L"Float");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::Int:
						WriteString(L"Int");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::Interface:
						WriteString(L"Interface");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::Object:
						WriteString(L"Object");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::String:
						WriteString(L"String");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::UInt:
						WriteString(L"UInt");
						break;
					case vl::glr::workflow::WorkflowPredefinedTypeName::Void:
						WriteString(L"Void");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowPropertyDeclaration* node)
				{
					BeginField(L"getter");
					WriteToken(node->getter);
					EndField();
					BeginField(L"setter");
					WriteToken(node->setter);
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
					BeginField(L"valueChangedEvent");
					WriteToken(node->valueChangedEvent);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowRaiseExceptionStatement* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowRangeExpression* node)
				{
					BeginField(L"begin");
					Print(node->begin.Obj());
					EndField();
					BeginField(L"beginBoundary");
					switch (node->beginBoundary)
					{
					case vl::glr::workflow::WorkflowRangeBoundary::Exclusive:
						WriteString(L"Exclusive");
						break;
					case vl::glr::workflow::WorkflowRangeBoundary::Inclusive:
						WriteString(L"Inclusive");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"end");
					Print(node->end.Obj());
					EndField();
					BeginField(L"endBoundary");
					switch (node->endBoundary)
					{
					case vl::glr::workflow::WorkflowRangeBoundary::Exclusive:
						WriteString(L"Exclusive");
						break;
					case vl::glr::workflow::WorkflowRangeBoundary::Inclusive:
						WriteString(L"Inclusive");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowRawPointerType* node)
				{
					BeginField(L"element");
					Print(node->element.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowReferenceExpression* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowReferenceType* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowReturnStatement* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowSetTestingExpression* node)
				{
					BeginField(L"collection");
					Print(node->collection.Obj());
					EndField();
					BeginField(L"element");
					Print(node->element.Obj());
					EndField();
					BeginField(L"test");
					switch (node->test)
					{
					case vl::glr::workflow::WorkflowSetTesting::In:
						WriteString(L"In");
						break;
					case vl::glr::workflow::WorkflowSetTesting::NotIn:
						WriteString(L"NotIn");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowSharedPointerType* node)
				{
					BeginField(L"element");
					Print(node->element.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStateDeclaration* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStateInput* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStateInvokeStatement* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"type");
					switch (node->type)
					{
					case vl::glr::workflow::WorkflowStateInvokeType::Goto:
						WriteString(L"Goto");
						break;
					case vl::glr::workflow::WorkflowStateInvokeType::Push:
						WriteString(L"Push");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStateMachineDeclaration* node)
				{
					BeginField(L"inputs");
					BeginArray();
					for (auto&& listItem : node->inputs)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"states");
					BeginArray();
					for (auto&& listItem : node->states)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStateMachineStatement* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowStateSwitchArgument* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStateSwitchCase* node)
				{
					BeginField(L"arguments");
					BeginArray();
					for (auto&& listItem : node->arguments)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStateSwitchStatement* node)
				{
					BeginField(L"caseBranches");
					BeginArray();
					for (auto&& listItem : node->caseBranches)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"type");
					switch (node->type)
					{
					case vl::glr::workflow::WorkflowStateSwitchType::Default:
						WriteString(L"Default");
						break;
					case vl::glr::workflow::WorkflowStateSwitchType::Ignore:
						WriteString(L"Ignore");
						break;
					case vl::glr::workflow::WorkflowStateSwitchType::IgnoreAndReturn:
						WriteString(L"IgnoreAndReturn");
						break;
					case vl::glr::workflow::WorkflowStateSwitchType::Pass:
						WriteString(L"Pass");
						break;
					case vl::glr::workflow::WorkflowStateSwitchType::PassAndReturn:
						WriteString(L"PassAndReturn");
						break;
					default:
						WriteNull();
					}
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStatement* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowStringExpression* node)
				{
					BeginField(L"value");
					WriteToken(node->value);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStructDeclaration* node)
				{
					BeginField(L"members");
					BeginArray();
					for (auto&& listItem : node->members)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowStructMember* node)
				{
					BeginField(L"attributes");
					BeginArray();
					for (auto&& listItem : node->attributes)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowSwitchCase* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowSwitchStatement* node)
				{
					BeginField(L"caseBranches");
					BeginArray();
					for (auto&& listItem : node->caseBranches)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
					BeginField(L"defaultBranch");
					Print(node->defaultBranch.Obj());
					EndField();
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowThisExpression* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowTopQualifiedExpression* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowTopQualifiedType* node)
				{
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowTryStatement* node)
				{
					BeginField(L"catchStatement");
					Print(node->catchStatement.Obj());
					EndField();
					BeginField(L"finallyStatement");
					Print(node->finallyStatement.Obj());
					EndField();
					BeginField(L"name");
					WriteToken(node->name);
					EndField();
					BeginField(L"protectedStatement");
					Print(node->protectedStatement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowType* node)
				{
				}
				void AstVisitor::PrintFields(WorkflowTypeCastingExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"strategy");
					switch (node->strategy)
					{
					case vl::glr::workflow::WorkflowTypeCastingStrategy::Strong:
						WriteString(L"Strong");
						break;
					case vl::glr::workflow::WorkflowTypeCastingStrategy::Weak:
						WriteString(L"Weak");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowTypeOfExpressionExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowTypeOfTypeExpression* node)
				{
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowTypeTestingExpression* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"test");
					switch (node->test)
					{
					case vl::glr::workflow::WorkflowTypeTesting::IsNotNull:
						WriteString(L"IsNotNull");
						break;
					case vl::glr::workflow::WorkflowTypeTesting::IsNotType:
						WriteString(L"IsNotType");
						break;
					case vl::glr::workflow::WorkflowTypeTesting::IsNull:
						WriteString(L"IsNull");
						break;
					case vl::glr::workflow::WorkflowTypeTesting::IsType:
						WriteString(L"IsType");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowUnaryExpression* node)
				{
					BeginField(L"op");
					switch (node->op)
					{
					case vl::glr::workflow::WorkflowUnaryOperator::Negative:
						WriteString(L"Negative");
						break;
					case vl::glr::workflow::WorkflowUnaryOperator::Not:
						WriteString(L"Not");
						break;
					case vl::glr::workflow::WorkflowUnaryOperator::Positive:
						WriteString(L"Positive");
						break;
					default:
						WriteNull();
					}
					EndField();
					BeginField(L"operand");
					Print(node->operand.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowVariableDeclaration* node)
				{
					BeginField(L"expression");
					Print(node->expression.Obj());
					EndField();
					BeginField(L"type");
					Print(node->type.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowVariableStatement* node)
				{
					BeginField(L"variable");
					Print(node->variable.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowVirtualCfeDeclaration* node)
				{
					BeginField(L"expandedDeclarations");
					BeginArray();
					for (auto&& listItem : node->expandedDeclarations)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowVirtualCfeExpression* node)
				{
					BeginField(L"expandedExpression");
					Print(node->expandedExpression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowVirtualCseDeclaration* node)
				{
					BeginField(L"expandedDeclarations");
					BeginArray();
					for (auto&& listItem : node->expandedDeclarations)
					{
						BeginArrayItem();
						Print(listItem.Obj());
						EndArrayItem();
					}
					EndArray();
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowVirtualCseExpression* node)
				{
					BeginField(L"expandedExpression");
					Print(node->expandedExpression.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowVirtualCseStatement* node)
				{
					BeginField(L"expandedStatement");
					Print(node->expandedStatement.Obj());
					EndField();
				}
				void AstVisitor::PrintFields(WorkflowWhileStatement* node)
				{
					BeginField(L"condition");
					Print(node->condition.Obj());
					EndField();
					BeginField(L"statement");
					Print(node->statement.Obj());
					EndField();
				}

				void AstVisitor::Visit(WorkflowPredefinedType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"PredefinedType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowPredefinedType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowTopQualifiedType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"TopQualifiedType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowTopQualifiedType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowReferenceType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ReferenceType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowReferenceType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowRawPointerType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"RawPointerType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowRawPointerType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowSharedPointerType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"SharedPointerType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowSharedPointerType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowNullableType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"NullableType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowNullableType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowEnumerableType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"EnumerableType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowEnumerableType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowMapType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"MapType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowMapType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowObservableListType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ObservableListType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowObservableListType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowFunctionType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"FunctionType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowFunctionType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowChildType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ChildType", node);
					PrintFields(static_cast<WorkflowType*>(node));
					PrintFields(static_cast<WorkflowChildType*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowThisExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ThisExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowThisExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowTopQualifiedExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"TopQualifiedExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowTopQualifiedExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowReferenceExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ReferenceExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowReferenceExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowOrderedNameExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"OrderedNameExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowOrderedNameExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowOrderedLambdaExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"OrderedLambdaExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowOrderedLambdaExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowMemberExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"MemberExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowMemberExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowChildExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ChildExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowChildExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowLiteralExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"LiteralExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowLiteralExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowFloatingExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"FloatingExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowFloatingExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowIntegerExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"IntegerExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowIntegerExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowStringExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StringExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowStringExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowUnaryExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"UnaryExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowUnaryExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowBinaryExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"BinaryExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowBinaryExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowLetExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"LetExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowLetExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowIfExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"IfExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowIfExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowRangeExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"RangeExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowRangeExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowSetTestingExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"SetTestingExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowSetTestingExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowConstructorExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ConstructorExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowConstructorExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowInferExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"InferExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowInferExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowTypeCastingExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"TypeCastingExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowTypeCastingExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowTypeTestingExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"TypeTestingExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowTypeTestingExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowTypeOfTypeExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"TypeOfTypeExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowTypeOfTypeExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowTypeOfExpressionExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"TypeOfExpressionExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowTypeOfExpressionExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowAttachEventExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"AttachEventExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowAttachEventExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowDetachEventExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"DetachEventExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowDetachEventExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowObserveExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ObserveExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowObserveExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowCallExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"CallExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowCallExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowFunctionExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"FunctionExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowFunctionExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowNewClassExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"NewClassExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowNewClassExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowNewInterfaceExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"NewInterfaceExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowNewInterfaceExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowVirtualCfeExpression* node)
				{
					node->Accept(static_cast<WorkflowVirtualCfeExpression::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowVirtualCseExpression* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseExpression::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowBreakStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"BreakStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowBreakStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowContinueStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ContinueStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowContinueStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowReturnStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ReturnStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowReturnStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowDeleteStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"DeleteStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowDeleteStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowRaiseExceptionStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"RaiseExceptionStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowRaiseExceptionStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowIfStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"IfStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowIfStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowWhileStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"WhileStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowWhileStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowTryStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"TryStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowTryStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowBlockStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"BlockStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowBlockStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowGotoStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"GotoStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowGotoStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowVariableStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"VariableStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowVariableStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowExpressionStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ExpressionStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowExpressionStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowVirtualCseStatement* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowCoroutineStatement* node)
				{
					node->Accept(static_cast<WorkflowCoroutineStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowStateMachineStatement* node)
				{
					node->Accept(static_cast<WorkflowStateMachineStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowNamespaceDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"NamespaceDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowNamespaceDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowFunctionDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"FunctionDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowFunctionDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowVariableDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"VariableDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowVariableDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowEventDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"EventDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowEventDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowPropertyDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"PropertyDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowPropertyDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowConstructorDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ConstructorDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowConstructorDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowDestructorDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"DestructorDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowDestructorDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowClassDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ClassDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowClassDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowEnumDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"EnumDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowEnumDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowStructDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StructDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowStructDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowVirtualCfeDeclaration* node)
				{
					node->Accept(static_cast<WorkflowVirtualCfeDeclaration::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowVirtualCseDeclaration* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseDeclaration::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowAutoPropertyDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"AutoPropertyDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowVirtualCfeDeclaration*>(node));
					PrintFields(static_cast<WorkflowAutoPropertyDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowCastResultInterfaceDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"CastResultInterfaceDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowVirtualCfeDeclaration*>(node));
					PrintFields(static_cast<WorkflowCastResultInterfaceDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowStateMachineDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StateMachineDeclaration", node);
					PrintFields(static_cast<WorkflowDeclaration*>(node));
					PrintFields(static_cast<WorkflowVirtualCseDeclaration*>(node));
					PrintFields(static_cast<WorkflowStateMachineDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowForEachStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ForEachStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowVirtualCseStatement*>(node));
					PrintFields(static_cast<WorkflowForEachStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowSwitchStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"SwitchStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowVirtualCseStatement*>(node));
					PrintFields(static_cast<WorkflowSwitchStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowCoProviderStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"CoProviderStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowVirtualCseStatement*>(node));
					PrintFields(static_cast<WorkflowCoProviderStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowCoPauseStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"CoPauseStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowCoroutineStatement*>(node));
					PrintFields(static_cast<WorkflowCoPauseStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowCoOperatorStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"CoOperatorStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowCoroutineStatement*>(node));
					PrintFields(static_cast<WorkflowCoOperatorStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowStateSwitchStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StateSwitchStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowStateMachineStatement*>(node));
					PrintFields(static_cast<WorkflowStateSwitchStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowStateInvokeStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StateInvokeStatement", node);
					PrintFields(static_cast<WorkflowStatement*>(node));
					PrintFields(static_cast<WorkflowStateMachineStatement*>(node));
					PrintFields(static_cast<WorkflowStateInvokeStatement*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowFormatExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"FormatExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowVirtualCfeExpression*>(node));
					PrintFields(static_cast<WorkflowFormatExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowBindExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"BindExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowVirtualCseExpression*>(node));
					PrintFields(static_cast<WorkflowBindExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowNewCoroutineExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"NewCoroutineExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowVirtualCseExpression*>(node));
					PrintFields(static_cast<WorkflowNewCoroutineExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowMixinCastExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"MixinCastExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowVirtualCseExpression*>(node));
					PrintFields(static_cast<WorkflowMixinCastExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowExpectedTypeCastExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ExpectedTypeCastExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowVirtualCseExpression*>(node));
					PrintFields(static_cast<WorkflowExpectedTypeCastExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowCoOperatorExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"CoOperatorExpression", node);
					PrintFields(static_cast<WorkflowExpression*>(node));
					PrintFields(static_cast<WorkflowVirtualCseExpression*>(node));
					PrintFields(static_cast<WorkflowCoOperatorExpression*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowModuleUsingNameFragment* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ModuleUsingNameFragment", node);
					PrintFields(static_cast<WorkflowModuleUsingFragment*>(node));
					PrintFields(static_cast<WorkflowModuleUsingNameFragment*>(node));
					EndObject();
				}

				void AstVisitor::Visit(WorkflowModuleUsingWildCardFragment* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ModuleUsingWildCardFragment", node);
					PrintFields(static_cast<WorkflowModuleUsingFragment*>(node));
					PrintFields(static_cast<WorkflowModuleUsingWildCardFragment*>(node));
					EndObject();
				}

				AstVisitor::AstVisitor(vl::stream::StreamWriter& _writer)
					: vl::glr::JsonVisitorBase(_writer)
				{
				}

				void AstVisitor::Print(WorkflowType* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					node->Accept(static_cast<WorkflowType::IVisitor*>(this));
				}

				void AstVisitor::Print(WorkflowExpression* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					node->Accept(static_cast<WorkflowExpression::IVisitor*>(this));
				}

				void AstVisitor::Print(WorkflowStatement* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					node->Accept(static_cast<WorkflowStatement::IVisitor*>(this));
				}

				void AstVisitor::Print(WorkflowDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					node->Accept(static_cast<WorkflowDeclaration::IVisitor*>(this));
				}

				void AstVisitor::Print(WorkflowModuleUsingFragment* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					node->Accept(static_cast<WorkflowModuleUsingFragment::IVisitor*>(this));
				}

				void AstVisitor::Print(WorkflowAttribute* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"Attribute", node);
					PrintFields(static_cast<WorkflowAttribute*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowFunctionArgument* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"FunctionArgument", node);
					PrintFields(static_cast<WorkflowFunctionArgument*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowBaseConstructorCall* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"BaseConstructorCall", node);
					PrintFields(static_cast<WorkflowBaseConstructorCall*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowEnumItemIntersection* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"EnumItemIntersection", node);
					PrintFields(static_cast<WorkflowEnumItemIntersection*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowEnumItem* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"EnumItem", node);
					PrintFields(static_cast<WorkflowEnumItem*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowStructMember* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StructMember", node);
					PrintFields(static_cast<WorkflowStructMember*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowStateInput* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StateInput", node);
					PrintFields(static_cast<WorkflowStateInput*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowStateDeclaration* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StateDeclaration", node);
					PrintFields(static_cast<WorkflowStateDeclaration*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowSwitchCase* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"SwitchCase", node);
					PrintFields(static_cast<WorkflowSwitchCase*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowStateSwitchArgument* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StateSwitchArgument", node);
					PrintFields(static_cast<WorkflowStateSwitchArgument*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowStateSwitchCase* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"StateSwitchCase", node);
					PrintFields(static_cast<WorkflowStateSwitchCase*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowLetVariable* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"LetVariable", node);
					PrintFields(static_cast<WorkflowLetVariable*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowConstructorArgument* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ConstructorArgument", node);
					PrintFields(static_cast<WorkflowConstructorArgument*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowModuleUsingItem* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ModuleUsingItem", node);
					PrintFields(static_cast<WorkflowModuleUsingItem*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowModuleUsingPath* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"ModuleUsingPath", node);
					PrintFields(static_cast<WorkflowModuleUsingPath*>(node));
					EndObject();
				}

				void AstVisitor::Print(WorkflowModule* node)
				{
					if (!node)
					{
						WriteNull();
						return;
					}
					BeginObject();
					WriteType(L"Module", node);
					PrintFields(static_cast<WorkflowModule*>(node));
					EndObject();
				}

			}
		}
	}
}
