/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_JSON_VISITOR
#define VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_JSON_VISITOR

#include "WorkflowAst.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace json_visitor
			{
				/// <summary>A JSON visitor, overriding all abstract methods with AST to JSON serialization code.</summary>
				class AstVisitor
					: public vl::glr::JsonVisitorBase
					, protected virtual WorkflowType::IVisitor
					, protected virtual WorkflowExpression::IVisitor
					, protected virtual WorkflowStatement::IVisitor
					, protected virtual WorkflowDeclaration::IVisitor
					, protected virtual WorkflowVirtualCfeDeclaration::IVisitor
					, protected virtual WorkflowVirtualCseDeclaration::IVisitor
					, protected virtual WorkflowVirtualCseStatement::IVisitor
					, protected virtual WorkflowCoroutineStatement::IVisitor
					, protected virtual WorkflowStateMachineStatement::IVisitor
					, protected virtual WorkflowVirtualCfeExpression::IVisitor
					, protected virtual WorkflowVirtualCseExpression::IVisitor
					, protected virtual WorkflowModuleUsingFragment::IVisitor
				{
				protected:
					virtual void PrintFields(WorkflowAttachEventExpression* node);
					virtual void PrintFields(WorkflowAttribute* node);
					virtual void PrintFields(WorkflowAutoPropertyDeclaration* node);
					virtual void PrintFields(WorkflowBaseConstructorCall* node);
					virtual void PrintFields(WorkflowBinaryExpression* node);
					virtual void PrintFields(WorkflowBindExpression* node);
					virtual void PrintFields(WorkflowBlockStatement* node);
					virtual void PrintFields(WorkflowBreakStatement* node);
					virtual void PrintFields(WorkflowCallExpression* node);
					virtual void PrintFields(WorkflowCastResultInterfaceDeclaration* node);
					virtual void PrintFields(WorkflowChildExpression* node);
					virtual void PrintFields(WorkflowChildType* node);
					virtual void PrintFields(WorkflowClassDeclaration* node);
					virtual void PrintFields(WorkflowClassMember* node);
					virtual void PrintFields(WorkflowCoOperatorExpression* node);
					virtual void PrintFields(WorkflowCoOperatorStatement* node);
					virtual void PrintFields(WorkflowCoPauseStatement* node);
					virtual void PrintFields(WorkflowCoProviderStatement* node);
					virtual void PrintFields(WorkflowConstructorArgument* node);
					virtual void PrintFields(WorkflowConstructorDeclaration* node);
					virtual void PrintFields(WorkflowConstructorExpression* node);
					virtual void PrintFields(WorkflowContinueStatement* node);
					virtual void PrintFields(WorkflowCoroutineStatement* node);
					virtual void PrintFields(WorkflowDeclaration* node);
					virtual void PrintFields(WorkflowDeleteStatement* node);
					virtual void PrintFields(WorkflowDestructorDeclaration* node);
					virtual void PrintFields(WorkflowDetachEventExpression* node);
					virtual void PrintFields(WorkflowEnumDeclaration* node);
					virtual void PrintFields(WorkflowEnumItem* node);
					virtual void PrintFields(WorkflowEnumItemIntersection* node);
					virtual void PrintFields(WorkflowEnumerableType* node);
					virtual void PrintFields(WorkflowEventDeclaration* node);
					virtual void PrintFields(WorkflowExpectedTypeCastExpression* node);
					virtual void PrintFields(WorkflowExpression* node);
					virtual void PrintFields(WorkflowExpressionStatement* node);
					virtual void PrintFields(WorkflowFloatingExpression* node);
					virtual void PrintFields(WorkflowForEachStatement* node);
					virtual void PrintFields(WorkflowFormatExpression* node);
					virtual void PrintFields(WorkflowFunctionArgument* node);
					virtual void PrintFields(WorkflowFunctionDeclaration* node);
					virtual void PrintFields(WorkflowFunctionExpression* node);
					virtual void PrintFields(WorkflowFunctionType* node);
					virtual void PrintFields(WorkflowGotoStatement* node);
					virtual void PrintFields(WorkflowIfExpression* node);
					virtual void PrintFields(WorkflowIfStatement* node);
					virtual void PrintFields(WorkflowInferExpression* node);
					virtual void PrintFields(WorkflowIntegerExpression* node);
					virtual void PrintFields(WorkflowLetExpression* node);
					virtual void PrintFields(WorkflowLetVariable* node);
					virtual void PrintFields(WorkflowLiteralExpression* node);
					virtual void PrintFields(WorkflowMapType* node);
					virtual void PrintFields(WorkflowMemberExpression* node);
					virtual void PrintFields(WorkflowMixinCastExpression* node);
					virtual void PrintFields(WorkflowModule* node);
					virtual void PrintFields(WorkflowModuleUsingFragment* node);
					virtual void PrintFields(WorkflowModuleUsingItem* node);
					virtual void PrintFields(WorkflowModuleUsingNameFragment* node);
					virtual void PrintFields(WorkflowModuleUsingPath* node);
					virtual void PrintFields(WorkflowModuleUsingWildCardFragment* node);
					virtual void PrintFields(WorkflowNamespaceDeclaration* node);
					virtual void PrintFields(WorkflowNewClassExpression* node);
					virtual void PrintFields(WorkflowNewCoroutineExpression* node);
					virtual void PrintFields(WorkflowNewInterfaceExpression* node);
					virtual void PrintFields(WorkflowNullableType* node);
					virtual void PrintFields(WorkflowObservableListType* node);
					virtual void PrintFields(WorkflowObserveExpression* node);
					virtual void PrintFields(WorkflowOrderedLambdaExpression* node);
					virtual void PrintFields(WorkflowOrderedNameExpression* node);
					virtual void PrintFields(WorkflowPredefinedType* node);
					virtual void PrintFields(WorkflowPropertyDeclaration* node);
					virtual void PrintFields(WorkflowRaiseExceptionStatement* node);
					virtual void PrintFields(WorkflowRangeExpression* node);
					virtual void PrintFields(WorkflowRawPointerType* node);
					virtual void PrintFields(WorkflowReferenceExpression* node);
					virtual void PrintFields(WorkflowReferenceType* node);
					virtual void PrintFields(WorkflowReturnStatement* node);
					virtual void PrintFields(WorkflowSetTestingExpression* node);
					virtual void PrintFields(WorkflowSharedPointerType* node);
					virtual void PrintFields(WorkflowStateDeclaration* node);
					virtual void PrintFields(WorkflowStateInput* node);
					virtual void PrintFields(WorkflowStateInvokeStatement* node);
					virtual void PrintFields(WorkflowStateMachineDeclaration* node);
					virtual void PrintFields(WorkflowStateMachineStatement* node);
					virtual void PrintFields(WorkflowStateSwitchArgument* node);
					virtual void PrintFields(WorkflowStateSwitchCase* node);
					virtual void PrintFields(WorkflowStateSwitchStatement* node);
					virtual void PrintFields(WorkflowStatement* node);
					virtual void PrintFields(WorkflowStringExpression* node);
					virtual void PrintFields(WorkflowStructDeclaration* node);
					virtual void PrintFields(WorkflowStructMember* node);
					virtual void PrintFields(WorkflowSwitchCase* node);
					virtual void PrintFields(WorkflowSwitchStatement* node);
					virtual void PrintFields(WorkflowThisExpression* node);
					virtual void PrintFields(WorkflowTopQualifiedExpression* node);
					virtual void PrintFields(WorkflowTopQualifiedType* node);
					virtual void PrintFields(WorkflowTryStatement* node);
					virtual void PrintFields(WorkflowType* node);
					virtual void PrintFields(WorkflowTypeCastingExpression* node);
					virtual void PrintFields(WorkflowTypeOfExpressionExpression* node);
					virtual void PrintFields(WorkflowTypeOfTypeExpression* node);
					virtual void PrintFields(WorkflowTypeTestingExpression* node);
					virtual void PrintFields(WorkflowUnaryExpression* node);
					virtual void PrintFields(WorkflowVariableDeclaration* node);
					virtual void PrintFields(WorkflowVariableStatement* node);
					virtual void PrintFields(WorkflowVirtualCfeDeclaration* node);
					virtual void PrintFields(WorkflowVirtualCfeExpression* node);
					virtual void PrintFields(WorkflowVirtualCseDeclaration* node);
					virtual void PrintFields(WorkflowVirtualCseExpression* node);
					virtual void PrintFields(WorkflowVirtualCseStatement* node);
					virtual void PrintFields(WorkflowWhileStatement* node);

				protected:
					void Visit(WorkflowPredefinedType* node) override;
					void Visit(WorkflowTopQualifiedType* node) override;
					void Visit(WorkflowReferenceType* node) override;
					void Visit(WorkflowRawPointerType* node) override;
					void Visit(WorkflowSharedPointerType* node) override;
					void Visit(WorkflowNullableType* node) override;
					void Visit(WorkflowEnumerableType* node) override;
					void Visit(WorkflowMapType* node) override;
					void Visit(WorkflowObservableListType* node) override;
					void Visit(WorkflowFunctionType* node) override;
					void Visit(WorkflowChildType* node) override;

					void Visit(WorkflowThisExpression* node) override;
					void Visit(WorkflowTopQualifiedExpression* node) override;
					void Visit(WorkflowReferenceExpression* node) override;
					void Visit(WorkflowOrderedNameExpression* node) override;
					void Visit(WorkflowOrderedLambdaExpression* node) override;
					void Visit(WorkflowMemberExpression* node) override;
					void Visit(WorkflowChildExpression* node) override;
					void Visit(WorkflowLiteralExpression* node) override;
					void Visit(WorkflowFloatingExpression* node) override;
					void Visit(WorkflowIntegerExpression* node) override;
					void Visit(WorkflowStringExpression* node) override;
					void Visit(WorkflowUnaryExpression* node) override;
					void Visit(WorkflowBinaryExpression* node) override;
					void Visit(WorkflowLetExpression* node) override;
					void Visit(WorkflowIfExpression* node) override;
					void Visit(WorkflowRangeExpression* node) override;
					void Visit(WorkflowSetTestingExpression* node) override;
					void Visit(WorkflowConstructorExpression* node) override;
					void Visit(WorkflowInferExpression* node) override;
					void Visit(WorkflowTypeCastingExpression* node) override;
					void Visit(WorkflowTypeTestingExpression* node) override;
					void Visit(WorkflowTypeOfTypeExpression* node) override;
					void Visit(WorkflowTypeOfExpressionExpression* node) override;
					void Visit(WorkflowAttachEventExpression* node) override;
					void Visit(WorkflowDetachEventExpression* node) override;
					void Visit(WorkflowObserveExpression* node) override;
					void Visit(WorkflowCallExpression* node) override;
					void Visit(WorkflowFunctionExpression* node) override;
					void Visit(WorkflowNewClassExpression* node) override;
					void Visit(WorkflowNewInterfaceExpression* node) override;
					void Visit(WorkflowVirtualCfeExpression* node) override;
					void Visit(WorkflowVirtualCseExpression* node) override;

					void Visit(WorkflowBreakStatement* node) override;
					void Visit(WorkflowContinueStatement* node) override;
					void Visit(WorkflowReturnStatement* node) override;
					void Visit(WorkflowDeleteStatement* node) override;
					void Visit(WorkflowRaiseExceptionStatement* node) override;
					void Visit(WorkflowIfStatement* node) override;
					void Visit(WorkflowWhileStatement* node) override;
					void Visit(WorkflowTryStatement* node) override;
					void Visit(WorkflowBlockStatement* node) override;
					void Visit(WorkflowGotoStatement* node) override;
					void Visit(WorkflowVariableStatement* node) override;
					void Visit(WorkflowExpressionStatement* node) override;
					void Visit(WorkflowVirtualCseStatement* node) override;
					void Visit(WorkflowCoroutineStatement* node) override;
					void Visit(WorkflowStateMachineStatement* node) override;

					void Visit(WorkflowNamespaceDeclaration* node) override;
					void Visit(WorkflowFunctionDeclaration* node) override;
					void Visit(WorkflowVariableDeclaration* node) override;
					void Visit(WorkflowEventDeclaration* node) override;
					void Visit(WorkflowPropertyDeclaration* node) override;
					void Visit(WorkflowConstructorDeclaration* node) override;
					void Visit(WorkflowDestructorDeclaration* node) override;
					void Visit(WorkflowClassDeclaration* node) override;
					void Visit(WorkflowEnumDeclaration* node) override;
					void Visit(WorkflowStructDeclaration* node) override;
					void Visit(WorkflowVirtualCfeDeclaration* node) override;
					void Visit(WorkflowVirtualCseDeclaration* node) override;

					void Visit(WorkflowAutoPropertyDeclaration* node) override;
					void Visit(WorkflowCastResultInterfaceDeclaration* node) override;

					void Visit(WorkflowStateMachineDeclaration* node) override;

					void Visit(WorkflowForEachStatement* node) override;
					void Visit(WorkflowSwitchStatement* node) override;
					void Visit(WorkflowCoProviderStatement* node) override;

					void Visit(WorkflowCoPauseStatement* node) override;
					void Visit(WorkflowCoOperatorStatement* node) override;

					void Visit(WorkflowStateSwitchStatement* node) override;
					void Visit(WorkflowStateInvokeStatement* node) override;

					void Visit(WorkflowFormatExpression* node) override;

					void Visit(WorkflowBindExpression* node) override;
					void Visit(WorkflowNewCoroutineExpression* node) override;
					void Visit(WorkflowMixinCastExpression* node) override;
					void Visit(WorkflowExpectedTypeCastExpression* node) override;
					void Visit(WorkflowCoOperatorExpression* node) override;

					void Visit(WorkflowModuleUsingNameFragment* node) override;
					void Visit(WorkflowModuleUsingWildCardFragment* node) override;

				public:
					AstVisitor(vl::stream::StreamWriter& _writer);

					void Print(WorkflowType* node);
					void Print(WorkflowExpression* node);
					void Print(WorkflowStatement* node);
					void Print(WorkflowDeclaration* node);
					void Print(WorkflowModuleUsingFragment* node);
					void Print(WorkflowClassMember* node);
					void Print(WorkflowAttribute* node);
					void Print(WorkflowFunctionArgument* node);
					void Print(WorkflowBaseConstructorCall* node);
					void Print(WorkflowEnumItemIntersection* node);
					void Print(WorkflowEnumItem* node);
					void Print(WorkflowStructMember* node);
					void Print(WorkflowStateInput* node);
					void Print(WorkflowStateDeclaration* node);
					void Print(WorkflowSwitchCase* node);
					void Print(WorkflowStateSwitchArgument* node);
					void Print(WorkflowStateSwitchCase* node);
					void Print(WorkflowLetVariable* node);
					void Print(WorkflowConstructorArgument* node);
					void Print(WorkflowModuleUsingItem* node);
					void Print(WorkflowModuleUsingPath* node);
					void Print(WorkflowModule* node);
				};
			}
		}
	}
}
#endif