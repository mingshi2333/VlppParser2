/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Traverse.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace traverse_visitor
			{
				void AstVisitor::Traverse(vl::glr::ParsingToken& token) {}
				void AstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
				void AstVisitor::Traverse(WorkflowAttachEventExpression* node) {}
				void AstVisitor::Traverse(WorkflowAttribute* node) {}
				void AstVisitor::Traverse(WorkflowAutoPropertyDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowBaseConstructorCall* node) {}
				void AstVisitor::Traverse(WorkflowBinaryExpression* node) {}
				void AstVisitor::Traverse(WorkflowBindExpression* node) {}
				void AstVisitor::Traverse(WorkflowBlockStatement* node) {}
				void AstVisitor::Traverse(WorkflowBreakStatement* node) {}
				void AstVisitor::Traverse(WorkflowCallExpression* node) {}
				void AstVisitor::Traverse(WorkflowCastResultInterfaceDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowChildExpression* node) {}
				void AstVisitor::Traverse(WorkflowChildType* node) {}
				void AstVisitor::Traverse(WorkflowClassDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowCoOperatorExpression* node) {}
				void AstVisitor::Traverse(WorkflowCoOperatorStatement* node) {}
				void AstVisitor::Traverse(WorkflowCoPauseStatement* node) {}
				void AstVisitor::Traverse(WorkflowCoProviderStatement* node) {}
				void AstVisitor::Traverse(WorkflowConstructorArgument* node) {}
				void AstVisitor::Traverse(WorkflowConstructorDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowConstructorExpression* node) {}
				void AstVisitor::Traverse(WorkflowContinueStatement* node) {}
				void AstVisitor::Traverse(WorkflowCoroutineStatement* node) {}
				void AstVisitor::Traverse(WorkflowDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowDeleteStatement* node) {}
				void AstVisitor::Traverse(WorkflowDestructorDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowDetachEventExpression* node) {}
				void AstVisitor::Traverse(WorkflowEnumDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowEnumItem* node) {}
				void AstVisitor::Traverse(WorkflowEnumItemIntersection* node) {}
				void AstVisitor::Traverse(WorkflowEnumerableType* node) {}
				void AstVisitor::Traverse(WorkflowEventDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowExpectedTypeCastExpression* node) {}
				void AstVisitor::Traverse(WorkflowExpression* node) {}
				void AstVisitor::Traverse(WorkflowExpressionStatement* node) {}
				void AstVisitor::Traverse(WorkflowFloatingExpression* node) {}
				void AstVisitor::Traverse(WorkflowForEachStatement* node) {}
				void AstVisitor::Traverse(WorkflowFormatExpression* node) {}
				void AstVisitor::Traverse(WorkflowFunctionArgument* node) {}
				void AstVisitor::Traverse(WorkflowFunctionDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowFunctionExpression* node) {}
				void AstVisitor::Traverse(WorkflowFunctionType* node) {}
				void AstVisitor::Traverse(WorkflowGotoStatement* node) {}
				void AstVisitor::Traverse(WorkflowIfExpression* node) {}
				void AstVisitor::Traverse(WorkflowIfStatement* node) {}
				void AstVisitor::Traverse(WorkflowInferExpression* node) {}
				void AstVisitor::Traverse(WorkflowIntegerExpression* node) {}
				void AstVisitor::Traverse(WorkflowLetExpression* node) {}
				void AstVisitor::Traverse(WorkflowLetVariable* node) {}
				void AstVisitor::Traverse(WorkflowLiteralExpression* node) {}
				void AstVisitor::Traverse(WorkflowMapType* node) {}
				void AstVisitor::Traverse(WorkflowMemberExpression* node) {}
				void AstVisitor::Traverse(WorkflowMixinCastExpression* node) {}
				void AstVisitor::Traverse(WorkflowModule* node) {}
				void AstVisitor::Traverse(WorkflowModuleUsingFragment* node) {}
				void AstVisitor::Traverse(WorkflowModuleUsingItem* node) {}
				void AstVisitor::Traverse(WorkflowModuleUsingNameFragment* node) {}
				void AstVisitor::Traverse(WorkflowModuleUsingPath* node) {}
				void AstVisitor::Traverse(WorkflowModuleUsingWildCardFragment* node) {}
				void AstVisitor::Traverse(WorkflowNamespaceDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowNewClassExpression* node) {}
				void AstVisitor::Traverse(WorkflowNewCoroutineExpression* node) {}
				void AstVisitor::Traverse(WorkflowNewInterfaceExpression* node) {}
				void AstVisitor::Traverse(WorkflowNullableType* node) {}
				void AstVisitor::Traverse(WorkflowObservableListType* node) {}
				void AstVisitor::Traverse(WorkflowObserveExpression* node) {}
				void AstVisitor::Traverse(WorkflowOrderedLambdaExpression* node) {}
				void AstVisitor::Traverse(WorkflowOrderedNameExpression* node) {}
				void AstVisitor::Traverse(WorkflowPredefinedType* node) {}
				void AstVisitor::Traverse(WorkflowPropertyDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowRaiseExceptionStatement* node) {}
				void AstVisitor::Traverse(WorkflowRangeExpression* node) {}
				void AstVisitor::Traverse(WorkflowRawPointerType* node) {}
				void AstVisitor::Traverse(WorkflowReferenceExpression* node) {}
				void AstVisitor::Traverse(WorkflowReferenceType* node) {}
				void AstVisitor::Traverse(WorkflowReturnStatement* node) {}
				void AstVisitor::Traverse(WorkflowSetTestingExpression* node) {}
				void AstVisitor::Traverse(WorkflowSharedPointerType* node) {}
				void AstVisitor::Traverse(WorkflowStateDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowStateInput* node) {}
				void AstVisitor::Traverse(WorkflowStateInvokeStatement* node) {}
				void AstVisitor::Traverse(WorkflowStateMachineDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowStateMachineStatement* node) {}
				void AstVisitor::Traverse(WorkflowStateSwitchArgument* node) {}
				void AstVisitor::Traverse(WorkflowStateSwitchCase* node) {}
				void AstVisitor::Traverse(WorkflowStateSwitchStatement* node) {}
				void AstVisitor::Traverse(WorkflowStatement* node) {}
				void AstVisitor::Traverse(WorkflowStringExpression* node) {}
				void AstVisitor::Traverse(WorkflowStructDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowStructMember* node) {}
				void AstVisitor::Traverse(WorkflowSwitchCase* node) {}
				void AstVisitor::Traverse(WorkflowSwitchStatement* node) {}
				void AstVisitor::Traverse(WorkflowThisExpression* node) {}
				void AstVisitor::Traverse(WorkflowTopQualifiedExpression* node) {}
				void AstVisitor::Traverse(WorkflowTopQualifiedType* node) {}
				void AstVisitor::Traverse(WorkflowTryStatement* node) {}
				void AstVisitor::Traverse(WorkflowType* node) {}
				void AstVisitor::Traverse(WorkflowTypeCastingExpression* node) {}
				void AstVisitor::Traverse(WorkflowTypeOfExpressionExpression* node) {}
				void AstVisitor::Traverse(WorkflowTypeOfTypeExpression* node) {}
				void AstVisitor::Traverse(WorkflowTypeTestingExpression* node) {}
				void AstVisitor::Traverse(WorkflowUnaryExpression* node) {}
				void AstVisitor::Traverse(WorkflowVariableDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowVariableStatement* node) {}
				void AstVisitor::Traverse(WorkflowVirtualCfeDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowVirtualCfeExpression* node) {}
				void AstVisitor::Traverse(WorkflowVirtualCseDeclaration* node) {}
				void AstVisitor::Traverse(WorkflowVirtualCseExpression* node) {}
				void AstVisitor::Traverse(WorkflowVirtualCseStatement* node) {}
				void AstVisitor::Traverse(WorkflowWhileStatement* node) {}

				void AstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
				void AstVisitor::Finishing(WorkflowAttachEventExpression* node) {}
				void AstVisitor::Finishing(WorkflowAttribute* node) {}
				void AstVisitor::Finishing(WorkflowAutoPropertyDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowBaseConstructorCall* node) {}
				void AstVisitor::Finishing(WorkflowBinaryExpression* node) {}
				void AstVisitor::Finishing(WorkflowBindExpression* node) {}
				void AstVisitor::Finishing(WorkflowBlockStatement* node) {}
				void AstVisitor::Finishing(WorkflowBreakStatement* node) {}
				void AstVisitor::Finishing(WorkflowCallExpression* node) {}
				void AstVisitor::Finishing(WorkflowCastResultInterfaceDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowChildExpression* node) {}
				void AstVisitor::Finishing(WorkflowChildType* node) {}
				void AstVisitor::Finishing(WorkflowClassDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowCoOperatorExpression* node) {}
				void AstVisitor::Finishing(WorkflowCoOperatorStatement* node) {}
				void AstVisitor::Finishing(WorkflowCoPauseStatement* node) {}
				void AstVisitor::Finishing(WorkflowCoProviderStatement* node) {}
				void AstVisitor::Finishing(WorkflowConstructorArgument* node) {}
				void AstVisitor::Finishing(WorkflowConstructorDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowConstructorExpression* node) {}
				void AstVisitor::Finishing(WorkflowContinueStatement* node) {}
				void AstVisitor::Finishing(WorkflowCoroutineStatement* node) {}
				void AstVisitor::Finishing(WorkflowDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowDeleteStatement* node) {}
				void AstVisitor::Finishing(WorkflowDestructorDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowDetachEventExpression* node) {}
				void AstVisitor::Finishing(WorkflowEnumDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowEnumItem* node) {}
				void AstVisitor::Finishing(WorkflowEnumItemIntersection* node) {}
				void AstVisitor::Finishing(WorkflowEnumerableType* node) {}
				void AstVisitor::Finishing(WorkflowEventDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowExpectedTypeCastExpression* node) {}
				void AstVisitor::Finishing(WorkflowExpression* node) {}
				void AstVisitor::Finishing(WorkflowExpressionStatement* node) {}
				void AstVisitor::Finishing(WorkflowFloatingExpression* node) {}
				void AstVisitor::Finishing(WorkflowForEachStatement* node) {}
				void AstVisitor::Finishing(WorkflowFormatExpression* node) {}
				void AstVisitor::Finishing(WorkflowFunctionArgument* node) {}
				void AstVisitor::Finishing(WorkflowFunctionDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowFunctionExpression* node) {}
				void AstVisitor::Finishing(WorkflowFunctionType* node) {}
				void AstVisitor::Finishing(WorkflowGotoStatement* node) {}
				void AstVisitor::Finishing(WorkflowIfExpression* node) {}
				void AstVisitor::Finishing(WorkflowIfStatement* node) {}
				void AstVisitor::Finishing(WorkflowInferExpression* node) {}
				void AstVisitor::Finishing(WorkflowIntegerExpression* node) {}
				void AstVisitor::Finishing(WorkflowLetExpression* node) {}
				void AstVisitor::Finishing(WorkflowLetVariable* node) {}
				void AstVisitor::Finishing(WorkflowLiteralExpression* node) {}
				void AstVisitor::Finishing(WorkflowMapType* node) {}
				void AstVisitor::Finishing(WorkflowMemberExpression* node) {}
				void AstVisitor::Finishing(WorkflowMixinCastExpression* node) {}
				void AstVisitor::Finishing(WorkflowModule* node) {}
				void AstVisitor::Finishing(WorkflowModuleUsingFragment* node) {}
				void AstVisitor::Finishing(WorkflowModuleUsingItem* node) {}
				void AstVisitor::Finishing(WorkflowModuleUsingNameFragment* node) {}
				void AstVisitor::Finishing(WorkflowModuleUsingPath* node) {}
				void AstVisitor::Finishing(WorkflowModuleUsingWildCardFragment* node) {}
				void AstVisitor::Finishing(WorkflowNamespaceDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowNewClassExpression* node) {}
				void AstVisitor::Finishing(WorkflowNewCoroutineExpression* node) {}
				void AstVisitor::Finishing(WorkflowNewInterfaceExpression* node) {}
				void AstVisitor::Finishing(WorkflowNullableType* node) {}
				void AstVisitor::Finishing(WorkflowObservableListType* node) {}
				void AstVisitor::Finishing(WorkflowObserveExpression* node) {}
				void AstVisitor::Finishing(WorkflowOrderedLambdaExpression* node) {}
				void AstVisitor::Finishing(WorkflowOrderedNameExpression* node) {}
				void AstVisitor::Finishing(WorkflowPredefinedType* node) {}
				void AstVisitor::Finishing(WorkflowPropertyDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowRaiseExceptionStatement* node) {}
				void AstVisitor::Finishing(WorkflowRangeExpression* node) {}
				void AstVisitor::Finishing(WorkflowRawPointerType* node) {}
				void AstVisitor::Finishing(WorkflowReferenceExpression* node) {}
				void AstVisitor::Finishing(WorkflowReferenceType* node) {}
				void AstVisitor::Finishing(WorkflowReturnStatement* node) {}
				void AstVisitor::Finishing(WorkflowSetTestingExpression* node) {}
				void AstVisitor::Finishing(WorkflowSharedPointerType* node) {}
				void AstVisitor::Finishing(WorkflowStateDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowStateInput* node) {}
				void AstVisitor::Finishing(WorkflowStateInvokeStatement* node) {}
				void AstVisitor::Finishing(WorkflowStateMachineDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowStateMachineStatement* node) {}
				void AstVisitor::Finishing(WorkflowStateSwitchArgument* node) {}
				void AstVisitor::Finishing(WorkflowStateSwitchCase* node) {}
				void AstVisitor::Finishing(WorkflowStateSwitchStatement* node) {}
				void AstVisitor::Finishing(WorkflowStatement* node) {}
				void AstVisitor::Finishing(WorkflowStringExpression* node) {}
				void AstVisitor::Finishing(WorkflowStructDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowStructMember* node) {}
				void AstVisitor::Finishing(WorkflowSwitchCase* node) {}
				void AstVisitor::Finishing(WorkflowSwitchStatement* node) {}
				void AstVisitor::Finishing(WorkflowThisExpression* node) {}
				void AstVisitor::Finishing(WorkflowTopQualifiedExpression* node) {}
				void AstVisitor::Finishing(WorkflowTopQualifiedType* node) {}
				void AstVisitor::Finishing(WorkflowTryStatement* node) {}
				void AstVisitor::Finishing(WorkflowType* node) {}
				void AstVisitor::Finishing(WorkflowTypeCastingExpression* node) {}
				void AstVisitor::Finishing(WorkflowTypeOfExpressionExpression* node) {}
				void AstVisitor::Finishing(WorkflowTypeOfTypeExpression* node) {}
				void AstVisitor::Finishing(WorkflowTypeTestingExpression* node) {}
				void AstVisitor::Finishing(WorkflowUnaryExpression* node) {}
				void AstVisitor::Finishing(WorkflowVariableDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowVariableStatement* node) {}
				void AstVisitor::Finishing(WorkflowVirtualCfeDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowVirtualCfeExpression* node) {}
				void AstVisitor::Finishing(WorkflowVirtualCseDeclaration* node) {}
				void AstVisitor::Finishing(WorkflowVirtualCseExpression* node) {}
				void AstVisitor::Finishing(WorkflowVirtualCseStatement* node) {}
				void AstVisitor::Finishing(WorkflowWhileStatement* node) {}

				void AstVisitor::Visit(WorkflowPredefinedType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowPredefinedType*>(node));
					Finishing(static_cast<WorkflowPredefinedType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowTopQualifiedType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowTopQualifiedType*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowTopQualifiedType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowReferenceType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowReferenceType*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowReferenceType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowRawPointerType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowRawPointerType*>(node));
					InspectInto(node->element.Obj());
					Finishing(static_cast<WorkflowRawPointerType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowSharedPointerType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowSharedPointerType*>(node));
					InspectInto(node->element.Obj());
					Finishing(static_cast<WorkflowSharedPointerType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowNullableType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowNullableType*>(node));
					InspectInto(node->element.Obj());
					Finishing(static_cast<WorkflowNullableType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowEnumerableType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowEnumerableType*>(node));
					InspectInto(node->element.Obj());
					Finishing(static_cast<WorkflowEnumerableType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowMapType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowMapType*>(node));
					InspectInto(node->key.Obj());
					InspectInto(node->value.Obj());
					Finishing(static_cast<WorkflowMapType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowObservableListType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowObservableListType*>(node));
					InspectInto(node->element.Obj());
					Finishing(static_cast<WorkflowObservableListType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowFunctionType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowFunctionType*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->result.Obj());
					Finishing(static_cast<WorkflowFunctionType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowChildType* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowType*>(node));
					Traverse(static_cast<WorkflowChildType*>(node));
					Traverse(node->name);
					InspectInto(node->parent.Obj());
					Finishing(static_cast<WorkflowChildType*>(node));
					Finishing(static_cast<WorkflowType*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowThisExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowThisExpression*>(node));
					Finishing(static_cast<WorkflowThisExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowTopQualifiedExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowTopQualifiedExpression*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowTopQualifiedExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowReferenceExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowReferenceExpression*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowReferenceExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowOrderedNameExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowOrderedNameExpression*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowOrderedNameExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowOrderedLambdaExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowOrderedLambdaExpression*>(node));
					InspectInto(node->body.Obj());
					Finishing(static_cast<WorkflowOrderedLambdaExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowMemberExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowMemberExpression*>(node));
					Traverse(node->name);
					InspectInto(node->parent.Obj());
					Finishing(static_cast<WorkflowMemberExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowChildExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowChildExpression*>(node));
					Traverse(node->name);
					InspectInto(node->parent.Obj());
					Finishing(static_cast<WorkflowChildExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowLiteralExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowLiteralExpression*>(node));
					Finishing(static_cast<WorkflowLiteralExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowFloatingExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowFloatingExpression*>(node));
					Traverse(node->value);
					Finishing(static_cast<WorkflowFloatingExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowIntegerExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowIntegerExpression*>(node));
					Traverse(node->value);
					Finishing(static_cast<WorkflowIntegerExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowStringExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowStringExpression*>(node));
					Traverse(node->value);
					Finishing(static_cast<WorkflowStringExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowUnaryExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowUnaryExpression*>(node));
					InspectInto(node->operand.Obj());
					Finishing(static_cast<WorkflowUnaryExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowBinaryExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowBinaryExpression*>(node));
					InspectInto(node->first.Obj());
					InspectInto(node->second.Obj());
					Finishing(static_cast<WorkflowBinaryExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowLetExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowLetExpression*>(node));
					InspectInto(node->expression.Obj());
					for (auto&& listItem : node->variables)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<WorkflowLetExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowIfExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowIfExpression*>(node));
					InspectInto(node->condition.Obj());
					InspectInto(node->falseBranch.Obj());
					InspectInto(node->trueBranch.Obj());
					Finishing(static_cast<WorkflowIfExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowRangeExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowRangeExpression*>(node));
					InspectInto(node->begin.Obj());
					InspectInto(node->end.Obj());
					Finishing(static_cast<WorkflowRangeExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowSetTestingExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowSetTestingExpression*>(node));
					InspectInto(node->collection.Obj());
					InspectInto(node->element.Obj());
					Finishing(static_cast<WorkflowSetTestingExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowConstructorExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowConstructorExpression*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<WorkflowConstructorExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowInferExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowInferExpression*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowInferExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowTypeCastingExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowTypeCastingExpression*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowTypeCastingExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowTypeTestingExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowTypeTestingExpression*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowTypeTestingExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowTypeOfTypeExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowTypeOfTypeExpression*>(node));
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowTypeOfTypeExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowTypeOfExpressionExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowTypeOfExpressionExpression*>(node));
					InspectInto(node->expression.Obj());
					Finishing(static_cast<WorkflowTypeOfExpressionExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowAttachEventExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowAttachEventExpression*>(node));
					InspectInto(node->event.Obj());
					InspectInto(node->function.Obj());
					Finishing(static_cast<WorkflowAttachEventExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowDetachEventExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowDetachEventExpression*>(node));
					InspectInto(node->event.Obj());
					InspectInto(node->handler.Obj());
					Finishing(static_cast<WorkflowDetachEventExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowObserveExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowObserveExpression*>(node));
					for (auto&& listItem : node->events)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->expression.Obj());
					Traverse(node->name);
					InspectInto(node->parent.Obj());
					Finishing(static_cast<WorkflowObserveExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowCallExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowCallExpression*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->function.Obj());
					Finishing(static_cast<WorkflowCallExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowFunctionExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowFunctionExpression*>(node));
					InspectInto(node->function.Obj());
					Finishing(static_cast<WorkflowFunctionExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowNewClassExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowNewClassExpression*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowNewClassExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowNewInterfaceExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowNewInterfaceExpression*>(node));
					for (auto&& listItem : node->declarations)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowNewInterfaceExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowVirtualCfeExpression* node)
				{
					node->Accept(static_cast<WorkflowVirtualCfeExpression::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowVirtualCseExpression* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseExpression::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowBreakStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowBreakStatement*>(node));
					Finishing(static_cast<WorkflowBreakStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowContinueStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowContinueStatement*>(node));
					Finishing(static_cast<WorkflowContinueStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowReturnStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowReturnStatement*>(node));
					InspectInto(node->expression.Obj());
					Finishing(static_cast<WorkflowReturnStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowDeleteStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowDeleteStatement*>(node));
					InspectInto(node->expression.Obj());
					Finishing(static_cast<WorkflowDeleteStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowRaiseExceptionStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowRaiseExceptionStatement*>(node));
					InspectInto(node->expression.Obj());
					Finishing(static_cast<WorkflowRaiseExceptionStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowIfStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowIfStatement*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->falseBranch.Obj());
					Traverse(node->name);
					InspectInto(node->trueBranch.Obj());
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowIfStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowWhileStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowWhileStatement*>(node));
					InspectInto(node->condition.Obj());
					InspectInto(node->statement.Obj());
					Finishing(static_cast<WorkflowWhileStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowTryStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowTryStatement*>(node));
					InspectInto(node->catchStatement.Obj());
					InspectInto(node->finallyStatement.Obj());
					Traverse(node->name);
					InspectInto(node->protectedStatement.Obj());
					Finishing(static_cast<WorkflowTryStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowBlockStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowBlockStatement*>(node));
					Traverse(node->endLabel);
					for (auto&& listItem : node->statements)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<WorkflowBlockStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowGotoStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowGotoStatement*>(node));
					Traverse(node->label);
					Finishing(static_cast<WorkflowGotoStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowVariableStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowVariableStatement*>(node));
					InspectInto(node->variable.Obj());
					Finishing(static_cast<WorkflowVariableStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowExpressionStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowExpressionStatement*>(node));
					InspectInto(node->expression.Obj());
					Finishing(static_cast<WorkflowExpressionStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowVirtualCseStatement* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowCoroutineStatement* node)
				{
					node->Accept(static_cast<WorkflowCoroutineStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowStateMachineStatement* node)
				{
					node->Accept(static_cast<WorkflowStateMachineStatement::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowNamespaceDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowNamespaceDeclaration*>(node));
					for (auto&& listItem : node->declarations)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowNamespaceDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowFunctionDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowFunctionDeclaration*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->returnType.Obj());
					InspectInto(node->statement.Obj());
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowFunctionDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowVariableDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowVariableDeclaration*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->type.Obj());
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowVariableDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowEventDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowEventDeclaration*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowEventDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowPropertyDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowPropertyDeclaration*>(node));
					Traverse(node->getter);
					Traverse(node->setter);
					InspectInto(node->type.Obj());
					Traverse(node->valueChangedEvent);
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowPropertyDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowConstructorDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowConstructorDeclaration*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->baseConstructorCalls)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->statement.Obj());
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowConstructorDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowDestructorDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowDestructorDeclaration*>(node));
					InspectInto(node->statement.Obj());
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowDestructorDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowClassDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowClassDeclaration*>(node));
					for (auto&& listItem : node->baseTypes)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->declarations)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowClassDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowEnumDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowEnumDeclaration*>(node));
					for (auto&& listItem : node->items)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowEnumDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowStructDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowStructDeclaration*>(node));
					for (auto&& listItem : node->members)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowStructDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowVirtualCfeDeclaration* node)
				{
					node->Accept(static_cast<WorkflowVirtualCfeDeclaration::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowVirtualCseDeclaration* node)
				{
					node->Accept(static_cast<WorkflowVirtualCseDeclaration::IVisitor*>(this));
				}

				void AstVisitor::Visit(WorkflowAutoPropertyDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowVirtualCfeDeclaration*>(node));
					Traverse(static_cast<WorkflowAutoPropertyDeclaration*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->type.Obj());
					for (auto&& listItem : node->expandedDeclarations)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowAutoPropertyDeclaration*>(node));
					Finishing(static_cast<WorkflowVirtualCfeDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowCastResultInterfaceDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowVirtualCfeDeclaration*>(node));
					Traverse(static_cast<WorkflowCastResultInterfaceDeclaration*>(node));
					InspectInto(node->baseType.Obj());
					InspectInto(node->elementType.Obj());
					for (auto&& listItem : node->expandedDeclarations)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowCastResultInterfaceDeclaration*>(node));
					Finishing(static_cast<WorkflowVirtualCfeDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowStateMachineDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowDeclaration*>(node));
					Traverse(static_cast<WorkflowVirtualCseDeclaration*>(node));
					Traverse(static_cast<WorkflowStateMachineDeclaration*>(node));
					for (auto&& listItem : node->inputs)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->states)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->expandedDeclarations)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowStateMachineDeclaration*>(node));
					Finishing(static_cast<WorkflowVirtualCseDeclaration*>(node));
					Finishing(static_cast<WorkflowDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowForEachStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowVirtualCseStatement*>(node));
					Traverse(static_cast<WorkflowForEachStatement*>(node));
					InspectInto(node->collection.Obj());
					Traverse(node->name);
					InspectInto(node->statement.Obj());
					InspectInto(node->expandedStatement.Obj());
					Finishing(static_cast<WorkflowForEachStatement*>(node));
					Finishing(static_cast<WorkflowVirtualCseStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowSwitchStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowVirtualCseStatement*>(node));
					Traverse(static_cast<WorkflowSwitchStatement*>(node));
					for (auto&& listItem : node->caseBranches)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->defaultBranch.Obj());
					InspectInto(node->expression.Obj());
					InspectInto(node->expandedStatement.Obj());
					Finishing(static_cast<WorkflowSwitchStatement*>(node));
					Finishing(static_cast<WorkflowVirtualCseStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowCoProviderStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowVirtualCseStatement*>(node));
					Traverse(static_cast<WorkflowCoProviderStatement*>(node));
					Traverse(node->name);
					InspectInto(node->statement.Obj());
					InspectInto(node->expandedStatement.Obj());
					Finishing(static_cast<WorkflowCoProviderStatement*>(node));
					Finishing(static_cast<WorkflowVirtualCseStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowCoPauseStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowCoroutineStatement*>(node));
					Traverse(static_cast<WorkflowCoPauseStatement*>(node));
					InspectInto(node->statement.Obj());
					Finishing(static_cast<WorkflowCoPauseStatement*>(node));
					Finishing(static_cast<WorkflowCoroutineStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowCoOperatorStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowCoroutineStatement*>(node));
					Traverse(static_cast<WorkflowCoOperatorStatement*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->opName);
					Traverse(node->varName);
					Finishing(static_cast<WorkflowCoOperatorStatement*>(node));
					Finishing(static_cast<WorkflowCoroutineStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowStateSwitchStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowStateMachineStatement*>(node));
					Traverse(static_cast<WorkflowStateSwitchStatement*>(node));
					for (auto&& listItem : node->caseBranches)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<WorkflowStateSwitchStatement*>(node));
					Finishing(static_cast<WorkflowStateMachineStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowStateInvokeStatement* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStatement*>(node));
					Traverse(static_cast<WorkflowStateMachineStatement*>(node));
					Traverse(static_cast<WorkflowStateInvokeStatement*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowStateInvokeStatement*>(node));
					Finishing(static_cast<WorkflowStateMachineStatement*>(node));
					Finishing(static_cast<WorkflowStatement*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowFormatExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowVirtualCfeExpression*>(node));
					Traverse(static_cast<WorkflowFormatExpression*>(node));
					Traverse(node->value);
					InspectInto(node->expandedExpression.Obj());
					Finishing(static_cast<WorkflowFormatExpression*>(node));
					Finishing(static_cast<WorkflowVirtualCfeExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowBindExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowVirtualCseExpression*>(node));
					Traverse(static_cast<WorkflowBindExpression*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->expandedExpression.Obj());
					Finishing(static_cast<WorkflowBindExpression*>(node));
					Finishing(static_cast<WorkflowVirtualCseExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowNewCoroutineExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowVirtualCseExpression*>(node));
					Traverse(static_cast<WorkflowNewCoroutineExpression*>(node));
					Traverse(node->name);
					InspectInto(node->statement.Obj());
					InspectInto(node->expandedExpression.Obj());
					Finishing(static_cast<WorkflowNewCoroutineExpression*>(node));
					Finishing(static_cast<WorkflowVirtualCseExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowMixinCastExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowVirtualCseExpression*>(node));
					Traverse(static_cast<WorkflowMixinCastExpression*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->type.Obj());
					InspectInto(node->expandedExpression.Obj());
					Finishing(static_cast<WorkflowMixinCastExpression*>(node));
					Finishing(static_cast<WorkflowVirtualCseExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowExpectedTypeCastExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowVirtualCseExpression*>(node));
					Traverse(static_cast<WorkflowExpectedTypeCastExpression*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->expandedExpression.Obj());
					Finishing(static_cast<WorkflowExpectedTypeCastExpression*>(node));
					Finishing(static_cast<WorkflowVirtualCseExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowCoOperatorExpression* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowExpression*>(node));
					Traverse(static_cast<WorkflowVirtualCseExpression*>(node));
					Traverse(static_cast<WorkflowCoOperatorExpression*>(node));
					Traverse(node->name);
					InspectInto(node->expandedExpression.Obj());
					Finishing(static_cast<WorkflowCoOperatorExpression*>(node));
					Finishing(static_cast<WorkflowVirtualCseExpression*>(node));
					Finishing(static_cast<WorkflowExpression*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowModuleUsingNameFragment* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowModuleUsingFragment*>(node));
					Traverse(static_cast<WorkflowModuleUsingNameFragment*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowModuleUsingNameFragment*>(node));
					Finishing(static_cast<WorkflowModuleUsingFragment*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::Visit(WorkflowModuleUsingWildCardFragment* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowModuleUsingFragment*>(node));
					Traverse(static_cast<WorkflowModuleUsingWildCardFragment*>(node));
					Finishing(static_cast<WorkflowModuleUsingWildCardFragment*>(node));
					Finishing(static_cast<WorkflowModuleUsingFragment*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowType* node)
				{
					if (!node) return;
					node->Accept(static_cast<WorkflowType::IVisitor*>(this));
				}

				void AstVisitor::InspectInto(WorkflowExpression* node)
				{
					if (!node) return;
					node->Accept(static_cast<WorkflowExpression::IVisitor*>(this));
				}

				void AstVisitor::InspectInto(WorkflowStatement* node)
				{
					if (!node) return;
					node->Accept(static_cast<WorkflowStatement::IVisitor*>(this));
				}

				void AstVisitor::InspectInto(WorkflowDeclaration* node)
				{
					if (!node) return;
					node->Accept(static_cast<WorkflowDeclaration::IVisitor*>(this));
				}

				void AstVisitor::InspectInto(WorkflowModuleUsingFragment* node)
				{
					if (!node) return;
					node->Accept(static_cast<WorkflowModuleUsingFragment::IVisitor*>(this));
				}

				void AstVisitor::InspectInto(WorkflowAttribute* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowAttribute*>(node));
					Traverse(node->category);
					Traverse(node->name);
					InspectInto(node->value.Obj());
					Finishing(static_cast<WorkflowAttribute*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowFunctionArgument* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowFunctionArgument*>(node));
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowFunctionArgument*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowBaseConstructorCall* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowBaseConstructorCall*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowBaseConstructorCall*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowEnumItemIntersection* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowEnumItemIntersection*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowEnumItemIntersection*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowEnumItem* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowEnumItem*>(node));
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					for (auto&& listItem : node->intersections)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Traverse(node->number);
					Finishing(static_cast<WorkflowEnumItem*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowStructMember* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStructMember*>(node));
					for (auto&& listItem : node->attributes)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					InspectInto(node->type.Obj());
					Finishing(static_cast<WorkflowStructMember*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowStateInput* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStateInput*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					Finishing(static_cast<WorkflowStateInput*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowStateDeclaration* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStateDeclaration*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					InspectInto(node->statement.Obj());
					Finishing(static_cast<WorkflowStateDeclaration*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowSwitchCase* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowSwitchCase*>(node));
					InspectInto(node->expression.Obj());
					InspectInto(node->statement.Obj());
					Finishing(static_cast<WorkflowSwitchCase*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowStateSwitchArgument* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStateSwitchArgument*>(node));
					Traverse(node->name);
					Finishing(static_cast<WorkflowStateSwitchArgument*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowStateSwitchCase* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowStateSwitchCase*>(node));
					for (auto&& listItem : node->arguments)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					InspectInto(node->statement.Obj());
					Finishing(static_cast<WorkflowStateSwitchCase*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowLetVariable* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowLetVariable*>(node));
					Traverse(node->name);
					InspectInto(node->value.Obj());
					Finishing(static_cast<WorkflowLetVariable*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowConstructorArgument* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowConstructorArgument*>(node));
					InspectInto(node->key.Obj());
					InspectInto(node->value.Obj());
					Finishing(static_cast<WorkflowConstructorArgument*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowModuleUsingItem* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowModuleUsingItem*>(node));
					for (auto&& listItem : node->fragments)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<WorkflowModuleUsingItem*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowModuleUsingPath* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowModuleUsingPath*>(node));
					for (auto&& listItem : node->items)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<WorkflowModuleUsingPath*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

				void AstVisitor::InspectInto(WorkflowModule* node)
				{
					if (!node) return;
					Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
					Traverse(static_cast<WorkflowModule*>(node));
					for (auto&& listItem : node->declarations)
					{
						InspectInto(listItem.Obj());
					}
					Traverse(node->name);
					for (auto&& listItem : node->paths)
					{
						InspectInto(listItem.Obj());
					}
					Finishing(static_cast<WorkflowModule*>(node));
					Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
				}

			}
		}
	}
}
