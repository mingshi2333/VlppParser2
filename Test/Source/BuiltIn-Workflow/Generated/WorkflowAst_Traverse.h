/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_TRAVERSE_VISITOR
#define VCZH_PARSER2_BUILTIN_WORKFLOW_AST_AST_TRAVERSE_VISITOR

#include "WorkflowAst.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			namespace traverse_visitor
			{
				/// <summary>A traverse visitor, overriding all abstract methods with AST visiting code.</summary>
				class AstVisitor
					: public vl::Object
					, protected virtual WorkflowType::IVisitor
					, protected virtual WorkflowExpression::IVisitor
					, protected virtual WorkflowStatement::IVisitor
					, protected virtual WorkflowDeclaration::IVisitor
					, protected virtual WorkflowVirtualCfeDeclaration::IVisitor
					, protected virtual WorkflowVirtualCseDeclaration::IVisitor
					, protected virtual WorkflowVirtualCseStatement::IVisitor
					, protected virtual WorkflowCoroutineStatement::IVisitor
					, protected virtual WorkflowStateMachineStatement::IVisitor
					, protected virtual WorkflowVirtualCfeExpression::IVisitor
					, protected virtual WorkflowVirtualCseExpression::IVisitor
					, protected virtual WorkflowModuleUsingFragment::IVisitor
				{
				protected:
					virtual void Traverse(vl::glr::ParsingToken& token);
					virtual void Traverse(vl::glr::ParsingAstBase* node);
					virtual void Traverse(WorkflowAttachEventExpression* node);
					virtual void Traverse(WorkflowAttribute* node);
					virtual void Traverse(WorkflowAutoPropertyDeclaration* node);
					virtual void Traverse(WorkflowBaseConstructorCall* node);
					virtual void Traverse(WorkflowBinaryExpression* node);
					virtual void Traverse(WorkflowBindExpression* node);
					virtual void Traverse(WorkflowBlockStatement* node);
					virtual void Traverse(WorkflowBreakStatement* node);
					virtual void Traverse(WorkflowCallExpression* node);
					virtual void Traverse(WorkflowCastResultInterfaceDeclaration* node);
					virtual void Traverse(WorkflowChildExpression* node);
					virtual void Traverse(WorkflowChildType* node);
					virtual void Traverse(WorkflowClassDeclaration* node);
					virtual void Traverse(WorkflowClassMember* node);
					virtual void Traverse(WorkflowCoOperatorExpression* node);
					virtual void Traverse(WorkflowCoOperatorStatement* node);
					virtual void Traverse(WorkflowCoPauseStatement* node);
					virtual void Traverse(WorkflowCoProviderStatement* node);
					virtual void Traverse(WorkflowConstructorArgument* node);
					virtual void Traverse(WorkflowConstructorDeclaration* node);
					virtual void Traverse(WorkflowConstructorExpression* node);
					virtual void Traverse(WorkflowContinueStatement* node);
					virtual void Traverse(WorkflowCoroutineStatement* node);
					virtual void Traverse(WorkflowDeclaration* node);
					virtual void Traverse(WorkflowDeleteStatement* node);
					virtual void Traverse(WorkflowDestructorDeclaration* node);
					virtual void Traverse(WorkflowDetachEventExpression* node);
					virtual void Traverse(WorkflowEnumDeclaration* node);
					virtual void Traverse(WorkflowEnumItem* node);
					virtual void Traverse(WorkflowEnumItemIntersection* node);
					virtual void Traverse(WorkflowEnumerableType* node);
					virtual void Traverse(WorkflowEventDeclaration* node);
					virtual void Traverse(WorkflowExpectedTypeCastExpression* node);
					virtual void Traverse(WorkflowExpression* node);
					virtual void Traverse(WorkflowExpressionStatement* node);
					virtual void Traverse(WorkflowFloatingExpression* node);
					virtual void Traverse(WorkflowForEachStatement* node);
					virtual void Traverse(WorkflowFormatExpression* node);
					virtual void Traverse(WorkflowFunctionArgument* node);
					virtual void Traverse(WorkflowFunctionDeclaration* node);
					virtual void Traverse(WorkflowFunctionExpression* node);
					virtual void Traverse(WorkflowFunctionType* node);
					virtual void Traverse(WorkflowGotoStatement* node);
					virtual void Traverse(WorkflowIfExpression* node);
					virtual void Traverse(WorkflowIfStatement* node);
					virtual void Traverse(WorkflowInferExpression* node);
					virtual void Traverse(WorkflowIntegerExpression* node);
					virtual void Traverse(WorkflowLetExpression* node);
					virtual void Traverse(WorkflowLetVariable* node);
					virtual void Traverse(WorkflowLiteralExpression* node);
					virtual void Traverse(WorkflowMapType* node);
					virtual void Traverse(WorkflowMemberExpression* node);
					virtual void Traverse(WorkflowMixinCastExpression* node);
					virtual void Traverse(WorkflowModule* node);
					virtual void Traverse(WorkflowModuleUsingFragment* node);
					virtual void Traverse(WorkflowModuleUsingItem* node);
					virtual void Traverse(WorkflowModuleUsingNameFragment* node);
					virtual void Traverse(WorkflowModuleUsingPath* node);
					virtual void Traverse(WorkflowModuleUsingWildCardFragment* node);
					virtual void Traverse(WorkflowNamespaceDeclaration* node);
					virtual void Traverse(WorkflowNewClassExpression* node);
					virtual void Traverse(WorkflowNewCoroutineExpression* node);
					virtual void Traverse(WorkflowNewInterfaceExpression* node);
					virtual void Traverse(WorkflowNullableType* node);
					virtual void Traverse(WorkflowObservableListType* node);
					virtual void Traverse(WorkflowObserveExpression* node);
					virtual void Traverse(WorkflowOrderedLambdaExpression* node);
					virtual void Traverse(WorkflowOrderedNameExpression* node);
					virtual void Traverse(WorkflowPredefinedType* node);
					virtual void Traverse(WorkflowPropertyDeclaration* node);
					virtual void Traverse(WorkflowRaiseExceptionStatement* node);
					virtual void Traverse(WorkflowRangeExpression* node);
					virtual void Traverse(WorkflowRawPointerType* node);
					virtual void Traverse(WorkflowReferenceExpression* node);
					virtual void Traverse(WorkflowReferenceType* node);
					virtual void Traverse(WorkflowReturnStatement* node);
					virtual void Traverse(WorkflowSetTestingExpression* node);
					virtual void Traverse(WorkflowSharedPointerType* node);
					virtual void Traverse(WorkflowStateDeclaration* node);
					virtual void Traverse(WorkflowStateInput* node);
					virtual void Traverse(WorkflowStateInvokeStatement* node);
					virtual void Traverse(WorkflowStateMachineDeclaration* node);
					virtual void Traverse(WorkflowStateMachineStatement* node);
					virtual void Traverse(WorkflowStateSwitchArgument* node);
					virtual void Traverse(WorkflowStateSwitchCase* node);
					virtual void Traverse(WorkflowStateSwitchStatement* node);
					virtual void Traverse(WorkflowStatement* node);
					virtual void Traverse(WorkflowStringExpression* node);
					virtual void Traverse(WorkflowStructDeclaration* node);
					virtual void Traverse(WorkflowStructMember* node);
					virtual void Traverse(WorkflowSwitchCase* node);
					virtual void Traverse(WorkflowSwitchStatement* node);
					virtual void Traverse(WorkflowThisExpression* node);
					virtual void Traverse(WorkflowTopQualifiedExpression* node);
					virtual void Traverse(WorkflowTopQualifiedType* node);
					virtual void Traverse(WorkflowTryStatement* node);
					virtual void Traverse(WorkflowType* node);
					virtual void Traverse(WorkflowTypeCastingExpression* node);
					virtual void Traverse(WorkflowTypeOfExpressionExpression* node);
					virtual void Traverse(WorkflowTypeOfTypeExpression* node);
					virtual void Traverse(WorkflowTypeTestingExpression* node);
					virtual void Traverse(WorkflowUnaryExpression* node);
					virtual void Traverse(WorkflowVariableDeclaration* node);
					virtual void Traverse(WorkflowVariableStatement* node);
					virtual void Traverse(WorkflowVirtualCfeDeclaration* node);
					virtual void Traverse(WorkflowVirtualCfeExpression* node);
					virtual void Traverse(WorkflowVirtualCseDeclaration* node);
					virtual void Traverse(WorkflowVirtualCseExpression* node);
					virtual void Traverse(WorkflowVirtualCseStatement* node);
					virtual void Traverse(WorkflowWhileStatement* node);

				protected:
					virtual void Finishing(vl::glr::ParsingAstBase* node);
					virtual void Finishing(WorkflowAttachEventExpression* node);
					virtual void Finishing(WorkflowAttribute* node);
					virtual void Finishing(WorkflowAutoPropertyDeclaration* node);
					virtual void Finishing(WorkflowBaseConstructorCall* node);
					virtual void Finishing(WorkflowBinaryExpression* node);
					virtual void Finishing(WorkflowBindExpression* node);
					virtual void Finishing(WorkflowBlockStatement* node);
					virtual void Finishing(WorkflowBreakStatement* node);
					virtual void Finishing(WorkflowCallExpression* node);
					virtual void Finishing(WorkflowCastResultInterfaceDeclaration* node);
					virtual void Finishing(WorkflowChildExpression* node);
					virtual void Finishing(WorkflowChildType* node);
					virtual void Finishing(WorkflowClassDeclaration* node);
					virtual void Finishing(WorkflowClassMember* node);
					virtual void Finishing(WorkflowCoOperatorExpression* node);
					virtual void Finishing(WorkflowCoOperatorStatement* node);
					virtual void Finishing(WorkflowCoPauseStatement* node);
					virtual void Finishing(WorkflowCoProviderStatement* node);
					virtual void Finishing(WorkflowConstructorArgument* node);
					virtual void Finishing(WorkflowConstructorDeclaration* node);
					virtual void Finishing(WorkflowConstructorExpression* node);
					virtual void Finishing(WorkflowContinueStatement* node);
					virtual void Finishing(WorkflowCoroutineStatement* node);
					virtual void Finishing(WorkflowDeclaration* node);
					virtual void Finishing(WorkflowDeleteStatement* node);
					virtual void Finishing(WorkflowDestructorDeclaration* node);
					virtual void Finishing(WorkflowDetachEventExpression* node);
					virtual void Finishing(WorkflowEnumDeclaration* node);
					virtual void Finishing(WorkflowEnumItem* node);
					virtual void Finishing(WorkflowEnumItemIntersection* node);
					virtual void Finishing(WorkflowEnumerableType* node);
					virtual void Finishing(WorkflowEventDeclaration* node);
					virtual void Finishing(WorkflowExpectedTypeCastExpression* node);
					virtual void Finishing(WorkflowExpression* node);
					virtual void Finishing(WorkflowExpressionStatement* node);
					virtual void Finishing(WorkflowFloatingExpression* node);
					virtual void Finishing(WorkflowForEachStatement* node);
					virtual void Finishing(WorkflowFormatExpression* node);
					virtual void Finishing(WorkflowFunctionArgument* node);
					virtual void Finishing(WorkflowFunctionDeclaration* node);
					virtual void Finishing(WorkflowFunctionExpression* node);
					virtual void Finishing(WorkflowFunctionType* node);
					virtual void Finishing(WorkflowGotoStatement* node);
					virtual void Finishing(WorkflowIfExpression* node);
					virtual void Finishing(WorkflowIfStatement* node);
					virtual void Finishing(WorkflowInferExpression* node);
					virtual void Finishing(WorkflowIntegerExpression* node);
					virtual void Finishing(WorkflowLetExpression* node);
					virtual void Finishing(WorkflowLetVariable* node);
					virtual void Finishing(WorkflowLiteralExpression* node);
					virtual void Finishing(WorkflowMapType* node);
					virtual void Finishing(WorkflowMemberExpression* node);
					virtual void Finishing(WorkflowMixinCastExpression* node);
					virtual void Finishing(WorkflowModule* node);
					virtual void Finishing(WorkflowModuleUsingFragment* node);
					virtual void Finishing(WorkflowModuleUsingItem* node);
					virtual void Finishing(WorkflowModuleUsingNameFragment* node);
					virtual void Finishing(WorkflowModuleUsingPath* node);
					virtual void Finishing(WorkflowModuleUsingWildCardFragment* node);
					virtual void Finishing(WorkflowNamespaceDeclaration* node);
					virtual void Finishing(WorkflowNewClassExpression* node);
					virtual void Finishing(WorkflowNewCoroutineExpression* node);
					virtual void Finishing(WorkflowNewInterfaceExpression* node);
					virtual void Finishing(WorkflowNullableType* node);
					virtual void Finishing(WorkflowObservableListType* node);
					virtual void Finishing(WorkflowObserveExpression* node);
					virtual void Finishing(WorkflowOrderedLambdaExpression* node);
					virtual void Finishing(WorkflowOrderedNameExpression* node);
					virtual void Finishing(WorkflowPredefinedType* node);
					virtual void Finishing(WorkflowPropertyDeclaration* node);
					virtual void Finishing(WorkflowRaiseExceptionStatement* node);
					virtual void Finishing(WorkflowRangeExpression* node);
					virtual void Finishing(WorkflowRawPointerType* node);
					virtual void Finishing(WorkflowReferenceExpression* node);
					virtual void Finishing(WorkflowReferenceType* node);
					virtual void Finishing(WorkflowReturnStatement* node);
					virtual void Finishing(WorkflowSetTestingExpression* node);
					virtual void Finishing(WorkflowSharedPointerType* node);
					virtual void Finishing(WorkflowStateDeclaration* node);
					virtual void Finishing(WorkflowStateInput* node);
					virtual void Finishing(WorkflowStateInvokeStatement* node);
					virtual void Finishing(WorkflowStateMachineDeclaration* node);
					virtual void Finishing(WorkflowStateMachineStatement* node);
					virtual void Finishing(WorkflowStateSwitchArgument* node);
					virtual void Finishing(WorkflowStateSwitchCase* node);
					virtual void Finishing(WorkflowStateSwitchStatement* node);
					virtual void Finishing(WorkflowStatement* node);
					virtual void Finishing(WorkflowStringExpression* node);
					virtual void Finishing(WorkflowStructDeclaration* node);
					virtual void Finishing(WorkflowStructMember* node);
					virtual void Finishing(WorkflowSwitchCase* node);
					virtual void Finishing(WorkflowSwitchStatement* node);
					virtual void Finishing(WorkflowThisExpression* node);
					virtual void Finishing(WorkflowTopQualifiedExpression* node);
					virtual void Finishing(WorkflowTopQualifiedType* node);
					virtual void Finishing(WorkflowTryStatement* node);
					virtual void Finishing(WorkflowType* node);
					virtual void Finishing(WorkflowTypeCastingExpression* node);
					virtual void Finishing(WorkflowTypeOfExpressionExpression* node);
					virtual void Finishing(WorkflowTypeOfTypeExpression* node);
					virtual void Finishing(WorkflowTypeTestingExpression* node);
					virtual void Finishing(WorkflowUnaryExpression* node);
					virtual void Finishing(WorkflowVariableDeclaration* node);
					virtual void Finishing(WorkflowVariableStatement* node);
					virtual void Finishing(WorkflowVirtualCfeDeclaration* node);
					virtual void Finishing(WorkflowVirtualCfeExpression* node);
					virtual void Finishing(WorkflowVirtualCseDeclaration* node);
					virtual void Finishing(WorkflowVirtualCseExpression* node);
					virtual void Finishing(WorkflowVirtualCseStatement* node);
					virtual void Finishing(WorkflowWhileStatement* node);

				protected:
					void Visit(WorkflowPredefinedType* node) override;
					void Visit(WorkflowTopQualifiedType* node) override;
					void Visit(WorkflowReferenceType* node) override;
					void Visit(WorkflowRawPointerType* node) override;
					void Visit(WorkflowSharedPointerType* node) override;
					void Visit(WorkflowNullableType* node) override;
					void Visit(WorkflowEnumerableType* node) override;
					void Visit(WorkflowMapType* node) override;
					void Visit(WorkflowObservableListType* node) override;
					void Visit(WorkflowFunctionType* node) override;
					void Visit(WorkflowChildType* node) override;

					void Visit(WorkflowThisExpression* node) override;
					void Visit(WorkflowTopQualifiedExpression* node) override;
					void Visit(WorkflowReferenceExpression* node) override;
					void Visit(WorkflowOrderedNameExpression* node) override;
					void Visit(WorkflowOrderedLambdaExpression* node) override;
					void Visit(WorkflowMemberExpression* node) override;
					void Visit(WorkflowChildExpression* node) override;
					void Visit(WorkflowLiteralExpression* node) override;
					void Visit(WorkflowFloatingExpression* node) override;
					void Visit(WorkflowIntegerExpression* node) override;
					void Visit(WorkflowStringExpression* node) override;
					void Visit(WorkflowUnaryExpression* node) override;
					void Visit(WorkflowBinaryExpression* node) override;
					void Visit(WorkflowLetExpression* node) override;
					void Visit(WorkflowIfExpression* node) override;
					void Visit(WorkflowRangeExpression* node) override;
					void Visit(WorkflowSetTestingExpression* node) override;
					void Visit(WorkflowConstructorExpression* node) override;
					void Visit(WorkflowInferExpression* node) override;
					void Visit(WorkflowTypeCastingExpression* node) override;
					void Visit(WorkflowTypeTestingExpression* node) override;
					void Visit(WorkflowTypeOfTypeExpression* node) override;
					void Visit(WorkflowTypeOfExpressionExpression* node) override;
					void Visit(WorkflowAttachEventExpression* node) override;
					void Visit(WorkflowDetachEventExpression* node) override;
					void Visit(WorkflowObserveExpression* node) override;
					void Visit(WorkflowCallExpression* node) override;
					void Visit(WorkflowFunctionExpression* node) override;
					void Visit(WorkflowNewClassExpression* node) override;
					void Visit(WorkflowNewInterfaceExpression* node) override;
					void Visit(WorkflowVirtualCfeExpression* node) override;
					void Visit(WorkflowVirtualCseExpression* node) override;

					void Visit(WorkflowBreakStatement* node) override;
					void Visit(WorkflowContinueStatement* node) override;
					void Visit(WorkflowReturnStatement* node) override;
					void Visit(WorkflowDeleteStatement* node) override;
					void Visit(WorkflowRaiseExceptionStatement* node) override;
					void Visit(WorkflowIfStatement* node) override;
					void Visit(WorkflowWhileStatement* node) override;
					void Visit(WorkflowTryStatement* node) override;
					void Visit(WorkflowBlockStatement* node) override;
					void Visit(WorkflowGotoStatement* node) override;
					void Visit(WorkflowVariableStatement* node) override;
					void Visit(WorkflowExpressionStatement* node) override;
					void Visit(WorkflowVirtualCseStatement* node) override;
					void Visit(WorkflowCoroutineStatement* node) override;
					void Visit(WorkflowStateMachineStatement* node) override;

					void Visit(WorkflowNamespaceDeclaration* node) override;
					void Visit(WorkflowFunctionDeclaration* node) override;
					void Visit(WorkflowVariableDeclaration* node) override;
					void Visit(WorkflowEventDeclaration* node) override;
					void Visit(WorkflowPropertyDeclaration* node) override;
					void Visit(WorkflowConstructorDeclaration* node) override;
					void Visit(WorkflowDestructorDeclaration* node) override;
					void Visit(WorkflowClassDeclaration* node) override;
					void Visit(WorkflowEnumDeclaration* node) override;
					void Visit(WorkflowStructDeclaration* node) override;
					void Visit(WorkflowVirtualCfeDeclaration* node) override;
					void Visit(WorkflowVirtualCseDeclaration* node) override;

					void Visit(WorkflowAutoPropertyDeclaration* node) override;
					void Visit(WorkflowCastResultInterfaceDeclaration* node) override;

					void Visit(WorkflowStateMachineDeclaration* node) override;

					void Visit(WorkflowForEachStatement* node) override;
					void Visit(WorkflowSwitchStatement* node) override;
					void Visit(WorkflowCoProviderStatement* node) override;

					void Visit(WorkflowCoPauseStatement* node) override;
					void Visit(WorkflowCoOperatorStatement* node) override;

					void Visit(WorkflowStateSwitchStatement* node) override;
					void Visit(WorkflowStateInvokeStatement* node) override;

					void Visit(WorkflowFormatExpression* node) override;

					void Visit(WorkflowBindExpression* node) override;
					void Visit(WorkflowNewCoroutineExpression* node) override;
					void Visit(WorkflowMixinCastExpression* node) override;
					void Visit(WorkflowExpectedTypeCastExpression* node) override;
					void Visit(WorkflowCoOperatorExpression* node) override;

					void Visit(WorkflowModuleUsingNameFragment* node) override;
					void Visit(WorkflowModuleUsingWildCardFragment* node) override;

				public:
					void InspectInto(WorkflowType* node);
					void InspectInto(WorkflowExpression* node);
					void InspectInto(WorkflowStatement* node);
					void InspectInto(WorkflowDeclaration* node);
					void InspectInto(WorkflowModuleUsingFragment* node);
					void InspectInto(WorkflowClassMember* node);
					void InspectInto(WorkflowAttribute* node);
					void InspectInto(WorkflowFunctionArgument* node);
					void InspectInto(WorkflowBaseConstructorCall* node);
					void InspectInto(WorkflowEnumItemIntersection* node);
					void InspectInto(WorkflowEnumItem* node);
					void InspectInto(WorkflowStructMember* node);
					void InspectInto(WorkflowStateInput* node);
					void InspectInto(WorkflowStateDeclaration* node);
					void InspectInto(WorkflowSwitchCase* node);
					void InspectInto(WorkflowStateSwitchArgument* node);
					void InspectInto(WorkflowStateSwitchCase* node);
					void InspectInto(WorkflowLetVariable* node);
					void InspectInto(WorkflowConstructorArgument* node);
					void InspectInto(WorkflowModuleUsingItem* node);
					void InspectInto(WorkflowModuleUsingPath* node);
					void InspectInto(WorkflowModule* node);
				};
			}
		}
	}
}
#endif