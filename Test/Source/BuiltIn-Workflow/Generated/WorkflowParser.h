/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Workflow
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_WORKFLOW_PARSER_SYNTAX

#include "Workflow_Assembler.h"
#include "Workflow_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			enum class ParserStates
			{
				_Type = 0,
				_CtorFragment = 50,
				_LetVariable = 55,
				_VirtualExpression = 60,
				_BeginBoundary = 81,
				_EndBoundary = 85,
				_SetTestingOperator = 89,
				_ExpPrimitive = 94,
				_Exp0 = 228,
				_Exp1 = 243,
				_Exp2 = 249,
				_Exp3 = 261,
				_Exp4 = 276,
				_Exp5 = 285,
				_Exp6 = 306,
				_Exp7 = 312,
				_Exp8 = 318,
				_Exp9 = 324,
				_Exp10 = 330,
				_Exp11 = 338,
				_Expression = 344,
				_SwitchCase = 347,
				_Block = 353,
				_ElseStat = 361,
				_If = 365,
				_ForOperator = 379,
				_VirtualStatement = 384,
				_CoStatement = 403,
				_CoProvider = 415,
				_StateSwitchHead = 420,
				_StateSwitchArgument = 443,
				_StateSwitchCase = 446,
				_StateStatement = 457,
				_Statement = 477,
				_StateInput = 517,
				_StateDecl = 526,
				_StateMachine = 536,
				_Attribute = 543,
				_Namespace = 552,
				_FunctionArgument = 560,
				_FunctionArgumentList = 566,
				_FunctionStat = 572,
				_FunctionBody = 576,
				_FunctionKind = 586,
				_Function = 593,
				_Variable = 602,
				_Event = 612,
				_Property = 622,
				_BaseConstructorCall = 636,
				_ConstructorType = 644,
				_Constructor = 649,
				_Destructor = 661,
				_ClassBody = 666,
				_Class = 675,
				_EnumItemInt = 690,
				_EnumItemA = 693,
				_EnumItemB = 700,
				_Enum = 709,
				_StructMember = 726,
				_Struct = 733,
				_APConfig = 741,
				_AutoPropertyKind = 758,
				_AutoProperty = 765,
				_CastResultInterface = 775,
				_Declaration = 786,
				_UsingFragment = 798,
				_UsingItem = 802,
				_UsingPath = 806,
				_ModuleBody = 813,
				_Module = 819,
			};

			template<ParserStates> struct ParserStateTypes;
			template<> struct ParserStateTypes<ParserStates::_Type> { using Type = vl::glr::workflow::WfType; };
			template<> struct ParserStateTypes<ParserStates::_Expression> { using Type = vl::glr::workflow::WfExpression; };
			template<> struct ParserStateTypes<ParserStates::_Statement> { using Type = vl::glr::workflow::WfStatement; };
			template<> struct ParserStateTypes<ParserStates::_Declaration> { using Type = vl::glr::workflow::WfDeclaration; };
			template<> struct ParserStateTypes<ParserStates::_Module> { using Type = vl::glr::workflow::WfModule; };

			const wchar_t* ParserRuleName(vl::vint index);
			const wchar_t* ParserStateLabel(vl::vint index);
			extern void WorkflowParserData(vl::stream::IStream& outputStream);

			class Parser
				: public vl::glr::ParserBase<WorkflowTokens, ParserStates, WorkflowAstInsReceiver, ParserStateTypes>
				, protected vl::glr::automaton::TraceManager::ITypeCallback
			{
			protected:
				vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) override;
			public:
				Parser();

				vl::Ptr<vl::glr::workflow::WfType> Parse_Type(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfExpression> Parse_Expression(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfStatement> Parse_Statement(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfDeclaration> Parse_Declaration(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfModule> Parse_Module(const vl::WString & input, vl::vint codeIndex = -1);
			};
		}
	}
}
#endif