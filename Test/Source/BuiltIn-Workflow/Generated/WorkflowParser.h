/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Workflow
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_PARSER_SYNTAX
#define VCZH_PARSER2_BUILTIN_WORKFLOW_PARSER_SYNTAX

#include "Workflow_Assembler.h"
#include "Workflow_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			enum class ParserStates
			{
				_Type = 0,
				_CtorFragment = 50,
				_LetVariable = 55,
				_VirtualExpression = 60,
				_BeginBoundary = 81,
				_EndBoundary = 85,
				_SetTestingOperator = 89,
				_ExpPrimitive = 94,
				_Exp0 = 231,
				_Exp1 = 246,
				_Exp2 = 252,
				_Exp3 = 264,
				_Exp4 = 279,
				_Exp5 = 288,
				_Exp6 = 309,
				_Exp7 = 315,
				_Exp8 = 321,
				_Exp9 = 327,
				_Exp10 = 333,
				_Exp11 = 341,
				_Expression = 347,
				_SwitchCase = 350,
				_Block = 356,
				_ElseStat = 364,
				_If = 368,
				_ForOperator = 382,
				_VirtualStatement = 387,
				_CoStatement = 406,
				_CoProvider = 418,
				_StateSwitchHead = 423,
				_StateSwitchArgument = 446,
				_StateSwitchCase = 449,
				_StateStatement = 460,
				_Statement = 480,
				_StateInput = 520,
				_StateDecl = 529,
				_StateMachine = 539,
				_Attribute = 546,
				_Namespace = 555,
				_FunctionArgument = 563,
				_FunctionArgumentList = 569,
				_FunctionStat = 575,
				_FunctionBody = 579,
				_FunctionKind = 589,
				_Function = 596,
				_Variable = 605,
				_Event = 615,
				_Property = 625,
				_BaseConstructorCall = 639,
				_ConstructorType = 647,
				_Constructor = 652,
				_Destructor = 664,
				_ClassBody = 669,
				_Class = 678,
				_EnumItemInt = 693,
				_EnumItemA = 696,
				_EnumItemB = 703,
				_Enum = 712,
				_StructMember = 729,
				_Struct = 736,
				_APConfig = 744,
				_AutoPropertyKind = 761,
				_AutoProperty = 768,
				_CastResultInterface = 778,
				_Declaration = 789,
				_UsingFragment = 803,
				_UsingItem = 807,
				_UsingPath = 811,
				_ModuleBody = 818,
				_Module = 824,
			};

			template<ParserStates> struct ParserStateTypes;
			template<> struct ParserStateTypes<ParserStates::_Type> { using Type = vl::glr::workflow::WfType; };
			template<> struct ParserStateTypes<ParserStates::_Expression> { using Type = vl::glr::workflow::WfExpression; };
			template<> struct ParserStateTypes<ParserStates::_Statement> { using Type = vl::glr::workflow::WfStatement; };
			template<> struct ParserStateTypes<ParserStates::_Declaration> { using Type = vl::glr::workflow::WfDeclaration; };
			template<> struct ParserStateTypes<ParserStates::_Module> { using Type = vl::glr::workflow::WfModule; };

			const wchar_t* ParserRuleName(vl::vint index);
			const wchar_t* ParserStateLabel(vl::vint index);
			extern void WorkflowParserData(vl::stream::IStream& outputStream);

			class Parser
				: public vl::glr::ParserBase<WorkflowTokens, ParserStates, WorkflowAstInsReceiver, ParserStateTypes>
				, protected vl::glr::automaton::TraceManager::ITypeCallback
			{
			protected:
				vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) override;
			public:
				Parser();

				vl::Ptr<vl::glr::workflow::WfType> Parse_Type(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfExpression> Parse_Expression(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfStatement> Parse_Statement(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfDeclaration> Parse_Declaration(const vl::WString & input, vl::vint codeIndex = -1);
				vl::Ptr<vl::glr::workflow::WfModule> Parse_Module(const vl::WString & input, vl::vint codeIndex = -1);
			};
		}
	}
}
#endif