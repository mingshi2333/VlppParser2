/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Workflow
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "Workflow_Assembler.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{

/***********************************************************************
WorkflowAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

			vl::Ptr<vl::glr::ParsingAstBase> WorkflowAstInsReceiver::CreateAstNode(vl::vint32_t type)
			{
				auto cppTypeName = WorkflowCppTypeName((WorkflowClasses)type);
				switch((WorkflowClasses)type)
				{
				case WorkflowClasses::AttachEventExpression:
					return new vl::glr::workflow::WorkflowAttachEventExpression();
				case WorkflowClasses::Attribute:
					return new vl::glr::workflow::WorkflowAttribute();
				case WorkflowClasses::AutoPropertyDeclaration:
					return new vl::glr::workflow::WorkflowAutoPropertyDeclaration();
				case WorkflowClasses::BaseConstructorCall:
					return new vl::glr::workflow::WorkflowBaseConstructorCall();
				case WorkflowClasses::BinaryExpression:
					return new vl::glr::workflow::WorkflowBinaryExpression();
				case WorkflowClasses::BindExpression:
					return new vl::glr::workflow::WorkflowBindExpression();
				case WorkflowClasses::BlockStatement:
					return new vl::glr::workflow::WorkflowBlockStatement();
				case WorkflowClasses::BreakStatement:
					return new vl::glr::workflow::WorkflowBreakStatement();
				case WorkflowClasses::CallExpression:
					return new vl::glr::workflow::WorkflowCallExpression();
				case WorkflowClasses::CastResultInterfaceDeclaration:
					return new vl::glr::workflow::WorkflowCastResultInterfaceDeclaration();
				case WorkflowClasses::ChildExpression:
					return new vl::glr::workflow::WorkflowChildExpression();
				case WorkflowClasses::ChildType:
					return new vl::glr::workflow::WorkflowChildType();
				case WorkflowClasses::ClassDeclaration:
					return new vl::glr::workflow::WorkflowClassDeclaration();
				case WorkflowClasses::CoOperatorExpression:
					return new vl::glr::workflow::WorkflowCoOperatorExpression();
				case WorkflowClasses::CoOperatorStatement:
					return new vl::glr::workflow::WorkflowCoOperatorStatement();
				case WorkflowClasses::CoPauseStatement:
					return new vl::glr::workflow::WorkflowCoPauseStatement();
				case WorkflowClasses::CoProviderStatement:
					return new vl::glr::workflow::WorkflowCoProviderStatement();
				case WorkflowClasses::ConstructorArgument:
					return new vl::glr::workflow::WorkflowConstructorArgument();
				case WorkflowClasses::ConstructorDeclaration:
					return new vl::glr::workflow::WorkflowConstructorDeclaration();
				case WorkflowClasses::ConstructorExpression:
					return new vl::glr::workflow::WorkflowConstructorExpression();
				case WorkflowClasses::ContinueStatement:
					return new vl::glr::workflow::WorkflowContinueStatement();
				case WorkflowClasses::DeleteStatement:
					return new vl::glr::workflow::WorkflowDeleteStatement();
				case WorkflowClasses::DestructorDeclaration:
					return new vl::glr::workflow::WorkflowDestructorDeclaration();
				case WorkflowClasses::DetachEventExpression:
					return new vl::glr::workflow::WorkflowDetachEventExpression();
				case WorkflowClasses::EnumDeclaration:
					return new vl::glr::workflow::WorkflowEnumDeclaration();
				case WorkflowClasses::EnumItem:
					return new vl::glr::workflow::WorkflowEnumItem();
				case WorkflowClasses::EnumItemIntersection:
					return new vl::glr::workflow::WorkflowEnumItemIntersection();
				case WorkflowClasses::EnumerableType:
					return new vl::glr::workflow::WorkflowEnumerableType();
				case WorkflowClasses::EventDeclaration:
					return new vl::glr::workflow::WorkflowEventDeclaration();
				case WorkflowClasses::ExpectedTypeCastExpression:
					return new vl::glr::workflow::WorkflowExpectedTypeCastExpression();
				case WorkflowClasses::ExpressionStatement:
					return new vl::glr::workflow::WorkflowExpressionStatement();
				case WorkflowClasses::FloatingExpression:
					return new vl::glr::workflow::WorkflowFloatingExpression();
				case WorkflowClasses::ForEachStatement:
					return new vl::glr::workflow::WorkflowForEachStatement();
				case WorkflowClasses::FormatExpression:
					return new vl::glr::workflow::WorkflowFormatExpression();
				case WorkflowClasses::FunctionArgument:
					return new vl::glr::workflow::WorkflowFunctionArgument();
				case WorkflowClasses::FunctionDeclaration:
					return new vl::glr::workflow::WorkflowFunctionDeclaration();
				case WorkflowClasses::FunctionExpression:
					return new vl::glr::workflow::WorkflowFunctionExpression();
				case WorkflowClasses::FunctionType:
					return new vl::glr::workflow::WorkflowFunctionType();
				case WorkflowClasses::GotoStatement:
					return new vl::glr::workflow::WorkflowGotoStatement();
				case WorkflowClasses::IfExpression:
					return new vl::glr::workflow::WorkflowIfExpression();
				case WorkflowClasses::IfStatement:
					return new vl::glr::workflow::WorkflowIfStatement();
				case WorkflowClasses::InferExpression:
					return new vl::glr::workflow::WorkflowInferExpression();
				case WorkflowClasses::IntegerExpression:
					return new vl::glr::workflow::WorkflowIntegerExpression();
				case WorkflowClasses::LetExpression:
					return new vl::glr::workflow::WorkflowLetExpression();
				case WorkflowClasses::LetVariable:
					return new vl::glr::workflow::WorkflowLetVariable();
				case WorkflowClasses::LiteralExpression:
					return new vl::glr::workflow::WorkflowLiteralExpression();
				case WorkflowClasses::MapType:
					return new vl::glr::workflow::WorkflowMapType();
				case WorkflowClasses::MemberExpression:
					return new vl::glr::workflow::WorkflowMemberExpression();
				case WorkflowClasses::MixinCastExpression:
					return new vl::glr::workflow::WorkflowMixinCastExpression();
				case WorkflowClasses::Module:
					return new vl::glr::workflow::WorkflowModule();
				case WorkflowClasses::ModuleUsingItem:
					return new vl::glr::workflow::WorkflowModuleUsingItem();
				case WorkflowClasses::ModuleUsingNameFragment:
					return new vl::glr::workflow::WorkflowModuleUsingNameFragment();
				case WorkflowClasses::ModuleUsingPath:
					return new vl::glr::workflow::WorkflowModuleUsingPath();
				case WorkflowClasses::ModuleUsingWildCardFragment:
					return new vl::glr::workflow::WorkflowModuleUsingWildCardFragment();
				case WorkflowClasses::NamespaceDeclaration:
					return new vl::glr::workflow::WorkflowNamespaceDeclaration();
				case WorkflowClasses::NewClassExpression:
					return new vl::glr::workflow::WorkflowNewClassExpression();
				case WorkflowClasses::NewCoroutineExpression:
					return new vl::glr::workflow::WorkflowNewCoroutineExpression();
				case WorkflowClasses::NewInterfaceExpression:
					return new vl::glr::workflow::WorkflowNewInterfaceExpression();
				case WorkflowClasses::NullableType:
					return new vl::glr::workflow::WorkflowNullableType();
				case WorkflowClasses::ObservableListType:
					return new vl::glr::workflow::WorkflowObservableListType();
				case WorkflowClasses::ObserveExpression:
					return new vl::glr::workflow::WorkflowObserveExpression();
				case WorkflowClasses::OrderedLambdaExpression:
					return new vl::glr::workflow::WorkflowOrderedLambdaExpression();
				case WorkflowClasses::OrderedNameExpression:
					return new vl::glr::workflow::WorkflowOrderedNameExpression();
				case WorkflowClasses::PredefinedType:
					return new vl::glr::workflow::WorkflowPredefinedType();
				case WorkflowClasses::PropertyDeclaration:
					return new vl::glr::workflow::WorkflowPropertyDeclaration();
				case WorkflowClasses::RaiseExceptionStatement:
					return new vl::glr::workflow::WorkflowRaiseExceptionStatement();
				case WorkflowClasses::RangeExpression:
					return new vl::glr::workflow::WorkflowRangeExpression();
				case WorkflowClasses::RawPointerType:
					return new vl::glr::workflow::WorkflowRawPointerType();
				case WorkflowClasses::ReferenceExpression:
					return new vl::glr::workflow::WorkflowReferenceExpression();
				case WorkflowClasses::ReferenceType:
					return new vl::glr::workflow::WorkflowReferenceType();
				case WorkflowClasses::ReturnStatement:
					return new vl::glr::workflow::WorkflowReturnStatement();
				case WorkflowClasses::SetTestingExpression:
					return new vl::glr::workflow::WorkflowSetTestingExpression();
				case WorkflowClasses::SharedPointerType:
					return new vl::glr::workflow::WorkflowSharedPointerType();
				case WorkflowClasses::StateDeclaration:
					return new vl::glr::workflow::WorkflowStateDeclaration();
				case WorkflowClasses::StateInput:
					return new vl::glr::workflow::WorkflowStateInput();
				case WorkflowClasses::StateInvokeStatement:
					return new vl::glr::workflow::WorkflowStateInvokeStatement();
				case WorkflowClasses::StateMachineDeclaration:
					return new vl::glr::workflow::WorkflowStateMachineDeclaration();
				case WorkflowClasses::StateSwitchArgument:
					return new vl::glr::workflow::WorkflowStateSwitchArgument();
				case WorkflowClasses::StateSwitchCase:
					return new vl::glr::workflow::WorkflowStateSwitchCase();
				case WorkflowClasses::StateSwitchStatement:
					return new vl::glr::workflow::WorkflowStateSwitchStatement();
				case WorkflowClasses::StringExpression:
					return new vl::glr::workflow::WorkflowStringExpression();
				case WorkflowClasses::StructDeclaration:
					return new vl::glr::workflow::WorkflowStructDeclaration();
				case WorkflowClasses::StructMember:
					return new vl::glr::workflow::WorkflowStructMember();
				case WorkflowClasses::SwitchCase:
					return new vl::glr::workflow::WorkflowSwitchCase();
				case WorkflowClasses::SwitchStatement:
					return new vl::glr::workflow::WorkflowSwitchStatement();
				case WorkflowClasses::ThisExpression:
					return new vl::glr::workflow::WorkflowThisExpression();
				case WorkflowClasses::TopQualifiedExpression:
					return new vl::glr::workflow::WorkflowTopQualifiedExpression();
				case WorkflowClasses::TopQualifiedType:
					return new vl::glr::workflow::WorkflowTopQualifiedType();
				case WorkflowClasses::TryStatement:
					return new vl::glr::workflow::WorkflowTryStatement();
				case WorkflowClasses::TypeCastingExpression:
					return new vl::glr::workflow::WorkflowTypeCastingExpression();
				case WorkflowClasses::TypeOfExpressionExpression:
					return new vl::glr::workflow::WorkflowTypeOfExpressionExpression();
				case WorkflowClasses::TypeOfTypeExpression:
					return new vl::glr::workflow::WorkflowTypeOfTypeExpression();
				case WorkflowClasses::TypeTestingExpression:
					return new vl::glr::workflow::WorkflowTypeTestingExpression();
				case WorkflowClasses::UnaryExpression:
					return new vl::glr::workflow::WorkflowUnaryExpression();
				case WorkflowClasses::VariableDeclaration:
					return new vl::glr::workflow::WorkflowVariableDeclaration();
				case WorkflowClasses::VariableStatement:
					return new vl::glr::workflow::WorkflowVariableStatement();
				case WorkflowClasses::WhileStatement:
					return new vl::glr::workflow::WorkflowWhileStatement();
				default:
					return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
				}
			}

			void WorkflowAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
			{
				auto cppFieldName = WorkflowCppFieldName((WorkflowFields)field);
				switch((WorkflowFields)field)
				{
				case WorkflowFields::AttachEventExpression_event:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowAttachEventExpression::event, object, field, value, cppFieldName);
				case WorkflowFields::AttachEventExpression_function:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowAttachEventExpression::function, object, field, value, cppFieldName);
				case WorkflowFields::Attribute_value:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowAttribute::value, object, field, value, cppFieldName);
				case WorkflowFields::AutoPropertyDeclaration_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowAutoPropertyDeclaration::expression, object, field, value, cppFieldName);
				case WorkflowFields::AutoPropertyDeclaration_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowAutoPropertyDeclaration::type, object, field, value, cppFieldName);
				case WorkflowFields::BaseConstructorCall_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowBaseConstructorCall::arguments, object, field, value, cppFieldName);
				case WorkflowFields::BaseConstructorCall_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowBaseConstructorCall::type, object, field, value, cppFieldName);
				case WorkflowFields::BinaryExpression_first:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowBinaryExpression::first, object, field, value, cppFieldName);
				case WorkflowFields::BinaryExpression_second:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowBinaryExpression::second, object, field, value, cppFieldName);
				case WorkflowFields::BindExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowBindExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::BlockStatement_statements:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowBlockStatement::statements, object, field, value, cppFieldName);
				case WorkflowFields::CallExpression_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowCallExpression::arguments, object, field, value, cppFieldName);
				case WorkflowFields::CallExpression_function:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowCallExpression::function, object, field, value, cppFieldName);
				case WorkflowFields::CastResultInterfaceDeclaration_baseType:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowCastResultInterfaceDeclaration::baseType, object, field, value, cppFieldName);
				case WorkflowFields::CastResultInterfaceDeclaration_elementType:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowCastResultInterfaceDeclaration::elementType, object, field, value, cppFieldName);
				case WorkflowFields::ChildExpression_parent:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowChildExpression::parent, object, field, value, cppFieldName);
				case WorkflowFields::ChildType_parent:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowChildType::parent, object, field, value, cppFieldName);
				case WorkflowFields::ClassDeclaration_baseTypes:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowClassDeclaration::baseTypes, object, field, value, cppFieldName);
				case WorkflowFields::ClassDeclaration_declarations:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowClassDeclaration::declarations, object, field, value, cppFieldName);
				case WorkflowFields::CoOperatorStatement_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowCoOperatorStatement::arguments, object, field, value, cppFieldName);
				case WorkflowFields::CoPauseStatement_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowCoPauseStatement::statement, object, field, value, cppFieldName);
				case WorkflowFields::CoProviderStatement_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowCoProviderStatement::statement, object, field, value, cppFieldName);
				case WorkflowFields::ConstructorArgument_key:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowConstructorArgument::key, object, field, value, cppFieldName);
				case WorkflowFields::ConstructorArgument_value:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowConstructorArgument::value, object, field, value, cppFieldName);
				case WorkflowFields::ConstructorDeclaration_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowConstructorDeclaration::arguments, object, field, value, cppFieldName);
				case WorkflowFields::ConstructorDeclaration_baseConstructorCalls:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowConstructorDeclaration::baseConstructorCalls, object, field, value, cppFieldName);
				case WorkflowFields::ConstructorDeclaration_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowConstructorDeclaration::statement, object, field, value, cppFieldName);
				case WorkflowFields::ConstructorExpression_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowConstructorExpression::arguments, object, field, value, cppFieldName);
				case WorkflowFields::Declaration_attributes:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowDeclaration::attributes, object, field, value, cppFieldName);
				case WorkflowFields::DeleteStatement_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowDeleteStatement::expression, object, field, value, cppFieldName);
				case WorkflowFields::DestructorDeclaration_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowDestructorDeclaration::statement, object, field, value, cppFieldName);
				case WorkflowFields::DetachEventExpression_event:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowDetachEventExpression::event, object, field, value, cppFieldName);
				case WorkflowFields::DetachEventExpression_handler:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowDetachEventExpression::handler, object, field, value, cppFieldName);
				case WorkflowFields::EnumDeclaration_items:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowEnumDeclaration::items, object, field, value, cppFieldName);
				case WorkflowFields::EnumItem_attributes:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowEnumItem::attributes, object, field, value, cppFieldName);
				case WorkflowFields::EnumItem_intersections:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowEnumItem::intersections, object, field, value, cppFieldName);
				case WorkflowFields::EnumerableType_element:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowEnumerableType::element, object, field, value, cppFieldName);
				case WorkflowFields::EventDeclaration_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowEventDeclaration::arguments, object, field, value, cppFieldName);
				case WorkflowFields::ExpectedTypeCastExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowExpectedTypeCastExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::ExpressionStatement_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowExpressionStatement::expression, object, field, value, cppFieldName);
				case WorkflowFields::ForEachStatement_collection:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowForEachStatement::collection, object, field, value, cppFieldName);
				case WorkflowFields::ForEachStatement_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowForEachStatement::statement, object, field, value, cppFieldName);
				case WorkflowFields::FunctionArgument_attributes:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionArgument::attributes, object, field, value, cppFieldName);
				case WorkflowFields::FunctionArgument_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionArgument::type, object, field, value, cppFieldName);
				case WorkflowFields::FunctionDeclaration_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionDeclaration::arguments, object, field, value, cppFieldName);
				case WorkflowFields::FunctionDeclaration_returnType:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionDeclaration::returnType, object, field, value, cppFieldName);
				case WorkflowFields::FunctionDeclaration_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionDeclaration::statement, object, field, value, cppFieldName);
				case WorkflowFields::FunctionExpression_function:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionExpression::function, object, field, value, cppFieldName);
				case WorkflowFields::FunctionType_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionType::arguments, object, field, value, cppFieldName);
				case WorkflowFields::FunctionType_result:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowFunctionType::result, object, field, value, cppFieldName);
				case WorkflowFields::IfExpression_condition:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowIfExpression::condition, object, field, value, cppFieldName);
				case WorkflowFields::IfExpression_falseBranch:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowIfExpression::falseBranch, object, field, value, cppFieldName);
				case WorkflowFields::IfExpression_trueBranch:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowIfExpression::trueBranch, object, field, value, cppFieldName);
				case WorkflowFields::IfStatement_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowIfStatement::expression, object, field, value, cppFieldName);
				case WorkflowFields::IfStatement_falseBranch:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowIfStatement::falseBranch, object, field, value, cppFieldName);
				case WorkflowFields::IfStatement_trueBranch:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowIfStatement::trueBranch, object, field, value, cppFieldName);
				case WorkflowFields::IfStatement_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowIfStatement::type, object, field, value, cppFieldName);
				case WorkflowFields::InferExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowInferExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::InferExpression_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowInferExpression::type, object, field, value, cppFieldName);
				case WorkflowFields::LetExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowLetExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::LetExpression_variables:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowLetExpression::variables, object, field, value, cppFieldName);
				case WorkflowFields::LetVariable_value:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowLetVariable::value, object, field, value, cppFieldName);
				case WorkflowFields::MapType_key:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowMapType::key, object, field, value, cppFieldName);
				case WorkflowFields::MapType_value:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowMapType::value, object, field, value, cppFieldName);
				case WorkflowFields::MemberExpression_parent:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowMemberExpression::parent, object, field, value, cppFieldName);
				case WorkflowFields::MixinCastExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowMixinCastExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::MixinCastExpression_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowMixinCastExpression::type, object, field, value, cppFieldName);
				case WorkflowFields::Module_declarations:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowModule::declarations, object, field, value, cppFieldName);
				case WorkflowFields::Module_paths:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowModule::paths, object, field, value, cppFieldName);
				case WorkflowFields::ModuleUsingItem_fragments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowModuleUsingItem::fragments, object, field, value, cppFieldName);
				case WorkflowFields::ModuleUsingPath_items:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowModuleUsingPath::items, object, field, value, cppFieldName);
				case WorkflowFields::NamespaceDeclaration_declarations:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowNamespaceDeclaration::declarations, object, field, value, cppFieldName);
				case WorkflowFields::NewClassExpression_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowNewClassExpression::arguments, object, field, value, cppFieldName);
				case WorkflowFields::NewClassExpression_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowNewClassExpression::type, object, field, value, cppFieldName);
				case WorkflowFields::NewCoroutineExpression_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowNewCoroutineExpression::statement, object, field, value, cppFieldName);
				case WorkflowFields::NewInterfaceExpression_declarations:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowNewInterfaceExpression::declarations, object, field, value, cppFieldName);
				case WorkflowFields::NewInterfaceExpression_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowNewInterfaceExpression::type, object, field, value, cppFieldName);
				case WorkflowFields::NullableType_element:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowNullableType::element, object, field, value, cppFieldName);
				case WorkflowFields::ObservableListType_element:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowObservableListType::element, object, field, value, cppFieldName);
				case WorkflowFields::ObserveExpression_events:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowObserveExpression::events, object, field, value, cppFieldName);
				case WorkflowFields::ObserveExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowObserveExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::ObserveExpression_parent:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowObserveExpression::parent, object, field, value, cppFieldName);
				case WorkflowFields::OrderedLambdaExpression_body:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowOrderedLambdaExpression::body, object, field, value, cppFieldName);
				case WorkflowFields::PropertyDeclaration_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowPropertyDeclaration::type, object, field, value, cppFieldName);
				case WorkflowFields::RaiseExceptionStatement_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowRaiseExceptionStatement::expression, object, field, value, cppFieldName);
				case WorkflowFields::RangeExpression_begin:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowRangeExpression::begin, object, field, value, cppFieldName);
				case WorkflowFields::RangeExpression_end:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowRangeExpression::end, object, field, value, cppFieldName);
				case WorkflowFields::RawPointerType_element:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowRawPointerType::element, object, field, value, cppFieldName);
				case WorkflowFields::ReturnStatement_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowReturnStatement::expression, object, field, value, cppFieldName);
				case WorkflowFields::SetTestingExpression_collection:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSetTestingExpression::collection, object, field, value, cppFieldName);
				case WorkflowFields::SetTestingExpression_element:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSetTestingExpression::element, object, field, value, cppFieldName);
				case WorkflowFields::SharedPointerType_element:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSharedPointerType::element, object, field, value, cppFieldName);
				case WorkflowFields::StateDeclaration_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateDeclaration::arguments, object, field, value, cppFieldName);
				case WorkflowFields::StateDeclaration_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateDeclaration::statement, object, field, value, cppFieldName);
				case WorkflowFields::StateInput_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateInput::arguments, object, field, value, cppFieldName);
				case WorkflowFields::StateInvokeStatement_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateInvokeStatement::arguments, object, field, value, cppFieldName);
				case WorkflowFields::StateMachineDeclaration_inputs:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateMachineDeclaration::inputs, object, field, value, cppFieldName);
				case WorkflowFields::StateMachineDeclaration_states:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateMachineDeclaration::states, object, field, value, cppFieldName);
				case WorkflowFields::StateSwitchCase_arguments:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateSwitchCase::arguments, object, field, value, cppFieldName);
				case WorkflowFields::StateSwitchCase_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateSwitchCase::statement, object, field, value, cppFieldName);
				case WorkflowFields::StateSwitchStatement_caseBranches:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStateSwitchStatement::caseBranches, object, field, value, cppFieldName);
				case WorkflowFields::StructDeclaration_members:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStructDeclaration::members, object, field, value, cppFieldName);
				case WorkflowFields::StructMember_attributes:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStructMember::attributes, object, field, value, cppFieldName);
				case WorkflowFields::StructMember_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowStructMember::type, object, field, value, cppFieldName);
				case WorkflowFields::SwitchCase_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSwitchCase::expression, object, field, value, cppFieldName);
				case WorkflowFields::SwitchCase_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSwitchCase::statement, object, field, value, cppFieldName);
				case WorkflowFields::SwitchStatement_caseBranches:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSwitchStatement::caseBranches, object, field, value, cppFieldName);
				case WorkflowFields::SwitchStatement_defaultBranch:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSwitchStatement::defaultBranch, object, field, value, cppFieldName);
				case WorkflowFields::SwitchStatement_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowSwitchStatement::expression, object, field, value, cppFieldName);
				case WorkflowFields::TryStatement_catchStatement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTryStatement::catchStatement, object, field, value, cppFieldName);
				case WorkflowFields::TryStatement_finallyStatement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTryStatement::finallyStatement, object, field, value, cppFieldName);
				case WorkflowFields::TryStatement_protectedStatement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTryStatement::protectedStatement, object, field, value, cppFieldName);
				case WorkflowFields::TypeCastingExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTypeCastingExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::TypeCastingExpression_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTypeCastingExpression::type, object, field, value, cppFieldName);
				case WorkflowFields::TypeOfExpressionExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTypeOfExpressionExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::TypeOfTypeExpression_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTypeOfTypeExpression::type, object, field, value, cppFieldName);
				case WorkflowFields::TypeTestingExpression_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTypeTestingExpression::expression, object, field, value, cppFieldName);
				case WorkflowFields::TypeTestingExpression_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowTypeTestingExpression::type, object, field, value, cppFieldName);
				case WorkflowFields::UnaryExpression_operand:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowUnaryExpression::operand, object, field, value, cppFieldName);
				case WorkflowFields::VariableDeclaration_expression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVariableDeclaration::expression, object, field, value, cppFieldName);
				case WorkflowFields::VariableDeclaration_type:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVariableDeclaration::type, object, field, value, cppFieldName);
				case WorkflowFields::VariableStatement_variable:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVariableStatement::variable, object, field, value, cppFieldName);
				case WorkflowFields::VirtualCfeDeclaration_expandedDeclarations:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVirtualCfeDeclaration::expandedDeclarations, object, field, value, cppFieldName);
				case WorkflowFields::VirtualCfeExpression_expandedExpression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVirtualCfeExpression::expandedExpression, object, field, value, cppFieldName);
				case WorkflowFields::VirtualCseDeclaration_expandedDeclarations:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVirtualCseDeclaration::expandedDeclarations, object, field, value, cppFieldName);
				case WorkflowFields::VirtualCseExpression_expandedExpression:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVirtualCseExpression::expandedExpression, object, field, value, cppFieldName);
				case WorkflowFields::VirtualCseStatement_expandedStatement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowVirtualCseStatement::expandedStatement, object, field, value, cppFieldName);
				case WorkflowFields::WhileStatement_condition:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowWhileStatement::condition, object, field, value, cppFieldName);
				case WorkflowFields::WhileStatement_statement:
					return vl::glr::AssemblerSetObjectField(&vl::glr::workflow::WorkflowWhileStatement::statement, object, field, value, cppFieldName);
				default:
					return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
				}
			}

			void WorkflowAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token)
			{
				auto cppFieldName = WorkflowCppFieldName((WorkflowFields)field);
				switch((WorkflowFields)field)
				{
				case WorkflowFields::Attribute_category:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowAttribute::category, object, field, token,cppFieldName);
				case WorkflowFields::Attribute_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowAttribute::name, object, field, token,cppFieldName);
				case WorkflowFields::BlockStatement_endLabel:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowBlockStatement::endLabel, object, field, token,cppFieldName);
				case WorkflowFields::ChildExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowChildExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::ChildType_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowChildType::name, object, field, token,cppFieldName);
				case WorkflowFields::CoOperatorExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowCoOperatorExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::CoOperatorStatement_opName:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowCoOperatorStatement::opName, object, field, token,cppFieldName);
				case WorkflowFields::CoOperatorStatement_varName:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowCoOperatorStatement::varName, object, field, token,cppFieldName);
				case WorkflowFields::CoProviderStatement_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowCoProviderStatement::name, object, field, token,cppFieldName);
				case WorkflowFields::Declaration_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowDeclaration::name, object, field, token,cppFieldName);
				case WorkflowFields::EnumItem_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowEnumItem::name, object, field, token,cppFieldName);
				case WorkflowFields::EnumItem_number:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowEnumItem::number, object, field, token,cppFieldName);
				case WorkflowFields::EnumItemIntersection_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowEnumItemIntersection::name, object, field, token,cppFieldName);
				case WorkflowFields::FloatingExpression_value:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowFloatingExpression::value, object, field, token,cppFieldName);
				case WorkflowFields::ForEachStatement_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowForEachStatement::name, object, field, token,cppFieldName);
				case WorkflowFields::FormatExpression_value:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowFormatExpression::value, object, field, token,cppFieldName);
				case WorkflowFields::FunctionArgument_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowFunctionArgument::name, object, field, token,cppFieldName);
				case WorkflowFields::GotoStatement_label:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowGotoStatement::label, object, field, token,cppFieldName);
				case WorkflowFields::IfStatement_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowIfStatement::name, object, field, token,cppFieldName);
				case WorkflowFields::IntegerExpression_value:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowIntegerExpression::value, object, field, token,cppFieldName);
				case WorkflowFields::LetVariable_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowLetVariable::name, object, field, token,cppFieldName);
				case WorkflowFields::MemberExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowMemberExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::Module_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowModule::name, object, field, token,cppFieldName);
				case WorkflowFields::ModuleUsingNameFragment_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowModuleUsingNameFragment::name, object, field, token,cppFieldName);
				case WorkflowFields::NewCoroutineExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowNewCoroutineExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::ObserveExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowObserveExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::OrderedNameExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowOrderedNameExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::PropertyDeclaration_getter:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowPropertyDeclaration::getter, object, field, token,cppFieldName);
				case WorkflowFields::PropertyDeclaration_setter:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowPropertyDeclaration::setter, object, field, token,cppFieldName);
				case WorkflowFields::PropertyDeclaration_valueChangedEvent:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowPropertyDeclaration::valueChangedEvent, object, field, token,cppFieldName);
				case WorkflowFields::ReferenceExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowReferenceExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::ReferenceType_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowReferenceType::name, object, field, token,cppFieldName);
				case WorkflowFields::StateDeclaration_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowStateDeclaration::name, object, field, token,cppFieldName);
				case WorkflowFields::StateInput_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowStateInput::name, object, field, token,cppFieldName);
				case WorkflowFields::StateInvokeStatement_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowStateInvokeStatement::name, object, field, token,cppFieldName);
				case WorkflowFields::StateSwitchArgument_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowStateSwitchArgument::name, object, field, token,cppFieldName);
				case WorkflowFields::StateSwitchCase_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowStateSwitchCase::name, object, field, token,cppFieldName);
				case WorkflowFields::StringExpression_value:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowStringExpression::value, object, field, token,cppFieldName);
				case WorkflowFields::StructMember_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowStructMember::name, object, field, token,cppFieldName);
				case WorkflowFields::TopQualifiedExpression_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowTopQualifiedExpression::name, object, field, token,cppFieldName);
				case WorkflowFields::TopQualifiedType_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowTopQualifiedType::name, object, field, token,cppFieldName);
				case WorkflowFields::TryStatement_name:
					return vl::glr::AssemblerSetTokenField(&vl::glr::workflow::WorkflowTryStatement::name, object, field, token,cppFieldName);
				default:
					return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
				}
			}

			void WorkflowAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem)
			{
				auto cppFieldName = WorkflowCppFieldName((WorkflowFields)field);
				switch((WorkflowFields)field)
				{
				case WorkflowFields::AutoPropertyDeclaration_configConst:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowAutoPropertyDeclaration::configConst, object, field, enumItem, cppFieldName);
				case WorkflowFields::AutoPropertyDeclaration_configObserve:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowAutoPropertyDeclaration::configObserve, object, field, enumItem, cppFieldName);
				case WorkflowFields::BinaryExpression_op:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowBinaryExpression::op, object, field, enumItem, cppFieldName);
				case WorkflowFields::ClassDeclaration_constructorType:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowClassDeclaration::constructorType, object, field, enumItem, cppFieldName);
				case WorkflowFields::ClassDeclaration_kind:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowClassDeclaration::kind, object, field, enumItem, cppFieldName);
				case WorkflowFields::ConstructorDeclaration_constructorType:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowConstructorDeclaration::constructorType, object, field, enumItem, cppFieldName);
				case WorkflowFields::Declaration_classMemberKind:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowDeclaration::classMemberKind, object, field, enumItem, cppFieldName);
				case WorkflowFields::EnumDeclaration_kind:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowEnumDeclaration::kind, object, field, enumItem, cppFieldName);
				case WorkflowFields::EnumItem_kind:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowEnumItem::kind, object, field, enumItem, cppFieldName);
				case WorkflowFields::ExpectedTypeCastExpression_strategy:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowExpectedTypeCastExpression::strategy, object, field, enumItem, cppFieldName);
				case WorkflowFields::ForEachStatement_direction:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowForEachStatement::direction, object, field, enumItem, cppFieldName);
				case WorkflowFields::FunctionDeclaration_anonymity:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowFunctionDeclaration::anonymity, object, field, enumItem, cppFieldName);
				case WorkflowFields::LiteralExpression_value:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowLiteralExpression::value, object, field, enumItem, cppFieldName);
				case WorkflowFields::MapType_writability:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowMapType::writability, object, field, enumItem, cppFieldName);
				case WorkflowFields::Module_moduleType:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowModule::moduleType, object, field, enumItem, cppFieldName);
				case WorkflowFields::ObserveExpression_observeType:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowObserveExpression::observeType, object, field, enumItem, cppFieldName);
				case WorkflowFields::PredefinedType_name:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowPredefinedType::name, object, field, enumItem, cppFieldName);
				case WorkflowFields::RangeExpression_beginBoundary:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowRangeExpression::beginBoundary, object, field, enumItem, cppFieldName);
				case WorkflowFields::RangeExpression_endBoundary:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowRangeExpression::endBoundary, object, field, enumItem, cppFieldName);
				case WorkflowFields::SetTestingExpression_test:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowSetTestingExpression::test, object, field, enumItem, cppFieldName);
				case WorkflowFields::StateInvokeStatement_type:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowStateInvokeStatement::type, object, field, enumItem, cppFieldName);
				case WorkflowFields::StateSwitchStatement_type:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowStateSwitchStatement::type, object, field, enumItem, cppFieldName);
				case WorkflowFields::TypeCastingExpression_strategy:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowTypeCastingExpression::strategy, object, field, enumItem, cppFieldName);
				case WorkflowFields::TypeTestingExpression_test:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowTypeTestingExpression::test, object, field, enumItem, cppFieldName);
				case WorkflowFields::UnaryExpression_op:
					return vl::glr::AssemblerSetEnumField(&vl::glr::workflow::WorkflowUnaryExpression::op, object, field, enumItem, cppFieldName);
				default:
					return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
				}
			}

			const wchar_t* WorkflowTypeName(WorkflowClasses type)
			{
				const wchar_t* results[] = {
					L"AttachEventExpression",
					L"Attribute",
					L"AutoPropertyDeclaration",
					L"BaseConstructorCall",
					L"BinaryExpression",
					L"BindExpression",
					L"BlockStatement",
					L"BreakStatement",
					L"CallExpression",
					L"CastResultInterfaceDeclaration",
					L"ChildExpression",
					L"ChildType",
					L"ClassDeclaration",
					L"CoOperatorExpression",
					L"CoOperatorStatement",
					L"CoPauseStatement",
					L"CoProviderStatement",
					L"ConstructorArgument",
					L"ConstructorDeclaration",
					L"ConstructorExpression",
					L"ContinueStatement",
					L"CoroutineStatement",
					L"Declaration",
					L"DeleteStatement",
					L"DestructorDeclaration",
					L"DetachEventExpression",
					L"EnumDeclaration",
					L"EnumItem",
					L"EnumItemIntersection",
					L"EnumerableType",
					L"EventDeclaration",
					L"ExpectedTypeCastExpression",
					L"Expression",
					L"ExpressionStatement",
					L"FloatingExpression",
					L"ForEachStatement",
					L"FormatExpression",
					L"FunctionArgument",
					L"FunctionDeclaration",
					L"FunctionExpression",
					L"FunctionType",
					L"GotoStatement",
					L"IfExpression",
					L"IfStatement",
					L"InferExpression",
					L"IntegerExpression",
					L"LetExpression",
					L"LetVariable",
					L"LiteralExpression",
					L"MapType",
					L"MemberExpression",
					L"MixinCastExpression",
					L"Module",
					L"ModuleUsingFragment",
					L"ModuleUsingItem",
					L"ModuleUsingNameFragment",
					L"ModuleUsingPath",
					L"ModuleUsingWildCardFragment",
					L"NamespaceDeclaration",
					L"NewClassExpression",
					L"NewCoroutineExpression",
					L"NewInterfaceExpression",
					L"NullableType",
					L"ObservableListType",
					L"ObserveExpression",
					L"OrderedLambdaExpression",
					L"OrderedNameExpression",
					L"PredefinedType",
					L"PropertyDeclaration",
					L"RaiseExceptionStatement",
					L"RangeExpression",
					L"RawPointerType",
					L"ReferenceExpression",
					L"ReferenceType",
					L"ReturnStatement",
					L"SetTestingExpression",
					L"SharedPointerType",
					L"StateDeclaration",
					L"StateInput",
					L"StateInvokeStatement",
					L"StateMachineDeclaration",
					L"StateMachineStatement",
					L"StateSwitchArgument",
					L"StateSwitchCase",
					L"StateSwitchStatement",
					L"Statement",
					L"StringExpression",
					L"StructDeclaration",
					L"StructMember",
					L"SwitchCase",
					L"SwitchStatement",
					L"ThisExpression",
					L"TopQualifiedExpression",
					L"TopQualifiedType",
					L"TryStatement",
					L"Type",
					L"TypeCastingExpression",
					L"TypeOfExpressionExpression",
					L"TypeOfTypeExpression",
					L"TypeTestingExpression",
					L"UnaryExpression",
					L"VariableDeclaration",
					L"VariableStatement",
					L"VirtualCfeDeclaration",
					L"VirtualCfeExpression",
					L"VirtualCseDeclaration",
					L"VirtualCseExpression",
					L"VirtualCseStatement",
					L"WhileStatement",
				};
				vl::vint index = (vl::vint)type;
				return 0 <= index && index < 109 ? results[index] : nullptr;
			}

			const wchar_t* WorkflowCppTypeName(WorkflowClasses type)
			{
				const wchar_t* results[] = {
					L"vl::glr::workflow::WorkflowAttachEventExpression",
					L"vl::glr::workflow::WorkflowAttribute",
					L"vl::glr::workflow::WorkflowAutoPropertyDeclaration",
					L"vl::glr::workflow::WorkflowBaseConstructorCall",
					L"vl::glr::workflow::WorkflowBinaryExpression",
					L"vl::glr::workflow::WorkflowBindExpression",
					L"vl::glr::workflow::WorkflowBlockStatement",
					L"vl::glr::workflow::WorkflowBreakStatement",
					L"vl::glr::workflow::WorkflowCallExpression",
					L"vl::glr::workflow::WorkflowCastResultInterfaceDeclaration",
					L"vl::glr::workflow::WorkflowChildExpression",
					L"vl::glr::workflow::WorkflowChildType",
					L"vl::glr::workflow::WorkflowClassDeclaration",
					L"vl::glr::workflow::WorkflowCoOperatorExpression",
					L"vl::glr::workflow::WorkflowCoOperatorStatement",
					L"vl::glr::workflow::WorkflowCoPauseStatement",
					L"vl::glr::workflow::WorkflowCoProviderStatement",
					L"vl::glr::workflow::WorkflowConstructorArgument",
					L"vl::glr::workflow::WorkflowConstructorDeclaration",
					L"vl::glr::workflow::WorkflowConstructorExpression",
					L"vl::glr::workflow::WorkflowContinueStatement",
					L"vl::glr::workflow::WorkflowCoroutineStatement",
					L"vl::glr::workflow::WorkflowDeclaration",
					L"vl::glr::workflow::WorkflowDeleteStatement",
					L"vl::glr::workflow::WorkflowDestructorDeclaration",
					L"vl::glr::workflow::WorkflowDetachEventExpression",
					L"vl::glr::workflow::WorkflowEnumDeclaration",
					L"vl::glr::workflow::WorkflowEnumItem",
					L"vl::glr::workflow::WorkflowEnumItemIntersection",
					L"vl::glr::workflow::WorkflowEnumerableType",
					L"vl::glr::workflow::WorkflowEventDeclaration",
					L"vl::glr::workflow::WorkflowExpectedTypeCastExpression",
					L"vl::glr::workflow::WorkflowExpression",
					L"vl::glr::workflow::WorkflowExpressionStatement",
					L"vl::glr::workflow::WorkflowFloatingExpression",
					L"vl::glr::workflow::WorkflowForEachStatement",
					L"vl::glr::workflow::WorkflowFormatExpression",
					L"vl::glr::workflow::WorkflowFunctionArgument",
					L"vl::glr::workflow::WorkflowFunctionDeclaration",
					L"vl::glr::workflow::WorkflowFunctionExpression",
					L"vl::glr::workflow::WorkflowFunctionType",
					L"vl::glr::workflow::WorkflowGotoStatement",
					L"vl::glr::workflow::WorkflowIfExpression",
					L"vl::glr::workflow::WorkflowIfStatement",
					L"vl::glr::workflow::WorkflowInferExpression",
					L"vl::glr::workflow::WorkflowIntegerExpression",
					L"vl::glr::workflow::WorkflowLetExpression",
					L"vl::glr::workflow::WorkflowLetVariable",
					L"vl::glr::workflow::WorkflowLiteralExpression",
					L"vl::glr::workflow::WorkflowMapType",
					L"vl::glr::workflow::WorkflowMemberExpression",
					L"vl::glr::workflow::WorkflowMixinCastExpression",
					L"vl::glr::workflow::WorkflowModule",
					L"vl::glr::workflow::WorkflowModuleUsingFragment",
					L"vl::glr::workflow::WorkflowModuleUsingItem",
					L"vl::glr::workflow::WorkflowModuleUsingNameFragment",
					L"vl::glr::workflow::WorkflowModuleUsingPath",
					L"vl::glr::workflow::WorkflowModuleUsingWildCardFragment",
					L"vl::glr::workflow::WorkflowNamespaceDeclaration",
					L"vl::glr::workflow::WorkflowNewClassExpression",
					L"vl::glr::workflow::WorkflowNewCoroutineExpression",
					L"vl::glr::workflow::WorkflowNewInterfaceExpression",
					L"vl::glr::workflow::WorkflowNullableType",
					L"vl::glr::workflow::WorkflowObservableListType",
					L"vl::glr::workflow::WorkflowObserveExpression",
					L"vl::glr::workflow::WorkflowOrderedLambdaExpression",
					L"vl::glr::workflow::WorkflowOrderedNameExpression",
					L"vl::glr::workflow::WorkflowPredefinedType",
					L"vl::glr::workflow::WorkflowPropertyDeclaration",
					L"vl::glr::workflow::WorkflowRaiseExceptionStatement",
					L"vl::glr::workflow::WorkflowRangeExpression",
					L"vl::glr::workflow::WorkflowRawPointerType",
					L"vl::glr::workflow::WorkflowReferenceExpression",
					L"vl::glr::workflow::WorkflowReferenceType",
					L"vl::glr::workflow::WorkflowReturnStatement",
					L"vl::glr::workflow::WorkflowSetTestingExpression",
					L"vl::glr::workflow::WorkflowSharedPointerType",
					L"vl::glr::workflow::WorkflowStateDeclaration",
					L"vl::glr::workflow::WorkflowStateInput",
					L"vl::glr::workflow::WorkflowStateInvokeStatement",
					L"vl::glr::workflow::WorkflowStateMachineDeclaration",
					L"vl::glr::workflow::WorkflowStateMachineStatement",
					L"vl::glr::workflow::WorkflowStateSwitchArgument",
					L"vl::glr::workflow::WorkflowStateSwitchCase",
					L"vl::glr::workflow::WorkflowStateSwitchStatement",
					L"vl::glr::workflow::WorkflowStatement",
					L"vl::glr::workflow::WorkflowStringExpression",
					L"vl::glr::workflow::WorkflowStructDeclaration",
					L"vl::glr::workflow::WorkflowStructMember",
					L"vl::glr::workflow::WorkflowSwitchCase",
					L"vl::glr::workflow::WorkflowSwitchStatement",
					L"vl::glr::workflow::WorkflowThisExpression",
					L"vl::glr::workflow::WorkflowTopQualifiedExpression",
					L"vl::glr::workflow::WorkflowTopQualifiedType",
					L"vl::glr::workflow::WorkflowTryStatement",
					L"vl::glr::workflow::WorkflowType",
					L"vl::glr::workflow::WorkflowTypeCastingExpression",
					L"vl::glr::workflow::WorkflowTypeOfExpressionExpression",
					L"vl::glr::workflow::WorkflowTypeOfTypeExpression",
					L"vl::glr::workflow::WorkflowTypeTestingExpression",
					L"vl::glr::workflow::WorkflowUnaryExpression",
					L"vl::glr::workflow::WorkflowVariableDeclaration",
					L"vl::glr::workflow::WorkflowVariableStatement",
					L"vl::glr::workflow::WorkflowVirtualCfeDeclaration",
					L"vl::glr::workflow::WorkflowVirtualCfeExpression",
					L"vl::glr::workflow::WorkflowVirtualCseDeclaration",
					L"vl::glr::workflow::WorkflowVirtualCseExpression",
					L"vl::glr::workflow::WorkflowVirtualCseStatement",
					L"vl::glr::workflow::WorkflowWhileStatement",
				};
				vl::vint index = (vl::vint)type;
				return 0 <= index && index < 109 ? results[index] : nullptr;
			}

			const wchar_t* WorkflowFieldName(WorkflowFields field)
			{
				const wchar_t* results[] = {
					L"AttachEventExpression::event",
					L"AttachEventExpression::function",
					L"Attribute::category",
					L"Attribute::name",
					L"Attribute::value",
					L"AutoPropertyDeclaration::configConst",
					L"AutoPropertyDeclaration::configObserve",
					L"AutoPropertyDeclaration::expression",
					L"AutoPropertyDeclaration::type",
					L"BaseConstructorCall::arguments",
					L"BaseConstructorCall::type",
					L"BinaryExpression::first",
					L"BinaryExpression::op",
					L"BinaryExpression::second",
					L"BindExpression::expression",
					L"BlockStatement::endLabel",
					L"BlockStatement::statements",
					L"CallExpression::arguments",
					L"CallExpression::function",
					L"CastResultInterfaceDeclaration::baseType",
					L"CastResultInterfaceDeclaration::elementType",
					L"ChildExpression::name",
					L"ChildExpression::parent",
					L"ChildType::name",
					L"ChildType::parent",
					L"ClassDeclaration::baseTypes",
					L"ClassDeclaration::constructorType",
					L"ClassDeclaration::declarations",
					L"ClassDeclaration::kind",
					L"CoOperatorExpression::name",
					L"CoOperatorStatement::arguments",
					L"CoOperatorStatement::opName",
					L"CoOperatorStatement::varName",
					L"CoPauseStatement::statement",
					L"CoProviderStatement::name",
					L"CoProviderStatement::statement",
					L"ConstructorArgument::key",
					L"ConstructorArgument::value",
					L"ConstructorDeclaration::arguments",
					L"ConstructorDeclaration::baseConstructorCalls",
					L"ConstructorDeclaration::constructorType",
					L"ConstructorDeclaration::statement",
					L"ConstructorExpression::arguments",
					L"Declaration::attributes",
					L"Declaration::classMemberKind",
					L"Declaration::name",
					L"DeleteStatement::expression",
					L"DestructorDeclaration::statement",
					L"DetachEventExpression::event",
					L"DetachEventExpression::handler",
					L"EnumDeclaration::items",
					L"EnumDeclaration::kind",
					L"EnumItem::attributes",
					L"EnumItem::intersections",
					L"EnumItem::kind",
					L"EnumItem::name",
					L"EnumItem::number",
					L"EnumItemIntersection::name",
					L"EnumerableType::element",
					L"EventDeclaration::arguments",
					L"ExpectedTypeCastExpression::expression",
					L"ExpectedTypeCastExpression::strategy",
					L"ExpressionStatement::expression",
					L"FloatingExpression::value",
					L"ForEachStatement::collection",
					L"ForEachStatement::direction",
					L"ForEachStatement::name",
					L"ForEachStatement::statement",
					L"FormatExpression::value",
					L"FunctionArgument::attributes",
					L"FunctionArgument::name",
					L"FunctionArgument::type",
					L"FunctionDeclaration::anonymity",
					L"FunctionDeclaration::arguments",
					L"FunctionDeclaration::returnType",
					L"FunctionDeclaration::statement",
					L"FunctionExpression::function",
					L"FunctionType::arguments",
					L"FunctionType::result",
					L"GotoStatement::label",
					L"IfExpression::condition",
					L"IfExpression::falseBranch",
					L"IfExpression::trueBranch",
					L"IfStatement::expression",
					L"IfStatement::falseBranch",
					L"IfStatement::name",
					L"IfStatement::trueBranch",
					L"IfStatement::type",
					L"InferExpression::expression",
					L"InferExpression::type",
					L"IntegerExpression::value",
					L"LetExpression::expression",
					L"LetExpression::variables",
					L"LetVariable::name",
					L"LetVariable::value",
					L"LiteralExpression::value",
					L"MapType::key",
					L"MapType::value",
					L"MapType::writability",
					L"MemberExpression::name",
					L"MemberExpression::parent",
					L"MixinCastExpression::expression",
					L"MixinCastExpression::type",
					L"Module::declarations",
					L"Module::moduleType",
					L"Module::name",
					L"Module::paths",
					L"ModuleUsingItem::fragments",
					L"ModuleUsingNameFragment::name",
					L"ModuleUsingPath::items",
					L"NamespaceDeclaration::declarations",
					L"NewClassExpression::arguments",
					L"NewClassExpression::type",
					L"NewCoroutineExpression::name",
					L"NewCoroutineExpression::statement",
					L"NewInterfaceExpression::declarations",
					L"NewInterfaceExpression::type",
					L"NullableType::element",
					L"ObservableListType::element",
					L"ObserveExpression::events",
					L"ObserveExpression::expression",
					L"ObserveExpression::name",
					L"ObserveExpression::observeType",
					L"ObserveExpression::parent",
					L"OrderedLambdaExpression::body",
					L"OrderedNameExpression::name",
					L"PredefinedType::name",
					L"PropertyDeclaration::getter",
					L"PropertyDeclaration::setter",
					L"PropertyDeclaration::type",
					L"PropertyDeclaration::valueChangedEvent",
					L"RaiseExceptionStatement::expression",
					L"RangeExpression::begin",
					L"RangeExpression::beginBoundary",
					L"RangeExpression::end",
					L"RangeExpression::endBoundary",
					L"RawPointerType::element",
					L"ReferenceExpression::name",
					L"ReferenceType::name",
					L"ReturnStatement::expression",
					L"SetTestingExpression::collection",
					L"SetTestingExpression::element",
					L"SetTestingExpression::test",
					L"SharedPointerType::element",
					L"StateDeclaration::arguments",
					L"StateDeclaration::name",
					L"StateDeclaration::statement",
					L"StateInput::arguments",
					L"StateInput::name",
					L"StateInvokeStatement::arguments",
					L"StateInvokeStatement::name",
					L"StateInvokeStatement::type",
					L"StateMachineDeclaration::inputs",
					L"StateMachineDeclaration::states",
					L"StateSwitchArgument::name",
					L"StateSwitchCase::arguments",
					L"StateSwitchCase::name",
					L"StateSwitchCase::statement",
					L"StateSwitchStatement::caseBranches",
					L"StateSwitchStatement::type",
					L"StringExpression::value",
					L"StructDeclaration::members",
					L"StructMember::attributes",
					L"StructMember::name",
					L"StructMember::type",
					L"SwitchCase::expression",
					L"SwitchCase::statement",
					L"SwitchStatement::caseBranches",
					L"SwitchStatement::defaultBranch",
					L"SwitchStatement::expression",
					L"TopQualifiedExpression::name",
					L"TopQualifiedType::name",
					L"TryStatement::catchStatement",
					L"TryStatement::finallyStatement",
					L"TryStatement::name",
					L"TryStatement::protectedStatement",
					L"TypeCastingExpression::expression",
					L"TypeCastingExpression::strategy",
					L"TypeCastingExpression::type",
					L"TypeOfExpressionExpression::expression",
					L"TypeOfTypeExpression::type",
					L"TypeTestingExpression::expression",
					L"TypeTestingExpression::test",
					L"TypeTestingExpression::type",
					L"UnaryExpression::op",
					L"UnaryExpression::operand",
					L"VariableDeclaration::expression",
					L"VariableDeclaration::type",
					L"VariableStatement::variable",
					L"VirtualCfeDeclaration::expandedDeclarations",
					L"VirtualCfeExpression::expandedExpression",
					L"VirtualCseDeclaration::expandedDeclarations",
					L"VirtualCseExpression::expandedExpression",
					L"VirtualCseStatement::expandedStatement",
					L"WhileStatement::condition",
					L"WhileStatement::statement",
				};
				vl::vint index = (vl::vint)field;
				return 0 <= index && index < 196 ? results[index] : nullptr;
			}

			const wchar_t* WorkflowCppFieldName(WorkflowFields field)
			{
				const wchar_t* results[] = {
					L"vl::glr::workflow::WorkflowAttachEventExpression::event",
					L"vl::glr::workflow::WorkflowAttachEventExpression::function",
					L"vl::glr::workflow::WorkflowAttribute::category",
					L"vl::glr::workflow::WorkflowAttribute::name",
					L"vl::glr::workflow::WorkflowAttribute::value",
					L"vl::glr::workflow::WorkflowAutoPropertyDeclaration::configConst",
					L"vl::glr::workflow::WorkflowAutoPropertyDeclaration::configObserve",
					L"vl::glr::workflow::WorkflowAutoPropertyDeclaration::expression",
					L"vl::glr::workflow::WorkflowAutoPropertyDeclaration::type",
					L"vl::glr::workflow::WorkflowBaseConstructorCall::arguments",
					L"vl::glr::workflow::WorkflowBaseConstructorCall::type",
					L"vl::glr::workflow::WorkflowBinaryExpression::first",
					L"vl::glr::workflow::WorkflowBinaryExpression::op",
					L"vl::glr::workflow::WorkflowBinaryExpression::second",
					L"vl::glr::workflow::WorkflowBindExpression::expression",
					L"vl::glr::workflow::WorkflowBlockStatement::endLabel",
					L"vl::glr::workflow::WorkflowBlockStatement::statements",
					L"vl::glr::workflow::WorkflowCallExpression::arguments",
					L"vl::glr::workflow::WorkflowCallExpression::function",
					L"vl::glr::workflow::WorkflowCastResultInterfaceDeclaration::baseType",
					L"vl::glr::workflow::WorkflowCastResultInterfaceDeclaration::elementType",
					L"vl::glr::workflow::WorkflowChildExpression::name",
					L"vl::glr::workflow::WorkflowChildExpression::parent",
					L"vl::glr::workflow::WorkflowChildType::name",
					L"vl::glr::workflow::WorkflowChildType::parent",
					L"vl::glr::workflow::WorkflowClassDeclaration::baseTypes",
					L"vl::glr::workflow::WorkflowClassDeclaration::constructorType",
					L"vl::glr::workflow::WorkflowClassDeclaration::declarations",
					L"vl::glr::workflow::WorkflowClassDeclaration::kind",
					L"vl::glr::workflow::WorkflowCoOperatorExpression::name",
					L"vl::glr::workflow::WorkflowCoOperatorStatement::arguments",
					L"vl::glr::workflow::WorkflowCoOperatorStatement::opName",
					L"vl::glr::workflow::WorkflowCoOperatorStatement::varName",
					L"vl::glr::workflow::WorkflowCoPauseStatement::statement",
					L"vl::glr::workflow::WorkflowCoProviderStatement::name",
					L"vl::glr::workflow::WorkflowCoProviderStatement::statement",
					L"vl::glr::workflow::WorkflowConstructorArgument::key",
					L"vl::glr::workflow::WorkflowConstructorArgument::value",
					L"vl::glr::workflow::WorkflowConstructorDeclaration::arguments",
					L"vl::glr::workflow::WorkflowConstructorDeclaration::baseConstructorCalls",
					L"vl::glr::workflow::WorkflowConstructorDeclaration::constructorType",
					L"vl::glr::workflow::WorkflowConstructorDeclaration::statement",
					L"vl::glr::workflow::WorkflowConstructorExpression::arguments",
					L"vl::glr::workflow::WorkflowDeclaration::attributes",
					L"vl::glr::workflow::WorkflowDeclaration::classMemberKind",
					L"vl::glr::workflow::WorkflowDeclaration::name",
					L"vl::glr::workflow::WorkflowDeleteStatement::expression",
					L"vl::glr::workflow::WorkflowDestructorDeclaration::statement",
					L"vl::glr::workflow::WorkflowDetachEventExpression::event",
					L"vl::glr::workflow::WorkflowDetachEventExpression::handler",
					L"vl::glr::workflow::WorkflowEnumDeclaration::items",
					L"vl::glr::workflow::WorkflowEnumDeclaration::kind",
					L"vl::glr::workflow::WorkflowEnumItem::attributes",
					L"vl::glr::workflow::WorkflowEnumItem::intersections",
					L"vl::glr::workflow::WorkflowEnumItem::kind",
					L"vl::glr::workflow::WorkflowEnumItem::name",
					L"vl::glr::workflow::WorkflowEnumItem::number",
					L"vl::glr::workflow::WorkflowEnumItemIntersection::name",
					L"vl::glr::workflow::WorkflowEnumerableType::element",
					L"vl::glr::workflow::WorkflowEventDeclaration::arguments",
					L"vl::glr::workflow::WorkflowExpectedTypeCastExpression::expression",
					L"vl::glr::workflow::WorkflowExpectedTypeCastExpression::strategy",
					L"vl::glr::workflow::WorkflowExpressionStatement::expression",
					L"vl::glr::workflow::WorkflowFloatingExpression::value",
					L"vl::glr::workflow::WorkflowForEachStatement::collection",
					L"vl::glr::workflow::WorkflowForEachStatement::direction",
					L"vl::glr::workflow::WorkflowForEachStatement::name",
					L"vl::glr::workflow::WorkflowForEachStatement::statement",
					L"vl::glr::workflow::WorkflowFormatExpression::value",
					L"vl::glr::workflow::WorkflowFunctionArgument::attributes",
					L"vl::glr::workflow::WorkflowFunctionArgument::name",
					L"vl::glr::workflow::WorkflowFunctionArgument::type",
					L"vl::glr::workflow::WorkflowFunctionDeclaration::anonymity",
					L"vl::glr::workflow::WorkflowFunctionDeclaration::arguments",
					L"vl::glr::workflow::WorkflowFunctionDeclaration::returnType",
					L"vl::glr::workflow::WorkflowFunctionDeclaration::statement",
					L"vl::glr::workflow::WorkflowFunctionExpression::function",
					L"vl::glr::workflow::WorkflowFunctionType::arguments",
					L"vl::glr::workflow::WorkflowFunctionType::result",
					L"vl::glr::workflow::WorkflowGotoStatement::label",
					L"vl::glr::workflow::WorkflowIfExpression::condition",
					L"vl::glr::workflow::WorkflowIfExpression::falseBranch",
					L"vl::glr::workflow::WorkflowIfExpression::trueBranch",
					L"vl::glr::workflow::WorkflowIfStatement::expression",
					L"vl::glr::workflow::WorkflowIfStatement::falseBranch",
					L"vl::glr::workflow::WorkflowIfStatement::name",
					L"vl::glr::workflow::WorkflowIfStatement::trueBranch",
					L"vl::glr::workflow::WorkflowIfStatement::type",
					L"vl::glr::workflow::WorkflowInferExpression::expression",
					L"vl::glr::workflow::WorkflowInferExpression::type",
					L"vl::glr::workflow::WorkflowIntegerExpression::value",
					L"vl::glr::workflow::WorkflowLetExpression::expression",
					L"vl::glr::workflow::WorkflowLetExpression::variables",
					L"vl::glr::workflow::WorkflowLetVariable::name",
					L"vl::glr::workflow::WorkflowLetVariable::value",
					L"vl::glr::workflow::WorkflowLiteralExpression::value",
					L"vl::glr::workflow::WorkflowMapType::key",
					L"vl::glr::workflow::WorkflowMapType::value",
					L"vl::glr::workflow::WorkflowMapType::writability",
					L"vl::glr::workflow::WorkflowMemberExpression::name",
					L"vl::glr::workflow::WorkflowMemberExpression::parent",
					L"vl::glr::workflow::WorkflowMixinCastExpression::expression",
					L"vl::glr::workflow::WorkflowMixinCastExpression::type",
					L"vl::glr::workflow::WorkflowModule::declarations",
					L"vl::glr::workflow::WorkflowModule::moduleType",
					L"vl::glr::workflow::WorkflowModule::name",
					L"vl::glr::workflow::WorkflowModule::paths",
					L"vl::glr::workflow::WorkflowModuleUsingItem::fragments",
					L"vl::glr::workflow::WorkflowModuleUsingNameFragment::name",
					L"vl::glr::workflow::WorkflowModuleUsingPath::items",
					L"vl::glr::workflow::WorkflowNamespaceDeclaration::declarations",
					L"vl::glr::workflow::WorkflowNewClassExpression::arguments",
					L"vl::glr::workflow::WorkflowNewClassExpression::type",
					L"vl::glr::workflow::WorkflowNewCoroutineExpression::name",
					L"vl::glr::workflow::WorkflowNewCoroutineExpression::statement",
					L"vl::glr::workflow::WorkflowNewInterfaceExpression::declarations",
					L"vl::glr::workflow::WorkflowNewInterfaceExpression::type",
					L"vl::glr::workflow::WorkflowNullableType::element",
					L"vl::glr::workflow::WorkflowObservableListType::element",
					L"vl::glr::workflow::WorkflowObserveExpression::events",
					L"vl::glr::workflow::WorkflowObserveExpression::expression",
					L"vl::glr::workflow::WorkflowObserveExpression::name",
					L"vl::glr::workflow::WorkflowObserveExpression::observeType",
					L"vl::glr::workflow::WorkflowObserveExpression::parent",
					L"vl::glr::workflow::WorkflowOrderedLambdaExpression::body",
					L"vl::glr::workflow::WorkflowOrderedNameExpression::name",
					L"vl::glr::workflow::WorkflowPredefinedType::name",
					L"vl::glr::workflow::WorkflowPropertyDeclaration::getter",
					L"vl::glr::workflow::WorkflowPropertyDeclaration::setter",
					L"vl::glr::workflow::WorkflowPropertyDeclaration::type",
					L"vl::glr::workflow::WorkflowPropertyDeclaration::valueChangedEvent",
					L"vl::glr::workflow::WorkflowRaiseExceptionStatement::expression",
					L"vl::glr::workflow::WorkflowRangeExpression::begin",
					L"vl::glr::workflow::WorkflowRangeExpression::beginBoundary",
					L"vl::glr::workflow::WorkflowRangeExpression::end",
					L"vl::glr::workflow::WorkflowRangeExpression::endBoundary",
					L"vl::glr::workflow::WorkflowRawPointerType::element",
					L"vl::glr::workflow::WorkflowReferenceExpression::name",
					L"vl::glr::workflow::WorkflowReferenceType::name",
					L"vl::glr::workflow::WorkflowReturnStatement::expression",
					L"vl::glr::workflow::WorkflowSetTestingExpression::collection",
					L"vl::glr::workflow::WorkflowSetTestingExpression::element",
					L"vl::glr::workflow::WorkflowSetTestingExpression::test",
					L"vl::glr::workflow::WorkflowSharedPointerType::element",
					L"vl::glr::workflow::WorkflowStateDeclaration::arguments",
					L"vl::glr::workflow::WorkflowStateDeclaration::name",
					L"vl::glr::workflow::WorkflowStateDeclaration::statement",
					L"vl::glr::workflow::WorkflowStateInput::arguments",
					L"vl::glr::workflow::WorkflowStateInput::name",
					L"vl::glr::workflow::WorkflowStateInvokeStatement::arguments",
					L"vl::glr::workflow::WorkflowStateInvokeStatement::name",
					L"vl::glr::workflow::WorkflowStateInvokeStatement::type",
					L"vl::glr::workflow::WorkflowStateMachineDeclaration::inputs",
					L"vl::glr::workflow::WorkflowStateMachineDeclaration::states",
					L"vl::glr::workflow::WorkflowStateSwitchArgument::name",
					L"vl::glr::workflow::WorkflowStateSwitchCase::arguments",
					L"vl::glr::workflow::WorkflowStateSwitchCase::name",
					L"vl::glr::workflow::WorkflowStateSwitchCase::statement",
					L"vl::glr::workflow::WorkflowStateSwitchStatement::caseBranches",
					L"vl::glr::workflow::WorkflowStateSwitchStatement::type",
					L"vl::glr::workflow::WorkflowStringExpression::value",
					L"vl::glr::workflow::WorkflowStructDeclaration::members",
					L"vl::glr::workflow::WorkflowStructMember::attributes",
					L"vl::glr::workflow::WorkflowStructMember::name",
					L"vl::glr::workflow::WorkflowStructMember::type",
					L"vl::glr::workflow::WorkflowSwitchCase::expression",
					L"vl::glr::workflow::WorkflowSwitchCase::statement",
					L"vl::glr::workflow::WorkflowSwitchStatement::caseBranches",
					L"vl::glr::workflow::WorkflowSwitchStatement::defaultBranch",
					L"vl::glr::workflow::WorkflowSwitchStatement::expression",
					L"vl::glr::workflow::WorkflowTopQualifiedExpression::name",
					L"vl::glr::workflow::WorkflowTopQualifiedType::name",
					L"vl::glr::workflow::WorkflowTryStatement::catchStatement",
					L"vl::glr::workflow::WorkflowTryStatement::finallyStatement",
					L"vl::glr::workflow::WorkflowTryStatement::name",
					L"vl::glr::workflow::WorkflowTryStatement::protectedStatement",
					L"vl::glr::workflow::WorkflowTypeCastingExpression::expression",
					L"vl::glr::workflow::WorkflowTypeCastingExpression::strategy",
					L"vl::glr::workflow::WorkflowTypeCastingExpression::type",
					L"vl::glr::workflow::WorkflowTypeOfExpressionExpression::expression",
					L"vl::glr::workflow::WorkflowTypeOfTypeExpression::type",
					L"vl::glr::workflow::WorkflowTypeTestingExpression::expression",
					L"vl::glr::workflow::WorkflowTypeTestingExpression::test",
					L"vl::glr::workflow::WorkflowTypeTestingExpression::type",
					L"vl::glr::workflow::WorkflowUnaryExpression::op",
					L"vl::glr::workflow::WorkflowUnaryExpression::operand",
					L"vl::glr::workflow::WorkflowVariableDeclaration::expression",
					L"vl::glr::workflow::WorkflowVariableDeclaration::type",
					L"vl::glr::workflow::WorkflowVariableStatement::variable",
					L"vl::glr::workflow::WorkflowVirtualCfeDeclaration::expandedDeclarations",
					L"vl::glr::workflow::WorkflowVirtualCfeExpression::expandedExpression",
					L"vl::glr::workflow::WorkflowVirtualCseDeclaration::expandedDeclarations",
					L"vl::glr::workflow::WorkflowVirtualCseExpression::expandedExpression",
					L"vl::glr::workflow::WorkflowVirtualCseStatement::expandedStatement",
					L"vl::glr::workflow::WorkflowWhileStatement::condition",
					L"vl::glr::workflow::WorkflowWhileStatement::statement",
				};
				vl::vint index = (vl::vint)field;
				return 0 <= index && index < 196 ? results[index] : nullptr;
			}

			vl::Ptr<vl::glr::ParsingAstBase> WorkflowAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
			{
				auto cppTypeName = WorkflowCppTypeName((WorkflowClasses)type);
				return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
			}
		}
	}
}
