/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Workflow
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_BUILTIN_WORKFLOW_AST_ASSEMBLER
#define VCZH_PARSER2_BUILTIN_WORKFLOW_AST_ASSEMBLER

#include "WorkflowAst.h"

namespace vl
{
	namespace glr
	{
		namespace workflow
		{
			enum class WorkflowClasses : vl::vint32_t
			{
				AttachEventExpression = 0,
				Attribute = 1,
				AutoPropertyDeclaration = 2,
				BaseConstructorCall = 3,
				BinaryExpression = 4,
				BindExpression = 5,
				BlockStatement = 6,
				BreakStatement = 7,
				CallExpression = 8,
				CastResultInterfaceDeclaration = 9,
				ChildExpression = 10,
				ChildType = 11,
				ClassDeclaration = 12,
				CoOperatorExpression = 13,
				CoOperatorStatement = 14,
				CoPauseStatement = 15,
				CoProviderStatement = 16,
				ConstructorArgument = 17,
				ConstructorDeclaration = 18,
				ConstructorExpression = 19,
				ContinueStatement = 20,
				CoroutineStatement = 21,
				Declaration = 22,
				DeleteStatement = 23,
				DestructorDeclaration = 24,
				DetachEventExpression = 25,
				EnumDeclaration = 26,
				EnumItem = 27,
				EnumItemIntersection = 28,
				EnumerableType = 29,
				EventDeclaration = 30,
				ExpectedTypeCastExpression = 31,
				Expression = 32,
				ExpressionStatement = 33,
				FloatingExpression = 34,
				ForEachStatement = 35,
				FormatExpression = 36,
				FunctionArgument = 37,
				FunctionDeclaration = 38,
				FunctionExpression = 39,
				FunctionType = 40,
				GotoStatement = 41,
				IfExpression = 42,
				IfStatement = 43,
				InferExpression = 44,
				IntegerExpression = 45,
				LetExpression = 46,
				LetVariable = 47,
				LiteralExpression = 48,
				MapType = 49,
				MemberExpression = 50,
				MixinCastExpression = 51,
				Module = 52,
				ModuleUsingFragment = 53,
				ModuleUsingItem = 54,
				ModuleUsingNameFragment = 55,
				ModuleUsingPath = 56,
				ModuleUsingWildCardFragment = 57,
				NamespaceDeclaration = 58,
				NewClassExpression = 59,
				NewCoroutineExpression = 60,
				NewInterfaceExpression = 61,
				NullableType = 62,
				ObservableListType = 63,
				ObserveExpression = 64,
				OrderedLambdaExpression = 65,
				OrderedNameExpression = 66,
				PredefinedType = 67,
				PropertyDeclaration = 68,
				RaiseExceptionStatement = 69,
				RangeExpression = 70,
				RawPointerType = 71,
				ReferenceExpression = 72,
				ReferenceType = 73,
				ReturnStatement = 74,
				SetTestingExpression = 75,
				SharedPointerType = 76,
				StateDeclaration = 77,
				StateInput = 78,
				StateInvokeStatement = 79,
				StateMachineDeclaration = 80,
				StateMachineStatement = 81,
				StateSwitchArgument = 82,
				StateSwitchCase = 83,
				StateSwitchStatement = 84,
				Statement = 85,
				StringExpression = 86,
				StructDeclaration = 87,
				StructMember = 88,
				SwitchCase = 89,
				SwitchStatement = 90,
				ThisExpression = 91,
				TopQualifiedExpression = 92,
				TopQualifiedType = 93,
				TryStatement = 94,
				Type = 95,
				TypeCastingExpression = 96,
				TypeOfExpressionExpression = 97,
				TypeOfTypeExpression = 98,
				TypeTestingExpression = 99,
				UnaryExpression = 100,
				VariableDeclaration = 101,
				VariableStatement = 102,
				VirtualCfeDeclaration = 103,
				VirtualCfeExpression = 104,
				VirtualCseDeclaration = 105,
				VirtualCseExpression = 106,
				VirtualCseStatement = 107,
				WhileStatement = 108,
			};

			enum class WorkflowFields : vl::vint32_t
			{
				AttachEventExpression_event = 0,
				AttachEventExpression_function = 1,
				Attribute_category = 2,
				Attribute_name = 3,
				Attribute_value = 4,
				AutoPropertyDeclaration_configConst = 5,
				AutoPropertyDeclaration_configObserve = 6,
				AutoPropertyDeclaration_expression = 7,
				AutoPropertyDeclaration_type = 8,
				BaseConstructorCall_arguments = 9,
				BaseConstructorCall_type = 10,
				BinaryExpression_first = 11,
				BinaryExpression_op = 12,
				BinaryExpression_second = 13,
				BindExpression_expression = 14,
				BlockStatement_endLabel = 15,
				BlockStatement_statements = 16,
				CallExpression_arguments = 17,
				CallExpression_function = 18,
				CastResultInterfaceDeclaration_baseType = 19,
				CastResultInterfaceDeclaration_elementType = 20,
				ChildExpression_name = 21,
				ChildExpression_parent = 22,
				ChildType_name = 23,
				ChildType_parent = 24,
				ClassDeclaration_baseTypes = 25,
				ClassDeclaration_constructorType = 26,
				ClassDeclaration_declarations = 27,
				ClassDeclaration_kind = 28,
				CoOperatorExpression_name = 29,
				CoOperatorStatement_arguments = 30,
				CoOperatorStatement_opName = 31,
				CoOperatorStatement_varName = 32,
				CoPauseStatement_statement = 33,
				CoProviderStatement_name = 34,
				CoProviderStatement_statement = 35,
				ConstructorArgument_key = 36,
				ConstructorArgument_value = 37,
				ConstructorDeclaration_arguments = 38,
				ConstructorDeclaration_baseConstructorCalls = 39,
				ConstructorDeclaration_constructorType = 40,
				ConstructorDeclaration_statement = 41,
				ConstructorExpression_arguments = 42,
				Declaration_attributes = 43,
				Declaration_classMemberKind = 44,
				Declaration_name = 45,
				DeleteStatement_expression = 46,
				DestructorDeclaration_statement = 47,
				DetachEventExpression_event = 48,
				DetachEventExpression_handler = 49,
				EnumDeclaration_items = 50,
				EnumDeclaration_kind = 51,
				EnumItem_attributes = 52,
				EnumItem_intersections = 53,
				EnumItem_kind = 54,
				EnumItem_name = 55,
				EnumItem_number = 56,
				EnumItemIntersection_name = 57,
				EnumerableType_element = 58,
				EventDeclaration_arguments = 59,
				ExpectedTypeCastExpression_expression = 60,
				ExpectedTypeCastExpression_strategy = 61,
				ExpressionStatement_expression = 62,
				FloatingExpression_value = 63,
				ForEachStatement_collection = 64,
				ForEachStatement_direction = 65,
				ForEachStatement_name = 66,
				ForEachStatement_statement = 67,
				FormatExpression_value = 68,
				FunctionArgument_attributes = 69,
				FunctionArgument_name = 70,
				FunctionArgument_type = 71,
				FunctionDeclaration_anonymity = 72,
				FunctionDeclaration_arguments = 73,
				FunctionDeclaration_returnType = 74,
				FunctionDeclaration_statement = 75,
				FunctionExpression_function = 76,
				FunctionType_arguments = 77,
				FunctionType_result = 78,
				GotoStatement_label = 79,
				IfExpression_condition = 80,
				IfExpression_falseBranch = 81,
				IfExpression_trueBranch = 82,
				IfStatement_expression = 83,
				IfStatement_falseBranch = 84,
				IfStatement_name = 85,
				IfStatement_trueBranch = 86,
				IfStatement_type = 87,
				InferExpression_expression = 88,
				InferExpression_type = 89,
				IntegerExpression_value = 90,
				LetExpression_expression = 91,
				LetExpression_variables = 92,
				LetVariable_name = 93,
				LetVariable_value = 94,
				LiteralExpression_value = 95,
				MapType_key = 96,
				MapType_value = 97,
				MapType_writability = 98,
				MemberExpression_name = 99,
				MemberExpression_parent = 100,
				MixinCastExpression_expression = 101,
				MixinCastExpression_type = 102,
				Module_declarations = 103,
				Module_moduleType = 104,
				Module_name = 105,
				Module_paths = 106,
				ModuleUsingItem_fragments = 107,
				ModuleUsingNameFragment_name = 108,
				ModuleUsingPath_items = 109,
				NamespaceDeclaration_declarations = 110,
				NewClassExpression_arguments = 111,
				NewClassExpression_type = 112,
				NewCoroutineExpression_name = 113,
				NewCoroutineExpression_statement = 114,
				NewInterfaceExpression_declarations = 115,
				NewInterfaceExpression_type = 116,
				NullableType_element = 117,
				ObservableListType_element = 118,
				ObserveExpression_events = 119,
				ObserveExpression_expression = 120,
				ObserveExpression_name = 121,
				ObserveExpression_observeType = 122,
				ObserveExpression_parent = 123,
				OrderedLambdaExpression_body = 124,
				OrderedNameExpression_name = 125,
				PredefinedType_name = 126,
				PropertyDeclaration_getter = 127,
				PropertyDeclaration_setter = 128,
				PropertyDeclaration_type = 129,
				PropertyDeclaration_valueChangedEvent = 130,
				RaiseExceptionStatement_expression = 131,
				RangeExpression_begin = 132,
				RangeExpression_beginBoundary = 133,
				RangeExpression_end = 134,
				RangeExpression_endBoundary = 135,
				RawPointerType_element = 136,
				ReferenceExpression_name = 137,
				ReferenceType_name = 138,
				ReturnStatement_expression = 139,
				SetTestingExpression_collection = 140,
				SetTestingExpression_element = 141,
				SetTestingExpression_test = 142,
				SharedPointerType_element = 143,
				StateDeclaration_arguments = 144,
				StateDeclaration_name = 145,
				StateDeclaration_statement = 146,
				StateInput_arguments = 147,
				StateInput_name = 148,
				StateInvokeStatement_arguments = 149,
				StateInvokeStatement_name = 150,
				StateInvokeStatement_type = 151,
				StateMachineDeclaration_inputs = 152,
				StateMachineDeclaration_states = 153,
				StateSwitchArgument_name = 154,
				StateSwitchCase_arguments = 155,
				StateSwitchCase_name = 156,
				StateSwitchCase_statement = 157,
				StateSwitchStatement_caseBranches = 158,
				StateSwitchStatement_type = 159,
				StringExpression_value = 160,
				StructDeclaration_members = 161,
				StructMember_attributes = 162,
				StructMember_name = 163,
				StructMember_type = 164,
				SwitchCase_expression = 165,
				SwitchCase_statement = 166,
				SwitchStatement_caseBranches = 167,
				SwitchStatement_defaultBranch = 168,
				SwitchStatement_expression = 169,
				TopQualifiedExpression_name = 170,
				TopQualifiedType_name = 171,
				TryStatement_catchStatement = 172,
				TryStatement_finallyStatement = 173,
				TryStatement_name = 174,
				TryStatement_protectedStatement = 175,
				TypeCastingExpression_expression = 176,
				TypeCastingExpression_strategy = 177,
				TypeCastingExpression_type = 178,
				TypeOfExpressionExpression_expression = 179,
				TypeOfTypeExpression_type = 180,
				TypeTestingExpression_expression = 181,
				TypeTestingExpression_test = 182,
				TypeTestingExpression_type = 183,
				UnaryExpression_op = 184,
				UnaryExpression_operand = 185,
				VariableDeclaration_expression = 186,
				VariableDeclaration_type = 187,
				VariableStatement_variable = 188,
				VirtualCfeDeclaration_expandedDeclarations = 189,
				VirtualCfeExpression_expandedExpression = 190,
				VirtualCseDeclaration_expandedDeclarations = 191,
				VirtualCseExpression_expandedExpression = 192,
				VirtualCseStatement_expandedStatement = 193,
				WhileStatement_condition = 194,
				WhileStatement_statement = 195,
			};

			extern const wchar_t* WorkflowTypeName(WorkflowClasses type);
			extern const wchar_t* WorkflowCppTypeName(WorkflowClasses type);
			extern const wchar_t* WorkflowFieldName(WorkflowFields field);
			extern const wchar_t* WorkflowCppFieldName(WorkflowFields field);

			class WorkflowAstInsReceiver : public vl::glr::AstInsReceiverBase
			{
			protected:
				vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token) override;
				void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem) override;
				vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
			};
		}
	}
}
#endif