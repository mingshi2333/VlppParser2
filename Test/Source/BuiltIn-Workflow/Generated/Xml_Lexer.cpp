/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Xml
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "Xml_Lexer.h"

namespace vl
{
	namespace glr
	{
		namespace xml
		{
			bool XmlTokenDeleter(vl::vint token)
			{
				return false;
			}

			const wchar_t* XmlTokenId(XmlTokens token)
			{
				static const wchar_t* results[] = {
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < XmlTokenCount ? results[index] : nullptr;
			}

			const wchar_t* XmlTokenDisplayText(XmlTokens token)
			{
				static const wchar_t* results[] = {
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < XmlTokenCount ? results[index] : nullptr;
			}

			const wchar_t* XmlTokenRegex(XmlTokens token)
			{
				static const wchar_t* results[] = {
				};
				vl::vint index = (vl::vint)token;
				return 0 <= index && index < XmlTokenCount ? results[index] : nullptr;
			}

			void XmlLexerData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 24; // 29 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 24;
				static const vl::vint dataSolidRows = 0;
				static const vl::vint dataRows = 1;
				static const char* compressed[] = {
					"\x1D\x00\x00\x00\x10\x00\x00\x00\x01\x00\x01\x80\x81\x84\x85\x80\x01\x7F\x08\xFF\x40\x03\x86\x80",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}
		}
	}
}
