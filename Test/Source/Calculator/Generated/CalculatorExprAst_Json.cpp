/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CalculatorExprAst_Json.h"

namespace calculator::json_visitor
{
	void ExprAstVisitor::PrintFields(Arg* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void ExprAstVisitor::PrintFields(Binary* node)
	{
		BeginField(L"left");
		Print(node->left.Obj());
		EndField();
		BeginField(L"op");
		switch (node->op)
		{
		case calculator::BinaryOp::Add:
			WriteString(L"Add");
			break;
		case calculator::BinaryOp::Divid:
			WriteString(L"Divid");
			break;
		case calculator::BinaryOp::EQ:
			WriteString(L"EQ");
			break;
		case calculator::BinaryOp::GE:
			WriteString(L"GE");
			break;
		case calculator::BinaryOp::GT:
			WriteString(L"GT");
			break;
		case calculator::BinaryOp::LE:
			WriteString(L"LE");
			break;
		case calculator::BinaryOp::LT:
			WriteString(L"LT");
			break;
		case calculator::BinaryOp::Minus:
			WriteString(L"Minus");
			break;
		case calculator::BinaryOp::Multiply:
			WriteString(L"Multiply");
			break;
		case calculator::BinaryOp::NE:
			WriteString(L"NE");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"right");
		Print(node->right.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(Call* node)
	{
		BeginField(L"args");
		BeginArray();
		for (auto&& listItem : node->args)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"func");
		Print(node->func.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(Expandable* node)
	{
		BeginField(L"expanded");
		Print(node->expanded.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(Expr* node)
	{
	}
	void ExprAstVisitor::PrintFields(False* node)
	{
	}
	void ExprAstVisitor::PrintFields(Func* node)
	{
		BeginField(L"args");
		BeginArray();
		for (auto&& listItem : node->args)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"value");
		Print(node->value.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(Import* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void ExprAstVisitor::PrintFields(LetExpr* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"result");
		Print(node->result.Obj());
		EndField();
		BeginField(L"value");
		Print(node->value.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(Module* node)
	{
		BeginField(L"exported");
		Print(node->exported.Obj());
		EndField();
		BeginField(L"imports");
		BeginArray();
		for (auto&& listItem : node->imports)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void ExprAstVisitor::PrintFields(NumExpr* node)
	{
		BeginField(L"value");
		WriteToken(node->value);
		EndField();
	}
	void ExprAstVisitor::PrintFields(Ref* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void ExprAstVisitor::PrintFields(True* node)
	{
	}
	void ExprAstVisitor::PrintFields(Unary* node)
	{
		BeginField(L"op");
		switch (node->op)
		{
		case calculator::UnaryOp::Negative:
			WriteString(L"Negative");
			break;
		case calculator::UnaryOp::Positive:
			WriteString(L"Positive");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"operand");
		Print(node->operand.Obj());
		EndField();
	}

	void ExprAstVisitor::Visit(NumExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"NumExpr", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<NumExpr*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(Ref* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Ref", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<Ref*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(True* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"True", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<True*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(False* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"False", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<False*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(Func* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Func", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<Func*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(Call* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Call", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<Call*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(Expandable* node)
	{
		node->Accept(static_cast<Expandable::IVisitor*>(this));
	}

	void ExprAstVisitor::Visit(LetExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"LetExpr", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<Expandable*>(node));
		PrintFields(static_cast<LetExpr*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(Unary* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Unary", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<Expandable*>(node));
		PrintFields(static_cast<Unary*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(Binary* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Binary", node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<Expandable*>(node));
		PrintFields(static_cast<Binary*>(node));
		EndObject();
	}

	ExprAstVisitor::ExprAstVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void ExprAstVisitor::Print(Expr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<Expr::IVisitor*>(this));
	}

	void ExprAstVisitor::Print(Arg* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Arg", node);
		PrintFields(static_cast<Arg*>(node));
		EndObject();
	}

	void ExprAstVisitor::Print(Import* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Import", node);
		PrintFields(static_cast<Import*>(node));
		EndObject();
	}

	void ExprAstVisitor::Print(Module* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Module", node);
		PrintFields(static_cast<Module*>(node));
		EndObject();
	}

}
