/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Calculator
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_CALCULATOR_MODULEPARSER_SYNTAX
#define VCZH_PARSER2_UNITTEST_CALCULATOR_MODULEPARSER_SYNTAX

#include "Calculator_Assembler.h"
#include "Calculator_Lexer.h"

namespace calculator
{
	enum class ModuleParserStates
	{
		Arg = 0,
		Exp0 = 3,
		Exp1 = 12,
		Exp2 = 24,
		Exp3 = 33,
		Exp4 = 42,
		Exp5 = 57,
		Exp = 66,
		Import = 81,
		Module = 85,
	};

	template<ModuleParserStates> struct ModuleParserStateTypes;
	template<> struct ModuleParserStateTypes<ModuleParserStates::Exp> { using Type = calculator::Expr; };
	template<> struct ModuleParserStateTypes<ModuleParserStates::Module> { using Type = calculator::Module; };

	const wchar_t* ModuleParserRuleName(vl::vint index);
	const wchar_t* ModuleParserStateLabel(vl::vint index);
	extern void CalculatorModuleParserData(vl::stream::IStream& outputStream);

	class ModuleParser
		: public vl::glr::ParserBase<CalculatorTokens, ModuleParserStates, CalculatorAstInsReceiver, ModuleParserStateTypes>
		, protected vl::glr::automaton::TraceManager::ITypeCallback
	{
	protected:
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		ModuleParser();

		vl::Ptr<calculator::Expr> ParseExp(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<calculator::Expr> ParseExp(vl::collections::List<vl::regex::RegexToken>& tokens) const;
		vl::Ptr<calculator::Module> ParseModule(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<calculator::Module> ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens) const;
	};
}
#endif