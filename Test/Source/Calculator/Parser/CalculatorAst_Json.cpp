/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CalculatorAst_Json.h"

namespace calculator
{
	namespace json_visitor
	{
		void AstVisitor::PrintFields(Arg* node)
		{
			BeginField(L"name");
			WriteToken(node->name);
			EndField();
		}
		void AstVisitor::PrintFields(Binary* node)
		{
			BeginField(L"left");
			Print(node->left.Obj());
			EndField();
			BeginField(L"op");
			EndField();
			BeginField(L"right");
			Print(node->right.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Call* node)
		{
			BeginField(L"arg");
			Print(node->arg.Obj());
			EndField();
			BeginField(L"func");
			Print(node->func.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Expandable* node)
		{
			BeginField(L"expanded");
			Print(node->expanded.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Expr* node)
		{
		}
		void AstVisitor::PrintFields(False* node)
		{
		}
		void AstVisitor::PrintFields(Func* node)
		{
			BeginField(L"args");
			BeginArray();
			for (auto&& listItem : node->args)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
			BeginField(L"value");
			Print(node->value.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Import* node)
		{
			BeginField(L"name");
			WriteToken(node->name);
			EndField();
		}
		void AstVisitor::PrintFields(LetExpr* node)
		{
			BeginField(L"name");
			WriteToken(node->name);
			EndField();
			BeginField(L"value");
			Print(node->value.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Module* node)
		{
			BeginField(L"exported");
			Print(node->exported.Obj());
			EndField();
			BeginField(L"imports");
			BeginArray();
			for (auto&& listItem : node->imports)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
		}
		void AstVisitor::PrintFields(NumExpr* node)
		{
			BeginField(L"value");
			WriteToken(node->value);
			EndField();
		}
		void AstVisitor::PrintFields(Ref* node)
		{
			BeginField(L"name");
			WriteToken(node->name);
			EndField();
		}
		void AstVisitor::PrintFields(True* node)
		{
		}
		void AstVisitor::PrintFields(Unary* node)
		{
			BeginField(L"op");
			EndField();
			BeginField(L"operand");
			Print(node->operand.Obj());
			EndField();
		}

		void AstVisitor::Visit(NumExpr* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"NumExpr", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<NumExpr*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Ref* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Ref", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Ref*>(node));
			EndObject();
		}

		void AstVisitor::Visit(True* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"True", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<True*>(node));
			EndObject();
		}

		void AstVisitor::Visit(False* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"False", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<False*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Func* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Func", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Func*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Call* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Call", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Call*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Expandable* node)
		{
			node->Accept(static_cast<Expandable::IVisitor*>(this));
		}

		void AstVisitor::Visit(LetExpr* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"LetExpr", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Expandable*>(node));
			PrintFields(static_cast<LetExpr*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Unary* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Unary", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Expandable*>(node));
			PrintFields(static_cast<Unary*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Binary* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Binary", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Expandable*>(node));
			PrintFields(static_cast<Binary*>(node));
			EndObject();
		}

		void AstVisitor::Print(Expr* node)
		{
			if (!node) return;
			node->Accept(static_cast<Expr::IVisitor*>(this));
		}

		void AstVisitor::Print(Arg* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Arg", node);
			PrintFields(static_cast<Arg*>(node));
			EndObject();
		}

		void AstVisitor::Print(Import* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Import", node);
			PrintFields(static_cast<Import*>(node));
			EndObject();
		}

		void AstVisitor::Print(Module* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Module", node);
			PrintFields(static_cast<Module*>(node));
			EndObject();
		}

	}
}
