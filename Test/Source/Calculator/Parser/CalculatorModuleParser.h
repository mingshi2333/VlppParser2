/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Calculator
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_CALCULATOR_MODULEPARSER_SYNTAX
#define VCZH_PARSER2_UNITTEST_CALCULATOR_MODULEPARSER_SYNTAX

#include "Calculator_Assembler.h"
#include "Calculator_Lexer.h"

namespace calculator
{
	enum class ModuleParserStates
	{
		Arg = 0,
		Exp0 = 3,
		Exp1 = 12,
		Exp2 = 25,
		Exp3 = 34,
		Exp4 = 43,
		Exp5 = 58,
		Exp = 67,
		Import = 83,
		Module = 87,
	};

	template<ModuleParserStates> struct ModuleParserStateTypes;
	template<> struct ModuleParserStateTypes<ModuleParserStates::Exp> { using Type = calculator::Expr; };
	template<> struct ModuleParserStateTypes<ModuleParserStates::Module> { using Type = calculator::Module; };

	extern void CalculatorModuleParserData(vl::stream::IStream& outputStream);

	class ModuleParser: vl::glr::ParserBase<CalculatorTokens, ModuleParserStates, CalculatorAstInsReceiver, ModuleParserStateTypes>
	{
	public:
		ModuleParser();

		vl::Ptr<calculator::Expr> ParseExp(const vl::WString & input, vl::vint codeIndex = -1);
		vl::Ptr<calculator::Module> ParseModule(const vl::WString & input, vl::vint codeIndex = -1);
	};
}
#endif