/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Calculator
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "Calculator_Lexer.h"

namespace calculator
{
	bool CalculatorTokenDeleter(vl::vint token)
	{
		switch((CalculatorTokens)token)
		{
		case CalculatorTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* CalculatorTokenId(CalculatorTokens token)
	{
		static const wchar_t* results[] = {
			L"ADD",
			L"SUB",
			L"MUL",
			L"DIV",
			L"GT",
			L"GE",
			L"LT",
			L"LE",
			L"EQ",
			L"NE",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"COMMA",
			L"INFER",
			L"ASSIGN",
			L"TRUE",
			L"FALSE",
			L"LET",
			L"IN",
			L"IMPORT",
			L"EXPORT",
			L"NUM",
			L"ID",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < CalculatorTokenCount ? results[index] : nullptr;
	}

	const wchar_t* CalculatorTokenDisplayText(CalculatorTokens token)
	{
		static const wchar_t* results[] = {
			L"+",
			L"-",
			L"*",
			L"/",
			L">",
			L">=",
			L"<",
			L"<=",
			L"==",
			L"!=",
			L"(",
			L")",
			L",",
			L"->",
			L"<-",
			L"true",
			L"false",
			L"let",
			L"in",
			L"import",
			L"export",
			nullptr,
			nullptr,
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < CalculatorTokenCount ? results[index] : nullptr;
	}

	const wchar_t* CalculatorTokenRegex(CalculatorTokens token)
	{
		static const wchar_t* results[] = {
			L"/+",
			L"-",
			L"/*",
			L"//",
			L"/>",
			L"/>=",
			L"/<",
			L"/<=",
			L"==",
			L"!=",
			L"/(",
			L"/)",
			L",",
			L"-/>",
			L"/<-",
			L"true",
			L"false",
			L"let",
			L"in",
			L"import",
			L"export",
			L"/d+(./d+)?",
			L"[a-zA-Z_][a-zA-Z0-9_]*",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < CalculatorTokenCount ? results[index] : nullptr;
	}

	void CalculatorLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 786; // 8867 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 18;
		static const vl::vint dataSolidRows = 3;
		static const vl::vint dataRows = 4;
		static const char* compressed[] = {
			"\xA3\x22\x00\x00\x0A\x03\x00\x00\x34\x00\x01\xA8\x01\x84\x81\x83\x12\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x81\x14\x88\x83\x81\x02\x84\xA9\x1A\x84\x82\x15\x8E\x82\x2B\x20\x84\x8C\x13\x94\x81\x16\x93\x04\xAE\x29\x84\x8F\x14\x94\x82\x18\x04\xB9\x04\x9C\x13\x9C\x81\x1E\x9B\x04\xBE\x39\x84\x81\x24\x82\x2C\x82\x5F\x40\x84\x81\x33\xA4\x82\x30\x82\x64\x04\xA5\x2A\xA4\x86\x31\xA6\x82\x67\x04\xA8\x24\x89\x34\xA8\x82\x35\x04\xEB\x04\x8C\x3B\xAC\x81\x36\xAF\x04\xEE\x21\xA4\x8F\x34\xB0\x82\x38\x67\x84\xB1\x2A\xB4\x82\x39\xB6\x82\x73\x70\x84\x94\x33\xBC\x81\x3A\xBB\x04\xF6\x04\x97\x34\x80\x3D\xBE\x82\x79\x04\xBA\x24\x83\x0C\xC2\xC3\x80\x85\x81\x88\x0A\x81\x84\x85\x81\x01\x04\x81\x04\x8B\x04\x82\x00\x83\x7F\x98\xFF\x44\x04\x81\x0C\x82\x02\x82\x07\x04\x85\x04\x82\x0C\xD2\xD3\x80\xA5\x81\x90\x10\x88\xD4\x83\x07\xD3\x00\x0E\x30\xC9\xD0\x04\xDA\xDB\xD9\x04\x8C\x38\xCD\xDC\xD8\x01\xCD\xDF\xC0\xC1\xC2\xE3\xE4\xE5\xE2\xE3\xE3\xC8\xC9\xCA\xEB\xEC\xE5\xE6\xE7\xE7\xD0\x94\x17\xD0\xE4\xED\xEA\xEB\xEB\xD8\xD9\xDA\xFB",
			"\xEC\xED\xEE\xEF\xEF\xE0\xE1\xE2\xEA\xE5\x0B\xEB\xF1\xF3\xE8\xCF\xD7\x06\xF8\xE6\x08\xF7\xF4\xF0\xF1\xDB\xF8\x0F\xF2\xFA\xFB\xFB\xCE\x99\x35\xF8\xFC\xFD\xFE\xFF\xFF\x00\x81\x82\x83\x80\x04\x85\x86\x83\x6F\x1B\x3B\x70\x71\x82\x01\x4C\x80\x02\x83\x10\x84\x41\x85\x83\x12\x95\x84\x87\x85\x0F\x96\x89\x85\x40\x1A\x1A\x83\x87\x86\x20\x8E\x85\x82\x88\xC6\x5F\x8C\x06\x87\x28\x98\x8F\x87\x8A\x29\xA1\x8D\x88\x8B\x01\x63\x8A\x80\x82\x2F\x84\x4D\x05\x8D\x2A\xB8\x8E\x89\x8E\x3C\xBB\x80\x8A\x8C\x31\xA5\x8A\x8C\x8C\x3E\x8E\x8F\x04\x41\x1E\x03\x9A\x91\x8F\x40\xBE\x62\x91\x8F\x44\x91\x9B\x91\x91\x3A\x92\x48\x85\x7F\x22\x2C\x75\x45\x90\x07\x9D\x93\x78\x89\xC5\x52\x90\x97\x94\x62\x94\x93\x9B\x95\x99\x63\x04\x42\x9A\x01\x6C\x90\x02\x9B\x5E\xB1\x92\x9F\x9C\x74\xB5\x96\x9F\x9D\x78\xB9\x9A\x9F\x9E\x7C\xBD\x9E\x9F\x9F\x80\xA0\x94\x71\x99\x84\xA4\x93\x94\x09\x3A\x8D\x97\x71\xA1\x67\xA6\x9E\xA0\xA3\x8E\x8A\xAF\x93\xA3\x53\xA5\x06\xA1\xA3\x65\x92\xA1\x9B\xA5\x94\x98\xAA\x8E\x09\x53\x9A\xA3\xA0\xA7\x90\xA5\xAC\xA6\xA8\xC3\x66\xAE\xA5\xA3",
			"\x07\x6B\xAD\xA6\x93\x03\x82\xA9\xA8\xA9\xB4\x99\x4E\xA9\xA6\xFC\x59\x9C\x97\x3F\x5B\xB0\xA0\xA3\xAF\x1B\x7B\xAF\xAD\x75\x6E\x85\xBB\x9B\x8C\xC3\x89\xBC\x76\xAC\xC2\x65\x9E\x47\xAD\xB5\xAF\xAF\x84\xAA\xCD\x91\xBA\xAA\xA3\x21\x50\xB2\xB0\x80\xCC\x81\x77\xB7\xB7\xD6\xAD\x84\xB6\xB7\xE1\xAE\xA4\x4A\xB6\xAF\xA3\xBB\x81\xB9\xAF\xA7\x48\xB8\xAE\x03\xAA\x4B\xB6\xB2\x7A\x9D\xBB\xBB\xBB\xEC\xA0\xB8\x99\xAC\xC8\x98\x65\x99\x4B\xF8\x81\xC2\xB5\xBF\xF7\x76\xB4\x8E\xC0\xFA\xA0\x80\x4E\xC0\xEA\x87\xC3\xC0\xC2\x2D\xB1\x01\xB5\x81\xF2\xBE\xA4\xBF\x9E\x06\xD9\x69\xC3\xC6\xEC\x8D\xCA\xC5\xBE\x20\xC1\x42\x0D\xA8\x04\x99\xCE\xBD\xC8\x0F\xCE\xA3\x0C\xC9\xFC\xB3\xB7\xBD\xCA\x1C\xD0\xCB\xBE\x80\x26\xFF\x31\xCC\xCC\x28\xFF\x6E\x1E\x3F\x98\x7B\x3F\x3F\x03\x00\x45\x42\xD0\x00\x92\x41\x46\x67\x63\x04\x5B\x61\x43\x67\x01\x74\x7D\xD1\x43\x01\x54\x61\x42\x6E\x01\x6E\x75\xD4\x41\x56\xC0\x09\xD5\xD6\xE5\x57\xD1\x43\x7A\x01\x4F\x41\x43\x68\x01\x61\x61\x42\x6C\x8A\x4C\x6A\xD4\xD6\x6C\xDE\xD5\x6D\xDB\x6B\xC1\x4D\xD4\x00\x4E\xC0\x00\xD9\xDC\x78",
			"\xDD\x6E\xD8\xD7\xAE\x70\xDB\xD4\x41\x73\xEB\x6B\xDF\x61\x00\x12\x71\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
