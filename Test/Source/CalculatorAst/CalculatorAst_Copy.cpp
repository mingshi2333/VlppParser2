/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:CalculatorAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "../../../Source/AstBase.h"
#include "CalculatorAst_Copy.h"

namespace calculator
{
	namespace copy_visitor
	{

/***********************************************************************
ExprVisitor
***********************************************************************/

		// CopyFields ----------------------------------------

		void ExprVisitor::CopyFields(Expr* from, Expr* to)
		{
		}

		void ExprVisitor::CopyFields(NumExpr* from, NumExpr* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->value = from->value;
		}

		void ExprVisitor::CopyFields(Ref* from, Ref* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->name = from->name;
		}

		void ExprVisitor::CopyFields(True* from, True* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
		}

		void ExprVisitor::CopyFields(False* from, False* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
		}

		void ExprVisitor::CopyFields(Func* from, Func* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			for (auto listItem : from->args)
			{
				to->args.Add(CreateField(listItem));
			}
			to->value = from->value;
		}

		void ExprVisitor::CopyFields(Arg* from, Arg* to)
		{
			to->name = from->name;
		}

		void ExprVisitor::CopyFields(Call* from, Call* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->arg = from->arg;
			to->func = from->func;
		}

		// CreateField ---------------------------------------

		vl::Ptr<Arg> ExprVisitor::CreateField(vl::Ptr<Arg> from)
		{
			static_assert(false);
		}

		// Visitor Members -----------------------------------

		void ExprVisitor::Visit(NumExpr* node)
		{
			static_assert(false);
		}

		void ExprVisitor::Visit(Ref* node)
		{
			static_assert(false);
		}

		void ExprVisitor::Visit(True* node)
		{
			static_assert(false);
		}

		void ExprVisitor::Visit(False* node)
		{
			static_assert(false);
		}

		void ExprVisitor::Visit(Func* node)
		{
			static_assert(false);
		}

		void ExprVisitor::Visit(Call* node)
		{
			static_assert(false);
		}

		void ExprVisitor::Visit(Expandable* node)
		{
			Dispatch(node);
		}

/***********************************************************************
ExpandableVisitor
***********************************************************************/

		// CopyFields ----------------------------------------

		void ExpandableVisitor::CopyFields(Expr* from, Expr* to)
		{
		}

		void ExpandableVisitor::CopyFields(Expandable* from, Expandable* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->expanded = from->expanded;
		}

		void ExpandableVisitor::CopyFields(LetExpr* from, LetExpr* to)
		{
			CopyFields(static_cast<Expandable*>(from), static_cast<Expandable*>(to));
			to->name = from->name;
			to->value = from->value;
		}

		void ExpandableVisitor::CopyFields(Unary* from, Unary* to)
		{
			CopyFields(static_cast<Expandable*>(from), static_cast<Expandable*>(to));
			to->op = from->op;
			to->operand = from->operand;
		}

		void ExpandableVisitor::CopyFields(Binary* from, Binary* to)
		{
			CopyFields(static_cast<Expandable*>(from), static_cast<Expandable*>(to));
			to->left = from->left;
			to->op = from->op;
			to->right = from->right;
		}

		// CreateField ---------------------------------------

		// Visitor Members -----------------------------------

		void ExpandableVisitor::Visit(LetExpr* node)
		{
			static_assert(false);
		}

		void ExpandableVisitor::Visit(Unary* node)
		{
			static_assert(false);
		}

		void ExpandableVisitor::Visit(Binary* node)
		{
			static_assert(false);
		}
	}
}
