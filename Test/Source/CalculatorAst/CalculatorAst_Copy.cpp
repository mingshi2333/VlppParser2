/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "../../../Source/AstBase.h"
#include "CalculatorAst_Copy.h"

namespace calculator
{
	namespace copy_visitor
	{
		void AstVisitor::CopyFields(Arg* from, Arg* to)
		{
			to->name = from->name;
		}

		void AstVisitor::CopyFields(Binary* from, Binary* to)
		{
			CopyFields(static_cast<Expandable*>(from), static_cast<Expandable*>(to));
			to->left = CopyNode(from->left.Obj());
			to->op = from->op;
			to->right = CopyNode(from->right.Obj());
		}

		void AstVisitor::CopyFields(Call* from, Call* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->arg = CopyNode(from->arg.Obj());
			to->func = CopyNode(from->func.Obj());
		}

		void AstVisitor::CopyFields(Expandable* from, Expandable* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->expanded = CopyNode(from->expanded.Obj());
		}

		void AstVisitor::CopyFields(Expr* from, Expr* to)
		{
		}

		void AstVisitor::CopyFields(False* from, False* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
		}

		void AstVisitor::CopyFields(Func* from, Func* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			for (auto&& listItem : from->args)
			{
				to->args.Add(CopyNode(listItem.Obj()));
			}
			to->value = CopyNode(from->value.Obj());
		}

		void AstVisitor::CopyFields(Import* from, Import* to)
		{
			to->name = from->name;
		}

		void AstVisitor::CopyFields(LetExpr* from, LetExpr* to)
		{
			CopyFields(static_cast<Expandable*>(from), static_cast<Expandable*>(to));
			to->name = from->name;
			to->value = CopyNode(from->value.Obj());
		}

		void AstVisitor::CopyFields(Module* from, Module* to)
		{
			to->exported = CopyNode(from->exported.Obj());
			for (auto&& listItem : from->imports)
			{
				to->imports.Add(CopyNode(listItem.Obj()));
			}
		}

		void AstVisitor::CopyFields(NumExpr* from, NumExpr* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->value = from->value;
		}

		void AstVisitor::CopyFields(Ref* from, Ref* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
			to->name = from->name;
		}

		void AstVisitor::CopyFields(True* from, True* to)
		{
			CopyFields(static_cast<Expr*>(from), static_cast<Expr*>(to));
		}

		void AstVisitor::CopyFields(Unary* from, Unary* to)
		{
			CopyFields(static_cast<Expandable*>(from), static_cast<Expandable*>(to));
			to->op = from->op;
			to->operand = CopyNode(from->operand.Obj());
		}

		void AstVisitor::Visit(Arg* node)
		{
			auto newNode = vl::MakePtr<Arg>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Import* node)
		{
			auto newNode = vl::MakePtr<Import>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Module* node)
		{
			auto newNode = vl::MakePtr<Module>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(NumExpr* node)
		{
			auto newNode = vl::MakePtr<NumExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Ref* node)
		{
			auto newNode = vl::MakePtr<Ref>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(True* node)
		{
			auto newNode = vl::MakePtr<True>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(False* node)
		{
			auto newNode = vl::MakePtr<False>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Func* node)
		{
			auto newNode = vl::MakePtr<Func>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Call* node)
		{
			auto newNode = vl::MakePtr<Call>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Expandable* node)
		{
			node->Accept(static_cast<Expandable::IVisitor*>(this));
		}

		void AstVisitor::Visit(LetExpr* node)
		{
			auto newNode = vl::MakePtr<LetExpr>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Unary* node)
		{
			auto newNode = vl::MakePtr<Unary>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void AstVisitor::Visit(Binary* node)
		{
			auto newNode = vl::MakePtr<Binary>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		vl::Ptr<Expr> AstVisitor::CopyNode(Expr* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<Expr::IVisitor*>(this));
			return this->result.Cast<Expr>();
		}

		vl::Ptr<Arg> AstVisitor::CopyNode(Arg* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<Arg>();
		}

		vl::Ptr<Import> AstVisitor::CopyNode(Import* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<Import>();
		}

		vl::Ptr<Module> AstVisitor::CopyNode(Module* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<Module>();
		}

	}
}
