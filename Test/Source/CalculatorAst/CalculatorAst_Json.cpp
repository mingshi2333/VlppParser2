/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "../../../Source/AstBase.h"
#include "CalculatorAst_Json.h"

namespace calculator
{
	namespace json_visitor
	{
		void AstVisitor::PrintFields(Arg* from, Arg* to)
		{
			BeginField("Lname");
			WriteToken(node->name);
			EndField();
		}
		void AstVisitor::PrintFields(Binary* from, Binary* to)
		{
			BeginField("Lleft");
			InspectInto(node->left.Obj());
			EndField();
			BeginField("Lop");
			EndField();
			BeginField("Lright");
			InspectInto(node->right.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Call* from, Call* to)
		{
			BeginField("Larg");
			InspectInto(node->arg.Obj());
			EndField();
			BeginField("Lfunc");
			InspectInto(node->func.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Expandable* from, Expandable* to)
		{
			BeginField("Lexpanded");
			InspectInto(node->expanded.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Expr* from, Expr* to)
		{
		}
		void AstVisitor::PrintFields(False* from, False* to)
		{
		}
		void AstVisitor::PrintFields(Func* from, Func* to)
		{
			BeginField("Largs");
			BeginArray();
			for (auto&& listItem : node->args)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
			BeginField("Lvalue");
			InspectInto(node->value.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Import* from, Import* to)
		{
			BeginField("Lname");
			WriteToken(node->name);
			EndField();
		}
		void AstVisitor::PrintFields(LetExpr* from, LetExpr* to)
		{
			BeginField("Lname");
			WriteToken(node->name);
			EndField();
			BeginField("Lvalue");
			InspectInto(node->value.Obj());
			EndField();
		}
		void AstVisitor::PrintFields(Module* from, Module* to)
		{
			BeginField("Lexported");
			InspectInto(node->exported.Obj());
			EndField();
			BeginField("Limports");
			BeginArray();
			for (auto&& listItem : node->imports)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
		}
		void AstVisitor::PrintFields(NumExpr* from, NumExpr* to)
		{
			BeginField("Lvalue");
			WriteToken(node->value);
			EndField();
		}
		void AstVisitor::PrintFields(Ref* from, Ref* to)
		{
			BeginField("Lname");
			WriteToken(node->name);
			EndField();
		}
		void AstVisitor::PrintFields(True* from, True* to)
		{
		}
		void AstVisitor::PrintFields(Unary* from, Unary* to)
		{
			BeginField("Lop");
			EndField();
			BeginField("Loperand");
			InspectInto(node->operand.Obj());
			EndField();
		}

		void AstVisitor::Visit(NumExpr* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LNumExpr", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<NumExpr*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Ref* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LRef", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Ref*>(node));
			EndObject();
		}

		void AstVisitor::Visit(True* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LTrue", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<True*>(node));
			EndObject();
		}

		void AstVisitor::Visit(False* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LFalse", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<False*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Func* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LFunc", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Func*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Call* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LCall", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Call*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Expandable* node)
		{
			node->Accept(static_cast<Expandable::IVisitor*>(this));
		}

		void AstVisitor::Visit(LetExpr* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LLetExpr", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Expandable*>(node));
			PrintFields(static_cast<LetExpr*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Unary* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LUnary", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Expandable*>(node));
			PrintFields(static_cast<Unary*>(node));
			EndObject();
		}

		void AstVisitor::Visit(Binary* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LBinary", node);
			PrintFields(static_cast<Expr*>(node));
			PrintFields(static_cast<Expandable*>(node));
			PrintFields(static_cast<Binary*>(node));
			EndObject();
		}

		void AstVisitor::InspectInto(Expr* node)
		{
			if (!node) return;
			node->Accept(static_cast<Expr::IVisitor*>(this));
		}

		void AstVisitor::Print(Arg* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LArg", node);
			PrintFields(static_cast<Arg*>(node));
			EndObject();
		}

		void AstVisitor::Print(Import* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LImport", node);
			PrintFields(static_cast<Import*>(node));
			EndObject();
		}

		void AstVisitor::Print(Module* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType("LModule", node);
			PrintFields(static_cast<Module*>(node));
			EndObject();
		}

	}
}
