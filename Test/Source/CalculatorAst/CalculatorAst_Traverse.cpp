/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "../../../Source/AstBase.h"
#include "CalculatorAst_Traverse.h"

namespace calculator
{
	namespace traverse_visitor
	{
		void AstVisitor::Traverse(vl::glr::ParsingToken& token) {}
		void AstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
		void AstVisitor::Traverse(Arg* from, Arg* to) {}
		void AstVisitor::Traverse(Binary* from, Binary* to) {}
		void AstVisitor::Traverse(Call* from, Call* to) {}
		void AstVisitor::Traverse(Expandable* from, Expandable* to) {}
		void AstVisitor::Traverse(Expr* from, Expr* to) {}
		void AstVisitor::Traverse(False* from, False* to) {}
		void AstVisitor::Traverse(Func* from, Func* to) {}
		void AstVisitor::Traverse(Import* from, Import* to) {}
		void AstVisitor::Traverse(LetExpr* from, LetExpr* to) {}
		void AstVisitor::Traverse(Module* from, Module* to) {}
		void AstVisitor::Traverse(NumExpr* from, NumExpr* to) {}
		void AstVisitor::Traverse(Ref* from, Ref* to) {}
		void AstVisitor::Traverse(True* from, True* to) {}
		void AstVisitor::Traverse(Unary* from, Unary* to) {}

		void AstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
		void AstVisitor::Finishing(Arg* from, Arg* to) {}
		void AstVisitor::Finishing(Binary* from, Binary* to) {}
		void AstVisitor::Finishing(Call* from, Call* to) {}
		void AstVisitor::Finishing(Expandable* from, Expandable* to) {}
		void AstVisitor::Finishing(Expr* from, Expr* to) {}
		void AstVisitor::Finishing(False* from, False* to) {}
		void AstVisitor::Finishing(Func* from, Func* to) {}
		void AstVisitor::Finishing(Import* from, Import* to) {}
		void AstVisitor::Finishing(LetExpr* from, LetExpr* to) {}
		void AstVisitor::Finishing(Module* from, Module* to) {}
		void AstVisitor::Finishing(NumExpr* from, NumExpr* to) {}
		void AstVisitor::Finishing(Ref* from, Ref* to) {}
		void AstVisitor::Finishing(True* from, True* to) {}
		void AstVisitor::Finishing(Unary* from, Unary* to) {}

		void AstVisitor::Visit(NumExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<NumExpr*>(node));
			Traverse(node->value);
			Finishing(static_cast<NumExpr*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(Ref* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<Ref*>(node));
			Traverse(node->name);
			Finishing(static_cast<Ref*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(True* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<True*>(node));
			Finishing(static_cast<True*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(False* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<False*>(node));
			Finishing(static_cast<False*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(Func* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<Func*>(node));
			for (auto&& listItem : node->args)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->value.Obj());
			Finishing(static_cast<Func*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(Call* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<Call*>(node));
			InspectInto(node->arg.Obj());
			InspectInto(node->func.Obj());
			Finishing(static_cast<Call*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(Expandable* node)
		{
			node->Accept(static_cast<Expandable::IVisitor*>(this));
		}

		void AstVisitor::Visit(LetExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<Expandable*>(node));
			Traverse(static_cast<LetExpr*>(node));
			Traverse(node->name);
			InspectInto(node->value.Obj());
			InspectInto(node->expanded.Obj());
			Finishing(static_cast<LetExpr*>(node));
			Finishing(static_cast<Expandable*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(Unary* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<Expandable*>(node));
			Traverse(static_cast<Unary*>(node));
			InspectInto(node->operand.Obj());
			InspectInto(node->expanded.Obj());
			Finishing(static_cast<Unary*>(node));
			Finishing(static_cast<Expandable*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::Visit(Binary* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<Expandable*>(node));
			Traverse(static_cast<Binary*>(node));
			InspectInto(node->left.Obj());
			InspectInto(node->right.Obj());
			InspectInto(node->expanded.Obj());
			Finishing(static_cast<Binary*>(node));
			Finishing(static_cast<Expandable*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(Expr* node)
		{
			if (!node) return;
			node->Accept(static_cast<Expr::IVisitor*>(this));
		}

		void AstVisitor::InspectInto(Arg* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Arg*>(node));
			Traverse(node->name);
			Finishing(static_cast<Arg*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(Import* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Import*>(node));
			Traverse(node->name);
			Finishing(static_cast<Import*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void AstVisitor::InspectInto(Module* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Module*>(node));
			InspectInto(node->exported.Obj());
			for (auto&& listItem : node->imports)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<Module*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

	}
}
