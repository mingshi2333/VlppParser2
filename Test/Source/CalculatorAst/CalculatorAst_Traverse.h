/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_CALCULATORAST_AST_TRAVERSEVISITOR
#define VCZH_PARSER2_UNITTEST_CALCULATORAST_AST_TRAVERSEVISITOR

#include "../../../Source/AstBase.h"
#include "CalculatorAst.h"

namespace calculator
{
	namespace traverse_visitor
	{
		/// <summary>A traverse visitor, overriding all abstract methods with AST visiting code.</summary>
		class AstVisitor
			: public vl::Object
			, protected virtual Expr::IVisitor
			, protected virtual Expandable::IVisitor
		{
		protected:
			virtual void Traverse(vl::glr::ParsingToken& token);
			virtual void Traverse(vl::glr::ParsingAstBase* node);
			virtual void Traverse(Arg* from, Arg* to);
			virtual void Traverse(Binary* from, Binary* to);
			virtual void Traverse(Call* from, Call* to);
			virtual void Traverse(Expandable* from, Expandable* to);
			virtual void Traverse(Expr* from, Expr* to);
			virtual void Traverse(False* from, False* to);
			virtual void Traverse(Func* from, Func* to);
			virtual void Traverse(Import* from, Import* to);
			virtual void Traverse(LetExpr* from, LetExpr* to);
			virtual void Traverse(Module* from, Module* to);
			virtual void Traverse(NumExpr* from, NumExpr* to);
			virtual void Traverse(Ref* from, Ref* to);
			virtual void Traverse(True* from, True* to);
			virtual void Traverse(Unary* from, Unary* to);

		protected:
			virtual void Finishing(vl::glr::ParsingAstBase* node);
			virtual void Finishing(Arg* from, Arg* to);
			virtual void Finishing(Binary* from, Binary* to);
			virtual void Finishing(Call* from, Call* to);
			virtual void Finishing(Expandable* from, Expandable* to);
			virtual void Finishing(Expr* from, Expr* to);
			virtual void Finishing(False* from, False* to);
			virtual void Finishing(Func* from, Func* to);
			virtual void Finishing(Import* from, Import* to);
			virtual void Finishing(LetExpr* from, LetExpr* to);
			virtual void Finishing(Module* from, Module* to);
			virtual void Finishing(NumExpr* from, NumExpr* to);
			virtual void Finishing(Ref* from, Ref* to);
			virtual void Finishing(True* from, True* to);
			virtual void Finishing(Unary* from, Unary* to);

		protected:
			void Visit(NumExpr* node) override;
			void Visit(Ref* node) override;
			void Visit(True* node) override;
			void Visit(False* node) override;
			void Visit(Func* node) override;
			void Visit(Call* node) override;
			void Visit(Expandable* node) override;

			void Visit(LetExpr* node) override;
			void Visit(Unary* node) override;
			void Visit(Binary* node) override;

		public:
			void InspectInto(Expr* node);
			void InspectInto(Arg* node);
			void InspectInto(Import* node);
			void InspectInto(Module* node);
		};
	}
}
#endif