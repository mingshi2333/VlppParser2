/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Calculator
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_CALCULATOR_AST_ASSEMBLER
#define VCZH_PARSER2_UNITTEST_CALCULATOR_AST_ASSEMBLER

#include "CalculatorAst.h"

namespace calculator
{
	enum class CalculatorClasses : vl::vint32_t
	{
		Arg = 0,
		Binary = 1,
		Call = 2,
		Expandable = 3,
		Expr = 4,
		False = 5,
		Func = 6,
		Import = 7,
		LetExpr = 8,
		Module = 9,
		NumExpr = 10,
		Ref = 11,
		True = 12,
		Unary = 13,
	};

	enum class CalculatorFields : vl::vint32_t
	{
		Arg_name = (static_cast<vl::vint32_t>(CalculatorClasses::Arg) << 8) + 0,
		Binary_left = (static_cast<vl::vint32_t>(CalculatorClasses::Binary) << 8) + 0,
		Binary_op = (static_cast<vl::vint32_t>(CalculatorClasses::Binary) << 8) + 1,
		Binary_right = (static_cast<vl::vint32_t>(CalculatorClasses::Binary) << 8) + 2,
		Call_arg = (static_cast<vl::vint32_t>(CalculatorClasses::Call) << 8) + 0,
		Call_func = (static_cast<vl::vint32_t>(CalculatorClasses::Call) << 8) + 1,
		Expandable_expanded = (static_cast<vl::vint32_t>(CalculatorClasses::Expandable) << 8) + 0,
		Func_args = (static_cast<vl::vint32_t>(CalculatorClasses::Func) << 8) + 0,
		Func_value = (static_cast<vl::vint32_t>(CalculatorClasses::Func) << 8) + 1,
		Import_name = (static_cast<vl::vint32_t>(CalculatorClasses::Import) << 8) + 0,
		LetExpr_name = (static_cast<vl::vint32_t>(CalculatorClasses::LetExpr) << 8) + 0,
		LetExpr_value = (static_cast<vl::vint32_t>(CalculatorClasses::LetExpr) << 8) + 1,
		Module_exported = (static_cast<vl::vint32_t>(CalculatorClasses::Module) << 8) + 0,
		Module_imports = (static_cast<vl::vint32_t>(CalculatorClasses::Module) << 8) + 1,
		NumExpr_value = (static_cast<vl::vint32_t>(CalculatorClasses::NumExpr) << 8) + 0,
		Ref_name = (static_cast<vl::vint32_t>(CalculatorClasses::Ref) << 8) + 0,
		Unary_op = (static_cast<vl::vint32_t>(CalculatorClasses::Unary) << 8) + 0,
		Unary_operand = (static_cast<vl::vint32_t>(CalculatorClasses::Unary) << 8) + 1,
	};

	class CalculatorAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif