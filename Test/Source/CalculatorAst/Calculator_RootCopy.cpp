/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Calculator
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "Calculator_RootCopy.h"

namespace calculator
{
	namespace copy_visitor
	{

		// CopyFields ----------------------------------------

		void CalculatorRootCopyVisitor::CopyFields(calculator::Arg* from, calculator::Arg* to)
		{
			to->name = from->name;
		}

		void CalculatorRootCopyVisitor::CopyFields(calculator::Import* from, calculator::Import* to)
		{
			to->name = from->name;
		}

		void CalculatorRootCopyVisitor::CopyFields(calculator::Module* from, calculator::Module* to)
		{
			to->exported = CreateField(from->exported);
			for (auto listItem : from->imports)
			{
				to->imports.Add(CreateField(listItem));
			}
		}

		// Dispatch (virtual) --------------------------------

		void CalculatorRootCopyVisitor::Dispatch(calculator::Expandable* node)
		{
			static_assert(false);
		}

		// CreateField ---------------------------------------

		vl::Ptr<calculator::Arg> CalculatorRootCopyVisitor::CreateField(vl::Ptr<calculator::Arg> from)
		{
			if (!from) return nullptr;
			auto to = vl::MakePtr<calculator::Arg>();
			CopyFields(from.Obj(), to.Obj());
			return to;
		}

		vl::Ptr<calculator::Import> CalculatorRootCopyVisitor::CreateField(vl::Ptr<calculator::Import> from)
		{
			if (!from) return nullptr;
			auto to = vl::MakePtr<calculator::Import>();
			CopyFields(from.Obj(), to.Obj());
			return to;
		}

		vl::Ptr<calculator::Module> CalculatorRootCopyVisitor::CreateField(vl::Ptr<calculator::Module> from)
		{
			if (!from) return nullptr;
			auto to = vl::MakePtr<calculator::Module>();
			CopyFields(from.Obj(), to.Obj());
			return to;
		}

		vl::Ptr<calculator::Expandable> CalculatorRootCopyVisitor::CreateField(vl::Ptr<calculator::Expandable> from)
		{
			if (!from) return nullptr;
			auto to = vl::MakePtr<calculator::Expandable>();
			CopyFields(from.Obj(), to.Obj());
			return to;
		}

		vl::Ptr<calculator::Expr> CalculatorRootCopyVisitor::CreateField(vl::Ptr<calculator::Expr> from)
		{
			if (!from) return nullptr;
			auto to = vl::MakePtr<calculator::Expr>();
			CopyFields(from.Obj(), to.Obj());
			return to;
		}

		// Visitor Members -----------------------------------

		void CalculatorRootCopyVisitor::Visit(calculator::Arg* node)
		{
			auto newNode = vl::MakePtr<calculator::Arg>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void CalculatorRootCopyVisitor::Visit(calculator::Import* node)
		{
			auto newNode = vl::MakePtr<calculator::Import>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void CalculatorRootCopyVisitor::Visit(calculator::Module* node)
		{
			auto newNode = vl::MakePtr<calculator::Module>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}
	}
}
