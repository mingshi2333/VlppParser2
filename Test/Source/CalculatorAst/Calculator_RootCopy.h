/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Calculator
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_CALCULATOR_AST_COPYVISITOR
#define VCZH_PARSER2_UNITTEST_CALCULATOR_AST_COPYVISITOR

#include "CalculatorAst_Copy.h"

namespace calculator
{
	namespace copy_visitor
	{
		/// <summary>A copy visitor, overriding all abstract methods with AST copying code.</summary>
		class CalculatorRootCopyVisitor
			: public virtual vl::glr::CopyVisitorBase
			, public virtual calculator::copy_visitor::ExpandableVisitor
			, public virtual calculator::copy_visitor::ExprVisitor
		{
		protected:
			// CopyFields ----------------------------------------
			void CopyFields(calculator::Arg* from, calculator::Arg* to);
			void CopyFields(calculator::Import* from, calculator::Import* to);
			void CopyFields(calculator::Module* from, calculator::Module* to);

			// Dispatch (virtual) --------------------------------
			void Dispatch(calculator::Expandable* node) override;

		public:
			// CreateField ---------------------------------------
			virtual vl::Ptr<calculator::Arg> CreateField(vl::Ptr<calculator::Arg> from) override;
			virtual vl::Ptr<calculator::Import> CreateField(vl::Ptr<calculator::Import> from);
			virtual vl::Ptr<calculator::Module> CreateField(vl::Ptr<calculator::Module> from);
			virtual vl::Ptr<calculator::Expandable> CreateField(vl::Ptr<calculator::Expandable> from);
			virtual vl::Ptr<calculator::Expr> CreateField(vl::Ptr<calculator::Expr> from) override;

			// Visitor Members -----------------------------------
			virtual void Visit(calculator::Arg* node);
			virtual void Visit(calculator::Import* node);
			virtual void Visit(calculator::Module* node);
		};

	}
}
#endif