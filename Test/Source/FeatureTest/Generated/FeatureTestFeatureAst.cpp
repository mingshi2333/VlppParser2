/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestFeatureAst.h"

namespace featuretest
{
/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

	void OptionalFeature::Accept(Feature::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void NestedOptionalFeature::Accept(Feature::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void BranchedOptionalFeature::Accept(Feature::IVisitor* visitor)
	{
		visitor->Visit(this);
	}

	void FeatureToResolve::Accept(Feature::IVisitor* visitor)
	{
		visitor->Visit(this);
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION

			IMPL_TYPE_INFO_RENAME(featuretest::Plus, featuretest::Plus)
			IMPL_TYPE_INFO_RENAME(featuretest::Feature, featuretest::Feature)
			IMPL_TYPE_INFO_RENAME(featuretest::Feature::IVisitor, featuretest::Feature::IVisitor)
			IMPL_TYPE_INFO_RENAME(featuretest::OptionalProprity, featuretest::OptionalProprity)
			IMPL_TYPE_INFO_RENAME(featuretest::OptionalFeature, featuretest::OptionalFeature)
			IMPL_TYPE_INFO_RENAME(featuretest::NestedOptionalFeature, featuretest::NestedOptionalFeature)
			IMPL_TYPE_INFO_RENAME(featuretest::BranchType, featuretest::BranchType)
			IMPL_TYPE_INFO_RENAME(featuretest::BranchedOptionalFeature, featuretest::BranchedOptionalFeature)
			IMPL_TYPE_INFO_RENAME(featuretest::FeatureToResolve, featuretest::FeatureToResolve)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_CLASS_MEMBER(featuretest::Plus)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<featuretest::Plus>(), NO_PARAMETER)

			END_CLASS_MEMBER(featuretest::Plus)

			BEGIN_CLASS_MEMBER(featuretest::Feature)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(featuretest::Feature)

			BEGIN_ENUM_ITEM(featuretest::OptionalProprity)
				ENUM_ITEM_NAMESPACE(featuretest::OptionalProprity)
				ENUM_NAMESPACE_ITEM(Equal)
				ENUM_NAMESPACE_ITEM(PreferTake)
				ENUM_NAMESPACE_ITEM(PreferSkip)
			END_ENUM_ITEM(featuretest::OptionalProprity)

			BEGIN_CLASS_MEMBER(featuretest::OptionalFeature)
				CLASS_MEMBER_BASE(featuretest::Feature)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<featuretest::OptionalFeature>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(priority)
				CLASS_MEMBER_FIELD(optional)
				CLASS_MEMBER_FIELD(loop)
			END_CLASS_MEMBER(featuretest::OptionalFeature)

			BEGIN_CLASS_MEMBER(featuretest::NestedOptionalFeature)
				CLASS_MEMBER_BASE(featuretest::Feature)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<featuretest::NestedOptionalFeature>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(optional)
				CLASS_MEMBER_FIELD(tail1)
				CLASS_MEMBER_FIELD(tail2)
				CLASS_MEMBER_FIELD(tail3)
				CLASS_MEMBER_FIELD(tails)
			END_CLASS_MEMBER(featuretest::NestedOptionalFeature)

			BEGIN_ENUM_ITEM(featuretest::BranchType)
				ENUM_ITEM_NAMESPACE(featuretest::BranchType)
				ENUM_NAMESPACE_ITEM(Plus)
				ENUM_NAMESPACE_ITEM(Minus)
				ENUM_NAMESPACE_ITEM(NoCompetition)
			END_ENUM_ITEM(featuretest::BranchType)

			BEGIN_CLASS_MEMBER(featuretest::BranchedOptionalFeature)
				CLASS_MEMBER_BASE(featuretest::Feature)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<featuretest::BranchedOptionalFeature>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(optional)
				CLASS_MEMBER_FIELD(tails)
			END_CLASS_MEMBER(featuretest::BranchedOptionalFeature)

			BEGIN_CLASS_MEMBER(featuretest::FeatureToResolve)
				CLASS_MEMBER_BASE(featuretest::Feature)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<featuretest::FeatureToResolve>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(candidates)
			END_CLASS_MEMBER(featuretest::FeatureToResolve)

			BEGIN_INTERFACE_MEMBER(featuretest::Feature::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(featuretest::Feature::IVisitor::*)(featuretest::FeatureToResolve* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(featuretest::Feature::IVisitor::*)(featuretest::OptionalFeature* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(featuretest::Feature::IVisitor::*)(featuretest::NestedOptionalFeature* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(featuretest::Feature::IVisitor::*)(featuretest::BranchedOptionalFeature* node))
			END_INTERFACE_MEMBER(featuretest::Feature)

#endif

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
			class FeatureTestFeatureAstTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(featuretest::Plus)
					ADD_TYPE_INFO(featuretest::Feature)
					ADD_TYPE_INFO(featuretest::Feature::IVisitor)
					ADD_TYPE_INFO(featuretest::OptionalProprity)
					ADD_TYPE_INFO(featuretest::OptionalFeature)
					ADD_TYPE_INFO(featuretest::NestedOptionalFeature)
					ADD_TYPE_INFO(featuretest::BranchType)
					ADD_TYPE_INFO(featuretest::BranchedOptionalFeature)
					ADD_TYPE_INFO(featuretest::FeatureToResolve)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif
#endif

			bool FeatureTestFeatureAstLoadTypes()
			{
#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
				if (auto manager = GetGlobalTypeManager())
				{
					Ptr<ITypeLoader> loader = new FeatureTestFeatureAstTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
