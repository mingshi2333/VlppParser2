/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestFeatureAst_Builder.h"

namespace featuretest
{
	namespace builder
	{

/***********************************************************************
BranchedOptionalFeatureBuilder
***********************************************************************/

		BranchedOptionalFeatureBuilder& BranchedOptionalFeatureBuilder::optional(const vl::Ptr<Plus>& value)
		{
			node->optional = value;
			return *this;
		}

		BranchedOptionalFeatureBuilder& BranchedOptionalFeatureBuilder::tails(const vl::Ptr<Plus>& value)
		{
			node->tails.Add(value);
			return *this;
		}

		BranchedOptionalFeatureBuilder& BranchedOptionalFeatureBuilder::type(BranchType value)
		{
			node->type = value;
			return *this;
		}

/***********************************************************************
FeatureToResolveBuilder
***********************************************************************/

		FeatureToResolveBuilder& FeatureToResolveBuilder::candidates(const vl::Ptr<Feature>& value)
		{
			node->candidates.Add(value);
			return *this;
		}

/***********************************************************************
NestedOptionalFeatureBuilder
***********************************************************************/

		NestedOptionalFeatureBuilder& NestedOptionalFeatureBuilder::optional(const vl::Ptr<Plus>& value)
		{
			node->optional = value;
			return *this;
		}

		NestedOptionalFeatureBuilder& NestedOptionalFeatureBuilder::tail1(const vl::Ptr<Plus>& value)
		{
			node->tail1 = value;
			return *this;
		}

		NestedOptionalFeatureBuilder& NestedOptionalFeatureBuilder::tail2(const vl::Ptr<Plus>& value)
		{
			node->tail2 = value;
			return *this;
		}

		NestedOptionalFeatureBuilder& NestedOptionalFeatureBuilder::tail3(const vl::Ptr<Plus>& value)
		{
			node->tail3 = value;
			return *this;
		}

		NestedOptionalFeatureBuilder& NestedOptionalFeatureBuilder::tails(const vl::Ptr<Plus>& value)
		{
			node->tails.Add(value);
			return *this;
		}

/***********************************************************************
OptionalFeatureBuilder
***********************************************************************/

		OptionalFeatureBuilder& OptionalFeatureBuilder::loop(const vl::Ptr<Plus>& value)
		{
			node->loop.Add(value);
			return *this;
		}

		OptionalFeatureBuilder& OptionalFeatureBuilder::optional(const vl::Ptr<Plus>& value)
		{
			node->optional = value;
			return *this;
		}

		OptionalFeatureBuilder& OptionalFeatureBuilder::priority(OptionalProprity value)
		{
			node->priority = value;
			return *this;
		}

/***********************************************************************
PbaFeatureBuilder
***********************************************************************/

		PbaFeatureBuilder& PbaFeatureBuilder::gts(const vl::Ptr<Gt>& value)
		{
			node->gts.Add(value);
			return *this;
		}

		PbaFeatureBuilder& PbaFeatureBuilder::lts(const vl::Ptr<Lt>& value)
		{
			node->lts.Add(value);
			return *this;
		}

		PbaFeatureBuilder& PbaFeatureBuilder::optional(const vl::Ptr<Plus>& value)
		{
			node->optional = value;
			return *this;
		}

		PbaFeatureBuilder& PbaFeatureBuilder::tail(const vl::Ptr<Plus>& value)
		{
			node->tail = value;
			return *this;
		}

		PbaFeatureBuilder& PbaFeatureBuilder::tails(const vl::Ptr<Plus>& value)
		{
			node->tails.Add(value);
			return *this;
		}

/***********************************************************************
Pwa1FeatureBuilder
***********************************************************************/

		Pwa1FeatureBuilder& Pwa1FeatureBuilder::gts(const vl::Ptr<Gt>& value)
		{
			node->gts.Add(value);
			return *this;
		}

		Pwa1FeatureBuilder& Pwa1FeatureBuilder::lts(const vl::Ptr<Lt>& value)
		{
			node->lts.Add(value);
			return *this;
		}

		Pwa1FeatureBuilder& Pwa1FeatureBuilder::pba(const vl::Ptr<Feature>& value)
		{
			node->pba = value;
			return *this;
		}
	}
}
