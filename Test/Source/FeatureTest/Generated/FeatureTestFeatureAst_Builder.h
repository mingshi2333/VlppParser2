/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_FEATURETEST_FEATUREAST_AST_BUILDER
#define VCZH_PARSER2_UNITTEST_FEATURETEST_FEATUREAST_AST_BUILDER

#include "FeatureTestFeatureAst.h"

namespace featuretest
{
	namespace builder
	{
		class FeatureToResolveBuilder
		{
		private:
			FeatureToResolve* node;
		public:
			FeatureToResolveBuilder(FeatureToResolve* _node) : node(_node) {}
			FeatureToResolveBuilder& candidates(const vl::Ptr<Feature>& value);
		};

		class NestedOptionalFeatureBuilder
		{
		private:
			NestedOptionalFeature* node;
		public:
			NestedOptionalFeatureBuilder(NestedOptionalFeature* _node) : node(_node) {}
			NestedOptionalFeatureBuilder& optional(const vl::Ptr<Plus>& value);
			NestedOptionalFeatureBuilder& tail1(const vl::Ptr<Plus>& value);
			NestedOptionalFeatureBuilder& tail2(const vl::Ptr<Plus>& value);
			NestedOptionalFeatureBuilder& tail3(const vl::Ptr<Plus>& value);
			NestedOptionalFeatureBuilder& tails(const vl::Ptr<Plus>& value);
		};

		class OptionalFeatureBuilder
		{
		private:
			OptionalFeature* node;
		public:
			OptionalFeatureBuilder(OptionalFeature* _node) : node(_node) {}
			OptionalFeatureBuilder& loop(const vl::Ptr<Plus>& value);
			OptionalFeatureBuilder& optional(const vl::Ptr<Plus>& value);
			OptionalFeatureBuilder& priority(OptionalProprity value);
		};

		using MakeFeatureToResolve = vl::glr::ParsingAstBuilder<FeatureToResolve, FeatureToResolveBuilder>;
		using MakeNestedOptionalFeature = vl::glr::ParsingAstBuilder<NestedOptionalFeature, NestedOptionalFeatureBuilder>;
		using MakeOptionalFeature = vl::glr::ParsingAstBuilder<OptionalFeature, OptionalFeatureBuilder>;
		using MakePlus = vl::glr::ParsingAstBuilder<Plus>;
	}
}
#endif