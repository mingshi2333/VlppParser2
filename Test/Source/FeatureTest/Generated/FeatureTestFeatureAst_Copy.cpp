/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestFeatureAst_Copy.h"

namespace featuretest
{
	namespace copy_visitor
	{
		void FeatureAstVisitor::CopyFields(AlternativeFeature* from, AlternativeFeature* to)
		{
			CopyFields(static_cast<Feature*>(from), static_cast<Feature*>(to));
		}

		void FeatureAstVisitor::CopyFields(Feature* from, Feature* to)
		{
		}

		void FeatureAstVisitor::CopyFields(FeatureToResolve* from, FeatureToResolve* to)
		{
			CopyFields(static_cast<Feature*>(from), static_cast<Feature*>(to));
			for (auto&& listItem : from->candidates)
			{
				to->candidates.Add(CopyNode(listItem.Obj()));
			}
		}

		void FeatureAstVisitor::CopyFields(OptionalFeature* from, OptionalFeature* to)
		{
			CopyFields(static_cast<Feature*>(from), static_cast<Feature*>(to));
			for (auto&& listItem : from->loop)
			{
				to->loop.Add(CopyNode(listItem.Obj()));
			}
			to->optional = CopyNode(from->optional.Obj());
			to->priority = from->priority;
		}

		void FeatureAstVisitor::CopyFields(Plus* from, Plus* to)
		{
		}

		void FeatureAstVisitor::Visit(Plus* node)
		{
			auto newNode = vl::MakePtr<Plus>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void FeatureAstVisitor::Visit(FeatureToResolve* node)
		{
			auto newNode = vl::MakePtr<FeatureToResolve>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void FeatureAstVisitor::Visit(OptionalFeature* node)
		{
			auto newNode = vl::MakePtr<OptionalFeature>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void FeatureAstVisitor::Visit(AlternativeFeature* node)
		{
			auto newNode = vl::MakePtr<AlternativeFeature>();
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		vl::Ptr<Feature> FeatureAstVisitor::CopyNode(Feature* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<Feature::IVisitor*>(this));
			return this->result.Cast<Feature>();
		}

		vl::Ptr<Plus> FeatureAstVisitor::CopyNode(Plus* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<Plus>();
		}

	}
}
