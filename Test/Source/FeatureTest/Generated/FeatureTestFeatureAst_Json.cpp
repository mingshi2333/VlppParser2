/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestFeatureAst_Json.h"

namespace featuretest
{
	namespace json_visitor
	{
		void FeatureAstVisitor::PrintFields(Feature* node)
		{
		}
		void FeatureAstVisitor::PrintFields(FeatureToResolve* node)
		{
			BeginField(L"candidates");
			BeginArray();
			for (auto&& listItem : node->candidates)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
		}
		void FeatureAstVisitor::PrintFields(OptionalFeature* node)
		{
			BeginField(L"loop");
			BeginArray();
			for (auto&& listItem : node->loop)
			{
				BeginArrayItem();
				Print(listItem.Obj());
				EndArrayItem();
			}
			EndArray();
			EndField();
			BeginField(L"optional");
			Print(node->optional.Obj());
			EndField();
			BeginField(L"priority");
			switch (node->priority)
			{
			case featuretest::OptionalProprity::Equal:
				WriteString(L"Equal");
				break;
			case featuretest::OptionalProprity::PreferSkip:
				WriteString(L"PreferSkip");
				break;
			case featuretest::OptionalProprity::PreferTake:
				WriteString(L"PreferTake");
				break;
			default:
				WriteNull();
			}
			EndField();
		}
		void FeatureAstVisitor::PrintFields(Plus* node)
		{
		}

		void FeatureAstVisitor::Visit(FeatureToResolve* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"FeatureToResolve", node);
			PrintFields(static_cast<Feature*>(node));
			PrintFields(static_cast<FeatureToResolve*>(node));
			EndObject();
		}

		void FeatureAstVisitor::Visit(OptionalFeature* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"OptionalFeature", node);
			PrintFields(static_cast<Feature*>(node));
			PrintFields(static_cast<OptionalFeature*>(node));
			EndObject();
		}

		FeatureAstVisitor::FeatureAstVisitor(vl::stream::StreamWriter& _writer)
			: vl::glr::JsonVisitorBase(_writer)
		{
		}

		void FeatureAstVisitor::Print(Feature* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			node->Accept(static_cast<Feature::IVisitor*>(this));
		}

		void FeatureAstVisitor::Print(Plus* node)
		{
			if (!node)
			{
				WriteNull();
				return;
			}
			BeginObject();
			WriteType(L"Plus", node);
			PrintFields(static_cast<Plus*>(node));
			EndObject();
		}

	}
}
