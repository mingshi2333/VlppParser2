/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestFeatureAst_Traverse.h"

namespace featuretest
{
	namespace traverse_visitor
	{
		void FeatureAstVisitor::Traverse(vl::glr::ParsingToken& token) {}
		void FeatureAstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
		void FeatureAstVisitor::Traverse(BranchedOptionalFeature* node) {}
		void FeatureAstVisitor::Traverse(Feature* node) {}
		void FeatureAstVisitor::Traverse(FeatureToResolve* node) {}
		void FeatureAstVisitor::Traverse(NestedOptionalFeature* node) {}
		void FeatureAstVisitor::Traverse(OptionalFeature* node) {}
		void FeatureAstVisitor::Traverse(Plus* node) {}

		void FeatureAstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
		void FeatureAstVisitor::Finishing(BranchedOptionalFeature* node) {}
		void FeatureAstVisitor::Finishing(Feature* node) {}
		void FeatureAstVisitor::Finishing(FeatureToResolve* node) {}
		void FeatureAstVisitor::Finishing(NestedOptionalFeature* node) {}
		void FeatureAstVisitor::Finishing(OptionalFeature* node) {}
		void FeatureAstVisitor::Finishing(Plus* node) {}

		void FeatureAstVisitor::Visit(FeatureToResolve* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Feature*>(node));
			Traverse(static_cast<FeatureToResolve*>(node));
			for (auto&& listItem : node->candidates)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<FeatureToResolve*>(node));
			Finishing(static_cast<Feature*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void FeatureAstVisitor::Visit(OptionalFeature* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Feature*>(node));
			Traverse(static_cast<OptionalFeature*>(node));
			for (auto&& listItem : node->loop)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->optional.Obj());
			Finishing(static_cast<OptionalFeature*>(node));
			Finishing(static_cast<Feature*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void FeatureAstVisitor::Visit(NestedOptionalFeature* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Feature*>(node));
			Traverse(static_cast<NestedOptionalFeature*>(node));
			InspectInto(node->optional.Obj());
			InspectInto(node->tail1.Obj());
			InspectInto(node->tail2.Obj());
			InspectInto(node->tail3.Obj());
			for (auto&& listItem : node->tails)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<NestedOptionalFeature*>(node));
			Finishing(static_cast<Feature*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void FeatureAstVisitor::Visit(BranchedOptionalFeature* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Feature*>(node));
			Traverse(static_cast<BranchedOptionalFeature*>(node));
			InspectInto(node->optional.Obj());
			for (auto&& listItem : node->tails)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<BranchedOptionalFeature*>(node));
			Finishing(static_cast<Feature*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void FeatureAstVisitor::InspectInto(Feature* node)
		{
			if (!node) return;
			node->Accept(static_cast<Feature::IVisitor*>(this));
		}

		void FeatureAstVisitor::InspectInto(Plus* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Plus*>(node));
			Finishing(static_cast<Plus*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

	}
}
