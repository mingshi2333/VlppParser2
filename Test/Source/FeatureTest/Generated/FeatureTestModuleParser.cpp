/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestModuleParser.h"

namespace featuretest
{
	void FeatureTestModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2960; // 25423 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 144;
		static const vl::vint dataSolidRows = 11;
		static const vl::vint dataRows = 12;
		static const char* compressed[] = {
			"\x4F\x63\x00\x00\x88\x0B\x00\x00\x08\x00\x01\x82\x80\x0E\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x81\x06\x85\x07\x0A\x95\x0A\x99\x0A\x85\x0E\x85\x10\x0A\xA5\x0A\x89\x1A\x85\x16\x85\x19\x0A\xB9\x0A\x9F\x1A\x86\x62\x01\x84\xFF\x29\xAA\x89\x9A\x80\x03\x95\x95\x2D\xAF\xAA\x91\x92\x9F\x7C\x9A\x99\x37\xAF\xB9\x90\x9A\x85\x9A\x9B\x96\x0A\x81\x3D\x95\x9B\x9B\x9B\xA0\x9C\x47\xBA\x89\xBC\x98\x94\xA3\xA4\xA3\x4D\xC8\x91\xAA\xA3\xAC\xA6\x82\x9F\x2D\xC2\x89\x9A\xA7\xAE\xA5\xAA\xA8\x5D\xD2\xA1\xB4\xA3\xB6\xAB\x80\xAC\x4F\xAC\xA9\xBF\x9F\xAA\xB5\xB6\xB6\x65\xE0\x83\x87\x9B\xAB\xB5\xA2\xB7\x71\xF8\xA7\xBE\xA9\xB8\xBB\xBC\xB1\x7F\xE4\x81\xC6\xB2\x80\xB7\xB7\xBB\x7E\x85\xFC\xA3\xC2\xBA\xC4\xC0\xC7\x82\x90\xC4\xC1\x86\xC5\xBC\xC5\xCB\x76\x99\xC7\xDA\xC6\xCA\x84\x87\x84\x74\x9D\xDB\xC3\xD2\xD5\xD0\xC6\xBD\x92\x8D\xD4\xCB\xC9\xD0\xD5\x81\x02\x41\x9C\xC3\x86\x01\xDC\xD3\xD3\xC4\xAB\x8F\xF9\xD1\xCB\xDB\xCA\x96\xD6\xBD\xAA\xC0\x07\x05\xDE\xD2\x80\x80\x75\xB6\xED\xD8\xDF\xDA\xDD\xE6\xDE\xCF\xBE\xD5\xD7\xDD\x96\x85\xE4\xE3\xC1\xAE\xD1\xE2",
			"\xE3\xEA\x82\x05\xE2\xD4\xB2\xCB\xF8\xCA\xE1\xEC\xE7\xEE\xE6\xE4\xD8\xFB\xEA\xE8\xF4\xF7\xF3\xC0\xEF\xEA\xE1\xF5\xF2\xFA\xF1\xF4\xF7\xF6\xF5\xEB\x00\xF3\xF2\x84\x06\xFD\x78\x75\x7E\x7B\x04\xB1\x75\x82\x73\x0D\x01\x8A\x7E\x41\x08\x46\x4C\x54\x7D\xEB\x47\x80\x76\x84\xD2\x71\x70\x47\x75\x10\x99\x8E\x7F\x80\x06\x9D\x8E\x70\x85\xC2\x50\x0A\x41\x68\x1A\x82\x81\x86\x87\xD0\x52\x0A\x80\x88\xED\x68\x85\x87\x87\x2E\x9C\x71\x8D\x8B\x30\xB5\x83\x87\x8C\xF0\x76\x8F\x8B\x8D\x3A\xB2\x8D\x8C\x8D\x3C\x90\x73\x07\x8A\xF1\x54\x04\x93\x8F\x39\x81\x9B\x8F\x92\x3E\x90\x72\x44\x86\x1B\x86\x46\x07\x91\x4A\x8D\x9C\x90\x90\x57\x89\x9E\x6F\x05\x54\x99\x93\x7D\x94\x25\x8B\x81\x98\x8B\xCC\x58\x03\x89\x7E\x64\x9F\x96\x8B\x98\x38\xAA\x90\x02\x06\x67\x9C\x88\x92\x9B\x69\xA8\x9D\x9A\x9D\x73\xB8\x95\x94\x96\x56\xBD\x9C\x9E\x76\x1C\x1D\x92\x72\x45\x50\xAB\x90\x9B\xA1\x86\x89\xA2\x98\xA2\x8B\x8A\xA5\x9E\x9C\x7B\x9A\x9E\x9E\xA4\xDA\x5E\x01\x9F\x89\x79\x90\xAE\x96\x9E\x9B\x9A\xA3\xA4\x9D\x77\x9E\xAF\x9C\xA5\xCC\x60\x02\xA2\x76\x18\x45\xAD\xA3\xAA",
			"\x8F\x98\xA1\xA4\xA8\x99\xAE\xAD\xA6\xAC\x9F\xB9\x72\x0B\xA5\x6C\xB1\xA9\xAF\xAB\x9C\xB5\xA2\xA8\xA9\xB0\xBC\xAF\xAD\xB0\xBE\x64\x07\xA8\x73\x1A\x6A\xAD\xAB\xAE\xB3\x8C\xBE\xAC\xAD\xA3\x84\xBF\xB2\xB3\xD1\x8A\x46\x0A\x67\xBD\x95\xB3\xB1\xB6\xC0\x9C\xB2\xB6\xB6\xD0\x9D\xBB\xB5\x7D\x1C\x4A\xB1\x7E\x0A\xC7\x9F\xB2\xB9\xB8\xEA\xAD\xBE\xB7\xBB\xE3\xAB\x7B\x08\xB6\xF1\x94\xBB\xBA\xBD\xEE\xB5\xBC\xA3\xB2\xFB\xA1\xAC\xBA\x42\x2E\x29\xBA\x43\x0B\x02\xFA\xBE\xA2\xBF\xF8\xB0\xBF\xBE\xC1\xAC\x88\xC2\x40\x0C\xF4\x8B\xC2\xC5\xC2\x0C\xFC\xB7\xC2\xAE\xFD\x98\xC7\xC6\xB0\x06\x60\x46\xBA\x73\x34\x05\xC3\xC5\xC6\x1C\xD4\xC3\xCB\xC6\xCD\x8C\xA5\x0E\xC8\x26\xED\xC4\xC9\xCA\x28\xD3\xBF\xCA\xCC\x31\xE0\xBE\xC9\xCD\xF7\x82\x46\x0E\x42\x04\x0A\xC7\xCD\xC3\x1A\xC0\xD0\x76\x0E\x2C\xC2\x4B\x0D\xD1\x38\xF9\xB7\xC8\x00\x3C\x08\xD0\x01\x0F\x4E\xD6\xC2\xD0\xCC\xAB\xBE\x01\xD6\xC3\x49\xFE\xC2\x40\x49\x1F\xE5\xC3\xCE\xCD\x5F\xF9\xC9\xD5\xC5\x58\xD3\xD4\xCE\xD9\x60\xCA\xA0\x12\xD3\x41\x17\xD1\xD2\xD4\x52\xC2\x1E\xD3\x10\x6E\xDE\xD3\xDB\xD2\x44",
			"\x35\xD4\xD4\xDC\x65\xD2\xD5\x10\xCF\x5A\xF7\xDF\xCE\xD4\x49\x3A\xD7\xD8\xDF\x6F\xFD\xDA\xE1\xE2\x8C\xF6\xD8\xDA\xD8\x00\x0A\x1E\xD3\x12\x86\xE9\xDF\xE2\xD2\x03\x4C\x1E\xD1\x13\x95\xD0\xE8\xE2\xE3\x4E\x1D\xE8\xE5\xD8\xA3\xCA\xAF\x10\xE0\x64\xCE\x73\x16\x82\x54\x0A\x85\x16\x82\x56\x0A\x87\x16\x82\x58\x22\xE1\xE3\xE5\xB7\xDF\xE4\xD5\x16\xB6\xE9\xEE\xE2\xEE\xC2\x5A\x1D\xEF\xD2\xC0\xD6\xEE\x7B\x16\xC3\xC3\xEB\xE3\xEF\xF1\x5C\x19\xF0\xE9\xB9\xCB\xFE\x6D\x17\xCF\xC2\xE0\xF6\xEF\xBE\x5E\x15\xF4\xEE\xD8\xC7\xE1\x7D\x22\xB8\x82\x4D\xCF\x5B\xB0\x6F\x5E\x4C\x89\x0B\x6B\x58\xF9\x40\xE3\xFD\x5F\x80\x50\xE6\x44\x79\x40\x72\x7D\x65\xFD\x5F\xF9\xA8\xEE\xF0\xFD\x5F\xF2\xC6\x44\xFF\x6D\xF6\x77\x34\xFE\x09\x2D\x7D\xDB\x2B\x78\x00\x9F\x3A\x7D\xD7\x2B\x2D\x7F\x81\x3F\x7B\x39\x01\x8B\x3B\x00\x86\x25\x81\xE5\x2F\x79\x20\x17\x8F\x3D\x03\xC7\x3B\x2D\x08\xA6\x3B\x82\x03\x35\x82\x79\x07\x82\x85\xF7\x07\x81\x81\xB7\x39\x83\x01\xBE\x2B\x83\x80\x0F\x86\x3C\x1E\x8F\x3C\x08\xE2\x7B\x2C\x15\xAB\x2D\x85\x00\x0F\x87\x7B\x31\x8E\x27\x19\xAC\x7A",
			"\x7D\xF9\x66\x81\x10\xCB\x34\x84\x20\x84\x86\x88\x14\x88\x89\x08\xCA\x84\x87\xB7\x05\x8E\x89\x43\x83\x85\x14\xA6\x83\x8A\x1F\x80\x05\x84\x56\x98\x89\x4D\x4F\x8D\x2E\x2E\x82\x8F\x88\x50\x80\x8D\x17\xD5\x8B\x8A\x32\xB2\x26\x8B\x44\x86\x8F\x4B\x68\x82\x8A\xD0\x0C\x8F\x87\x61\x89\x89\x1C\xCB\x83\x8F\x26\xA3\x8A\x8C\x00\x8B\x2D\x16\x9D\x8A\x8F\x32\xB8\x89\x8D\x6E\x95\x8C\x1C\xF5\x7D\x8F\x33\xAA\x8B\x25\x3C\x9D\x86\x21\xFF\x8D\x8C\x39\xB7\x8E\x91\x5F\x90\x90\x20\x92\x9D\x91\xB9\x2F\x8F\x8A\x7C\x86\x7E\x1F\x94\x9B\x87\x42\xAB\x8F\x90\x2A\x2C\x8C\x15\x8C\x93\x94\x4E\xBB\x8A\x90\x08\x97\x90\x0A\x93\x93\x21\x55\x95\x92\x20\x2B\x9B\x92\x25\xA8\x91\x96\x99\x09\x92\x91\x88\x9E\x91\x2E\x9A\x96\x96\x5D\xAA\x27\x96\xB8\x89\x24\x30\xC1\x98\x86\x1C\xAC\x82\x21\xB4\x2F\x2C\x0E\xC9\x9C\x7E\x64\xB7\x86\x99\xCA\x8A\x22\x31\xB5\x2B\x99\x67\x89\x24\x99\xB7\x25\x9A\x35\x8E\x4B\x9B\x59\x8D\x99\x90\xDF\x9C\x99\x34\xE0\x99\x9B\xF0\x71\x7F\x58\x38\x95\x97\x4B\x69\x9D\x9B\xF4\x63\x9E\x20\xAE\x9A\x81\xC4\x65\x99\x21\x78\x87\x9D\x9E\xED\x81",
			"\x22\x3D\xD4\x90\x95\x94\x38\x82\x8B\x32\x38\x87\x30\xAA\x22\xA1\x7C\x98\x97\x9D\x03\x23\xA2\x3F\x8A\x2A\xA1\x7F\x3F\x9E\xA0\x00\xAB\x9C\x43\x86\xAD\xA1\x87\xAF\x29\xA2\xC1\x98\xA0\x2E\x9A\xAA\x90\x8E\xBD\x86\xA3\x3E\x20\xA5\x4D\x21\x7B\x7E\x81\x36\x80\x9F\xA4\x91\x84\x36\x82\x28\x86\x1D\x96\x3E\x20\xDF\x29\x20\x7F\x09\x20\x41\x84\x09\x41\x21\x0D\x43\x23\x85\x06\x22\x45\x84\x11\x02\x21\x2A\x49\x23\x90\x09\x2F\xA5\x81\x03\xA8\xA6\x0A\x26\x49\x42\x4F\x42\x4B\xFF\x0A\x23\x4A\x36\xAA\x20\x97\x09\x26\x4D\x84\x14\x21\x21\x3B\xA3\x23\x55\xBC\xAA\x20\x38\x49\x23\x03\x0A\x21\x51\x42\x41\xA6\x20\xB1\x86\x27\xA8\x03\x25\xAA\x40\x66\xA6\xA8\x85\x31\xA6\x20\x84\x46\x22\xA5\x09\x2F\x02\x85\x26\x51\x21\xA9\x46\x23\xAD\x09\x23\x04\x85\x06\x5B\xA9\x7E\xAF\xAA\x53\x89\x2F\xAF\xA6\x91\xA9\x21\xC9\x46\x23\xB5\x09\x27\x04\x85\x28\x03\x23\x0A\x35\xAA\x41\x65\x56\x21\xAD\xBA\xA0\xB2\x56\xAA\x21\x4F\x86\x28\x5D\x84\x33\x59\x21\x2C\x1D\x20\xC0\x03\x6A\x20\x88\x65\xA1\x20\x2B\xB0\x7F\x17\x0A\x4D\x24\x1D\xAD\x20\x0C\xAC\xAA\x22\x6B\x8A",
			"\x21\x0D\xD8\x87\xB7\xB4\x62\x16\xB6\x41\x37\xA7\xB5\x31\x3A\xB3\x20\x33\xA2\x9E\x41\x64\x0F\xB6\x81\x28\xAB\x7F\x65\x05\xB9\x40\x47\xB0\x7E\x33\x0A\xB8\x00\x3F\xA4\x9E\x40\x67\x0F\xB9\xA9\xA7\xB0\x0D\xCF\xB2\xB1\x49\xE9\x09\xBB\xD3\x81\x22\x0D\xCF\xA0\xAE\xAA\x6B\x0F\xB8\xB6\xB0\x92\x21\x6C\x05\xBE\x77\x80\x0D\x0D\xE7\xB5\xAA\xBA\x01\x2E\x0F\x73\xF7\xA2\xB9\x81\x2F\x0B\xBE\xEB\xB0\x0F\x73\x85\xB5\xA5\x38\x0A\x45\x84\x7D\xBE\xBA\x7B\x2D\x2C\xBF\xFD\x72\x0F\xB9\x8F\xB0\xBC\x00\x73\x0A\x41\x18\x8D\xB3\x81\xC2\x2D\x25\x82\xA7\xB4\x0F\xE7\xA1\xB2\x55\x75\x0A\x41\x6A\x80\x0F\xB2\x83\x2A\x9E\x37\x2D\x37\xC3\x69\xF6\x0F\xB9\x18\x2B\xBF\x0E\x0A\x58\x86\x69\xA7\xB3\xC0\x85\x26\xC6\xBB\x78\x0F\xBA\x0C\x6B\xB9\x0E\x19\xEB\xBA\x0F\xCF\xBB\x66\x77\xFB\x0F\xB9\x1B\x2B\xBC\x0F\x3D\xCB\xBD\x1F\x39\xC6\x9C\x00\x3E\x0A\x41\x3A\x8B\x64\x84\xDA\x3D\x25\xA6\x5E\xBF\x0F\xCF\xB0\x6A\x77\x80\x11\xCB\xF5\x81\x17\xB9\x4E\xD5\xBE\x40\x02\x1A\x40\xB5\x81\x27\x68\x0A\xCE\x3D\x06\xED\x6E\xBB\x41\x0A\x47\x80\x46\x0B\xBC\x21\x0A\x41\x9E\xB9",
			"\x5E\xBD\x10\x0A\x4F\xAF\x40\x79\x6E\xBA\x43\x0A\x41\xB8\x03\x3F\x6E\x77\x87\x1A\x41\x9A\x86\x24\x6E\xDE\xA8\x12\x82\x2B\xBE\xBB\x03\xAB\xB8\x00\x19\x92\x6B\x01\x99\x89\x2B\xED\x71\x99\x86\x2D\x2B\xD3\xED\x31\x86\xD1\x79\xA6\xA1\x3F\x8D\xC9\x21\x0C\xB8\x85\x75\x55\x5B\xC4\xD3\xD1\x6E\x3A\x45\xA7\xB5\x85\x7D\x81\x6C\x9D\xDE\xB8\x85\xA2\xF1\x39\x83\x0C\xBA\x85\x84\xAD\xB6\xD2\xF5\x2E\x85\xC9\x96\x38\xCF\xD2\xF5\x32\xD0\x51\x8A\x29\xA7\xFD\x7E\xCB\x20\xAB\xC1\x6B\xAD\x81\x2F\xD7\xFD\x45\x7C\x39\xC5\xC1\x22\x9C\xFB\x7C\xB7\x56\xB7\x71\xD9\x00\x15\xD1\x42\x1B\xB0\xD9\xFC\x31\x99\x83\xCD\xDE\x3B\x7A\xD1\xB0\x9F\xDB\x59\xD9\x20\xD2\xC6\x22\x52\xDA\xCA\x51\x12\x99\x85\xD7\xE0\xCB\xBC\x53\xD5\xD5\x3F\x18\xA7\xDB\xB0\x1E\xC1\xD4\x74\x59\xA2\x21\x71\xE5\xA0\xAA\xE4\xDC\x7A\x41\x5C\xD3\x20\xB2\xA5\xA7\xD8\x2D\x3E\xDE\x40\x54\xDB\x7E\xEB\x8E\xDC\x61\x02\xE9\xDE\x77\xDE\xA9\xDE\xF7\x1B\xC1\x83\xCC\xA0\x00\xC1\xF0\x72\xBD\x6E\xCC\x61\xE2\xE1\xC3\x23\x5C\x8D\xE1\x3E\x55\xC9\xAD\xD6\x0A\x2F\xBC\xC7\xCE\x3A\x87\x0C\xB6\xDA\x20",
			"\x09\xE8\xD2\xBC\xBE\x3B\xDD\xF3\x9E\xBC\xBE\xEC\xCB\x3E\x97\xAA\xE0\xB0\x05\xED\x21\xAF\x31\xE1\x4F\xB2\x98\x82\xAA\x90\xC9\x23\xAF\x23\xF0\x3B\xB0\xB4\xE6\x20\xED\x82\x20\xDF\xFF\xD2\x7A\x70\x16\xBE\xE5\xD3\x81\xC1\xE8\xBE\x30\xD9\x06\xCC\xEA\xE1\xD3\x85\xC4\xE7\xF5\x3F\xD8\xD1\x83\x25\xE2\x6F\xA5\xA1\xB1\x39\xEC\x50\xBA\xDB\xEB\xAD\xAE\xAB\xB8\xE0\x15\x3E\xE6\x62\xCE\x64\xDE\xAC\xF0\xAA\xED\x03\x2F\xC0\xD4\xA1\x4A\x40\x91\xDE\xEB\x7F\x13\xC1\xEE\xA2\x7C\xD8\xD6\x83\x30\xE2\x20\x1B\xE9\xE9\xE3\x3E\x38\xE7\xA6\xE5\xA4\xB2\x7A\xEB\x55\xCA\x99\x85\xF1\xAA\xE5\xA5\xB3\x73\xFA\x38\xC6\x97\x20\xEE\x81\x1D\xC1\xF1\xEE\x2D\xE6\xE3\x82\x2F\xE9\xBB\xF0\x7A\xC4\x98\xF1\x3E\xC1\xFD\xE3\x21\xAB\xC0\x00\xE8\x82\xEC\x7A\x73\x60\xE6\xF1\xFD\x5E\x23\xC9\x65\x4A\x40\xEB\x9B\xF0\x7F\x80\x70\xF5\x25\x54\xF1\xD9\x46\x15\xF1\x20\x82\x77\xF2\x21\x5D\xED\xF5\x40\x72\xEE\xF2\xA0\x2B\xC1\xF4\xCE\x31\xAD\xE2\xF9\xE2\x21\xC5\xAC\xC2\xE9\xDA\x28\xF2\xF0\xC0\x2F\xC5\xC8\xCC\x39\xF0\xA4\xE2\x22\xF4\xB4\xF0\x29\x19\xFF\xF4\xAE\x45\xDB\xFA",
			"\xEE\xDE\xBE\x62\xEB\xF7\xE5\xC8\x97\xF3\xF9\x4B\x21\x6F\xFA\x83\x1D\xF1\xFB\x01\x20\xF6\x40\x10\xF9\xF5\xBD\x71\x3F\xF5\x06\x3E\xF7\x69\xCA\xC6\xFD\xFC\x3A\xFD\xF8\x2D\x1A\x63\xFD\x74\x58\x0A\x2F\x7F\xEA\x7A\x10\x3E\x6D\x7E\x03\x13\x7B\xE3\x79\x7F\xBC\x70\x00\x38\x0E\x34\xC4\x7E\x4E\x0E\x86\x73\x21\x1E\x34\xF4\x74\x81\x03\x17\x7C\x07\x89\x10\x44\x3A\x80\x02\x18\x7F\x89\x75\x7D\x03\x16\x7B\xA7\x50\x66\x03\x8B\x1E\x24\x8D\x81\x06\x19\x65\xC8\x70\x1D\x26\x89\x78\xDE\x76\x10\x31\x8B\x3F\x52\x69\x82\x61\x23\x83\x00\x8A\x10\x56\x30\x82\xBD\x7A\x20\xE5\x73\x10\x11\x8E\x5D\x5C\x38\x83\x2A\x3F\x80\x6B\x3E\x83\x00\x0C\x81\x6E\x73\x10\x02\x83\x10\xEC\x77\x5A\x64\x66\x84\x8A\x2F\x84\x2C\x83\x10\x6E\x64\x85\x00\x0B\x82\x4D\x82\x10\x09\x86\x10\x51\x85\x52\x80\x6A\x85\xEE\x1F\x85\x3B\x89\x10\x74\x6A\x85\x3A\x80\x7F\x10\x8F\x80\x7A\x6A\x85\x41\x8C\x86\x43\x81\x6F\xDE\x59\x66\x4A\x81\x86\xD3\x73\x87\x67\x86\x10\x47\x0E\x34\x56\x8A\x4F\x0A\x1A\x87\x57\x82\x10\x48\x0E\x34\x22\x18\x52\x06\x17\x88\x06\x1D\x83\xA7\x55\x38\x4A\x8E",
			"\x1E\x28\x8B\x87\x03\x12\x39\x4A\x8E\x82\x6C\x86\x89\x01\x1F\x81\xA7\x54\x39\x8F\x81\x1F\x98\x8D\x80\x25\x5A\x39\x4A\x87\x83\x89\x74\x8A\x02\x1A\x89\x25\x5C\x39\x9D\x8E\x1C\xA6\x8C\x7D\x2D\x14\x52\x5A\x8C\x88\x89\x72\x8B\x83\x81\x10\xA7\x3A\x84\x45\x83\x8B\x0F\x80\x05\x4E\x39\x84\x74\x8B\x88\x0F\x81\x05\x4E\x39\x85\x07\x70\x8C\x16\x89\x10\x52\x0E\x34\x6F\x85\x8C\x03\x19\x8B\x02\x10\x69\x0A\x1B\x3A\x4A\x85\x88\xAA\x2E\x8C\x01\x13\x76\x2D\x1D\x3A\x4A\x8E\x88\xF9\x66\x8D\x00\x07\x72\xF0\x3F\x3A\x4A\x84\x89\xDD\x84\x5A\xDE\x51\x3B\x4A\x8C\x89\xE5\x89\x10\x82\x80\x3F\xB3\x3A\x84\xA2\x8B\x8E\xC6\x87\x5A\xB5\x3A\x84\xAA\x89\x6F\x53\x83\x10\xBE\x85\x52\xBC\x3B\x8A\xD0\x14\x8C\x02\x1B\x8F\xFB\x32\x3C\xFE\x8E\x1B\x63\x8A\x8F\xEB\x58\x3C\x05\x92\x1C\x69\x88\x90\xDE\x5E\x3C\x0B\x9A\x1D\xCB\x81\x90\xEB\x54\x3D\x11\x9C\x1C\x76\x86\x10\x02\x90\x3F\xDA\x37\x91\x2D\x1D\x87\x02\x61\x1F\x32\x47\x68\x64\x79\x1E\xC1\x62\x13\x8C\x69\x69\xDE\x59\x92\xCF\x50\x8A\xE3\x1F\x61\x2B\x19\x71\x92\x83\x93\xB5\x80\x88\x87\x16\x6A\x32\x11\x4F",
			"\x40\x1A\x93\x2D\x1C\x93\xB2\x60\x3F\x1E\x57\x50\xF7\x30\x6B\x2D\x14\x94\x13\x57\x18\x0D\x5F\x0F\xD0\x87\x94\xDE\x5B\x61\x58\x1E\x94\x3E\x1B\x61\x40\x12\x95\x2D\x13\x4D\x38\x16\x95\x01\x57\x68\xA0\x62\x5B\x76\x1A\x43\x3D\x43\x5B\x5C\x9B\x5E\x33\x78\x15\x63\x9E\x13\x33\x70\x14\x67\x9D\x12\x3B\x72\x1F\x6B\x9D\x43\x6B\x90\x14\x6F\x9A\x96\x87\x61\x97\x0A\x13\x74\x58\x16\x97\x3E\x13\x74\x40\x1A\x97\xB6\x67\x68\x7C\x90\x6F\xD4\x10\x6D\x3D\x40\x6D\x40\x14\x98\x2D\x16\x98\x80\x95\x52\x5A\x78\x15\x8B\x9E\x13\x5A\x70\x14\x5A\x76\x68\x5A\x70\x69\x5A\x7A\x93\x5A\x70\x6B\x5A\x7C\x68",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Plus",
			L"EqualOptional",
			L"PositiveOptional",
			L"NegativeOptional",
			L"NO1",
			L"PositiveNO1",
			L"NegativeNO1",
			L"NO2",
			L"PositiveNO2",
			L"NegativeNO2",
			L"NestedOptional",
			L"NestedPositiveOptional",
			L"NestedNegativeOptional",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Plus] BEGIN ",
			L"[1][Plus] END [ENDING]",
			L"[2][Plus]< \"+\" @ >",
			L"[3][EqualOptional] BEGIN ",
			L"[4][EqualOptional] END [ENDING]",
			L"[5][EqualOptional]< \"optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[6][EqualOptional]< \"optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[7][EqualOptional]< \"optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[8][EqualOptional]< \"optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[9][PositiveOptional] BEGIN ",
			L"[10][PositiveOptional] END [ENDING]",
			L"[11][PositiveOptional]< \"positive_optional\" +[ Plus @ ] \"+\" { Plus } >",
			L"[12][PositiveOptional]< \"positive_optional\" +[ Plus ] \"+\" @ { Plus } >",
			L"[13][PositiveOptional]< \"positive_optional\" +[ Plus ] \"+\" { Plus @ } >",
			L"[14][PositiveOptional]< \"positive_optional\" @ +[ Plus ] \"+\" { Plus } >",
			L"[15][NegativeOptional] BEGIN ",
			L"[16][NegativeOptional] END [ENDING]",
			L"[17][NegativeOptional]< \"negative_optional\" -[ Plus @ ] \"+\" { Plus } >",
			L"[18][NegativeOptional]< \"negative_optional\" -[ Plus ] \"+\" @ { Plus } >",
			L"[19][NegativeOptional]< \"negative_optional\" -[ Plus ] \"+\" { Plus @ } >",
			L"[20][NegativeOptional]< \"negative_optional\" @ -[ Plus ] \"+\" { Plus } >",
			L"[21][NO1] BEGIN ",
			L"[22][NO1] END [ENDING]",
			L"[23][NO1][ Plus @ ] Plus",
			L"[24][NO1][ Plus ] Plus @",
			L"[25][PositiveNO1] BEGIN ",
			L"[26][PositiveNO1] END [ENDING]",
			L"[27][PositiveNO1]+[ Plus @ ] Plus",
			L"[28][PositiveNO1]+[ Plus ] Plus @",
			L"[29][NegativeNO1] BEGIN ",
			L"[30][NegativeNO1] END [ENDING]",
			L"[31][NegativeNO1]-[ Plus @ ] Plus",
			L"[32][NegativeNO1]-[ Plus ] Plus @",
			L"[33][NO2] BEGIN ",
			L"[34][NO2] END [ENDING]",
			L"[35][NO2][ NO1 @ ] Plus",
			L"[36][NO2][ NO1 ] Plus @",
			L"[37][PositiveNO2] BEGIN ",
			L"[38][PositiveNO2] END [ENDING]",
			L"[39][PositiveNO2]+[ PositiveNO1 @ ] Plus",
			L"[40][PositiveNO2]+[ PositiveNO1 ] Plus @",
			L"[41][NegativeNO2] BEGIN ",
			L"[42][NegativeNO2] END [ENDING]",
			L"[43][NegativeNO2]-[ NegativeNO1 @ ] Plus",
			L"[44][NegativeNO2]-[ NegativeNO1 ] Plus @",
			L"[45][NestedOptional] BEGIN ",
			L"[46][NestedOptional] END [ENDING]",
			L"[47][NestedOptional]< \"nested_optional\" @ [ NO2 ] Plus { Plus } >",
			L"[48][NestedOptional]< \"nested_optional\" [ NO2 @ ] Plus { Plus } >",
			L"[49][NestedOptional]< \"nested_optional\" [ NO2 ] Plus @ { Plus } >",
			L"[50][NestedOptional]< \"nested_optional\" [ NO2 ] Plus { Plus @ } >",
			L"[51][NestedPositiveOptional] BEGIN ",
			L"[52][NestedPositiveOptional] END [ENDING]",
			L"[53][NestedPositiveOptional]< \"nested_positive_optional\" +[ PositiveNO2 @ ] Plus { Plus } >",
			L"[54][NestedPositiveOptional]< \"nested_positive_optional\" +[ PositiveNO2 ] Plus @ { Plus } >",
			L"[55][NestedPositiveOptional]< \"nested_positive_optional\" +[ PositiveNO2 ] Plus { Plus @ } >",
			L"[56][NestedPositiveOptional]< \"nested_positive_optional\" @ +[ PositiveNO2 ] Plus { Plus } >",
			L"[57][NestedNegativeOptional] BEGIN ",
			L"[58][NestedNegativeOptional] END [ENDING]",
			L"[59][NestedNegativeOptional]< \"nested_negative_optional\" -[ NegativeNO2 @ ] Plus { Plus } >",
			L"[60][NestedNegativeOptional]< \"nested_negative_optional\" -[ NegativeNO2 ] Plus @ { Plus } >",
			L"[61][NestedNegativeOptional]< \"nested_negative_optional\" -[ NegativeNO2 ] Plus { Plus @ } >",
			L"[62][NestedNegativeOptional]< \"nested_negative_optional\" @ -[ NegativeNO2 ] Plus { Plus } >",
			L"[63][Module] BEGIN ",
			L"[64][Module] END [ENDING]",
			L"[65][Module]<< !EqualOptional @ >>",
			L"[66][Module]<< !NegativeOptional @ >>",
			L"[67][Module]<< !NestedNegativeOptional @ >>",
			L"[68][Module]<< !NestedOptional @ >>",
			L"[69][Module]<< !NestedPositiveOptional @ >>",
			L"[70][Module]<< !PositiveOptional @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<FeatureTestTokens, ModuleParserStates, FeatureTestAstInsReceiver, ModuleParserStateTypes>(&FeatureTestTokenDeleter, &FeatureTestLexerData, &FeatureTestModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		static vl::vint32_t results[5][5] = {
			{0, 0, 0, 0, -1, },
			{0, 1, 0, 0, -1, },
			{0, 0, 2, 0, -1, },
			{0, 0, 0, 3, -1, },
			{-1, -1, -1, -1, 4, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<featuretest::Feature> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
