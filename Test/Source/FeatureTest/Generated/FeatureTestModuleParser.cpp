/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestModuleParser.h"

namespace featuretest
{
	void FeatureTestModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3773; // 33606 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 189;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\x46\x83\x00\x00\xB5\x0E\x00\x00\x09\x00\x01\x82\x80\x0F\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x80\x81\x84\x84\x06\x95\x0A\x99\x0A\x85\x0E\x85\x10\x0A\xA5\x0A\x89\x1A\x85\x16\x85\x19\x0A\xB9\x0A\x9F\x1A\x85\x26\x84\x59\x0C\x86\xBF\x6B\x9C\x93\x96\x84\x00\x2D\xAD\xAF\x91\x9C\x93\x98\x9B\x7F\x36\xB4\xB9\x91\x9B\x9A\x9A\x85\x9B\x38\xBF\xB7\x8F\x9F\x91\x02\xA0\x9D\x47\xBC\x89\xBE\x99\x80\xA1\x9F\x9A\x4B\xD0\x8D\xA3\xA1\xAE\x95\xAB\xA0\x53\xC8\x99\xAA\xAB\xAC\xA6\x82\xA3\x09\xE0\xAA\x94\xAD\xAA\xAB\xB0\xAD\x67\xDC\xA9\xBE\xA3\x86\xA7\xAB\xA7\x56\xE5\xB1\xAB\xB6\xB5\xB4\xB2\xBA\x73\x83\x82\x0A\x82\xB6\xB8\xB4\xBF\x6A\x80\xEC\xA2\x8E\xB2\xB8\xAC\xBC\x87\x82\xF5\xA4\xC7\xBA\xC5\xBC\xC6\x7F\x90\xC1\xD2\xC3\xC1\x81\xC2\xC4\x70\x89\xD4\xCB\xC6\xCD\xC7\xCD\xC7\x9D\x91\xE1\xD3\xC3\xD5\xC8\x98\xCF\xA5\x9C\xE7\xC2\xDB\xD4\xD1\xD6\xD3\x97\x8E\xDA\xC1\x89\x96\x83\xBC\xC3\x99\xB9\xEF\xBB\xD8\xDC\xDC\xCC\xDF\xB2\xAF\x85\x1C\xB0\xE2\x82\x02\xE2\xBD\xC9\xFF\xCA\xE1\xE5\xE1\xD4\xD0\xAF\xAA\xC7\x08\xEB\xE6\x80\x04\xEA\xCD\xCC\xDF\xD3",
			"\xD1\xE8\xE9\xD9\xED\xBA\xDA\xC1\x8E\x8F\xAE\xE5\xEE\xEE\xDF\xCF\xDC\xEA\x08\xE8\xF2\xF3\xF4\xE7\xE1\xD5\xF9\xE3\xFE\xF6\xF1\xF8\xEF\xA8\xF8\xF7\xF0\xFD\xFE\xFC\xFF\xAC\x40\x8E\x6A\x80\xB0\x7F\x76\x80\x6B\x0B\x2D\x7A\x7B\x4B\x0C\x0A\x8B\x7D\x7D\x0B\xB9\x71\x83\x81\x03\xBA\x7D\x02\x83\xF0\x4E\x08\x84\x85\x05\x93\x8E\x85\x85\x1F\x9D\x8E\x68\x44\x03\x7D\x56\x7C\x84\x0F\xB4\x7A\x8B\x89\x2B\x91\x8C\x7E\x7E\x10\x0A\x47\x6C\x8A\x04\xAA\x65\x8C\x74\x12\x1B\x81\x8A\x8D\x1C\xBC\x8B\x8E\x77\x3D\x80\x9F\x8C\x7A\x41\x84\x93\x92\x7C\x2D\xA9\x8C\x8B\x92\x2E\xB4\x85\x90\x92\x4C\x8A\x91\x43\x04\x3A\xAE\x64\x05\x95\x22\x99\x9E\x8C\x88\x5C\x9A\x92\x92\x6B\x12\x61\x56\x7A\x05\x58\x9B\x9E\x96\x91\x5D\xA6\x9A\x9B\x97\xA6\x57\x05\x98\x9B\x6B\xA8\x97\x98\x94\x4D\x89\x97\x8C\x77\x18\x32\x82\x85\x9A\x70\xBD\x92\x9D\x9C\x74\x92\x92\xA2\x06\x7A\xAF\x87\x93\x9E\x73\x88\xA0\xA2\xA2\x7E\x81\xA7\x9E\xA3\x4F\x8C\xAF\x9C\x74\x1C\x2F\x9C\x76\x45\x62\x86\xAC\x9F\xA4\x9C\x90\xA7\xA2\xA6\x89\xA0\xAB\xA2\xA8\x8D\x92\xAF\x4A\x07\x85\x8E\x9F\xA6\xAA",
			"\x9B\x9E\xAD\xAA\xA9\xB0\xA4\xAD\xA5\xAC\xAC\xA1\xA6\x40\x08\x96\xAF\x48\x45\xA6\xB5\xA3\xAD\xAD\xA9\xB2\xAE\xA6\xAE\x9D\x91\x81\xB4\xAD\x92\x22\x29\xA4\xB3\xAA\xCB\xAF\xA6\xB3\xB3\xBF\xB3\xA0\xB5\xB3\xC3\x91\x9F\xA2\x42\x24\x39\xA9\x46\xB6\xD3\x96\xB5\xB1\xB4\xC2\xBE\xA4\xB6\xB8\xDE\x8C\xB5\xBA\x6B\x26\x0A\x45\x6F\xB8\xC0\xA0\xB7\xB3\xB9\xD5\xB5\x90\xBC\xB9\xF2\xB5\xB2\xA3\xB5\xDD\x81\x4C\x44\xAF\x49\xAA\x0C\xB6\xBB\xF9\xB7\xBF\xB4\xBB\xD2\x80\xC6\xC0\xC1\xE1\x90\x7B\x0A\xBA\xEF\xB6\xB8\xBF\xC1\xF3\xAD\xB8\xC1\xC3\x02\xE6\xBE\xC3\xC0\x51\xAE\x0F\xBF\x40\x2F\x1B\xC1\xC5\xC1\x13\xC1\xCF\xC1\xC8\x10\xD7\xC6\xC5\xC5\xAE\x70\x0C\xC2\xC8\x18\xE6\xCE\xB1\xC9\x28\xF1\xB1\xCC\xBD\x33\xD2\xCF\xC5\xA0\x20\x7C\xB1\x94\x0D\x1E\xEE\xC2\xCF\xC8\x37\xD4\xC0\xD2\xCF\x34\xF5\x0D\xCD\xCD\x20\xC1\xDC\xCB\xC9\x43\xC8\xD9\xC1\xD2\x44\xF6\xC1\xD4\xD4\x4E\xCA\x46\x0E\x42\x04\x02\xDD\xC9\xD5\x4B\xEF\xC3\x42\x0E\x47\xFB\x07\xD1\xD3\x64\xDB\xD0\x7C\x0F\x47\xFD\x03\xDA\xD9\x6C\xCC\xDA\x7E\x0F\x6B\xEE\xD2\xDE\xD7\x02\x64\x4A\xCF\xD4\x4F",
			"\xF9\xDA\xD7\xDC\x3F\xED\xD4\xDC\xDE\x7B\xFF\xDC\xD6\x41\x40\x07\xD1\x11\xDC\x82\xE5\xDC\xDE\x6A\x42\x07\xD3\x10\xE2\x7D\xCB\xE2\xD6\xA0\x44\x10\xE4\xCE\xE2\x89\xFE\xD6\x69\x11\x58\xC1\xE1\xE5\xE6\x27\xC9\x16\xE7\xE4\x98\xDF\xE6\xEB\xE5\x9A\xE8\xE2\xE4\xD5\xA5\xF4\xCA\x13\xD1\x4B\x23\xEC\xE9\xEA\xA4\xFA\x7C\x13\xD1\x26\x77\xD3\xE0\xC9\xBC\xCA\xD6\x42\x13\xB2\xFA\xDD\xD7\xE9\x93\xCF\x1D\xE7\xF0\xAA\xE0\xEA\xF2\x69\x53\x2B\xC0\xCD\xEB\xB5\xEB\xE2\xF3\xF3\xB4\xF3\xE2\xF4\xC5\x56\x07\xD7\x15\xF0\x9E\xC9\xF2\xCC\x16\x47\xD9\x1C\xF4\xF2\xD1\xC2\xEA\x17\xF8\xD4\xD7\xF4\xF8\x77\x5B\x07\xDC\x14\xFA\xBD\xC0\xE1\xC1\x17\x47\xDE\x10\xFE\xEF\xF1\xFB\xE2\x43\x17\xF7\xF2\xF9\xFB\xF2\x34\x60\x0E\xB2\x78\x74\x80\xFF\x79\x7D\x69\x62\x03\x82\x01\x85\x8A\x7F\x05\x8E\x80\x00\x64\x0A\x81\x03\x93\x80\x7A\xEB\x42\x76\x0C\x47\x67\x0D\xFF\x14\x85\x7B\x40\x68\x0F\x68\x69\x1B\x81\x05\xD3\x79\x48\x35\x22\x82\x3F\x6B\x0E\x40\x1B\x0E\x4D\x0C\x07\x6E\x0E\x41\x6F\x0E\x40\x1C\x0E\x41\x0E\xE7\x47\x85\x83\xDD\x65\x7C\xF1\x54\x64\x0F\x13\xAA\x7F",
			"\x7F\x3B\x8F\x25\x1D\x3E\x80\x80\x1D\x9E\x7C\x66\x76\x04\x89\x10\xB9\x86\x82\xD3\x37\x0A\x89\x47\x86\x8A\x14\xD4\x68\x0E\x28\x93\x8C\x84\x0C\x90\x3D\x1E\x56\x8D\x89\x28\x9D\x8B\x72\x7A\x1C\x88\x16\x8F\x83\x84\x85\x01\x1A\x82\xC3\x26\x31\x1A\x88\x30\x29\x19\x43\x21\x6B\x86\x2E\x8E\x40\x6B\x82\x36\x13\x44\x2F\x3C\xD3\x29\x21\x82\x6A\x87\x2B\x36\x8A\x24\x8E\xDB\x36\x8C\x51\x40\x29\x8E\x83\x3B\x88\x31\x80\x8A\x3E\x1F\x89\x29\x91\xF3\x32\x89\x20\x70\x88\x32\x20\x82\x94\x90\x85\x07\x92\x36\x8D\x80\x2B\x22\x86\x29\x93\x9B\x13\x97\x2A\x85\x83\x23\x25\xDB\x3D\x92\x4D\xB1\x27\x91\x00\x05\x97\x29\xFF\x87\x2A\x54\x91\x95\x8E\x12\x95\x92\x1E\xD7\x2A\x94\x53\xAB\x20\x95\xB5\x8C\x26\x20\xA8\x92\x96\x43\xB4\x95\x8F\x37\x38\x95\x2B\xAC\x91\x8E\x62\x88\x32\x98\xC5\x8C\x93\x30\xCA\x99\x98\x4E\x8B\x9E\x99\xCD\x83\x21\x2E\xB7\x96\x98\xD9\x08\x9F\x98\xD5\x9B\x3B\x35\xD6\x99\x9A\xF5\x1B\x9A\x9B\xDD\x8E\x91\x38\x9B\x92\x9B\x67\xA5\x99\x9A\x73\x86\x9D\x3A\xE8\x91\x21\x69\xBF\x1F\x9B\xDE\x96\x84\x38\xCC\x98\x9A\x7A\x9C\x9E\x9E\xF3\x90",
			"\x99\x3D\xFA\x98\x92\x60\xB4\x20\x9E\xE7\x2E\x9C\x39\xEB\x9B\x9F\x81\x2B\x59\x9F\xE7\x88\x92\x3F\xAB\x98\x9E\xF5\x02\xA1\x98\xE3\x90\xA1\x43\xE2\x93\xA3\x81\xAD\x9A\x9D\x17\xAC\x9C\x00\x07\xA1\x9F\x8A\xB7\x27\xA1\xFF\x91\xA0\x4D\x20\xAC\xA0\x7E\x88\xA4\xA0\xF7\x86\xA5\x47\xAA\xA4\xA2\x96\x96\xA3\x90\x12\xB7\x8F\x49\xF7\x8F\xA4\x77\x82\x91\x33\xA1\x82\x20\x2F\x9F\xAB\xA1\x96\x00\xA0\x28\x37\xA0\x95\x2C\xBC\xA6\x31\x9A\x98\xA1\x95\x57\x3F\x92\x61\x39\xA1\x21\x9D\xA3\xA5\xA7\x2C\x3F\xA6\x27\x96\x5C\xA8\x00\x0E\xA9\x26\x24\xBE\xA6\x48\xA5\xA9\xA1\x94\x9D\xAB\xA6\x48\xBA\xA2\x3B\xD2\xA1\xA4\x8F\xA5\xAE\xA5\x53\xA9\x23\x55\xAD\x25\xAB\xB5\xAC\x21\xAB\x51\xBB\xA9\x4B\x3B\x92\xA8\xB5\xBF\x95\xA8\x31\xBF\xAB\x4A\xEF\x87\xA9\x57\xA0\xAE\xAF\x7B\xAB\x23\x51\x9C\xAD\xA4\x83\x87\xA9\x33\xA8\x88\xB2\x4C\xFD\x98\xAF\xA7\x8D\xB0\xAB\x50\xAB\x24\x5C\x92\xB1\xB3\x7F\x13\xB6\xB2\x95\xB5\xA8\x7B\x4B\xAD\x21\xBA\x86\x24\x3C\xB2\x35\xA8\x68\xDB\x32\xB4\xCF\x83\x23\xB3\x88\x25\xB4\x67\x89\x23\xB4\xF5\x1A\xB6\xB4\x02\x20\xB0\x1E\xF2",
			"\xAC\x25\xAA\xAE\x9D\xAA\xB2\xBD\x96\x5E\xB3\xB6\xAD\x98\x38\xB0\xB6\x19\xA9\xB4\x6D\xAB\x25\xAB\xE3\x2B\xB6\x20\xC6\xA2\xB9\x42\x49\xB1\xB4\x85\x0C\xBC\xB4\xCE\xA0\xB8\x00\x4F\xBE\xB4\x85\x15\xAA\xB7\x02\x37\xBB\x4D\x55\xA7\x3B\xE3\x83\x25\xBB\xCA\xA6\x22\x76\xB4\x2C\xBA\xE9\xA0\xBD\xB9\x09\x23\xBE\x6F\xD6\xB6\xBD\xF6\x9E\xB9\xBB\x57\x34\xBB\x79\x58\xB1\x20\x4A\x9B\xBE\x52\xF2\xB6\x97\x7A\xBA\x74\xBE\x00\x36\xBC\xBC\x8B\xBB\x39\x7E\xFA\xB5\xB7\x00\xEA\x3B\xC0\x04\xDF\x1D\x55\x99\x38\xC0\x02\xCD\xC2\xBF\x55\xBF\xBF\x7E\xE5\x36\x31\xDC\x89\xC7\x1F\x16\xC9\xC1\x86\x84\xCB\xC2\xFD\x9D\xC6\x96\x1F\xC6\x95\x88\x9A\x92\x80\x03\xF4\xA9\x21\x84\xB2\xB5\x23\xF2\xB5\xBC\xD6\x8A\x20\xB5\xA2\x8A\x21\x83\x09\x27\x43\x84\x1A\x47\x21\x0A\x31\x45\x42\x11\x0A\x21\x1C\x49\x24\x4A\x2E\xDF\xC7\x8B\x8A\x27\x4B\x84\x21\x4E\x20\x64\x49\x23\x8C\xC8\xCA\x21\x1A\xC6\x26\x4D\x09\x39\x4D\x42\x14\x28\xC7\x29\xF9\xC2\x21\x84\x49\x23\x06\x0A\x25\x53\x84\x3E\xC6\x20\x5D\xC6\x20\x90\x9F\xBC\xCA\x85\x23\xCF\xB4\x15\x2A\x20\xAA\x09\x2F\x02\x85",
			"\x38\x51\x21\xBB\x46\x21\xB2\x09\x23\x04\x6C\x4A\x27\xC8\x03\x39\x59\x42\x49\xC6\x21\x25\xF9\xCA\x21\x7C\xC3\x22\x93\x83\x2A\x23\x84\x29\x59\x21\x27\x0A\x20\x0A\x1B\x2A\x20\x29\xC6\x23\x5F\x06\x34\xCA\x41\x24\x42\x20\x48\xC3\x22\xD2\x03\x3A\xC6\x41\x7E\x59\x21\x85\x49\x24\x05\x1D\x2A\x22\xC6\x09\x2D\x63\x84\x2A\x61\x21\x31\x0A\x22\x0C\x1F\x2A\x20\x9E\x49\x26\x68\x09\x37\x69\x42\x37\x0A\x20\x1C\x21\x22\x21\x60\x69\x22\xD8\x09\x28\x6D\x84\x2A\x69\x21\x70\x69\x22\xDD\x06\x23\xD9\x81\x05\xDA\x20\x85\x66\xC2\x7C\xAF\x27\x10\x07\x6F\x27\xBC\x32\xA8\x12\xB3\x8A\x20\xDB\x3B\x89\x13\xDA\x34\xC6\xC0\x00\x0A\x18\xDA\x83\x03\xD2\xA6\x8B\x1D\xD9\x8C\xBA\x7C\x10\x71\xC2\x27\xCC\x32\xAD\x12\xB9\xD3\x4A\xDA\x47\x2B\xD8\x00\x3C\xD6\xAD\x42\x0F\x1F\xDC\x28\xC1\xC0\x12\xEF\xCE\xD3\x62\x91\x19\xDE\x6D\xD2\x17\xDD\x5B\xDA\x77\x24\x6F\xD1\xCC\xBD\x0A\x24\x12\x04\xFA\xD9\x25\x6F\xDD\xCC\x79\xC6\x26\x12\xEF\xCF\xCC\x85\x86\x27\x13\x88\xDA\xD8\x13\xEF\xDA\xCD\x80\x99\x1E\x40\xD9\xB5\xCE\xC0\xF0\x2F\x26\xC6\x8B\xBA\x13\x77\xCB\xD6\xE1",
			"\x03\x3B\x12\x83\x0D\x99\xD0\xFE\xBA\x3F\x25\x27\xE1\xC0\x27\x6F\xD0\xD4\xDD\x5D\x16\x41\xF2\xBE\xD2\x6D\x66\x3F\x25\x9A\xC1\xC6\x13\xEF\xC9\xD6\x81\x9F\x1E\x41\xAA\xA7\xD1\xC0\x21\xEA\x22\xD0\x81\xC0\x15\x77\xEB\xD6\xC0\xA1\x0E\xEA\xB6\xA2\x1F\xDC\x59\xC1\xC3\x14\xEF\xD4\xD6\x81\xA4\x19\xEA\x6D\xE5\x15\xEA\x12\x86\x16\x83\x55\xD0\x00\x58\xD3\xE1\x49\x2F\x3D\xD5\x80\xA7\x1F\xDD\x5F\xC1\xC0\x15\x6D\xFA\xD9\x2A\x6F\xDA\xED\x12\x4A\x22\x15\x0E\x4D\xB4\x00\x3B\xDB\xE7\xFB\x2F\x25\x71\x06\xCB\x17\xBB\x8F\x76\xC0\x56\x03\xF2\xDB\xAD\x0F\xDC\xE7\x06\xCE\x15\x77\xC6\x0A\xDB\xAF\x0E\xF2\xB6\xB0\x1F\xDD\xC3\x7A\x71\x16\xEF\xC0\xF1\xDF\x86\x22\x17\x77\xD5\x70\xE5\x02\x33\x16\xE2\x8E\x44\x17\x77\xEF\x76\xC0\xB5\x0F\xDD\xEC\x06\xC6\x16\xD5\xDA\xDF\x16\xEF\xD7\x76\x81\xB8\x11\xF6\x6D\xF9\x16\x41\x82\x90\x0A\xB6\xBA\x1E\x40\x54\x95\x0A\xDB\xBB\x0E\x40\x61\xD1\x0A\xDA\x5E\x0E\x40\xC6\x02\x2D\x7A\x81\xBD\x1E\x41\x51\x81\x24\x0A\xDA\xDE\x16\x83\x7E\xC2\x20\x29\x1A\xDF\x17\x0E\x5F\xD9\x40\x46\x76\xC0\x60\x0E\x43\x0F\xDA\xC9\xB2",
			"\xB6\x92\xC2\x66\x54\x81\xAA\x77\xE4\xF4\x64\x61\x8D\x9F\x24\xF3\xD4\x65\x91\xE2\xE8\xC7\xD1\x45\x21\x9D\x05\xCC\x8F\x25\x2C\xDA\xD9\x19\xE9\xB7\x79\x00\xF2\xB4\xB0\x4D\x3D\x56\xDA\x61\x61\xE6\x1A\x54\xD6\x1D\x7F\x8B\x54\x76\x00\x8B\x35\x64\x71\x7F\xBE\x4E\x72\xAC\x1E\x7E\x41\x66\x10\x37\x61\x60\xD4\x75\x5F\x14\x3E\x7C\x00\x07\x81\x30\x5F\x43\x03\x1C\x81\xC8\x77\x47\xDA\x7B\x51\x14\x3C\x81\x0E\x89\x69\x47\x34\x58\x82\x43\x82\x21\x84\x14\xF1\x66\x10\x0B\x87\x32\x23\x87\x82\x02\x15\x64\x67\x71\x25\xB2\x52\x48\x15\x86\x70\x06\x68\x67\x02\x19\x7E\xD0\x1D\x48\x3A\x82\x63\x43\x5E\x81\x07\x14\x64\xDA\x61\x68\x3F\x84\x31\x2F\x83\x10\x5F\x6B\x58\xFB\x76\x10\x4F\x82\x10\x9A\x6B\x58\xF6\x66\x58\x01\x33\x85\x4D\x5A\x6D\x59\x67\x83\xF6\x22\x5F\x82\x48\x6E\x01\x15\x85\x32\x51\x70\x30\x84\x31\x62\x86\x55\xDA\x6B\x66\x5E\x82\x28\x04\x89\x10\x36\x8C\x83\x01\x6D\x70\x6D\x80\x1F\x64\x72\x48\x71\x82\x10\x5A\x8E\x5F\xF7\x77\x67\x12\x4F\x12\x12\x76\x77\xF7\x1A\x77\x82\x4E\x83\x5B\x86\x60\x71\x62\x88\x28\x2D\x82\x82\x47\x85\x3A\x5A",
			"\x6D\x73\x65\x87\xFA\x1A\x81\x82\x4A\x6F\x02\x1A\x84\x34\x58\x43\x56\x60\x7A\x77\x4F\x71\x92\x8C\x1A\x1C\x82\x48\x98\x6F\x88\x06\x63\x72\x4B\x87\x1F\x23\x82\x48\x66\x82\x87\x8B\x55\x68\x9F\x8E\x1A\x3B\x87\x8A\x60\x68\x65\xFA\x7A\x89\x06\x18\x29\x9B\x7B\x58\x87\x6F\x8A\xA6\x14\x69\x18\x89\x10\xB8\x8C\x8A\x32\x5D\x72\xBC\x8A\x1A\x64\x8F\x8B\x06\x14\x87\xC2\x87\x47\x31\x7A\x88\x49\x2D\x84\xB2\x83\x10\x81\x82\x10\x6C\x80\x85\xB6\x83\x10\x89\x84\x8A\x01\x66\x69\xD1\x81\x25\x7B\x82\x48\xD9\x87\x88\x01\x6C\x69\xC5\x80\x1D\x69\x88\x4A\xE1\x8A\x86\x06\x6A\x73\xCE\x81\x25\x86\x8A\x8E\x06\x1E\x89\xCB\x84\x14\x3E\x7D\x8E\xF6\x2E\x88\xC8\x8F\x67\x09\x11\x89\xD6\x86\x84\x01\x1E\x8A\xF3\x8F\x12\x1E\x10\x81\xAE\x16\x89\xF9\x82\x10\x00\x9A\x8D\x8B\x53\x6A\xE5\x8C\x1D\xA3\x82\x8E\x84\x6F\x87\x0A\x15\x6A\x0D\x9F\x12\xAB\x8A\x90\x02\x14\x8C\x01\x9A\x10\x47\x76\x8F\x82\x21\x8C\xDD\x81\x10\xCD\x82\x10\xBB\x8D\x8F\x45\x4C\x1D\xDC\x80\x91\x32\x5B\x74\x1E\x90\x1F\xD5\x81\x92\x00\x09\x92\xF0\x8B\x58\x4F\x75\x91\x0A\x1A\x8C\x18\x9A\x2F",
			"\x12\x99\x10\x39\x36\x93\x70\x62\x41\xEC\x89\x93\x44\x1E\x6A\x3E\x91\x8F\x0E\x25\x8F\x02\x14\x8E\x26\x9B\x44\x09\x13\x90\x06\x14\x91\x8B\x56\x76\x2D\x9B\x35\x50\x92\x94\x2F\x16\x75\x53\x9C\x1A\xA6\x87\x90\x01\x15\x95\x2A\x97\x47\x5A\x75\x94\x11\x9C\x89\x00\x0E\x95\x33\x92\x53\xB6\x64\x90\xA6\x1A\x91\x82\x54\x6A\x3B\x96\x10\x22\x1A\x96\xAA\x1A\x94\x6D\x96\x10\x1D\x96\x95\xB8\x67\x34\x4E\x9E\x91\x2C\x92\x10\x0C\x9B\x58\x7C\x79\x95\x82\x3D\x97\x5F\x94\x14\x75\x70\x93\xF0\x1F\x97\x30\x95\x93\x03\x1A\x98\x77\x4E\x76\x82\x92\x33\x8C\x98\x97\xC0\x67\x34\x66\x92\x48\x3D\x93\x10\x69\x91\x60\xC7\x6C\x95\x13\x42\x95\x94\x94\x38\x47\x37\x97\x9E\x98\x95\x02\x14\x94\x8B\x56\x79\x62\x91\x25\xA6\x95\x98\x7F\x77\x34\x84\x9C\x87\xB3\x6D\x6A\xDA\x64\x78\xAB\x96\x2F\x61\x9B\x91\x09\x1F\x79\xB7\x90\x00\x93\x9E\x99\x9B\x9A\x9B\x06\x1B\x78\xBD\x99\x99\x30\x91\x9C\xA1\x93\x10\x8F\x72\x97\xD0\x18\x9A\x42\x98\x9C\xAE\x9A\x10\x47\x07\x34\xAD\x94\x82\x09\x10\x9D\x67\x97\x47\x48\x07\x34\x71\x97\x86\x09\x1D\x9D\x03\x11\x6C\x01\x62\x3A\xCC",
			"\x94\x35\x81\x99\x9C\x02\x17\x7A\xBD\x97\x98\x9E\x9C\x9E\x00\x09\x6B\x01\x6B\x7A\xBD\x97\x36\x6F\x93\x10\xB2\x7D\x9B\x90\x90\x93\xF9\x91\x10\xF0\x9B\x58\xB9\x33\x9F\xFA\x1B\x9F\xD9\x94\x14\xC0\x35\x9E\x2F\x12\x9E\x1E\x98\xA0\xE8\x9B\x7D\x47\x3D\x99\xB2\x96\x10\x0A\xA1\x9D\x09\x1A\x7B\x06\xAA\x10\xC9\x69\x8B\x02\x11\xA1\x03\xAF\x12\xC4\x75\xA1\x09\x1A\x79\x58\x80\xA1\xF5\x95\x7D\x47\x34\x9C\x21\xA6\x6C\xD2\x9A\x6D\xCA\x70\xA0\xAC\x1E\xA0\xDB\x96\x60\xD0\x7E\xA1\x28\x2E\xA0\xE4\x91\x60\xBF\x72\xA3\x49\x2A\x9A\xC2\x93\x10\xD9\x38\xA3\x02\x1F\xA2\x6D\x80\xA2\xC8\x6A\x6D\xDB\x32\x7F\x01\x32\xA4\x12\xA6\x10\xE7\x3E\xA3\x01\x15\xA3\x1E\x96\x9B\x03\x17\xA1\x8B\x5D\x3E\x46\xA0\x33\x50\xAB\xA0\x00\x06\x3F\x4C\xA0\x00\xEA\x9E\x91\xBC\x9B\xA3\xFB\x30\x3B\x0E\x26\xA2\x43\xA6\x60\x25\x6E\x9D\x30\x34\xA6\x49\xA3\x10\x63\x07\x34\xF7\x9E\x91\xCB\x92\x9A\x06\x61\x41\x55\xA9\x3F\x71\xA0\xA6\x01\x1A\x41\x5B\xAF\x9F\x1E\x93\x9D\x64\x9F\x12\x1F\x4B\xA5\x05\xAD\x86\x7E\xA8\xA1\x77\x41\x42\x5B\xAC\x7D\x6D\x80\xA4\x78\xA0\x00\x26\x4B",
			"\xA5\x14\xAB\xA8\x23\xA1\x10\x29\x4B\xA5\x1D\xAD\x86\x4E\xA8\xA5\x2B\x4B\xA5\xD6\x7A\x3B\x99\xAB\xA6\x02\x1D\x42\x5B\xAB\xA2\x1E\x9D\xA5\x58\xAF\x42\x5B\xA1\xA3\x6D\x82\x9F\x51\xAA\x6D\x31\x45\xA7\x0C\x4C\xAA\x58\xA2\x07\x47\x37\xA3\x6D\x8F\xA6\x65\xA1\x60\x73\x02\x4F\x0F\x48\xAB\xA0\xA1\x10\x49\x4B\xA5\x3D\xAD\x86\x7C\xA8\x52\x32\x5F\x44\x5B\xA5\xA4\xC4\xAA\x10\xB1\x87\x47\x55\x4B\xA5\xE0\x3A\x3B\xC5\xA1\x10\x79\x87\x47\x5B\x4B\xA5\xE2\x32\xAD\x13\x9A\x6D\x61\x4B\xA5\x4B\xAB\xAC\xD7\x9A\x6D\xE0\x7B\xA5\x54\xA0\xAE\x22\xA6\x60\x7C\x0E\x3E\x0E\x23\xAD\x00\x05\xA8\x8B\x5D\x07\x47\x34\x3F\xDA\xA9\x10\x8C\xA2\x53\x7E\x05\x3F\xEB\xAA\x10\x9F\xA4\x14\x7F\x07\x34\xFC\x3A\x3B\x8A\xA3\x10\x83\xAB\x58\x80\x0B\x41\x91\xA2\xB0\xDA\x61\x08\x1B\x47\xA9\x08\xB6\x60\x82\x0B\x41\x9D\xAF\x3B\xDA\x63\x08\x1B\x44\xAA\x02\x13\xB0\x32\x54\x08\x1B\x4A\xAA\x0D\xB1\x60\x85\x0B\x41\xB6\xAD\xB1\x8B\x56\x08\x1B\x43\xAC\x4B\x9A\x1A\xF3\x5A\x6D\x9E\x9E\x14\x40\x8B\x12\xE7\x7A\x3B\x44\x1F\xB2\x6D\x84\x14\x6E\x5E\x12\x35\xB4\x4D\xE1\x7A\xB2",
			"\x34\x88\xA5\xD6\x98\x19\x31\x84\x13\x84\x54\x14\x41\xBF\x12\x43\xBC\xAB\x77\x43\x62\x00\x03\x62\x18\x6A\xB2\xB2\x54\x14\xEE\x41\x56\x6C\x4C\x7E\xC2\x1A\xB2\x0F\x65\x13\x55\xBC\x12\xCB\x68\x7F\x2A\xBA\x5E\x32\x1C\xB5\x6C\x5B\xB5\x2A\xB4\x76\x4E\x12\xB6\x40\x14\x76\x44\x16\xB6\x2F\x1A\x77\x4E\x1A\xB6\x40\x1A\x77\x44\x1E\xB6\x2F\x1D\x82\x4E\x12\xB7\x40\x1D\x82\x44\x16\xB7\x71\xBA\xB2\x78\xB6\x49\x6F\x1A\x81\x9A\x4A\x81\x44\x10\xB8\x2F\x12\xB8\x7C\xBA\x6D\x1C\x8E\x14\x87\xB0\x14\x1C\x84\x14\x8B\xBC\x20\x2A\xBD\xB8\x4D\x6F\x16\x23\x8A\x49\x23\x84\x14\x95\xBF\x12\x97\xB1\xB9\x30\xB9\x8A\x98\xBE\x6C\x99\xB9\x6D\x9B\xBF\x87\x33\x8D\xB9\x7F\xA3\xBA\xCC\xAF\x16\xCD\xA3\x5F\xA9\xBB\x6C\xA9\xB4\x14\xA9\xB9\x58\xA9\xBC\x7E\xA9\xB1\xB4\xA9\xBD\xB4\xA9\xB7\x53",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Plus",
			L"EqualOptional",
			L"PositiveOptional",
			L"NegativeOptional",
			L"NO1",
			L"PositiveNO1",
			L"NegativeNO1",
			L"NO2",
			L"PositiveNO2",
			L"NegativeNO2",
			L"NestedOptional",
			L"NestedPositiveOptional",
			L"NestedNegativeOptional",
			L"BranchedOptional",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Plus] BEGIN ",
			L"[1][Plus] END [ENDING]",
			L"[2][Plus]< \"+\" @ >",
			L"[3][EqualOptional] BEGIN ",
			L"[4][EqualOptional] END [ENDING]",
			L"[5][EqualOptional]< \"optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[6][EqualOptional]< \"optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[7][EqualOptional]< \"optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[8][EqualOptional]< \"optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[9][PositiveOptional] BEGIN ",
			L"[10][PositiveOptional] END [ENDING]",
			L"[11][PositiveOptional]< \"positive_optional\" +[ Plus @ ] \"+\" { Plus } >",
			L"[12][PositiveOptional]< \"positive_optional\" +[ Plus ] \"+\" @ { Plus } >",
			L"[13][PositiveOptional]< \"positive_optional\" +[ Plus ] \"+\" { Plus @ } >",
			L"[14][PositiveOptional]< \"positive_optional\" @ +[ Plus ] \"+\" { Plus } >",
			L"[15][NegativeOptional] BEGIN ",
			L"[16][NegativeOptional] END [ENDING]",
			L"[17][NegativeOptional]< \"negative_optional\" -[ Plus @ ] \"+\" { Plus } >",
			L"[18][NegativeOptional]< \"negative_optional\" -[ Plus ] \"+\" @ { Plus } >",
			L"[19][NegativeOptional]< \"negative_optional\" -[ Plus ] \"+\" { Plus @ } >",
			L"[20][NegativeOptional]< \"negative_optional\" @ -[ Plus ] \"+\" { Plus } >",
			L"[21][NO1] BEGIN ",
			L"[22][NO1] END [ENDING]",
			L"[23][NO1][ Plus @ ] Plus",
			L"[24][NO1][ Plus ] Plus @",
			L"[25][PositiveNO1] BEGIN ",
			L"[26][PositiveNO1] END [ENDING]",
			L"[27][PositiveNO1]+[ Plus @ ] Plus",
			L"[28][PositiveNO1]+[ Plus ] Plus @",
			L"[29][NegativeNO1] BEGIN ",
			L"[30][NegativeNO1] END [ENDING]",
			L"[31][NegativeNO1]-[ Plus @ ] Plus",
			L"[32][NegativeNO1]-[ Plus ] Plus @",
			L"[33][NO2] BEGIN ",
			L"[34][NO2] END [ENDING]",
			L"[35][NO2][ NO1 @ ] Plus",
			L"[36][NO2][ NO1 ] Plus @",
			L"[37][PositiveNO2] BEGIN ",
			L"[38][PositiveNO2] END [ENDING]",
			L"[39][PositiveNO2]+[ PositiveNO1 @ ] Plus",
			L"[40][PositiveNO2]+[ PositiveNO1 ] Plus @",
			L"[41][NegativeNO2] BEGIN ",
			L"[42][NegativeNO2] END [ENDING]",
			L"[43][NegativeNO2]-[ NegativeNO1 @ ] Plus",
			L"[44][NegativeNO2]-[ NegativeNO1 ] Plus @",
			L"[45][NestedOptional] BEGIN ",
			L"[46][NestedOptional] END [ENDING]",
			L"[47][NestedOptional]< \"nested_optional\" @ [ NO2 ] Plus { Plus } >",
			L"[48][NestedOptional]< \"nested_optional\" [ NO2 @ ] Plus { Plus } >",
			L"[49][NestedOptional]< \"nested_optional\" [ NO2 ] Plus @ { Plus } >",
			L"[50][NestedOptional]< \"nested_optional\" [ NO2 ] Plus { Plus @ } >",
			L"[51][NestedPositiveOptional] BEGIN ",
			L"[52][NestedPositiveOptional] END [ENDING]",
			L"[53][NestedPositiveOptional]< \"nested_positive_optional\" +[ PositiveNO2 @ ] Plus { Plus } >",
			L"[54][NestedPositiveOptional]< \"nested_positive_optional\" +[ PositiveNO2 ] Plus @ { Plus } >",
			L"[55][NestedPositiveOptional]< \"nested_positive_optional\" +[ PositiveNO2 ] Plus { Plus @ } >",
			L"[56][NestedPositiveOptional]< \"nested_positive_optional\" @ +[ PositiveNO2 ] Plus { Plus } >",
			L"[57][NestedNegativeOptional] BEGIN ",
			L"[58][NestedNegativeOptional] END [ENDING]",
			L"[59][NestedNegativeOptional]< \"nested_negative_optional\" -[ NegativeNO2 @ ] Plus { Plus } >",
			L"[60][NestedNegativeOptional]< \"nested_negative_optional\" -[ NegativeNO2 ] Plus @ { Plus } >",
			L"[61][NestedNegativeOptional]< \"nested_negative_optional\" -[ NegativeNO2 ] Plus { Plus @ } >",
			L"[62][NestedNegativeOptional]< \"nested_negative_optional\" @ -[ NegativeNO2 ] Plus { Plus } >",
			L"[63][BranchedOptional] BEGIN ",
			L"[64][BranchedOptional] END [ENDING]",
			L"[65][BranchedOptional]< \"branched_optional\" +[ Plus @ ] Plus { Plus } >",
			L"[66][BranchedOptional]< \"branched_optional\" +[ Plus ] Plus @ { Plus } >",
			L"[67][BranchedOptional]< \"branched_optional\" +[ Plus ] Plus { Plus @ } >",
			L"[68][BranchedOptional]< \"branched_optional\" -[ Plus @ ] Plus { Plus } >",
			L"[69][BranchedOptional]< \"branched_optional\" -[ Plus ] Plus @ { Plus } >",
			L"[70][BranchedOptional]< \"branched_optional\" -[ Plus ] Plus { Plus @ } >",
			L"[71][BranchedOptional]< \"branched_optional\" @ +[ Plus ] Plus { Plus } >",
			L"[72][BranchedOptional]< \"branched_optional\" @ -[ Plus ] Plus { Plus } >",
			L"[73][BranchedOptional]< \"branched_optional\" @ [ Plus ] Plus { Plus } >",
			L"[74][BranchedOptional]< \"branched_optional\" [ Plus @ ] Plus { Plus } >",
			L"[75][BranchedOptional]< \"branched_optional\" [ Plus ] Plus @ { Plus } >",
			L"[76][BranchedOptional]< \"branched_optional\" [ Plus ] Plus { Plus @ } >",
			L"[77][Module] BEGIN ",
			L"[78][Module] END [ENDING]",
			L"[79][Module]<< !BranchedOptional @ >>",
			L"[80][Module]<< !EqualOptional @ >>",
			L"[81][Module]<< !NegativeOptional @ >>",
			L"[82][Module]<< !NestedNegativeOptional @ >>",
			L"[83][Module]<< !NestedOptional @ >>",
			L"[84][Module]<< !NestedPositiveOptional @ >>",
			L"[85][Module]<< !PositiveOptional @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<FeatureTestTokens, ModuleParserStates, FeatureTestAstInsReceiver, ModuleParserStateTypes>(&FeatureTestTokenDeleter, &FeatureTestLexerData, &FeatureTestModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		static vl::vint32_t results[6][6] = {
			{0, 1, 1, 1, 1, -1, },
			{1, 1, 1, 1, 1, -1, },
			{1, 1, 2, 1, 1, -1, },
			{1, 1, 1, 3, 1, -1, },
			{1, 1, 1, 1, 4, -1, },
			{-1, -1, -1, -1, -1, 5, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<featuretest::Feature> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
