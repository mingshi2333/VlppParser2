/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestModuleParser.h"

namespace featuretest
{
	void FeatureTestModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1009; // 7546 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 241;
		static const vl::vint dataSolidRows = 3;
		static const vl::vint dataRows = 4;
		static const char* compressed[] = {
			"\x7A\x1D\x00\x00\xE9\x03\x00\x00\x05\x00\x01\x82\x80\x00\x83\x81\x81\x82\x06\x89\x81\x83\x0A\x81\x06\x85\x07\x0A\x95\x0A\x96\x5A\x87\x7E\x8B\x8B\x16\x8A\x80\x18\x88\x8A\x8C\x8F\x8B\x1E\x9F\xBF\x61\x9F\x8A\x8E\x8D\x00\x15\xA2\xA4\x9C\x8B\x95\x8D\x95\x92\x2F\xAC\xB1\x8E\x99\x82\x93\x91\x99\x20\x8A\xA8\x89\x8B\x9E\x82\x9B\x96\x39\xB5\xAA\x98\x99\x8C\xA3\x9A\xA1\x30\xC8\xB2\x8A\xA4\x9E\x82\x00\x9D\x46\xC0\x85\xAC\xA1\xA6\x9F\xA0\xAA\x53\xD6\x89\xBA\xAB\xA4\xAD\xA7\x81\x3F\xD1\xA2\xB8\xA7\xA6\xAD\xAA\xB0\x57\xE6\x99\xA8\xBB\xAB\x80\x87\x84\x4F\xE4\x92\xA5\xBC\xB5\xAD\xBB\xAF\x02\xE1\xB2\xAA\x88\x83\x81\x9F\xBB\x67\x82\x86\x10\xAB\xBD\xC2\xB4\xBA\x79\xE9\x83\x87\x04\xC7\xC2\x8C\x04\x8D\x80\xEB\xA9\xCD\xB4\xCA\xBA\xCB\x78\x81\x8E\x9C\x93\xB6\xC5\xCE\xC9\x88\x81\x8A\x11\xC8\xC9\xC1\x80\xBD\x9E\x86\xE0\xD3\xBC\xD7\xCD\xD3\xC9\xA7\x8A\xEF\xC1\xDB\x8A\xD9\xD9\xCA\xB7\x97\xF9\xD9\xC0\x03\x06\x85\xB8\xA9\xC1\xEB\xCE\xDB\xDE\xD1\xDA\xDC\x00\x0D\x24\xC5\xE0\xD8\x02\x07\xE5\xC7\xBA\xD1\xFC\xD8\xD3\xE1\x84\x88\x9C\xAA\xC2\x90",
			"\x00\xED\xEB\xD9\xD6\xDA\x81\x91\x1D\xE6\xDB\xEA\xE2\xEF\xCC\xB4\xE8\xE0\x02\x0C\xF0\xE5\xF5\xF0\xE5\xF1\xEF\xF2\xFD\xF8\xFB\xFB\xD2\xF3\xF9\xE5\xF3\x0F\xDC\xE2\xF3\xCD\x7A\x74\x76\x7D\xD2\x52\x49\x76\x70\x02\x56\x0E\x7B\x7E\xF8\x43\x88\x73\x05\x0B\xBC\x68\x05\x84\xE7\x44\x8E\x82\x74\x19\x14\x81\x82\x85\xC6\x5A\x00\x77\x06\xD0\x5C\x0A\x86\x7A\x1C\x9B\x8D\x81\x85\x27\xA6\x8C\x82\x74\x1D\x23\x80\x78\x82\xE9\x6F\x86\x76\x41\x1E\x2E\x8F\x7E\x80\x28\xAB\x8C\x6F\x07\x36\xA1\x70\x80\x89\x29\x80\x92\x76\x0C\xFE\x70\x56\x51\x5F\xB3\x76\x40\x72\x5F\x46\x4B\x92\x42\x93\xE9\x7F\x56\x49\x7A\x8C\x46\x94\x58\x92\xE9\x4A\x95\x93\x61\x52\x93\x96\x4D\x95\x4E\x47\x96\x52\x96\x56\x87\x60\x94\x00\x5D\xBF\x87\x9B\x99\x36\x69\x99\x9B\x97\x5B\xA0\x68\x97\x8F\x64\xA1\x94\x5A\x9B\x46\x60\x93\x40\x9B\x22\x73\x96\x4D\x9D\x7B\x8D\x93\x8B\x9A\x46\x69\x9C\x9F\x47\x7A\x8F\x92\x98\x59\x80\x8A\xA7\x9D\x9C\xB3\x49\xA1\x43\xA1\x1C\x7E\x9F\x9F\x47\x84\xA4\x57\x9B\x9B\x22\x5B\xA2\xA3\x81\x72\xA3\x9D\x9E\xA8\x1F\x56\xA7\xA4\x46\x92\xA8\x99\x9F\x94",
			"\x87\x69\xA3\x5D\xAA\x9C\x88\xAC\xA8\x68\xAE\xAB\xA0\xA9\xA4\xB3\xB8\xA9\xAF\x8F\x04\x24\xAC\x45\xAF\x8C\xA2\x40\xB3\x61\x36\x4C\x0B\xAE\xAA\x65\xAE\x5A\x43\xB0\x03\x73\x93\x61\x42\xA9\x90\x69\x43\x66\x06\x63\x69\x42\x6F\x09\x46\xBB\xAF\xB3\xB9\xA6\x00\x77\x63\xC7\xA7\x0F\xB6\x42\xD2\xB9\xA8\x0B\xB8\xD9\x90\x79\x08\xBA\x06\x4F\x7B\xAE\x0A\xEC\x83\x4E\xB9\xAE\x2B\x31\xB2\x41\x7B\xC9\x82\x4C\x0A\xBD\x01\x54\x07\xB1\x0B\xFC\x80\x0E\xBF\xAE\x2E\x10\x79\x98\x84\xBB\xAF\x00\x77\x99\x19\xBB\xA0\x0C\x74\x6F\x46\x43\x87\xAE\x31\x10\x70\x0B\xB1\x67\x87\xB8\xB0\x8C\x3F\x9A\x4E\xA7\xAE\x78\xBE\x8B\x79\xC4\xCD\x98\xCD\x8C\xC7\x73\x99\xCA\x40\xC9\x02\x71\xA2\x77\x49\x7C\x4A\x45\xAE\xC8\x25\xB4\x6C\xB7\x62\xC7\xB8\x8A\x88\x6F\xA9\x8C\xBC\xAA\xCF\x0B\x77\x85\x79\xAA\x2A\xD0\xB7\xC8\x93\xB7\x81\x45\xBB\x40\x40\xE6\x4B\xD2\x40\x2C\xF1\x8F\x7F\xD3\x93\x87\xB8\xB6\x41\x2E\xFC\x6F\xC6\x41\xD4\x83\x47\xD7\xAC\xDA\x98\xD2\xD0\x72\x5F\xCE\xA9\xAE\x72\x49\xDD\xCB\xC8\x74\x65\xC1\x48\xDA\x9D\x1C\xFA\xC4\x6D\xD8\x03\x6F\xD3\xAE\xDC\x32",
			"\x82\x46\xDE\x40\xD6\xB9\xA3\xBE\xB2\x34\xC8\x7B\xDD\xD5\xBB\xA3\x79\xDB\x7A\x4D\xE9\x9F\xDC\xDF\xC7\xB8\xB6\x41\xD4\x6A\xFE\x8B\xE0\xE1\xB9\x86\x82\xDA\x8F\x73\xA9\x98\x76\x41\x86\xF9\xAA\x83\xE1\x35\xDA\x4D\xE5\xA0\xBB\x88\xC7\xE4\xC7\x37\xED\xCA\x43\xE8\x02\x7D\x70\xE9\x90\x79\xC1\x4E\xE3\x40\xAE\xF9\xA8\xDF\x7F\xB5\xC3\x4C\x77\xAE\x13\xCF\xE3\xDA\x74\xB9\xE6\xD3\xAC\x88\xAF\xD2\x70\xAE\x42\x03\xC6\x4B\xED\xAE\x22\x89\x40\xE7\xED\x09\x49\xF4\xE9\xAE\x3C\x85\xFC\x6C\xD5\x1B\xC3\x46\xE5\xC9\xBB\x97\xC6\xF6\x71\x5D\xEA\xE9\x43\xF6\x02\x6D\xD6\x49\x08\x47\xCC\xE9\xD8\xF9\xE2\x47\xB2\x09\xFA\x01\x66\xF7\xC2\x42\x9F\xF9\xA3\x08\xFC\x91\xD2\xC4\xFF\xB1\x24\x38\xFB\x79\xC3\x06\x35\x7F\xAC\x25\x0E\x7F\xF2\x1E\x43\x57\xEB\x34\x4E\xC6\x59\x7F\x3B\xAC\x58\x21\x4D\x26\x30\x80\xCC\x47\x52\x82\x48\x71\x44\x52\x1C\x25\x69\xBE\x2C\x5A\x82\xB8\x79\x57\x79\x2A\x20\x86\x48\x10\x76\x24\x12\x9A\x26\x84\x6B\x67\x59\xD3\x3F\x2B\x84\x9B\x0D\x6E\x24\x4D\x79\x61\xE2\x1A\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Plus",
			L"EqualOptional",
			L"PositiveOptional",
			L"NegativeOptional",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Plus] BEGIN ",
			L"[1][Plus] END [ENDING]",
			L"[2][Plus]< \"+\" @ >",
			L"[3][EqualOptional] BEGIN ",
			L"[4][EqualOptional] END [ENDING]",
			L"[5][EqualOptional]< \"optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[6][EqualOptional]< \"optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[7][EqualOptional]< \"optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[8][EqualOptional]< \"optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[9][PositiveOptional] BEGIN ",
			L"[10][PositiveOptional] END [ENDING]",
			L"[11][PositiveOptional]< \"positive_optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[12][PositiveOptional]< \"positive_optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[13][PositiveOptional]< \"positive_optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[14][PositiveOptional]< \"positive_optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[15][NegativeOptional] BEGIN ",
			L"[16][NegativeOptional] END [ENDING]",
			L"[17][NegativeOptional]< \"negative_optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[18][NegativeOptional]< \"negative_optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[19][NegativeOptional]< \"negative_optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[20][NegativeOptional]< \"negative_optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[21][Module] BEGIN ",
			L"[22][Module] END [ENDING]",
			L"[23][Module]<< !EqualOptional @ >>",
			L"[24][Module]<< !NegativeOptional @ >>",
			L"[25][Module]<< !PositiveOptional @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<FeatureTestTokens, ModuleParserStates, FeatureTestAstInsReceiver, ModuleParserStateTypes>(&FeatureTestTokenDeleter, &FeatureTestLexerData, &FeatureTestModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		return -1;
	};

	vl::Ptr<featuretest::OptionalFeature> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
