/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestModuleParser.h"

namespace featuretest
{
	void FeatureTestModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2947; // 25423 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 131;
		static const vl::vint dataSolidRows = 11;
		static const vl::vint dataRows = 12;
		static const char* compressed[] = {
			"\x4F\x63\x00\x00\x7B\x0B\x00\x00\x08\x00\x01\x82\x80\x0E\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x81\x06\x85\x07\x0A\x95\x0A\x99\x0A\x85\x0E\x85\x10\x0A\xA5\x0A\x89\x1A\x85\x16\x85\x19\x0A\xB9\x0A\x9F\x1A\x86\x62\x01\x84\xFF\x29\xAA\x89\x9A\x80\x03\x95\x95\x2D\xAF\xAA\x91\x92\x9F\x7C\x9A\x99\x37\xAF\xB9\x90\x9A\x85\x9A\x9B\x96\x0A\x81\x3D\x95\x9B\x9B\x9B\xA0\x9C\x47\xBA\x89\xBC\x98\x94\xA3\xA4\xA3\x4D\xC8\x91\xAA\xA3\xAC\xA6\x82\x9F\x2D\xC2\x89\x9A\xA7\xAE\xA5\xAA\xA8\x5D\xD2\xA1\xB4\xA3\xB6\xAB\x80\xAC\x4F\xAC\xA9\xBF\x9F\xAA\xB5\xB6\xB6\x65\xE0\x83\x87\x9B\xAB\xB5\xA2\xB7\x71\xF8\xA7\xBE\xA9\xB8\xBB\xBC\xB1\x7F\xE4\x81\xC6\xB2\x80\xB7\xB7\xBB\x7E\x85\xFC\xA3\xC2\xBA\xC4\xC0\xC7\x82\x90\xC4\xC1\x86\xC5\xBC\xC5\xCB\x76\x99\xC7\xDA\xC6\xCA\x84\x87\x84\x74\x9D\xDB\xC3\xD2\xD5\xD0\xC6\xBD\x92\x8D\xD4\xCB\xC9\xD0\xD5\x81\x02\x41\x9C\xC3\x86\x01\xDC\xD3\xD3\xC4\xAB\x8F\xF9\xD1\xCB\xDB\xCA\x96\xD6\xBD\xAA\xC0\x07\x05\xDE\xD2\x80\x80\x75\xB6\xED\xD8\xDF\xDA\xDD\xE6\xDE\xCF\xBE\xD5\xD7\xDD\x96\x85\xE4\xE3\xC1\xAE\xD1\xE2",
			"\xE3\xEA\x82\x05\xE2\xD4\xB2\xCB\xF8\xCA\xE1\xEC\xE7\xEE\xE6\xE4\xD8\xFB\xEA\xE8\xF4\xF7\xF3\xC0\xEF\xEA\xE1\xF5\xF2\xFA\xF1\xF4\xF7\xF6\xF5\xEB\x0A\x81\xD0\xFB\xF5\xEE\x41\x81\x7E\x80\xCE\x44\x80\x75\x03\xE0\x63\x7A\x40\x42\x06\x5C\x5F\x7F\x83\x0A\xB5\x76\x82\x74\xF1\x50\x47\x74\x84\x01\x50\x09\x80\x7E\x12\x83\x8E\x85\x81\x1F\x90\x71\x07\x86\xFA\x40\x81\x88\x85\xCE\x52\x04\x8B\x84\xDC\x67\x8D\x88\x88\x30\x90\x7C\x89\x7B\x2E\xB4\x81\x8C\x8A\x32\xB5\x80\x7F\x8D\x2F\xB9\x8C\x8E\x8D\x3E\x90\x73\x05\x7F\xF9\x73\x8B\x8D\x90\x38\x89\x9D\x8E\x92\xDA\x52\x47\x85\x84\x06\x56\x0B\x8A\x8E\xF3\x50\x98\x85\x89\x57\x97\x03\x96\x73\x18\x1B\x98\x93\x92\x60\x80\x9C\x93\x91\xBE\x54\x4F\x90\x87\x26\xBF\x84\x99\x98\x6B\xA2\x9C\x99\x4B\x1A\x04\x9D\x86\x9A\x55\xA8\x97\x96\x91\x75\x98\x96\x97\x9E\x76\xBC\x9A\x9D\x9F\x80\xBF\x92\xA0\x07\x5E\xBE\x66\x47\x99\x82\xB8\x95\x90\x95\x8B\xB4\x9D\xA3\x97\x6E\x91\xAD\x9B\xA4\x79\x9E\x02\x9D\x9A\x90\x94\xAF\xA3\x98\x79\x8A\xA3\x9D\xA6\x9D\x8C\xAF\xA4\xA7\x0A\x60\x05\xA2\x70\x18\x48\xAE\xA4\xA6",
			"\xA4\xA3\xAF\x9B\xA6\xAF\xAE\xA2\xA5\xA8\x8E\x89\x42\x0B\xA5\x77\xA2\xAC\xA9\xAC\xBB\xB3\xA0\xAE\xAF\xB2\x9A\xA1\xB0\xAD\xD0\x64\x07\xAA\x76\x1A\x6A\xAA\xAD\xAE\xB5\xBD\xA2\xB2\xB3\xC4\xAD\xA0\xB7\xAF\xCC\x66\x0E\x64\xB5\xD1\xBC\xAC\xB0\xA8\xD8\x9D\xB3\xB2\xB7\xD3\xB5\x7C\x46\xB2\xCE\x6A\x07\xB3\xB3\xDB\x92\xB9\xBA\xB6\x7E\xAB\xAB\xB8\xB0\xE1\xAB\x7B\x0B\xB5\xDF\xB5\xB1\xBF\xBB\xE8\xAD\xBB\xB2\xBE\xCD\xB8\xB9\xB6\x76\x2E\x27\xBD\x4B\x0B\x02\xE0\xBE\xBE\xC1\xFC\x9C\xB6\xBF\xC1\x0B\xFE\x90\x0C\xBD\xF7\x89\xCA\xBA\xC4\xEC\x81\xAE\xB8\xC5\xF0\x8C\xC1\xC5\xA0\x20\x64\xB0\x74\x0D\x05\xCD\xC6\xC7\xBE\x23\xFD\xB8\xC5\xBE\x25\xD0\x75\x0D\xC8\x1B\xC9\xA4\xCA\xCB\x26\xE9\xC3\xC6\xCC\x15\xF0\xCA\xC1\xCB\x17\xC1\x46\x0E\x42\x04\x08\xC4\xCD\xC6\x27\xFF\xBC\x72\x0E\x2C\xC3\x4B\x0D\xD1\x41\xFE\xC6\xCE\x6F\x3C\x08\xD1\x41\x0F\x4E\xCB\xD5\xCD\xCE\x82\xBE\x01\xD4\xD5\x58\xEF\xC4\x4A\xC7\x33\xD2\xD0\xD3\xCF\x28\xDE\xD1\xD9\xD6\x31\xE2\xD2\xD3\xD9\x0A\x40\x1C\xCE\xD2\x64\xF7\xCA\xC7\x95\x44\x11\xD5\x13\xD5\x2F\xED\xDD\xD6\x11\x51",
			"\xC7\x14\xDD\xD9\x76\xF5\xC8\x13\xDE\x6E\xC9\xD2\xCA\xA0\x49\x00\xED\xD5\xDF\x5F\xE6\xDC\xD9\xDD\x8C\xFC\xDD\xE0\x74\x4A\x2B\xD3\xE0\xE2\x63\xCF\xEE\x6E\x13\x51\xCF\x16\xE3\xD4\x96\xF5\xC0\x15\xD4\x51\x1B\xE9\xE0\xE5\x79\x92\x12\xE9\xD8\x53\x24\x84\x14\x89\x55\x24\x86\x14\x89\x57\x24\x88\x17\xE9\x68\xD3\xED\xE7\xE8\x2F\xD9\x14\xEF\xE2\x8E\xFD\xE0\x76\x16\xBB\xF6\xEE\xEF\xE1\xF1\x5B\x11\xF0\xCE\xB7\xD5\xEE\x70\x17\xC7\xEF\xD2\xE0\xF2\xCE\x5D\x1D\xF3\xF3\xCE\xE0\xD9\x9E\x17\xD3\xD6\xFC\xED\xE0\x81\x89\x28\xAE\x40\x3D\xEF\x50\x6F\x5B\x3E\x7E\x7B\x43\x5A\xE6\xC1\x41\xF9\x5F\x0E\x80\x56\x78\x71\x09\x48\x7D\x5F\xF8\x7D\x65\xF2\xE4\xFB\xEE\xFD\x50\xFE\x41\xF2\xF7\x64\xFF\x6D\xF6\x69\x23\xFA\x37\x39\x7C\x00\x1F\x35\x2F\x05\x83\x83\x72\x6D\x71\x20\x06\xAF\x3B\x7F\x03\x3D\x7F\x72\x7F\x7B\x39\x00\x86\x22\x81\xE6\x2E\x82\x03\xBE\x20\x83\xE3\x2B\x2C\x82\xE6\x36\x83\x40\x18\x8F\x3D\x02\x87\x84\x80\xF7\x77\x36\x03\x85\x8C\x82\x85\x12\x86\x3C\x20\x8F\x3E\x08\xE0\x7B\x2D\x15\xAB\x2D\x83\x01\x2F\x87\x7B\x31\x8E\x27\x19\xAA\x78",
			"\x7D\x29\x8B\x39\x02\xC0\x82\x80\x22\x97\x86\x88\x23\x88\x88\x0D\xEF\x23\x88\x26\x81\x8E\x3C\x4D\x88\x83\x13\xA5\x83\x8A\x1F\x80\x04\x84\x56\x98\x89\x4D\x51\x88\x85\x22\x8E\x8E\x8B\x52\x80\x8D\x17\xC7\x8F\x8A\x32\xA1\x8E\x8C\x63\x89\x89\x19\xF3\x2A\x89\x1F\xAB\x8B\x89\x67\x8A\x8D\x1C\xF0\x89\x8C\x3A\x93\x83\x2D\x59\x9F\x80\x1E\xDB\x85\x8A\x3E\xA0\x35\x8D\x57\x80\x92\x16\xB2\x2C\x8A\x21\xBD\x8C\x90\x87\x8F\x24\x0F\xBD\x88\x90\x31\xB7\x8C\x7C\x7E\x88\x8E\x21\xFF\x8F\x8C\x37\xB3\x8E\x92\x75\x98\x93\x24\x92\x90\x8B\x44\xAB\x23\x91\x8C\x8B\x25\x21\xB0\x8B\x8F\x46\x9C\x94\x8A\x09\x27\x87\x26\x83\x2A\x95\x4E\xA9\x90\x90\x2C\x91\x90\x1B\x95\x90\x01\x58\xB2\x20\x94\xA1\x89\x24\x2E\xB9\x9B\x97\x50\xBD\x94\x91\xBF\x9D\x85\x30\xAD\x89\x20\x1C\x8F\x82\x21\xB4\x2F\x2E\x31\xC9\x9A\x7E\x85\x06\x9C\x98\x06\x2C\x9B\x6D\x4B\x97\x86\x67\x95\x99\x21\xD2\x8B\x38\x35\xCA\x97\x5C\x63\xB6\x97\x25\xDE\x97\x99\x83\x62\x93\x97\x66\x94\x96\x9C\xE3\x9C\x9B\x39\xD3\x9F\x7B\xF7\x50\x64\x9D\xAF\x8A\x9E\x41\x2D\x97\x99\x78\xA8\x9C\x95\xE4\x87",
			"\x7E\x3C\xF2\x80\x9F\x53\x90\x9B\x20\xC1\x86\x99\x40\x9E\x9A\x24\x63\x83\x90\x9C\x0A\x23\xA1\x42\x0A\xAE\x9F\x9A\x06\xA1\x9F\xAF\x30\xA0\x00\x41\x97\xA1\x5C\x95\xA1\x94\x17\xAC\x91\x46\xBD\x8B\xA2\x9F\x1D\xA5\x26\x98\x79\x7E\x40\x36\x86\x9E\x7E\x82\x21\x86\xD9\x81\x22\x31\xBA\x86\x3A\x83\x1F\x39\x21\xFC\x29\x20\x03\x0A\x28\x41\x84\x0C\x43\x20\x16\x46\x22\x86\x09\x23\x45\x84\x2A\x41\x21\x43\x49\x21\x4B\x83\x21\xA8\x97\x8A\x24\x02\x11\x2A\x22\x94\x32\xAA\xA8\x9A\x8A\x22\x4B\x09\x3D\x49\x42\x66\x46\x21\x9C\x83\x24\xAA\x03\x3B\xA6\x41\x71\x49\x21\x0D\x0A\x24\x50\x3E\xBF\xAA\x42\x45\xA3\x21\xA1\x82\x20\xAC\x06\x24\xAE\x77\x15\x2A\x20\x4B\x49\x27\x03\xA5\x57\x21\x52\x89\x29\x55\x28\x4A\x23\xA6\x74\xAD\xA9\x42\x35\xA6\x21\x5B\x49\x23\x04\x0A\x26\x59\x42\x49\x56\x20\x6B\x51\xAA\x21\x86\xA6\x20\x56\x82\x26\xAA\x81\x09\xB7\xAA\x0A\x3A\xAB\x40\x27\x0A\x20\x14\x1B\x22\x21\xE6\x49\x23\xBC\x09\x2C\x05\x8E\x0A\x21\x60\x09\x24\x61\x42\x0F\x62\xA5\x80\x29\xA0\x28\x5F\x04\x45\x4B\x3A\x8D\x24\x30\x2A\xB6\x85\xA5\xA1\x21\x18\x2F",
			"\xBC\xA8\x44\x62\x0C\xB6\x06\x37\xA5\xFE\x63\x08\xB7\x81\x3A\xB6\x7D\x64\x1D\xB6\x40\x3F\xA6\x21\x02\xA5\x0A\xB8\x01\x28\xA9\x6C\xE6\x08\xB8\x00\x0A\xBD\xB4\x67\x0D\xB8\x54\xA5\xB8\x0D\xE6\x92\xAD\xB4\x69\x16\xB9\x6C\x80\x0A\x0D\xE6\x9E\xA8\x51\x6B\x0D\xB8\x5A\xE5\x93\x20\x36\x22\xBB\xBB\x6D\x0D\xB8\x5C\xEB\x92\x20\x37\x0D\xBE\x54\x88\x4F\x0F\x7B\xDB\xB0\x0F\xE6\x82\xB5\xB4\x71\x04\x44\x09\x80\xB1\xB6\xF7\x2D\x27\xBE\x22\xB2\x0D\x73\x96\xBC\xBD\x80\x33\x0C\x44\x31\x94\xB0\xD7\x42\x3D\x24\x02\xE5\xB4\x0E\xCD\xBD\xB0\xA2\x75\x04\x45\xD3\x9B\xB5\xB8\xF9\x2D\x26\x84\xA5\xB6\x0F\xE6\xB1\x03\xBB\x77\x04\x46\x31\xA4\xB5\xB4\xFF\x8A\x27\xC3\xB1\xB8\x0D\x73\xB2\x0B\xBB\x3C\x2B\xC3\xBB\x7A\x0D\xBB\x0D\x6D\x90\x01\x3D\x24\x42\x87\x3B\x6B\xC2\x76\x2D\x23\xC7\xD8\xBC\x0D\xB9\x38\x1B\xB9\x1F\x40\xCB\xBA\x3F\x0D\xB8\x6A\x88\x5F\x0C\x89\x66\xA1\x21\xA6\x45\xC2\x50\x2D\x28\xC9\x69\x80\x1D\xB8\xAB\x71\xB1\x10\x55\xDB\xBA\x20\x24\x4E\x81\x20\x1B\xBB\x10\x24\x45\x80\xDE\x31\xB4\x10\x12\x74\x9A\x08\xDB\xA5\x10\x89\x2F\xA6\x21\xB8",
			"\x71\xB6\x10\x24\x51\xA6\x41\x73\x61\xB7\x43\x24\x40\xAF\x06\x23\x0B\x76\x88\x14\x45\xD4\xB1\xB5\x80\xDB\xA0\x03\x06\xAF\x65\x80\x07\x99\x29\x7B\x06\x89\xA3\x76\x85\xDA\x69\x18\x80\xD7\x9D\x23\xB9\xC0\x82\xD6\x9D\xBF\xE4\x6D\x27\xB4\xC6\x95\x77\x7A\x0F\xA1\xB6\x12\xB4\x9C\x6A\xE1\x91\xB6\x31\x83\xDE\x38\x0D\xB0\xB6\x91\xEE\x7A\x87\xA7\xAF\x6A\x87\x47\xF0\xA1\x6A\x8C\xC2\xAA\x42\x72\xC2\xA4\x3C\xC3\x24\xD4\xDC\x60\x00\xAD\x82\x2E\xD4\x83\x3C\xAF\xD6\xF9\x34\x9E\x03\xBB\xD1\x21\x5F\xFC\xD3\x7B\xBE\x36\xD6\x40\x46\xDE\x7C\xD2\x4E\xA9\x21\x6C\xC2\xA7\x6F\x89\xD3\x70\x66\xF5\x93\xBB\x3D\xA9\x9F\x7A\x24\x8E\x81\x69\xD1\xD9\x7F\xC4\xB8\x9F\xE0\x53\xDD\xD7\x81\x0E\x4A\xDB\x57\x51\x86\x03\x8D\xB1\x21\x6C\xE2\xA3\xA9\xE8\xD4\x7A\x40\x6E\xD7\xD9\xD8\x93\xB8\xD8\xF5\x27\xB6\x03\xF4\xD1\x20\xB5\x8D\x80\xD9\xC2\x21\xDE\x40\x7E\xD0\x28\x67\xC0\xA9\xB2\xDB\xB7\xBA\xB8\xAD\x64\xE1\x72\xC2\x27\xBB\xF1\xC1\x53\xA8\xC7\xA8\xE1\xD8\xA3\xBA\x9F\x2D\x6F\xB8\x79\xF9\x7B\xBD\x88\xC2\x52\x87\x0E\x87\xDF\xC6\xEE\x70\xBE\x8F\xEE\x3C\xC9",
			"\x82\xD3\xAC\x86\xB1\xB5\xAE\x7C\xEB\x3F\xDB\xFF\xC9\x23\xBD\xF5\xD5\xB4\xBF\xA6\xE1\x3E\xC4\xC9\xE7\x61\x89\x20\xDE\x91\x86\xE2\xB1\x34\xCD\x24\x7F\xB7\xEE\x38\x65\xF1\xE0\xE8\x4F\xDF\xBD\xD4\x56\xDE\x80\x88\xE3\xE0\x28\x84\xAE\xE7\x95\x53\xDE\x81\x8B\xC1\x24\xAB\x25\xD6\xD0\x5B\xC9\xE8\xB1\xA8\x6C\xDA\xE7\x06\x27\x53\xCA\xA5\xBA\xC0\xA2\xD0\x3A\xB2\x91\xCF\xAD\xD0\x95\xB1\x6A\x7E\xE0\xEB\x20\x25\xE3\x22\x5B\xD9\xE3\x78\x54\x6B\xE9\x21\xE3\x46\xEE\x6F\x02\xE7\xE9\x81\x2D\xE4\xE6\x22\xB9\xB2\xDE\xC2\x3D\xE0\xB9\x9C\xEA\xB3\x51\x62\xE4\xE0\x82\x23\xE9\xA7\xDA\xC1\x6A\x33\xFD\xEE\x40\x00\xC2\x20\x9B\xFE\xE2\xEB\x83\xB7\xEE\x41\x1E\x2A\xC6\xE6\x0A\xE1\xED\x06\x31\xEB\xE2\xEE\x70\xB5\xC1\xDA\x3B\xB1\x01\x25\x82\xE8\xA9\xFB\xBA\xD1\xA6\xF4\x39\x4E\xE3\xF4\x00\x65\xEE\xF0\x85\x24\xC2\xEA\x7E\x42\xEC\xEE\x81\x2E\xC1\x81\x0F\xB1\x7F\x3F\xE3\x21\xDE\xB5\xF9\x20\x14\xEF\xF5\x25\x73\xFB\xF4\x00\x43\xF2\xF7\x96\x2C\xC5\xF3\x2D\x3D\xE3\xD3\xCC\xFC\xF5\xD8\x9D\x67\xF8\x86\xE3\xEF\x40\x17\xC4\xF8\x83\x20\x60\xFA\x0A\x2D\xF0",
			"\xE8\x83\x2B\xC3\x81\x02\xF7\xF2\x75\xFA\x38\xE7\x86\x2E\xF4\x91\xAB\x60\xFC\xF5\x2D\xFD\xF3\x8A\x29\xC6\xEC\xC9\x24\xF2\x92\xE1\x22\xFC\xD5\xF5\xB5\x1E\xF6\xF9\xF4\x34\x6B\x7F\xD7\x61\x5B\x41\x60\x7F\x06\x14\x7B\x18\x73\x10\x02\x8E\x70\x01\x12\x12\x06\x86\x7E\x90\x61\x10\xB7\x73\x7F\x09\x14\x34\x0F\x82\x10\xEB\x7A\x7C\xC6\x73\x10\xA5\x72\x52\x47\x37\x81\x81\x2B\x81\x14\x86\x10\x4E\x6F\x7F\x1C\x84\x22\xCF\x76\x10\x1D\x89\x3F\x52\x6A\x7C\x54\x39\x82\xDD\x73\x10\x56\x66\x82\x02\x12\x80\x0E\x47\x7D\x03\x1F\x7E\xA5\x5B\x35\x34\x81\x28\x3A\x81\x83\x02\x1A\x36\x20\x80\x00\x13\x89\x7F\x00\x0F\x83\x23\x83\x10\x5E\x63\x84\x22\x8C\x7F\x39\x8A\x79\x03\x18\x66\x43\x88\x83\x09\x82\x10\x48\x8E\x84\xF9\x3A\x67\x43\x85\x7F\x0B\x73\x10\x5C\x89\x84\x02\x1E\x66\x3D\x80\x00\x0E\x8E\x71\xFE\x73\x10\xDF\x75\x5A\x74\x63\x86\xEE\x17\x86\x60\x81\x10\x63\x63\x86\x16\x8E\x71\x05\x8E\x7D\xDB\x5A\x37\x43\x8E\x1E\x75\x80\x84\x01\x1F\x37\x43\x8F\x81\x1E\x75\x86\x46\x3B\x5D\x85\x39\x87\xF1\x10\x88\x7C\x80\x00\x91\x33\x84\x25\x8A\x7C\x88\x8F",
			"\x86\x00\x0B\x04\x51\x3D\x82\xB2\x7F\x88\x58\x8E\x3E\x4C\x01\x35\x3C\x8D\x85\x02\x16\x89\x03\x85\x5A\x4D\x01\x35\x52\x83\x4F\x0A\x1D\x88\x90\x81\x52\x63\x8B\x86\xCA\x74\x89\x01\x13\x87\x22\x5A\x39\x86\x8E\x1C\xAC\x8F\x89\x22\x5F\x39\x43\x81\x87\xCA\x73\x83\x03\x1E\x8A\xF9\x31\x3A\xB1\x80\x1D\xBA\x80\x89\xA6\x33\x84\x78\x8E\x71\x9B\x87\x52\xDB\x59\x3A\x43\x8E\x87\xC6\x83\x6B\xDB\x5B\x3A\x43\x85\x88\xCD\x8C\x53\xDB\x5D\x3A\x43\x8B\x88\xD3\x8C\x7E\xDB\x5F\x3A\x43\x82\x89\x88\x27\x8C\x01\x17\x85\x40\x11\x3B\x43\x89\x89\xDF\x8A\x10\x9E\x8D\x12\xB3\x33\x84\xA1\x88\x28\x4B\x86\x10\x42\x85\x5A\xBA\x3F\x8B\xBE\x13\x8A\x03\x11\x8F\x22\x50\x3C\xF4\x82\x1C\x5A\x80\x8F\xDB\x56\x3C\xFB\x8A\x1D\x62\x87\x8F\xDB\x5C\x3C\x01\x9C\x1C\xAA\x81\x84\xDB\x52\x3D\x07\x9D\x12\xB8\x8A\x90\xB1\x58\x3D\x0D\x9A\x10\xC5\x88\x7E\xD0\x12\x43\x81\x6F\x76\xE3\x18\x6B\x2F\x16\x68\x87\x6B\x5D\x1E\x9D\x5C\xB4\x83\x1E\xDF\x4F\x12\x0C\x87\x89\xEE\x37\x92\x23\x99\x3F\xAB\x68\x13\x2D\x92\x13\xF4\x40\x14\x31\x9D\x12\x33\x91\x81\xEE\x3B\x51\x81\x44\x3E",
			"\x24\x40\x14\x3B\x9D\x12\xC1\x43\x51\x78\x41\x43\x40\x12\x94\x97\x66\x17\xA7\x5D\x43\xA7\x50\x14\x49\x9D\x12\xCF\x44\x14\x4D\x9E\x50\x81\x69\x69\xAB\x56\x17\x3A\x4D\x43\xAC\x53\x95\xDB\x58\x72\x58\x1A\x95\x3E\x18\x72\x40\x1E\x95\x2D\x10\x73\xF2\x12\x96\x3D\x42\x96\x40\x16\x96\x61\x91\x68\x68\x9E\x8C\x87\x19\x73\x3D\x49\x73\x40\x10\x97\x2D\x12\x97\x6C\x91\x5B\x46\x72\x1F\x77\x9D\x43\x77\x90\x14\x7B\x9D\x12\x7D\x97\x57\x81\x66\x6D\x58\x12\x98\x3E\x16\x6D\x40\x16\x6D\x80\x66\x6D\x42\x96\x6D\x31\x96\x6D\x3B\x9C\x74\x2D\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Plus",
			L"EqualOptional",
			L"PositiveOptional",
			L"NegativeOptional",
			L"NO1",
			L"PositiveNO1",
			L"NegativeNO1",
			L"NO2",
			L"PositiveNO2",
			L"NegativeNO2",
			L"NestedOptional",
			L"NestedPositiveOptional",
			L"NestedNegativeOptional",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Plus] BEGIN ",
			L"[1][Plus] END [ENDING]",
			L"[2][Plus]< \"+\" @ >",
			L"[3][EqualOptional] BEGIN ",
			L"[4][EqualOptional] END [ENDING]",
			L"[5][EqualOptional]< \"optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[6][EqualOptional]< \"optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[7][EqualOptional]< \"optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[8][EqualOptional]< \"optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[9][PositiveOptional] BEGIN ",
			L"[10][PositiveOptional] END [ENDING]",
			L"[11][PositiveOptional]< \"positive_optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[12][PositiveOptional]< \"positive_optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[13][PositiveOptional]< \"positive_optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[14][PositiveOptional]< \"positive_optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[15][NegativeOptional] BEGIN ",
			L"[16][NegativeOptional] END [ENDING]",
			L"[17][NegativeOptional]< \"negative_optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[18][NegativeOptional]< \"negative_optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[19][NegativeOptional]< \"negative_optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[20][NegativeOptional]< \"negative_optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[21][NO1] BEGIN ",
			L"[22][NO1] END [ENDING]",
			L"[23][NO1][ Plus @ ] Plus",
			L"[24][NO1][ Plus ] Plus @",
			L"[25][PositiveNO1] BEGIN ",
			L"[26][PositiveNO1] END [ENDING]",
			L"[27][PositiveNO1][ Plus @ ] Plus",
			L"[28][PositiveNO1][ Plus ] Plus @",
			L"[29][NegativeNO1] BEGIN ",
			L"[30][NegativeNO1] END [ENDING]",
			L"[31][NegativeNO1][ Plus @ ] Plus",
			L"[32][NegativeNO1][ Plus ] Plus @",
			L"[33][NO2] BEGIN ",
			L"[34][NO2] END [ENDING]",
			L"[35][NO2][ NO1 @ ] Plus",
			L"[36][NO2][ NO1 ] Plus @",
			L"[37][PositiveNO2] BEGIN ",
			L"[38][PositiveNO2] END [ENDING]",
			L"[39][PositiveNO2][ PositiveNO1 @ ] Plus",
			L"[40][PositiveNO2][ PositiveNO1 ] Plus @",
			L"[41][NegativeNO2] BEGIN ",
			L"[42][NegativeNO2] END [ENDING]",
			L"[43][NegativeNO2][ NegativeNO1 @ ] Plus",
			L"[44][NegativeNO2][ NegativeNO1 ] Plus @",
			L"[45][NestedOptional] BEGIN ",
			L"[46][NestedOptional] END [ENDING]",
			L"[47][NestedOptional]< \"nested_optional\" @ [ NO2 ] Plus { Plus } >",
			L"[48][NestedOptional]< \"nested_optional\" [ NO2 @ ] Plus { Plus } >",
			L"[49][NestedOptional]< \"nested_optional\" [ NO2 ] Plus @ { Plus } >",
			L"[50][NestedOptional]< \"nested_optional\" [ NO2 ] Plus { Plus @ } >",
			L"[51][NestedPositiveOptional] BEGIN ",
			L"[52][NestedPositiveOptional] END [ENDING]",
			L"[53][NestedPositiveOptional]< \"nested_positive_optional\" @ [ PositiveNO2 ] Plus { Plus } >",
			L"[54][NestedPositiveOptional]< \"nested_positive_optional\" [ PositiveNO2 @ ] Plus { Plus } >",
			L"[55][NestedPositiveOptional]< \"nested_positive_optional\" [ PositiveNO2 ] Plus @ { Plus } >",
			L"[56][NestedPositiveOptional]< \"nested_positive_optional\" [ PositiveNO2 ] Plus { Plus @ } >",
			L"[57][NestedNegativeOptional] BEGIN ",
			L"[58][NestedNegativeOptional] END [ENDING]",
			L"[59][NestedNegativeOptional]< \"nested_negative_optional\" @ [ NegativeNO2 ] Plus { Plus } >",
			L"[60][NestedNegativeOptional]< \"nested_negative_optional\" [ NegativeNO2 @ ] Plus { Plus } >",
			L"[61][NestedNegativeOptional]< \"nested_negative_optional\" [ NegativeNO2 ] Plus @ { Plus } >",
			L"[62][NestedNegativeOptional]< \"nested_negative_optional\" [ NegativeNO2 ] Plus { Plus @ } >",
			L"[63][Module] BEGIN ",
			L"[64][Module] END [ENDING]",
			L"[65][Module]<< !EqualOptional @ >>",
			L"[66][Module]<< !NegativeOptional @ >>",
			L"[67][Module]<< !NestedNegativeOptional @ >>",
			L"[68][Module]<< !NestedOptional @ >>",
			L"[69][Module]<< !NestedPositiveOptional @ >>",
			L"[70][Module]<< !PositiveOptional @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<FeatureTestTokens, ModuleParserStates, FeatureTestAstInsReceiver, ModuleParserStateTypes>(&FeatureTestTokenDeleter, &FeatureTestLexerData, &FeatureTestModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		static vl::vint32_t results[5][5] = {
			{0, 0, 0, 0, -1, },
			{0, 1, 0, 0, -1, },
			{0, 0, 2, 0, -1, },
			{0, 0, 0, 3, -1, },
			{-1, -1, -1, -1, 4, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<featuretest::Feature> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
