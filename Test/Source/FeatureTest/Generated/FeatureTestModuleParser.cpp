/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestModuleParser.h"

namespace featuretest
{
	void FeatureTestModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1027; // 7423 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 3;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\xFF\x1C\x00\x00\xFB\x03\x00\x00\x05\x00\x01\x82\x80\x00\x83\x81\x81\x82\x06\x89\x81\x83\x0A\x80\x06\x85\x06\x0A\x92\x0A\x81\x5A\x87\x7E\x8B\x8B\x16\x8A\x80\x18\x88\x8A\x8C\x8F\x8B\x1E\x9F\xBF\x61\x9F\x8A\x8E\x8D\x00\x15\xA2\xA4\x9C\x8B\x95\x8D\x95\x92\x2F\xAC\xB1\x8E\x99\x82\x93\x91\x99\x20\x8A\xA8\x89\x8B\x9E\x82\x9B\x96\x39\xB5\xAA\x98\x99\x8C\xA3\x9A\xA1\x30\xC8\xB2\x8A\xA4\x9E\x9F\xA0\xA6\x41\xCE\x89\xA6\x82\x02\x85\xAA\xA8\x45\xD8\x87\xB2\xAB\xA4\xAD\xA7\x81\x3F\xC6\x80\xB9\xAE\xA9\xA8\xB1\xA7\x65\xE4\xA7\xB3\xAB\xB5\xAD\xB7\xAF\x02\x84\x3A\x82\xBA\x80\x87\x81\x9E\x6F\xE6\x82\x81\xBA\xAB\xB3\xAD\x81\x06\x73\xBD\xAA\x87\x02\xC1\xB5\xBF\x7B\xE8\xB9\xAA\xB9\xC4\xB6\x80\x87\x3C\xF4\x83\xD3\xC7\xC6\xBE\xCA\x85\x09\x56\x92\xD5\xCB\xCB\xC4\xC5\x80\x7C\x9C\xD4\xDE\xC7\xCB\xD1\xC6\xB7\xA7\xF0\xA0\xCA\xC2\x83\x06\xC2\xD2\x0A\x8C\x2F\xC9\xDA\xBB\xD6\xC6\xDB\xA8\xB8\xEA\xC0\x00\x89\xCA\xD3\x80\x0E\x33\xFA\xD5\xDB\x8C\xD7\xE0\xC6\xC7\x9F\xC0\x0F\x02\xE5\xE3\xDA\xE7\xB9\xD0\xFB\xC1\xD0\xDF\xDC\x00\x08\x9A\xD6\xD4\xF4",
			"\xD8\xE2\xE8\xE3\xED\xC9\xA5\xE2\xC3\xF5\xEC\xF0\xEE\xE5\xE0\x80\x12\x9E\xD6\xF1\x83\x09\xE6\xE9\xF1\xC6\xFE\xED\xEC\x08\xF9\xF9\x15\x77\xCF\xF2\xFB\xFB\xFA\x0A\xFD\xD1\x7C\x71\x83\x7C\x02\xBB\x67\x06\x42\x81\x5A\x74\x83\x82\xFD\x4D\x83\x82\x83\xBB\x5D\x00\x83\x74\x0C\x8F\x86\x84\x85\xCF\x5E\x03\x87\x77\x15\x98\x87\x84\x87\xCF\x5F\x0B\x85\x77\x05\xA0\x8F\x84\x89\xF3\x7B\x09\x74\x55\x46\x76\x57\x7A\x4D\x57\x46\x48\x5F\x79\x31\x83\x45\x8C\x8D\x23\xBF\x33\x8E\x49\xF4\x7F\x35\x61\x42\x37\x89\x7E\x89\x72\x30\xAB\x8E\x67\x8E\x26\x76\x4F\x8C\x8B\x5A\x43\x9D\x8D\x91\x40\x86\x51\x90\x00\x48\x90\x9C\x93\x61\x53\x95\x92\x48\x92\x5A\x9F\x4B\x92\x8D\x2D\x86\x56\x94\x98\x5A\x5C\x96\x53\x97\x02\x53\x96\x4E\x93\x36\x63\x99\x9A\x94\x39\x93\x9A\x9A\x48\x59\x86\x58\x93\x9C\x5E\x86\x97\x78\x9B\x6D\x9F\x42\x9E\x9D\x7A\x89\x78\x99\x40\x78\x9C\x4C\x9D\x9F\x18\x7F\x9A\x55\x9D\x8B\x81\xAD\x8C\xA3\x58\x8E\xAE\x99\x40\x5D\x9C\x4A\xA1\xA4\xEC\x5E\x60\xA6\xA6\x39\x87\xA8\xA2\x45\x9E\x9F\xA1\xA8\xA2\x83\x94\x97\x98\x8F\x87\x65\xAE\x5D\xA9",
			"\x95\x98\x4A\xAB\xA9\xA8\xA7\x7C\xA8\xAC\xB1\xBD\x8F\xAA\x56\x72\x5A\x56\x4D\xAE\x87\x7B\xA2\x9A\x48\xEB\x75\xA7\x9E\x42\x0C\x49\x4C\xAF\x40\x4E\x89\x86\x41\xA9\x90\x46\x49\x65\x42\xCA\x83\x4A\x01\xAD\x01\x6E\x69\x41\xB1\x06\x53\xB9\x42\xB5\xCE\xB1\x64\xB4\x41\xDF\xAF\x0D\x72\x46\xB7\x86\x40\x0F\xB8\x84\x5F\xB1\x0C\xBA\x09\x5A\xB2\x8E\x42\x32\x2C\xB6\x42\x6C\xD4\xB3\x02\xBF\x40\xF4\xB5\xA4\x0F\xBD\x02\x4C\x71\x95\x42\x35\x3C\xB1\x41\x04\xDF\xB6\x02\xC0\x00\x04\xD4\xB7\x0D\x73\xD8\x83\x49\x7C\xB5\x38\x0D\x78\x92\x7D\xD4\xB9\x0D\x73\x94\xFF\x54\xBA\x0D\x73\x20\x1F\xB3\x97\xB7\xA6\x8A\x8F\x73\xA6\xA8\xA6\x92\xC9\x74\x0D\xEF\x94\xB7\xA5\xE5\x71\xA8\x91\xCA\x01\x51\xB8\xAB\xB1\x02\x6D\xA6\x8B\x6E\xC9\x9F\xB5\x88\x8A\xCF\x72\xC1\x40\xCD\x3C\x8E\x90\xCD\x8F\xE2\x40\x6E\xA2\x46\xCD\xB7\x5D\x65\xCD\xCD\x65\xA0\xD2\x49\xCF\x86\x43\xD3\xCE\xCA\x65\xAF\xC6\xB7\x99\xA7\x7A\x44\xC9\x01\x49\xDA\xC9\xAD\xBD\x57\x9D\xCA\x40\x43\xC8\x9E\xD5\xB5\x8E\xBE\xBF\xBB\xC9\xBB\x6E\xB3\x40\xB7\xB1\x94\xD5\xD1\x6B\x98\x5F\xB8\x77\xB5\x4B",
			"\xE1\x7A\x40\xDC\x5F\xF1\xAF\x79\xD6\x7A\xC6\xBD\x71\xBE\x03\x51\xD1\xAC\xC5\x52\xF9\xD4\xD0\xD6\x62\xE8\xA7\x80\xE0\x8B\xC9\x4E\x90\x92\x61\xE4\x95\xAC\x06\x92\xB3\x7E\xCD\xC8\x06\x55\xE2\x43\xDD\x6B\xC6\x4A\x05\x8E\x73\xC1\x4A\xDB\x40\xA0\xF1\xDD\x87\xCD\xC4\x69\xE2\x41\x70\xD4\x9B\x04\xB2\xE2\xE9\x6E\xE4\xA3\xB7\x1A\x90\xE9\x7B\xAC\x09\x49\xC6\x40\xEC\xB5\xA2\x88\xDC\xDB\xC4\x7E\xE6\xE5\xAC\x22\x24\xED\x41\x73\xC1\x87\xF8\xAB\x08\x99\xCF\x76\xE1\xDF\x02\x4D\xF4\xF4\x8F\x25\x11\xF1\x74\xDF\xB7\xC9\x46\xF5\xF7\xB5\xA7\x0A\xF7\x6E\x9E\xE0\xF3\x43\xF7\x00\x1B\xEA\x45\x0A\xCA\xC9\x47\xE8\xD3\xDE\xFB\xDE\xA2\x0A\xED\xC6\x46\xEC\xE7\xE7\xCA\x47\xFC\x92\x2B\x35\xF3\x42\xF1\xF0\x66\x20\xE2\x03\x2F\x6F\x5A\x6C\x06\x7F\x5A\x6A\x23\xC3\x06\x25\x81\x58\x6D\x00\x81\x81\x66\x21\xC6\x0C\x8F\x5A\x17\x10\x81\x72\x06\x2F\x71\xAD\x69\x3F\x48\x90\x78\x7A\x6B\x36\x77\x20\x92\x26\x23\x85\x93\x20\x65\x50\x1D\x28\x85\xA2\x27\x8C\x85\x6F\x53\x6A\x25\x2F\x82\x27\xD0\x26\x23\x86\x8D\x35\x82\x21\x4F\x7F\x25\x0E\xBE\x5F\x5B\xA7\x5F\x67",
			"\x69\x23\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Plus",
			L"EqualOptional",
			L"PositiveOptional",
			L"NegativeOptional",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Plus] BEGIN ",
			L"[1][Plus] END [ENDING]",
			L"[2][Plus]< \"+\" @ >",
			L"[3][EqualOptional] BEGIN ",
			L"[4][EqualOptional] END [ENDING]",
			L"[5][EqualOptional]< [ Plus @ ] \"+\" { Plus } >",
			L"[6][EqualOptional]< [ Plus ] \"+\" @ { Plus } >",
			L"[7][EqualOptional]< [ Plus ] \"+\" { Plus @ } >",
			L"[8][PositiveOptional] BEGIN ",
			L"[9][PositiveOptional] END [ENDING]",
			L"[10][PositiveOptional]< [ Plus @ ] \"+\" { Plus } >",
			L"[11][PositiveOptional]< [ Plus ] \"+\" @ { Plus } >",
			L"[12][PositiveOptional]< [ Plus ] \"+\" { Plus @ } >",
			L"[13][NegativeOptional] BEGIN ",
			L"[14][NegativeOptional] END [ENDING]",
			L"[15][NegativeOptional]< [ Plus @ ] \"+\" { Plus } >",
			L"[16][NegativeOptional]< [ Plus ] \"+\" @ { Plus } >",
			L"[17][NegativeOptional]< [ Plus ] \"+\" { Plus @ } >",
			L"[18][Module] BEGIN ",
			L"[19][Module] END [ENDING]",
			L"[20][Module]<< !EqualOptional @ >>",
			L"[21][Module]<< !NegativeOptional @ >>",
			L"[22][Module]<< !PositiveOptional @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<FeatureTestTokens, ModuleParserStates, FeatureTestAstInsReceiver, ModuleParserStateTypes>(&FeatureTestTokenDeleter, &FeatureTestLexerData, &FeatureTestModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		return -1;
	};

	vl::Ptr<featuretest::OptionalFeature> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
