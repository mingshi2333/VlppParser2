/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestModuleParser.h"

namespace featuretest
{
	void FeatureTestModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1166; // 9006 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 142;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x2E\x23\x00\x00\x86\x04\x00\x00\x06\x00\x01\x82\x80\x00\x83\x81\x81\x82\x06\x89\x81\x83\x0A\x81\x06\x85\x07\x0A\x95\x0A\x98\x0A\x80\x7A\x85\x7F\x18\x99\x98\x8A\x80\x02\x8E\x8C\x8E\x1E\x99\xA0\x81\x9F\x7B\x91\x90\x93\x1E\x9C\x9C\x81\x07\x8C\x90\x95\x8F\x2D\xA7\xB1\x89\x93\x98\x99\x84\x92\x25\xB5\xA2\x9A\x9B\x8C\x9D\x9D\x84\x2C\xC0\xBE\x8F\x9B\x9F\x9A\x97\xA1\x48\xC6\xB2\x8A\xA4\x9C\xA6\x9A\x83\x38\x9C\x82\x0A\x81\xA0\xAB\xA2\xA7\x45\xD6\x8B\xBA\xAD\xA4\xAF\xA7\x81\x51\xC9\x9E\xB9\xA0\xB7\xAB\xB1\x9E\x58\xE8\xA7\xBF\x9B\xB4\xA2\xB5\xB2\x5B\xF0\x9D\xB2\xBF\xAA\x81\xB1\xB4\x6C\x83\x8C\x89\x83\xA8\xBE\xB7\xBC\x76\xE6\xB4\xA4\xB1\xC1\xB9\xC3\xB9\x87\xF5\x81\x85\x04\xAA\xB3\x80\x84\x03\xD5\x83\xCF\xB9\xC4\xC1\x81\xBB\x6D\x8E\xC2\x87\x0D\xC6\xBE\x84\x04\x9D\x99\xDE\xC3\xD2\xD5\xD3\x80\x87\x42\xA4\xD3\xC0\xC7\xCA\xC1\xCA\xCA\x01\x8A\x21\xCB\xDF\xBD\xDA\xCD\xD6\x86\xB8\xC8\xDA\xDA\xC5\x8E\xD6\xDE\x96\xBE\xF9\xC2\xEB\xDC\xE1\xDE\xCC\xB4\xB7\xC6\xE1\xE8\xE7\xD4\xD6\x00\x0B\x0A\xBD\xA6\xDE\xE6\xDA\xD5\xEA\xCA\xCD\xC1\x8D",
			"\x03\xD8\xED\x84\x07\xDD\xC0\xF0\xCB\xE3\xF2\xEC\xF3\xE7\xE6\x90\xA9\xD4\xE1\x80\x09\xF1\xF3\xD6\xEC\xF0\xEA\xE1\x0F\xF6\xF3\xFB\xBF\xF3\xD7\xE1\x82\x0E\xF9\xFC\xFC\xC3\x40\x85\x72\x80\xC7\x7F\x76\x81\x80\x07\x83\x89\x81\x81\x08\x8D\x85\x73\x04\xD2\x59\x7B\x80\x73\x13\xA5\x75\x87\x73\x12\x6B\x79\x71\x42\x16\x3E\x7E\x80\x83\x0A\x9F\x81\x73\x05\x1E\x85\x74\x46\x86\xDE\x72\x74\x80\x85\xC3\x59\x05\x88\x88\x30\xAC\x81\x8B\x8C\xBD\x5A\x0F\x8A\x8C\x31\x96\x82\x8A\x8E\x34\xB8\x8E\x8C\x8F\xBD\x5B\x07\x8C\x90\x3F\xA8\x77\x85\x7C\x1B\xAA\x89\x7C\x07\xEF\x5D\x0F\x7A\x07\xEF\x5F\x03\x92\x91\x3B\x94\x9D\x8C\x91\x58\x96\x99\x8E\x96\xC1\x60\x03\x94\x92\x29\x89\x92\x99\x98\x64\x81\x41\x0B\x97\x12\x95\x90\x9A\x78\x5C\xA3\x72\x08\x9A\xFB\x7A\x7A\x92\x9A\xCA\x63\x00\x9F\x9C\x57\xAD\x9A\x9F\x9A\x00\x37\x01\x85\x42\x04\x3E\x4C\x60\x5E\x38\x53\x7A\x5E\x4F\x86\x82\x41\xA0\x5E\x92\x6A\x4C\x98\x67\x09\x7B\x5B\x5B\xA0\x6B\x45\xAA\x43\xA2\x6B\x4D\xAE\xA0\x4E\x90\x86\x42\xA7\x6A\x94\xAB\x66\xA4\xA0\x88\x8A\x4F\xA6\x73\x89\x81\x48\xA7\x6A",
			"\x9A\x80\x0D\xA8\xA7\xA6\x82\xAE\x4F\xA8\x06\x6B\xAE\x71\xAB\xAF\xA4\x4D\xA7\xA1\x78\x61\xAE\x70\xAD\x03\x76\xAC\x99\xAA\x00\x27\xA3\xB3\xA5\x3E\x6D\xA4\xB0\xAC\x91\xB2\xA4\xA0\x49\xC4\x82\xB7\x7A\xB2\x3E\x7B\xA2\x42\xB1\xE7\x7E\xAC\x98\xB0\x8A\xA5\xAE\xA0\xA8\xB3\x90\xB1\xAC\x5E\xC4\x98\xBC\xB7\x42\xDE\x9F\xBC\x9A\xB6\xE7\x78\x4C\xB8\x4E\xEE\xA1\xB1\x4B\xBB\xF0\xA1\x46\xB5\x40\xCB\xBA\xA3\x97\xBD\xAE\x95\xBF\x9F\x5A\xFC\xB9\xA6\xBF\xBE\xFF\xAB\x61\xC2\xBF\x28\xAC\x92\xB5\xBD\x21\x4B\xCC\xC2\x46\x0E\xCF\xC8\x45\xC4\x12\xDC\x7A\xB9\x40\xD4\x8D\xB4\xA9\x42\xEC\x90\x6B\x67\x67\x0D\x4A\x42\x6D\x42\xD1\x49\x4C\x02\x42\x16\xD7\xCE\xC6\xA3\x2A\x2F\x7C\x44\x68\x17\xC0\x0B\x0A\xCB\x20\xF1\xCC\x08\xCD\x26\xEF\x7D\x08\xCE\x06\x60\x71\xCE\x0B\x3C\xC3\x4E\xCF\xC5\x2F\x01\xD2\x41\x7F\x7C\x4A\x40\x0E\xD1\x01\x54\x01\xCC\x00\x31\x0C\xD0\x02\xD3\x31\xF2\x0F\x79\xAB\x42\xB1\xC3\x0F\x7B\xC4\x8E\x91\xCC\x0D\xEF\x58\xBC\x91\xCC\x35\x2F\x72\xB6\x8D\x31\xF6\x0F\x78\x09\x4F\xC4\xBF\xD1\xBF\x71\xA6\x74\xB1\xAB\x2B\x77\x93\x98\xBA\x1C",
			"\xED\xD6\xDD\x99\x00\x2C\xBE\xDB\xB8\x06\x42\xC5\x71\xDD\x79\xC9\x4C\xBC\x9F\x2B\xA3\x7B\xC8\x00\x87\xE9\x99\x9C\x47\xFC\x92\xBC\x46\xB4\xE6\x87\x9A\x40\xBF\x7F\xC6\xEB\xDC\xC6\xEF\x70\xC5\xAF\xD3\x9E\xFC\xA8\x9D\x6F\xA1\xC2\x49\xE6\x41\x25\xC1\xEA\x73\xDC\x21\xE4\xCF\xD3\xC9\x09\xF2\x97\xDC\x74\x05\xDF\xB9\xC9\x64\xCA\x58\xBD\xA9\xEA\x03\x77\xE6\xEA\xE3\x5B\x9C\x40\xEE\x41\xBE\xDB\xA6\xE5\x9C\xC5\xC0\x03\xCB\xC5\x43\xE2\xE3\xEE\x79\xC9\xE7\xE3\x41\x7D\xB1\xE6\x72\xB5\xAB\xCD\xC2\x4B\xF2\xBA\x48\xDE\xA0\xF1\x70\xD9\xF8\xBF\xD1\x86\xAA\xF1\x9C\xB9\xAB\xEA\x46\x44\xF7\xC5\x1D\x95\xF7\xF2\xFA\xB5\xCE\xA4\x8A\xFB\xC3\x4B\xED\xAB\xFA\x03\x50\x84\xFF\xE3\xCA\x5D\xF9\xFF\xD3\x89\x7B\x4E\x42\x7A\x76\x20\xF7\x31\x67\x44\xDE\x71\x6D\x7E\x04\x83\x20\xE9\x42\x21\x6B\xE5\x72\x3F\xC1\x09\x24\x6B\x02\x8F\x6B\x6C\x09\x83\x75\x70\x15\x8D\x81\xA7\x52\x4B\x7F\xA4\x6F\x3C\xF9\x03\x23\x7F\x8B\x5E\x48\x84\x45\x5C\x21\x09\x83\x2D\x7D\x8B\x67\x48\x85\x59\x5C\x20\x02\x83\x2C\x5C\x8E\x2F\x48\x86\xCF\x28\x35\x04\x83\x23\x86\x81\x3C\x77",
			"\x5B\x76\x58\x84\x47\x5B\x72\x21\x56\x7D\x81\x20\xF8\x7F\x58\xDB\x42\x8A\x21\x1F\x9C\x71\x21\x47\x80\x03\x0A\xDF\x55\x05\xCD\x40\x03\x78\xB8\x69\x20\xDA\x06\x2E\x45\x98\x66\x06\x8A\xE6\x30\x83\x40\x5D\x87\x63\x13\x20\x8B\x49\x0A\x24\x8E\xBA\x28\x07\x8D\xE1\x1E\x6C\x8B\x4F\x69\x05\x1B\xC5\x30\x4B\x98\x66\x3D\x5D\x6F\x70\x6D\x5B\x02\x7E\x22\xBA\x44\x71\x66\x7E\x92\x68\x00\x79\x57\x24\x42\xA1\x26\x81\xBF\x7A\x6E\x22\xB1\x65\x73\x93\x0D\x91\x24\xD8\x4A\x25\x24\x9C\x23\x92\xC0\x57\x64\x62\x1F\x38\x90\xC4\x6F\x64\x5F\x93\x1D\x93\x5E\x96\x94\x84\x27\xF1\x7B\x30\x97\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Plus",
			L"EqualOptional",
			L"PositiveOptional",
			L"NegativeOptional",
			L"Alternative",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Plus] BEGIN ",
			L"[1][Plus] END [ENDING]",
			L"[2][Plus]< \"+\" @ >",
			L"[3][EqualOptional] BEGIN ",
			L"[4][EqualOptional] END [ENDING]",
			L"[5][EqualOptional]< \"optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[6][EqualOptional]< \"optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[7][EqualOptional]< \"optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[8][EqualOptional]< \"optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[9][PositiveOptional] BEGIN ",
			L"[10][PositiveOptional] END [ENDING]",
			L"[11][PositiveOptional]< \"positive_optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[12][PositiveOptional]< \"positive_optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[13][PositiveOptional]< \"positive_optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[14][PositiveOptional]< \"positive_optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[15][NegativeOptional] BEGIN ",
			L"[16][NegativeOptional] END [ENDING]",
			L"[17][NegativeOptional]< \"negative_optional\" @ [ Plus ] \"+\" { Plus } >",
			L"[18][NegativeOptional]< \"negative_optional\" [ Plus @ ] \"+\" { Plus } >",
			L"[19][NegativeOptional]< \"negative_optional\" [ Plus ] \"+\" @ { Plus } >",
			L"[20][NegativeOptional]< \"negative_optional\" [ Plus ] \"+\" { Plus @ } >",
			L"[21][Alternative] BEGIN ",
			L"[22][Alternative] END [ENDING]",
			L"[23][Alternative]< \"alternative\" @ >",
			L"[24][Module] BEGIN ",
			L"[25][Module] END [ENDING]",
			L"[26][Module]<< !Alternative @ >>",
			L"[27][Module]<< !EqualOptional @ >>",
			L"[28][Module]<< !NegativeOptional @ >>",
			L"[29][Module]<< !PositiveOptional @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<FeatureTestTokens, ModuleParserStates, FeatureTestAstInsReceiver, ModuleParserStateTypes>(&FeatureTestTokenDeleter, &FeatureTestLexerData, &FeatureTestModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		static vl::vint32_t results[5][5] = {
			{0, 1, 1, 1, -1, },
			{1, 1, 1, 1, -1, },
			{1, 1, 2, 1, -1, },
			{1, 1, 1, 3, -1, },
			{-1, -1, -1, -1, 4, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<featuretest::Feature> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
