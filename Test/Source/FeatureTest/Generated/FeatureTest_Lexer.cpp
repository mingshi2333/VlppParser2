/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"BRANCHED_OPTIONAL",
			L"ENTRY_RULE_PRIORITY",
			L"PREFIX_BEFORE_AMBIGUITY",
			L"PREFIX_WITH_AMBIGUITY_1",
			L"PREFIX_WITH_AMBIGUITY_2",
			L"PREFIX_WITH_LEFTREC",
			L"PLUS",
			L"LT",
			L"GT",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"prefix_with_leftrec",
			L"+",
			L"<",
			L">",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"prefix_with_leftrec",
			L"/+",
			L"/<",
			L"/>",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1049; // 24371 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 25;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x33\x5F\x00\x00\x11\x04\x00\x00\xB1\x00\x01\xA1\x01\x84\x81\x80\x10\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\x87\x86\x84\x8B\x14\x88\x83\x18\x17\x84\xB2\x1A\x84\x84\x1D\x8E\x82\x3E\x20\x84\x9F\x23\x94\x81\x30\x93\x04\xE2\x29\x84\x83\x34\x94\x82\x32\x2F\x84\xA5\x32\x94\x86\x31\x9A\x82\x67\x38\x84\x88\x3B\x9C\x81\x34\x9F\x04\xEC\x01\xA4\x8D\x34\xA0\x82\x37\x47\x84\xAF\x2A\xA4\x80\x39\xA6\x82\x72\x50\x84\x93\x33\xAC\x80\x3A\xAB\x04\xF5\x19\xA4\x86\x3C\xAC\x83\x3B\x5F\x84\xB8\x22\xB4\x81\x3D\xB2\x85\x01\x89\xA9\xA8\xB0\x06\x00\x83\x7F\x70\xF1\xB0\xA7\x04\x80\x07\xB6\xB9\x71\x84\x37\xB8\xBF\x7D\x03\xBC\xBE\x80\x81\xC3\x04\x81\x04\x82\x01\xBF\x81\x89\xCA\xCB\xCC\xC5\xC6\xC7\xC7\x90\x90\xCC\x81\x81\xCD\xCA\xCB\xCB\x98\x99\xC0\xCB\x0F\xBC\x04\xC4\xCD\xA0\xA1\xCB\xCF\x84\xCA\xD2\xD3\xD3\xA8\xA9\xE6\xCE\x0F\xCA\xD6\xD7\xD7\x8E\x8F\x2D\xD0\xD4\xDD\xDA\xDB\xDB\xB8\xB9\xFA\xDB\xDC\xDD\xDE\xB8\x08\x04\xC0\xC1\x82\xE0\x04\xE2\xDF\xE3\xC8\xC9\xF0\xD1\x03\xDA\xE6\xE7\xC8\x12\x4D\xCF\xE0\xD3\x0A\xEB\xE9\xEB\x98\x94\x16\xF8",
			"\xC5\x0B\xEC\xEC\xB8\x16\x5E\xDF\xE3\xF4\xF3\xC7\x0A\xF1\x8A\xC4\xEA\xE1\xE8\xF5\xF2\xF7\xF1\x18\x6D\xEF\xF3\xE9\x0A\xFB\xF9\xDB\x1A\x76\xF7\xE7\xDB\x0A\xFF\xFD\xFF\xC7\x5C\x0E\x7C\x80\x9A\x5D\x03\x80\x81\xD7\x5E\x07\x80\x82\xAA\x5F\x0B\x80\x83\xD7\x52\x40\x00\x84\xA6\x43\x45\x68\x85\x18\x91\x62\x0B\x83\xE3\x63\x0C\x85\x86\x9A\x64\x0F\x84\x88\x24\xAA\x65\x0B\x88\xF3\x66\x08\x89\x89\x8D\x67\x0B\x88\x8B\x18\xA8\x0F\x8A\x73\x29\x33\x80\x8E\x0A\x36\xB0\x84\x6D\x45\x17\xBA\x8F\x60\x0B\x39\xBE\x87\x65\x0B\x41\x82\x96\x90\x5E\x2E\x05\x91\x67\x0B\x4A\x87\x9E\x91\x5C\x30\x0D\x9F\x60\x46\x3D\x8F\x9F\x7B\x46\x55\x96\x9A\x8F\x0C\x52\x94\x84\x0D\x97\x10\xB5\x00\x98\x8B\x36\x23\x96\x6B\x0D\x66\xA2\x68\x0D\x9A\x5A\xA6\x6B\x0C\x41\x39\x04\x4A\x0C\x9B\xBD\x5E\x49\x95\x9B\x78\xB1\x5D\x0C\x9D\x79\x98\x71\x4B\x9D\x7D\x8F\x7F\x0C\x9F\x81\x80\x60\x10\xA1\xBE\x41\x18\xA1\xA1\xBD\x42\x1B\xA1\x89\x43\x0F\xA7\x70\x11\x92\xA4\x75\x11\xA5\x8C\x9A\x66\x10\xA6\x6D\x87\x1C\xA7\x71\x48\x1F\xA9\xA6\x66\x49\x22\xA3\x7A\x12\xA6\xAD\x9B\x11\xAA",
			"\x04\x8C\x1C\xAB\x6B\x4D\x2F\xA5\xA2\x13\xB2\xB4\x6F\x11\xAD\xA3\x80\x60\x14\xAE\xF3\x51\x1C\xAD\x6F\x52\x3F\xAD\x9B\x14\xC2\xBB\x64\x15\xB1\xF3\x55\x18\xB3\x69\x56\x0B\xB9\xAF\x63\x57\x0E\xB0\x5C\x16\xD2\x8F\xB7\x69\x16\xD5\x89\x7A\x14\xB2\x5B\x19\xB6\xB5\x68\x5C\x1E\xB7\x6D\x17\xE2\x90\x8E\x15\xB9\xD3\x64\x40\xA3\xB7\x98\x60\x18\xB8\x6E\x27\x6B\xBF\xB6\x4A\xF2\xAC\xB0\x5D\x4B\xF5\xB6\xB0\x4D\xBE\x97\x73\x4C\xBE\xBD\x8A\x76\x4F\xBC\xC0\xA0\x79\x43\xC2\xBD\x3C\x47\xC4\xC1\x62\x3F\x4A\xCB\xC0\x60\x6A\x2F\xB4\x8B\x1A\x12\xFA\x62\x52\xC3\xE5\x45\x58\xC7\xC3\xC9\x48\x5B\xC7\x93\x4B\x5F\xCC\xC7\x6B\x4E\x62\xC5\x79\x1C\x15\xE3\xCD\x61\x54\x26\xCF\xC4\x55\xCB\x42\x97\x50\xCD\x9B\x5A\x73\xCA\xC8\x5F\x5D\x76\xC4\x78\x58\x3A\xCB\xC3\x59\xCF\x37\xFC\x56\x58\xD0\x41\xCC\x6A\x1D\xCA\xB8\x7B\x18\xD2\x68\x7C\x0B\xDE\x6D\x1F\x4E\xD9\x8E\x1D\xD4\xC8\x7F\x15\xC4\x20\x54\xC7\x91\x21\xD6\xAF\x42\x2C\xD5\x86\x83\x3C\xA4\x23\xD7\x45\xE3\x75\x20\xD9\xB7\x46\x28\xDA\x6E\x87\x2B\xD5\xA0\x22\x6E\xCF\x69\x21\xDC\x70\x4A\x24\xDF\x75\x8B",
			"\x37\xDF\x7C\x23\x7A\xCB\x6D\x21\xDF\xBB\x4E\x20\xE0\x6A\x8F\x03\xE0\x64\x24\x86\xDA\x61\x25\xE2\x65\xC7\x72\x24\xE3\xF3\x53\x25\xB8\x25\x90\xCD\xEE\x8D\x25\x95\xDA\x66\x25\xE6\x96\xD3\x77\x24\xD7\x98\x1C\xE8\x69\x26\x90\xDA\x22\xE8\x8B\x9B\x27\xE6\x64\x27\xAA\xF7\x6D\x25\xEB\xFF\x1E\x20\xEC\x63\x9F\x33\xED\xE4\x28\xB6\xCE\x61\x29\xEE\x9D\xE9\x62\x28\xEF\xFF\x63\x2B\xD8\x29\xC0\xCB\x65\x29\xF1\xA2\x66\x2F\xAB\x29\xC8\xE4\x78\x29\xF3\x81\x69\x20\xF4\x72\xAA\x0F\x8B\x28\x41\xAC\x13\xF9\x65\x2B\xDA\xF8\x5E\x29\xF7\xBD\xE1\xF2\xFA\x95\xAF\x20\xF1\x5C\x2C\xE6\xE3\xF8\x84\x30\x03\x05\x63\x71\x41\x05\x76\x52\x09\x00\x22\x9C\x21\x00\x40\xF0\xC5\x7C\x7B\xFB\xFC\xFA\xF1\x42\x67\x01\x24\x34\x00\x2C\x31\x20\xD9\x3D\x7B\x3D\x07\x9B\x7C\x00\x06\x8E\x7F\x06\x88\x86\x81\x0A\x8F\x82\x04\x91\x84\x83\x04\x96\x80\x82\x17\x93\x81\x06\x95\x88\x83\x06\x85\x22\x83\x1D\x80\x86\x08\x9C\x83\x85\x0D\xA6\x81\x84\x24\x89\x87\x09\xA5\x88\x85\x15\xAA\x85\x85\x30\x8C\x86\x0C\xAF\x8F\x81\xC1\x2E\x87\x86\x31\x8A\x82\xFB\x30\x87\x31\x0B\xAE\x28",
			"\x87\x33\x81\x20\x67\x17\x84\x2E\x20\xB4\x87\x85\x76\x2B\x2D\x40\x13\x3D\x82\xBD\x01\x26\x2F\x01\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
