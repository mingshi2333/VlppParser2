/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"BRANCHED_OPTIONAL",
			L"ENTRY_RULE_PRIORITY",
			L"PREFIX_BEFORE_AMBIGUITY",
			L"PREFIX_WITH_AMBIGUITY_1",
			L"PREFIX_WITH_AMBIGUITY_2",
			L"PREFIX_WITH_LEFTREC",
			L"CONDITIONAL_LITERAL",
			L"FIELD_ASSIGNMENT",
			L"PLUS",
			L"LT",
			L"GT",
			L"ID",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"prefix_with_leftrec",
			L"conditional_literal",
			L"field_assignment",
			L"+",
			L"<",
			L">",
			nullptr,
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"prefix_with_leftrec",
			L"conditional_literal",
			L"field_assignment",
			L"/+",
			L"/<",
			L"/>",
			L"[a-zA-Z_]/w*",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2212; // 34591 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 164;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x1F\x87\x00\x00\x9C\x08\x00\x00\xD6\x00\x01\xA7\x01\x84\x81\x82\x12\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x8B\x14\x88\x82\x18\x17\x84\xB1\x1A\x84\x82\x19\x8E\x82\x33\x04\xB9\x04\x8C\x1C\x90\x82\x1F\x27\x84\x81\x24\x8A\x2C\x83\x2E\x97\x04\xE1\x31\x84\x82\x34\x98\x83\x31\x37\x84\xA4\x3A\x94\x85\x31\x9E\x82\x66\x40\x84\x87\x33\xA4\x80\x34\xA3\x04\xE9\x09\xA4\x8A\x34\x83\x34\x82\x6C\x50\x84\x8D\x33\xAC\x82\x36\xAB\x04\xEF\x19\xA4\x80\x3C\xAC\x83\x38\x5F\x84\xB2\x22\xB4\x83\x39\xB2\x82\x74\x68\x84\x95\x3B\xB4\x82\x3A\xB7\x04\xF7\x31\xA4\x88\x3C\xB8\x83\x3C\x77\x84\xBA\x3A\xB4\x84\x05\xBF\xBF\x01\xFE\x81\x88\x04\x87\x7E\xC3\xC3\x88\x89\xFF\x69\x81\x84\x85\x81\x05\x04\x90\xCF\xC4\x84\x04\x82\x03\xC8\x04\x85\x04\x87\x08\xCB\xCA\xCE\x00\x92\xA0\xDD\xC0\x03\x04\x81\x00\x82\x02\x23\xE1\xCB\xDA\xD5\xD7\xCF\xD0\x8A\xB1\xF2\xC7\xCE\x04\x81\xDB\x80\xB7\x80\x39\xD2\xD9\xDD\xDE\xDB\xDF\xB8\xC0\xFA\xC2\xEE\xD9\xE2\xE3\xE1\xC7\xB9\xCF\x89\xE4\xE5\xE4\xE7\xE7\x00\x33\xD2\xE9\xC5\xE0\xE6\xEA\xDE\xCE\xD6\xD5\xFB",
			"\xE9\xEC\xEF\xE3\x07\xD9\x90\x1D\xE3\xF0\xEB\xEA\xF3\x7F\xDE\xD7\xF1\xC9\xF9\xF1\x08\xF2\xED\xEF\xEC\xF1\xF3\xF1\x87\xF3\xE8\xF9\xF5\xEB\xF4\xF0\xF0\xE8\xFC\xFF\xFF\xB9\x52\x0B\x7E\x7F\xF6\x52\x74\x82\x7E\xFD\x43\x8A\x81\x40\x13\x0B\x80\x83\x7E\x05\xB3\x67\x82\x62\xFE\x55\x8E\x81\x6E\x14\x17\x8E\x81\x84\xD8\x49\x89\x7C\x85\x1A\x9E\x80\x01\x05\x21\x8F\x82\x8B\x84\x1C\xA9\x8A\x8B\x8A\x2C\xAD\x8E\x8B\x8B\x30\xB1\x82\x8F\x8C\x34\xB5\x86\x8F\x8D\x38\xB9\x85\x8C\x8A\x88\x56\x87\x89\x89\x3E\xA6\x82\x93\x6E\x87\x56\x04\x42\x91\x01\x48\x90\x02\x92\x3A\x8D\x9E\x93\x93\xF6\x7C\x84\x6C\x90\x54\xBF\x87\x73\x05\x25\xAF\x82\x96\x61\x41\x9D\x95\x97\x90\x1B\xAE\x8B\x94\x7A\x5F\x9E\x96\x96\x75\x18\x1F\x9A\x97\x7B\x1D\xA0\x97\x71\x06\x65\xB1\x97\x9B\x9A\x22\xAD\x96\x9A\x75\x1A\x32\x9F\x7F\x06\x6A\xA2\x9C\x98\x82\xD6\x5C\x0A\x9F\x9D\x84\xBF\x9D\x8B\x98\x85\xA7\x99\xA3\x7F\x1D\x19\x9E\x9D\x9D\x80\x8B\xA7\x9E\x07\x83\x86\xAC\x88\xA2\x0E\x9F\x05\xA6\xA2\x8E\x86\x6A\x93\xA7\x47\x85\x60\x97\xA8\xA4\x90\x98\xA4\xA7\x67\x92\x48\xAA\x9B",
			"\xAC\xA9\x74\x9E\x90\x76\xBA\x91\x0B\xA6\xAD\x99\x7F\xAA\xAB\x91\x8E\x82\x08\xAD\x92\xB6\xAF\xA0\xAC\xB9\x81\x43\x08\xAF\xC4\xB3\x9F\xAC\xAE\x20\xAB\xAD\xAE\xB2\x04\x64\x0D\xA7\xA5\x96\xBD\x85\xB2\x90\x25\x13\xB5\x77\xAD\xBE\x89\xB5\xAC\xB3\xDC\x80\x07\x41\xB7\xD7\x87\xB9\xB4\x75\xFB\x43\x40\xBA\xB5\xD1\xAA\x87\xAB\xB6\xEC\xB9\x68\x08\xBA\x90\x87\xA9\xB8\x97\xF0\x82\x99\x09\xBD\xD8\xA5\x71\xB1\xBB\xF5\xB9\x6A\x0B\xB3\x2B\xAB\xBB\xB2\x75\x15\x67\xB6\xC3\x7F\xF9\x88\xCB\xBF\xC0\x0C\xC2\x7C\x08\xC0\xEA\xB3\xB4\x9B\xAA\x2D\x3D\xBA\x9D\xC2\xE1\x9A\xB9\x7A\x0B\x16\xC7\xC8\xB0\xB4\xF1\xA4\xBE\xC5\xC7\xAC\xAF\x02\x70\xC6\x27\xCB\xCF\x94\x46\x23\xED\xC1\x76\xB8\xFA\x9A\xCF\x7B\x46\x2E\xCD\xC6\xB2\xBC\x21\xD2\xB5\xCF\x7E\x1E\x7B\xC9\xCD\xC4\x3F\xF4\xBE\xCC\x00\x21\x43\xDB\xA0\xCA\xC7\x71\xA6\xD0\xC9\x34\x23\xB1\xC2\xC4\x36\xD6\x75\x0C\xC9\x63\x91\x82\xC3\x7B\x36\x14\xD7\xC4\xCC\x0A\xF2\xC7\xC3\x0D\x5A\xF7\xC0\xC8\xB0\xDA\xB8\x01\xD8\xBF\xDD\x88\xDA\x7A\xD7\x68\xED\xD7\x9F\x48\x69\xDC\xD9\xC6\xC8\x00\x3A\x07\xD9\xD4\x1F",
			"\xCF\xD1\xD3\xC4\xD6\x7B\x07\xDF\xB4\x6A\xC4\x9C\xD8\xDE\xD3\xA5\x42\xDA\xDE\x64\xF4\xDD\x0F\xDF\x4B\xC9\xD2\xDD\xCA\x83\xCC\xEC\xB8\x4A\x87\xC0\xD9\xE2\xCE\x00\x3F\x02\xE4\xE1\x8E\xF8\xC7\xE7\x94\xAB\x80\x1B\xE5\x98\x9E\xF9\xD0\xEA\xDB\xD3\xAB\x4E\xC9\xE0\xA2\x91\xE7\xC2\x10\xA3\xDD\xE3\xDA\xE9\x42\xD6\x73\x11\xEC\xA8\xF1\xC3\xEE\xD3\xA7\xDC\xE6\x74\x11\x92\xEC\xEF\x84\xDD\x41\x85\x18\xED\x90\xC2\xEF\xCE\xE8\x00\x46\x07\xFF\x7B\x11\x12\xD6\xD0\xD6\x83\x48\x0E\xF5\xE5\x8A\x57\xCD\xEF\x7F\x12\x04\x49\x14\x42\x12\x80\xCF\xE2\xEC\xE6\xFE\x4C\x16\xF4\xBB\xC9\xCA\xD9\xEF\xFA\x41\x8D\x14\xEB\xEE\xBA\xE4\xF7\xDA\x13\xF8\xA2\xFB\xD8\xF1\xE7\xF9\x6F\x11\x9F\xA5\xFC\xE5\xEE\xEF\x00\x8F\x7C\xE2\x34\x7C\x6E\x28\x39\x7B\x6B\xFD\x71\x7D\xEF\x7B\x31\x0B\x03\xBB\x6A\x7A\x7B\x7E\x76\x14\x67\x79\x7C\x40\x53\x0E\x81\xEC\x6D\x74\xFC\x5D\x68\x7E\xED\x7E\x3C\x0A\xE1\x69\x80\x07\xF2\x7E\x83\xEC\x15\x0D\x7E\x22\x93\x6C\x09\xAC\x56\x0A\x0C\x84\x80\x82\x9F\x75\x77\x15\x2E\x8C\x7F\x0D\xAA\x83\x81\xDA\x78\x09\xF0\x76\x72\x71\x0E\x99\x87",
			"\x4C\x59\x04\x65\x05\xCB\x71\x81\x55\x6D\x27\x60\x43\x9E\x85\x11\xFF\x3B\x0A\x14\xB6\x80\x72\x4A\x9B\x3C\x17\x34\x83\x7C\xCB\x44\x83\x89\x51\x7D\x08\xC4\x58\x73\x7B\x12\xA2\x46\x0B\x4E\x83\x82\xFF\x7C\x68\x8B\x2F\x6F\x21\x6E\x29\x90\x8B\x0A\xE5\x8B\x54\x30\x35\x82\x8C\x0A\x9F\x7D\x89\x32\x2E\x8B\xF5\x49\x8B\x8D\x24\x75\x25\x1D\xF7\x88\x86\x56\x78\x25\x8E\x51\x7C\x8E\x1C\x81\x2B\x26\x40\x82\x8C\x87\x1A\x98\x8F\xC1\x3E\x26\x91\xEB\x5C\x41\x7B\x3F\x8D\x6D\x50\x5A\x72\x90\x32\xA7\x6C\x28\x7B\x88\x93\xF0\x0A\x9D\x6D\xA3\x0D\x90\x7D\x9A\x8A\x79\x14\x9F\x99\x36\xA5\x14\x91\x94\xEA\x63\x61\x53\x24\x91\x7B\x02\x50\x93\x60\x4F\x2C\x97\x03\xAE\x9D\x8A\xEB\x11\x2A\x96\x91\x8F\x84\x2D\x91\x88\x76\xAA\x27\x91\x8D\x55\x95\x77\x55\x38\x9C\x8C\x51\xB0\x8B\x84\x7D\x9E\x76\x56\x44\x99\x90\x2B\xA3\x8B\x60\x5D\x2C\x9A\x23\xB0\x87\x8A\x2A\x96\x38\x2C\x68\x8F\x89\x30\x96\x92\x9B\xFF\x23\x2B\x75\xA8\x80\x52\x59\x5D\x9B\x89\x4A\x85\x9B\x60\x69\x39\x9B\x31\xB7\x83\x91\x5C\xBB\x3C\x2D\x99\x80\x9B\xFD\x1C\x97\x9D\xFD\x2F\x2A\x9D\xCE\x91",
			"\x8C\x37\xEE\x93\x68\xB9\x38\x9C\x8B\xBC\x84\x9F\x7E\x75\x2F\x9F\x47\xB5\x95\x9E\xD0\x38\x2F\x2F\xDA\x93\x9F\xD3\x7B\x2A\xA0\x0B\xAB\x9E\x1A\xC9\x95\x5F\x3D\x07\x92\x9E\x3D\x94\x9D\x89\x7C\x04\x83\x70\x84\x89\x3B\x7D\x16\x98\x3B\x86\xA1\xA0\xEB\x3E\x0C\x56\x7F\x1B\x84\x46\xCD\x9D\x9D\x81\x40\x15\xA3\x2B\xBB\x90\x45\xF5\x81\x11\x8B\x8C\xA1\xA3\x33\xAB\x7E\x20\x30\xA7\xA6\x96\xBB\x9B\x60\x83\x1C\xA6\x44\xDB\x9E\x76\x42\x02\xA9\x9F\xC8\x8D\xA4\xEE\x05\x18\x81\x9E\xB2\xA2\xA9\x43\x66\x12\x4A\xCE\xA6\x99\x9C\xBE\x77\x10\x67\x66\x9E\xE4\x08\x11\x8C\xA4\xA3\xA1\x37\x89\x02\xA7\x16\xA4\xA1\x87\x9F\x93\x5A\x11\x59\xBE\xA3\x28\xC2\x4B\x10\xB1\x9B\x9C\x9A\xCF\x92\x70\x23\x5D\xA0\xA1\xB2\x95\x3D\x11\x6E\xA0\x95\x4C\xD5\xA0\xAA\x7E\xBE\xA9\x37\x8E\x10\x42\x5A\x9A\xA0\xA2\x21\x4F\x12\xB0\x7B\xA9\x94\xC9\x10\x14\xAE\xB2\x95\x9B\x68\x91\x07\xA9\x5D\x8F\xBE\xAE\x49\x12\xB6\xB1\x71\xAB\x57\x24\x79\xA8\xA7\xC9\x99\xB7\xAF\xEF\x34\x12\x4D\xC3\xAD\xA1\x76\x95\x14\xB3\x88\xB4\xAA\x62\x81\x26\x12\xD4\xB3\x91\x4A\x07\xAE\x43\x25\x79",
			"\xAA\xAA\x5C\x98\x13\xB4\x5E\xB3\xA1\x5F\xD1\x69\x13\xA9\xA4\xB5\xB3\x66\xA2\x46\x26\x2E\xBC\xAE\xCC\xBA\x9F\x4E\x9B\x04\xB9\x6D\xA0\xB2\x44\x4E\x38\xB6\xB3\xC7\xB2\x71\x27\x0D\xB0\xAF\xE8\x85\xB6\x3F\x9E\x03\xAD\x75\xC9\xA1\xB8\xE6\x96\x3F\x13\xCF\xA6\xB8\x77\xD5\x30\x14\xE2\x95\x6B\x97\x76\xA4\x65\x28\x69\xA9\xB0\x95\x47\x62\x14\x97\xBB\xBB\x57\xF9\xA3\x14\xED\xA8\xBC\xB2\xB9\x24\x16\x79\xAD\x90\xB7\x92\x88\xA6\xBB\xBA\x9D\xBD\x7A\x81\x25\x15\xFD\x93\x9F\xBE\x9F\xA6\x16\x81\xAC\x5B\xB9\xDC\x27\x13\xC1\x01\xC7\x3F\x2B\xB8\x78\x15\xA6\xBF\xB6\xA7\x77\x49\x16\x72\x83\xB6\xAB\xF3\x6A\x16\xBE\x02\xD8\xBF\xB4\x2B\x1E\xB7\xDC\x84\xA9\x3B\xAC\x10\xC2\x6E\xE2\xB3\xBF\x83\x6D\x16\x9A\x0D\xC7\x7E\x2B\x16\xC6\xC5\xD2\x9D\xB9\x6A\xAF\x05\xC4\x74\xE3\xB2\x72\x58\x14\xB8\xC1\xD6\xA0\xC3\x7B\x31\x1F\xC7\x10\xDF\xB3\x89\xB2\x1A\xC4\x8B\xAB\xCE\x77\x59\x31\xB8\xC8\x3C\xD7\xBA\x70\x34\x14\xC7\x1D\xED\xC2\xC8\x85\xB1\xC6\x94\xC3\x6A\xCB\x48\xB5\x17\xC9\x46\xC1\xCB\x7F\x8B\x56\x16\x01\xB5\xC0\xB8\x77\x57\x17\x86\xED\xBF\xA3\x2D",
			"\xF6\x8C\xC3\xBB\xA4\x64\x2E\x21\x8A\xB4\xF7\x98\xCF\x3F\xB9\x14\xCF\x85\xCF\xA7\xC6\x15\xEF\xA8\xCA\x57\xC3\xCE\x83\x3A\x10\xC4\x09\xF1\xB1\x20\xBB\x1E\xCC\x77\xF2\xBC\xC9\x2F\x7C\x10\xC6\x70\xDD\xCD\xB7\x3D\x10\xCC\x43\xFE\xB9\x3B\xBE\x0A\xD1\x97\x82\xD7\x4D\x5F\x05\xD6\x3C\x13\xCE\xCD\x6E\x40\x1F\xD3\xFB\x07\xD7\xCE\xC5\x81\x1B\x8A\x8C\xD7\xC5\x3A\x82\x1A\xC9\xAC\xD6\xC4\xA7\xEB\x73\x18\x33\xD6\xCD\xD1\xA2\xD9\x38\x31\x25\xD6\x41\x53\xF3\xD5\x9C\x91\xDE\x75\x31\x15\xD0\xD4\x5F\xDF\x4E\x18\xC4\xC6\xD7\xA5\xB9\xD0\x9C\x36\xEB\xAF\xD7\xB4\x5B\xD3\x97\x47\x19\xD9\x5E\xCB\xD8\xD5\xF5\x48\x1B\xAA\x80\xD8\xD6\x6C\xD0\x39\x19\x45\xD6\xD3\x80\xDE\xDF\x3E\x65\x21\xDD\xD8\xD7\xD0\xDA\x88\x4B\x1C\xD6\x09\x75\x94\x19\x8A\xD1\xC0\xBA\xE3\xDF\xBF\x66\x21\xB9\xD6\x68\xC7\x6E\x33\x77\xDC\xDB\x56\xE4\xDD\x98\xCF\x1B\xDA\x80\xD0\x14\x21\x68\x1D\xDA\xDD\x77\xDD\xCA\x34\x71\xD2\xE0\x71\xE2\xC1\x20\xD3\x0C\xE3\x9F\xE1\xC1\xCB\x7F\xEC\xBD\xCE\x6D\xD6\xE1\x44\xE7\xC8\xC2\x89\xE5\xA8\xDF\x1D\xF5\x8C\x35\x30\xDD\xDE\x59\xF5\x5D\x1A",
			"\x24\xF4\xE1\xA0\x9E\xE3\xA4\x90\xFC\xC8\xE1\xC5\x88\x32\x3F\x30\x4F\x06\x80\x05\x21\x20\xEE\x38\xE4\x41\x39\xE0\x00\x9E\xFE\xE3\xE7\xC2\x20\x3D\x40\x62\x3A\xE7\x80\x02\x45\xE8\x3D\xE0\xE8\xD2\xBF\xEB\xE8\xA5\xC0\x07\xE8\x49\xED\xEA\xD4\xD1\xE4\xEA\xA6\xD5\xEE\xE9\x56\xF9\xE8\xD6\xDB\xE3\xEA\xAD\xDD\xEC\xEB\x57\xFF\xEA\xD8\xE1\xE4\xEC\xAB\xC5\x26\xEB\x65\xE0\xEC\xDA\xEB\xEA\xED\xB6\xE3\xEC\xED\x6F\xEE\xED\xDA\xF1\xE4\xEF\xB9\xF6\xE8\xEE\x77\xF2\xEC\xDE\xFB\xEA\xEF\xBE\xF5\xED\x34\x75\xFC\xED\xE0\xE0\xEB\x38\x00\x27\x33\xEC\xA9\x33\xEB\x65\x03\xFC\xF0\xAA\xE1\x36\xEA\x9C\x21\x32\xDF\xF9\xE5\xEE\xC2\x01\x24\x31\x00\x0E\x30\xD9\x95\x31\x20\xCD\x01\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
