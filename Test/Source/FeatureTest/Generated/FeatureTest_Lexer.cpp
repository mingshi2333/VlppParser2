/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"PLUS",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"+",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"/+",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 564; // 7616 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 52;
		static const vl::vint dataSolidRows = 2;
		static const vl::vint dataRows = 3;
		static const char* compressed[] = {
			"\xC0\x1D\x00\x00\x2C\x02\x00\x00\x5D\x00\x01\x93\x01\x84\x81\x82\x08\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x8B\x14\x88\x83\x2F\x17\x84\xA1\x3A\x84\x84\x31\x8E\x82\x65\x20\x84\x87\x33\x94\x81\x34\x93\x04\xEC\x29\x84\x8E\x34\x94\x83\x37\x2F\x84\xB0\x32\x94\x83\x39\x9A\x82\x74\x38\x84\x96\x3B\x9C\x81\x02\x9F\x40\x81\xBF\x81\x84\x04\x83\x7F\xA3\x48\xC9\x8A\xAB\xAC\xA3\x00\x83\x00\x04\x82\x06\xAC\xA4\xAD\xAA\xAB\xAB\x58\xD9\xBF\x66\x03\xAA\xAE\xAF\xAF\x60\xC9\x87\x1D\xA1\xB5\xB0\xAC\x04\x64\xE6\xAA\xAB\xBC\xB5\xB7\xA3\x84\x01\xF0\x80\x12\xB2\xBE\xB6\xBB\xBB\x78\xE1\x8C\x81\x89\xBD\xBD\xAB\x05\x69\xFE\x98\xAC\x01\xC2\xAF\x86\xBE\x57\xF4\x8A\x91\xB5\xC2\xC2\xC6\xBC\x0E\x0D\xCF\xDD\xBF\x02\xCB\xC8\xAC\x10\x16\xD7\xDB\xC9\xB9\x0A\xCC\xCE\x57\x87\x88\xC0\xD4\xD0\xA7\x81\xD1\xA5\xF8\x94\x1F\xC8\xBD\x08\xD7\xD4\x8E\x96\x2F\xD0\xDC\xA7\x0B\xD8\xDA\x59\x98\x37\xD4\xD9\x0B\xDC\xDD\xA5\x1A\x3E\xFF\xC3\xEA\xA3\x0E\xE0\xE2\x4A\x9C\x07\xE9\xAD\x0B\xE4\xE4\xBB\x1E\x4E\xDC\xDF\x02\xE8\xE6\x88\xD4\xCF\x8F\xE3\x04",
			"\x81\x14\x82\x11\xEA\xD9\x9B\xE4\x00\xF3\xE5\x10\xF3\xF0\x7D\xA6\x27\xE5\xD7\x13\xF5\xB6\x14\xEE\xE8\xD6\xA9\x11\xF9\xD6\x15\xFA\xE8\x95\x98\xF2\xF5\xAC\x14\xFD\xAF\x2D\x3F\x7C\x7D\x52\x2E\x02\x8C\x67\x0B\x06\xAA\x50\x0D\x82\x97\x71\x0C\x81\x59\x32\x0F\x83\x81\x58\x33\x12\x8E\x60\x0D\x16\xA6\x55\x0D\x86\xB0\x76\x0C\x85\x5F\x37\x1F\x8A\x50\x0E\x22\xB8\x59\x0D\x89\x93\x7A\x08\x89\x58\x3B\x2B\x8E\x58\x0F\x2E\x97\x6D\x0D\x8C\x6C\x7E\x02\x8B\x0F\x34\x93\x85\x54\x10\x39\xAA\x51\x11\x8F\x42\x3D\x86\x5B\x10\x42\x9E\x54\x11\x91\x4B\x45\x18\x90\x58\x46\x0B\x94\x57\x11\x4E\x9E\x58\x11\x94\x3A\xB8\x59\x10\x95\x59\x4A\x18\x97\x65\x4B\x1B\x97\x54\x13\x5E\xA1\x5D\x11\x98\x55\x4E\x14\x99\x95\x68\xB8\x6F\x13\x99\x4C\x50\x1C\x9A\x56\x51\x2F\x9A\x52\x14\x2E\x93\x12\x9D\x52\x54\x37\x9E\x55\x15\x7A\x87\x56\x16\x9C\x57\x3D\x9F\x3C\x16\x2E\x99\x12\xA2\x16\x82\xA6\x5B\x16\xA0\x5C\x09\xA9\x9B\x6F\x30\x12\x5C\x8C\x41\x10\x3A\x68\x04\x40\x05\x41\x48\x5A\xA6\x04\x5B\xA0\x00\x57\x01\x63\x5C\xA7\xA8\x00\x1E\xA2\xA9\xA9\x9D\xA9\xA4\xAA\xA7",
			"\xAC\xAA\xA8\xAB\xAA\xAE\xAD\xA0\xAF\xAC\xAF\xB5\xA5\x42\xAC\xB5\xB8\xAA\xAD\xAC\xBC\xB4\xAB\xAE\xAF\xBD\xB9\xA1\xB3\xAF\xC2\x80\xB6\xB0\x00\x4E\x47\xB4\xB0\x54\x01\x52\x5A\xB3\xB0\xD0\x8F\xB4\x51\x50\x00\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
