/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"BRANCHED_OPTIONAL",
			L"ENTRY_RULE_PRIORITY",
			L"PREFIX_BEFORE_AMBIGUITY",
			L"PLUS",
			L"LT",
			L"GT",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"+",
			L"<",
			L">",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"/+",
			L"/<",
			L"/>",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 924; // 19244 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 156;
		static const vl::vint dataSolidRows = 3;
		static const vl::vint dataRows = 4;
		static const char* compressed[] = {
			"\x2C\x4B\x00\x00\x94\x03\x00\x00\x99\x00\x01\x9E\x01\x84\x81\x81\x0E\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x8B\x14\x88\x82\x1E\x17\x84\xBE\x1A\x84\x87\x2D\x8E\x82\x61\x20\x84\x82\x33\x94\x83\x30\x93\x04\xE4\x29\x84\x85\x34\x94\x82\x33\x2F\x84\xA7\x32\x94\x80\x35\x9A\x82\x69\x38\x84\x8C\x3B\x9C\x81\x36\x9F\x04\xEE\x01\xA4\x8F\x34\xA0\x82\x38\x47\x84\xB2\x2A\xA4\x83\x39\xA6\x82\x74\x50\x84\x95\x33\xAC\x82\x3A\xAB\x04\xF8\x19\xA4\x89\x3C\xAE\x85\x80\x09\xE0\x9F\xA0\x06\x04\x83\x02\x82\x08\x04\xBF\x6B\xBC\xB3\xB4\x02\xB5\x6D\xEC\x85\x10\xB1\xBD\xBA\xBB\xB6\x03\x04\x81\x04\x82\x04\xBB\xBB\xBF\x80\x81\xC2\xC3\xC4\xC5\xC2\xC3\xB8\x0C\x81\x87\xCB\xCC\xC5\xC6\xC7\xC3\x0B\x7E\x8C\x1E\xBF\xC5\xCA\xCA\xB6\x0F\x8A\xD7\xDB\xCC\xCD\xCE\xCF\xC6\x0E\x14\xDF\xC3\xD4\xD5\xBB\x06\xD1\xA5\xA9\xEA\xCB\xDC\xD5\xD6\xD7\xD7\xB0\xB1\xCC\xD0\x04\x84\xD9\x80\xDB\x00\x38\xF2\xDB\xDC\xDD\xDF\xC7\x08\xA8\xBE\xC2\xE0\xC2\x09\xE3\xE1\xC2\x13\x46\xC7\xEB\xE4\xC4\x0A\xE5\xC7\x15\x4F\xFC\xD6\x02\xEC\xE6\xEB\xEB\x7F\x97\x15\xF6",
			"\xB8\xDD\xED\xDB\xED\xD8\xE1\xF2\xD8\x00\xF2\xF3\xDD\x0C\xE5\xE6\xDF\xDA\x09\xF2\xF5\xC7\x0D\xED\xEE\xF2\xF0\xDC\x09\xFB\xF9\xC2\x07\x9A\xF7\xF7\xF3\x82\xFF\xFC\xD8\x1F\x36\x7F\x7E\x6F\x12\x7E\x73\x80\x61\x21\x02\x87\x82\x7B\x22\x0A\x8D\x6F\x08\x0E\x8B\x87\x60\x09\x11\x92\x86\x87\x65\x25\x15\x88\x76\x09\x1A\x97\x86\x5F\x09\x1D\x9E\x82\x7C\x0A\x21\xBB\x69\x09\x89\x07\xAA\x08\x8A\x88\x9E\x55\x46\x80\x8B\x71\x6C\x0B\x88\x8C\x84\x6D\x03\x8C\x8D\x38\xAC\x5E\x0B\x8D\x76\x6F\x0C\x8D\x8E\x40\xBF\x30\x0F\x8F\x71\x71\x04\x91\x90\x8D\x72\x07\x90\x92\xAD\x73\x0B\x92\x79\x34\x0F\x92\x79\x0D\x52\xBB\x76\x0D\x95\x4C\xB1\x57\x0C\x96\x59\x8C\x6A\x0C\x41\x38\x04\x49\x0C\x97\xA5\x7B\x04\x99\x97\xBB\x58\x4F\x88\x9A\x22\xBD\x07\x98\x9B\x71\x5B\x4B\x98\x9C\x6B\x7F\x0F\x98\x9D\xAD\x40\x17\x9F\x7F\x41\x3B\x9B\x6A\x10\x7E\xBE\x63\x11\xA0\x78\x87\x64\x10\xA1\x38\x85\x18\xA3\x6A\x46\x0B\xA5\xA3\x3F\x47\x0E\xA9\x8C\x12\x92\xA2\x79\x11\xA5\x96\x4A\x18\xA5\x96\x4B\x1B\xAB\x64\x13\x9E\x8F\xAB\x59\x13\xA1\x8C\x7E\x11\xA9\xEA\x4F\x18\xA9\x6A",
			"\x50\x2B\xA6\x75\x14\xAE\x8D\x62\x15\xAC\xA2\x81\x63\x15\xA8\x54\x34\xA5\xAF\x65\x55\x3A\xA0\x6E\x15\xBE\xA1\x77\x15\xB0\xA3\x58\x14\xB3\x7C\x59\x07\xBC\x6E\x16\xCA\xBB\x6B\x15\xB3\xA3\x5C\x10\xB7\x63\x5D\x13\xB7\x66\x17\xD6\xA1\x7E\x47\x9C\xBB\x9B\x60\x19\xB6\x9C\x61\x4C\xB5\xB7\x82\x64\x43\xB8\xB9\x80\x67\x47\xB8\xBA\xA4\x6A\x4B\xB8\xB9\x2D\x6F\xBB\x70\x4C\xF2\xAC\xB1\x7B\x4C\xF5\x96\x76\x4D\xBE\xF6\xA2\x89\x4C\xBF\xF6\xAA\x10\xB8\x61\x6B\x03\xCE\x60\x4F\x00\xFD\xB0\x63\x4F\x09\xD6\x72\x51\xC3\x0A\xEE\x65\x50\xC4\x70\x88\x54\xC4\x8B\x71\x06\xCB\x6B\x52\x17\xD1\xCC\x62\x53\x1D\xE4\xB1\x55\xC8\xB2\x54\x54\xCA\xC7\x9C\x57\x57\xCB\x70\x77\x1A\xC8\xCA\x6F\x5A\x6B\xC4\x9D\x57\x32\xCF\xAA\x1E\xCB\x85\xBB\x18\xCF\x60\x7C\x3B\xCD\x1F\xCE\xFB\x7E\x10\xD2\x6C\x7F\x03\xDF\x64\x20\x46\xC7\x61\x21\xD2\x96\x42\x2C\xD3\xCB\xB1\x43\x2F\xD0\xD4\xEE\x44\x23\xD7\x65\x85\x17\xD4\xD7\x70\x86\x16\xB7\x22\xD6\xF7\x48\x20\xDB\x63\x89\x23\xDC\x6A\x22\x66\xF7\x5B\x22\xC1\x8C\x29\xDC\x61\x23\x6E\xDB\xDF\x66\x23\x71\xE5\x6F\x21\xDD\x86",
			"\x50\x28\xDF\x68\x91\x26\xD2\x27\xDE\x84\x53\x20\xE3\x70\x94\x04\x95\x27\xE0\x82\x56\x28\xE2\xDC\xE6\x57\x2B\xE0\x60\x98\x0F\xEC\xE3\x85\xC0\x03\x0B\x5F\x6D\x05\x7A\x50\x16\x00\x04\x10\x21\x00\x40\x99\xC0\x09\x66\xE8\x10\x41\x43\xEB\xE8\x61\x40\x09\x60\x00\x91\x41\x43\x66\xE9\xA5\xE4\xE0\xEF\xEC\xB2\xC0\x0F\xE9\xED\xA7\xF1\xE9\xEC\xED\xBB\xF8\xEA\xEF\xEF\xBC\xC0\xFE\xED\xF0\xC4\xC3\xF6\xF1\xEF\xC8\xF1\xE5\x41\xF2\xC5\xCC\xF7\xF2\xF0\xCE\xD1\xF0\xF7\xF4\xCD\xD4\xFF\xF1\xF5\xD8\xD7\xFA\xF6\xF4\xD9\xDC\xF5\xED\x5E\xDD\xD6\xFE\xF7\xE5\xB5\xFD\x55\xF1\x59\xE1\xE9\xF0\x03\x59\xEA\xDE\xF3\xE9\x5A\xC5\xEF\x51\x43\x5C\x01\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
