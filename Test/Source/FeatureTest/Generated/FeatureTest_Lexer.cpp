/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"BRANCHED_OPTIONAL",
			L"PLUS",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"+",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"/+",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 687; // 10770 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 175;
		static const vl::vint dataSolidRows = 2;
		static const vl::vint dataRows = 3;
		static const char* compressed[] = {
			"\x12\x2A\x00\x00\xA7\x02\x00\x00\x6E\x00\x01\x97\x01\x84\x81\x82\x0A\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x8B\x14\x88\x83\x2F\x17\x84\xA1\x3A\x84\x82\x31\x8E\x82\x63\x20\x84\x84\x33\x94\x81\x32\x93\x04\xE7\x29\x84\x88\x34\x94\x83\x34\x2F\x84\xAC\x32\x94\x80\x81\x80\x9B\x00\x6F\x04\x9A\x91\x80\x38\x82\x9F\x01\xF2\x04\x82\xA1\x83\x38\x82\xA3\x01\xF4\x04\x8A\xA1\x86\x38\x82\xA7\x01\x86\x04\x92\xA1\xAB\xA8\x83\x02\x04\xFF\x5A\xBB\xAA\xAC\x01\xAC\xAE\x60\xE1\xA2\xA0\xB3\x04\x81\x00\x82\x02\x5F\xA3\xAB\xBC\xB5\xB6\xB7\xB7\x70\xEB\x87\x0A\xB1\xBD\xBA\xBB\xBB\x71\x88\x34\xB8\xBC\xBD\xBD\x85\x80\x7D\x81\xC2\xC3\xC4\xC0\xB0\x86\xC0\x85\x89\xCA\xC5\xCB\x04\x81\xC7\x80\x8F\x80\x11\xCB\xC4\xCD\xCA\xCB\xCB\xFF\x0C\x3B\xB8\xCC\xCC\xB7\x86\xC4\x9D\xF7\x8E\x1B\xC1\xC7\x04\xD3\xC5\x10\x27\xE1\xD8\xB1\xCD\xD6\xC6\xD5\xAB\xB1\xF2\xDA\xA1\x08\xDB\xD9\xD0\x12\x36\xF7\xC2\xB3\x0A\xDF\xDD\xDF\xC0\x94\x3E\xC0\xEC\xB5\x0B\xE0\xE2\x96\x87\xA0\xC8\xEC\xE1\xB3\x81\xE5\xCD\x9C\xD8\x07\xE7\xC9\x0C\xEB\xE8\x70\x9A\x17\xF8",
			"\xEC\xE3\x0F\xEC\xEE\x6C\x9C\x1F\xE0\xF5\xBD\x0F\xF0\xEE\x1E\x67\xE4\xE4\xCF\x0A\xF7\xDA\x89\xD0\xEB\xF2\xF6\xC1\x16\xF7\xF9\xB1\x22\x76\xE3\x16\xF7\xFD\xC0\x12\xFE\xFD\x7C\x55\x08\x80\xC4\x66\x04\x81\x80\xFF\x27\x07\x80\x82\x78\x6A\x04\x40\x0A\x04\x69\x0B\x81\x62\x15\x71\x7C\x83\x85\x97\x6C\x03\x87\x7D\x2D\x1B\x88\x87\x6C\x2E\x1E\x8C\x77\x0B\x22\x95\x60\x0D\x89\x98\x71\x08\x8B\x87\x96\x72\x0B\x88\x77\x33\x2F\x8C\x8B\x3F\x34\x32\x84\x71\x0D\x36\xB6\x56\x0D\x8E\x33\xBF\x37\x0C\x8F\xD8\x78\x00\x90\x71\x39\x03\x9B\x62\x0E\x46\xBF\x6B\x0D\x92\x71\x7C\x0C\x91\x8F\x77\x7D\x0F\x90\x78\x3E\x13\x92\x6F\x0F\x56\x82\x60\x11\x96\xE4\x41\x1C\x95\x68\x42\x1F\x9D\x67\x10\x62\xA2\x54\x11\x99\x98\x45\x18\x9B\x6C\x46\x2B\x93\x63\x11\x6E\x95\x68\x11\x9C\x94\x49\x14\x9F\x6C\x4A\x37\x9A\x63\x12\x53\x8C\x1A\x9C\x94\x77\x4D\x1F\x9D\x61\x4E\x03\xA0\x5B\x13\x86\xBC\x50\x15\xA2\x82\x51\x1C\xA3\x5D\x52\x0F\xA0\x5B\x14\x92\xBC\x54\x15\xA5\xB1\x55\x1F\x96\x15\x98\xB7\x57\x15\xA7\x80\x9C\x68\x14\xA8\x75\x59\x14\xA8\x5E\x5A\x27\xA4\x73\x16",
			"\xAA\xAF\x5C\x15\xAB\x7C\x5D\x10\xAD\x5B\x5E\x33\xAA\x54\x46\x16\xA1\xAA\xAF\xAE\x08\xA0\x16\xAF\x5A\x1B\x79\xAC\xAF\xB0\x9C\x5E\x42\xB0\xB1\x5B\x61\x47\xB1\x74\x24\x4B\xB8\xB3\x49\xCE\x88\xBD\x5A\x19\xBF\xA3\x5A\x49\xB4\xA1\xAD\x48\xB4\xAF\x30\x5B\xB1\x6A\x1A\xD5\xA2\x5B\x19\xB8\xAB\x73\x4E\xB6\xAE\x6D\x24\xB2\xB7\x7A\x60\x3A\x50\x00\x7C\x04\x44\x08\x24\x00\x30\x38\x45\x43\x5F\x00\x38\xBA\xBC\x41\x73\x41\x4E\xB9\xBE\x0A\x41\x4B\xBE\xBF\x01\xC0\xC2\xC1\xC1\x03\xC6\xCA\xC1\xC2\x0C\xC8\xCE\xC3\xC1\x10\xCB\xCF\xC2\xC4\x05\x51\xCD\xC2\xC5\x13\xD7\xC4\xC7\xC6\x1A\xDD\xC9\xC7\xC7\x18\xE1\xCC\xC4\xC8\x23\xE2\xC8\xBD\x59\x26\xE4\xC9\xC3\x59\x01\x69\x52\xC8\x55\x25\xF1\xCE\xC6\xC8\x5E\x41\x48\x55\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
