/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"BRANCHED_OPTIONAL",
			L"ENTRY_RULE_PRIORITY",
			L"PLUS",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"+",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"/+",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 784; // 13645 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 16;
		static const vl::vint dataSolidRows = 3;
		static const vl::vint dataRows = 4;
		static const char* compressed[] = {
			"\x4D\x35\x00\x00\x08\x03\x00\x00\x81\x00\x01\x99\x01\x84\x81\x80\x0C\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x8B\x14\x88\x83\x2F\x17\x84\xA1\x3A\x84\x82\x31\x8E\x82\x63\x20\x84\x84\x33\x94\x81\x32\x93\x04\xE7\x29\x84\x88\x34\x94\x83\x34\x2F\x84\xAC\x32\x94\x86\x35\x9A\x82\x6F\x38\x84\x90\x3B\x9C\x82\x38\x9F\x04\xF3\x01\xA4\x84\x3C\xA0\x83\x3A\x47\x84\xB6\x2A\xA4\x81\x3D\xA6\x82\x07\x50\x92\xA1\x81\xA9\x82\x02\x82\xFF\x59\x9A\xB9\xA4\x00\xAF\xAC\xAD\x05\x5E\x9F\xA3\xBA\xAB\x00\x83\x00\x04\x82\x22\xA4\xBC\xB5\xB6\xB7\xB7\x70\xF1\xB2\xAD\xB8\x03\xB7\xB9\xBB\x78\xF9\xBA\xBA\xA9\x81\x83\xBD\xBF\x80\xED\x8C\x9E\xB1\xC5\xC2\xC3\xC3\x88\xD9\x8B\x16\xB9\xC5\xC4\xC0\x06\x8C\x8E\xD2\xD3\xC4\xCB\xAF\x87\x80\x97\x80\x19\xD9\xC5\xCD\xCE\xCF\xCF\x80\x8E\x11\xC0\xD4\xD4\xB7\x07\xD1\xA5\xF7\x90\x08\xDA\xB9\x08\xD7\xCA\x12\x2F\xE9\xD3\xD4\xDB\xBB\x08\xD9\x96\x90\x98\xDA\xD0\x05\xDA\xDF\xDF\xFF\x14\x38\xC0\xEE\xCD\x0B\xE0\xE2\x63\x96\x07\xE8\xEC\xE0\xD3\x0B\xE5\xCD\xED\x87\x84\xC1\xED\xEB\x7F\x81\xD4\xD6\xD2\xDA",
			"\x00\xEA\xED\xD3\x0D\xDD\xDE\xC0\xDC\x01\xF7\xCD\x0F\xF2\xE2\xEF\x9E\x08\xF9\xF5\xF5\xBD\x0F\xEC\xB3\xD2\x99\xEE\xF5\xC1\x11\xF8\xF5\xF0\xA2\x18\xFE\xEB\x10\xFF\xFC\x7F\x64\x0F\x7F\x6C\x25\x03\x80\x82\x5B\x26\x06\x87\x83\x82\x5A\x67\x0A\x80\x83\xFF\x28\x06\x81\x0A\x0F\x90\x8A\x5E\x0A\x15\x96\x8D\x61\x45\xF4\x5A\x83\x58\x0B\x19\x84\x7D\x09\x88\x00\xAE\x04\x8A\x87\x70\x71\x04\x43\x0B\x04\x70\x07\x89\x63\x32\x2F\x88\x8B\x67\x33\x32\x83\x8D\x60\x34\x36\x89\x79\x0D\x3A\xB7\x83\x66\x0D\x3D\x91\x77\x0D\x90\x92\x78\x04\x91\x65\x39\x07\x9E\x8F\x5C\x3A\x0A\x9E\x7B\x0E\x4E\x8D\x7C\x0D\x94\x0C\xBD\x04\x96\x6F\x3E\x17\x97\x5F\x0F\x5A\x90\x80\x11\x97\x80\x41\x10\x9B\x8D\x42\x23\x95\x6F\x10\x66\x88\x64\x11\x9A\xB3\x45\x1C\x99\x5C\x46\x2F\x9B\x91\x5B\x47\x17\x98\x12\x9C\x73\x81\x69\x10\x9E\xA0\x4A\x1C\x9F\x5F\x4B\x3F\x91\x74\x13\x82\x9D\x6D\x11\xA1\x95\x4E\x18\xA3\x5F\x4F\x0B\xA7\x5C\x14\x8E\x92\x61\x15\xA4\xA0\x52\x14\xA7\x5F\x53\x17\xA9\x60\x15\x9A\x88\x65\x15\xA7\xBF\x56\x10\xA8\x5E\x57\x23\xA5\x60\x16\x6F\x99\x16\xA9\x9E",
			"\x6E\x5A\x1B\xA8\x60\x5B\x23\xAC\x17\xAB\x6D\x5D\x14\xAD\x62\x5E\x37\xAA\x5C\x46\x1D\xAC\xAC\x58\x18\xBA\x99\x5B\x45\xAF\xBE\xAE\x5E\x44\xB1\xC5\x89\x61\x48\xB2\xC9\xAE\x54\x48\xB3\xBF\x67\x40\xB5\xB3\x5A\x66\x11\xB0\xB5\x8E\x6A\x43\xB4\xB6\x2D\x5B\xB8\xB6\x56\x30\x5E\xBF\xB6\x6F\x6A\x17\xBB\x1B\xB5\x77\x73\x42\xBB\xB8\x5A\x6D\x18\xBB\x5C\x36\x6B\xB3\x8D\x4E\xF2\x8B\x9C\x4D\xBD\xEC\xB9\xBA\xBE\x63\x71\x2F\xB2\x5F\x4F\xF8\xBB\xB2\xC0\x5B\x42\x41\xC3\x9D\x51\x06\xCB\x98\x51\xC2\xE3\x8B\x5C\xC0\x65\x77\x3E\xB1\x5C\x1E\x12\xC3\xC3\x66\x53\x0F\xF3\x8A\x1D\xC5\x64\x7B\x1C\xC6\x5B\x7C\x3F\x9D\x1F\xC7\x6D\x7E\x14\xC9\x69\x7F\x27\xC4\x58\x20\x2A\xD6\xC2\x78\x30\xF3\x40\x0B\x69\x41\x00\x01\x08\x24\x10\x80\x01\x00\x40\xCD\x00\x03\x6D\xCD\x43\x01\x7E\xCE\xCD\x5D\x01\x7D\x5F\xCD\xD0\x40\xC7\xDA\xD2\xD1\x42\xC9\xDD\xD0\xD2\x50\xCA\xDF\xD2\xD4\x4E\xD5\xD1\xD7\xD4\x58\xD6\xD4\xD7\xD5\x5A\xC5\x49\xD4\xD7\x60\xDB\xD2\xDB\xD7\x63\xDA\xD4\xDB\xD9\x66\xE9\xD1\xD8\xDA\x6B\xEA\xD5\xD9\xDB\x51\xE6\x50\xDF\xDB\x74\xFE\xC8\x59\x40\x6A",
			"\x61\xD7\x57\xDC\x64\xD5\x55\xDE\xDB\x3E\xDD\x51\x41\x58\x01\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
