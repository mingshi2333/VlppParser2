/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"BRANCHED_OPTIONAL",
			L"ENTRY_RULE_PRIORITY",
			L"PREFIX_BEFORE_AMBIGUITY",
			L"PREFIX_WITH_AMBIGUITY_1",
			L"PREFIX_WITH_AMBIGUITY_2",
			L"PREFIX_WITH_LEFTREC",
			L"CONDITIONAL_LITERAL",
			L"PLUS",
			L"LT",
			L"GT",
			L"ID",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"prefix_with_leftrec",
			L"conditional_literal",
			L"+",
			L"<",
			L">",
			nullptr,
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"prefix_with_leftrec",
			L"conditional_literal",
			L"/+",
			L"/<",
			L"/>",
			L"[a-zA-Z_]/w*",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2054; // 32029 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 6;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x1D\x7D\x00\x00\xFE\x07\x00\x00\xC6\x00\x01\xA7\x01\x84\x81\x82\x12\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x8B\x14\x88\x82\x18\x17\x84\xB1\x1A\x84\x82\x19\x8E\x82\x33\x04\xB9\x04\x8C\x1C\x90\x82\x1F\x27\x84\x81\x24\x8A\x2C\x83\x2E\x97\x04\xE1\x31\x84\x82\x34\x98\x83\x31\x37\x84\xA4\x3A\x94\x85\x31\x9E\x82\x66\x40\x84\x87\x33\xA4\x80\x34\xA3\x04\xE9\x09\xA4\x8A\x34\x83\x34\x82\x6C\x50\x84\x8D\x33\xAC\x82\x36\xAB\x04\xEF\x19\xA4\x80\x3C\xAC\x83\x38\x5F\x84\xB2\x22\xB4\x83\x39\xB2\x82\x74\x68\x84\x95\x3B\xB4\x82\x3A\xB7\x04\xF7\x31\xA4\x88\x3C\xB8\x83\x3C\x77\x84\xBA\x3A\xB4\x83\x05\xBF\xBF\x01\xFE\x81\x87\x04\x87\x7E\xC3\xC3\x88\x89\xFF\x68\x0A\x81\x80\x86\xC7\x0D\x81\x84\x04\x86\x01\xC8\x01\x02\x96\x8F\xC0\x1A\xCC\xC9\xCC\x83\x01\x04\x81\x04\x82\x0E\xC8\xCA\xD3\xCD\xA5\xA8\xE7\xDA\xCA\xC5\xD6\xD7\xC3\x0F\x81\xB1\xC0\x03\xDB\xDA\xD7\xDA\x10\xB2\xF9\xD4\xDB\xD8\xDE\xDD\xDF\xBC\xC0\xFE\xC1\xE0\x04\x05\xDF\xE3\xC2\xC8\xC4\xF6\xDF\xD5\xE4\xC5\xE1\xC3\xB7\xCA\xF0\xE3\xED\xE9\xE4\xE0\x0E\x4A\xCF\x16",
			"\xEB\xE4\xEE\xE7\xEF\xFF\x54\xC0\xF2\xE7\xED\xEC\xE0\x08\xDC\xE2\xE6\xEB\xFA\xF5\xF6\xEE\xF0\xCD\xEE\xC1\x84\xFC\xF1\xF6\xFB\xF2\xF2\x80\x11\x17\xF5\xFB\xF0\xF9\xD7\xF9\x74\x79\x7F\x80\xFC\x52\x0C\x7C\x81\xF8\x45\x6F\x7E\x80\xCA\x4C\x89\x83\x83\xFD\x51\x83\x6F\x04\x07\x95\x8E\x7F\x82\x18\x99\x8A\x87\x86\x1C\x9D\x8E\x87\x87\x20\xA1\x82\x8B\x88\x24\xA5\x86\x8B\x89\x28\xA9\x8F\x7D\x80\xAD\x48\x82\x86\x85\x2F\x90\x8E\x88\x73\x86\x54\x04\x42\x8D\x01\x78\x80\x02\x8E\x2A\xBD\x8E\x8F\x8F\xF0\x6C\x8A\x63\x8C\x30\x84\x90\x85\x05\x45\x8A\x8D\x86\x90\x89\x46\x91\x8F\x93\x4E\x91\x9A\x90\x87\x4C\x8F\x79\x92\x8C\x57\xAB\x76\x05\x96\x34\x94\x9F\x7B\x90\x30\x97\x0C\x97\x98\x58\xA5\x7F\x85\x95\xB0\x64\x90\x00\x06\x6A\xAA\x79\x06\x9A\x67\x9F\x9D\x93\x6E\x1A\x2D\x96\x9D\x99\x4F\xB1\x90\x86\x83\x50\xB7\x9D\x9D\x40\x1B\x19\x9A\x9D\x84\x7C\x92\x98\x9F\x6C\x1C\x3E\x9C\x92\x8E\x8C\xB7\x83\x94\x90\x90\x91\xAD\x8C\x9A\x86\x46\xA1\x85\x07\x8A\xB0\x9E\x84\xA5\xE1\x59\xA1\x42\x07\x9E\xBF\x9B\x7B\xA0\xEA\x45\xAC\x7F\x07\xA1\x96\xA5\xAB\xA6",
			"\x72\x96\x90\x72\x44\x87\xA9\xA1\xA8\xA9\x0D\xAD\x82\xAD\xAC\x78\xA1\x02\xA0\xAB\x7B\xB6\xA8\xAE\xA8\xEA\x62\x07\xAF\xA8\xBC\x84\xAE\xAC\xB0\xC3\xB3\x63\x0A\x9F\xB4\xA6\x97\xB1\x7E\x24\x09\xB3\xB1\xB3\xC4\xA0\x9F\xAE\xAA\xBB\x65\x02\xB7\x7C\xC5\xAB\xA6\xB4\xB2\xD7\xAA\x97\x41\xB8\xDC\x8B\x9D\xA9\x9A\xE4\x91\x83\x41\xBA\xD8\x8E\xB6\xB9\xAF\xDF\xAD\xB0\xBA\xA8\x28\x3B\xAF\xBA\xB1\xF1\xBC\x79\x0B\xB6\xF3\x9E\xBE\x94\xBC\x73\x90\x8A\x08\xBF\xF2\xBE\xBB\x84\xA7\x05\xC4\xCC\x7D\x45\x17\xBF\xB8\xBD\xC0\xFD\x8A\x7C\x0A\xC2\x78\x94\xB1\x77\xB3\x14\xC0\x0D\x09\xC6\x16\xFB\x66\xA8\xBB\x04\x6E\x09\xC4\xA7\x0B\x88\xC3\xCB\xB0\x2F\x35\xA7\xBE\xC1\xE8\x91\xC5\x78\x46\x20\xF1\xC5\xB6\xC3\x2C\xD5\xAC\x7F\x46\x32\xC9\xCF\xAD\xC7\x0D\xEE\xAE\xC8\x71\x1E\x79\xC3\xAD\xB7\x2A\xD0\xC1\x4A\xD0\x48\xFF\xC7\xC7\xCA\x45\xFE\xCA\xCE\xD2\xCA\x74\x06\xBC\xCD\x4D\xED\xC3\x6D\x0D\x27\xC9\xD5\xCC\x86\x26\xDA\xD9\xC6\x0D\xFC\x7C\xC4\x70\x7D\x37\x19\xD0\xD5\xC5\x44\xEE\xB0\xC7\xD3\x6C\xCA\x78\x0D\xD8\x69\xF3\xCE\xCF\x48\x5E\xF5\xDF\xCE\xD8\x5D",
			"\x8E\xDC\x7E\x0E\x66\xD6\xA8\xDF\xA3\x56\xFD\xDA\x73\x0E\xCC\xB1\xDB\xD3\xDA\x7E\xA5\x46\xDE\xDF\x86\xDE\xC8\xC7\xE2\x04\x7D\x02\xE1\xB9\x54\xEA\xDA\xDC\x9E\x28\x50\xEA\xE4\x00\x7F\xD4\xE7\xE4\x71\x3F\x13\xE2\xA8\x10\xE7\x99\x8D\xD6\xA8\x2B\x5B\xED\xDA\xE7\x1A\xA7\xEB\xE9\x84\x44\x04\x42\x10\x41\x43\x13\xBD\xE1\xCF\x81\xD0\x85\x12\xE8\x8C\xCC\xD6\xE5\xEE\x67\xC1\xFA\x7A\x11\x30\x9D\xEC\xE7\xE3\xC2\xFC\x77\x10\xBF\xC6\xDF\xC9\xF2\xEA\x70\xFE\xE2\xDD\xCB\x48\x3C\xE6\xEE\xF4\x87\xDF\xE9\x7D\x12\xD6\xFB\xC7\xEF\xD8\xC8\xF2\xBA\x11\xF7\xE0\xD8\xFE\xE3\xB7\x4B\x24\xFF\xE9\xF3\xE1\xE6\xDC\x13\xF5\x95\xD3\xF6\xCC\xF4\x10\x8D\x1C\xF3\xF7\x79\xC0\xF9\x7E\x13\xEA\xD1\xF1\xFD\xF6\x2D\x6F\x09\xFF\x76\x6C\x7D\x7C\x5B\x70\x0A\xA2\x65\x80\xE2\x74\x74\x39\x28\x1C\x60\x7F\x80\x73\x7F\xF3\x22\x52\x0B\xFB\x66\x78\x77\x12\x8E\x4B\x14\x03\x8F\x61\x83\x65\x75\x53\x0C\x92\x5C\x15\x53\x6E\x82\x80\x5A\x79\x63\x55\x16\x83\xFF\x67\x7B\x81\x09\x8F\x6E\x0A\x24\x8D\x77\x07\xAF\x7F\x69\x2B\x1A\x57\x82\xE5\x6D\x86\x93\x58\x0C\x82\x00\xA6\x73",
			"\x86\xA2\x79\x0A\x0A\xA5\x8D\x82\xFD\x5C\x3D\x25\x21\x85\x70\x0E\xF9\x79\x82\x82\x1B\x0D\x87\x37\x8B\x84\x06\xA0\x8E\x84\x18\x5C\x08\x7E\x44\x9B\x68\x0D\xFC\x3D\x0B\x21\xB2\x86\x84\x46\x89\x5E\x17\x50\x8C\x75\x1F\xA0\x8D\x89\x49\x85\x3F\x4B\x1B\x7A\x81\x13\xB2\x60\x0C\x1C\x8D\x8D\x18\xBF\x62\x27\x34\xB9\x48\x82\x65\x94\x8B\x6C\x35\x26\x8F\x2D\x93\x8D\x64\x40\x9D\x8E\x72\x38\x2C\x8C\x3C\x87\x7F\x5B\x3B\x22\x92\x1D\xF2\x88\x8D\x2A\x81\x26\x27\x8A\x99\x85\x16\xD5\x6D\x90\x3F\xBF\x61\x28\xE9\x4C\x92\x1E\x9C\x84\x29\xA4\x5A\x93\x36\x47\x31\x92\x25\xCC\x8C\x6B\x40\x8E\x93\x82\x4A\x39\x92\x21\xCE\x73\x94\xA6\x1E\x8E\x8C\x45\x95\x90\x19\x80\x0F\x28\x55\x8B\x89\x82\x9B\x82\x94\x7F\x51\x26\x96\x29\x92\x93\x8E\xAD\x9F\x54\x55\x3D\x93\x93\xDF\x72\x91\x92\x57\x25\x93\x2D\xF9\x83\x36\xAD\x3A\x94\x81\x9F\x81\x55\x57\x4F\x92\x7F\x52\xA7\x89\x97\x4F\x40\x2C\x35\xCE\x41\x9A\xE0\x23\x2E\x6E\x66\x34\x99\x37\x93\x89\x2D\x6D\xAC\x85\x98\xD5\x81\x9B\x7A\x6C\x2B\x91\x55\xAD\x7A\x66\x6F\x26\x9F\x1F\xAB\x46\x95\xA7\x72\x2A\x9E\xBF\x90",
			"\x96\x16\xA1\x55\x2E\x7C\xA4\x90\x90\xD7\x8A\x9E\x93\x78\x2E\x92\x77\x86\x87\x94\x7B\x22\x9E\x41\xBA\x89\x63\x3D\x2F\x96\x9A\xB1\x94\x88\x1F\x33\x92\x5F\x71\xAA\x9D\x0F\x66\x76\xA0\x7F\x7E\x04\xA2\x4A\x90\xA3\x9F\xD4\x9F\x0F\x43\x80\xA1\xA3\xE1\x00\x15\xA3\xC4\x9F\x89\x49\xA8\xA1\x43\x40\x3E\x78\x9D\x3E\x98\x9A\x40\xEA\x42\x11\x97\xAA\xA0\xA4\xA7\x99\x3F\x20\x23\xA4\x9F\x80\xA1\x54\x10\x71\x8B\xA2\x1B\xBF\x65\x11\xA0\x8B\x9F\x90\x0C\xAC\x82\x21\x0F\x87\xA8\x3E\x47\x14\xA5\xDC\x82\xAB\x1C\x88\x10\xAA\x9B\xBA\x9E\xA3\x96\x49\x11\x55\xF9\x84\xA4\x9C\xB3\xA1\x20\x8A\x0C\xAA\x2F\xA4\x9A\x9D\x45\x09\x82\xAA\xC7\x91\x40\x23\x5B\xA9\x9F\x8F\x98\xA8\x46\x8D\x0C\xAF\x3F\xBD\xAB\xA5\x48\x8E\x12\xAC\x30\xA7\x9C\x30\xFC\x5F\x10\x9E\x81\x4D\x9E\x2C\xB0\x11\x0C\xD7\xA6\x98\x6C\x91\x12\xAE\x56\xAE\xAD\x61\xDF\xA0\x00\x49\x19\xA0\xAD\x32\xAA\x4F\x24\x46\xA3\xAC\x5C\x8C\xB6\x52\x94\x03\xB2\x62\xE9\x9B\x37\x4A\x08\xB0\x6D\x4D\xAF\x9D\x4E\x8F\xB1\xB5\x6F\x56\x17\xB3\xA2\x43\x9F\x25\x28\xBE\x44\x8D\x81\x20\x13\xAC\xBF\x81\x57\xEF",
			"\xAE\x9F\xDD\x19\x12\x89\x95\xAC\x98\x8C\x1A\x18\xB4\xD7\xA7\x93\x13\x67\xA5\xB5\x52\x80\x0C\x13\xD8\x85\xB3\xB6\x8B\xAA\x4D\x27\x2C\xAE\xB7\xCB\x8A\x3E\x13\xB8\xB9\xAF\x14\xEA\x9F\x13\xE0\xB9\xB0\xA9\x43\xAA\x9C\x28\x7E\xA0\x3C\xD7\x66\x69\x14\xDC\xBF\x3A\x77\x9B\x72\x14\xEB\x92\xBD\xAD\xAF\x63\x14\x65\xE7\xB4\xAD\x59\xA4\x11\xBA\x37\xB4\xB7\x68\xF8\x9D\xB8\x35\x65\x13\xBD\xF1\xA9\xB9\x6D\xF8\x46\x15\xE2\x50\xB6\x49\xA7\x1D\xB7\x7F\xC6\xB9\xB5\x01\xF8\x98\x15\x58\x99\xBC\x67\xF8\x99\x15\x04\xC4\xB3\xC1\xF3\xB1\xC0\xC9\x74\xAE\xAA\x96\xAA\x12\xB3\xC8\xB0\xC3\x6C\x2B\x14\xC1\xAD\x59\xC1\xA6\xF2\x4C\x14\x73\x86\xC3\x83\x56\x38\xBF\xC1\x20\xDC\x3A\x2B\x1D\xC8\x97\x0F\xFA\xA9\xAD\xCE\xB0\x43\x2B\x18\xC4\xC2\xF9\xB1\xC2\x54\xB0\x14\xC7\x5F\xBE\xAB\xBF\xE0\x71\x17\xC5\x9B\xA9\xC4\x03\xB2\x16\xBC\x05\xC2\xCA\xC2\x7E\x53\x16\x7F\xC2\xB9\xBA\x0E\xB4\x12\xC7\xDD\xA0\xB1\x8F\xCF\x65\xBE\x99\x75\x17\xC4\x41\xC0\xCB\xEB\x36\x18\xCA\x17\xD3\xBC\xC5\xA0\xB7\xB8\x2B\xE0\xCD\xAC\x2F\xE8\xB9\x54\xB7\x1D\xC9\x8D\xFA\xB8\xC8\x3B",
			"\xB8\x10\xC8\x66\xCD\xBC\x35\xB9\x11\xBC\xE7\x23\xBD\xCD\xC4\x3A\x15\x9D\xF1\x32\xCA\x3C\xCE\x4B\x17\x50\xC2\xBE\x29\xBC\x14\xCC\x0F\xEB\xCA\xC3\x19\x7D\x14\x5E\xC6\xCA\xCA\xB3\x7E\x13\xD1\x28\xCD\xD3\x94\xEA\x4F\x16\x38\xF4\xA8\x18\x04\x21\x1A\xA4\xFE\xC4\xB4\x31\xC8\x7A\x18\x85\xD6\xD3\x8E\xF5\xA4\x39\x61\x21\xD3\x9E\xA3\xD5\xC3\xA4\x85\xAC\xC9\xBD\xAB\xD3\x5E\x55\xDC\xD0\x34\xA4\xC6\x92\x62\x05\xC9\xD2\x5F\xCC\x81\x31\x37\xD9\xCB\x5C\xF2\xD7\xD7\xB1\xD7\xC7\xFA\x07\x3E\x1E\x0F\x7F\x00\x20\x05\x21\x20\x7A\x4A\xD4\x21\x65\xC0\x06\xD9\xD0\xDB\x35\x76\x01\x2B\x3A\x66\xC1\x23\x3F\xD6\xCF\xD9\xB3\xDB\xD9\xDB\x68\xD9\xD8\xDB\xDA\xDD\xD8\xB7\xE1\xD4\xDC\x6F\xE5\xDB\xDC\xE6\xC9\xDC\xBA\xEB\xD2\xDD\x76\xE7\xDE\xDD\xEA\xD0\xDC\xBB\xEF\xD4\xDF\x82\x31\xDC\xDE\xF7\xD9\xDF\xBC\xFA\xD2\xDF\x7E\xF8\xDB\xDF\x00\xFE\xDC\xBF\xFF\xD2\xE1\x80\xC4\xE7\xE0\x03\xE9\xE2\xC1\x8A\xE5\xE1\x80\x20\x35\xE1\x08\xEB\xE2\xC1\xA2\x3E\xDE\xD2\x2E\xDD\x32\x10\xEC\xE0\xBD\x82\x34\xDE\xC2\x01\x26\x38\x19\xF2\xE2\xBF\x8C\x31\x21\x84\x27\x36\xDC",
			"\x93\x21\x20\x66\x01\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
