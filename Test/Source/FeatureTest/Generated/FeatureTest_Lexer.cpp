/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureTest
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTest_Lexer.h"

namespace featuretest
{
	bool FeatureTestTokenDeleter(vl::vint token)
	{
		switch((FeatureTestTokens)token)
		{
		case FeatureTestTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* FeatureTestTokenId(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"OPTIONAL",
			L"POSITIVE_OPTIONAL",
			L"NEGATIVE_OPTIONAL",
			L"NESTED_OPTIONAL",
			L"NESTED_POSITIVE_OPTIONAL",
			L"NESTED_NEGATIVE_OPTIONAL",
			L"BRANCHED_OPTIONAL",
			L"ENTRY_RULE_PRIORITY",
			L"PREFIX_BEFORE_AMBIGUITY",
			L"PREFIX_WITH_AMBIGUITY_1",
			L"PREFIX_WITH_AMBIGUITY_2",
			L"PLUS",
			L"LT",
			L"GT",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenDisplayText(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"+",
			L"<",
			L">",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	const wchar_t* FeatureTestTokenRegex(FeatureTestTokens token)
	{
		static const wchar_t* results[] = {
			L"optional",
			L"positive_optional",
			L"negative_optional",
			L"nested_optional",
			L"nested_positive_optional",
			L"nested_negative_optional",
			L"branched_optional",
			L"entry_rule_priority",
			L"prefix_before_ambiguity",
			L"prefix_with_ambiguity_1",
			L"prefix_with_ambiguity_2",
			L"/+",
			L"/<",
			L"/>",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < FeatureTestTokenCount ? results[index] : nullptr;
	}

	void FeatureTestLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1027; // 23418 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 3;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x7A\x5B\x00\x00\xFB\x03\x00\x00\xAA\x00\x01\xA1\x01\x84\x81\x80\x10\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\x87\x86\x84\x8B\x14\x88\x83\x18\x17\x84\xB2\x1A\x84\x84\x1D\x8E\x82\x3E\x20\x84\x9F\x23\x94\x81\x30\x93\x04\xE2\x29\x84\x83\x34\x94\x82\x32\x2F\x84\xA5\x32\x94\x86\x31\x9A\x82\x67\x38\x84\x88\x3B\x9C\x81\x34\x9F\x04\xEC\x01\xA4\x8D\x34\xA0\x82\x37\x47\x84\xAF\x2A\xA4\x80\x39\xA6\x82\x72\x50\x84\x93\x33\xAC\x80\x3A\xAB\x04\xF5\x19\xA4\x86\x3C\xAC\x83\x3B\x5F\x84\xB8\x22\xB4\x81\x3D\xB2\x85\x01\x89\xA9\xA8\xB0\x06\x00\x83\x7F\x70\xF1\xB0\xA7\x04\x80\x07\xB6\xB9\x71\x84\x37\xB8\xBF\x7D\x03\xBC\xBE\x80\x81\xC3\x04\x81\x04\x82\x01\xBF\x81\x89\xCA\xCB\xCC\xC5\xC6\xC7\xC7\x90\x90\xCC\x81\x81\xCD\xCA\xCB\xCB\x98\x99\xC0\xCB\x0F\xBC\x04\xC4\xCD\xA0\xA1\xCB\xCF\x84\xCA\xD2\xD3\xD3\xA8\xA9\xE6\xCE\x0F\xCA\xD6\xD7\xD7\x8E\x8F\x2D\xD0\xD4\xDD\xDA\xDB\xDB\xB8\xB9\xFA\xDB\xDC\xDD\xDE\xB8\x08\x04\xC0\xC1\x82\xE0\x04\xE2\xDF\xE3\xC8\xC9\xF0\xD1\x03\xDA\xE6\xE7\xC8\x12\x4D\xCF\xE0\xD3\x0A\xEB\xE9\xEB\x98\x94\x16\xF8",
			"\xC5\x0B\xEC\xEC\xB8\x16\x5E\xDF\xE3\xF4\xF3\xC7\x0A\xF1\x8A\xC4\xEA\xE1\xE8\xF5\xF2\xF7\xF1\x18\x6D\xEF\xF3\xE9\x0A\xFB\xF9\xDB\x1A\x76\xF7\xE7\xDB\x0A\xFF\xFD\xFF\xC7\x5C\x0E\x7C\x80\x9A\x5D\x03\x80\x81\xD7\x5E\x07\x80\x82\xAA\x5F\x0B\x80\x83\xD7\x52\x40\x00\x84\xA6\x43\x45\x68\x85\x18\x91\x62\x0B\x83\xE3\x63\x0C\x85\x86\x9A\x64\x0F\x84\x88\x24\xAA\x65\x0B\x88\xF3\x66\x08\x89\x89\x8D\x67\x0B\x88\x8B\x18\xA8\x0F\x8A\x73\x29\x33\x80\x8E\x0A\x36\xB0\x84\x6D\x45\x17\xBA\x8F\x60\x0B\x39\xBE\x87\x65\x0B\x41\x82\x96\x90\x5E\x2E\x05\x91\x67\x0B\x4A\x87\x9E\x91\x5C\x30\x0D\x9F\x60\x46\x3D\x8F\x9F\x7B\x46\x55\x96\x9A\x8F\x0C\x52\x94\x84\x0D\x97\x10\xB5\x00\x98\x8B\x36\x23\x96\x6B\x0D\x66\xA2\x68\x0D\x9A\x5A\xA6\x6B\x0C\x41\x39\x04\x4A\x0C\x9B\xBD\x5E\x49\x95\x9B\x78\xB1\x5D\x0C\x9D\x79\x98\x71\x4B\x9D\x7D\x8F\x7F\x0C\x9F\x81\x80\x60\x10\xA1\xBE\x41\x18\xA1\xA1\xBD\x42\x1B\xA1\x89\x43\x0F\xA7\x70\x11\x92\xA4\x75\x11\xA5\x8C\x9A\x66\x10\xA6\x6D\x87\x1C\xA7\x71\x48\x1F\xA9\xA6\x66\x49\x22\xA3\x7A\x12\xA6\xAD\x9B\x11\xAA",
			"\x04\x8C\x1C\xAB\x6B\x4D\x2F\xA5\xA2\x13\xB2\xB4\x6F\x11\xAD\xA3\x80\x60\x14\xAE\xF3\x51\x1C\xAD\x6F\x52\x3F\xAD\x9B\x14\xC2\xBB\x64\x15\xB1\xF3\x55\x18\xB3\x69\x56\x0B\xB9\xAF\x63\x57\x0E\xB0\x5C\x16\xD2\x8F\xB7\x69\x16\xD5\x89\x7A\x14\xB2\x5B\x19\xB6\xB5\x68\x5C\x1E\xB7\x6D\x17\xE2\x90\x8E\x15\xB9\xD3\x64\x40\xA3\xB7\x98\x60\x18\xB8\x6E\x27\x6B\xBF\xB6\x4A\xF2\xAC\xB0\x5D\x4B\xF5\xB6\xB0\x4D\xBE\xF6\x88\x73\x4C\xBF\xFD\xA1\x66\x4C\xC0\xFD\xB9\x44\xC1\xC0\x8A\x7C\x47\xC0\xC2\x81\x7F\x4B\xC0\xC3\xA9\x6A\x1F\xBB\x6E\x6B\x25\xB2\x53\xC3\x10\xC9\x75\x50\xC6\x19\xCA\x68\x50\xC7\xEF\x4B\x50\xC9\xC7\x18\x8E\x53\xC8\xC4\x71\x13\xC1\x69\x54\x27\xF9\x94\x55\xCB\x24\xC0\x67\x54\xCC\xEE\x5A\x54\xCC\xC4\x5D\x77\xC1\xCE\x6A\x60\x7A\xC5\xA3\x58\x3E\xFE\x86\x59\xD0\xD6\xBA\x1A\xC8\x8B\x7B\x07\xDF\x70\x1F\x2A\xFD\x1A\xD2\x96\x7E\x0F\xD6\x6F\x1F\x52\xCC\x60\x21\xD5\x3B\xEF\x71\x20\xD6\xBB\x42\x2C\xD6\x6F\x83\x1F\xD9\xAC\x21\x62\xD6\x65\x21\xD9\x7C\x46\x28\xD8\x79\x87\x2B\xD9\x70\x22\x6E\xC8\x79\x21\xDC\xB0\x4A\x24\xDC\x66\x8B",
			"\x37\xD7\x68\x23\x7A\xD9\xDF\x71\x23\x7D\xC4\x8E\x21\xE0\x7E\xEE\x6F\x20\xE1\xA7\x50\x28\xE1\xE1\xE4\x51\x2F\xD6\x24\x8B\xF0\x63\x25\xE4\xE4\x54\x24\xE4\x68\x95\x17\xEC\x6E\x25\x9A\xFC\x57\x25\xE7\x91\x58\x27\xDD\x26\xA0\xD7\x6A\x25\xE9\x8C\xF5\x6B\x24\xEA\x14\x9C\x2B\xD9\x27\xAC\xD1\x6E\x25\xEC\xAE\x5F\x2F\xA8\x28\xB4\xFB\x71\x29\xEE\x8E\x62\x2C\xEF\x75\xA3\x0F\x84\x28\x41\xA5\x3F\xE7\x6A\x29\xC6\xCB\x67\x29\xF2\xA9\xCD\xFE\xF1\xA0\xA8\x0C\xF9\x61\x2A\xD2\xCF\xF0\x8C\x30\x03\x05\x63\x71\x41\x05\x41\x00\x09\x02\x87\xB8\x03\x00\x40\xDC\xC0\x02\x6D\x40\xE7\xE6\xF4\x41\xFA\xE9\xDC\x61\x42\x67\x01\x64\x60\x00\x6B\xE8\xEB\xF6\xFD\xFD\xF8\xEA\xF1\x40\xFD\xFA\xFD\xFC\xFB\xFD\xFE\x60\x83\xFF\x79\x73\x81\x00\x84\x82\x80\x08\x87\x82\x02\x86\x8C\x81\x02\x8E\x80\x80\x05\x2F\x83\x02\x92\x8D\x81\x04\x95\x83\x82\x16\x94\x82\x06\x99\x8C\x82\x0C\x9E\x87\x82\x20\x9B\x83\x07\xA2\x81\x85\x0E\xA0\x83\x30\x23\x86\x84\x09\xE9\x7A\x7A\x06\x87\x33\x81\x6E\x29\x86\x0C\x8C\x84\x2F\x19\xAB\x86\x84\x76\x2B\x2D\x40\x13\x3C\x80\xBD\x01\x26",
			"\x2F\x01\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
