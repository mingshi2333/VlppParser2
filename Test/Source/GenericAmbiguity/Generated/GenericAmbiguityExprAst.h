/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_GENERICAMBIGUITY_EXPRAST_AST
#define VCZH_PARSER2_UNITTEST_GENERICAMBIGUITY_EXPRAST_AST

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace genericambiguity
{
	class BinaryExpr;
	class CallExpr;
	class Expr;
	class ExprToResolve;
	class GenericExpr;
	class Module;
	class PostfixExpr;
	class RefExpr;

	enum class PostfixOp
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		Add = 0,
		Increment = 1,
	};

	enum class BinaryOp
	{
		UNDEFINED_ENUM_ITEM_VALUE = -1,
		LT = 0,
		GT = 1,
	};

	class Expr abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<Expr>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(ExprToResolve* node) = 0;
			virtual void Visit(RefExpr* node) = 0;
			virtual void Visit(GenericExpr* node) = 0;
			virtual void Visit(CallExpr* node) = 0;
			virtual void Visit(PostfixExpr* node) = 0;
			virtual void Visit(BinaryExpr* node) = 0;
		};

		virtual void Accept(Expr::IVisitor* visitor) = 0;

	};

	class RefExpr : public Expr, vl::reflection::Description<RefExpr>
	{
	public:
		vl::glr::ParsingToken name;

		void Accept(Expr::IVisitor* visitor) override;
	};

	class GenericExpr : public Expr, vl::reflection::Description<GenericExpr>
	{
	public:
		vl::glr::ParsingToken name;
		vl::collections::List<vl::Ptr<Expr>> args;

		void Accept(Expr::IVisitor* visitor) override;
	};

	class CallExpr : public Expr, vl::reflection::Description<CallExpr>
	{
	public:
		vl::Ptr<Expr> func;
		vl::collections::List<vl::Ptr<Expr>> args;

		void Accept(Expr::IVisitor* visitor) override;
	};

	class PostfixExpr : public Expr, vl::reflection::Description<PostfixExpr>
	{
	public:
		PostfixOp op;
		vl::Ptr<Expr> expr;

		void Accept(Expr::IVisitor* visitor) override;
	};

	class BinaryExpr : public Expr, vl::reflection::Description<BinaryExpr>
	{
	public:
		BinaryOp op;
		vl::Ptr<Expr> left;
		vl::Ptr<Expr> right;

		void Accept(Expr::IVisitor* visitor) override;
	};

	class Module : public vl::glr::ParsingAstBase, vl::reflection::Description<Module>
	{
	public:
		vl::Ptr<Expr> expr;
	};

	class ExprToResolve : public Expr, vl::reflection::Description<ExprToResolve>
	{
	public:
		vl::collections::List<vl::Ptr<Expr>> candidates;

		void Accept(Expr::IVisitor* visitor) override;
	};
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			DECL_TYPE_INFO(genericambiguity::Expr)
			DECL_TYPE_INFO(genericambiguity::Expr::IVisitor)
			DECL_TYPE_INFO(genericambiguity::RefExpr)
			DECL_TYPE_INFO(genericambiguity::GenericExpr)
			DECL_TYPE_INFO(genericambiguity::CallExpr)
			DECL_TYPE_INFO(genericambiguity::PostfixOp)
			DECL_TYPE_INFO(genericambiguity::PostfixExpr)
			DECL_TYPE_INFO(genericambiguity::BinaryOp)
			DECL_TYPE_INFO(genericambiguity::BinaryExpr)
			DECL_TYPE_INFO(genericambiguity::Module)
			DECL_TYPE_INFO(genericambiguity::ExprToResolve)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(genericambiguity::Expr::IVisitor)
				void Visit(genericambiguity::ExprToResolve* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(genericambiguity::RefExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(genericambiguity::GenericExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(genericambiguity::CallExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(genericambiguity::PostfixExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

				void Visit(genericambiguity::BinaryExpr* node) override
				{
					INVOKE_INTERFACE_PROXY(Visit, node);
				}

			END_INTERFACE_PROXY(genericambiguity::Expr::IVisitor)

#endif
#endif
			/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
			/// <returns>Returns true if this operation succeeded.</returns>
			extern bool GenericAmbiguityExprAstLoadTypes();
		}
	}
}
#endif