/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityExprAst_Builder.h"

namespace genericambiguity
{
	namespace builder
	{

/***********************************************************************
BinaryExprBuilder
***********************************************************************/

		BinaryExprBuilder& BinaryExprBuilder::left(const vl::Ptr<Expr>& value)
		{
			node->left = value;
			return *this;
		}

		BinaryExprBuilder& BinaryExprBuilder::op(BinaryOp value)
		{
			node->op = value;
			return *this;
		}

		BinaryExprBuilder& BinaryExprBuilder::right(const vl::Ptr<Expr>& value)
		{
			node->right = value;
			return *this;
		}

/***********************************************************************
CallExprBuilder
***********************************************************************/

		CallExprBuilder& CallExprBuilder::args(const vl::Ptr<Expr>& value)
		{
			node->args.Add(value);
			return *this;
		}

		CallExprBuilder& CallExprBuilder::func(const vl::Ptr<Expr>& value)
		{
			node->func = value;
			return *this;
		}

/***********************************************************************
DecrementExprBuilder
***********************************************************************/

		DecrementExprBuilder& DecrementExprBuilder::expr(const vl::Ptr<Expr>& value)
		{
			node->expr = value;
			return *this;
		}

/***********************************************************************
ExprToResolveBuilder
***********************************************************************/

		ExprToResolveBuilder& ExprToResolveBuilder::candidates(const vl::Ptr<Expr>& value)
		{
			node->candidates.Add(value);
			return *this;
		}

/***********************************************************************
GenericExprBuilder
***********************************************************************/

		GenericExprBuilder& GenericExprBuilder::args(const vl::Ptr<Expr>& value)
		{
			node->args.Add(value);
			return *this;
		}

		GenericExprBuilder& GenericExprBuilder::name(const vl::WString& value)
		{
			node->name.value = value;
			return *this;
		}

/***********************************************************************
ModuleBuilder
***********************************************************************/

		ModuleBuilder& ModuleBuilder::expr(const vl::Ptr<Expr>& value)
		{
			node->expr = value;
			return *this;
		}

/***********************************************************************
PostfixExprBuilder
***********************************************************************/

		PostfixExprBuilder& PostfixExprBuilder::expr(const vl::Ptr<Expr>& value)
		{
			node->expr = value;
			return *this;
		}

		PostfixExprBuilder& PostfixExprBuilder::op(PostfixOp value)
		{
			node->op = value;
			return *this;
		}

/***********************************************************************
RefExprBuilder
***********************************************************************/

		RefExprBuilder& RefExprBuilder::name(const vl::WString& value)
		{
			node->name.value = value;
			return *this;
		}
	}
}
