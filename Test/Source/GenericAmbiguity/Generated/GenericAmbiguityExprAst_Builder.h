/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_GENERICAMBIGUITY_EXPRAST_AST_BUILDER
#define VCZH_PARSER2_UNITTEST_GENERICAMBIGUITY_EXPRAST_AST_BUILDER

#include "GenericAmbiguityExprAst.h"

namespace genericambiguity
{
	namespace builder
	{
		class BinaryExprBuilder
		{
		private:
			BinaryExpr* node;
		public:
			BinaryExprBuilder(BinaryExpr* _node) : node(_node) {}
			BinaryExprBuilder& left(const vl::Ptr<Expr>& value);
			BinaryExprBuilder& op(BinaryOp value);
			BinaryExprBuilder& right(const vl::Ptr<Expr>& value);
		};

		class CallExprBuilder
		{
		private:
			CallExpr* node;
		public:
			CallExprBuilder(CallExpr* _node) : node(_node) {}
			CallExprBuilder& args(const vl::Ptr<Expr>& value);
			CallExprBuilder& func(const vl::Ptr<Expr>& value);
		};

		class DecrementExprBuilder
		{
		private:
			DecrementExpr* node;
		public:
			DecrementExprBuilder(DecrementExpr* _node) : node(_node) {}
			DecrementExprBuilder& expr(const vl::Ptr<Expr>& value);
		};

		class ExprToResolveBuilder
		{
		private:
			ExprToResolve* node;
		public:
			ExprToResolveBuilder(ExprToResolve* _node) : node(_node) {}
			ExprToResolveBuilder& candidates(const vl::Ptr<Expr>& value);
		};

		class GenericExprBuilder
		{
		private:
			GenericExpr* node;
		public:
			GenericExprBuilder(GenericExpr* _node) : node(_node) {}
			GenericExprBuilder& args(const vl::Ptr<Expr>& value);
			GenericExprBuilder& name(const vl::WString& value);
		};

		class ModuleBuilder
		{
		private:
			Module* node;
		public:
			ModuleBuilder(Module* _node) : node(_node) {}
			ModuleBuilder& expr(const vl::Ptr<Expr>& value);
		};

		class PostfixExprBuilder
		{
		private:
			PostfixExpr* node;
		public:
			PostfixExprBuilder(PostfixExpr* _node) : node(_node) {}
			PostfixExprBuilder& expr(const vl::Ptr<Expr>& value);
			PostfixExprBuilder& op(PostfixOp value);
		};

		class RefExprBuilder
		{
		private:
			RefExpr* node;
		public:
			RefExprBuilder(RefExpr* _node) : node(_node) {}
			RefExprBuilder& name(const vl::WString& value);
		};

		using MakeBinaryExpr = vl::glr::ParsingAstBuilder<BinaryExpr, BinaryExprBuilder>;
		using MakeCallExpr = vl::glr::ParsingAstBuilder<CallExpr, CallExprBuilder>;
		using MakeDecrementExpr = vl::glr::ParsingAstBuilder<DecrementExpr, DecrementExprBuilder>;
		using MakeExprToResolve = vl::glr::ParsingAstBuilder<ExprToResolve, ExprToResolveBuilder>;
		using MakeGenericExpr = vl::glr::ParsingAstBuilder<GenericExpr, GenericExprBuilder>;
		using MakeModule = vl::glr::ParsingAstBuilder<Module, ModuleBuilder>;
		using MakePostfixExpr = vl::glr::ParsingAstBuilder<PostfixExpr, PostfixExprBuilder>;
		using MakeRefExpr = vl::glr::ParsingAstBuilder<RefExpr, RefExprBuilder>;
	}
}
#endif