/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityExprAst_Traverse.h"

namespace genericambiguity
{
	namespace traverse_visitor
	{
		void ExprAstVisitor::Traverse(vl::glr::ParsingToken& token) {}
		void ExprAstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
		void ExprAstVisitor::Traverse(BinaryExpr* node) {}
		void ExprAstVisitor::Traverse(CallExpr* node) {}
		void ExprAstVisitor::Traverse(Expr* node) {}
		void ExprAstVisitor::Traverse(ExprToResolve* node) {}
		void ExprAstVisitor::Traverse(GenericExpr* node) {}
		void ExprAstVisitor::Traverse(Module* node) {}
		void ExprAstVisitor::Traverse(PostfixExpr* node) {}
		void ExprAstVisitor::Traverse(RefExpr* node) {}

		void ExprAstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
		void ExprAstVisitor::Finishing(BinaryExpr* node) {}
		void ExprAstVisitor::Finishing(CallExpr* node) {}
		void ExprAstVisitor::Finishing(Expr* node) {}
		void ExprAstVisitor::Finishing(ExprToResolve* node) {}
		void ExprAstVisitor::Finishing(GenericExpr* node) {}
		void ExprAstVisitor::Finishing(Module* node) {}
		void ExprAstVisitor::Finishing(PostfixExpr* node) {}
		void ExprAstVisitor::Finishing(RefExpr* node) {}

		void ExprAstVisitor::Visit(ExprToResolve* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<ExprToResolve*>(node));
			for (auto&& listItem : node->candidates)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<ExprToResolve*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void ExprAstVisitor::Visit(RefExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<RefExpr*>(node));
			Traverse(node->name);
			Finishing(static_cast<RefExpr*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void ExprAstVisitor::Visit(GenericExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<GenericExpr*>(node));
			for (auto&& listItem : node->args)
			{
				InspectInto(listItem.Obj());
			}
			Traverse(node->name);
			Finishing(static_cast<GenericExpr*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void ExprAstVisitor::Visit(CallExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<CallExpr*>(node));
			for (auto&& listItem : node->args)
			{
				InspectInto(listItem.Obj());
			}
			InspectInto(node->func.Obj());
			Finishing(static_cast<CallExpr*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void ExprAstVisitor::Visit(PostfixExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<PostfixExpr*>(node));
			InspectInto(node->expr.Obj());
			Finishing(static_cast<PostfixExpr*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void ExprAstVisitor::Visit(BinaryExpr* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Expr*>(node));
			Traverse(static_cast<BinaryExpr*>(node));
			InspectInto(node->left.Obj());
			InspectInto(node->right.Obj());
			Finishing(static_cast<BinaryExpr*>(node));
			Finishing(static_cast<Expr*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void ExprAstVisitor::InspectInto(Expr* node)
		{
			if (!node) return;
			node->Accept(static_cast<Expr::IVisitor*>(this));
		}

		void ExprAstVisitor::InspectInto(Module* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Module*>(node));
			InspectInto(node->expr.Obj());
			Finishing(static_cast<Module*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

	}
}
