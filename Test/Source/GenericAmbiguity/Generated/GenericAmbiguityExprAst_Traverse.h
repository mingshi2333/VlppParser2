/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_GENERICAMBIGUITY_EXPRAST_AST_TRAVERSE_VISITOR
#define VCZH_PARSER2_UNITTEST_GENERICAMBIGUITY_EXPRAST_AST_TRAVERSE_VISITOR

#include "GenericAmbiguityExprAst.h"

namespace genericambiguity
{
	namespace traverse_visitor
	{
		/// <summary>A traverse visitor, overriding all abstract methods with AST visiting code.</summary>
		class ExprAstVisitor
			: public vl::Object
			, protected virtual Expr::IVisitor
		{
		protected:
			virtual void Traverse(vl::glr::ParsingToken& token);
			virtual void Traverse(vl::glr::ParsingAstBase* node);
			virtual void Traverse(BinaryExpr* node);
			virtual void Traverse(CallExpr* node);
			virtual void Traverse(Expr* node);
			virtual void Traverse(ExprToResolve* node);
			virtual void Traverse(GenericExpr* node);
			virtual void Traverse(Module* node);
			virtual void Traverse(RefExpr* node);

		protected:
			virtual void Finishing(vl::glr::ParsingAstBase* node);
			virtual void Finishing(BinaryExpr* node);
			virtual void Finishing(CallExpr* node);
			virtual void Finishing(Expr* node);
			virtual void Finishing(ExprToResolve* node);
			virtual void Finishing(GenericExpr* node);
			virtual void Finishing(Module* node);
			virtual void Finishing(RefExpr* node);

		protected:
			void Visit(ExprToResolve* node) override;
			void Visit(RefExpr* node) override;
			void Visit(GenericExpr* node) override;
			void Visit(CallExpr* node) override;
			void Visit(BinaryExpr* node) override;

		public:
			void InspectInto(Expr* node);
			void InspectInto(Module* node);
		};
	}
}
#endif