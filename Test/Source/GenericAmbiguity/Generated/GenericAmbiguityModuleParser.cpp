/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2677; // 22172 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 117;
		static const vl::vint dataSolidRows = 10;
		static const vl::vint dataRows = 11;
		static const char* compressed[] = {
			"\x9C\x56\x00\x00\x6D\x0A\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x84\x10\x0A\xA9\x0A\x84\x71\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8D\x15\x96\x9D\x9A\x8A\x83\x90\x92\x91\x23\x9B\xA6\x9F\x7A\x96\x91\x97\x94\x0A\xA1\x86\x82\x05\x96\x95\x9A\x98\x28\x9D\xAF\x9A\x97\x9C\x9D\x9C\x8F\x3D\xC0\xBF\x98\x8B\x9A\xA2\x83\x95\x45\xC4\x81\xAA\xA3\xA7\x93\xA2\x9B\x09\x83\x31\x8B\xAE\xA3\x80\xA4\x85\x04\x53\x8D\xAC\x94\xAC\xAF\xAD\x8D\x08\xB3\x9D\xA9\xA5\xAA\x83\xAB\x84\x07\x5A\x8F\xB8\x9B\xB6\x9D\xB6\xA3\x56\xD0\xAF\xAC\xA3\xBD\xB1\x80\x04\x0A\xB4\x9F\xAA\x8A\x02\xB5\xB8\xB6\x7F\xEE\x81\xD0\xB6\xB2\xBB\xC0\xBA\x87\xF6\x9C\x86\xC5\xC0\xC1\xC6\xC1\x8F\x84\xC1\x87\xB5\xBE\xAD\xCA\xB2\x96\x89\xD9\xCB\x8E\xBA\x80\x07\xCE\x93\x8C\xE1\xCE\xC3\xD0\xC9\xD2\xC9\x8B\xA4\xE9\xC6\xDB\xD0\xD4\xCB\x81\x0D\x20\xED\xC8\xC1\xCC\xDB\xD2\xDB\xB3\x8A\xEF\xD5\xDA\xC6\x06\xD9\xDD\xB7\xBA\xE2\xD9\xDB\xC9\xE1\xE2\xE2\x98\xC9\xE3\xAB\xE9\x87\x07\xDF\xE1\xC0\xC8\xCC\xF7\xC3\xEA\xCE\xE5\xBD\xD8\xD4\xD9\xF6",
			"\xEA\x80\x0B\xE6\xD5\xD1\xE1\xD0\xE3\xF0\xF4\xF0\xD7\xE8\x11\x5F\xE7\xE6\xFE\xD4\xF4\xDD\xE8\x12\x79\x95\xFC\xD7\xE1\xE8\x0A\xF5\xED\xE5\xFA\xEB\xFB\xF8\xD5\x0A\xF9\xDB\x74\x77\x76\x76\x04\x9C\x71\x82\x71\x03\x86\x85\x82\x80\xF3\x48\x8A\x43\x05\xB2\x58\x08\x7F\x7B\xEE\x42\x7D\x7C\x6E\x19\x00\x8B\x82\x83\x07\x80\x0B\x07\x84\x16\xBC\x72\x89\x7E\x23\xB8\x6C\x06\x86\x0A\x83\x4E\x06\x6C\x1F\x20\x85\x7D\x85\x2F\x97\x81\x88\x89\x34\x94\x82\x8D\x8C\x25\x8A\x60\x45\x42\x32\x69\x8C\x81\x42\x21\x2E\x89\x83\x8F\x1B\x92\x7D\x86\x08\x42\x8D\x86\x91\x91\xE2\x77\x83\x91\x40\x23\x32\x64\x09\x92\x1D\x8D\x99\x8C\x8E\x35\xB3\x86\x8F\x95\x4F\x80\x05\x08\x95\x4C\xB0\x8D\x95\x74\x26\x28\x84\x92\x8F\x1C\xA1\x9E\x92\x92\x56\x99\x98\x97\x96\xA8\x68\x02\x6E\x44\x09\x59\x55\x96\x98\x6C\xB8\x97\x9F\x9A\x7B\x9C\x99\x9C\x9F\x45\xAD\x00\x98\x9A\x4B\x83\x4E\x0A\x6C\x2F\x18\x5F\x9E\x9F\x7D\xAE\x93\x9A\x9E\x06\x73\x02\x6C\x0D\x8A\x8D\xA0\x9F\xA5\x5A\x99\xAF\x9A\xA6\x8F\x80\xA4\xA1\x9B\x98\x9B\xA2\xAB\x46\x38\x03\xA7\x9A\x40\x39\x32\x6A\x0D\xA5",
			"\x6A\x8C\xAD\xAA\xA3\x8B\xB0\xA6\xA4\xA7\xB1\xA1\xAD\x96\x0F\xA6\xA9\x9F\xA4\xA4\xBB\x9E\xA7\xAA\xAE\x02\x7F\x09\xAD\xA1\xBF\x84\xB0\xB3\xB1\xC6\x89\xB0\xA8\xAD\x09\x40\x13\xB3\xB2\xA3\xB5\xAC\xB3\xAB\xB6\x8A\x41\x13\xB3\xC3\x42\x12\x6F\x10\xAC\xBD\xAE\xAA\xB7\xB2\x94\xB3\xB4\xB8\xB8\x47\x18\xB6\xAF\xC8\x90\xBB\x44\x12\x66\xA9\xBC\xAD\xB1\xEA\x92\xB1\xB7\xAC\xF3\xA2\xB7\x72\x12\xE7\x9F\xB0\xBF\xBB\x01\x4B\x1D\xB9\xB2\x4D\x32\x6E\x13\xBF\xF1\xB4\xBD\xA6\xBE\xEE\xA8\xB9\xB0\x14\xF9\xA1\xB4\xBB\xB8\x02\x51\x14\xC3\x70\x53\x32\x64\x17\xC4\x0A\xC5\xC6\xBF\xC1\x0E\xFB\xB9\xC7\x70\x56\x0D\xC5\xB6\xC1\xF2\x9C\xC3\xC9\x91\x57\x22\xC0\xC5\xC2\xAC\x58\x12\x6D\x16\x18\xC8\xCA\xB0\xBF\x33\xDF\xC6\xCC\x6B\x5B\x2A\xC5\xBF\xC3\x3B\xC2\x4C\x15\xCC\x1D\xEC\xC1\xD1\xCD\x32\xDA\xCC\xCF\x46\x5E\x3A\xC6\xCB\xCA\x44\xC3\xD6\xD2\x40\xE2\x3F\xB1\x58\xCF\x2B\x69\x59\x40\x5E\x5B\x7A\x56\x40\xD6\xF6\x95\xDA\x43\x67\x59\xCA\x43\xD6\xC7\x2B\x5D\x46\xD7\xD6\x5D\x5A\xD3\x40\xD7\x54\xE6\x47\xDB\x40\x60\xD5\x6A\xDB\x41\xF2\x9E\xD7\xD5\xDA\x0A",
			"\x6C\xD4\xD9\xD9\x18\x6F\xDE\x65\x57\x63\xC6\x7B\x49\xE0\xC4\x43\xED\x57\x4A\x73\xC1\x44\xE0\xB4\x76\xE8\xD1\xDB\xDD\xF4\x8D\xE0\xDC\xDE\x09\x4B\xE0\x8E\xE4\x02\x7A\xD6\x71\xE2\x00\x1A\xED\xD0\xDF\xFF\x3E\xD1\x41\xDC\x9A\x5C\xE6\xE7\x8D\x98\xF7\x54\xE6\xE3\x5D\xEE\xDF\xD7\xEA\x03\x67\xE7\x95\xEA\x9D\xF0\xE9\xE5\xDD\xAE\xC9\x44\xE8\x7D\xB2\xE0\xEF\x3D\xEF\xA0\xD2\x5C\x8D\x57\xA2\xC0\x06\x9D\x65\xC0\xFC\xD9\xF1\xD9\xC2\xC6\x4D\x8C\x7D\xC5\xC7\xF5\xEA\xD8\xB8\xE3\x45\xF2\xE7\x88\xF9\xD5\xF6\xD9\xAF\xDB\x5F\xF1\x40\x9C\xF4\xEC\x43\x56\xCB\xEB\x4F\xF4\x00\xE1\xF9\xE6\x43\xF8\xC8\xC7\xE6\x49\xF3\x03\x45\xF4\xED\x5F\xDE\xC0\xDD\xDE\x42\xEC\xDA\x65\xFB\xFB\x0A\x72\xFA\xFB\x40\xF4\x75\x33\xF9\x69\x76\x7A\xFC\x40\x76\x7D\x23\x30\x7E\x40\x04\x8C\x7B\xCA\x5D\x2B\x80\xC4\x66\x80\xF9\x08\x8D\x22\x05\x81\x26\x7F\x05\x89\x21\x00\x9A\x37\x7C\xCC\x05\x79\x7F\xBC\x74\x81\x46\x1D\x81\x83\x84\x20\x86\x38\xFB\x69\x81\xFF\x25\x86\x21\x0D\xB4\x3C\x84\x5B\x3F\x83\x01\xDB\x2B\x24\x0B\x80\x00\x83\x0D\x8D\x87\x03\x9F\x21\x86\x09\xAD\x7C",
			"\x86\xFC\x69\x20\x03\x99\x25\x79\xE5\x70\x85\x32\x32\x93\x80\x10\xAA\x88\x2C\x16\x80\x83\x86\x95\x26\x73\x12\x95\x8B\x85\x1E\x9A\x80\x8A\x9A\x35\x85\x15\xC8\x8C\x2E\x2C\xB4\x3A\x8B\x42\x8E\x88\xDD\x4A\x81\x8B\x20\x86\x20\x87\x44\x9D\x89\xFD\x43\x76\x8B\xF5\x5E\x8A\x70\x26\x27\x7F\xF9\x62\x7F\x8D\xC2\x66\x89\x7E\x62\x81\x22\x0B\xC6\x32\x8F\x3C\x80\x07\x84\xC4\x29\x84\x15\xCD\x8D\x8D\x27\xAB\x8E\x79\x7E\x80\x92\x14\xE5\x8C\x88\xB1\x05\x93\x8C\x02\x8E\x45\x12\xBF\x8C\x91\x41\xA7\x8E\x8F\x7B\x81\x92\x08\x98\x22\x91\x8C\x36\x80\x8D\xF7\x77\x88\x19\xD9\x87\x8E\x81\x20\x97\x22\xC5\x79\x93\x22\xA4\x9D\x91\x81\x03\x89\x94\x06\x2B\x79\x27\x98\x2F\x92\x4C\xB6\x72\x71\xDB\x69\x8C\xE4\x72\x6A\x7B\xC8\x7F\x7F\x6F\x8F\x71\x95\x2E\xB0\x9B\x6D\x5B\xB5\x76\x97\x19\x86\x23\xEE\x7C\x8C\x86\x2E\xAC\x8C\x92\xAC\x9D\x23\x11\x9A\x35\x79\x39\xA6\x23\x96\x17\x36\x86\x07\xCD\x9C\x82\x6E\x90\x7E\x45\xD8\x9F\x1E\x36\xFE\x88\x32\xD3\x43\x98\x95\xBD\x9C\x97\x2E\xED\x69\x99\xC9\x47\x93\x20\xD6\x8D\x9E\x40\x71\x9D\x23\x70\xBD\x8F\x91\x01\x34",
			"\x9D\x46\x61\x93\x9C\x7C\x9F\x26\x7C\x92\x80\x9F\x26\xD9\x9E\x9A\xE3\x05\x78\x33\xE1\x9C\x9D\x41\xC4\x37\xA1\x3A\xBE\x76\x93\x0B\xB4\x75\x39\x8A\x26\x00\x63\x95\xA1\x98\xB1\x67\x9D\xE8\x69\x93\x7B\x84\x17\xA2\x9D\xAC\x6C\x9D\x0E\xEE\x90\x9B\x2F\xBF\x97\x82\x5D\x32\x7A\x49\xA3\x2A\xA4\x38\xAC\xA3\xA0\x1B\xA4\x91\x65\x2D\xA6\x8E\x79\x81\x26\x86\xB4\x78\xA7\x49\xE8\x7E\x8F\x57\xA8\x99\x21\x00\x3B\x28\x1B\x0B\xA0\x83\xA8\x04\xAF\x5F\xFD\x88\x91\x18\xC6\xA5\x4E\xD9\x1C\x76\x86\x34\xA5\xAA\x41\x50\xAE\xA8\x85\x36\x84\x70\x52\xA3\x23\x55\xD5\xAC\xA8\x61\x8F\x9E\x95\x56\xA1\xAD\x57\xDA\xA4\xA2\xAE\x93\xAD\xAC\x5F\xAB\x82\x58\x86\x2F\xA2\x78\x88\xAB\x8B\x6E\xAB\xAB\x59\xB2\xA1\xAE\x47\xB3\xAF\x92\x69\xA0\x7F\x5A\xE0\xA3\xAC\xB5\xBD\xAA\xAF\x7F\xA0\x01\x56\x82\x26\x87\xC1\xB7\xA6\xAC\x64\xAB\x9E\x5F\xF7\xA5\x98\xB9\x89\xB1\xA4\x8B\xAF\xB3\x40\x41\xA6\xAE\xC9\x82\x24\xB2\x7C\xAC\xB3\x65\xEF\xA2\x94\xA5\x95\xB4\xB0\x6A\x9E\xB1\x66\x96\xBA\x8E\xC4\xA0\xB6\x84\x7B\xB0\x90\x37\xD7\x16\xB5\x80\x32\x4D\xA0\xD8\x12\x37\xF9\x2D",
			"\x45\xA1\x6C\x32\x33\x23\xF1\x25\xA2\x36\x32\x3B\xAB\x82\x9B\x1C\xB7\x0A\x38\xB1\x33\xDC\x10\xB9\x84\x1E\x3D\xA0\xDD\x05\xBA\x41\x47\xBE\x9A\x6F\x2D\xB0\x00\x51\x45\xA3\x37\x4F\xBF\x4B\x82\xA0\x1A\xB9\x03\x2B\x07\x42\xE1\x12\x37\x2F\x0B\xA1\x93\x4B\x7D\x64\x0F\xED\xAB\xA1\xBA\xA6\xB9\xB2\xC5\x5B\x21\x43\x81\xB7\x7C\x9A\xBE\xA7\x38\x9C\x60\xBD\xC9\x0B\xAE\xBD\x6E\x4D\x9F\x69\xC8\x5C\x70\x79\xE3\xB2\x37\xE2\x5C\x74\xA6\xF5\xB4\xAD\x33\xC2\xB9\x9F\xD0\xA3\xB7\x76\x4D\xA1\xB2\x7C\xA4\x6A\x76\xFB\x87\xB6\xA3\x0B\xAB\x9A\x60\x8A\x21\x36\xC7\x82\x24\xB9\x03\x34\xA5\x2D\x85\xAE\x39\xBC\x80\x00\xC3\xE8\xA1\x23\x7D\x09\xC6\x21\xA8\x8B\xA1\xB7\xA2\xBB\x6C\x6E\x04\x74\xA7\xF0\x9D\x4C\x70\x49\xA7\x6A\x92\x7B\xBC\xA7\x82\xB8\xB9\x59\xD5\x8B\xA2\x43\x1E\xC7\xC6\xCF\x53\x9A\x20\x23\xC9\xC6\xD0\x38\x34\xC1\x63\x9E\x9F\xC6\xD1\x39\x93\x82\x9B\x6A\x20\x09\x64\xC6\x90\x6C\xAB\xA3\x7F\x1E\xC6\x03\x7F\x67\x47\xC9\x02\x39\x93\x7A\x86\x2E\xC8\x21\xC0\x01\x43\x16\xC1\x23\x8E\x25\xCE\x86\x28\xDC\x9F\xC6\x53\x5E\xC0\x20\xB4\xCB\x23\x0F",
			"\x5E\xC7\xCA\x9F\xA1\x21\x75\xDE\xC0\x91\x2D\xEA\x44\x45\xFF\x45\x4E\x87\x95\xCA\x86\x1B\xF4\x67\x04\x0E\xC0\x00\x9F\x83\x2D\xC3\x23\xF4\x61\x3A\x83\xC2\x20\x9B\x8A\x21\x48\x0F\xC8\x49\xCC\x00\x1A\xB8\x96\x81\x29\xD0\x94\x85\xA1\xCD\x5E\xD3\xCF\x81\x81\x29\x51\x49\xC0\x06\x37\x9D\xA7\xCC\xCD\x12\x5E\xD2\x50\xD1\xCD\xA0\x80\xDE\xC3\x6B\xF1\xC0\x01\x1B\x01\xD6\xD4\x78\x85\xA2\x0A\x32\x32\xD2\x56\xFB\x01\xD0\x85\xC4\xA4\x37\x82\x5C\xC6\x9A\x79\xD2\x20\xE9\x25\xA3\xA1\x10\xD0\x07\x61\x60\xC1\x20\xBF\xDC\x84\x92\xC3\x37\xD9\x4F\xD1\xA7\xD0\xC3\x21\xDA\x41\x15\xDF\x9E\x68\xEA\x30\xC5\xBA\xCD\x99\x0C\x4A\x6A\x20\x6C\xC0\xDB\xA1\x32\x1F\x5C\xA5\x3D\xDA\x35\x1D\xFD\xCE\xD0\x0A\x62\x58\xA4\xE6\xD3\x21\x45\xC9\x25\x06\xB2\x36\x07\xBF\x57\x5B\xDC\xB8\x8D\x9D\x54\x1E\xC9\x54\xA4\xDC\x50\xD3\x29\xC6\x21\xC8\xDC\x97\xD5\x60\xB7\xCE\xDF\x81\x2E\xCE\x9B\xB8\x5E\xD2\xB6\x64\xDC\x35\x82\xC2\x20\xCE\xDC\x9C\xDC\x99\x89\x26\x5C\x86\xFE\x3A\x21\x1D\x0B\xA0\xBB\x1E\xDC\x09\x61\x4E\xE1\x20\x2B\x45\xA1\xC0\x1E\xD2\x62\x8B\xF8\x35\xCA",
			"\x09\x3F\xE1\xB5\xB7\x68\x34\x08\x49\x20\xE0\xCD\x92\x09\x6A\xC3\xCA\x30\x97\xC6\x27\xE0\xDC\x95\x09\xA0\xB0\x66\xE5\x9A\xCA\x20\xE2\xCD\x9A\x09\xA0\xC9\x6D\xE7\xE3\x36\xE3\x20\x19\xE5\xA2\x77\x9E\xD3\x0D\x61\x47\xEA\x20\x21\xFE\x98\x19\x01\xD8\x0D\x61\x5D\xCB\x20\x30\xFC\x85\x1A\x5C\xD9\x21\xAB\xC2\x20\xE7\xCD\x8A\x0F\xBF\x43\xA5\xE9\x8D\x1E\xE9\x20\x40\xFC\x85\x1B\x7F\x5F\x0C\xAB\xD8\xE3\xA1\x70\x1F\x5E\x1C\x6E\xE9\x21\xA8\xDC\x9B\x0E\xFF\x55\x0F\xB0\x60\xCC\xCB\x67\xEC\xE0\x37\x1A\x0A\x21\xD6\x9F\x26\x0F\x99\xDF\x72\x31\x81\xE9\x20\xD8\xBC\x89\x0F\x40\xFD\x0B\x58\x89\xE6\x21\xDA\x9F\x2E\x0F\x40\xC2\x10\xF2\x6F\xE5\xA3\x20\x01\xD7\x10\xCC\xF5\xEB\xA1\x88\x01\xD0\x23\x43\x5B\xF0\x00\x28\xE0\xDD\x45\x63\x3B\xE4\xCF\xEA\xD8\x6B\xEC\x31\xE9\x06\x3C\xEE\xA8\xFF\xEA\x30\xBB\xC2\x21\xF2\xB3\xE9\xF6\x6A\x34\xBF\xDF\x85\x8D\x14\xEB\x06\x3C\xF6\xC1\x8B\xAE\x11\x7F\x50\x13\x58\xC2\xEF\xE3\x42\x91\x1F\x5F\x49\x08\xF9\xF3\xDE\x94\x13\xBF\x16\x1F\xF9\xCF\xC5\xA7\x12\xFF\x59\x13\xB0\x63\xC6\xCD\xFB\xB4\x65\x08\x86\xFC\xFA",
			"\xA2\x8B\xAA\x12\xD9\x1B\x17\x5F\x1B\xFA\xB2\x98\xF6\xDC\x87\x4E\x32\x36\x13\xFF\x5E\x5D\x60\x8F\xD7\xDD\xDC\xC3\x6B\x60\xF3\xE8\xAE\x37\xA0\x12\x37\x50\x3F\x5D\xE4\xEA\x70\x00\xF4\x71\x6B\xDE\x43\x0A\xB2\x14\x0A\xFF\x27\x31\x81\x51\x5D\x06\x1D\x68\xDE\x46\x0A\x86\x77\x63\x0C\x83\x10\x7A\x6E\x4D\xA9\x01\x68\xAD\x03\x2C\x13\x82\x10\xA9\x6E\x4D\xAE\x01\x68\xB2\x03\x2C\x98\x6D\x7D\xAD\x7A\x30\x29\x31\x58\x23\x83\x7E\x05\x53\x0B\xB2\x14\x0B\xFF\x22\x74\x28\x8C\x7E\x1F\x16\x0B\xB2\x17\x0B\xFF\x2D\x05\x86\x7A\x69\x02\x1E\x80\xDC\x49\x0B\x11\x84\x33\x3A\x81\x10\x15\x8C\x4D\xBC\x01\x68\xC0\x03\x2C\x41\x80\x00\x1D\x8C\x4D\xC1\x01\x68\xC5\x03\x2C\x43\x82\x10\x03\x8E\x7D\xB4\x77\x1C\x4B\x82\x10\x29\x85\x82\xBA\x7C\x1A\xAB\x63\x10\x3C\x8D\x4C\xC6\x00\x7C\x03\x1D\x85\x02\x11\x85\x3C\x47\x0C\xFF\x29\x0C\xC3\x24\x86\x01\x17\x85\x3C\x4A\x0C\xFF\x2C\x0C\xC3\x24\x27\xF5\x7D\x4C\xCD\x03\x2C\x60\x01\x68\x74\x8D\x6E\x0B\x5E\x0C\xFF\x20\x0D\xFF\x23\x75\x9E\x6B\x87\xA6\x4B\x50\xD2\x0F\x2F\xD4\x0F\x2F\x55\x7E\x69\xB5\x63\x10\xB3\x65",
			"\x50\xD6\x02\x86\x02\x1C\x02\x7E\x7C\x1A\x85\x30\x12\xE5\x5F\x63\xF3\x49\x89\x9C\x85\x5E\xE5\x5C\x39\x1F\x10\x8A\x1B\x10\x8A\xFA\x44\x14\xA5\x88\x11\xF7\x4E\x61\x1D\x49\x8A\x5E\x6B\x8A\xB7\x5A\x89\x80\x57\x19\xEF\x5F\x0F\x9C\x30\x8A\xB5\x83\x8A\xB7\x5F\x5F\xB8\x8E\x69\x35\x61\x80\xBD\x8B\x69\xB1\x87\x5E\x21\x66\x3C\xBB\x8E\x8B\xA2\x8F\x83\x29\x1A\x53\xA5\x45\x60\x86\x7D\x41\x36\x40\x8A\xCF\x8B\x11\x85\x52\x8D\xFF\x20\x00\x31\x69\x61\x63\x14\x53\x65\x3D\x62\x1B\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp2] BEGIN ",
			L"[20][Exp2] END [ENDING]",
			L"[21][Exp2]< Exp2 \"+\" \"+\" @ >",
			L"[22][Exp2]< Exp2 \"+\" @ \"+\" >",
			L"[23][Exp2]< Exp2 \"+\" @ >",
			L"[24][Exp2]< Exp2 \"-\" \"-\" @ >",
			L"[25][Exp2]< Exp2 \"-\" @ \"-\" >",
			L"[26][Exp2]< Exp2 \"-\" @ >",
			L"[27][Exp2]< Exp2 @ \"+\" \"+\" >",
			L"[28][Exp2]< Exp2 @ \"+\" >",
			L"[29][Exp2]< Exp2 @ \"-\" \"-\" >",
			L"[30][Exp2]< Exp2 @ \"-\" >",
			L"[31][Exp2]<< !Exp1 @ >>",
			L"[32][Exp] BEGIN ",
			L"[33][Exp] END [ENDING]",
			L"[34][Exp]< Exp \"<\" @ Exp2 >",
			L"[35][Exp]< Exp \"<\" Exp2 @ >",
			L"[36][Exp]< Exp \">\" @ Exp2 >",
			L"[37][Exp]< Exp \">\" Exp2 @ >",
			L"[38][Exp]< Exp @ \"<\" Exp2 >",
			L"[39][Exp]< Exp @ \">\" Exp2 >",
			L"[40][Exp]<< !Exp2 @ >>",
			L"[41][Module] BEGIN ",
			L"[42][Module] END [ENDING]",
			L"[43][Module]< Exp @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver, ModuleParserStateTypes>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		if (class1 < 0 || class1 >= 9) throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, class1);
		if (class2 < 0 || class2 >= 9) throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, class2);
		static vl::vint32_t results[9][9] = {
			{0, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 1, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 2, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 4, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 5, -1, 3, 3, },
			{-1, -1, -1, -1, -1, -1, 6, -1, -1, },
			{3, 3, 3, 3, 3, 3, -1, 7, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 8, },
		};
		return results[class1][class2];
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
