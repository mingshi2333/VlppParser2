/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3065; // 27628 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 249;
		static const vl::vint dataSolidRows = 11;
		static const vl::vint dataRows = 12;
		static const char* compressed[] = {
			"\xEC\x6B\x00\x00\xF1\x0B\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x84\x10\x0A\xA9\x0A\x84\x71\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8D\x15\x96\x9D\x9A\x8A\x83\x90\x92\x91\x23\x9B\xA6\x9F\x7A\x96\x91\x97\x94\x0A\xA1\x86\x82\x05\x96\x95\x9A\x98\x28\x9D\xAF\x9A\x97\x9C\x9D\x9C\x8F\x3D\xC0\xBF\x98\x8B\x9A\xA2\x83\x95\x45\xC4\x81\xAA\xA3\xA7\x93\xA2\x9B\x09\x83\x31\x8B\xAE\xA3\x80\xA4\x85\x04\x53\x8D\xAC\x94\xAC\xAF\xAD\x8D\x08\xB3\x9D\xA9\xA5\xAA\x83\xAB\x84\x07\x5A\x8F\xB8\x9B\xB6\x9D\xB6\xA3\x56\xD0\xAF\xAC\xA3\xBD\xB1\x80\x04\x0A\xB4\x9F\xAA\x8A\x02\xB5\xB8\xB6\x7F\xEE\x81\xD0\xB6\xB2\xBB\xC0\xBA\x87\xF6\x9C\x86\xC5\xC0\xC1\xC6\xC1\x8F\x84\xC1\x87\xB5\xBE\xAD\xCA\xB2\x96\x89\xD9\xCB\x8E\xBA\x80\x07\xCE\x93\x8C\xE1\xCE\xC3\xD0\xC9\xD2\xC9\x8B\xA4\xE9\xC6\xDB\xD0\xD4\xCB\x81\x0D\x20\xED\xC8\xC1\xCC\xDB\xD2\xDB\xB3\x8A\xEF\xD5\xDA\xC6\x06\xD9\xDD\xB7\xBA\xE2\xD9\xDB\xC9\xE1\xE2\xE2\x98\xC9\xE3\xAB\xE9\x87\x07\xDF\xE1\xC0\xC8\xCC\xF7\xC3\xEA\xCE\xE5\xBD\xD8\xD4\xD9\xF6",
			"\xEA\x80\x0B\xE6\xD5\xD1\xE1\xD0\xE3\xF0\xF4\xF0\xD7\xE8\x11\x5F\xE7\xE6\xFE\xD4\xF4\xDD\xE8\x12\x79\x95\xFC\xD7\xE1\xE8\x0A\xF5\xED\xE5\xFA\xEB\xFB\xF8\xD5\x0A\xF9\xDB\x74\x77\x76\x76\x04\x9C\x71\x82\x71\x03\x86\x85\x82\x80\xF3\x48\x8A\x43\x05\xB2\x58\x08\x7F\x7B\xEE\x42\x7D\x7C\x6E\x19\x00\x8B\x82\x83\x07\x80\x0B\x07\x84\x16\xBC\x72\x89\x7E\x23\xB8\x6C\x06\x86\x0A\x83\x4E\x06\x6C\x1F\x20\x85\x7D\x85\x2F\x97\x81\x88\x89\x34\x94\x82\x8D\x8C\x25\x8A\x60\x45\x42\x32\x69\x8C\x81\x42\x21\x2E\x89\x83\x8F\x1B\x92\x7D\x86\x08\x42\x8D\x86\x91\x91\xE2\x77\x83\x91\x40\x23\x32\x64\x09\x92\x1D\x8D\x99\x8C\x8E\x35\xB3\x86\x8F\x95\x4F\x80\x05\x08\x95\x4C\xB0\x8D\x95\x74\x26\x28\x84\x92\x8F\x1C\xA1\x9E\x92\x92\x56\x99\x98\x97\x96\xA8\x68\x02\x6E\x44\x09\x59\x55\x96\x98\x6C\xB8\x97\x9F\x9A\x7B\x9C\x99\x9C\x9F\x45\xAD\x00\x98\x9A\x4B\x83\x4E\x0A\x6C\x2F\x18\x5F\x9E\x9F\x7D\xAE\x93\x9A\x9E\x06\x73\x02\x6C\x0D\x8A\x8D\xA0\x9F\xA5\x5A\x99\xAF\x9A\xA6\x8F\x80\xA4\xA1\x9B\x98\x9B\xA2\xAB\x46\x38\x03\xA7\x9A\x40\x39\x32\x6A\x0D\xA5",
			"\x6A\x8C\xAD\xAA\xA3\x8B\xB0\xA6\xA4\xA7\xB1\xA1\xAD\x96\x0F\xA6\xA9\x9F\xA4\xA4\xBB\x9E\xA7\xAA\xAE\x02\x7F\x09\xAD\xA1\xBF\x84\xB0\xB3\xB1\xC6\x89\xB0\xA8\xAD\x09\x40\x13\xB3\xB2\xA3\xB5\xAC\xB3\xAB\xB6\x8A\x41\x13\xB3\xC3\x42\x12\x6F\x10\xAC\xBD\xAE\xAA\xB7\xB2\x94\xB3\xB4\xB8\xB8\x47\x18\xB6\xAF\xC8\x90\xBB\x44\x12\x66\xA9\xBC\xAD\xB1\xEA\x92\xB1\xB7\xAC\xF3\xA2\xB7\x72\x12\xE7\x9F\xB0\xBF\xBB\x01\x4B\x1D\xB9\xB2\x4D\x32\x6E\x13\xBF\xF1\xB4\xBD\xA6\xBE\xEE\xA8\xB9\xB0\x14\xF9\xA1\xB4\xBB\xB8\x02\x51\x14\xC3\x70\x53\x32\x64\x17\xC4\x0A\xC5\xC6\xBF\xC1\x0E\xFB\xB9\xC7\x70\x56\x0D\xC5\xB6\xC1\xF2\x9C\xC3\xC9\x91\x57\x22\xC0\xC5\xC2\xAC\x58\x12\x6D\x16\x18\xC8\xCA\xB0\xBF\x33\xDF\xC6\xCC\x6B\x5B\x2A\xC5\xBF\xC3\x3B\xC2\x4C\x15\xCC\x1D\xEC\xC1\xD1\xCD\x32\xDA\xCC\xCF\x46\x5E\x3A\xC6\xCB\xCA\x44\xC3\xD6\xD2\x40\x42\x3D\x81\x42\x9D\x95\x6B\x4A\x5E\x41\x61\x7C\xCB\x49\x5F\x09\x78\x5B\x57\xD5\x03\x5E\xD6\xBF\xD6\x0A\x5F\x6B\x54\xD5\x9A\x6B\x48\xD8\x7D\x6A\xDD\x5D\xDB\x56\x6F\xD5\xD6\x4B\xDA\xC6\x71\xD9\xDA\x49\x60",
			"\xC7\x42\xBC\xD9\x5D\xDD\x54\xDC\x71\x76\xEC\xD3\xDE\xDB\x78\xCA\x42\xDA\xD6\x26\x5C\xD6\x42\xD9\x95\x7F\xDB\x49\xE0\x75\xC3\xE0\xDE\xE4\x72\xE3\x4E\xE3\xE3\x96\xC4\xE9\xE7\xE4\x23\x79\xD1\x41\xD6\x1E\xD8\xE8\x46\xE2\x61\xFE\xDA\xE5\x47\x97\xE2\xE8\x45\xEA\xAA\xFF\x3E\xE4\x00\x87\xE1\xEA\xE8\xE9\x9E\x5D\x56\x03\xE9\x19\x77\xEC\xE5\x47\xBA\xD5\xE8\xE8\xEE\xAB\xC0\xF7\x44\xEB\xAA\xC4\xF2\xEA\xF1\x98\xC8\xFF\xE2\xF2\x56\xCA\x40\xEA\xD0\xA2\xF4\xE7\x5E\xE9\xBB\xD9\x4C\xF0\xE5\x77\xDD\xE6\xE3\xDE\x89\xE5\xD4\xF6\xEF\xD6\xC2\xFF\x3F\xF5\xDA\xC9\x4F\xF1\xD3\xD1\xDB\xF7\xDA\xF8\xAF\xF1\xE0\xF4\xE6\xD2\xC0\x0C\xE2\x66\xE4\xFF\xE5\xF5\xF0\xF7\xC3\xF2\xF9\xFD\xE1\xF9\xF3\xF8\xFB\xCE\x7C\x7B\x48\x71\x7E\x7C\xE2\x3C\x78\x7F\xE0\x68\x81\xF6\x1D\x2D\x7C\x01\x9D\x21\x7E\xF3\x74\x3F\x01\xFA\x7E\x7F\x09\xBF\x7D\x82\xFB\x79\x82\xFF\x2F\x77\x7C\x68\x7C\x6E\x20\x05\x90\x70\xE0\x58\x72\x71\xCD\x49\x87\x22\x0D\x94\x5F\x07\x83\x21\x82\xE3\x3D\x73\x81\xB9\x62\x7E\x54\x3C\x4D\x2B\xF8\x4A\x7F\x85\x25\x9C\x76\x0C\xAE\x46\x87\xEF\x70\x82",
			"\x81\x39\x9D\x7F\x09\x97\x83\x88\x0B\x9C\x86\x81\x19\x24\x82\x0F\xC1\x80\x89\xC8\x65\x78\x84\x48\x83\x76\xF7\x5B\x22\x6B\x80\x2F\x73\x85\x9C\x3B\x28\x0E\xCE\x8D\x23\x2A\x80\x07\x8A\xDD\x69\x20\x43\x5A\x8B\x86\xB4\x35\x84\x2F\x5D\x3E\x88\x18\x83\x8A\x21\x31\x95\x33\x8B\x23\x83\x27\x0C\x86\x29\x2D\xAD\x31\x79\x7E\x2B\x2A\x8F\x19\xE2\x86\x77\x32\xA2\x2E\x8E\x01\x94\x88\xD0\x52\x8C\x8E\x32\xBE\x7B\x8E\x03\x35\x8D\x65\x77\x89\x8D\x8F\x00\x95\x90\x6F\x82\x7E\x17\x98\x31\x7E\x37\x9A\x30\x8E\xAD\x78\x20\x22\x82\x2A\x90\xCD\x0C\x92\x90\x8E\x9E\x91\x1B\xFD\x87\x90\x85\x1D\x94\x3E\x9F\x95\x33\x24\xFB\x86\x20\x4B\xB4\x38\x93\x99\x9F\x1F\x26\xD6\x8C\x95\x81\x1D\x86\x24\xAB\x8F\x91\x2B\xA4\x93\x89\x59\x80\x07\x94\xC6\x29\x97\x25\xE2\x70\x97\x4C\xBE\x90\x98\xC4\x22\x9B\x2B\xFE\x89\x91\x5A\x82\x20\x8F\x26\x25\x99\xEB\x3E\x9B\x8D\x07\x81\x91\x92\xA5\x86\x8E\x2E\x83\x20\x9B\x91\x1E\x8E\x8B\x58\x81\x22\x2B\xAE\x82\x92\x1E\xA3\x96\x90\xBD\x86\x96\x33\x81\x2D\x9B\x2E\xA6\x98\x92\xC3\x99\x98\x1D\xEB\x90\x01\x76\x99\x27\x9B\xF4\x83",
			"\x9C\x71\x52\x9A\x74\x6A\xB4\x9F\x96\xDE\x8F\x9F\x2E\xE8\x9F\x87\x8B\x07\x9C\x9E\xF6\x98\x20\x3F\xA2\x7B\xA0\xCC\x47\xA3\x9B\xCF\x9C\x95\x41\xB2\x9A\x9C\x88\xAC\x9A\xA2\x4C\x86\xA3\x20\x97\x21\x7E\x80\xBA\x82\x9E\xCD\x96\xA1\x3D\xCB\x8C\x8A\x21\x93\xA6\x82\x28\xBA\x81\x11\x80\x86\x7D\x28\x9C\xA2\x7D\x8D\x6A\xA7\x49\xAC\xA0\x8A\x15\xA1\x8B\x71\x24\xB1\x8E\xFD\x2B\xA8\x83\x9E\x83\x8F\x88\x36\xAC\x8D\xDF\x6B\x7E\xA7\x89\xA9\x83\x6C\x37\xAC\x85\x23\xA1\x98\x94\x17\x4D\xA7\x71\xB9\x8B\x92\x53\xCC\x91\x95\x70\x9F\x21\x8F\x4C\xAD\xA8\x0D\x84\xA9\xA2\x8A\x99\xA9\x99\x5F\xA6\x82\x4C\xDD\xA9\xA5\xA2\x9D\xA8\xA8\x48\xA2\xA9\x4D\xB1\xA6\xAD\x92\x98\x27\xA8\x88\x6A\xAE\x52\xA0\x96\x20\x70\x89\xAA\x20\x76\xA3\x27\x53\xD8\xAB\xAA\xA9\xBD\xA9\x9E\xE9\x9F\xAA\x55\x98\x38\x9E\x91\xB9\xAF\xA3\x81\xB9\xAB\x60\x98\xAE\xAD\x8B\x3B\xAE\x24\xBE\x94\x91\x58\xAB\x2F\xB0\x39\x93\xB7\xAE\x8E\x8D\x79\x42\x4F\xA5\xAC\x9E\x9E\xB6\xA8\x0A\x3C\xB3\x58\x8D\xB4\x88\xD0\xAD\xA1\xA8\xD6\x83\xA9\x65\x2F\x72\xB5\xB6\xBA\xA6\xA4\x67\xB0\xA5\x5C\xA9",
			"\xB8\xA6\xAE\xA4\xB1\x7E\xC8\x8B\x26\x47\xAA\x7B\xB6\xD1\x7D\xB0\x7E\x15\xB5\x33\x6F\x8F\x71\x7E\x5F\x96\xAE\xB8\x98\xBF\x88\x3D\xD5\x99\x88\x85\x00\x25\x43\x6C\x01\xAE\x1E\xD1\x22\xBB\x7F\x51\xB2\x36\xAF\x7E\x97\xDF\x53\xB6\x20\xED\x98\xBA\x21\xDE\xBF\xAE\x40\x59\xB7\x9B\x81\x1C\xBB\x20\xBE\x87\x7F\x79\x82\x29\xBD\xEF\x94\xBF\xBD\xDD\xA0\xBD\x68\xEE\xB1\xBF\xCD\xB4\xB8\xBD\xF3\xA2\xBC\x2D\xF0\xB1\xA5\xBA\x96\xB9\xB8\xE6\xBF\xBE\x36\xFE\xB9\x20\xF2\x85\xC2\xBE\x07\xDC\xBF\x78\x88\xC4\xC1\x3F\xB5\xBD\xC1\x03\x26\xC0\x84\x8B\xCA\xC1\xE9\x49\xC7\xC1\xA5\x77\xC0\x7E\xAA\xB1\xC2\x06\xC3\x27\xB9\x0E\xDB\xC2\x41\x20\xCD\xC3\x0A\xC0\x04\xC4\x14\xD8\xC1\x44\xFA\xBA\xB8\x13\xF1\x7B\xBD\x01\x3E\x97\x8B\x82\xC3\xA0\x15\xDF\x71\xAC\x1B\x37\x05\x15\xB0\xC0\x00\x39\x5F\xAE\x97\x38\x1B\xC4\x8B\x61\xAE\x97\x1C\x02\xCF\xAB\xF1\x3F\xC6\x42\x3A\x07\xC8\x1B\xC4\x20\xC7\x0A\x3B\x05\x93\xA2\xCF\xC2\x22\xCA\x24\x07\x53\xCC\xBD\x77\x50\xC9\x21\x1E\x19\xC9\xC6\x5B\xDC\xCB\x40\x3E\x0F\xCB\x16\xC6\x21\x4A\x62\xC1\x59\x99\xAF\x7F\x4B\x34",
			"\xC1\x20\x08\x65\xDE\x97\x0A\x6E\xC1\x21\x20\x25\xCF\x0B\x61\xA9\xA2\x62\x5D\x40\x25\x92\x61\xAF\xA9\x38\xD1\x39\x61\xA1\xC9\xC4\x42\x5B\x21\xB7\xC3\x3D\x4B\x76\xE5\xB5\xD1\x62\x6F\x72\xCF\xC7\x3D\x48\x32\xCA\x78\xC7\xBF\x6F\x74\xD2\x97\xB7\x67\xD0\x2C\xBA\x49\x2E\x7A\x9F\x6F\xCE\x3A\xC2\x40\x7F\x66\xD2\x00\xC5\x5D\x4B\xE9\x35\x4E\x42\x7F\x32\xD4\x0B\xC6\x27\x6F\x32\xDD\xD2\x92\x10\x4A\xD5\x0E\x6D\x80\x00\xB0\xD9\xBD\x91\x5D\x4F\x43\x5A\xC6\x25\x45\xAD\xC0\x02\x77\x3E\xD4\xCA\x4E\xB2\xD5\x43\x41\x44\xDA\x40\x6D\xC4\xD1\x80\x37\x3A\xD9\x53\x63\x59\x97\x27\x0A\x68\x46\xD1\xDD\x43\x4B\x7D\x64\xB2\x67\x78\xB8\xD5\x19\xDF\xDB\xBA\xC5\xC7\xAE\xFE\xC4\x65\x01\xC1\xC0\xDB\x4A\x5E\xC7\x84\xEF\x77\x39\x02\x87\xB0\x35\x5D\x54\x4F\xBA\xE8\x7A\x30\x14\xEE\xD6\xD0\xE4\xDB\x60\x1A\x89\x20\xD3\x40\xC3\x3A\x05\xDD\x45\x5A\x84\x50\xD3\xA4\xFB\xA8\xDD\x43\x87\x44\xE2\x0C\x7F\x57\x44\x82\xF8\xB7\xD8\x45\x54\x50\xC1\xA5\x51\xD9\x1D\x6F\xD7\x9C\x06\x3D\xDD\xA6\xAC\x3B\x55\x60\xD1\x3B\x4A\x2C\xDA\x9C\xA0\x9B\xE8\x34\x1E\x3F\x58\x57",
			"\xC1\xCC\xDB\xB9\xB5\xCD\xBE\x7C\xDD\x46\x59\xC1\xDA\x59\xB0\xE5\x4C\xC5\xD8\x3C\xD8\xE2\x84\x44\x09\xC0\xC8\x54\xDA\x82\xF6\xE6\x20\xA1\xC3\xDD\xB9\xFA\xD9\x21\x9F\xC3\x23\xE4\x82\xA3\x38\xBB\x04\xEC\x09\x7F\x73\xCE\xE7\xA6\xC8\x59\x97\x03\x64\xE0\x29\x3F\x59\x51\x04\xFE\x37\xCD\x87\xE5\x49\x8B\x44\xE1\x3A\x92\x59\xE9\xB8\xA7\xDA\x48\x97\x44\xE7\x67\xC1\xD7\x07\xCE\x80\x0A\xEB\x79\x9C\xEC\x50\x49\x64\xE2\x18\x7F\x5B\x07\xB5\xC1\xEB\xAE\x42\xE5\x48\x19\x55\xDD\x38\x85\x29\xD1\xEF\x84\x45\x0F\xBF\x67\x03\x59\x61\xC0\xE8\xE7\xB2\x67\x64\xA1\x06\xF3\x21\xB6\xEE\xE4\xE8\x90\xE3\x23\xDF\xB0\x38\xF0\x76\xE0\xD9\x21\x49\xD5\xB4\xE0\xC5\x58\x0C\xBE\xC6\x21\xF3\x92\xF5\xF1\xB2\x69\x0F\x5F\x35\x03\x5E\x21\x5B\xFB\xF0\xB2\x51\xB6\xC5\xE8\x02\x59\xD8\xA8\xE6\x20\xD2\x8A\xB3\x39\x37\x1E\xC2\x20\x72\x1F\x5F\xB5\x30\xF1\xEB\x64\x5D\x4C\x0E\xB7\xE1\x23\x1D\x7F\x5C\x5B\x60\xEC\xD6\x20\xCF\xCA\xF5\xB2\x79\x01\xF8\x7A\xC7\x3F\xF8\x03\x3D\xD6\xF2\xD1\x3C\x0F\xB5\xC0\x13\x58\xD0\xE2\x21\xC3\xD3\xF3\x39\x40\x2B\xED\x10\xD8\xEA\x21",
			"\x07\x22\xF1\x3A\x43\x2B\xEA\x11\xE1\xE9\x23\x8A\x6F\xE5\x59\x45\x2B\xEF\x11\xC3\x56\x03\xAA\xE4\xF4\x67\xA7\x41\x24\xD6\xC8\xF4\xFE\x6A\x10\x1D\xF8\xFB\xC0\x00\xFF\xD1\x7A\x7F\xAC\x13\x09\x6B\x77\x09\xC3\x20\x80\xDA\x72\x80\xA8\x18\x09\x6B\x7C\x09\x07\x82\x7E\x0A\x88\x1B\x9D\x0B\x76\xA1\x0F\x80\xEA\x71\x81\x8A\x12\x0A\x6B\x76\x0A\xC3\x23\x70\xF9\x7C\x7E\xC8\x27\x0A\x9E\x73\x10\x1E\x81\x80\x20\x89\x2C\xA8\x0F\x2F\xAA\x0D\x81\x0A\x1B\x7D\x8F\x74\x28\xAB\x0F\x2F\xAD\x0C\x82\x09\x13\x7E\x27\x81\x1D\xAE\x0F\x2F\xB0\x04\x83\x06\x1B\x7E\xDC\x7A\x1A\xB1\x0F\x2F\xB3\x03\x2C\x19\x29\x10\x25\x84\x76\x43\x77\x34\x0A\x1A\x01\x0A\x19\x7C\x2F\x85\x2C\xB4\x0D\x7F\x34\x3C\x84\x09\x12\x7D\x4F\x88\x2C\xB7\x0B\x76\xBB\x03\x2C\x54\x86\x10\x2E\x88\x84\x45\x2C\x0B\x6B\x70\x0C\x5C\x80\x81\x37\x83\x1C\xC1\x0B\x76\xC5\x05\x86\x17\x87\x86\xAA\x16\x0C\x6B\x7A\x0C\xC3\x26\x85\x02\x12\x7F\x6E\x85\x34\x34\x3F\x85\xF7\x78\x81\xDA\x6E\x7C\x1B\x16\x83\x06\x15\x84\x3F\x88\x87\x0A\x3E\x83\x03\x1D\x85\x57\x8E\x87\xF9\x63\x10\xC0\x6F\x81\x83\x88",
			"\x1A\xCB\x03\x82\x02\x1D\x88\x26\x8F\x88\xB8\x1C\x0C\xFF\x2E\x0C\xC3\x24\x89\x09\x87\x87\xA8\x1F\x0C\xFF\x21\x0D\x9B\x86\x86\x96\x8A\x18\xD2\x0F\x2F\xD4\x03\x8A\x6D\x85\x8A\xC7\x15\x0D\xFF\x27\x0D\xC3\x26\x71\xDC\x4C\x87\x1B\x18\x0D\x6B\x71\x1D\x45\x0D\x7C\xB2\x82\x10\xB3\x7C\x54\xD1\x1C\x0D\x6B\x70\x0E\xFF\x2B\x74\x4E\x6B\x8B\x01\x18\x68\xDE\x6A\x24\xE2\x0B\x76\xE6\x0F\x2F\xFE\x26\x62\x48\x29\x7A\x89\x81\x1D\xE8\x02\x85\xAA\x14\x75\x4E\x61\x8D\xB2\x74\x8B\x0A\x1B\x0E\xCD\x7E\x0E\xFF\x22\x31\xD0\x8D\x7B\xD1\x1D\x25\xF0\x0D\x7C\xF3\x0F\x2F\x5E\x7E\x64\x68\x66\x10\xC9\x6C\x8A\x1B\x15\x0F\xD6\x82\x33\xED\x83\x10\x34\x70\x8F\x0A\x18\x0F\x6B\x7C\x0F\xC3\x25\x8F\x02\x1D\x73\xF8\x89\x10\xFD\x0B\x76\x01\x05\x66\x1F\x7B\x6F\x01\x93\x13\x55\x4D\x6D\xAC\x19\x32\x26\x60\x72\xDB\x8E\x89\xB8\x15\x00\x0B\x96\x38\x55\x4F\x3A\x5A\x0D\x7C\x10\x9D\x72\x60\x84\x28\x0A\x05\x91\x45\x77\x91\x0A\x1D\x05\xCD\x7A\x72\x02\x1F\x8E\xD3\x83\x1C\x0F\x00\x92\x91\x7B\x6C\x0A\x17\x8F\x29\x9A\x1A\x12\x05\x45\x7F\x36\x01\x06\x93\x1C\x26\x91\x10",
			"\x00\x91\x93\xAC\x17\x01\x34\x9A\x10\x1B\x07\x93\xAA\x10\x93\x02\x1A\x8D\x3C\x9E\x34\x34\x3B\x93\x02\x1B\x91\x1D\x99\x78\x4C\x31\x1D\xEA\x63\x10\x28\x9D\x94\xC8\x2C\x01\x42\x92\x33\x51\x92\x10\x44\x92\x75\x4A\x2D\x01\x22\x99\x10\x1F\x07\x95\x71\x2A\x10\x4A\x9C\x95\x1D\x20\x02\x5F\x96\x10\x22\x02\x96\xB8\x12\x6F\xB3\x82\x91\x8A\x13\x02\x55\x43\x5C\x1B\x10\x06\x6B\x7E\x96\xBC\x8C\x8D\x09\x18\x02\x73\x9A\x10\x2D\x09\x96\x03\x1B\x77\x04\x78\x97\xC7\x8A\x97\x06\x1F\x02\x7D\x99\x10\x34\x00\x98\x02\x1D\x79\x04\x7F\x74\x06\x10\x70\x70\x97\x1C\x36\x0C\x96\x4C\x3C\x02\x24\x78\x1B\x80\x3D\x67\xD5\x5D\x99\x5F\x51\x55\xF3\x64\x67\xE2\x69\x55\xAF\x3F\x11\xA5\x9F\x6E\x44\x18\x9A\x18\x13\x68\xF3\x63\x49\xAC\x9B\x72\xB0\x91\x9B\x01\x1E\x9A\x38\x6C\x5C\x44\x16\x9B\x6F\x5F\x2F\x66\x63\x9A\xBC\x93\x9B\x1B\x17\x69\xBF\x9B\x76\xBB\x9A\x65\xFF\x25\x9A\xAF\x33\x49\xC0\x94\x63\xCD\x6E\x48\x0C\x9E\x11\xCD\x99\x11\xBE\x43\x49\xD1\x9B\x11\xFE\x4D\x7C\xA5\x93\x9D\xD6\x94\x9D\x95\x63\x16\xCC\x3F\x37\xA2\x91\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp2] BEGIN ",
			L"[20][Exp2] END [ENDING]",
			L"[21][Exp2]< Exp2 \"+\" \"+\" @ >",
			L"[22][Exp2]< Exp2 \"+\" @ \"+\" >",
			L"[23][Exp2]< Exp2 \"+\" @ >",
			L"[24][Exp2]< Exp2 \"-\" \"-\" @ >",
			L"[25][Exp2]< Exp2 \"-\" @ \"-\" >",
			L"[26][Exp2]< Exp2 \"-\" @ >",
			L"[27][Exp2]< Exp2 @ \"+\" \"+\" >",
			L"[28][Exp2]< Exp2 @ \"+\" >",
			L"[29][Exp2]< Exp2 @ \"-\" \"-\" >",
			L"[30][Exp2]< Exp2 @ \"-\" >",
			L"[31][Exp2]<< !Exp1 @ >>",
			L"[32][Exp] BEGIN ",
			L"[33][Exp] END [ENDING]",
			L"[34][Exp]< Exp \"<\" @ Exp2 >",
			L"[35][Exp]< Exp \"<\" Exp2 @ >",
			L"[36][Exp]< Exp \">\" @ Exp2 >",
			L"[37][Exp]< Exp \">\" Exp2 @ >",
			L"[38][Exp]< Exp @ \"<\" Exp2 >",
			L"[39][Exp]< Exp @ \">\" Exp2 >",
			L"[40][Exp]<< !Exp2 @ >>",
			L"[41][Module] BEGIN ",
			L"[42][Module] END [ENDING]",
			L"[43][Module]< Exp @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 1, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 2, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 4, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 5, -1, 3, 3, },
			{-1, -1, -1, -1, -1, -1, 6, -1, -1, },
			{3, 3, 3, 3, 3, 3, -1, 7, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<genericambiguity::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<genericambiguity::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
