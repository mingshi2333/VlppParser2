/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2623; // 21820 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 63;
		static const vl::vint dataSolidRows = 10;
		static const vl::vint dataRows = 11;
		static const char* compressed[] = {
			"\x3C\x55\x00\x00\x37\x0A\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x84\x10\x0A\xA9\x0A\x84\x71\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8D\x15\x96\x9D\x9A\x8A\x83\x90\x92\x91\x23\x9B\xA6\x9F\x7A\x96\x91\x97\x94\x0A\xA1\x86\x82\x05\x96\x95\x9A\x98\x28\x9D\xAF\x9A\x97\x9C\x9D\x9C\x8F\x3D\xC0\xBF\x98\x8B\x9A\xA2\x83\x95\x45\xC4\x81\xAA\xA3\xA7\x93\xA2\x9B\x09\x83\x31\x8B\xAE\xA3\x80\xA4\x85\x04\x53\x8D\xAC\x94\xAC\xAF\xAD\x8D\x08\xB3\x9D\xA9\xA5\xAA\x83\xAB\x84\x07\x5A\x8F\xB8\x9B\xB6\x9D\xB6\xA3\x56\xD0\xAF\xAC\xA3\xBD\xB1\x80\x04\x0A\xB4\x9F\xAA\x8A\x02\xB5\xB8\xB6\x7F\xEE\x81\xD0\xB6\xB2\xBB\xC0\xBA\x87\xF6\x9C\x86\xC5\xC0\xC1\xC6\xC1\x8F\x84\xC1\x87\xB5\xBE\xAD\xCA\xB2\x96\x89\xD9\xCB\x8E\xBA\x80\x07\xCE\x93\x8C\xE1\xCE\xC3\xD0\xC9\xD2\xC9\x8B\xA4\xE9\xC6\xDB\xD0\xD4\xCB\x81\x0D\x20\xED\xC8\xC1\xCC\xDB\xD2\xDB\xB3\x8A\xEF\xD5\xDA\xC6\x06\xD9\xDD\xB7\xBA\xE2\xD9\xDB\xC9\xE1\xE2\xE2\x98\xC9\xE3\xAB\xE9\x87\x07\xDF\xE1\xC0\xC8\xCC\xF7\xC3\xEA\xCE\xE5\xBD\xD8\xD4\xD9\xF6",
			"\xEA\x80\x0B\xE6\xD5\xD1\xE1\xD0\xE3\xF0\xF4\xF0\xD7\xE8\x11\x5F\xE7\xE6\xFE\xD4\xF4\xDD\xE8\x12\x79\x95\xFC\xD7\xE1\xE8\x0A\xF5\xED\xE5\xFA\xEB\xFB\xF8\xD5\x0A\xF9\xDB\x74\x77\x76\x76\x04\x9C\x71\x82\x71\x03\x86\x85\x82\x80\xF3\x48\x8A\x43\x05\xB2\x58\x08\x7F\x7B\xEE\x42\x7D\x7C\x6E\x19\x00\x8B\x82\x83\x07\x80\x0B\x07\x84\x16\xBC\x72\x89\x7E\x23\xB8\x6C\x06\x86\x0A\x83\x4E\x06\x6C\x1F\x20\x85\x7D\x85\x2F\x97\x81\x88\x89\x34\x94\x82\x8D\x8C\x25\x8A\x60\x45\x42\x32\x69\x8C\x81\x42\x21\x2E\x89\x83\x8F\x1B\x92\x7D\x86\x08\x42\x8D\x86\x91\x91\xE2\x77\x83\x91\x40\x23\x32\x64\x09\x92\x1D\x8D\x99\x8C\x8E\x35\xB3\x86\x8F\x95\x4F\x80\x05\x08\x95\x4C\xB0\x8D\x95\x74\x26\x28\x84\x92\x8F\x1C\xA1\x9E\x92\x92\x56\x99\x98\x97\x96\xA8\x68\x02\x6E\x44\x09\x59\x55\x96\x98\x6C\xB8\x97\x9F\x9A\x7B\x9C\x99\x9C\x9F\x45\xAD\x00\x98\x9A\x4B\x83\x4E\x0A\x6C\x2F\x18\x5F\x9E\x9F\x7D\xAE\x93\x9A\x9E\x06\x73\x02\x6C\x0D\x8A\x8D\xA0\x9F\xA5\x5A\x99\xAF\x9A\xA6\x8F\x80\xA4\xA1\x9B\x98\x9B\xA2\xAB\x46\x38\x03\xA7\x9A\x40\x39\x32\x6A\x0D\xA5",
			"\x6A\x8C\xAD\xAA\xA3\x8B\xB0\xA6\xA4\xA7\xB1\xA1\xAD\x96\x0F\xA6\xA9\x9F\xA4\xA4\xBB\x9E\xA7\xAA\xAE\x02\x7F\x09\xAD\xA1\xBF\x84\xB0\xB3\xB1\xC6\x89\xB0\xA8\xAD\x09\x40\x13\xB3\xB2\xA3\xB5\xAC\xB3\xAB\xB6\x8A\x41\x13\xB3\xC3\x42\x12\x6F\x10\xAC\xBD\xAE\xAA\xB7\xB2\x94\xB3\xB4\xB8\xB8\x47\x18\xB6\xAF\xC8\x90\xBB\x44\x12\x66\xA9\xBC\xAD\xB1\xEA\x92\xB1\xB7\xAC\xF3\xA2\xB7\x72\x12\xE7\x9F\xB0\xBF\xBB\x01\x4B\x1D\xB9\xB2\x4D\x32\x6E\x13\xBF\xF1\xB4\xBD\xA6\xBE\xEE\xA8\xB9\xB0\x14\xF9\xA1\xB4\xBB\xB8\x02\x51\x14\xC3\x70\x53\x32\x64\x17\xC4\x0A\xC5\xC6\xBF\xC1\x0E\xFB\xB9\xC7\x70\x56\x0D\xC5\xB6\xC1\xF2\x9C\xC3\xC9\x91\x57\x22\xC0\xC5\xC2\xAC\x58\x12\x6D\x16\x18\xC8\xCA\xB0\xBF\x33\xDF\xC6\xCC\x6B\x5B\x2A\xC5\xBF\xC3\x3B\xC2\x4C\x15\xCC\x1D\xEC\xC1\xD1\xCD\x32\xDA\xCC\xCF\x46\x5E\x3A\xC6\xCB\xCA\x44\xC3\xD6\xD2\x40\xE2\x3F\xB1\x58\xCF\x2B\x69\x5C\x8F\xD4\xC6\x7A\x56\x40\x5E\xF4\x95\xDB\x44\xD7\x9A\x5A\xD3\x40\xD6\x42\xEB\x48\x46\xD5\x06\x41\x04\xDB\x4A\x62\xC2\x40\xD8\xD5\x26\x68\xDB\xD7\x56\x6D\xC1\x44\xD9\xD3\x66",
			"\xD7\x42\xDE\x40\x6A\xF4\xDA\x43\xDB\x1E\xF9\xD7\xDB\xD7\x5B\x77\xD2\xE1\x47\x86\xC7\xE8\x45\xE2\x8A\xFF\x35\xDC\x41\xF2\x9E\xD7\xD6\xDF\x09\x40\xE5\xD9\xDE\x7B\xEE\xD4\xE6\x41\x8C\xD7\x92\xE5\xDA\x6B\xE6\x4F\xE2\xE5\x78\xD8\xE4\xE1\x65\x8F\xDD\xEE\x9B\xE7\x03\x7D\xD8\xEB\xDF\x91\xF1\xD7\xE9\xD8\x0A\x6A\xE1\xA8\xEB\x7C\xE1\xE3\x4B\xE8\xB1\xE3\x49\xE7\x5D\x85\xDD\x5B\x4A\xED\x79\xD2\x5C\x8D\x57\xBF\xC1\x0D\x8E\x71\xC4\xE6\xDD\xF3\x4A\xC6\xE9\xD8\xF1\x4C\xCB\xC4\x79\xE9\xEF\x1D\x49\xFA\xED\x47\xBC\xDD\xD2\xEC\xEC\x95\x55\xF0\x03\xE3\xB8\xC1\x41\x01\xE6\xC3\xC2\xF6\x4A\xF8\xE4\xDF\xF9\xD8\xFA\x26\x4F\xF6\x49\xF4\x03\x7F\xE5\xF9\x40\xF0\xE3\x4C\xFB\xF4\x3C\xB9\xF8\xE2\xFA\x23\x34\x7E\x40\x76\x7E\x7C\x83\x3E\x79\x23\xFB\x7B\x29\xF2\x07\x8B\x70\x00\x9D\x22\x80\x01\x2D\x7E\xEF\x1B\x25\x6F\x95\x09\x85\x32\x0B\x81\x7B\x56\x50\x7A\x20\x02\x93\x85\x83\x5B\x22\x7C\x66\x19\x85\x32\xF9\x7A\x7F\x23\x0A\x91\x24\x03\x97\x26\x85\x07\xA0\x81\x85\x2F\x9A\x32\x08\xFC\x7F\x7C\x0D\x95\x34\x83\x68\x34\x86\x01\xA1\x88\x84\x0C\xAA\x86",
			"\x86\x9A\x38\x86\x58\x30\x89\x21\x0A\xAB\x7D\x87\x9A\x24\x86\x66\x2D\x89\x22\x08\x80\x06\x83\xD9\x7B\x23\x0A\xFF\x1C\x89\x06\x9B\x83\x7E\x31\x89\x8A\x14\xC0\x84\x3E\x21\xB5\x7A\x87\x5F\x85\x86\x03\xCD\x80\x69\xC1\x6D\x59\x7D\x57\x81\x81\x16\xF4\x3F\x77\x27\xBC\x87\x78\x44\x8D\x77\x14\xD5\x87\x22\xF1\x62\x7F\x7E\xE7\x7C\x8A\x71\x5E\x83\x80\x30\xBD\x89\x7C\x2E\x4A\x88\x7D\x74\x8F\x1E\x27\x90\x89\x23\x6D\x93\x8A\x1D\xFE\x80\x01\x3C\xA2\x89\x8D\x2E\x85\x88\x23\xE3\x7F\x8C\xE9\x71\x8C\x6F\x73\x83\x8C\x46\x06\x93\x93\x4C\x90\x91\x23\x84\x9C\x93\x25\xFF\x8B\x88\x4D\x97\x22\x94\x3E\x8B\x8C\x71\x21\x95\x8C\xBD\x54\x82\x8F\xC4\x3C\x8C\xFE\x1D\x9B\x73\xB1\x58\x78\x91\x31\x3B\x79\x46\x5D\x76\x5F\xFB\x40\x06\x72\x6C\x75\x77\x2D\xE6\x80\x75\x5A\x9A\x76\x7B\x1F\x95\x71\x25\xC8\x88\x8F\xAE\x04\x93\x86\xA3\x8D\x92\x33\xA6\x95\x90\x24\xAC\x8E\x9A\xC6\x30\x99\x2A\x96\x9F\x91\x1B\x98\x88\x9B\xBE\x9D\x2B\xF5\x48\x91\x8B\xC9\x6F\x72\x99\xE4\x98\x94\xF8\x32\x81\x90\x17\x4F\x9D\x9D\x70\x9D\x99\x10\xDF\x96\x9B\x70\x8B\x9C\x6F\x8C\x97",
			"\x8D\xFC\x54\x9E\x89\x11\x98\x9B\x95\xD4\x8C\x94\x38\x85\x8D\x86\x34\x9E\x9A\x8D\x03\xA9\x98\x33\xA2\x7A\x20\x03\x22\x9D\xA1\x0F\xA9\x21\xF3\x18\x38\x8E\x5D\x98\x27\x71\x0E\xA6\x98\xF0\x69\x94\x99\xB9\x72\x9D\x8B\x04\xA7\x23\x56\x76\x47\xA1\x8E\x24\xA3\x9E\x23\x27\xA4\x48\x8A\xA6\x97\xCA\x2A\xA3\x8F\x21\xA6\x7D\x34\xD2\x9B\x9B\x81\x12\x85\x9C\x43\x95\xA7\x40\x19\xAA\x32\x36\x3F\x9F\x82\x03\x3D\x9E\x6C\x0F\x72\xA9\x78\xB6\xA2\x21\x4E\x8F\xA4\x4D\xB9\xA1\xA9\x6E\x78\x9A\x92\x51\x2E\xAA\x4C\xD0\xA6\x20\x27\xB7\x68\xA8\x02\x36\xAB\x50\xC8\xA2\x98\xA3\x82\x24\xA8\x5C\xB1\xAA\x58\x86\x2C\xA7\xD6\x7F\x5E\x89\x65\xAF\xA8\x53\xD9\xA0\xA2\xAF\x91\x81\xAC\x3B\x8E\xAC\x25\xE3\xA1\x8C\x6E\x87\xAC\xAE\xA4\x86\xAC\x55\xCD\xAB\xAE\xB6\xBD\xA9\x20\x4E\x80\xAE\x5C\x82\xB6\xAF\xAF\xB0\xAA\xAF\x6B\xA0\xB3\x3A\xF7\xA5\xAB\xC5\x86\xB0\xAF\x1B\xA9\xB0\x00\x4E\x80\x21\xBF\x93\xB2\x21\x95\xB2\xB0\x65\xE7\xAC\x2F\xAD\x90\xB0\x00\x7D\x23\xB3\x61\x82\x21\xB5\xC2\xAF\xAF\xB3\x0C\x3F\xB3\xDD\x1B\x27\x1A\xCF\x86\x22\x4E\xD8\x98\x1A\x6C\x62",
			"\x7D\x44\x6C\x99\x1A\x36\x1B\x31\x3C\x36\xDA\x12\x36\xAD\x98\x9B\x1B\xBD\xB8\xB3\x3F\xDC\x11\xB9\x84\x1E\x38\x9B\xDD\x05\xBA\x41\x47\xB6\x9A\x6F\x2E\xB3\x20\x51\x58\x9B\x37\x4F\xB2\x21\x2F\x58\x98\x1C\xCA\xA3\x23\x0A\x7F\x91\x1C\xD9\x1F\x0F\x9F\xA5\xAB\xA3\xCD\x28\x3B\x23\xB4\xBF\x9A\xAD\x88\xAC\xB0\xA1\x5B\x88\x9A\x27\xA2\x7A\xA9\x37\xA8\x37\xE3\x61\xB5\xA0\x9A\x5B\x20\xBE\x52\xBF\x23\xD3\x48\x58\xA3\x7F\xA6\xBB\xA9\x75\xAA\xBE\x40\x4A\xA8\xBF\x1C\x98\x99\xB3\xE9\xA4\xB7\xBF\x24\x7A\xA8\x27\xB4\xB8\x85\xFB\xA0\x03\x67\x75\x43\xB5\x80\x3F\xBB\x23\x13\xC6\xB4\x00\x31\x36\xB2\xE6\x83\x25\xC1\xAA\x9F\x22\x73\x72\xAE\xC3\xC7\x86\x27\x3E\x14\xC9\xC6\x86\xB9\xBA\x69\xAE\x86\x22\xA9\x4B\x7D\x66\xDD\x15\xCA\xBE\x9A\x51\x3F\xBF\x8F\x71\xC5\x97\x49\x7F\x9E\x87\x32\xA9\xC2\xA4\x7A\x9B\x40\x28\xCA\xC3\x08\xC8\xC7\x98\xF5\x96\xC7\x70\x0F\xC0\xB5\x7F\x91\xC2\x42\x2A\xC3\x20\x93\x97\xCA\x21\xFF\x32\xAE\x02\xFF\x47\x45\x94\x8A\xC6\xC0\x6B\x90\xCA\xC3\x19\x56\xB3\x8E\x2F\xCA\x21\xD4\x86\x24\xC9\x3A\xCA\x23\x94\x72\xA6\xCD\x9D",
			"\xBF\x9F\x43\x72\xBA\xCA\x64\xD6\xBA\xC3\x36\xF9\xAD\x87\x2B\x52\xAD\x6D\x92\xB5\x4C\xB9\x9C\xC7\xCC\x4E\xD4\x67\x09\x79\xBF\xCF\x81\x23\xC1\xC9\xE3\xB8\x35\xA1\x82\x24\xCA\x20\x72\x30\x49\x96\xBB\xBB\x96\x81\x2B\xD1\x59\x98\x9B\xCD\x1A\xD4\xCE\x80\x81\x29\x51\x49\xC0\x06\x37\x09\x28\xCD\xC9\x0A\x22\x52\x4F\xE0\xD4\xAC\xFF\x83\xD2\x5C\xB0\xB2\xB3\x1B\x39\xBF\xD4\x01\xDD\x86\x0A\x32\x32\xD2\xC9\xBB\x01\xBF\x87\xC3\x21\x86\xC8\x82\x51\x1F\xF4\x61\xD7\x02\x29\x3C\x36\x87\x56\xB2\x18\x03\x5D\xC4\x01\x20\xD8\x84\xCA\xCA\x34\x64\xDF\xD1\xD0\x89\xCA\x32\xB0\x86\x25\xD3\x1A\xD1\xDF\x38\xBA\xA6\x23\xAE\xBD\x81\x07\x16\xC9\x21\xDB\x03\x33\xD8\x12\xB2\x0F\x5E\x4A\x7E\xD2\x35\x3E\xC0\xD1\x42\xB2\x62\x58\xCB\xA9\xDE\xCD\xD8\x95\x06\x6C\x36\x0F\x5F\x6B\x6E\xD9\xC4\xA4\x52\x35\xAA\x16\xBC\x5A\xCB\x96\xCF\xC4\xFF\x97\xD7\x67\x91\xCF\xDF\x81\x30\xCE\x9A\xB8\x5E\xD2\xB6\x67\xDC\x35\x82\xC2\x22\xCE\x48\x9D\xDC\x99\x89\x26\x5C\x86\xFE\x3A\x21\x1D\x1F\x9C\xBB\x1E\xDC\x09\x61\x4E\xE1\x20\x79\xD6\x99\xC0\x1E\xD2\x62\x8B\xF8\x30\xCB",
			"\x09\x3F\xE2\xB5\xC5\x63\x38\x08\x49\x24\xC8\x48\x92\x08\x8D\x91\xCE\xE4\x83\x07\xE0\x89\x55\x19\xBC\xCC\x26\xEA\x31\x9A\xC3\x20\xE2\x3D\x9A\x09\x7E\xC9\x6C\xE7\xE3\x3E\xE2\x20\x19\xF8\x9B\x77\x9E\xD3\x0D\x61\x47\xE8\xE4\xFF\x84\x0D\x7E\xE8\x03\x59\x2F\xC3\xCF\x9F\x69\x1E\xDA\x41\x56\xE2\x21\x9B\xFD\x82\x0D\xFF\x5E\xA5\xD1\x9B\x2C\xEB\x80\x00\xE8\x85\x6D\x1F\x5F\x1B\x55\xE8\xE3\x7F\xB0\x0F\x5F\x72\x0C\xED\x42\x21\xE8\x89\x39\x3F\x5D\x0E\xC3\x41\xCF\xD6\xD0\xDC\xE4\xD5\x1A\x02\x21\x30\xFD\x86\x1D\x33\xE4\x67\xBF\xC9\x26\xEB\x28\x99\x0D\x7E\xFD\x03\x58\xC3\xC6\x27\xEC\x1F\x3E\x0D\x7E\x82\x1D\xF1\xB6\xD8\x9B\x10\xF9\xA7\x11\xE5\xF3\xEF\x9E\x44\x39\xBC\x11\xC3\x48\xF0\x00\x28\xE8\xD1\xBE\xEC\x30\xF2\x4F\xEB\xE6\xD3\x43\x39\xE8\x83\x3A\xEA\xBC\xA6\xE8\x34\xDD\x82\x2E\xF0\xD8\xEB\xF2\x35\x7B\xD7\xE8\x36\x8D\x1A\xEB\x81\x39\xF5\xEB\xFF\x8E\x13\xBF\x10\x13\x59\xDF\xE6\xEF\x9F\x91\x1F\x5F\x24\x45\xF6\xF2\x6B\x94\x17\x5F\x96\x0C\xF8\xE7\xD8\x97\x13\x7F\x59\x13\x58\x63\xD2\xC8\xDF\xC3\x65\x08\x1A\xD9\xFC\xD1\xFF\x9A\x12",
			"\x6C\x1B\x1F\x5F\x8D\xCD\xB1\x21\xDF\xF6\xD2\x35\x9D\x12\x36\x4F\x3F\x5E\x5F\x9F\xB0\xD2\xBA\xA5\xF3\x69\x81\x71\xFD\xAD\xD6\x80\x16\x6C\x21\x1F\x5F\x92\xE7\xFE\x20\xF2\x71\x6B\x28\x43\x0A\xB2\x14\x0A\xFF\x27\x31\x9F\x51\x5D\x06\x11\x24\xD8\x46\x0A\x84\x7A\x30\x0A\x83\x10\x7D\x66\x4D\xA9\x09\x5F\xAD\x03\x2C\x11\x82\x10\xAA\x66\x4D\xAE\x09\x5F\xB2\x03\x2C\x98\x6A\x7D\xEB\x63\x34\x29\x3F\x59\x21\x80\x7E\xD8\x43\x0B\xB2\x14\x0B\xFF\x22\x74\x26\x88\x6F\x0A\x16\x0B\xB2\x17\x0B\xFF\x2D\x05\x34\x6A\x69\x02\x1C\x80\xD6\x49\x0B\x0F\x82\x33\x38\x81\x10\x13\x88\x44\xBC\x09\x5F\xC0\x03\x2C\x3F\x80\x00\x1B\x88\x44\xC1\x09\x5F\xC5\x03\x2C\x41\x82\x10\x01\x85\x5F\xD7\x6B\x11\x49\x82\x10\x27\x8B\x6C\x53\x8A\x10\xAC\x63\x10\x3A\x88\x44\xC6\x0D\x7B\x02\x1B\x85\x02\x1F\x84\x28\x47\x0C\xFF\x29\x0C\xC3\x22\x86\x01\x15\x85\x28\x4A\x0C\xFF\x2C\x0C\xC3\x24\x27\xF3\x78\x44\xCD\x03\x2C\x60\x09\x5F\x72\x80\x6F\xD6\x4E\x0C\xFF\x20\x0D\xFF\x22\x75\x9E\x69\x87\x77\x68\x42\xD2\x0F\x2F\xD4\x0F\x2F\x54\x7E\x69\xB5\x63\x10\xB3\x68\x4D\xD6\x00",
			"\x86\x01\x1C\x02\xE7\x5A\x12\x93\x85\x89\x96\x87\x89\xB8\x57\x47\x22\x4B\x89\x20\x1D\x89\xB8\x59\x63\xE4\x30\x8A\xAF\x4F\x2F\x73\x56\x59\xA5\x82\x59\xA7\x8B\x69\xA7\x5F\x59\x97\x56\x11\xFD\x4F\x8A\x1B\x10\x8B\x34\x6D\x8A\x9E\x60\x00\x4A\x5F\x0F\x30\x60",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp2] BEGIN ",
			L"[20][Exp2] END [ENDING]",
			L"[21][Exp2]< Exp2 \"+\" \"+\" @ >",
			L"[22][Exp2]< Exp2 \"+\" @ \"+\" >",
			L"[23][Exp2]< Exp2 \"+\" @ >",
			L"[24][Exp2]< Exp2 \"-\" \"-\" @ >",
			L"[25][Exp2]< Exp2 \"-\" @ \"-\" >",
			L"[26][Exp2]< Exp2 \"-\" @ >",
			L"[27][Exp2]< Exp2 @ \"+\" \"+\" >",
			L"[28][Exp2]< Exp2 @ \"+\" >",
			L"[29][Exp2]< Exp2 @ \"-\" \"-\" >",
			L"[30][Exp2]< Exp2 @ \"-\" >",
			L"[31][Exp2]<< !Exp1 @ >>",
			L"[32][Exp] BEGIN ",
			L"[33][Exp] END [ENDING]",
			L"[34][Exp]< Exp \"<\" @ Exp2 >",
			L"[35][Exp]< Exp \"<\" Exp2 @ >",
			L"[36][Exp]< Exp \">\" @ Exp2 >",
			L"[37][Exp]< Exp \">\" Exp2 @ >",
			L"[38][Exp]< Exp @ \"<\" Exp2 >",
			L"[39][Exp]< Exp @ \">\" Exp2 >",
			L"[40][Exp]<< !Exp2 @ >>",
			L"[41][Module] BEGIN ",
			L"[42][Module] END [ENDING]",
			L"[43][Module]< Exp @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver, ModuleParserStateTypes>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		return -1;
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
