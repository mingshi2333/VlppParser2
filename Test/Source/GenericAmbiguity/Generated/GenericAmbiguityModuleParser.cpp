/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1723; // 13215 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 187;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x9F\x33\x00\x00\xB3\x06\x00\x00\x07\x00\x01\x82\x80\x04\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x84\x0E\x0A\x97\x01\x09\x8F\x7D\x8A\x8B\x8A\x0A\x80\x17\x97\x89\x89\x8F\x88\x8A\x1B\x98\x8A\x81\x92\x90\x91\x91\x8C\x24\xFF\x5E\x8A\x82\x03\x90\x92\x94\x2F\xAE\xA7\x92\x9B\x88\x9B\x98\x93\x35\xB4\x9C\x9A\x96\x8E\x99\x9C\x9C\x3B\xC0\xBD\x9C\x95\x96\x83\x00\x85\x1F\x86\xA9\x9E\x91\xA6\x80\x84\x83\x49\x83\x8B\xAA\x85\x04\x94\xA2\x95\x57\xCC\x83\xA9\x80\x81\x85\xA8\x81\x53\xC2\x85\xB2\xA1\x9A\xB0\xAD\x84\x08\x56\xA6\xB9\x8A\x00\xA5\xAD\xB7\x6B\xF0\x8A\xA5\xB3\xBF\x99\xBB\x9F\x77\xCD\xA4\xB6\xBB\xB8\xBD\xBE\xBD\x60\xF4\xBF\xBB\xA6\x84\x86\xAE\x85\x0C\x6E\xB1\xAB\xC9\xBC\xC3\xC1\xB1\x81\xFC\x91\xDE\xB2\x85\x06\xC5\xC6\x90\x81\xA1\xB8\xC7\xB4\xCD\x8C\x07\x97\x8F\xDD\xC2\xDA\xA9\xCE\x8C\xC1\x93\x80\xDA\xC8\xDB\xD2\xC9\xD6\xCA\x01\x8F\x21\xC9\xDE\xC4\xDA\xD3\xCD\xA4\xF2\xB9\xCC\xCB\xDE\xCE\xDC\xDB\xA3\x82\x90\x13\xDF\xD2\xD7\xD2\xD7\xC7\xB0\xC9\xE6\xE8\xD8\xE1\xD3\xE0\x01\x91\x04\xEB\xE5\xDD\xE1\xEA\xEA\xB7\xAC\xC0\x12",
			"\x0A\xB6\xDC\xDE\xE7\x0A\x94\x13\xED\xE6\xE9\xEC\xE4\xF2\x00\x15\x1D\xFD\xDC\xF0\xF3\xEF\xF2\xD0\xD8\xF1\xE8\xF4\xFA\xED\xFB\xF3\xDA\x97\x13\xF8\x03\xF6\xFA\xFE\xE4\x19\x2B\x7E\x7A\x77\x04\x83\x4B\x05\x7F\xF8\x49\x8A\x70\x7A\x10\x49\x4D\x4B\x7B\x00\x1E\x03\x77\x07\x08\x8B\x8F\x7E\x85\x0A\x8C\x77\x86\x86\x19\x97\x78\x78\x08\x15\x9C\x8A\x71\x08\x21\x9E\x8B\x86\x89\xC8\x62\x05\x8A\x79\x18\xAD\x82\x8B\x8B\xD7\x63\x03\x74\x09\x2B\xB3\x77\x88\x8B\x30\xB8\x88\x8A\x8B\x3B\x86\x75\x09\x8D\xCF\x41\x9F\x6D\x40\x26\x02\x80\x7E\x90\x10\xB7\x7C\x8E\x8E\x4C\xB6\x8D\x85\x93\x48\x86\x48\x08\x90\x43\xB2\x71\x97\x40\x29\x06\x96\x96\x42\x2B\x13\x7C\x0A\x96\x4A\xB9\x8E\x93\x92\x63\xA2\x97\x97\x80\x03\x6E\x04\x95\x92\x37\xB1\x7F\x08\x98\xDA\x71\x03\x76\x0C\x70\x8F\x95\x99\x8F\x78\x90\x95\x95\x98\x79\xB7\x96\x68\x0D\x6B\x85\x88\x9B\xA0\x47\xBB\x9D\x9B\x99\x01\x75\x01\xA1\x7B\x85\x89\x46\x0F\x74\x37\x35\x94\x98\xA2\x5B\xAC\x96\x9C\xA5\xE8\x79\x0B\xA0\xA1\x95\x82\xA1\x42\x0E\x92\xA6\x96\xA3\xA5\xA3\x93\xA5\xAA\x71\x3C\x1B\xAD\xA2\xA7",
			"\x9D\x8C\xAD\xA8\xA7\xE8\x7C\x1A\x97\x53\xAE\xA9\x49\x49\x57\x50\x74\xA0\x7F\x83\x06\x46\x07\xAA\xAD\x15\x78\xAD\xAE\x59\xBC\x83\x4A\xAF\xAA\xA2\x77\xA8\x53\xB1\x29\x45\xB2\x42\xAF\x96\x80\xB6\x46\xB0\x03\x50\xB2\x6A\xB3\x01\x47\xBF\xA8\x7C\xCA\x9E\x5C\xB0\x49\xD8\x80\x06\xB5\xAD\xD2\x97\x44\xB7\xB3\x66\x55\x56\x59\x4A\xEA\x9C\x6C\xBB\x55\xCD\x8A\x4A\xB4\x9F\xC0\xA7\xB0\x01\x00\xDF\xA1\x41\xBB\xB8\xB0\xA5\xB3\xB5\x46\xFC\xB2\x71\xBB\xBC\x6D\x9D\xB9\xAC\xB1\x0A\x41\xCB\xB6\x7C\x06\xC3\xBC\x67\xC0\xBF\xB5\xBB\xB0\xC2\x09\x4A\xC4\xBE\xAD\xF6\xA2\xB4\xC6\x53\x11\xD8\xC3\xC7\xC3\x09\xDD\xCD\xC1\xB5\xE9\xB0\xB4\x49\xBB\xC9\xA4\x47\x53\x61\x66\x76\xB1\x03\x57\xF2\x68\xC0\x73\xBB\xEB\xAA\xC5\x8E\xCB\x30\xF1\xB9\x40\xC1\x76\xA3\xC1\x40\xBE\x1B\xE4\xC1\xB5\xB9\x19\xC1\xCA\xCC\xC7\x43\xD2\xBE\xC9\xBE\x1B\x7B\xB2\xC8\x49\x45\xE6\x50\xCD\x47\x3E\xF7\xB7\x56\xCC\xDC\xA4\x43\xD7\x73\x2E\xD7\xD6\xC9\x48\x2B\xDD\x42\x69\xC6\x57\x5B\xD7\x55\xD7\x25\xF5\xC0\xDA\xD8\x9C\x64\xD1\xD3\x41\x4F\xE1\x4B\xD3\xDB\x01\x56\xC5\xC0\xD4\x00",
			"\xD2\xD7\xCD\x8D\x58\xCC\xCA\xD7\xDE\x2C\xDC\x6D\xDE\xBF\x16\x61\xDC\xDA\x7C\x6E\xDC\x63\xD7\xD4\x55\xCC\xE7\xCB\xD7\x1B\x46\xEC\xD9\xD5\xCF\x43\xE4\xE3\x3F\x96\xC4\xE2\xE6\xD8\x94\xDE\xDA\xD9\xE4\x87\xC0\x79\xE3\xB5\x54\x57\x51\xB9\xE6\x4D\xF2\xB1\xDF\x46\x73\xE0\xC9\x40\xEA\x17\x4E\xD9\xD2\xC4\x21\xC2\xE0\xE6\xB9\x19\x4C\xD7\x44\xCF\xFE\xBC\xE4\xD1\xEE\x66\x7E\xEA\xD3\x4A\x6D\xC4\xF3\xD9\xA8\xFF\x8E\x87\xD9\x46\x58\xE9\x4B\x11\xE8\x3F\xDA\x96\xF3\x40\xE1\x93\xF2\x41\xB8\x9B\xD6\xDA\xF1\x42\xD9\xD3\xD8\xF7\x74\x10\xC1\xE4\xF6\xEA\xE2\xD7\xF4\xF8\x54\x5A\xA1\xBA\xF9\xE9\xE5\xC1\x47\xE8\xF8\xEC\xE8\xFB\xF6\xC3\xF2\xC6\x42\xED\xFD\xE3\xD5\xC0\xFD\xFB\x00\x21\xBE\xF7\xFE\x06\x36\x5D\xB8\x02\x8A\x20\x02\xA8\x2A\x4B\x69\x33\x7F\x40\x09\x86\x7E\x85\x09\x00\x80\x03\x2F\x80\xFF\x61\x52\x82\xFC\x66\x79\x21\x6D\x2A\x82\x40\x7D\x69\x22\x39\x13\x3B\x6A\x07\x50\x7B\x1C\x53\x39\x22\xEE\x10\x7C\x0E\x10\x9B\x80\xF4\x00\x05\x0F\x14\x81\x25\x82\x87\x76\x0E\x0B\x80\x03\x38\xE8\x77\x0B\x86\x35\x81\x74\x1E\x1F\x8A\x20\x0B\x2B\x81",
			"\x0F\x3C\x89\x20\x7F\x50\x7A\x0F\x19\x92\x40\x7A\x7B\x13\x39\x0F\x2B\x89\x83\xD0\x57\x64\x52\x79\x6B\x85\x10\x8D\x80\x43\x8C\x23\x72\x20\xDD\x67\x7D\xFE\x2C\x51\x5D\x26\x87\x77\x89\x2B\x99\x79\xF8\x4E\x87\x51\x2A\x77\x7F\x70\x0A\x73\x6A\x01\xC6\x2A\x20\x31\x85\x83\x85\x30\x82\x23\xD4\x5E\x87\x82\xFA\x43\x21\x7B\xD9\x74\x8C\xE7\x65\x89\x21\x38\x81\x20\x8F\xB5\x61\x75\x62\x7C\x76\x32\x0D\x81\x23\x90\x6C\x9C\x7B\x1B\xD0\x72\x36\xFE\x79\x83\x8B\x03\x2D\x91\x22\xC8\x66\x82\xB1\x66\x85\x92\x0B\x68\x3D\xDF\x5A\x58\x52\x3E\x86\x25\x6F\xD9\x7D\x90\xA9\x7A\x76\x90\xAA\x5E\x96\x55\x68\x61\x76\x43\x7C\x70\x8D\x03\xBC\x79\x23\xE2\x2C\x97\x29\x82\x2E\x8E\x00\x0C\x87\x8B\xB3\x88\x5A\x40\x7A\x80\x00\x5E\xA2\x92\x39\x97\x97\x8E\x42\x3C\x9A\x61\x8C\x2A\x3C\x7F\x3E\x85\x97\x31\x93\x93\x20\x5E\x97\x89\x20\x43\x98\x91\x80\x25\x91\x9A\x61\x89\x26\x30\x06\x3E\x95\xC7\x19\x21\x84\x4C\x98\x9A\x68\xA1\x7D\x9B\x40\x53\x6D\x40\x2A\x86\x25\x9C\xE3\x8A\x23\x37\x82\x2F\x99\x08\x53\x42\x4B\x1D\x13\x39\x21\xD9\x9B\x85\x56\x86\x27\x88\xCC\x95",
			"\x32\x42\x12\x98\x97\x51\xAC\x53\x9E\xE0\x87\x70\x89\x7C\x7A\x45\x52\x83\xA1\x9F\x01\x20\xA0\x3B\xAB\x84\x46\xFE\x7F\x45\x94\x0D\xA8\xA0\x00\x20\x38\x83\x7A\xB9\x90\x00\x27\x0D\x8E\x42\x14\xA6\x8E\xB6\x59\xA4\x7F\x53\x45\x96\x0A\x1A\xA9\x20\x8E\x83\x25\x9D\x23\xBC\x7D\x97\x25\x9D\x04\x92\x86\x24\x9F\x02\x28\x93\xE1\x2D\xA2\x96\x7F\x91\x92\x21\xD2\x30\x7A\x9A\x25\x90\x06\x55\x74\x83\x9F\x16\xB6\xA4\xA7\x0F\x92\x20\x93\x93\x77\xA2\xE8\x39\xA6\x41\x0A\xAB\x8E\xA1\xBA\x91\x20\xC1\x91\xA7\x0A\xF2\x45\xA6\x53\x49\x21\xAA\xD1\x2B\x84\x9D\x25\x90\x51\xAA\x86\x3B\x95\xF4\x90\x7A\x3D\x83\x2D\xA7\x52\xA0\xA9\xA0\x6C\x6A\x50\xFF\x0F\x55\x95\xAD\xA6\x9B\x20\x67\xAB\xA0\xF4\x38\x03\x3A\x4D\x5C\xAA\x4B\xCB\x8D\x99\x50\xD6\xA6\x20\xB6\xAF\xAA\x20\x79\xA8\x5C\xF4\x3B\x03\x3B\x54\x65\x94\xAE\xCA\x8B\x91\xE8\x3E\x03\x3B\x1F\x1A\x48\x54\xA5\x89\x9A\x41\x31\x91\x75\x20\x2E\xA4\x5C\xC8\x32\xB3\x40\x53\x91\x74\x22\x1A\x8A\x20\x48\x1E\xA6\x66\x82\x2A\x03\x15\x89\x0F\xB3\x01\x2D\x0A\x4F\xFA\x35\xA2\xB1\x97\xA6\xB0\x7F\xA1\x20\x6B\x9D",
			"\xA2\x6C\x27\x13\x3F\x09\x5A\x4C\xB1\x29\xB3\xB7\xA5\x15\x91\x0B\x3A\x52\x1A\x48\x10\x5A\x45\x9A\x81\x14\xB7\x70\x54\x17\xB1\xBF\x48\x35\xB9\x80\x1C\xB7\x70\x57\x08\xB4\x00\x5B\x0E\xA7\xE6\x80\x05\xB4\xD0\x7C\x0A\x74\xE0\x0E\xA7\xE7\x80\xB3\xAF\xA2\x50\x40\x76\x86\x2C\xB7\xA3\x8E\xAB\x61\xE2\x86\xBB\x0A\xE1\x0E\xA6\xF4\x29\xBE\xB9\x2B\x82\x0E\x96\x64\x0E\xA7\xF7\x97\xBB\x85\x65\x1A\x4B\x19\x3E\xA8\x9D\x5D\xAB\x80\x0D\x3E\xA2\x0A\x72\x81\x2D\xBF\xBA\x6B\x81\x0D\x5A\x4B\x0E\x96\x45\x03\xC0\x00\x05\xC0\x00\xED\x8D\x0E\x96\x6F\x0A\x4B\xD0\x8A\x91\x21\xF8\x83\x21\x3C\xD0\x71\x0F\xF6\x9A\x3C\x42\x52\x83\x25\x88\xA3\xC4\xC5\x12\xE4\x84\x71\x5B\x69\xC6\xF5\x72\x8B\xC4\xF7\x59\x21\x5C\xFF\x15\x7A\x8C\xAF\xC4\xC6\xE9\x55\x79\x94\xD9\x7F\x1D\x28\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp] BEGIN ",
			L"[20][Exp] END [ENDING]",
			L"[21][Exp]< Exp \"<\" @ Exp1 >",
			L"[22][Exp]< Exp \"<\" Exp1 @ >",
			L"[23][Exp]< Exp \">\" @ Exp1 >",
			L"[24][Exp]< Exp \">\" Exp1 @ >",
			L"[25][Exp]< Exp @ \"<\" Exp1 >",
			L"[26][Exp]< Exp @ \">\" Exp1 >",
			L"[27][Exp]<< !Exp1 @ >>",
			L"[28][Module] BEGIN ",
			L"[29][Module] END [ENDING]",
			L"[30][Module]< Exp @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver, ModuleParserStateTypes>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, codeIndex);
	};
}
