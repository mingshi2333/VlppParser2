/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2143; // 17415 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 95;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x07\x44\x00\x00\x57\x08\x00\x00\x08\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x85\x0D\x0A\xA4\x0A\x86\x41\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8D\x15\x96\x9D\x9A\x8A\x83\x90\x92\x91\x23\x9B\xA6\x9F\x7A\x96\x90\x90\x85\x02\x25\xAE\x92\x99\x94\x99\x8F\x96\x35\xA8\xB7\x96\x9E\x8C\x9C\x8C\x9C\x3B\xBA\xBD\x82\xAF\x9E\x9F\x92\x83\x2B\xC0\x83\xA6\x83\x02\x85\x90\xA4\x33\xC4\x87\xA3\x84\x06\xA6\xA2\x96\x57\x9B\x88\x86\x81\x9A\xA8\xAC\xAF\x4A\xC5\x89\x87\x06\xA8\xB1\xAD\xB3\x66\xE9\x86\x80\x89\x85\xAC\xA9\x9C\x06\x8A\x25\xAF\xB1\xA4\xBB\xA5\x81\x49\xE8\xB6\xA2\xBB\xBB\xAA\x81\xBC\x6A\xF8\x91\xBD\xBF\xAC\xC1\xB0\xBF\x01\x80\xC6\xCA\x8C\x81\x87\xA7\x81\x0C\x73\x82\xD0\xB3\xCD\xB9\xCB\xBB\x7F\x83\xD7\xDC\xBB\xC8\xC4\x8E\xCD\x02\x8D\x12\xD9\xC4\xCC\xD2\xCA\xD3\x98\x89\xE0\xCA\xD5\xD1\x82\x07\xD1\xAC\xA7\xF1\xC9\xDF\xCD\xD5\xDA\xD9\xB7\xB4\xCA\xDD\xC5\xC4\xDF\xC3\xDE\x02\x8F\x30\xD9\xDC\xC8\xD5\xE3\xD9\xC7\xC4\xDE\xDB\xD6\xE3\xE7\xD4\xE5\xC0\xC8\xCE\xF6\xDC\xE2\xE9\xE8\x00\x10\x43\xD5\xF0",
			"\xEF\xDD\xEE\xBC\xDF\xDF\xCD\xD7\xF1\x0A\xEF\xE7\xED\xF3\xE6\xCF\xD2\x10\x91\xF6\xEA\xEF\x84\x14\x65\xD4\xE9\xF3\xFD\xF8\xDD\x0A\xEC\x81\xE2\xEF\xFB\xC2\xFE\xF7\xF6\xDC\x40\x88\x7A\x7D\xBA\x4F\x77\x07\x70\x18\x32\x78\x6F\x80\x0B\x8F\x79\x05\x7E\xFD\x51\x80\x79\x42\x10\x4E\x62\x80\x7D\x0D\x84\x89\x70\x07\x10\x93\x86\x42\x07\xC3\x5F\x0A\x81\x81\x1A\x93\x79\x87\x89\x24\xA8\x89\x70\x83\x29\xB4\x60\x0B\x88\x2B\x8F\x71\x08\x8C\x26\xAD\x81\x8D\x89\xD7\x62\x04\x8F\x75\x2C\xB7\x8A\x89\x8D\x3E\xB4\x63\x0B\x70\x12\x56\x8E\x7D\x80\x47\xBD\x80\x93\x92\x3C\x98\x86\x8E\x67\x25\x3B\x8C\x7E\x87\x54\xBB\x7A\x42\x09\x1D\x96\x99\x92\x93\x41\x9D\x9C\x93\x94\x5A\x92\x81\x9B\x40\x28\x03\x79\x09\x96\xFF\x5B\x98\x8C\x98\x69\xA2\x9D\x99\x95\x6F\xA3\x92\x9D\x9C\x74\x88\x96\x43\x0A\x52\x80\x8C\x0B\x70\x2D\x28\x96\x9C\x9C\x7F\xB3\x91\xA1\x9D\x4A\x8D\x9B\x9B\x85\x87\xAA\x98\x6F\x0B\x79\x8A\xAF\x92\xA1\x3F\x90\xAF\xA0\x9B\x00\x30\x0D\xA2\x9B\x00\x31\x03\x72\x0C\x7E\x85\xA4\xA6\xA7\x88\x91\xAF\xA7\x73\x34\x17\xA0\xA0\xA8\x47\xB5\x0D\xA4\x97",
			"\x5F\xA1\xA3\xA6\xAB\x5E\x92\xA1\xAF\xA8\xB6\x77\x06\xAA\xA0\xA8\x98\xA8\x0F\xAA\xB6\x7A\x03\x73\x0E\xBC\xA2\xA0\xAD\xAB\x8E\xB3\xA3\xB3\x75\x3D\x37\xA4\xA0\xAB\xB2\x9E\x6E\x0D\xB0\xB4\x40\x13\x71\x10\xD0\x86\xB5\xB0\xB1\x98\xB9\xA7\xA8\xB3\x94\x83\x1A\xB3\xA0\xE0\x9A\xB8\xAC\xB7\xC7\x9B\x44\x13\xB7\xE2\xB5\x95\x13\x70\x46\x15\xB8\xB7\xB6\x89\x99\xB4\xBB\xB5\xD7\x48\x18\xBB\xBC\xF2\xB6\x69\x12\xBB\xCD\xBD\xB4\xAE\xB0\xF4\xBF\xBF\xA9\x42\x4B\x37\xB1\xBC\xBC\x00\xF9\xB9\xC3\x40\xA4\x3E\x95\x54\xBD\x2B\x64\x5E\x63\xC3\xBC\x6E\x53\x42\xC4\x0A\xEB\x49\x44\xC6\x06\x5C\xC6\x76\xC5\x02\x54\xC8\xC2\xC6\x18\x5E\xC1\x41\x00\x22\xDF\xCA\x42\xC9\xE1\xA4\xCD\x44\xCB\x00\x26\xCB\x48\xC8\x01\x69\xCB\xB2\xCB\x25\xCE\x56\xCF\xCC\x2B\xC7\xB1\xC7\x46\x32\xE6\x4B\x54\x6F\x2B\x43\xD2\x79\xD1\x57\x7C\xC9\x42\xCD\x2D\xF8\xC7\x44\xCB\x28\xDE\x54\xCD\xCC\x3E\xE6\x40\xCD\xD0\x23\x53\xDC\xD1\xA1\x3F\xD3\xC2\xD5\xCF\x10\xD6\xD0\xD3\xD7\x4B\xD5\xD3\x48\xD4\x3B\xE6\x43\xD4\xCB\x5C\xE2\xD0\xD9\xC5\x0A\x5B\xDC\xB1\xD7\x06\x51\xD4\x63\xDA\x66",
			"\xEF\xC3\xD8\x61\x46\xD6\x78\xD2\x57\x2B\x4D\x56\x90\x61\x50\xCF\x66\x75\xDF\xD0\x7F\xD4\x61\xE0\x3B\x85\xE4\xDA\x41\x72\xF8\x84\xDF\x40\x76\xF0\xD3\x59\xDE\x1B\xFB\xDC\x6E\xE1\x27\xD7\x50\xD6\x01\x5E\x48\xEE\xD0\x46\x9C\xC0\x05\xEB\xE4\x02\x41\x00\xE8\xDF\x49\xE6\x42\xE2\x41\xAB\xC4\x61\xEC\xD1\x26\x65\xE7\xEA\xDB\x75\xF3\xE7\xE1\xEB\x23\x6F\xE3\x42\xEE\xD6\x40\xF9\xE1\xED\x1F\x5E\x5F\xE5\xE8\xBC\xDD\x45\xEB\x6F\xC7\xEC\xE0\xE2\xEB\x0A\x42\xFB\x4A\xF4\xA3\xFF\x3B\xF2\xE7\x4E\x40\xFA\xE0\xED\xBD\xD1\xF7\x54\xF5\xA3\xE2\xE5\xF6\xF8\xA3\xFE\xE2\x40\xF8\x1D\x68\xF8\xCC\xF9\x4E\xE6\xF1\x42\xFA\x18\x70\xF4\xCA\xD6\x98\xF9\xCE\xD7\xDD\x6F\xE3\xCE\xCB\xD5\x8F\xD4\x55\xFF\xD3\x3A\x7D\x7E\x40\x6C\x63\x6E\xDC\x5D\x66\x2B\xD7\x66\x7B\x8E\x6C\x78\x67\x04\x84\x73\x81\xC9\x79\x22\xFB\x1F\x28\x75\xE2\x6B\x26\x81\xBC\x30\x6B\x55\x0C\x8E\x65\x09\x8C\x7D\x78\xF8\x65\x6D\xD8\x67\x61\x81\x10\x87\x83\x84\x7A\x79\x7E\x75\x36\x78\x7B\xC1\x7C\x34\x83\x24\x6C\x86\x02\xAE\x82\x3C\x18\x9A\x66\x83\x2D\x80\x87\x0A\x8D\x70\x83\xE7\x5D\x7A",
			"\x87\xD6\x30\x67\x06\x91\x88\x22\x1B\x8C\x70\x88\xD0\x22\x88\xF2\x3E\x8D\x22\x1C\xB3\x80\x88\x4A\x66\x22\x0D\xD3\x63\x8B\xB8\x7F\x7F\x1F\x68\x62\x81\x40\x55\x87\x72\x14\x99\x72\x85\xD0\x26\x8A\x01\xFE\x74\x31\xC8\x4E\x6E\x8C\x38\x68\x8F\xFE\x1B\x29\x6D\x91\x2A\x8C\x64\x30\x7C\x71\x05\x9D\x7F\x81\xB6\x39\x83\x20\x53\x73\x8C\x41\x5E\x2C\x0C\x24\xA6\x76\x4F\x4E\x95\x6C\x20\xFE\x85\x75\xA9\x53\x84\x69\x85\x8A\x23\x21\xC3\x36\x90\x2B\xB4\x81\x20\x8D\x89\x20\xE2\x09\x99\x21\x09\x93\x93\x90\x92\x8C\x92\x22\x9B\x95\x92\x4E\xB0\x72\x93\x9D\x89\x22\xF0\x14\x9C\x28\xEF\x4F\x90\x00\x91\x87\x86\x20\xF6\x81\x94\x55\x94\x70\x93\xAE\x89\x74\x2C\xF8\x8E\x92\x5A\xAD\x96\x96\xA5\x87\x95\x2A\xAF\x9C\x95\x5C\xAB\x94\x2B\xB5\x82\x20\x5B\x40\x97\x96\x61\xB3\x96\x98\xBD\x83\x23\x04\x89\x07\x99\x80\x0C\x99\x99\x02\x2B\x99\x33\x80\x02\x2E\x5D\x81\x99\x20\xD5\x9F\x94\x2E\xCA\x9A\x21\x6C\xBC\x94\x98\xBE\x83\x21\x63\x61\x97\x20\x3F\x99\x10\x94\x06\x23\x48\x12\x9A\x13\x39\xD2\x5A\x06\x8F\x9B\x03\x3B\x46\x6B\x38\x88\x4E\x03\x3E\x92\x7E\x9D",
			"\x13\x3D\x8A\x2F\x98\x20\x9E\x13\x9F\x09\x39\x38\x12\x9F\x10\xA0\x83\x02\xA0\x88\xA0\x08\x9F\x40\x20\x48\x89\x50\x0A\xA2\x20\x2F\x48\x8A\x28\x05\xA3\x20\x2C\x48\x8B\x14\xC3\x2C\x0A\x1F\xDE\x90\x85\x74\x60\x5B\x23\xC2\x7E\x8F\x1F\xD6\x97\x48\xCD\x7A\x83\x82\xA5\x6C\x69\x1E\xCF\x33\x6A\x8E\x96\x80\x5F\x3A\x8A\xA6\x23\xD0\x80\xA6\x41\x53\x69\xA4\xA6\x9A\x9B\x00\x8E\x63\xA7\x6D\xBB\xA0\x89\xFD\x9F\x9B\x40\x2E\xA8\x94\x85\x03\x9C\x8C\xE4\x98\x9A\x1F\x9E\xA1\x32\x11\x89\xA8\x00\x38\xA9\x21\x53\xBA\xA1\x20\xD1\x10\x99\x20\x07\xA8\xA8\x37\xDD\x80\x88\xE1\x27\x91\xAB\x02\x33\x69\x7C\x4E\xAA\xAA\x59\x88\x8C\x9E\x54\xAD\x68\x6E\x08\x7C\x68\x81\x56\x5A\x8A\xD7\x94\x81\x4D\xF5\x42\x79\xA9\x6E\xAF\x5D\x3F\xA9\xAF\x46\x0E\x27\x94\x8F\x87\xAE\xAC\x40\x83\xAD\x5A\x9E\xA1\xA8\x64\xB4\xA7\x60\x82\x44\xA8\x51\xF7\xA7\x3B\x04\x64\xAA\x20\x44\xB1\xAA\x41\x78\x37\x94\x0B\x3E\x4C\x43\x8F\xAA\xA8\x57\xBA\x8E\xB1\xB4\x8F\x47\xAA\x00\x11\xA0\xE4\x0C\x3D\x9B\xA5\xB3\xA8\x00\x45\x49\xAF\x38\xBF\x7E\x8F\x0A\x69\xA8\xB3\xE0\x83\x21\x94\x27",
			"\x9B\xB5\xBC\xBA\x84\xA1\x69\xA2\x44\x68\x96\xA9\xAC\xAB\xB1\x2E\xB4\x88\xA1\x23\x09\x3D\xA1\x34\x85\x1E\xAF\xB0\x0B\x62\x52\x6F\xAC\xB8\x89\x19\x67\x92\x47\xA0\xB8\x4D\x66\x80\x0B\xB8\xDB\xA0\x81\xB5\x42\xA2\x23\x6C\xB1\xB2\x20\x46\x53\xBF\x35\x09\x2B\xB1\xB9\x0A\x23\x06\xE2\xAE\x31\xA7\x3A\x83\xBB\x29\xE5\x40\xB4\x5B\x5F\xB8\x8C\x1F\x2A\x07\x70\x52\xBC\xBB\x80\x00\x5B\xBA\xC7\xB0\x32\x1F\xFD\x4D\xAF\xD3\xB9\xBA\x20\xE4\x28\x8A\x0B\x7E\x46\x53\xFE\xB6\x30\xAC\x01\x3F\xBF\x4B\xC1\xB0\x5C\x04\xC0\x00\xBC\xC8\xA3\x60\xA6\x01\xC6\x21\xEA\x8B\xC1\xB9\x75\x48\xAE\x7E\xC8\x8A\x52\x03\xD8\xC0\x00\x1A\xC0\xC2\x1F\x9C\x50\xB5\x52\x5E\xC4\x36\x7C\xBF\xB4\x12\x9E\xAF\x06\x3F\x69\xC4\xB9\x40\x8A\x57\x29\xB6\x0E\x4E\x6A\x60\xB7\xC5\xD6\xA5\x7B\xAE\x27\x99\x06\x3F\x5E\x58\xB4\x94\xA6\x22\x60\xBA\x87\xBF\xA7\x9E\xA1\xC8\x03\x3D\xB2\x0E\xCF\x53\xBA\x21\x1F\x58\xC9\x02\x3F\xB0\x10\xBF\xC3\xB5\x84\x07\x0F\x5B\x96\xA9\x20\x94\x97\xC2\xC2\x40\x47\x40\x3E\x7E\x96\x5D\x31\xB7\x68\x37\x2F\xC6\x22\xC9\x20\x85\x63\x74\xCF\x0F\x5A\x33",
			"\xC3\x22\xCA\x3A\x90\x0A\x79\x80\x04\x0B\x6F\x68\xC9\x20\x59\xD1\xC3\x5B\x80\x50\xCE\x81\x2E\xCD\xA3\xA7\xBB\x3B\x3B\xE0\xC8\x89\x2A\x06\x60\x37\x83\xC7\xCE\x1F\xD6\x0E\x4E\x2C\x1F\x59\xD1\x6F\xDE\x8D\x16\x7E\x4B\x0B\x6F\x6E\xB3\xA8\xC0\xBF\xC3\xBA\x63\xC0\x01\x4B\xE7\x7E\x8F\x5C\x03\x39\x17\x7E\x42\xCD\xA7\x9E\xD1\x20\x4A\x86\x23\x17\x43\x30\x0C\x3F\x6A\xCF\xA9\x1D\x05\xB7\x8A\xA7\xBE\x09\xB8\xB1\xD2\x94\x7E\x82\x0F\x70\x63\x0E\x4F\x28\x36\xD0\xBE\x1B\x25\x0F\x70\x66\x0E\x4F\x3A\xDC\xD0\xB7\x03\x30\xB6\x0E\xE8\x01\xAE\x8F\x88\xDA\x20\xCE\xA0\x8B\x1A\x73\xCF\x0D\x6F\x4F\xD9\x20\xD0\xA0\x88\x1C\x73\xC4\x0F\x6F\x7A\xB2\xC5\x7A\xD8\xAD\x40\x57\x01\xAF\x6F\xF0\xC2\x87\x75\x03\x3A\x1D\x7E\x4A\x0B\x72\xC0\xDA\x21\x78\x03\x39\x1E\x7E\x43\xD4\x4E\xE2\xB1\xD9\x7E\x9B\x0D\xB3\xA7\xB7\xDE\x68\xFE\x8E\x0F\x73\xC2\x13\xB7\x7D\xD8\xDA\x3F\x83\x13\xCE\x87\x1F\x59\xB4\x83\x27\xD7\x70\xFE\x58\x40\xD9\xC3\x22\xB9\x80\xDC\xC1\xED\x2A\x9E\x20\xCA\xC0\x84\x22\x07\xD2\x48\x85\x0B\xE0\x84\x89\x1E\x4F\x22\x5F\x57\xE3\x81\x11\xE0\x84",
			"\x8C\x1E\x4E\x23\x5F\x58\xBA\xC8\xBE\x8F\x11\xDF\x4D\xD7\x74\xAD\xEF\x7C\x3F\x90\x16\x4F\x92\x1E\x4C\x19\x73\xC4\xE6\xAA\x48\x8C\x12\x7E\x56\x12\x9F\x4C\xD3\xBA\xDE\xB2\xB6\x8F\x98\x1C\xE1\x72\x6A\xB2\xA4\x8B\x0D\xEF\xE9\x50\xF1\xEA\x3C\xA7\x7B\x79\xAA\xEF\x23\xEA\x1B\x36\xAD\x1E\xDA\xE9\xEB\xAE\xFE\x4D\xA8\x71\xA0\x03\x04\xFF\x1E\x83\xB2\xDB\x26\xEC\x61\xFE\x81\x5B\xDB\x6D\xAC",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp2] BEGIN ",
			L"[20][Exp2] END [ENDING]",
			L"[21][Exp2]< Exp2 \"+\" \"+\" @ >",
			L"[22][Exp2]< Exp2 \"+\" @ \"+\" >",
			L"[23][Exp2]< Exp2 \"+\" @ >",
			L"[24][Exp2]< Exp2 @ \"+\" \"+\" >",
			L"[25][Exp2]< Exp2 @ \"+\" >",
			L"[26][Exp2]<< !Exp1 @ >>",
			L"[27][Exp] BEGIN ",
			L"[28][Exp] END [ENDING]",
			L"[29][Exp]< Exp \"<\" @ Exp2 >",
			L"[30][Exp]< Exp \"<\" Exp2 @ >",
			L"[31][Exp]< Exp \">\" @ Exp2 >",
			L"[32][Exp]< Exp \">\" Exp2 @ >",
			L"[33][Exp]< Exp @ \"<\" Exp2 >",
			L"[34][Exp]< Exp @ \">\" Exp2 >",
			L"[35][Exp]<< !Exp2 @ >>",
			L"[36][Module] BEGIN ",
			L"[37][Module] END [ENDING]",
			L"[38][Module]< Exp @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver, ModuleParserStateTypes>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, codeIndex);
	};
}
