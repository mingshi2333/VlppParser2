/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2917; // 24476 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 101;
		static const vl::vint dataSolidRows = 11;
		static const vl::vint dataRows = 12;
		static const char* compressed[] = {
			"\x9C\x5F\x00\x00\x5D\x0B\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x84\x10\x0A\xA9\x0A\x84\x71\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8D\x15\x96\x9D\x9A\x8A\x83\x90\x92\x91\x23\x9B\xA6\x9F\x7A\x96\x91\x97\x94\x0A\xA1\x86\x82\x05\x96\x95\x9A\x98\x28\x9D\xAF\x9A\x97\x9C\x9D\x9C\x8F\x3D\xC0\xBF\x98\x8B\x9A\xA2\x83\x95\x45\xC4\x81\xAA\xA3\xA7\x93\xA2\x9B\x09\x83\x31\x8B\xAE\xA3\x80\xA4\x85\x04\x53\x8D\xAC\x94\xAC\xAF\xAD\x8D\x08\xB3\x9D\xA9\xA5\xAA\x83\xAB\x84\x07\x5A\x8F\xB8\x9B\xB6\x9D\xB6\xA3\x56\xD0\xAF\xAC\xA3\xBD\xB1\x80\x04\x0A\xB4\x9F\xAA\x8A\x02\xB5\xB8\xB6\x7F\xEE\x81\xD0\xB6\xB2\xBB\xC0\xBA\x87\xF6\x9C\x86\xC5\xC0\xC1\xC6\xC1\x8F\x84\xC1\x87\xB5\xBE\xAD\xCA\xB2\x96\x89\xD9\xCB\x8E\xBA\x80\x07\xCE\x93\x8C\xE1\xCE\xC3\xD0\xC9\xD2\xC9\x8B\xA4\xE9\xC6\xDB\xD0\xD4\xCB\x81\x0D\x20\xED\xC8\xC1\xCC\xDB\xD2\xDB\xB3\x8A\xEF\xD5\xDA\xC6\x06\xD9\xDD\xB7\xBA\xE2\xD9\xDB\xC9\xE1\xE2\xE2\x98\xC9\xE3\xAB\xE9\x87\x07\xDF\xE1\xC0\xC8\xCC\xF7\xC3\xEA\xCE\xE5\xBD\xD8\xD4\xD9\xF6",
			"\xEA\x80\x0B\xE6\xD5\xD1\xE1\xD0\xE3\xF0\xF4\xF0\xD7\xE8\x11\x5F\xE7\xE6\xFE\xD4\xF4\xDD\xE8\x12\x79\x95\xFC\xD7\xE1\xE8\x0A\xF5\xED\xE5\xFA\xEB\xFB\xF8\xD5\x0A\xF9\xDB\x74\x77\x76\x76\x04\x9C\x71\x82\x71\x03\x86\x85\x82\x80\xF3\x48\x8A\x43\x05\xB2\x58\x08\x7F\x7B\xEE\x42\x7D\x7C\x6E\x19\x00\x8B\x82\x83\x07\x80\x0B\x07\x84\x16\xBC\x72\x89\x7E\x23\xB8\x6C\x06\x86\x0A\x83\x4E\x06\x6C\x1F\x20\x85\x7D\x85\x2F\x97\x81\x88\x89\x34\x94\x82\x8D\x8C\x25\x8A\x60\x45\x42\x32\x69\x8C\x81\x42\x21\x2E\x89\x83\x8F\x1B\x92\x7D\x86\x08\x42\x8D\x86\x91\x91\xE2\x77\x83\x91\x40\x23\x32\x64\x09\x92\x1D\x8D\x99\x8C\x8E\x35\xB3\x86\x8F\x95\x4F\x80\x05\x08\x95\x4C\xB0\x8D\x95\x74\x26\x28\x84\x92\x8F\x1C\xA1\x9E\x92\x92\x56\x99\x98\x97\x96\xA8\x68\x02\x6E\x44\x09\x59\x55\x96\x98\x6C\xB8\x97\x9F\x9A\x7B\x9C\x99\x9C\x9F\x45\xAD\x00\x98\x9A\x4B\x83\x4E\x0A\x6C\x2F\x18\x5F\x9E\x9F\x7D\xAE\x93\x9A\x9E\x06\x73\x02\x6C\x0D\x8A\x8D\xA0\x9F\xA5\x5A\x99\xAF\x9A\xA6\x8F\x80\xA4\xA1\x9B\x98\x9B\xA2\xAB\x46\x38\x03\xA7\x9A\x40\x39\x32\x6A\x0D\xA5",
			"\x6A\x8C\xAD\xAA\xA3\x8B\xB0\xA6\xA4\xA7\xB1\xA1\xAD\x96\x0F\xA6\xA9\x9F\xA4\xA4\xBB\x9E\xA7\xAA\xAE\x02\x7F\x09\xAD\xA1\xBF\x84\xB0\xB3\xB1\xC6\x89\xB0\xA8\xAD\x09\x40\x13\xB3\xB2\xA3\xB5\xAC\xB3\xAB\xB6\x8A\x41\x13\xB3\xC3\x42\x12\x6F\x10\xAC\xBD\xAE\xAA\xB7\xB2\x94\xB3\xB4\xB8\xB8\x47\x18\xB6\xAF\xC8\x90\xBB\x44\x12\x66\xA9\xBC\xAD\xB1\xEA\x92\xB1\xB7\xAC\xF3\xA2\xB7\x72\x12\xE7\x9F\xB0\xBF\xBB\x01\x4B\x1D\xB9\xB2\x4D\x32\x6E\x13\xBF\xF1\xB4\xBD\xA6\xBE\xEE\xA8\xB9\xB0\x14\xF9\xA1\xB4\xBB\xB8\x02\x51\x14\xC3\x70\x53\x32\x64\x17\xC4\x0A\xC5\xC6\xBF\xC1\x0E\xFB\xB9\xC7\x70\x56\x0D\xC5\xB6\xC1\xF2\x9C\xC3\xC9\x91\x57\x22\xC0\xC5\xC2\xAC\x58\x12\x6D\x16\x18\xC8\xCA\xB0\xBF\x33\xDF\xC6\xCC\x6B\x5B\x2A\xC5\xBF\xC3\x3B\xC2\x4C\x15\xCC\x1D\xEC\xC1\xD1\xCD\x32\xDA\xCC\xCF\x46\x5E\x3A\xC6\xCB\xCA\x44\xC3\xD6\xD2\x40\x42\x3D\x81\x42\x9D\x95\x6B\x4A\x5E\x41\x61\x7C\xCB\x48\x5E\x09\x5C\xD5\x67\xD5\x03\x5E\xDA\xD6\x49\x62\xDE\x6D\x54\xD5\x9A\x6B\x48\xD8\x7D\x6A\xDD\x5D\xDB\x56\x6F\xD5\xD6\x4B\xDA\xC6\x71\xD9\xDA\x49\x60",
			"\xC7\x42\xBF\xD6\x0A\x65\xD6\x70\xDD\xC4\x76\xDC\xDB\xDC\x6E\xF8\xDD\xDF\xDE\x64\xCA\x4F\x67\x56\x80\xEB\x42\xE1\xDD\x84\xF0\xD1\xE6\xDC\x23\x4D\xEE\xE1\xE5\x85\xD8\xE2\xE7\x48\x79\xC1\x49\xD6\xC7\x97\xD8\x4E\xDC\x00\xA3\xCF\xE1\xE3\xE4\x77\xDA\xE4\xE5\x47\x9D\xE4\xE8\xE3\x48\xA3\xCB\xE5\x66\x01\x99\xDD\x44\xEF\xE6\xB6\xF5\xE9\x46\xE5\xA1\xD8\x4C\xED\xEF\xFF\x3F\xED\xEE\xF0\xA1\xC4\xF7\xE6\xF1\x8E\xC8\xF6\xD6\x42\x9F\xC2\xD1\xEB\xE8\xA5\xE8\xE3\xE2\xEA\xA9\xDD\x4A\xF2\xE1\x5D\xEF\xED\x45\xEC\x67\xFA\xEE\xEE\xF7\x17\x57\xFC\xE4\xF3\xDA\xD9\x40\xF5\xF7\xB8\xD9\x4D\xE9\xF4\x37\xBC\xD9\x42\xEC\x9A\x62\xF6\xF4\xF8\xC1\xF4\xF2\xFF\xEE\xF6\xF9\xF9\xF8\x46\xAD\xCD\xFD\xD3\xF3\x87\x6C\x72\xFE\x2B\x78\x7F\xFD\x57\x23\x7D\xE5\x62\x76\xE2\x68\x74\x81\xEF\x46\x85\x7E\x0F\x97\x7E\x03\x8D\x81\x7D\x01\x95\x7A\x7D\xE4\x74\x5E\xFB\x06\x2C\x7D\xF9\x51\x86\x82\xD3\x6C\x75\x00\xF6\x5B\x83\x81\x30\x7C\x3E\xB7\x74\x83\x3F\x29\x87\x82\x8C\x12\x2C\x47\x5D\x23\x74\xF2\x2C\x81\x85\x8C\x34\x80\x72\x23\x2F\x86\x41\x52\x66\x38\x19\x8C\x85",
			"\x85\x15\x9F\x82\x10\xAA\x82\x83\x03\x99\x84\x84\x89\x79\x7A\x00\xC3\x80\x89\x7F\x08\x82\x83\x49\x86\x23\x09\xC6\x3C\x86\x00\x2D\x75\x84\x9C\x3B\x2B\x0D\xA7\x73\x25\x2A\x97\x89\x8A\x03\x2C\x22\x16\xF4\x7A\x87\x81\x29\x2B\x2B\xA3\x7D\x2F\x56\x5E\x81\x86\x85\x22\x8B\x76\x64\x8A\x23\x19\x95\x39\x8D\xAE\x2C\x88\x8D\x6E\x9D\x2B\x16\xC0\x7E\x84\xA0\x4A\x81\x21\xFE\x6B\x27\x1D\xF4\x89\x8F\x31\x8F\x85\x8C\x02\x33\x8E\x66\x75\x8B\x8D\x8F\x38\x89\x21\x6F\x9A\x33\x1E\xFC\x8F\x1F\x2A\x98\x33\x74\x91\x88\x85\x1C\xE8\x2D\x8D\x84\x2A\x8D\x32\x96\x9D\x92\x41\x19\x96\x39\x49\xBC\x88\x91\x01\x2A\x90\x7D\x0C\x90\x94\x47\x84\x90\x92\x7A\x9B\x92\x58\x0F\x98\x6A\x3B\xAE\x93\x91\x85\x90\x8F\x21\xF2\x82\x95\x81\x1F\x92\x92\xF4\x66\x94\xF0\x28\x90\x00\x55\xBD\x84\x2F\xB1\x9B\x94\x27\xB4\x9E\x97\x64\xAA\x84\x98\x5F\x90\x77\x11\xC0\x9A\x98\x83\x06\x9C\x38\xAC\x9A\x31\x15\xD5\x88\x8B\x80\x24\x94\x38\xC2\x9D\x77\x36\xBD\x99\x8A\x5D\x8F\x9C\x97\xCC\x82\x23\x2F\xF4\x33\x9D\x74\x9E\x9E\x99\x4D\x84\x9B\x35\xDD\x90\x01\x75\x94\x8E\x45\x98\x90",
			"\x9D\x0D\xFD\x89\x21\x68\x9B\x7B\x9A\xEC\x98\x9D\x2E\xD4\x97\x9D\x65\xAF\x96\x20\xF6\x80\x9D\x30\xB2\x96\x8C\x72\x81\x21\xA1\x2B\x21\x9D\xE8\x72\x9E\xA1\x7A\xBA\x98\x87\x1D\x30\x99\x45\x81\x96\x24\x89\x97\x74\xA2\xEE\x96\xA3\x12\xC4\x80\x84\x8C\x85\x84\xA4\x4C\x9B\x9D\x10\xAA\x8D\x7F\x04\x97\x27\x7C\x23\xAD\x89\x11\x90\x8C\xA5\x11\xA3\x6A\x9A\xEF\x7F\x86\x4A\xB4\xA2\xA7\x92\x9C\x8E\x83\x35\xA0\x92\x4B\xFF\x10\xA7\xCA\x33\xA3\xA6\x4F\x88\x88\x4E\xD2\x86\x97\x5B\x87\x98\x86\x86\x8A\x85\x28\xA1\xAC\x9B\x8E\x8C\xA6\x95\xF4\x98\x33\x54\x87\xA3\x21\xAA\xA3\x26\xA3\x8E\x64\x9B\x25\xCE\xAF\x6E\x9F\x94\x94\xA7\x3B\xA7\xA8\xFD\x2D\xA0\x8B\xA5\xA1\x6A\xA7\x26\xB3\x81\x13\xC9\xA7\xA7\x7F\xB9\xA5\x91\x50\xBC\xAA\x40\x5E\xA9\x77\x07\xAD\x9A\xAF\x01\x3C\xAE\x0D\xD7\xAE\x91\xAC\x8D\xAB\x87\x15\xA2\xB0\x46\x60\xAB\x24\xB1\x95\xA0\x33\x8C\xB6\xA9\x35\xB7\x96\xB1\xA8\xB1\x9C\xAC\xD8\x98\xB3\xF2\x09\x20\xAC\xB5\xA9\xA1\xAE\x2B\xB3\xAE\x42\x1D\xB6\xAC\x4A\x88\xA8\xA0\xCE\x77\x71\x51\x9A\x3D\x74\xD2\x9F\xB7\xA7\x27\xA2\xB6\x12\xCA",
			"\xA6\xAE\xA6\x96\xB3\xA7\xA3\x73\x9E\x49\x1C\xAC\x8E\xDE\x80\x7E\xB7\xBD\x79\xB5\x57\x40\xB0\x81\xA8\x15\xA4\x98\xF4\x9E\x9E\xF9\x7E\x8F\xA4\x85\x00\x23\x2B\x6C\x18\xB3\x20\x83\x2E\xB1\xBC\x83\x25\x75\xD5\xA8\xB1\x3F\x8A\x24\x98\xC0\x53\xBA\x20\xDD\xB2\x34\x76\xDD\x5B\xAF\x7F\x44\x9E\x7F\xDF\xA1\x23\x79\xE2\xBC\xBA\xD4\x80\x01\xBD\x00\x04\x9A\x7C\xED\xBC\xB2\xF6\x86\xBD\xBE\xD6\xA2\x23\x78\xF8\xBA\xBB\x59\x86\x20\xA4\xFD\xB7\xB8\x7D\xD6\x96\xBF\xFF\xA8\x99\xC0\xFA\xA3\xC2\x80\xF7\xBE\xBE\xEA\xA6\xBD\xC0\x0E\xD9\xBD\x40\x7B\xB8\xC1\x09\xCA\xC2\x20\xA3\x74\xC3\x5B\xDB\xBC\xC1\x0D\xCD\xC0\xBC\xCE\xAF\xC1\x42\x4F\xBF\xC2\xF5\xA1\xC4\xC3\x06\xDE\x90\x84\xA0\xCA\xC4\x09\xD6\x8F\xC2\x0F\xAB\xC6\x89\xB0\x9D\xC2\xBD\x64\xAF\x06\x3C\x90\xBE\x9C\x64\xA8\x07\x1C\xEC\x40\xB3\x39\x1E\xC4\x59\xF1\x34\xAC\x1D\x02\xC9\xC5\xB5\x84\xAF\x0E\x47\xC1\xC2\x83\x24\xC7\x96\x3C\x0C\xC8\x8B\x86\x2E\x3A\xB2\xBD\x02\xCA\x33\xD4\xC8\x66\xBE\x08\xCB\x17\xC9\x21\x4A\x64\xBF\x05\x97\xAD\x7F\x4A\xB2\x80\x0D\xCB\xC4\x8B\x04\x66\xC1\x0D\xCB\x2F",
			"\x18\xB1\xA1\x98\xAF\xBD\xC9\x18\xBB\x8A\x90\x32\xC6\xCB\x45\x5B\x23\x35\x9B\x2E\xBA\xF7\x8A\xB8\x37\xAD\x70\xCF\x81\x83\x28\x79\x38\xC0\x75\x75\x80\x6B\x69\xCF\x16\xCC\xBF\x5B\x9F\x98\x70\xCE\x28\xC4\xA1\xE4\xBC\xD0\x02\xE4\xA9\x3D\x75\x4A\x23\x7F\x12\xD8\xC2\x4A\xF1\xB8\x99\x64\xB0\x41\xA6\x9D\x43\x8A\x00\x00\x74\x98\x75\xCA\x23\x87\x23\xD6\x21\x16\x5C\xD1\x20\x55\xC6\x23\xA9\x83\xDE\x95\x20\x6C\xD3\x20\x65\xC5\xC4\x00\x77\x37\xD6\x81\x3D\xCC\xAC\x27\x0A\x6A\x7B\x89\xD3\xCF\x0E\x7E\x79\xBB\x47\x6A\x4B\x16\xAD\x7A\xD1\x2E\x57\x9B\xAB\x03\x3B\xC5\x85\xFF\x7A\x31\xD1\x50\xDA\x20\x74\x53\xDB\xD3\x01\x2F\xC9\x4E\xE4\xAB\xDB\xC9\x49\xA2\xA0\x89\x2A\x04\x4F\xD1\x3A\x42\xBD\xD1\xC5\xA3\xAE\x97\x51\x74\xC0\x02\x06\xFF\x47\x46\xBB\x89\xAB\xCE\x85\x14\x56\xDD\xA5\x4F\xD4\x00\x3B\x42\xD7\x81\xAA\x98\xB3\xAB\x5A\xDD\x74\x53\x4E\xC5\x6F\xA9\xD1\x21\x3C\x1F\x5C\xAE\x7A\xD9\xD7\xAE\xBE\xD9\x95\x98\xAE\x5A\xBE\xDA\x5A\xDF\x32\x6E\xC1\x36\x2D\xCE\xA8\x11\x66\xD3\x39\x60\xEE\xD8\xE3\x06\x31\xD2\x53\xE0\xD1\x3A\x90\xC3\x27\xE0",
			"\x06\x2C\x5E\xBB\xCC\x0F\x5E\x35\xDF\xE4\xD6\x8E\x83\x62\xBB\xD2\x0F\x5F\x44\x6E\xDE\x37\x19\xF7\x97\xC5\x6E\xD1\x3A\x49\x77\xE3\xB4\x98\xAE\x66\xBB\xBF\x6A\xDF\x1B\x1E\xD0\xE7\x96\xCE\xA9\xD2\x6E\xD2\x0D\x7F\x7B\x06\xD3\x22\xE6\x84\x66\xE4\x02\xD9\xE6\x0A\x20\xD3\x4E\xA5\x0F\xBF\x67\x03\x59\x58\xC3\x21\xEA\x58\xB4\x65\x74\x5E\xE2\x20\xA4\xD4\xB2\xEC\xC3\x38\xE8\x6C\x1A\xB8\xEC\xD5\x04\xCE\xB6\x4E\xA8\x0D\xD5\x86\x2F\xED\x81\x2A\xEE\x95\x69\x1F\x5F\x1A\x43\x5E\x21\x9C\xEE\x91\xBA\x35\xC8\x5A\xB0\x7A\xDD\xEE\x83\x28\xE3\x20\x6F\x10\xC4\x00\x72\x0F\x5F\x6B\x44\xF0\xE6\x1F\x34\x0E\xE2\xF7\x0F\x5E\x6E\x7A\xDB\xD3\x06\x3C\xD6\x53\xF9\x0A\xF0\x70\xD8\xF3\x20\xAB\xCE\xA8\x1F\x1E\xD0\x11\x61\x5F\xF2\x20\xF2\xCE\xA9\x20\x1E\xD5\x10\xD3\xCA\x25\x03\x98\xA6\x12\xA7\x8A\x1E\xF5\x84\x2B\x44\xAC\x8B\x1E\xD3\x23\x43\x56\x02\x4D\xEC\xEF\x66\xA8\x22\xD5\xE6\x98\xB0\x13\xCE\xF4\x62\xF8\xA0\xF8\xB3\x24\x1E\xD7\x13\x61\x48\xF8\xF5\x98\xB8\x12\xA7\x9C\x1E\xF9\xD7\xD8\xB5\x13\x9E\xC1\x15\xF5\xB6\xF8\xB2\x51\x1E\xD6\x14\xC3\x48\xDF",
			"\xF0\xE4\xA7\x15\xB9\xC3\x22\xFC\xC9\xE4\xAC\x2A\x7F\x5A\x15\xF0\xCA\x21\xF5\xB7\x8B\x17\xBF\x2D\x1E\xFD\x84\x30\xF4\xAC\xAE\x1F\x5C\x2C\x75\xF6\x21\xDB\xCE\xA9\x16\xFF\x23\x0B\xC3\x29\x21\x09\x18\x7E\x61\x70\x7C\xB8\x1A\x01\x0A\x1A\x79\xB7\x44\x0B\xC6\x7A\x30\x0A\x89\x10\xA1\x77\x4B\xB7\x0E\x69\xBB\x03\x2C\x11\x86\x10\xF0\x7E\x4A\xBC\x0E\x69\xC0\x08\x81\xD6\x74\x56\xC1\x0E\x69\xC5\x00\x82\xDC\x74\x56\xC6\x0E\x69\xCA\x03\x2C\x13\x82\x10\xBD\x7F\x6D\x6D\x7C\x1A\x1B\x81\x10\xCF\x75\x58\x31\x88\x1A\xF7\x76\x10\x04\x83\x72\x37\x88\x1B\xFE\x73\x10\x19\x87\x76\x08\x8A\x18\xAE\x63\x7E\x4E\x5B\x0C\xE6\x72\x10\x45\x89\x7E\x4E\x5C\x0C\xFF\x2E\x0C\xC3\x2B\x84\xD0\x74\x56\xCF\x0F\x2F\xD1\x01\x85\x21\x8E\x54\xD2\x0F\x2F\xD4\x08\x85\x27\x8E\x54\xD5\x0F\x2F\xD7\x03\x2C\xFC\x6D\x4C\x64\x58\x0D\x1C\x7A\x1A\x45\x0A\x78\x65\x82\x10\x87\x72\x10\xDC\x0E\x69\xE0\x0F\x2F\x2A\x78\x64\x03\x1D\x86\x10\x74\x56\xE2\x0E\x69\xE6\x0F\x2F\xFE\x21\x78\x00\x08\x24\x7E\x7E\x48\xE8\x0F\x80\xAC\x12\x73\x76\x82\x10\x82\x86\x78\x98\x5B\x0E\x8A\x7E",
			"\x0E\xFF\x22\x31\x80\x8B\x88\x0D\x54\x56\xF0\x0A\x78\xF3\x0F\x2F\x3B\x79\x88\x50\x2A\x10\xB6\x6E\x54\xF5\x06\x88\x43\x30\x66\x06\x16\x71\x4E\x58\x0F\x9E\x6C\x0F\xC3\x24\x8A\x03\x1E\x71\x4E\x5D\x0F\x9E\x61\x00\x5D\x63\x70\xA0\x6E\x54\x02\x0C\x43\xC8\x53\x1C\x29\x30\x88\x04\x7C\x88\x64\x55\x00\xB8\x8D\x37\x3C\x4D\x3A\x5A\x0A\x78\xBD\x85\x89\x4E\x5A\x00\xC1\x89\x10\x0D\x03\x8C\x0A\x1D\x05\x8A\x7D\x70\x02\x1F\x89\xB7\x4F\x00\xCB\x8B\x31\x0A\x12\x8D\x01\x16\x8A\xB7\x42\x01\x3C\x40\x38\x16\x03\x8B\xC3\x1A\x8D\x00\x0E\x8A\xB7\x47\x01\xDF\x8A\x6A\xE2\x8A\x1A\xDC\x8A\x88\xBF\x75\x34\x1D\x7A\x10\xC7\x87\x80\xF0\x8A\x1A\xD2\x63\x10\xD4\x8E\x4A\x1C\x0B\x8E\x32\x37\x8F\x02\x1D\x8E\x8E\x4D\x01\xCE\x89\x10\x1F\x0C\x8F\x71\x2A\x10\xE6\x8E\x4A\x20\x03\x90\x06\x12\x02\x06\x98\x1B\xD9\x66\x86\x4E\x53\x02\x3C\x44\x5C\x8A\x10\x06\x9E\x61\x91\x6E\x88\x59\x28\x05\x91\x0A\x1D\x02\x0C\x93\x10\x54\x7E\x6E\x1A\x99\x87\x4E\x5F\x02\x1E\x99\x10\x34\x01\x92\x02\x12\x77\xEE\x6E\x72\x06\x15\x6E\x64\x56\x03\x0F\x9C\x34\x2C\x0F\x8E\xA8\x11\x38",
			"\x76\x62\x5D\x71\x67\x6D\xE5\x5C\x93\x71\x61\x67\xCC\x6B\x11\x43\x9F\x2F\x72\x6F\x15\x8A\x58\x11\x7F\x53\x6D\x96\x4B\x94\x0E\x7E\x62\x47\x93\x6D\x51\x96\x8B\x63\x1F\x67\xFC\x36\x94\xAD\x3C\x6C\xAD\x36\x49\x88\x64\x94\x9E\x68\x67\x4D\x6A\x6B\x5A\x92\x1B\x60\x9E\x6B\x5E\x90\x88\x65\x9E\x4A\xB9\x89\x12\x6B\x99\x43\x64\x94\x4C\x96\x4A\x51\x8A\x7C\x6C\x70\x9B\x11\x72\x98\x96\x7C\x63\x16\xCA\x34\x6C\x0A\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp2] BEGIN ",
			L"[20][Exp2] END [ENDING]",
			L"[21][Exp2]< Exp2 \"+\" \"+\" @ >",
			L"[22][Exp2]< Exp2 \"+\" @ \"+\" >",
			L"[23][Exp2]< Exp2 \"+\" @ >",
			L"[24][Exp2]< Exp2 \"-\" \"-\" @ >",
			L"[25][Exp2]< Exp2 \"-\" @ \"-\" >",
			L"[26][Exp2]< Exp2 \"-\" @ >",
			L"[27][Exp2]< Exp2 @ \"+\" \"+\" >",
			L"[28][Exp2]< Exp2 @ \"+\" >",
			L"[29][Exp2]< Exp2 @ \"-\" \"-\" >",
			L"[30][Exp2]< Exp2 @ \"-\" >",
			L"[31][Exp2]<< !Exp1 @ >>",
			L"[32][Exp] BEGIN ",
			L"[33][Exp] END [ENDING]",
			L"[34][Exp]< Exp \"<\" @ Exp2 >",
			L"[35][Exp]< Exp \"<\" Exp2 @ >",
			L"[36][Exp]< Exp \">\" @ Exp2 >",
			L"[37][Exp]< Exp \">\" Exp2 @ >",
			L"[38][Exp]< Exp @ \"<\" Exp2 >",
			L"[39][Exp]< Exp @ \">\" Exp2 >",
			L"[40][Exp]<< !Exp2 @ >>",
			L"[41][Module] BEGIN ",
			L"[42][Module] END [ENDING]",
			L"[43][Module]< Exp @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver, ModuleParserStateTypes>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 1, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 2, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 4, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 5, -1, 3, 3, },
			{-1, -1, -1, -1, -1, -1, 6, -1, -1, },
			{3, 3, 3, 3, 3, 3, -1, 7, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return Parse<ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
