/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3062; // 27628 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 246;
		static const vl::vint dataSolidRows = 11;
		static const vl::vint dataRows = 12;
		static const char* compressed[] = {
			"\xEC\x6B\x00\x00\xEE\x0B\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x84\x10\x0A\xA9\x0A\x84\x71\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8D\x15\x96\x9D\x9A\x8A\x83\x90\x92\x91\x23\x9B\xA6\x9F\x7A\x96\x91\x97\x94\x0A\xA1\x86\x82\x05\x96\x95\x9A\x98\x28\x9D\xAF\x9A\x97\x9C\x9D\x9C\x8F\x3D\xC0\xBF\x98\x8B\x9A\xA2\x83\x95\x45\xC4\x81\xAA\xA3\xA7\x93\xA2\x9B\x09\x83\x31\x8B\xAE\xA3\x80\xA4\x85\x04\x53\x8D\xAC\x94\xAC\xAF\xAD\x8D\x08\xB3\x9D\xA9\xA5\xAA\x83\xAB\x84\x07\x5A\x8F\xB8\x9B\xB6\x9D\xB6\xA3\x56\xD0\xAF\xAC\xA3\xBD\xB1\x80\x04\x0A\xB4\x9F\xAA\x8A\x02\xB5\xB8\xB6\x7F\xEE\x81\xD0\xB6\xB2\xBB\xC0\xBA\x87\xF6\x9C\x86\xC5\xC0\xC1\xC6\xC1\x8F\x84\xC1\x87\xB5\xBE\xAD\xCA\xB2\x96\x89\xD9\xCB\x8E\xBA\x80\x07\xCE\x93\x8C\xE1\xCE\xC3\xD0\xC9\xD2\xC9\x8B\xA4\xE9\xC6\xDB\xD0\xD4\xCB\x81\x0D\x20\xED\xC8\xC1\xCC\xDB\xD2\xDB\xB3\x8A\xEF\xD5\xDA\xC6\x06\xD9\xDD\xB7\xBA\xE2\xD9\xDB\xC9\xE1\xE2\xE2\x98\xC9\xE3\xAB\xE9\x87\x07\xDF\xE1\xC0\xC8\xCC\xF7\xC3\xEA\xCE\xE5\xBD\xD8\xD4\xD9\xF6",
			"\xEA\x80\x0B\xE6\xD5\xD1\xE1\xD0\xE3\xF0\xF4\xF0\xD7\xE8\x11\x5F\xE7\xE6\xFE\xD4\xF4\xDD\xE8\x12\x79\x95\xFC\xD7\xE1\xE8\x0A\xF5\xED\xE5\xFA\xEB\xFB\xF8\xD5\x0A\xF9\xDB\x74\x77\x76\x76\x04\x9C\x71\x82\x71\x03\x86\x85\x82\x80\xF3\x48\x8A\x43\x05\xB2\x58\x08\x7F\x7B\xEE\x42\x7D\x7C\x6E\x19\x00\x8B\x82\x83\x07\x80\x0B\x07\x84\x16\xBC\x72\x89\x7E\x23\xB8\x6C\x06\x86\x0A\x83\x4E\x06\x6C\x1F\x20\x85\x7D\x85\x2F\x97\x81\x88\x89\x34\x94\x82\x8D\x8C\x25\x8A\x60\x45\x42\x32\x69\x8C\x81\x42\x21\x2E\x89\x83\x8F\x1B\x92\x7D\x86\x08\x42\x8D\x86\x91\x91\xE2\x77\x83\x91\x40\x23\x32\x64\x09\x92\x1D\x8D\x99\x8C\x8E\x35\xB3\x86\x8F\x95\x4F\x80\x05\x08\x95\x4C\xB0\x8D\x95\x74\x26\x28\x84\x92\x8F\x1C\xA1\x9E\x92\x92\x56\x99\x98\x97\x96\xA8\x68\x02\x6E\x44\x09\x59\x55\x96\x98\x6C\xB8\x97\x9F\x9A\x7B\x9C\x99\x9C\x9F\x45\xAD\x00\x98\x9A\x4B\x83\x4E\x0A\x6C\x2F\x18\x5F\x9E\x9F\x7D\xAE\x93\x9A\x9E\x06\x73\x02\x6C\x0D\x8A\x8D\xA0\x9F\xA5\x5A\x99\xAF\x9A\xA6\x8F\x80\xA4\xA1\x9B\x98\x9B\xA2\xAB\x46\x38\x03\xA7\x9A\x40\x39\x32\x6A\x0D\xA5",
			"\x6A\x8C\xAD\xAA\xA3\x8B\xB0\xA6\xA4\xA7\xB1\xA1\xAD\x96\x0F\xA6\xA9\x9F\xA4\xA4\xBB\x9E\xA7\xAA\xAE\x02\x7F\x09\xAD\xA1\xBF\x84\xB0\xB3\xB1\xC6\x89\xB0\xA8\xAD\x09\x40\x13\xB3\xB2\xA3\xB5\xAC\xB3\xAB\xB6\x8A\x41\x13\xB3\xC3\x42\x12\x6F\x10\xAC\xBD\xAE\xAA\xB7\xB2\x94\xB3\xB4\xB8\xB8\x47\x18\xB6\xAF\xC8\x90\xBB\x44\x12\x66\xA9\xBC\xAD\xB1\xEA\x92\xB1\xB7\xAC\xF3\xA2\xB7\x72\x12\xE7\x9F\xB0\xBF\xBB\x01\x4B\x1D\xB9\xB2\x4D\x32\x6E\x13\xBF\xF1\xB4\xBD\xA6\xBE\xEE\xA8\xB9\xB0\x14\xF9\xA1\xB4\xBB\xB8\x02\x51\x14\xC3\x70\x53\x32\x64\x17\xC4\x0A\xC5\xC6\xBF\xC1\x0E\xFB\xB9\xC7\x70\x56\x0D\xC5\xB6\xC1\xF2\x9C\xC3\xC9\x91\x57\x22\xC0\xC5\xC2\xAC\x58\x12\x6D\x16\x18\xC8\xCA\xB0\xBF\x33\xDF\xC6\xCC\x6B\x5B\x2A\xC5\xBF\xC3\x3B\xC2\x4C\x15\xCC\x1D\xEC\xC1\xD1\xCD\x32\xDA\xCC\xCF\x46\x5E\x3A\xC6\xCB\xCA\x44\xC3\xD6\xD2\x40\x42\x3D\x81\x42\x9D\x95\x6B\x4A\x5E\x41\x61\x7C\xCB\x49\x5F\x09\x78\x5B\x57\xD5\x03\x5E\xD6\xBF\xD6\x0A\x5F\x6B\x54\xD5\x9A\x6B\x48\xD8\x7D\x6A\xDD\x5D\xDB\x56\x6F\xD5\xD6\x4B\xDA\xC6\x71\xD9\xDA\x49\x60",
			"\xC7\x42\xBC\xD9\x5D\xDD\x54\xDC\x71\x76\xEC\xD3\xDE\xDB\x78\xCA\x42\xDA\xD6\x26\x5C\xD6\x42\xD9\x95\x7F\xDB\x49\xE0\x75\xC3\xE0\xDE\xE4\x72\xE3\x4E\xE3\xE3\x96\xC4\xE9\xE7\xE4\x23\x79\xD1\x41\xD6\x1E\xD8\xE8\x46\xE2\x61\xFE\xDA\xE5\x47\x97\xE2\xE8\x45\xEA\xAA\xFF\x3E\xE4\x00\x87\xE1\xEA\xE8\xE9\x9E\x5D\x56\x03\xE9\x19\x77\xEC\xE5\x47\xBA\xD5\xE8\xE8\xEE\xAB\xC0\xF7\x44\xEB\xAA\xC4\xF2\xEA\xF1\x98\xC8\xFF\xE2\xF2\x56\xCA\x40\xEA\xD0\xA2\xF4\xE7\x5E\xE9\xBB\xD9\x4C\xF0\xE5\x77\xDD\xE6\xE3\xDE\x89\xE5\xD4\xF6\xEF\xD6\xC2\xFF\x3F\xF5\xDA\xC9\x4F\xF1\xD3\xD1\xDB\xF7\xDA\xF8\xAF\xF1\xE0\xF4\xE6\xD2\xC0\x0C\xE2\x66\xE4\xFF\xE5\xF5\xF0\xF7\xC3\xF2\xF9\xFD\xE1\xF9\xF3\xF8\xFB\xCE\x7C\x7B\x48\x71\x7E\x7C\xE2\x3C\x78\x7F\xE0\x68\x81\xF6\x1D\x2D\x7C\x01\x9D\x21\x7E\xF3\x74\x3F\x01\xFA\x7E\x7F\x09\xBF\x7D\x82\xFB\x79\x82\xFF\x2F\x77\x7C\x68\x7C\x6E\x20\x05\x90\x70\xE0\x58\x72\x71\xCD\x49\x87\x22\x0D\x94\x5F\x07\x83\x21\x82\xE3\x3D\x73\x81\xB9\x62\x7E\x54\x3C\x4D\x2B\xF8\x4A\x7F\x85\x25\x9C\x76\x0C\xAE\x46\x87\xEF\x70\x82",
			"\x81\x39\x9D\x7F\x09\x97\x83\x88\x0B\x9C\x86\x81\x19\x24\x82\x0F\xC1\x80\x89\xC8\x65\x78\x84\x48\x83\x76\xF7\x5B\x22\x6B\x80\x2F\x73\x85\x9C\x3B\x28\x0E\xCE\x8D\x23\x2A\x80\x07\x8A\xDD\x69\x20\x43\x5A\x8B\x86\xB4\x35\x84\x2F\x5D\x3E\x88\x18\x83\x8A\x21\x31\x95\x33\x8B\x23\x83\x27\x0C\x86\x29\x2D\xAD\x31\x79\x7E\x2B\x2A\x8F\x19\xE2\x86\x77\x32\xA2\x2E\x8E\x01\x94\x88\xD0\x52\x8C\x8E\x32\xBE\x7B\x8E\x03\x35\x8D\x65\x77\x89\x8D\x8F\x00\x95\x90\x6F\x82\x7E\x17\x98\x31\x7E\x37\x9A\x30\x8E\xAD\x78\x20\x22\x82\x2A\x90\xCD\x0C\x92\x90\x8E\x9E\x91\x1B\xFD\x87\x90\x85\x1D\x94\x3E\x9F\x95\x33\x24\xFB\x86\x20\x4B\xB4\x38\x93\x99\x9F\x1F\x26\xD6\x8C\x95\x81\x1D\x86\x24\xAB\x8F\x91\x2B\xA4\x93\x89\x59\x80\x07\x94\xC6\x29\x97\x25\xE2\x70\x97\x4C\xBE\x90\x98\xC4\x22\x9B\x2B\xFE\x89\x91\x5A\x82\x20\x8F\x26\x25\x99\xEB\x3E\x9B\x8D\x07\x81\x91\x92\xA5\x86\x8E\x2E\x83\x20\x9B\x91\x1E\x8E\x8B\x58\x81\x22\x2B\xAE\x82\x92\x1E\xA3\x96\x90\xBD\x86\x96\x33\x81\x2D\x9B\x2E\xA6\x98\x92\xC3\x99\x98\x1D\xEB\x90\x01\x76\x99\x27\x9B\xF4\x83",
			"\x9C\x71\x52\x9A\x74\x6A\xB4\x9F\x96\xDE\x8F\x9F\x2E\xE8\x9F\x87\x8B\x07\x9C\x9E\xF6\x98\x20\x3F\xA2\x7B\xA0\xCC\x47\xA3\x9B\xCF\x9C\x95\x41\xB2\x9A\x9C\x88\xAC\x9A\xA2\x4C\x86\xA3\x20\x97\x21\x7E\x80\xBA\x82\x9E\xCD\x96\xA1\x3D\xCB\x8C\x8A\x21\x93\xA6\x82\x28\xBA\x81\x11\x80\x86\x7D\x28\x9C\xA2\x7D\x8D\x6A\xA7\x49\xAC\xA0\x8A\x15\xA1\x8B\x71\x24\xB1\x8E\xFD\x2B\xA8\x83\x9E\x83\x8F\x88\x36\xAC\x8D\xDF\x6B\x7E\xA7\x89\xA9\x83\x6C\x37\xAC\x85\x23\xA1\x98\x94\x17\x4D\xA7\x71\xB9\x8B\x92\x53\xCC\x91\x95\x70\x9F\x21\x8F\x4C\xAD\xA8\x0D\x84\xA9\xA2\x8A\x99\xA9\x99\x5F\xA6\x82\x4C\xDD\xA9\xA5\xA2\x9D\xA8\xA8\x48\xA2\xA9\x4D\xB1\xA6\xAD\x92\x98\x27\xA8\x88\x6A\xAE\x52\xA0\x96\x20\x70\x89\xAA\x20\x76\xA3\x27\x53\xD8\xAB\xAA\xA9\xBD\xA9\x9E\xE9\x9F\xAA\x55\x98\x38\x9E\x91\xB9\xAF\xA3\x81\xB9\xAB\x60\x98\xAE\xAD\x8B\x3B\xAE\x24\xBE\x94\x91\x58\xAB\x2F\xB0\x39\x93\xB7\xAE\x8E\x8D\x79\x42\x4F\xA5\xAC\x9E\x9E\xB6\xA8\x0A\x3C\xB3\x58\x8D\xB4\x88\xD0\xAD\xA1\xA8\xD6\x83\xA9\x65\x2F\x72\xB5\xB6\xBA\xA6\xA4\x67\xB0\xA5\x5C\xA9",
			"\xB8\xA6\x91\x80\x24\xAB\xA4\xB1\x7C\x32\xAB\x2E\xA2\xD5\x7D\xB2\x74\xBF\xB0\x7D\x45\x95\x31\xB9\xC7\x71\x7E\x97\x56\xA8\xB8\x66\xDF\x84\x9F\x6A\xA8\x34\x0D\x61\xBA\x8D\x54\x51\xBF\x5F\xC8\xB2\x37\x75\xBE\x9F\x6E\x74\x86\x29\xBB\xEB\x8A\x25\xBB\x7F\xA2\x20\x76\xD7\x93\x21\xED\x83\x26\x97\xE7\x66\xBE\x40\x68\xBE\xBB\xE9\xAE\xBC\xBB\xDF\xA1\xB5\x7B\xF0\xBB\xB3\xF9\xA7\xBA\xBE\xE1\xB4\x97\x7B\xA1\xA5\xAF\xEA\x83\xBD\xBC\xFE\xBA\x99\x7F\x89\x23\xBC\x02\xF1\xBE\xC0\xFB\xA2\xBF\x81\x83\xCF\x8E\xFA\x8C\xC3\x20\x05\xCF\xC2\x82\x89\xC3\x7A\x04\xCE\xC5\x74\x16\xD7\xBE\x6A\x90\xCB\xC1\x81\x37\xB5\xC1\x1A\xC6\x23\x87\x9C\xC4\xC2\x00\x23\xC3\xC2\x17\xD1\xA1\x7E\xCC\xB5\xC5\xF8\x6A\xB9\x20\xBE\x8E\xC5\x80\x83\xA9\xC5\xCF\x61\xAC\x54\x55\x8F\xC4\x00\x72\x4F\xAA\x5F\xB9\x01\xC7\x2C\x41\xAE\x2F\xBA\x00\xC9\xAF\xB1\x3D\xC7\x0A\x3B\x05\x91\xB5\xC4\x21\x1B\xCA\x24\x07\x4B\xC1\xC6\x87\xC2\xCA\x21\x1E\x11\xCB\xBD\xDD\x2E\xC9\x42\x3E\x07\xCA\x18\xD9\xCA\xCB\x03\x3F\x05\x97\xAC\xC6\x21\x28\x60\xCA\x20\x40\x03\xCF\xEB\x5F\x47\xCD\x80",
			"\x01\x0B\xCC\xBE\x8B\x05\x9B\xC8\x5F\x0B\xB0\x89\xA2\x31\x5D\x40\x25\xC9\x61\xAF\xA9\x1B\xD1\x3D\xB0\x20\xC8\xC4\xA1\x1B\x2B\xB7\xE1\x1D\x4A\xBB\xE4\xA2\xD1\xB1\x2F\x77\xCF\xE3\x1D\x48\x99\xCA\x77\xC7\xDF\x2F\x71\xD3\xCB\xB7\x63\x68\xAC\xAA\x49\x97\x7A\x9F\x6E\xE7\x19\xC2\x20\x7F\x73\xD3\x7F\xC5\x5D\x4B\xF4\x35\x4A\x21\xFF\x3F\xD1\x85\x86\x2F\x6F\x18\xDA\xD2\x49\x10\x47\xD5\x87\x2D\x80\x01\x56\xF8\xBD\x48\x5D\x5F\x42\xAC\x86\x2D\x44\x55\xC0\x06\x3B\xBB\xD2\xC8\x27\xAF\xDD\x43\x20\x41\xDA\x20\x6C\xC1\xD1\x40\x77\x37\xD9\xA9\x43\x5D\x4B\x27\x0A\x69\xA2\xCE\xDD\x43\xA5\x7D\x60\x59\xE7\x6A\xBA\x6A\x56\xDC\xDB\x5B\xE4\xC0\xD7\x7B\xC4\x66\x80\x80\xC5\xDA\x25\x7C\xC2\xC2\xEF\x67\x39\x01\x87\xB8\x35\x2E\x74\x48\xDD\xE8\x6A\x33\x89\xAB\xD3\xD1\x70\xDB\x60\x8D\x09\x2D\xD2\x9F\xC3\x3A\x05\x6E\x45\x5A\x42\xCD\xC3\xA5\x7D\xE5\xDD\x43\x43\x41\xE2\x06\xFF\x47\x45\xC0\xBA\xB4\xD9\x22\x54\x51\xE0\xA5\x5E\xD7\x8E\x2C\xD7\x9C\x83\x3A\xDE\xD2\xAC\x2B\x56\xAF\xD1\x33\x4B\x15\xFA\x9D\xCF\x18\xE8\x34\x0F\x7F\x58\x56\x5F\xC9\xDC\xDC",
			"\x34\xDC\xBD\xBD\x9D\x4E\x58\x5F\xDA\x5E\xD7\x65\x4B\xC5\x6C\x79\xDD\xE0\x42\x44\x0E\xDF\xC8\x51\xD9\xC0\xB3\xE6\x20\x4F\xE0\xDA\xDC\xF7\xC9\x20\xCF\x83\x20\xE4\xC1\x83\x3C\x5D\x01\xEC\x0B\xBF\x72\xCB\xE7\x51\xC8\x5D\x4B\x03\x61\xE2\x14\x7F\x59\x51\x80\xFE\x34\xE6\x04\xE5\x4B\xC5\x01\xE1\x3A\x49\x56\xEE\xDB\xA4\xCA\x4A\xCB\x01\xEF\x66\x5F\xF7\x00\xE7\x00\x17\xEB\x3C\xD9\xE4\x51\xA4\x41\xE2\x0C\xFF\x5B\x04\xDA\xBE\xE3\xAF\x9F\xC5\x4C\x0C\xD2\xCD\x3A\x42\x26\xD6\xEE\x42\x65\x0F\x5F\x67\x03\x58\xB0\xBD\xE5\xE6\xD9\x67\x64\x50\x83\xE3\x22\xDA\xAB\xE1\xE9\xC6\xC3\x24\xEF\xB0\x25\xF1\xBA\xDD\xD9\x21\x23\xF5\xB5\xEF\xC5\x48\x0D\xDE\x86\x26\xF3\xC7\xD2\xF1\x59\x69\x1F\x5F\x1A\x43\x5E\x20\xAC\xD8\xF0\x59\xD0\xA5\xC5\x74\x42\x5E\xD7\xD2\xC6\x25\xE8\x8A\xA3\x3B\x1B\x1D\xC2\x20\x39\x3F\x5F\x5A\xAD\xEE\xE9\xB2\x5D\x44\x0E\xDA\xC1\x27\x0E\xFF\x5C\x5A\xAF\xA9\xD6\x20\x66\xE7\xF1\x59\x79\x1E\xF5\xBC\xC7\x34\xF9\x81\x3A\xD7\xF8\xD1\x3C\x0C\xDA\x80\x13\x59\xE6\xC2\x22\xE1\xD0\xE3\x39\x20\x68\xE5\x11\xEA\xCA\x25\x03\x9F\xF1\x3A",
			"\x21\x68\xEA\x10\xEF\xC9\x23\x45\x6C\xE5\x5B\x22\x68\xEF\x11\x61\x56\x00\xD5\xE1\xF4\x67\xD3\x01\x21\xD7\xE2\xF1\xFA\x35\x90\x0A\xFB\xFC\x80\x05\xFE\xE7\xF7\xFC\x35\x93\x08\x76\x97\x03\x2C\xFD\x77\x7D\xFF\x78\x1A\x98\x08\x76\x9C\x04\x80\xDF\x77\x80\xB8\x1D\x09\x68\x71\x0A\x0C\x87\x7E\x0E\x8A\x18\xA2\x08\x76\xA6\x03\x2C\x00\x76\x7F\xE9\x78\x2C\xA7\x0B\x79\x03\x1B\x81\xFE\x7D\x81\xC9\x28\x0A\xFF\x2A\x0A\x1A\x8A\x10\xD8\x7C\x78\x84\x2B\x0A\xFF\x2D\x0A\x29\x89\x10\xE0\x74\x82\xD1\x1E\x0A\xFF\x20\x0B\x31\x86\x10\xE8\x79\x7D\xAA\x11\x0B\xFF\x23\x0B\xC3\x29\x21\x09\x12\x82\x61\x70\x74\x47\x3A\x10\x1A\x0A\x10\xC6\x7C\x82\xC5\x24\x0B\xFA\x74\x33\x49\x89\x10\xCF\x7C\x84\xC8\x27\x0B\x68\x7B\x0B\xC3\x21\x85\x06\x1B\x82\x45\x85\x24\xBC\x08\x76\xC0\x09\x85\x0D\x84\x83\xC3\x11\x0C\x68\x75\x0C\x62\x84\x81\x64\x8A\x1A\xC6\x08\x76\xCA\x03\x2C\x53\x82\x10\xEF\x7B\x86\x45\x34\x33\x5C\x84\x7F\x15\x87\x6D\xCB\x7B\x11\x33\x86\x10\x42\x8C\x83\x75\x8A\x30\x3B\x83\x10\x5A\x84\x85\x7B\x86\x6F\x03\x1D\x6B\x1C\x80\x88\xA8\x1B\x0C\x20\x82",
			"\x10\x8A\x83\x82\x8C\x88\x1B\xCC\x0F\x2F\xCE\x03\x2C\x91\x86\x80\x74\x88\x1A\xCF\x0F\x2F\xD1\x08\x89\x63\x83\x89\x8A\x12\x0D\xFF\x24\x0D\xA0\x8A\x86\xA2\x87\x1C\xD5\x0F\x2F\xD7\x03\x2C\x13\x7C\x4D\x79\x8B\x11\xD8\x08\x76\xD1\x15\x04\xCA\x7F\x8A\x02\x10\x7B\x4C\x51\x1D\xDC\x08\x76\xE0\x0F\x2F\x48\x7C\x64\xB8\x81\x10\x85\x6B\x6D\x4A\x22\x0E\x68\x76\x0E\xFF\x2E\x2F\x25\x68\x24\xA6\x76\x88\xD1\x18\x0E\x4F\x8A\x1A\x51\x7C\x64\xCE\x8F\x7A\xB1\x8A\x10\xEB\x0A\x7C\xEE\x0F\x2F\x12\x3D\x8C\xBA\x71\x1D\x5D\x20\x0F\xCA\x73\x0F\xFF\x2B\x75\x4C\x66\x66\x06\x16\x6C\xA9\x8B\x11\xF5\x03\x8D\x32\x3A\x8E\x03\x11\x73\xED\x8A\x10\xF8\x08\x76\xFC\x03\x2C\xF2\x82\x10\x3A\x75\x8F\x09\x1D\x0F\x68\x71\x00\x63\x6C\x71\xF8\x6E\x8F\x33\x15\x45\xDA\x6C\x1A\x29\x35\x62\x1D\x78\x8D\x9B\x88\x1B\x05\x08\x90\x86\x35\x45\xAF\x3A\x05\xCA\x7D\x90\x2A\x7D\x85\x84\x2A\x00\x12\x92\x74\x14\x9A\x10\x5D\x0A\x7C\x27\x72\x10\xEC\x80\x8D\xC3\x1F\x00\x1D\x9E\x78\xC8\x6A\x10\xF4\x86\x92\xAA\x12\x01\x55\x4F\x37\x16\x03\x90\xC3\x13\x92\x01\x1D\x8F\x2E\x9C\x1A",
			"\x17\x01\x93\x0A\x1B\x01\x34\x9A\x1A\x2D\x92\x10\xD7\x89\x93\x4E\x34\x33\x38\x92\x10\x18\x9A\x91\x86\x7C\x34\xD1\x17\x6E\x03\x15\x92\x4A\x98\x2C\x1C\x0F\x93\x32\x3E\x94\x02\x11\x94\x4F\x7A\x24\x1D\x0F\x91\x09\x1F\x01\x54\x91\x27\x0A\x17\x94\x59\x9D\x21\x20\x0C\x95\x06\x12\x02\x5F\x98\x1B\xEF\x60\x8B\x0F\x9A\x18\x23\x05\x45\xC5\x5B\x11\x60\x08\x76\x6B\x99\x8B\xD9\x89\x10\x28\x00\x97\x0A\x1D\x02\x66\x93\x10\x78\x71\x70\x75\x94\x8C\x77\x96\x10\x2F\x0A\x97\x09\x14\x03\x7D\x92\x10\x9A\x71\x70\x4C\x76\x10\xFD\x6D\x96\xC7\x16\x03\x89\x93\x79\x0A\x1C\x02\x21\x78\x1B\x80\x3A\x67\xD4\x5B\x99\x5F\x51\x55\xF0\x63\x67\xDF\x69\x55\xAF\x3F\x11\xA3\x9C\x6E\x44\x16\x9A\x18\x10\x68\xF0\x63\x49\xAA\x98\x72\xAE\x9F\x9A\x01\x1C\x9A\x37\x6E\x5C\x44\x14\x9B\x6F\x5F\x2F\x64\x61\x9A\xBA\x91\x9B\x1B\x14\x69\xBD\x98\x76\xB9\x98\x65\xFF\x23\x9A\xAF\x33\x49\xBE\x93\x63\xCA\x6E\x48\x09\x9E\x11\xCB\x99\x11\xBE\x43\x49\xCF\x9B\x11\xFE\x4A\x7C\xA3\x91\x9D\xD4\x92\x9D\x92\x63\x16\xCC\x3F\x37\xA0\x91\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp2] BEGIN ",
			L"[20][Exp2] END [ENDING]",
			L"[21][Exp2]< Exp2 \"+\" \"+\" @ >",
			L"[22][Exp2]< Exp2 \"+\" @ \"+\" >",
			L"[23][Exp2]< Exp2 \"+\" @ >",
			L"[24][Exp2]< Exp2 \"-\" \"-\" @ >",
			L"[25][Exp2]< Exp2 \"-\" @ \"-\" >",
			L"[26][Exp2]< Exp2 \"-\" @ >",
			L"[27][Exp2]< Exp2 @ \"+\" \"+\" >",
			L"[28][Exp2]< Exp2 @ \"+\" >",
			L"[29][Exp2]< Exp2 @ \"-\" \"-\" >",
			L"[30][Exp2]< Exp2 @ \"-\" >",
			L"[31][Exp2]<< !Exp1 @ >>",
			L"[32][Exp] BEGIN ",
			L"[33][Exp] END [ENDING]",
			L"[34][Exp]< Exp \"<\" @ Exp2 >",
			L"[35][Exp]< Exp \"<\" Exp2 @ >",
			L"[36][Exp]< Exp \">\" @ Exp2 >",
			L"[37][Exp]< Exp \">\" Exp2 @ >",
			L"[38][Exp]< Exp @ \"<\" Exp2 >",
			L"[39][Exp]< Exp @ \">\" Exp2 >",
			L"[40][Exp]<< !Exp2 @ >>",
			L"[41][Module] BEGIN ",
			L"[42][Module] END [ENDING]",
			L"[43][Module]< Exp @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 1, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 2, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 4, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 5, -1, 3, 3, },
			{-1, -1, -1, -1, -1, -1, 6, -1, -1, },
			{3, 3, 3, 3, 3, 3, -1, 7, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<genericambiguity::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<genericambiguity::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
