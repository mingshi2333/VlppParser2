/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityModuleParser.h"

namespace genericambiguity
{
	void GenericAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3142; // 27436 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 70;
		static const vl::vint dataSolidRows = 12;
		static const vl::vint dataRows = 13;
		static const char* compressed[] = {
			"\x2C\x6B\x00\x00\x3E\x0C\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x8B\x0A\x83\x0A\x84\x10\x0A\xA9\x0A\x84\x71\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8D\x15\x96\x9D\x9A\x8A\x83\x90\x92\x91\x23\x9B\xA6\x9F\x7A\x96\x91\x97\x94\x0A\xA1\x86\x82\x05\x96\x95\x9A\x98\x28\x9D\xAF\x9A\x97\x9C\x9D\x9C\x8F\x3D\xC0\xBF\x98\x8B\x9A\xA2\x83\x95\x45\xC4\x81\xAA\xA3\xA7\x93\xA2\x9B\x09\x83\x31\x8B\xAE\xA3\x80\xA4\x85\x04\x53\x8D\xAC\x94\xAC\xAF\xAD\x8D\x08\xB3\x9D\xA9\xA5\xAA\x83\xAB\x84\x07\x5A\x8F\xB8\x9B\xB6\x9D\xB6\xA3\x56\xD0\xAF\xAC\xA3\xBD\xB1\x80\x04\x0A\xB4\x9F\xAA\x8A\x02\xB5\xB8\xB6\x7F\xEE\x81\xD0\xB6\xB2\xBB\xC0\xBA\x87\xF6\x9C\x86\xC5\xC0\xC1\xC6\xC1\x8F\x84\xC1\x87\xB5\xBE\xAD\xCA\xB2\x96\x89\xD9\xCB\x8E\xBA\x80\x07\xCE\x93\x8C\xE1\xCE\xC3\xD0\xC9\xD2\xC9\x8B\xA4\xE9\xC6\xDB\xD0\xD4\xCB\x81\x0D\x20\xED\xC8\xC1\xCC\xDB\xD2\xDB\xB3\x8A\xEF\xD5\xDA\xC6\x06\xD9\xDD\xB7\xBA\xE2\xD9\xDB\xC9\xE1\xE2\xE2\x98\xC9\xE3\xAB\xE9\x87\x07\xDF\xE1\xC0\xC8\xCC\xF7\xC3\xEA\xCE\xE5\xBD\xD8\xD4\xD9\xF6",
			"\xEA\x80\x0B\xE6\xD5\xD1\xE1\xD0\xE3\xF0\xF4\xF0\xD7\xE8\x11\x5F\xE7\xE6\xFE\xD4\xF4\xDD\xE8\x12\x79\x95\xFC\xD7\xE1\xE8\x0A\xF5\xED\xE5\xFA\xEB\xFB\xF8\xD5\x0A\xF9\xDB\x74\x77\x76\x76\x04\x9C\x71\x82\x71\x03\x86\x85\x82\x80\xF3\x48\x8A\x43\x05\xB2\x58\x08\x7F\x7B\xEE\x42\x7D\x7C\x6E\x19\x00\x8B\x82\x83\x07\x80\x0B\x07\x84\x16\xBC\x72\x89\x7E\x23\xB8\x6C\x06\x86\x0A\x83\x4E\x06\x6C\x1F\x20\x85\x7D\x85\x2F\x97\x81\x88\x89\x34\x94\x82\x8D\x8C\x25\x8A\x60\x45\x42\x32\x69\x8C\x81\x42\x21\x2E\x89\x83\x8F\x1B\x92\x7D\x86\x08\x42\x8D\x86\x91\x91\xE2\x77\x83\x91\x40\x23\x32\x64\x09\x92\x1D\x8D\x99\x8C\x8E\x35\xB3\x86\x8F\x95\x4F\x80\x05\x08\x95\x4C\xB0\x8D\x95\x74\x26\x28\x84\x92\x8F\x1C\xA1\x9E\x92\x92\x56\x99\x98\x97\x96\xA8\x68\x02\x6E\x44\x09\x59\x55\x96\x98\x6C\xB8\x97\x9F\x9A\x7B\x9C\x99\x9C\x9F\x45\xAD\x00\x98\x9A\x4B\x83\x4E\x0A\x6C\x2F\x18\x5F\x9E\x9F\x7D\xAE\x93\x9A\x9E\x06\x73\x02\x6C\x0D\x8A\x8D\xA0\x9F\xA5\x5A\x99\xAF\x9A\xA6\x8F\x80\xA4\xA1\x9B\x98\x9B\xA2\xAB\x46\x38\x03\xA7\x9A\x40\x39\x32\x6A\x0D\xA5",
			"\x6A\x8C\xAD\xAA\xA3\x8B\xB0\xA6\xA4\xA7\xB1\xA1\xAD\x96\x0F\xA6\xA9\x9F\xA4\xA4\xBB\x9E\xA7\xAA\xAE\x02\x7F\x09\xAD\xA1\xBF\x84\xB0\xB3\xB1\xC6\x89\xB0\xA8\xAD\x09\x40\x13\xB3\xB2\xA3\xB5\xAC\xB3\xAB\xB6\x8A\x41\x13\xB3\xC3\x42\x12\x6F\x10\xAC\xBD\xAE\xAA\xB7\xB2\x94\xB3\xB4\xB8\xB8\x47\x18\xB6\xAF\xC8\x90\xBB\x44\x12\x66\xA9\xBC\xAD\xB1\xEA\x92\xB1\xB7\xAC\xF3\xA2\xB7\x72\x12\xE7\x9F\xB0\xBF\xBB\x01\x4B\x1D\xB9\xB2\x4D\x32\x6E\x13\xBF\xF1\xB4\xBD\xA6\xBE\xEE\xA8\xB9\xB0\x14\xF9\xA1\xB4\xBB\xB8\x02\x51\x14\xC3\x70\x53\x32\x64\x17\xC4\x0A\xC5\xC6\xBF\xC1\x0E\xFB\xB9\xC7\x70\x56\x0D\xC5\xB6\xC1\xF2\x9C\xC3\xC9\x91\x57\x22\xC0\xC5\xC2\xAC\x58\x12\x6D\x16\x18\xC8\xCA\xB0\xBF\x33\xDF\xC6\xCC\x6B\x5B\x2A\xC5\xBF\xC3\x3B\xC2\x4C\x15\xCC\x1D\xEC\xC1\xD1\xCD\x32\xDA\xCC\xCF\x46\x5E\x3A\xC6\xCB\xCA\x44\xC3\xD6\xD2\x40\x7A\x3D\x81\x42\x54\x5B\x6B\x4A\x5E\x41\x61\x7C\xCB\x48\x40\x09\x78\x5B\x57\xD5\x03\x5E\xD6\xBF\xD6\x0A\x5F\x6B\x54\xD5\x95\x6B\x48\xDA\x66\x6A\xDD\x5D\xD9\xD5\x26\x6B\xD4\x7F\xDB\x69\xF1\xDE\xDA\x49\x60",
			"\xC7\x42\xBC\xD9\x5D\xDD\x52\xDE\x71\x74\xEC\xD6\xDC\xDC\x23\x79\xD7\x5F\xDE\x26\x5C\xD6\x42\xD9\x95\x7F\xD4\x71\xE0\x73\xC3\xE5\xDF\x48\x8E\xEB\x40\xE4\xE0\x92\xC2\xE4\xE7\xDD\x85\xCA\x49\xD6\xC7\x96\xD9\x4A\xE1\xD8\x7E\xDC\xED\x45\xE5\xA1\xE7\xE6\xE9\x46\x86\xC0\x02\xDA\xD6\x89\xE5\xDD\x57\xE7\x98\xE3\x44\xEF\xE3\x26\x77\xE9\xEA\xEA\x84\xFC\xE3\xE6\xEF\x9A\xC0\xF1\xE7\xE6\xBD\xD9\x48\xEB\xEE\x17\x47\xF8\xF1\xEB\xBA\xF0\x8C\xDE\x41\xAF\xF4\x7A\xF3\xEE\xD3\xE9\xE5\xF5\xE8\xAD\xD1\xF2\xD1\xEA\xA3\xDE\x65\xE9\xF1\x18\x57\xF6\xE6\xF8\x56\xDE\xE8\xE3\x48\xDD\xC7\xE7\xDB\xEA\x18\x59\xF7\xF9\x47\xE9\xC0\x0C\xE2\x66\xE4\xD9\xE3\xF2\xF0\xB5\xF8\xF8\xEC\xF1\xBF\xC6\xFC\xF9\xF2\xFF\x7F\x1C\xF3\x6F\x72\x74\x85\x1A\x7C\x38\xF5\x7C\x7D\xF0\x7E\x70\x7D\x8B\x2E\x7C\x5E\xCF\x63\x23\xFC\x52\x71\x81\x04\xBA\x78\x79\xE1\x75\x82\x06\x8D\x8F\x1E\x0B\xAC\x76\x7C\x10\x91\x75\xDF\x6B\x7C\x82\x0F\x99\x84\x83\x0F\x83\x6E\x08\x8B\x73\x77\x00\x8D\x78\x83\x69\x28\x86\x8B\x07\x88\x83\x8B\x31\x7E\x4E\x95\x2F\x84\xF2\x3A\x8B\x77\x18\xBD\x7D",
			"\x7D\x33\x81\x83\x0D\xDF\x7F\x86\x00\xA5\x83\x83\x45\x9D\x81\x00\x83\x81\x84\xF4\x46\x84\x88\x0B\x87\x85\x12\xA9\x80\x76\x27\x89\x23\x82\xC6\x32\x69\x40\x2D\x71\x82\xCE\x1B\x2C\x87\xA9\x7A\x88\x00\x5C\x8B\x85\x81\x0C\x27\x8B\x01\x9E\x85\x14\x8E\x8A\x20\x35\xB4\x3C\x86\x35\x91\x7D\x5F\x5B\x22\x8C\x32\x96\x8E\x20\x67\x99\x85\x1A\xCB\x8D\x8D\xAE\x30\x88\x83\x72\x9D\x29\x1D\xDD\x21\x7F\x3C\x9A\x30\x8C\xA1\x6E\x8D\xFE\x1F\x89\x20\x3B\x9D\x27\x8F\xC8\x71\x7C\x22\xFF\x13\x91\xAD\x05\x95\x85\x1C\x8A\x93\xFE\x1D\x2D\x74\x4D\xAB\x20\x92\xBB\x61\x90\x1D\x9F\x26\x92\x85\x06\x94\x3E\x93\x8B\x26\x18\x98\x37\x92\x34\x99\x94\x8F\x68\x3E\x8E\x10\xFC\x22\x90\x52\x95\x35\x95\x7A\x8F\x96\x0C\xB1\x9B\x2A\x50\x9C\x7C\x96\xA3\x96\x94\x7D\x38\x97\x91\x3D\xBB\x92\x2C\xBD\x93\x95\x42\x13\x9B\x94\x42\xA6\x90\x93\x49\x9E\x91\x0D\x9D\x92\x96\x0E\xA2\x91\x97\x49\x89\x96\x49\x52\x98\x82\x6A\x89\x9E\x9A\xC0\x98\x9B\x1A\xFF\x1C\x9B\xE5\x7D\x8F\x9B\x49\x97\x99\x31\xBA\x93\x8A\xA0\x58\x26\x97\xA1\x72\x90\x34\xE3\x95\x9D\xDD\x5E\x9D\x32\xF0\x96",
			"\x72\x3A\xF4\x32\x8C\x31\x9D\x89\x20\xA7\x86\x3A\x36\xA3\x2D\x9E\x67\x89\x21\xA0\xC4\x23\xA1\x47\x75\x99\x75\x7B\x9A\x31\x9F\xFF\x80\x03\x1C\x95\x35\xA1\x52\x87\xA3\x9E\xF7\x79\x20\x43\xD8\x77\x9C\x7C\x8A\x9E\x20\x13\xBA\x31\x45\xB7\x9F\x98\x57\x91\x98\x96\xC8\x9E\xA0\x38\xCB\x95\x96\x1E\x46\xA0\x8F\x18\xAB\x90\x46\x1B\xA6\x72\x87\xAF\x8F\xA3\x03\x21\xA4\x2A\xAE\x86\x99\x76\xBC\x92\xA5\xE9\x81\x9F\x3A\xA7\xA7\x99\x81\x34\xA0\xA2\x65\x82\x22\x4E\x82\xAD\xA7\x71\xAD\x76\x91\x19\x28\xAB\x1D\x83\x23\x92\x85\x9A\xA0\xA5\x46\xB5\x99\x50\x89\x2B\xA8\x04\x88\x8B\x9C\x26\x86\x89\x12\xE1\xAA\x89\x23\x85\xAA\x6F\x4D\x90\x7F\x13\xA4\x83\xAD\xAF\x99\xA0\x88\x23\x8A\x87\x54\xDE\x7C\xAC\xB0\xAE\xAA\xA6\x62\xB6\xAF\x59\x81\x23\x92\xCC\x11\xA1\x9F\x64\xA4\xAC\x15\xA0\x71\x94\xD9\x41\x9A\x98\xC4\x31\x7E\x3F\xB9\x71\x81\x66\x96\xA6\x20\x8B\xB6\x75\x53\xEF\xAC\x8C\xC4\x84\x3A\xAA\x6A\xB6\xB2\x2A\x96\xB9\xB0\x17\x56\xAB\xA6\x58\xB6\x97\x27\xB8\xA2\xB4\xFB\x78\xAD\xAC\x6D\xA6\xAD\x6A\xBE\xA8\x6A\x02\x98\x21\x7E\x80\xB7\xAF\x26\x8C",
			"\x90\x7A\xD7\xB6\x86\xB0\x14\xAE\x46\x62\xB1\xA3\xB6\x8C\x23\xA2\x33\xBB\xA6\xA4\x3D\xA1\xB4\x95\xD1\xAB\xA0\xB1\x9B\xAE\xA7\x63\x83\x21\xB3\x8E\x1F\xB7\x22\x34\xA5\x7E\x66\xA6\x28\xB3\x02\x93\xBA\xB2\x1C\x8F\xB8\x39\xC4\xBF\x22\xE3\x9B\xA8\xB9\x8C\xAC\x9E\x53\x9C\xBE\xBB\x71\xB1\x78\x33\xAD\x66\x00\x14\x94\xB8\xB4\xBD\xAB\xB3\xBC\x09\x2A\xBD\x5D\xEC\xB1\xB0\xEE\xBD\xAC\xB4\xEA\x75\x31\x7A\xEB\xB7\xB5\xFA\xBB\xAE\x75\xB6\xBF\x1D\xFC\x58\x8D\xB3\x84\x31\x7B\x25\xDA\xB1\x7C\x4D\xB8\x83\x9C\x06\xEC\xBE\xC1\xA7\xAA\xC1\x57\x10\xCD\xB7\xDB\x91\x2F\xA5\x03\x22\x7D\xFC\x50\xAF\xB4\x77\x97\x24\x0D\x9C\xB5\x92\x41\x0E\x70\x25\x7F\x64\xC2\x36\xAD\x6E\x70\x85\xA2\xC9\xC3\x6E\x42\x24\xC5\x02\x2A\xC4\x8A\x8A\x2E\x71\xDB\x70\xC3\x6A\x20\x90\xB2\x89\xB9\xCC\xB9\x1D\xD7\xC7\xC7\x23\xCA\x22\x7C\xBA\xCD\x90\x1A\xC2\xCB\xC6\x40\xC3\x23\x90\xBD\xC5\xC9\x24\xC2\x22\x93\x37\xC0\x02\xE3\x50\xCE\xC6\x83\x14\xCD\xC9\x41\xD8\xC9\x8B\xDA\xC1\xC7\x2A\xCC\xC9\xA5\x5B\xC4\xC8\x98\xDD\xCA\xB9\x31\xF8\xC1\xAE\x03\x29\xC7\x5A\xE6\xC2\xCB\x35",
			"\xE9\xCE\xC8\x06\xDE\xCA\x40\x1B\xC0\xCE\x83\x34\xCE\xC9\x01\x3D\xA9\x94\x8E\x7A\xCE\x39\xF9\xC8\xC9\x59\xD0\xA4\x9E\x84\x2C\xB3\x8D\x30\x0A\x8B\x51\xD2\x4E\x65\x8E\x71\x0E\x44\xEC\x44\xB3\x8E\x72\x0E\xA3\x96\xB1\x3F\x45\xCA\x23\x0E\x93\xC1\xD0\x55\x85\xDA\x20\x3A\x19\xD1\xCC\x03\x27\xBD\x9D\x83\x25\x0F\x4F\xE4\xCE\x20\xDE\x3C\xD2\x41\x76\x06\xD5\x33\xE8\xD2\xD5\x06\x37\x0D\xAB\xE3\x8A\x21\x28\x70\xD2\x20\x78\x13\xD5\xEB\x5F\x47\xD7\x80\x39\x0B\xD6\x8E\x6B\x05\xAF\xC8\x5F\x0A\xCE\x9D\xA9\x3A\x85\xCD\xBB\xD0\x1B\x2B\xC9\x62\x65\xC5\xCC\x6F\xDC\xC8\xB2\x1B\x24\xA7\x42\xEB\xC4\xC7\x02\x3C\xC2\x62\x2D\x77\xD9\xE1\x14\xDE\xC5\xD3\xC0\xDC\xAD\xF5\x4A\x49\xA5\x7D\x63\x8B\x47\xDD\x43\x46\x08\xA4\xC2\xE7\x12\xD8\x00\x14\xD4\xC2\x4D\xE1\xD9\x21\xF4\x24\xD9\x21\xFF\x2F\xDF\x01\x94\xCC\xCF\x72\xCF\x42\xDC\xD1\x24\xC0\xBF\xE9\xD5\x49\x8D\x1F\x47\xDE\x06\x2D\x47\xBB\xA9\xD6\x21\x81\xFF\xA4\x50\x1B\x21\x48\xC2\x83\x2C\xD6\x36\xF7\x3B\xE2\x02\x37\xDA\xBA\x8A\x27\x04\xA5\x58\xD9\x20\x14\xC8\xD9\xC9\x4A\x47\x76\xF1\x45\xD7\x69",
			"\xC8\x4D\xD8\xBA\x9B\xE4\x65\x0E\x57\xCD\xE0\x0A\x2A\xD2\x98\xC7\x6E\xCD\x17\xFE\xD9\x21\x74\x53\xE4\x61\xB8\x30\xB7\x9B\xDB\x62\x49\x5D\xBD\xDA\x6A\x1B\x2A\x04\x80\xC3\x3A\x42\x18\xFF\xCD\x7C\xBE\xE6\x50\x71\xF2\x07\x5F\x27\x49\xEA\x44\x9D\xA0\xE2\x85\x14\x52\xEA\xA5\x4F\xDF\x8E\x0D\xE5\xA4\x90\x8C\xEA\x20\xAB\x4F\xDD\x74\x53\x40\xDA\x2F\x86\x22\xE5\xC9\x5B\x20\x0F\x7F\x58\x57\x77\xD5\xE7\xCB\x66\x94\xEA\xB3\x8A\x2E\x59\x77\xDA\x5F\xDD\x65\x45\xED\x40\x31\x3C\xAB\xAF\xC1\x24\x08\x46\xEA\x35\xC7\xD2\xEC\xEE\x83\x2E\xD8\xE6\x2D\xE5\x49\xE1\xCA\xCE\xEE\x00\x2C\x5A\xEA\x4C\x1F\x5E\xB0\x84\xF2\xEE\x7A\xC6\x23\x60\x52\xF2\x0B\xBF\x09\x52\xEA\xDF\x3D\xEC\xE5\x06\x37\x62\xD4\xD1\x32\x53\xCE\xC4\xE5\xEA\x09\x2E\x66\xD4\xBF\x6F\xDD\x1B\x22\xDE\xF3\x56\xCD\xF1\xD2\x52\xE2\x0D\x7F\x7B\x02\xDC\x87\xF2\x81\xE3\xE4\x0E\xE3\xE6\x0A\x26\xDE\x88\xE6\x21\x19\x62\xD9\x0D\x61\x4C\xE3\x20\xB9\xF3\xED\xE2\x84\x57\xF8\x81\x30\xF0\xF5\x3F\xFD\x40\xF0\xB0\x3D\xF0\x94\xC9\x5D\xD2\x2C\x80\xF7\x40\x6A\x0D\xF6\x83\x18\xFB\x20\xD3\xEA\xFA",
			"\x41\x6B\x02\xDD\x37\x03\x5E\x21\x9F\xE1\xFB\x40\x70\x03\xD5\x62\x42\x5F\xDD\xE8\xE7\xED\xE3\xF3\x0D\xFD\x80\x36\x0F\x5F\xD7\x50\xFD\xE5\xE9\xEA\x20\x3C\x35\xF8\x00\x7B\x0F\x2F\xDC\x2F\x6E\xF9\x66\x10\x17\x7A\x7E\x02\x1D\x07\xFF\x76\x7D\x05\x83\x10\x07\x78\x80\x01\x10\x08\xA7\x72\x10\x86\x03\x2C\x0D\x82\x10\x51\x70\x81\x00\x07\x08\x13\x81\x10\x8D\x06\x81\x0A\x1D\x01\x8D\x7E\x08\x1D\x80\x00\x94\x00\x82\x09\x1B\x22\xDA\x72\x10\x95\x05\x82\x9B\x03\x2C\x16\x0A\x10\x17\x86\x79\x34\x7D\x21\x10\x29\x10\x07\x80\x7D\x03\x1C\x09\x0B\x84\x33\x37\x86\x10\x0F\x8A\x83\x02\x1F\x09\x25\x85\x0A\xC3\x2F\x83\x03\x19\x81\x42\x81\x10\xA6\x05\x82\xAC\x07\x84\x21\x8D\x78\xAD\x05\x82\xB3\x00\x85\x29\x8D\x78\xB4\x05\x82\xBA\x03\x2C\x48\x76\x80\x8D\x7B\x0B\xDD\x73\x10\x5D\x8E\x80\x8D\x7C\x0B\xE2\x60\x0C\x5C\x8A\x10\x4A\x82\x7E\x03\x11\x0C\xE2\x65\x0C\x69\x89\x10\x22\x8B\x82\x01\x16\x0C\xE2\x6A\x0C\x71\x86\x10\x2A\x8A\x81\xCB\x02\x6E\xCF\x03\x2C\x19\x29\x10\x63\x8C\x86\x3B\x7C\x34\x1A\x0A\x10\x39\x84\x88\x01\x10\x0D\x3D\x8A\x30\x87\x89",
			"\x10\x41\x8A\x88\x00\x03\x0D\x25\x89\x0D\xC3\x2F\x88\x06\x1B\x86\x34\x82\x10\xDA\x05\x82\xE0\x07\x89\x51\x84\x87\x00\x01\x0E\x25\x87\x0E\xA0\x87\x85\xA2\x88\x0E\x25\x8E\x0E\xC3\x21\x89\x01\x11\x83\xA2\x86\x7D\xD1\x1A\x89\x00\x08\x84\x92\x82\x8B\xC3\x13\x87\x06\x11\x88\x1A\x88\x8B\xAA\x1B\x87\x03\x18\x89\x4B\x8D\x34\x27\x33\x10\x0A\x7E\x85\xA2\x8F\x0E\x61\x82\x10\xC7\x84\x86\xA2\x80\x0F\xE2\x64\x0F\xC3\x2D\x8C\x18\x8D\x78\xF5\x02\x6E\xF9\x03\x8D\xA1\x8A\x81\xFA\x02\x6E\xFE\x0A\x8D\xA8\x8D\x8B\xE2\x63\x00\xB3\x61\x1D\x5B\x79\x53\x8D\x74\x00\x5A\x41\x72\xC3\x15\x04\xFF\x77\x8E\x02\x18\x76\x22\x7D\x35\xEB\x85\x36\x5A\x4D\x3A\x8F\x7A\x69\x02\x10\x8F\x01\x15\x6D\x9C\x5E\x00\xF5\x89\x10\x12\x07\x8F\x0A\x1E\x2F\x83\x68\x24\xE9\x73\x8C\x14\x0A\x45\x26\x7A\x10\x98\x7A\x8F\x01\x18\x90\xF2\x72\x8A\x17\x0C\x90\x0A\x1A\x01\x04\x99\x10\x12\x37\x90\xFB\x73\x8F\x99\x86\x91\x09\x1F\x01\x19\x91\x7A\xFF\x76\x6B\x06\x12\x71\x1A\x81\x02\x20\x91\x7D\x06\x16\x92\x03\x19\x77\x1A\x84\x02\x5A\x48\x76\x2A\x05\x8E\xC3\x1E\x92\x02\x13\x78",
			"\x1A\x8B\x02\x33\x9A\x10\x31\x06\x93\xAA\x14\x76\x5E\x72\x8A\x32\x0B\x92\x84\x29\x32\x83\x62\x94\x8C\x72\x8A\x35\x06\x94\x02\x18\x03\x23\x93\x10\x5A\x0F\x7F\x4A\x9F\x64\x8D\x7A\x03\x4E\x91\x10\x3D\x01\x95\x02\x1D\x05\xFF\x7F\x76\x02\x18\x92\xC3\x8F\x03\x59\x94\x8C\x8A\x10\x96\x01\x10\x93\xC3\x82\x04\x3D\x99\x10\x48\x00\x94\xAC\x18\x96\x00\x0A\x93\xC3\x89\x04\x6D\x96\x10\x4F\x00\x97\xA8\x1A\x96\x02\x12\x91\xC3\x8E\x8B\xAC\x14\x97\x02\x15\x95\x9B\x8B\x3D\x4C\x32\x73\x03\x12\x96\x92\x80\x05\x7A\x95\x8C\x02\x18\x98\x02\x1C\x97\x85\x90\x00\x51\x01\x90\x06\x15\x05\x8D\x9A\x18\x90\x91\x10\x82\x93\x99\x56\x06\x99\x52\x99\x99\xC7\x19\x73\xE8\x82\x8A\x5B\x0A\x45\xF7\x59\x10\x60\x02\x6E\xA4\x91\x8F\x8D\x70\x06\xA8\x9A\x10\x65\x0C\x95\x01\x1C\x7B\x52\x7D\x9A\xFD\x8D\x78\x67\x01\x9B\x09\x1C\x06\xB4\x90\x00\x68\x02\x6E\x93\x76\x10\x45\x72\x8A\x6E\x0F\x9B\xD6\x7C\x02\xE4\x5E\x6D\x96\x3F\x6C\x96\x5E\x58\x7A\x74\x4A\xD0\x9A\x73\xC3\x6F\x6E\x1F\x1D\x3A\xD7\x9E\x9C\xD6\x1A\x6C\x19\x1F\x5B\x70\x76\x73\xB2\x1B\x4A\xDE\x90\x9E\xD4",
			"\x91\x10\xD3\x91\x6D\x97\x1A\x6D\x95\x5C\x66\xE3\x6C\x9E\xAD\x3B\x4A\xAD\x34\x61\xED\x93\x10\xF2\x9A\x66\xFF\x28\x9D\xEF\x9B\x11\xF1\x9A\x9F\xFF\x73\x9F\xC2\x46\x72\xE4\x3E\x38\xAB\x42\xA0\x1B\x1E\x38\xD8\x96\xA0\x05\xA2\x1B\x6D\x66\x9D\x27\x61\x78\x3A\x1C\x8E\x26\x12\x9F\x85\x60",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Exp0",
			L"Exp1",
			L"Exp2",
			L"Exp",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Exp0] BEGIN ",
			L"[1][Exp0] END [ENDING]",
			L"[2][Exp0]< ID \"<\" @ { Exp ; \",\" } \">\" >",
			L"[3][Exp0]< ID \"<\" { Exp ; \",\" @ } \">\" >",
			L"[4][Exp0]< ID \"<\" { Exp ; \",\" } \">\" @ >",
			L"[5][Exp0]< ID \"<\" { Exp @ ; \",\" } \">\" >",
			L"[6][Exp0]< ID @ \"<\" { Exp ; \",\" } \">\" >",
			L"[7][Exp0]< ID @ >",
			L"[8][Exp0]<< \"(\" !Exp \")\" @ >>",
			L"[9][Exp0]<< \"(\" !Exp @ \")\" >>",
			L"[10][Exp0]<< \"(\" @ !Exp \")\" >>",
			L"[11][Exp1] BEGIN ",
			L"[12][Exp1] END [ENDING]",
			L"[13][Exp1]< Exp1 \"(\" @ { Exp ; \",\" } \")\" >",
			L"[14][Exp1]< Exp1 \"(\" { Exp ; \",\" @ } \")\" >",
			L"[15][Exp1]< Exp1 \"(\" { Exp ; \",\" } \")\" @ >",
			L"[16][Exp1]< Exp1 \"(\" { Exp @ ; \",\" } \")\" >",
			L"[17][Exp1]< Exp1 @ \"(\" { Exp ; \",\" } \")\" >",
			L"[18][Exp1]<< !Exp0 @ >>",
			L"[19][Exp2] BEGIN ",
			L"[20][Exp2] END [ENDING]",
			L"[21][Exp2]< Exp2 \"+\" \"+\" @ >",
			L"[22][Exp2]< Exp2 \"+\" @ \"+\" >",
			L"[23][Exp2]< Exp2 \"+\" @ >",
			L"[24][Exp2]< Exp2 \"-\" \"-\" @ >",
			L"[25][Exp2]< Exp2 \"-\" @ \"-\" >",
			L"[26][Exp2]< Exp2 \"-\" @ >",
			L"[27][Exp2]< Exp2 @ \"+\" \"+\" >",
			L"[28][Exp2]< Exp2 @ \"+\" >",
			L"[29][Exp2]< Exp2 @ \"-\" \"-\" >",
			L"[30][Exp2]< Exp2 @ \"-\" >",
			L"[31][Exp2]<< !Exp1 @ >>",
			L"[32][Exp] BEGIN ",
			L"[33][Exp] END [ENDING]",
			L"[34][Exp]< Exp \"<\" @ Exp2 >",
			L"[35][Exp]< Exp \"<\" Exp2 @ >",
			L"[36][Exp]< Exp \">\" @ Exp2 >",
			L"[37][Exp]< Exp \">\" Exp2 @ >",
			L"[38][Exp]< Exp @ \"<\" Exp2 >",
			L"[39][Exp]< Exp @ \">\" Exp2 >",
			L"[40][Exp]<< !Exp2 @ >>",
			L"[41][Module] BEGIN ",
			L"[42][Module] END [ENDING]",
			L"[43][Module]< Exp @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<GenericAmbiguityTokens, ModuleParserStates, GenericAmbiguityAstInsReceiver>(&GenericAmbiguityTokenDeleter, &GenericAmbiguityLexerData, &GenericAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 1, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 2, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 3, },
			{3, 3, 3, 3, 4, 3, -1, 3, 3, },
			{3, 3, 3, 3, 3, 5, -1, 3, 3, },
			{-1, -1, -1, -1, -1, -1, 6, -1, -1, },
			{3, 3, 3, 3, 3, 3, -1, 7, 3, },
			{3, 3, 3, 3, 3, 3, -1, 3, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<genericambiguity::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<genericambiguity::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<genericambiguity::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
