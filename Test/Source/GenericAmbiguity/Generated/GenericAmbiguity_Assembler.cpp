/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GenericAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguity_Assembler.h"

namespace genericambiguity
{

/***********************************************************************
GenericAmbiguityAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> GenericAmbiguityAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		switch((GenericAmbiguityClasses)type)
		{
		case GenericAmbiguityClasses::BinaryExpr:
			return new genericambiguity::BinaryExpr();
		case GenericAmbiguityClasses::CallExpr:
			return new genericambiguity::CallExpr();
		case GenericAmbiguityClasses::DecrementExpr:
			return new genericambiguity::DecrementExpr();
		case GenericAmbiguityClasses::Expr:
			throw vl::glr::AstInsException(L"Unable to create abstract class \"genericambiguity::Expr\".", vl::glr::AstInsErrorType::UnknownType, type);
		case GenericAmbiguityClasses::ExprToResolve:
			return new genericambiguity::ExprToResolve();
		case GenericAmbiguityClasses::GenericExpr:
			return new genericambiguity::GenericExpr();
		case GenericAmbiguityClasses::Module:
			return new genericambiguity::Module();
		case GenericAmbiguityClasses::PostfixExpr:
			return new genericambiguity::PostfixExpr();
		case GenericAmbiguityClasses::RefExpr:
			return new genericambiguity::RefExpr();
		default:
			throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
		}
	}

	void GenericAmbiguityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = GenericAmbiguityCppFieldName((GenericAmbiguityFields)field);
		switch((GenericAmbiguityFields)field)
		{
		case GenericAmbiguityFields::BinaryExpr_left:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::BinaryExpr::left, object, field, value, cppFieldName);
		case GenericAmbiguityFields::BinaryExpr_right:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::BinaryExpr::right, object, field, value, cppFieldName);
		case GenericAmbiguityFields::CallExpr_args:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::CallExpr::args, object, field, value, cppFieldName);
		case GenericAmbiguityFields::CallExpr_func:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::CallExpr::func, object, field, value, cppFieldName);
		case GenericAmbiguityFields::DecrementExpr_expr:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::DecrementExpr::expr, object, field, value, cppFieldName);
		case GenericAmbiguityFields::ExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::ExprToResolve::candidates, object, field, value, cppFieldName);
		case GenericAmbiguityFields::GenericExpr_args:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::GenericExpr::args, object, field, value, cppFieldName);
		case GenericAmbiguityFields::Module_expr:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::Module::expr, object, field, value, cppFieldName);
		case GenericAmbiguityFields::PostfixExpr_expr:
			return vl::glr::AssemblerSetObjectField(&genericambiguity::PostfixExpr::expr, object, field, value, cppFieldName);
		default:
			if (cppFieldName)
				throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not an object."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
			else
				throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
		}
	}

	void GenericAmbiguityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token)
	{
		auto cppFieldName = GenericAmbiguityCppFieldName((GenericAmbiguityFields)field);
		switch((GenericAmbiguityFields)field)
		{
		case GenericAmbiguityFields::GenericExpr_name:
			return vl::glr::AssemblerSetTokenField(&genericambiguity::GenericExpr::name, object, field, token,cppFieldName);
		case GenericAmbiguityFields::RefExpr_name:
			return vl::glr::AssemblerSetTokenField(&genericambiguity::RefExpr::name, object, field, token,cppFieldName);
		default:
			if (cppFieldName)
				throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not a token."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
			else
				throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
		}
	}

	void GenericAmbiguityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem)
	{
		auto cppFieldName = GenericAmbiguityCppFieldName((GenericAmbiguityFields)field);
		switch((GenericAmbiguityFields)field)
		{
		case GenericAmbiguityFields::BinaryExpr_op:
			return vl::glr::AssemblerSetEnumField(&genericambiguity::BinaryExpr::op, object, field, enumItem, cppFieldName);
		case GenericAmbiguityFields::PostfixExpr_op:
			return vl::glr::AssemblerSetEnumField(&genericambiguity::PostfixExpr::op, object, field, enumItem, cppFieldName);
		default:
			if (cppFieldName)
				throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not an enum item."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
			else
				throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
		}
	}

	const wchar_t* GenericAmbiguityTypeName(GenericAmbiguityClasses type)
	{
		const wchar_t* results[] = {
			L"BinaryExpr",
			L"CallExpr",
			L"DecrementExpr",
			L"Expr",
			L"ExprToResolve",
			L"GenericExpr",
			L"Module",
			L"PostfixExpr",
			L"RefExpr",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 9 ? results[index] : nullptr;
	}

	const wchar_t* GenericAmbiguityCppTypeName(GenericAmbiguityClasses type)
	{
		const wchar_t* results[] = {
			L"genericambiguity::BinaryExpr",
			L"genericambiguity::CallExpr",
			L"genericambiguity::DecrementExpr",
			L"genericambiguity::Expr",
			L"genericambiguity::ExprToResolve",
			L"genericambiguity::GenericExpr",
			L"genericambiguity::Module",
			L"genericambiguity::PostfixExpr",
			L"genericambiguity::RefExpr",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 9 ? results[index] : nullptr;
	}

	const wchar_t* GenericAmbiguityFieldName(GenericAmbiguityFields field)
	{
		const wchar_t* results[] = {
			L"BinaryExpr::left",
			L"BinaryExpr::op",
			L"BinaryExpr::right",
			L"CallExpr::args",
			L"CallExpr::func",
			L"DecrementExpr::expr",
			L"ExprToResolve::candidates",
			L"GenericExpr::args",
			L"GenericExpr::name",
			L"Module::expr",
			L"PostfixExpr::expr",
			L"PostfixExpr::op",
			L"RefExpr::name",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 13 ? results[index] : nullptr;
	}

	const wchar_t* GenericAmbiguityCppFieldName(GenericAmbiguityFields field)
	{
		const wchar_t* results[] = {
			L"genericambiguity::BinaryExpr::left",
			L"genericambiguity::BinaryExpr::op",
			L"genericambiguity::BinaryExpr::right",
			L"genericambiguity::CallExpr::args",
			L"genericambiguity::CallExpr::func",
			L"genericambiguity::DecrementExpr::expr",
			L"genericambiguity::ExprToResolve::candidates",
			L"genericambiguity::GenericExpr::args",
			L"genericambiguity::GenericExpr::name",
			L"genericambiguity::Module::expr",
			L"genericambiguity::PostfixExpr::expr",
			L"genericambiguity::PostfixExpr::op",
			L"genericambiguity::RefExpr::name",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 13 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> GenericAmbiguityAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = GenericAmbiguityCppTypeName((GenericAmbiguityClasses)type);
		switch((GenericAmbiguityClasses)type)
		{
		case GenericAmbiguityClasses::BinaryExpr:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::BinaryExpr, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		case GenericAmbiguityClasses::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::CallExpr, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		case GenericAmbiguityClasses::DecrementExpr:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::DecrementExpr, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		case GenericAmbiguityClasses::Expr:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::Expr, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		case GenericAmbiguityClasses::ExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::ExprToResolve, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		case GenericAmbiguityClasses::GenericExpr:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::GenericExpr, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		case GenericAmbiguityClasses::PostfixExpr:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::PostfixExpr, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		case GenericAmbiguityClasses::RefExpr:
			return vl::glr::AssemblerResolveAmbiguity<genericambiguity::RefExpr, genericambiguity::ExprToResolve>(type, candidates, cppTypeName);
		default:
			if (cppTypeName)
				throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Type \"") + vl::WString::Unmanaged(cppTypeName) + vl::WString::Unmanaged(L"\" is not configured to allow ambiguity."), vl::glr::AstInsErrorType::UnsupportedAmbiguityType, type);
			else
				throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
		}
	}
}
