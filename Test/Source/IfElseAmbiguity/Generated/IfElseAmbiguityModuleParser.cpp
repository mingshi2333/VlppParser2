/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityModuleParser.h"

namespace ifelseambiguity
{
	void IfElseAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1203; // 10065 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 179;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x51\x27\x00\x00\xAB\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x3A\x0A\x4C\x5B\x87\x9E\x70\x67\x54\x4B\x97\xB0\x4E\x65\x6A\x7D\x5C\xAE\xA5\x5F\x9D\x83\x4C\x6A\x67\xA5\x82\x40\x63\x55",
			"\xA0\x9E\x62\xA8\xA6\xA0\x6D\xA0\x6B\xAB\xA3\x8C\x79\xA9\x40\xA7\xA0\x67\xAC\x00\xAB\xBD\x52\xAC\x73\xB4\x83\x4E\x58\x73\x9A\xA1\xA3\x4B\xAE\xBD\x9F\xA3\x55\xB0\xA3\x8C\xB8\xAF\x54\xC8\x93\x5F\xAC\x74\xCE\x80\x03\xB0\x74\xC5\xAE\xA3\x4B\xB4\x2C\x55\xB3\x6F\xAE\xB9\xB6\xAA\x41\xB2\xB1\x8B\xB7\xB0\x87\xD9\xB3\xAB\xB6\xB9\x20\x7B\xAF\xB7\x6A\xD0\xA3\xB2\xB4\xBB\x1D\x7B\xA7\xB4\x4B\xC4\x49\x4C\xB7\x48\xE9\x80\xB3\x49\xB8\xD4\xBC\xB4\xBD\x46\x00\xDD\xB2\xC3\xA6\xE7\x89\x4D\xBC\x74\xFB\x86\xC9\x46\xBB\xF1\x8A\xC1\xC6\x41\x05\xC9\xC6\x40\xB9\xE2\x92\xCC\xAB\xC0\x18\x76\xB3\x55\xBE\x14\xD3\x5B\xC2\xC3\x1D\x60\xC5\xAC\xBE\xB5\xA0\x66\xCA\x40\xBB\xA8\xC0\xAC\x73\x81\xA9\xC6\xB6\xCC\x00\x10\xC9\x40\xC6\x00\x13\xB7\xB7\xB4\xBB\x93\xB8\xCC\xC0\xD7\x80\xC0\xBA\xBC\x1A\xC1\x76\x43\xC2\xBB\x8B\xC8\xCF\xB5\xD1\x89\x47\x6F\xCB\x00\x0F\xD6\x43\xAE\x52\xFF\x5C\x6C\xD1\x06\x55\xD4\xCF\x40\x36\x0F\x77\xB6\x85\x32\xF8\xC3\x7B\xAE\x12\x9B\xD2\x7F\x46\x1B\xA1\xDD\x8C\xCE\x5A\xE6\xD0\x03\x0D\xCF\x78\xCE\x72\xDB\x03\x78\x01\xDE\x42\xF6",
			"\x74\xD2\x41\x0E\x77\xC9\x4B\x8E\xDE\x71\xA3\x04\xCE\xD8\xF8\x5B\xD7\xBC\xA2\x6B\x6E\x91\x4C\xA3\x92\x78\xCD\xC9\xE1\x89\x83\xAA\xBF\x6B\x3D\x9B\x4E\xC5\x81\xF8\x4B\xC3\xC8\xE4\x37\xD6\xA5\xE6\xE7\x45\xC3\x4D\x6F\xD9\x91\xCD\xA4\x6F\xC2\x00\xA4\xE9\x42\xD0\x3D\xBB\xA9\xD0\xD6\x4E\x9B\x4D\xD9\xCD\x3D\xBC\xCA\x43\xEC\x9B\xD8\x6B\x44\x70\x03\x4F\xE8\x64\xD2\xB7\xD7\xDA\xE8\x92\xA6\xF2\xEA\x41\xEA\x20\x9B\x4A\x71\xE2\xF2\x63\xE3\xD5\xF0\x9D\xC3\xF0\x78\xE8\x20\xAB\xC1\x43\xAE\xCE\xE6\xAF\xE6\x7E\x8C\xD6\x6C\xEE\x40\xC8\xF1\xE7\xF1\xF7\xA3\x4B\xF7\xD3\xF6\x06\x43\x8F\xF2\x7C\x73\xEB\xF6\x42\xF9\x03\x61\xF1\x93\x46\x65\xEE\xFE\x91\xDE\xF6\xC2\x40\xFE\xAA\xE8\xC3\x49\xD9\xFE\x71\x52\x7F\xF5\x0A\x2D\x7D\x81\x16\x7A\x4E\x1B\x31\x44\xD4\x13\x59\x21\x02\x82\x21\x3C\xD2\x65\x4D\xF1\x0A\x20\x83\xF3\x51\x81\x20\x7F\x60\x82\x9C\x0C\x4C\x78\x83\x15\x81\x7E\xFD\x62\x22\x91\x1D\x8E\x48\xB0\x5A\x87\x83\xFC\x77\x80\x00\x57\x44\x85\x20\x5E\x42\x83\xF8\x66\x81\x08\xEC\x44\x7C\xDA\x3B\x39\x39\x33\x87\x52\xE4\x06\x22\x80\x00\x37\x81",
			"\x79\xA5\x71\x52\x42\x6A\x73\x21\xDC\x5A\x33\x23\x7A\x4D\x85\x9C\x19\x82\x59\x21\xA3\x7A\x85\x31\x7A\x83\x78\x43\x40\x6A\x22\xA9\x80\x88\x09\x22\x72\x12\xF2\x43\x84\xA3\x43\x25\x7E\x03\x3C\x80\x16\x86\x25\x04\xEA\x4E\x4B\x3C\x26\x81\x8D\x0E\xA7\x06\x8C\x09\x92\x37\x7F\x6A\x8A\x85\x0A\x6D\x81\x4F\xF1\x2F\x85\x88\x39\x8B\x04\xEC\x41\x4A\x49\x2D\xB7\x88\x7C\x39\x8E\x07\x1E\xF1\x42\x4C\x3F\x83\x90\x81\x0A\x31\x07\x21\xE3\x39\x88\x0D\x8C\x8A\x20\x0A\x83\x8F\x40\x34\x04\x8E\x1D\x9A\x34\x8A\x29\x63\x3C\xB5\x00\x79\x65\xC3\x66\x26\x93\x20\x37\x58\x4C\x22\x9B\x70\x9A\x7E\x70\x25\xA7\x95\x5F\xD6\x36\x6B\x8A\x98\x2C\x92\x83\xAE\x9B\x68\xE1\x26\x23\x96\x90\x0E\x73\x23\x4B\x78\x97\xD6\x0D\x68\x24\x5E\x9D\x23\x5A\x66\x60",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][IfContent]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][IfContent]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]< IfContent @ >",
			L"[20][Stat]<< !Block @ >>",
			L"[21][Stat]<< !Do @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityTokens, ModuleParserStates, IfElseAmbiguityAstInsReceiver>(&IfElseAmbiguityTokenDeleter, &IfElseAmbiguityLexerData, &IfElseAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
