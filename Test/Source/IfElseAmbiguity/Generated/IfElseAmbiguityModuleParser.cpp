/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityModuleParser.h"

namespace ifelseambiguity
{
	void IfElseAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1071; // 8457 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 47;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x09\x21\x00\x00\x27\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x28\x0A\x4C\x5B\x87\x9E\x6C\x6E\x64\x4B\x97\xB0\x4E\x65\xA7\x9E\x8C\x70\xAA\x40\xA3\xA2\xAC\x85\xA9\x30\x5C\xA6\xA7\x54",
			"\xA8\xAE\x5C\x72\xA6\xA0\x6A\xAB\x58\xAB\xA1\x9F\xAB\xAB\x55\xAD\x93\x50\xAC\x73\xB2\xB5\xA0\x74\xAA\xA8\xBD\xA3\x42\xAB\xD0\x7B\xA0\x76\xB0\xA1\x88\xB1\x41\xB0\x23\x79\xA7\x56\xB1\x2C\x6C\x40\xB5\xB4\x20\x53\xB4\xB5\x46\xA8\x80\x68\xAE\xAF\xA6\x89\x4A\xB5\x5F\xC0\xB4\xAE\xB6\xB8\xC1\x7D\x56\xB7\xB5\x17\x77\x6C\xB4\x4B\xA9\x7D\x5C\xBB\x54\xEF\x97\x5C\x4A\xBA\xBE\xB3\xBD\x59\xA9\xF6\xB7\xAE\x64\xBD\x06\x5F\xB0\x69\xA0\xDC\x84\xBB\x44\xAA\x1B\x7E\xBB\x43\x73\xED\x83\x48\xA9\xC2\x02\x46\xC1\x42\xB1\xC4\x86\xB8\xAA\xB1\x0E\xC0\x00\x6C\xA6\x02\x57\xC6\x40\xAA\x1A\xFF\x5F\x71\xB6\x0A\x7C\xB2\x40\xB1\x22\xCB\xB1\xCA\x42\x15\xFD\x63\xB9\x42\x25\xC0\x0D\x9C\xC6\x01\x44\xB2\x85\x42\x00\xE5\xBA\xC2\x42\x1B\x89\x4B\xA0\xCC\x30\x56\x89\x43\x08\xCF\x55\xCD\xC8\x09\x41\xCA\x4E\x71\x42\x25\x05\xD9\x42\x7D\x09\x66\x0A\xD2\x41\x3B\x89\x47\x0B\x73\x40\xDC\xB5\xC5\x4C\x89\x98\x6E\xB2\xCD\x23\xD9\xDA\x65\xC5\xCC\x83\xA2\x7C\xC3\x01\x5D\xC4\xA8\xA3\x92\x66\xD5\xD8\xCA\x6E\x83\xCF\x68\x6F\x5E\xD1\xAF\xD9\x42\x00\x89\x44\xD8\x00\xC4",
			"\xA3\x71\xB9\x42\x6A\xC0\x05\xC4\xC4\x3D\xB7\xD8\xA9\xCB\x7D\xFD\xD9\xDC\x7E\x7D\xC3\xE0\xDD\x81\x88\xAC\xCA\x41\xDD\x06\x6D\xC7\xE0\x66\x2A\xDB\xC7\xCB\xCA\x06\x55\xE3\xB1\x8F\xC4\x73\xA9\x42\xE6\x07\x4D\x48\xDA\x65\xC0\x43\x40\xE7\x40\x9D\xDC\xD1\x9F\x78\xCA\x7C\xDA\x41\xEB\xAA\xF2\x97\xD2\xE5\xC9\x4F\xE6\xD2\x9B\x4C\xF4\xE6\x40\xEC\x1E\xC9\x41\x78\xCF\xFF\x7A\xB3\x43\xEC\xA8\xCA\x49\xEF\xE6\x8C\xD8\x64\xF2\x40\xBF\xC8\x9D\xA0\x6D\xCD\xC3\x4D\xDF\x7E\xC0\xCB\x82\xF0\xF3\xB6\xF4\xDE\x9A\xCF\xBA\xE0\x7C\xDB\x43\x6E\x9E\x8D\xF6\x40\xC7\xC2\x49\xEB\x40\x0C\x95\xF2\xDA\x41\xD4\xFB\xE1\xDC\x9E\xB4\x67\xE2\x41\xFB\x4E\x93\xA0\xFA\xEB\x09\x73\xC1\xEF\x78\x51\xF1\xE3\x82\x41\xF2\x61\x20\xF7\x48\x70\x45\x21\x7C\x67\x7F\xBD\x66\x21\xCE\x7B\x78\x3E\x23\x7C\x62\x7F\xE8\x71\x23\xE8\x23\x33\x80\x81\x29\x7E\x20\x31\x4A\x7F\xF3\x1B\x2B\x81\x08\x89\x25\x7F\x04\x95\x7C\x7E\x62\x72\x7A\x85\x06\x83\x7C\x71\x4A\x4A\xE7\x06\x24\x84\x81\x01\x80\x00\x2A\x88\x86\x9C\x62\x4B\x85\x81\x2D\x81\x20\x15\x74\x86\x0C\xE3\x3A\x4F\x1A\x82\x20",
			"\x84\x02\x39\x82\x41\x3D\x8C\x81\xF5\x43\x27\x84\xDC\x4B\x25\x12\xDD\x62\x3C\x81\x4E\x8E\x6D\xD7\x79\x2C\xC1\x53\x80\x8A\x1F\xA7\x6F\x7B\x98\x6F\x2B\xD5\x5B\x88\x35\x2E\x96\x27\x6E\x00\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityTokens, ModuleParserStates, IfElseAmbiguityAstInsReceiver, ModuleParserStateTypes>(&IfElseAmbiguityTokenDeleter, &IfElseAmbiguityLexerData, &IfElseAmbiguityModuleParserData)
	{
	};

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, codeIndex);
	};
}
