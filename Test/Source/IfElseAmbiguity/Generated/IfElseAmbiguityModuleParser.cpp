/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityModuleParser.h"

namespace ifelseambiguity
{
	void IfElseAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1137; // 9145 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 113;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\xB9\x23\x00\x00\x69\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x2E\x0A\x4C\x5B\x87\x9E\x6C\x6E\x64\x4B\x97\xB0\x4E\x65\xA7\x9E\x8C\x70\xAB\x41\x53\x63\xA1\x40\x60\x57\x66\xA0\x02\x5B",
			"\xA2\xA1\xAF\xA7\x6A\xA5\x8A\x48\xA9\x5F\xAA\xAC\xA0\x76\xA6\xA0\x5C\xA2\xAD\xAC\xAE\xAD\xA9\x40\xAE\xBE\x86\x43\xAF\xAB\x98\xA0\x60\xB0\x74\xBA\xBD\xA0\x76\xAA\xC7\x89\xB2\xB0\xAF\xC1\x7D\x5D\xB0\x4B\x23\x6A\xA3\x6C\xB3\xD0\xBF\x59\xB6\x40\xB6\xAC\x43\xB4\xB5\x1D\x5F\xB0\xB8\x46\xE2\xA3\xBF\x3E\xAA\xB0\x69\xAA\xB3\xB2\xAF\x5B\xB1\x41\xB9\x18\x6A\xA3\xB0\x68\xE8\xAE\xBB\xAB\x54\xF0\xA0\xB7\x6E\xB2\x2C\x69\x6D\x5C\x4B\xFB\x86\x4E\xBE\x67\x03\xF9\xA3\x49\xC0\xAE\x80\xC6\xA7\x54\x08\xDC\xBC\xC0\xAC\x57\x41\xAA\xB2\xAD\x1B\x56\xBB\xAD\x42\x05\xC1\x46\xAD\xC6\x00\x2A\xAC\xC7\xBC\xEF\x8F\x77\xB0\xB6\x09\x60\xC0\x01\xBA\xD1\x83\x48\xCB\x40\xF5\xA5\xCF\x72\xBC\x0A\x4D\xCA\xC5\xCC\x0B\xC9\x42\xCC\x00\x26\xFD\x6E\xCA\xCD\xEB\xA6\x0F\x72\xAD\x16\x8A\xB7\x0B\xCB\x13\x6B\xB8\x0B\x73\x1B\x5B\x8A\xB1\x0A\xCF\x66\xC7\xCF\x46\x2A\x0D\xDA\x42\x73\xCA\xAB\x02\xD5\x42\xF6\x4A\xBC\x0B\xD5\x06\x7B\x8A\xB1\x0B\xCF\x63\x0B\xBA\xC9\xEB\xB7\xB5\x80\x7E\xB5\xAB\xB6\xAD\xB7\x88\xBB\xC6\x42\xC5\x67\xC3\xA8\xC5\xBB\xCA\xA9\xD1\xDE\x66\x2B",
			"\xC2\x49\xDE\xA7\x26\xEC\xD8\x65\xC5\x74\xC6\x4A\xCD\xAF\x93\xB2\x7B\xDC\x00\x00\x8A\xBC\xC6\xAA\xE3\x6A\xAD\xCB\xB3\xCA\x87\xEE\xDE\x66\x8B\xF4\xC9\x43\xE1\x1B\x77\xC3\xE6\x64\x87\xEA\xA7\xCF\xE0\x09\xED\xD0\x8B\xCD\x89\xFD\xA0\xEA\x40\x8C\xF8\x77\xE9\x40\x9E\xD7\xCD\xAC\x71\xC5\xB1\x90\xEF\xDB\xBC\x50\xCD\xAE\x72\xB1\xC7\xA8\x64\x70\x03\x65\xEE\xA8\xD5\x29\xE5\x9A\x64\xEE\x06\x58\xEA\x41\x78\xB9\xE3\x70\xF0\xCB\x0A\x44\xFD\xEF\xBA\x59\xF4\xE2\x7D\xF4\xCC\xC9\x7E\xEA\xAB\xBE\xCE\xC2\x7D\xF6\xAC\xD3\xD3\x73\xBA\x03\x81\xF1\x9E\xF2\xC7\xEB\xB5\xE0\x88\xC8\xC5\xFB\xB8\x83\xC9\xCB\x85\xCE\x41\xE9\xCF\xFA\xB2\x84\x6B\x7D\x81\xD2\xF4\xF0\xD7\xF1\xAA\xD2\xE2\xF2\x9E\x84\xFE\x03\x34\x7A\x40\x33\x7E\x55\xFF\x43\x23\x73\x78\x54\x37\x7E\x56\x7C\x5E\xD1\x4E\x4C\x7B\x00\x0B\x80\xE1\x0E\x81\x49\xF0\x6A\x63\x5D\x31\x4D\x7C\x66\x5E\x6D\x7E\x0B\x82\x20\x82\x1B\x3C\x81\xF5\x20\x43\x49\xDC\x5E\x87\x54\xEB\x46\x4A\x06\x9A\x3A\x85\xFE\x74\x7E\x20\xEC\x7D\x56\x92\x2B\x81\x52\x85\x37\x7B\x20\x31\x8E\x57\x95\x34\x89\x81\xA4\x4A\x21",
			"\x87\xA1\x42\x4C\x0F\x8E\x56\x32\x03\xBA\x6B\x5D\x6D\x55\x7E\x7C\x33\x80\x80\x81\x06\x89\x20\x20\x8A\x21\x9F\x6E\x6E\x48\x21\x8D\x89\x20\x4F\x98\x67\xBA\x62\x6A\x88\x10\x7A\x4D\x8B\x03\x22\x86\x40\x19\x8D\x57\x12\x0C\x52\x32\x25\x93\x83\xDF\x54\x55\x6D\x36\xA6\x69\x37\x08\x98\x20\xC5\x31\x25\x6D\x39\xAF\x7A\x3B\xA9\x75\x59\xD9\x70\x60\x8C\x57\x7C\x8F\x8A\x9E\x5F\x8E\xB6\x32\x36\x64\x6A\x66\x66\x5A\x7D\x7B\x20\xD9\x28\x32\x30\x8E\x54\x5C\x63\x30\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][IfContent]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][IfContent]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]< IfContent @ >",
			L"[20][Stat]<< !Block @ >>",
			L"[21][Stat]<< !Do @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityTokens, ModuleParserStates, IfElseAmbiguityAstInsReceiver, ModuleParserStateTypes>(&IfElseAmbiguityTokenDeleter, &IfElseAmbiguityLexerData, &IfElseAmbiguityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
