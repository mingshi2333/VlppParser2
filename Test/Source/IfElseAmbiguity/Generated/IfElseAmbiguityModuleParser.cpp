/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityModuleParser.h"

namespace ifelseambiguity
{
	void IfElseAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1104; // 8601 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 80;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x99\x21\x00\x00\x48\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x2E\x0A\x4C\x5B\x87\x9E\x6C\x6E\x64\x4B\x97\xB0\x4E\x65\xA7\x9E\x8C\x70\xAB\x41\x53\x63\xA1\x40\x60\x57\x66\xA0\x02\x5B",
			"\xA2\xA1\xAF\xA7\x6A\xA5\x8A\x48\xA9\x5F\xAA\xAC\xA0\x76\xA6\xA0\x5C\xA2\xAD\xAC\xAE\xAD\xA9\x40\xAE\xBE\x86\x43\xAF\xAB\x98\xA0\x60\xB0\x74\xBA\xBD\xA0\x76\xAA\xC7\x89\xB2\xB0\xAF\xC1\x7D\x5D\xB0\x4B\x23\x6A\xA3\x6C\xB3\xD0\xBF\x59\xB6\x40\xB6\xAC\x43\xB4\xB5\x1D\x5F\xB0\xB8\x46\xE2\xA3\xBF\x3E\xAA\xB0\x69\xAA\xB3\xB2\xAF\x5B\xB1\x41\xB9\x18\x6A\xA3\xB0\x68\xE8\xAE\xBB\xAB\x54\xF0\xA0\xB7\x6E\xB2\x2C\x69\x6D\x5C\x4B\xFB\xBF\xA7\x56\xBF\x9B\xA3\x41\xC2\xAB\x00\xED\x53\xBC\x74\x07\xDA\xBD\x5D\xC3\x02\x69\xBE\x65\xA0\xCA\xB6\xAB\x46\xB5\xBB\x89\x44\xC0\xB7\x0A\x5B\xC1\x42\xAA\x1E\xC0\x0B\xC0\x41\xCF\x47\xB8\xB5\x42\x23\xD2\xC3\x42\xAD\x2A\xC2\x45\xBC\xCA\xCF\x72\xBA\x40\xC4\xF7\x89\x44\xCE\xAA\x34\xE3\xCD\x6C\xCC\x36\xCA\x46\x0B\x73\xB6\x96\x89\x43\x09\x31\xD3\x4A\x40\x0A\xCF\x5B\x4B\x85\x42\x29\x0F\x73\xC8\xCD\x2A\x0E\xDA\x42\x73\x09\x6B\x02\xD5\x42\xF6\x49\x4C\x0B\xD5\x06\x7B\x89\x41\x0B\xCF\x63\x0B\xBB\xC8\x31\x49\xA8\x65\xAD\x40\xE6\xDA\x67\xC8\xAA\x93\xA2\x7D\xC8\x2D\xDF\xCC\xA2\x64\x71\xC0\x05\xDF\xC8\xDD",
			"\xB8\x77\xC5\xBB\x09\x7B\xC8\x91\xA3\xB4\x75\xD0\x82\xC6\x96\xBD\x8A\xAB\xCB\xCF\x89\x45\xDD\xDE\x98\x61\xC8\xCC\xDF\x06\x74\xCC\xE2\x66\x75\xCF\xED\xDE\xDA\x91\xB3\xCA\x43\xE0\x06\x7E\xD3\x41\xDB\xF8\x5E\xEE\xCA\xE6\x3C\xC6\x44\x71\xB1\x71\xA7\xE6\x42\xAA\xA2\xEF\xBA\x42\x72\xA8\xC7\xA8\x64\x70\x03\x5C\xE3\x40\xD5\xD1\x8E\x93\x78\xEC\x06\x75\xD1\x79\xEC\xE3\x78\xEF\xE7\xEB\x9B\xCA\x49\xD7\xEA\x3D\x87\xF3\xF1\x72\x19\xC6\x46\xEC\xC7\xF2\x4F\xF2\xDD\x42\xC2\xC2\x4A\xEB\x40\x03\xB9\xE5\x9A\x66\xD5\xC1\x4F\xEF\xDF\x99\xC9\x4F\xF7\x40\x75\xCC\x80\xF3\x82\x85\xE2\xF5\xF1\x42\x12\xAB\x5D\x8E\xD0\xC8\xEA\xF5\xEB\x40\x4B\xDA\xF1\x9E\x87\xF1\xC6\x4A\xF2\xF5\x11\x73\xD6\x67\x7E\xCC\x65\x40\xA2\x09\x22\x7A\x00\x00\x80\x7C\x78\x54\x35\xF6\x64\x7A\x21\x18\x67\x78\x33\x5E\x76\x7C\x00\x0B\x82\x21\x02\x91\x83\x79\x20\x43\x49\xEC\x14\x87\x54\x85\x06\x4F\x81\x9A\x3F\x82\x04\xED\x76\x20\xF3\x46\x22\x49\x20\x81\x7E\x41\x70\x73\x20\x13\x83\x27\x4A\x29\x89\x82\xD2\x0A\x2E\x84\x81\x22\x49\x86\x8E\x56\x30\xFE\x0C\x89\x21\x36\x6E\x7A",
			"\x3E\x28\x99\x7F\x40\x3B\x85\x82\x85\x3D\x4B\x7E\x41\x57\x86\x10\x82\x24\x89\x0E\x89\x22\x6C\x3F\x80\x46\x9E\x51\x83\x21\x0B\x82\x26\x81\x06\x25\x06\xFF\x23\x3A\x83\x75\x6B\x26\x8B\x01\x36\x61\xB7\x62\x85\x6D\xF4\x54\x89\x2D\xD6\x49\x8F\xDE\x66\x8B\x88\x81\x24\x6B\x64\xFF\x0F\x8F\x46\x64\x61\x64\x00\x21\x67\x1F\x75\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][IfContent]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][IfContent]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]< IfContent @ >",
			L"[20][Stat]<< !Block @ >>",
			L"[21][Stat]<< !Do @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityTokens, ModuleParserStates, IfElseAmbiguityAstInsReceiver, ModuleParserStateTypes>(&IfElseAmbiguityTokenDeleter, &IfElseAmbiguityLexerData, &IfElseAmbiguityModuleParserData)
	{
	};

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, codeIndex);
	};
}
