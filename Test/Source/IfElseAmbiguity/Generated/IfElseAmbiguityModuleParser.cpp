/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityModuleParser.h"

namespace ifelseambiguity
{
	void IfElseAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1067; // 8369 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 43;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\xB1\x20\x00\x00\x23\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x6E\x7C\x7E\x10\x6A\x62\x7F\x78\x12\x01\x8C\x64\x7E\xE3\x53\x0A\x82\x65\x14\x0F\x83\x6B\x80\xFD\x4C\x86\x85\x85\x18\x82\x87\x86\x86\x19\x8B\x8D\x85\x69\x1B\x9E\x8C\x86\x66\x15\x12\x81\x75\x88\x20\x9F\x83\x84\x8A\x2B\xAA\x84\x6E\x44\x06\xB0\x79\x7E\x8C\x14\xA3\x82\x8B\x8D\x29\x9A\x67\x06\x89\xE5\x6E\x7E\x8D\x7C\x32\x98\x0C\x8C\x7D\x00\x19\x03\x93\x81\xF8\x5A\x07\x90\x8D\x2C\xA7\x8E\x89\x8F\x40\xAF\x72\x97\x8F\x33\x83\x4B\x07\x92\x53\x91\x94\x95\x8D\x38\xAD\x86\x8D\x8E\x92\x5C\x08\x97\x96\x4D\x90\x95\x94\x99\x4F\x84\x9D\x07\x98\x5A\xAD\x97\x9A\x9B\x5C\xA0\x92\x9E\x97\x5D\x8E\x9A\x66\x07\x6C\xAF\x90\x03\x07\x79\xB1\x93\x68\x08\x7D\xA5\x94\x92\x9F\x76\xB5\x96\x98\xA1\x66\xA1\x01\xA1\x9A\x48\x8C\xAC\x92\xA3\x59\x80\x07\x0A\x42\x6C\x71\x8E\x64\x6B\x9E\x6C\x45\xA4\x4C\x9E\x5B\xAC\xA4\x73\x9E\x82\x41\xA8\xA8\x26\xA3\xA0\x4E\xA6\x94\x93\x56\xAA\x5B",
			"\xCC\x58\xA0\x68\xAA\x6B\x6A\xAF\xA5\xA7\xA9\x97\x5B\xAA\xAC\xB3\xA4\xA1\xAE\xAD\x26\xAE\xAC\x70\xAC\xB9\x80\xB3\x42\xA9\xC2\x82\x4C\xA8\x74\xBE\x90\x7C\x49\xB2\x2C\x4B\xB3\x55\xB1\x01\x40\x6C\xAD\xAE\xD0\x66\xA2\xB5\x5F\xA6\x84\xB3\x4A\xB5\xB8\x81\x7D\x5C\xB3\xCD\xA0\x47\x6C\xB5\x2C\x69\x6D\x5D\xB9\xCF\xA3\x46\xB9\xA6\x23\x63\xB1\xB1\xBB\x6D\x63\xAC\x4A\xBB\x06\x72\xB0\xBE\x42\xD7\xA0\x6A\xA0\xB5\xC7\x9B\x46\xAB\x46\xF9\x8B\x4F\x73\xBA\xA2\x8A\x44\xC1\xB4\xAB\x4F\x79\xB2\xA9\xC9\x81\xC1\x40\x6C\x96\x82\x40\xC5\xBD\xAF\x78\xBF\x70\xB7\x09\x74\xB6\xB2\x42\x1A\xC1\x46\xA9\xC7\x00\x0E\xC0\x01\x6F\x09\x62\xC0\xC8\x9F\x11\xC1\x47\xB2\x83\x09\x40\xA9\xC8\x00\xA6\xA5\x89\x43\xBE\xDE\xB3\xA1\x85\x42\x22\x0F\x76\xCA\x42\x23\x3A\xCA\x42\x7D\x09\x64\x0E\xCD\x42\xE1\x49\x45\x0B\xD0\x06\x42\x99\x42\x09\xCF\x79\xC4\xB6\xC8\x31\x43\xA8\x7F\xAD\x2F\xC7\xB8\xA2\xC5\xBB\x8F\xAF\x97\x68\x07\xC0\x03\xC7\xB0\x8B\x9A\x6F\xD6\xC4\x58\xF5\xC4\x96\xBF\x15\xC9\x44\xCA\xD6\x86\xA9\xD6\x40\x80\x09\x5D\xD6\xD7\xD4\xB5\x86\x43\xD8\xC2\x09",
			"\x49\xB3\xDC\x66\x5D\xDF\xCE\xDB\x40\x77\xC0\x0B\xDE\xD8\x75\xC3\x40\xCB\xDA\x91\x97\xD9\xC6\x42\x70\xC6\x40\xCB\xE0\x92\x48\xE5\xC3\xE2\x25\xFC\x69\x9C\x71\x59\xC3\x42\xE5\x40\xC9\x80\x73\x40\xE4\x73\xB4\x6E\xE6\x40\x8D\xC3\x48\xE6\xD9\x70\xB8\x7A\x71\x42\x81\xEB\xE8\xEA\x9E\xCE\x59\xE2\x42\xEB\x03\x65\xE2\x41\xEC\xAF\xE3\x70\xD0\xC5\xC9\x65\xD0\x79\x9E\xB6\xDE\xCA\x40\xEE\x80\xFF\xC9\x9D\x82\xB2\xC1\x44\xF0\xE9\x0A\x7B\x7F\xCB\x78\x37\xFC\xE6\x43\xF2\x78\xEF\xD9\x9C\x8C\xD2\xFF\xE9\x43\xE9\x03\x45\x89\xEE\xA0\x09\x7B\xE3\x40\xF5\x7A\x8A\xE6\x42\xF3\x06\x74\xE8\x9B\xD6\xB4\x41\xF0\x00\xFA\x89\xE0\xF6\x42\xF7\xC5\xC9\x48\xF3\xF7\x98\x4A\xDF\xE8\xFD\xCC\xC9\x4C\xC8\xFE\x9A\x26\x4B\xCB\x7C\x75\x7B\x81\x11\x7F\x73\x44\x4A\x4B\xCB\x7F\x73\x21\xFB\x43\x22\x66\x00\x8D\x6D\x42\x07\x82\x20\x07\x82\x20\x7B\x08\x8D\x50\x89\x0A\x26\x83\x80\x3B\x47\x79\xF2\x63\x20\x06\xE4\x69\x20\xFD\x60\x6A\x3E\x57\x49\x78\x00\x23\x81\x20\xF7\x4A\x81\x7B\x54\x4B\x4E\x0A\xAC\x81\x64\x85\x22\x4A\x85\xE3\x28\x64\x0C\x81\x26\x84\x81\x1F\x86",
			"\x20\x78\x40\x84\xA4\x02\x22\x80\x6A\x5F\x26\x88\x1B\x62\x3D\xBF\x4B\x88\x6D\xC2\x69\x2F\x5F\x50\x8D\x8A\x0A\xB0\x60\x61\x2A\x96\x20\x6A\x58\x88\x36\x16\x96\x2D\x6A\x00\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat \"else\" Stat >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat \"else\" @ Stat >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat \"else\" Stat @ >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat @ \"else\" Stat >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat \"else\" Stat >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat \"else\" Stat >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityTokens, ModuleParserStates, IfElseAmbiguityAstInsReceiver, ModuleParserStateTypes>(&IfElseAmbiguityTokenDeleter, &IfElseAmbiguityLexerData, &IfElseAmbiguityModuleParserData)
	{
	};

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, codeIndex);
	};
}
