/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityModuleParser.h"

namespace ifelseambiguity
{
	void IfElseAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1201; // 10065 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 177;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x51\x27\x00\x00\xA9\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x3A\x0A\x4C\x5B\x87\x9E\x6C\x6E\x64\x4B\x97\xB0\x4E\x64\x60\x57\x5C\xAE\xA5\x5F\x9D\x83\x4A\xA4\x68\xA5\x82\x40\xA9\x5F",
			"\xAB\x9B\xA3\x49\xAA\x01\x6E\x5C\x71\xAB\xA0\x62\xA3\xA8\xAA\xAB\x53\x50\xAC\x00\xB4\xB3\xA3\x56\xAD\xC1\x7D\x57\xA8\x73\xC0\xBF\x53\x55\xAF\xD0\x45\xB3\xAA\xB2\x01\x43\xB0\x77\xAE\xC8\xAC\x41\xB4\x4B\xAF\x9C\x8E\xB0\xB5\x23\x53\xB8\xB5\x46\xBB\xB3\x6B\xAF\xB5\xD5\x89\x4A\xB5\x47\xE3\x9B\xBF\x3F\xAE\xB2\x90\x70\xBA\xB9\x17\x65\xBB\xB5\xB7\xBA\xB9\xA7\x54\xB4\xC7\xBF\xA1\xB9\xB0\x9E\x40\x73\x41\x6A\xC2\xB6\xB0\x48\xBF\xAE\xA0\x4B\xB8\xBB\x00\xF5\xA3\x4B\xC0\xE6\xBB\xA0\x6F\x55\xEE\x98\xB0\xBF\xBC\xAF\x71\xB9\x40\xC2\x18\x74\xB0\xC5\x42\x0B\xEC\xAE\xBD\x47\xE8\x93\x5A\xBF\x41\x53\x54\xC8\xB7\xC7\x9E\xAC\x44\xC8\x4C\x26\xD6\xAE\xC4\x87\x81\xB7\xA1\xAE\xCB\x01\x4F\xC6\x40\xB2\x05\xEF\xC9\x41\xCD\x00\x3B\xA8\xCC\xB2\xCE\xA9\xBE\xB3\xB7\x0A\x48\xB9\xC7\x40\xE9\x83\xD2\x42\xC2\x41\xCF\x76\xC6\x41\xB7\x58\xA2\x41\xD3\x06\x7B\xA0\xD6\xB1\x09\x7D\x62\xBA\x42\x53\xF0\xC6\x42\x0D\xCF\x69\xB6\x84\xCC\x0D\xF4\x6B\xAE\x84\x5A\xFD\x8B\x47\x86\x60\xFD\x88\xB1\xD6\x65\xC1\x47\x0F\x73\xC8\x8E\x7D\xDA\x41\x38\x30\xDA\x42\x7D\x73",
			"\xC3\x49\x0E\xDD\x09\x7B\x89\xDD\x90\x23\x1A\xD1\xDB\xDF\x44\xC9\xA8\x65\xC7\xF2\x71\x4C\xA2\x64\xC8\xBB\xA3\x7A\xA4\x88\xB7\xC1\xC5\xE2\x2A\xCE\xD1\x9F\x78\x46\xC1\x49\xE6\x9C\x1B\x4D\xE6\xD9\xE5\x06\x5B\xE6\xD4\x88\x90\xC3\xA8\xC6\x42\x00\x94\xE3\xC4\xE8\x4E\xBB\xA8\xD3\xD5\xAA\xCC\xDC\xE9\x90\x38\xD2\xD3\xE4\xE9\x0D\x73\xE1\x9F\xE6\xB6\xD5\xDF\xE5\x81\x91\xF2\xE9\x41\xEA\xB8\xC9\x7A\xEE\x9C\xA3\xC3\x4D\xEF\xCC\xBF\xC6\x41\x7B\x5A\x3D\x84\x70\xF6\xEF\xAB\xF1\xE3\x43\x7E\x96\xC7\xA8\x67\xC9\xC4\xCE\x9B\x45\xF7\x02\x69\xB3\xA6\xF1\xA7\xD6\xF2\x43\x80\x51\xFD\x82\xDD\xFA\xE4\xC6\x40\xF9\x9C\x1B\x64\xDC\xF8\x88\x78\xF3\xF3\x42\x72\xB0\xC5\xF6\x40\xDA\xF6\xC1\x9F\xF9\xCE\x0A\x2B\x7F\x40\x52\x7A\x7F\x81\x31\x41\x7B\xE3\x66\x22\x00\x82\x2F\x79\x02\xA5\x4D\x51\xB4\x2D\x83\x40\x1B\x7F\x70\x85\x3E\x6D\x7F\x71\x4C\x43\xF4\x4E\x78\x75\xE6\x43\x26\x48\x1B\x8E\x4B\xD7\x18\x80\x00\x09\xAA\x56\x83\x02\x37\x49\x08\xC1\x4E\x42\x12\xB5\x7B\x80\x28\x8C\x4F\xE2\x16\x38\x7A\x83\x38\x7E\x81\x97\x61\x7B\x40\x7F\x75\x86\xEF\x46\x70",
			"\x82\x1B\x28\x7F\x04\xB1\x80\x00\x3D\x6B\x81\x4E\x17\x85\x73\x43\x1D\x86\x7D\x80\x2D\x64\x84\xE3\x23\x49\xF6\x42\x87\x85\x26\x80\x01\x70\x47\x92\x4C\x08\xF8\x52\x20\xF9\x43\x22\x83\x38\x80\x01\x09\x47\x79\x81\x81\x23\x87\x8B\x44\x87\x04\x19\xBA\x82\x20\xFE\x68\x8E\x8A\x29\x0B\x8E\xE9\x06\x2D\x85\x21\x96\x8B\x05\x49\x72\x3E\x92\x59\x85\x8E\x81\x3F\x7D\x82\x09\x2E\x05\x1E\xA0\x42\x4C\x3E\x83\x96\x87\x09\x31\x07\x21\xC1\x46\x88\x12\x89\x8A\x20\x07\x81\x8C\x0D\x72\x80\x88\x85\x12\x8E\x65\x8F\x74\x58\xE1\x2E\x62\x7D\x97\x1D\x93\x24\xE9\x50\x25\x28\x8A\x7A\x6A\xC7\x6F\x26\x94\xF7\x4E\x66\xCC\x24\x80\x27\x55\x8A\x7D\x6C\xAE\x95\x89\x6E\x61\x6F\x1E\xCF\x4B\x96\x66\xF9\x6E\x64\xCE\x42\x2B\x96\x96\x38\x65\x6D",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][IfContent]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][IfContent]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]< IfContent @ >",
			L"[20][Stat]<< !Block @ >>",
			L"[21][Stat]<< !Do @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityTokens, ModuleParserStates, IfElseAmbiguityAstInsReceiver>(&IfElseAmbiguityTokenDeleter, &IfElseAmbiguityLexerData, &IfElseAmbiguityModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(IfElseAmbiguityTypeName((IfElseAmbiguityClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity::Module, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	}
}
