/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityModuleParser.h"

namespace ifelseambiguity
{
	void IfElseAmbiguityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1094; // 8601 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 70;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x99\x21\x00\x00\x3E\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x2E\x0A\x4C\x5B\x87\x9E\x6C\x6E\x64\x4B\x97\xB0\x4E\x65\xA7\x9E\x8C\x70\xAA\x40\x80\x57\x53\xA9\x40\xA7\x90\x79\xAA\x5B",
			"\xA2\xA1\xAF\xA6\x42\xA5\xBD\x59\xA9\xAA\x9C\x9C\x8A\xA4\x68\xB5\xAB\x53\x55\xAA\xB3\x69\xA1\xAF\xAB\xBA\xA6\xA6\xAF\x54\xB9\xAE\xAA\xA8\xAC\xBB\x96\xA9\xB0\xA6\xA0\x77\xAC\x71\xB1\xAE\x90\xB4\xAB\xB2\x06\x74\xA3\x4B\xAA\x53\x4E\xB0\x74\x4B\xDA\xAC\x4C\xB4\xB1\xD7\x8A\x49\x6A\xAC\xC6\xAD\xA9\x43\xB8\xC0\x86\x4F\xAC\x68\xB3\x94\xB3\x40\xBA\xEC\x83\xB7\x54\x4B\xB7\x65\xBC\x48\xBC\xCF\xA3\x45\xBD\x42\xEB\x90\x78\xBF\xB6\xFA\xA5\xB0\x77\xBE\x03\x41\x07\xA8\xBD\x1B\x47\xC1\xC2\xB8\x57\x41\xA5\xB8\xAB\x30\x7C\xA8\xB3\xB9\xCF\x7F\xB9\xAB\xBF\xFD\x84\x4F\x72\xB6\xA9\x9A\xB9\xC4\x6C\xCC\x81\x40\xC9\xB5\xAF\x53\xC1\x70\xC9\xFC\x8A\x44\xC2\x40\x10\xEB\xC8\xAA\xCA\x26\xC3\x4D\x6D\xCA\x09\x6E\xC0\x02\x09\xCF\x50\xC6\x85\x42\x27\x0F\x79\xAA\x84\x09\x68\x0F\x73\x46\x1B\x89\x49\x0B\x73\x19\xF6\xCA\x08\xD2\x0A\x4E\x79\x43\x0A\x4C\xC9\x46\x7D\x42\x2C\x11\xD6\x43\x8E\x09\x6D\x0F\x73\x08\x02\xD9\xC1\x4D\xA2\x98\x58\xB1\xC8\x00\x10\xD3\xA4\xCC\xCA\x48\x8D\xA4\x6F\xBF\x23\xC3\x42\xD9\xDA\x92\x6D\xD2\x42\xDC\x01\x59\xC5\xD8\x7E\x09",
			"\xE5\xC9\x43\xCC\x70\xF8\x94\x6C\xDD\x00\x00\x84\xC5\xB0\x20\xAD\xB9\x40\xE0\x1F\xEE\x96\xC4\xCC\x87\xCC\xE7\xCA\x93\x80\xE9\xA6\xCC\xDF\x4E\xA6\xD6\x42\xCD\x82\xC6\x44\xE6\x40\xD6\x98\x6B\xE7\xCB\x35\xF1\xC2\x40\x71\x63\xE3\x74\xE8\xDA\x32\xEB\x6A\x42\x72\xA5\xC8\xA9\x40\x70\x03\x59\xE3\x42\xD3\x8F\xE5\x9A\x64\xEB\x06\x40\xE1\x79\xEB\x98\x74\xEE\xDB\xEA\x0A\x72\xE2\x43\xD4\xA8\xC1\x94\xF3\xEF\xC9\x62\xE1\x42\xF0\x01\x77\xD8\x64\xF3\x00\x29\xAE\xEF\xE8\x0A\x43\x85\xED\x9C\xE3\x53\xF1\x43\xEE\x7D\xCE\xA6\x64\xF7\x03\x40\xEC\x80\xEF\x9A\x63\xF5\xF3\xF6\xC1\xD3\x4A\xB2\x7C\x3B\xE7\xF0\x00\xF8\xD3\x89\x45\xD3\xF5\x72\x9E\x8E\xFB\xF1\xD4\xC9\x46\xFD\xC1\x60\xDA\x6B\x7D\xF2\x05\x4E\x76\x41\x50\x7F\x7F\xEE\x50\x56\x32\xD6\x61\x7E\x42\x31\x44\x7C\x1D\x4F\x39\x81\x02\x30\x78\xD6\x6E\x73\x3D\x21\x63\x68\x82\x75\x6A\x22\x91\x0D\x86\x33\x0D\xB4\x78\x68\x06\x26\x7F\x40\x4A\x4C\x82\xEF\x63\x35\x7D\x03\x22\x86\x40\x57\x45\x85\x03\xA3\x33\x7E\x29\x8A\x22\x98\x2D\x86\x51\xFD\x73\x6A\x21\x6D\x44\x72\x93\x24\x8E\x7C\x1B\x8B\x7A",
			"\x21\x7D\x47\x6E\x93\x33\x8D\x86\xE5\x40\x04\x6B\x3A\x81\x4A\x9E\x49\x81\x21\x09\x83\x24\x81\x06\x25\x04\xA3\x12\x36\x82\x81\x6B\x26\x8A\xCD\x7F\x6A\x45\x10\x64\x6C\x2D\x8C\x88\x74\x41\x3C\x56\x18\xF9\x6B\x7D\x2F\x80\x06\x6B\x19\x7F\x1C\x1A\x9B\x2E\x6B\x7F\x40\x07\x5F\xFF\x0E\x8C",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][IfContent]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][IfContent]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]< IfContent @ >",
			L"[20][Stat]<< !Block @ >>",
			L"[21][Stat]<< !Do @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityTokens, ModuleParserStates, IfElseAmbiguityAstInsReceiver, ModuleParserStateTypes>(&IfElseAmbiguityTokenDeleter, &IfElseAmbiguityLexerData, &IfElseAmbiguityModuleParserData)
	{
	};

	vl::Ptr<ifelseambiguity::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, codeIndex);
	};
}
