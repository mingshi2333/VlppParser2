/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:StatAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityStatAst_Builder.h"

namespace ifelseambiguity
{
	namespace builder
	{

/***********************************************************************
BlockStatBuilder
***********************************************************************/

		BlockStatBuilder& BlockStatBuilder::stats(const vl::Ptr<Stat>& value)
		{
			node->stats.Add(value);
			return *this;
		}

/***********************************************************************
IfContentCandidateBuilder
***********************************************************************/

		IfContentCandidateBuilder& IfContentCandidateBuilder::elseBranch(const vl::Ptr<Stat>& value)
		{
			node->elseBranch = value;
			return *this;
		}

		IfContentCandidateBuilder& IfContentCandidateBuilder::thenBranch(const vl::Ptr<Stat>& value)
		{
			node->thenBranch = value;
			return *this;
		}

/***********************************************************************
IfContentToResolveBuilder
***********************************************************************/

		IfContentToResolveBuilder& IfContentToResolveBuilder::candidates(const vl::Ptr<IfContent>& value)
		{
			node->candidates.Add(value);
			return *this;
		}

/***********************************************************************
IfStatBuilder
***********************************************************************/

		IfStatBuilder& IfStatBuilder::content(const vl::Ptr<IfContent>& value)
		{
			node->content = value;
			return *this;
		}

/***********************************************************************
ModuleBuilder
***********************************************************************/

		ModuleBuilder& ModuleBuilder::stat(const vl::Ptr<Stat>& value)
		{
			node->stat = value;
			return *this;
		}
	}
}
