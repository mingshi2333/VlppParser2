/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:StatAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityStatAst_Copy.h"

namespace ifelseambiguity
{
	namespace copy_visitor
	{
		void StatAstVisitor::CopyFields(BlockStat* from, BlockStat* to)
		{
			CopyFields(static_cast<Stat*>(from), static_cast<Stat*>(to));
			for (auto&& listItem : from->stats)
			{
				to->stats.Add(CopyNode(listItem.Obj()));
			}
		}

		void StatAstVisitor::CopyFields(DoStat* from, DoStat* to)
		{
			CopyFields(static_cast<Stat*>(from), static_cast<Stat*>(to));
		}

		void StatAstVisitor::CopyFields(IfContent* from, IfContent* to)
		{
		}

		void StatAstVisitor::CopyFields(IfContentCandidate* from, IfContentCandidate* to)
		{
			CopyFields(static_cast<IfContent*>(from), static_cast<IfContent*>(to));
			to->elseBranch = CopyNode(from->elseBranch.Obj());
			to->thenBranch = CopyNode(from->thenBranch.Obj());
		}

		void StatAstVisitor::CopyFields(IfContentToResolve* from, IfContentToResolve* to)
		{
			CopyFields(static_cast<IfContent*>(from), static_cast<IfContent*>(to));
			for (auto&& listItem : from->candidates)
			{
				to->candidates.Add(CopyNode(listItem.Obj()));
			}
		}

		void StatAstVisitor::CopyFields(IfStat* from, IfStat* to)
		{
			CopyFields(static_cast<Stat*>(from), static_cast<Stat*>(to));
			to->content = CopyNode(from->content.Obj());
		}

		void StatAstVisitor::CopyFields(Module* from, Module* to)
		{
			to->stat = CopyNode(from->stat.Obj());
		}

		void StatAstVisitor::CopyFields(Stat* from, Stat* to)
		{
		}

		void StatAstVisitor::Visit(Module* node)
		{
			auto newNode = vl::Ptr(new Module);
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void StatAstVisitor::Visit(DoStat* node)
		{
			auto newNode = vl::Ptr(new DoStat);
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void StatAstVisitor::Visit(IfStat* node)
		{
			auto newNode = vl::Ptr(new IfStat);
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void StatAstVisitor::Visit(BlockStat* node)
		{
			auto newNode = vl::Ptr(new BlockStat);
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void StatAstVisitor::Visit(IfContentToResolve* node)
		{
			auto newNode = vl::Ptr(new IfContentToResolve);
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		void StatAstVisitor::Visit(IfContentCandidate* node)
		{
			auto newNode = vl::Ptr(new IfContentCandidate);
			CopyFields(node, newNode.Obj());
			this->result = newNode;
		}

		vl::Ptr<Stat> StatAstVisitor::CopyNode(Stat* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<Stat::IVisitor*>(this));
			return this->result.Cast<Stat>();
		}

		vl::Ptr<IfContent> StatAstVisitor::CopyNode(IfContent* node)
		{
			if (!node) return nullptr;
			node->Accept(static_cast<IfContent::IVisitor*>(this));
			return this->result.Cast<IfContent>();
		}

		vl::Ptr<Module> StatAstVisitor::CopyNode(Module* node)
		{
			if (!node) return nullptr;
			Visit(node);
			return this->result.Cast<Module>();
		}

		vl::Ptr<BlockStat> StatAstVisitor::CopyNode(BlockStat* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<Stat*>(node)).Cast<BlockStat>();
		}

		vl::Ptr<DoStat> StatAstVisitor::CopyNode(DoStat* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<Stat*>(node)).Cast<DoStat>();
		}

		vl::Ptr<IfContentCandidate> StatAstVisitor::CopyNode(IfContentCandidate* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<IfContent*>(node)).Cast<IfContentCandidate>();
		}

		vl::Ptr<IfContentToResolve> StatAstVisitor::CopyNode(IfContentToResolve* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<IfContent*>(node)).Cast<IfContentToResolve>();
		}

		vl::Ptr<IfStat> StatAstVisitor::CopyNode(IfStat* node)
		{
			if (!node) return nullptr;
			return CopyNode(static_cast<Stat*>(node)).Cast<IfStat>();
		}

	}
}
