/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity_Assembler.h"

namespace ifelseambiguity
{

/***********************************************************************
IfElseAmbiguityAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguityAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		switch((IfElseAmbiguityClasses)type)
		{
		case IfElseAmbiguityClasses::BlockStat:
			return new ifelseambiguity::BlockStat();
		case IfElseAmbiguityClasses::DoStat:
			return new ifelseambiguity::DoStat();
		case IfElseAmbiguityClasses::IfContent:
			throw vl::glr::AstInsException(L"Unable to create abstract class \"ifelseambiguity::IfContent\".", vl::glr::AstInsErrorType::UnknownType, type);
		case IfElseAmbiguityClasses::IfContentCandidate:
			return new ifelseambiguity::IfContentCandidate();
		case IfElseAmbiguityClasses::IfContentToResolve:
			return new ifelseambiguity::IfContentToResolve();
		case IfElseAmbiguityClasses::IfStat:
			return new ifelseambiguity::IfStat();
		case IfElseAmbiguityClasses::Module:
			return new ifelseambiguity::Module();
		case IfElseAmbiguityClasses::Stat:
			throw vl::glr::AstInsException(L"Unable to create abstract class \"ifelseambiguity::Stat\".", vl::glr::AstInsErrorType::UnknownType, type);
		default:
			throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
		}
	}

	void IfElseAmbiguityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = IfElseAmbiguityCppFieldName((IfElseAmbiguityFields)field);
		switch((IfElseAmbiguityFields)field)
		{
		case IfElseAmbiguityFields::BlockStat_stats:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity::BlockStat::stats, object, field, value, cppFieldName);
		case IfElseAmbiguityFields::IfContentCandidate_elseBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity::IfContentCandidate::elseBranch, object, field, value, cppFieldName);
		case IfElseAmbiguityFields::IfContentCandidate_thenBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity::IfContentCandidate::thenBranch, object, field, value, cppFieldName);
		case IfElseAmbiguityFields::IfContentToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity::IfContentToResolve::candidates, object, field, value, cppFieldName);
		case IfElseAmbiguityFields::IfStat_content:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity::IfStat::content, object, field, value, cppFieldName);
		case IfElseAmbiguityFields::Module_stat:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity::Module::stat, object, field, value, cppFieldName);
		default:
			if (cppFieldName)
				throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not an object."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
			else
				throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
		}
	}

	void IfElseAmbiguityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token)
	{
		auto cppFieldName = IfElseAmbiguityCppFieldName((IfElseAmbiguityFields)field);
		if (cppFieldName)
			throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not a token."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
		else
			throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
	}

	void IfElseAmbiguityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem)
	{
		auto cppFieldName = IfElseAmbiguityCppFieldName((IfElseAmbiguityFields)field);
		if (cppFieldName)
			throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Field \"") + vl::WString::Unmanaged(cppFieldName) + vl::WString::Unmanaged(L"\" is not an enum item."), vl::glr::AstInsErrorType::ObjectTypeMismatchedToField, field);
		else
			throw vl::glr::AstInsException(L"The field id does not exist.", vl::glr::AstInsErrorType::UnknownField, field);
	}

	const wchar_t* IfElseAmbiguityTypeName(IfElseAmbiguityClasses type)
	{
		const wchar_t* results[] = {
			L"BlockStat",
			L"DoStat",
			L"IfContent",
			L"IfContentCandidate",
			L"IfContentToResolve",
			L"IfStat",
			L"Module",
			L"Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 8 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityCppTypeName(IfElseAmbiguityClasses type)
	{
		const wchar_t* results[] = {
			L"ifelseambiguity::BlockStat",
			L"ifelseambiguity::DoStat",
			L"ifelseambiguity::IfContent",
			L"ifelseambiguity::IfContentCandidate",
			L"ifelseambiguity::IfContentToResolve",
			L"ifelseambiguity::IfStat",
			L"ifelseambiguity::Module",
			L"ifelseambiguity::Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 8 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityFieldName(IfElseAmbiguityFields field)
	{
		const wchar_t* results[] = {
			L"BlockStat::stats",
			L"IfContentCandidate::elseBranch",
			L"IfContentCandidate::thenBranch",
			L"IfContentToResolve::candidates",
			L"IfStat::content",
			L"Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityCppFieldName(IfElseAmbiguityFields field)
	{
		const wchar_t* results[] = {
			L"ifelseambiguity::BlockStat::stats",
			L"ifelseambiguity::IfContentCandidate::elseBranch",
			L"ifelseambiguity::IfContentCandidate::thenBranch",
			L"ifelseambiguity::IfContentToResolve::candidates",
			L"ifelseambiguity::IfStat::content",
			L"ifelseambiguity::Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguityAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = IfElseAmbiguityCppTypeName((IfElseAmbiguityClasses)type);
		switch((IfElseAmbiguityClasses)type)
		{
		case IfElseAmbiguityClasses::IfContent:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguity::IfContent, ifelseambiguity::IfContentToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityClasses::IfContentCandidate:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguity::IfContentCandidate, ifelseambiguity::IfContentToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityClasses::IfContentToResolve:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguity::IfContentToResolve, ifelseambiguity::IfContentToResolve>(type, candidates, cppTypeName);
		default:
			if (cppTypeName)
				throw vl::glr::AstInsException(vl::WString::Unmanaged(L"Type \"") + vl::WString::Unmanaged(cppTypeName) + vl::WString::Unmanaged(L"\" is not configured to allow ambiguity."), vl::glr::AstInsErrorType::UnsupportedAmbiguityType, type);
			else
				throw vl::glr::AstInsException(L"The type id does not exist.", vl::glr::AstInsErrorType::UnknownType, type);
		}
	}
}
