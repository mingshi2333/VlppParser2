/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity2ModuleParser.h"

namespace ifelseambiguity2
{
	void IfElseAmbiguity2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1548; // 13517 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 12;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\xCD\x34\x00\x00\x04\x06\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x0A\x0A\x9A\x0A\x9F\x11\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x0A\xEC\x97\xA3\xC1\xD4\xD3\xD0\x04\x81\xB3\xEE\xDA\xD9\x86\x85\xD7\x84\x0A\x39\xFD\xBB\x8B\x01\xDB\xDD\xE1\xC7\x83\x8D\x02\xEE\xCB\x8E\x06\xE6\xA7\xC9\xD1\xFC\xD8\xE4\xE9\xE6\xE9\xA2\xB5\xE6\xD9",
			"\xE4\xDD\xEC\xEC\xDB\xB5\x8F\x06\xF6\xE3\xED\xEA\xF3\xEB\xE4\xDC\xDF\xFB\xE0\xF6\xED\xF5\xF6\xEB\x94\xF0\xEF\xFC\xF1\x08\xE8\xF5\xEF\x92\x23\xE7\xF5\xF0\xF6\x82\x0A\xF7\x73\x7C\x7C\x7E\x06\x50\x4A\x68\x7D\xF2\x56\x0B\x7E\x7F\x0C\xBD\x72\x40\x06\x01\xAC\x72\x86\x7C\x19\x11\x82\x7C\x7B\x12\x6B\x51\x7C\x66\xEC\x5C\x06\x84\x66\x1D\x1F\x8A\x67\x84\x1C\x97\x86\x89\x89\x28\xA3\x87\x8A\x8A\x29\x9C\x6B\x8A\x8B\x2D\xA5\x6F\x8A\x65\x1E\x22\x80\x8E\x66\x1F\x36\x82\x8D\x8C\xA3\x64\x8C\x8B\x8F\x37\x81\x9B\x8C\x90\x43\x82\x9D\x8F\x8C\x47\xBC\x85\x6C\x08\x3A\x89\x94\x92\x93\x46\x9A\x78\x92\x94\x4A\xAE\x76\x41\x08\x4D\x94\x9F\x92\x96\x51\x96\x9D\x80\x81\x5F\x80\x02\x09\x96\x5E\x8E\x80\x9A\x99\x02\xA1\x9E\x8D\x97\x0A\x63\x04\x9B\x86\x5B\xA5\x97\x99\x40\x24\x2F\x9F\x79\x09\x0B\xA8\x9B\x9A\x65\x27\x36\x93\x81\x9A\x7A\x93\x92\x9C\xA0\x73\x84\xA6\xA0\x7B\x28\x3E\x9A\x9A\xA0\x70\xAC\x98\x81\x95\x0A\x69\x0A\xA1\xA0\x90\x8F\xA1\x9D\xA3\x45\x96\x6A\x0B\xA4\x85\xBB\x90\x95\xA6\x9F\xA1\xAC\x94\xA8\xA3\xA2\xAB\x47\x0A\x9C\x86\xAC\x09\x9E",
			"\x9D\x8C\xA9\x42\x0B\xA9\x9E\xA5\xAB\xAC\x83\xB2\xA5\xAE\xAB\x7F\xAF\x01\xAC\xAE\x8B\x95\xAF\x9E\xAD\xDF\x51\x1C\xA8\x00\x6E\x59\x70\x6F\x55\x2C\x72\x60\x4E\x67\xA9\x7D\x59\xB3\xB2\x7D\x4A\xB3\x40\x6B\x9E\x52\xB2\x40\x60\x57\x56\xB1\x40\xB5\xA0\x5A\xB0\x00\xB6\x7D\x4D\xBE\x67\xB3\x07\xA1\xB3\x54\xB9\xD0\x99\x7E\xB4\xB7\xEA\x8A\x40\xB9\xB5\xAB\x53\x5E\xB7\xBB\xA0\x62\xB0\x68\xBA\x03\x45\xB0\x7B\xB1\xCE\xA3\x43\xBE\xBC\xEE\x93\x56\xBD\x76\xF8\x90\xB5\xC3\xB6\x00\xC9\x44\xBD\xBB\x09\x6C\xB0\x7B\xBF\x57\x43\xC0\x7B\xC1\xC4\x82\xC7\xBA\xBF\xE9\x9D\xB1\xBD\xB6\x01\xDC\xCD\xC1\xC2\x06\x4B\xC0\x7A\xC4\x2C\x54\xCA\xBC\x4B\x24\xE5\xC0\x4A\xB7\xB4\x6B\xB0\xCB\x5F\x2F\xC7\x41\xCD\x40\x22\xE8\xC7\xC7\xCA\x59\xBC\xB3\xBB\x48\x3A\xF7\xB3\x49\xCA\x2A\xD9\x4C\xCB\xCC\x04\x44\xD5\xCC\xC6\x1F\xDE\xC1\xCA\xC5\xC8\x88\xDF\x6D\x5F\xC1\x49\x40\xD1\x47\x3D\xC4\xC3\x4A\xC3\x41\xD4\xD7\xCD\x47\x58\xD9\xD8\x45\xD5\x13\xCE\xD3\x40\xD8\x36\xCD\xD8\xCD\xC6\x0F\xEF\x64\xD1\xD7\x67\xCB\xDA\xD3\xD8\x6B\xC6\xD4\xD0\xD9\x3F\xDB\xD2\xD1\x96\x51",
			"\xC6\x4C\xDA\xD6\x66\xDD\x49\xDD\xBA\x2C\x7F\xD6\xC3\x48\x82\xC1\x4E\xB5\xE0\xC3\x88\xE5\xB9\x98\x34\x28\xD5\xC4\xDA\x43\xDA\x88\xDA\xC8\x12\xFA\xB2\xC6\xB7\x97\xCA\x42\xC6\xC8\x0E\xFA\xBE\xC2\xCB\x92\xFA\xDD\xC6\x41\x60\xFA\xB0\xDA\xB7\xA7\xEA\xDA\xC2\x42\x07\x01\x8D\xE9\xE8\x03\x6F\xE6\x42\xB7\xB2\xF0\xCB\xE2\x40\xDE\x90\xC6\x40\x6E\xB7\xC1\x4C\xEF\xEC\x0A\x7F\xE3\x42\xB7\xC2\xD7\xBD\x43\xE8\xB1\xCE\xEB\x44\x13\x01\xBA\xB0\x87\xE4\xDF\x5E\xB7\x06\xF2\xDF\x5B\x45\x84\xF4\xEF\x62\xC5\xEC\xF5\x01\x4D\x11\x82\xC8\xE2\x5C\xF3\x42\x13\xDF\xCA\x40\x06\xF8\x03\x4F\x15\xF9\x42\xCF\x68\xF1\x40\x14\xEB\xC6\x4E\x86\xFB\x86\xB0\x0E\xE3\xD1\x98\x43\xA1\x4C\xA6\xA3\x5E\xB7\xCA\x7C\x83\x5A\x5F\xFF\x3E\x56\x76\xE0\x6F\x3F\x56\x04\x88\x4E\xC4\x74\x69\x7F\xE8\x7B\x50\x33\x60\x6C\x82\x66\x03\x52\x65\xC3\x40\x83\x58\x60\x65\x79\xA1\x08\x87\x53\xF7\x20\x6B\x02\xD5\x7F\x3B\xE7\x0E\x80\x76\x81\x20\x68\x40\x07\x9F\x3B\xF6\x06\x7F\x3B\xCC\x49\x20\x6C\xF8\x73\x83\x77\x3E\x33\x79\xEF\x29\x71\x21\x2B\x80\x02\x04\x92\x33\x51\xE2\x25\x85",
			"\x50\x1A\x80\x00\xED\x41\x71\x84\x4B\x4E\x57\x4F\x39\x80\x85\x0A\xEF\x3B\x39\x1F\x86\x55\x70\x42\x8C\x76\x42\x28\x8F\x4F\x41\x61\x7E\x80\x7F\x4C\x03\xB0\x39\x81\x86\x1E\x9F\x3E\x3E\x4E\x8C\x3D\xFB\x58\x83\x21\x20\xBB\x6E\x8B\xEF\x2A\x8B\xD3\x3D\x5A\x32\x1A\x82\x22\x8D\x61\x43\x50\x15\xF9\x5C\x7F\xDA\x2E\x89\x20\x73\x88\x4F\xA0\x06\x4B\x8C\x4A\x5A\x36\x87\xA4\x65\x8B\x9F\x0A\x41\x8C\xF9\x27\x7E\x89\x80\x83\x20\x1C\xFA\x8F\x3B\xE7\x64\x88\x4D\xFA\x28\x93\x14\x82\x91\x4D\x0C\x4F\x95\x50\x79\x8C\x85\x42\x09\x96\x79\x25\xBF\x4B\x7E\x97\x86\x50\x21\xA1\x9A\x8B\x17\x94\x90\x4D\x35\x45\x90\x66\x0E\x95\x87\x84\x25\x96\x20\x8B\x9B\x83\x77\x4C\x4A\x94\xCD\x16\x95\x95\x06\x2F\x97\x40\x19\x96\x51\x41\x63\x4D\x96\x92\x20\x94\x2E\x83\x2A\x97\x4E\x95\x8F\x3B\x75\x40\x98\x8D\x43\x5D\x89\x40\x9E\x91\x4C\x26\x09\x72\x7C\x34\x91\x95\x66\x8A\x97\x94\x85\x49\x52\x32\xA3\x3F\x97\x6A\x93\x97\x99\x68\x5B\x53\x36\xB5\x39\x98\x6F\xAB\x70\x9C\x85\x4B\x57\x38\x9B\x21\x9A\x27\xA3\x8B\x20\x50\x8C\x3F\xA0\x30\x5D\x77\x43\x72\x3F\x8A\xCA\x38",
			"\x9A\x3D\x89\x85\x51\x43\x86\x21\x9E\x17\x8F\x3E\xAE\x75\x90\x59\x84\x20\x8E\x20\x9C\x92\x96\x11\xA4\x53\x51\x48\xB9\x92\x9F\x05\xBF\x56\x7C\x31\x90\x01\x83\xB1\x8D\x8E\x1C\x92\x30\x2F\x8E\xA7\xA3\x85\xA6\x57\x3B\x7C\x90\x6C\x3A\xF5\x72\x9A\xCC\x1A\x9D\x8F\x01\x21\xA7\x1B\x90\xA2\x3E\x19\x25\xA2\x33\x92\x55\x9E\x4A\xF8\x8C\xA4\xCC\x0D\x73\x9D\x0A\x22\x9C\x4A\x80\x03\xA7\x6F\x75\xA2\x33\x36\x0F\xA6\x64\x28\x55\x9F\xE9\x49\x23\x94\x1D\xBF\x4C\x0E\x42\xAC\xA0\x85\x2C\x92\x20\x48\xAC\x93\x7B\x3A\x0C\xA9\x8F\x89\x27\x7A\x06\x31\xAA\x42\xFF\x4C\x07\xAA\xB4\x51\x22\xAA\x67\x9B\x7B\x3E\x08\x78\x34\x6A\x99\x94\xB7\x8B\xA7\x48\xEC\x31\x09\xB2\x85\x54\x9E\x68\xBF\x9A\x58\xFF\x44\x08\xB7\xA4\xA6\x89\x69\xB4\x67\x4F\x92\x37\x08\xBB\xAC\x3E\xA5\x4E\x82\x9A\x40\x1B\x0B\xAE\xCB\x0A\x0E\xAB\x83\x41\x44\xDA\x72\x95\x64\xFA\x69\x5B\x80\x28\x30\xB1\x47\x7A\x50\x26\xCA\xBB\x7E\x71\x16\x86\x25\x66\xED\x69\x62\xFF\x5B\x21\x72\x4E\x90\x24\x68\xA1\x94\xB3\xD1\x83\x9A\x20\xA5\xAA\x7A\x67\xFE\xAF\x25\x2E\x99\x25\x82\x1B\x22\x64\x65\xA2",
			"\x60\x27\xA9\x5E\x26\xB6\x19\x32\x62\x63\x81\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat \"else\" Stat >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat \"else\" @ Stat >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat \"else\" Stat @ >",
			L"[15][IfContent]< \"if\" \"cond\" \"then\" Stat @ \"else\" Stat >",
			L"[16][IfContent]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[17][IfContent]< \"if\" \"cond\" @ \"then\" Stat \"else\" Stat >",
			L"[18][IfContent]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[19][IfContent]< \"if\" @ \"cond\" \"then\" Stat \"else\" Stat >",
			L"[20][IfContent]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]< IfContent @ >",
			L"[24][Stat]<< !Block @ >>",
			L"[25][Stat]<< !Do @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguity2Tokens, ModuleParserStates, IfElseAmbiguity2AstInsReceiver>(&IfElseAmbiguity2TokenDeleter, &IfElseAmbiguity2LexerData, &IfElseAmbiguity2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
