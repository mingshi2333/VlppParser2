/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity2ModuleParser.h"

namespace ifelseambiguity2
{
	void IfElseAmbiguity2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1376; // 11477 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 96;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\xD5\x2C\x00\x00\x58\x05\x00\x00\x09\x00\x01\x82\x80\x06\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x95\x0A\x9A\x0A\x87\x1D\x01\x84\xFF\x19\x9A\x99\x8A\x80\x03\x8D\x8D\x1D\x9F\x9A\x81\x92\x97\x7C\x92\x91\x27\x9F\xA9\x80\x9A\x85\x92\x93\x96\x25\x9D\x9D\x97\x88\x89\x98\x98\x94\x37\xAA\xB9\x8C\x95\x98\x9D\x9E\x9D\x3F\xBC\x86\x8E\x9B\x93\x93\x9C\xA3\x41\xC8\x83\xB6\x99\x84\x9A\x82\xA7\x03\xC4\x87\xBC\x83\xAF\x95\xA4\xAA\x57\xD6\x8B\xBE\x9B\xA8\xA1\xAE\xA1\x51\xCC\x9F\xAA\xA1\xB4\xAD\xB2\xAF\x67\xE0\x82\x92\xA9\x82\x02\x84\xA8\x6B\xE2\xA9\xA4\xB1\xBE\xB1\xBA\xB4\x77\xEA\x81\x8C\xB3\xB0\xAD\xBE\xAD\x03\x83\x2F\xB5\xA5\xA6\xBF\xB8\xC3\x79\xF4\xBB\xB2\xB9\xC0\xC7\xC4\xBB\x8F\xF8\x91\xDA\xBE\x8C\xC7\xC8\xC5\x95\x90\xD9\xD2\xCB\xCC\xC8\xBF\xC3\x80\x8D\xE1\xD7\xCE\xC5\xCC\xCD\xCF\xA2\x9D\x8C\x8D\xAA\x85\x03\xC1\xAC\x1D\x88\x8F\xA4\xC4\xD8\xDA\x85\x03\xAF\xFF\x85\xC3\xD6\xD5\xD0\x05\xDC\x03\x8E\xB3\xD6\xD9\x82\x04\xE1\xD4\xB5\xBA\xCA\x8B\x07\xE4\xD0\xDE\x06\xCD\xBD\xFC\xC8\xDE\xE3\xDE\xEB\xE4\xA0\xD7\xC4\xEA",
			"\xEB\xE9\xEC\xEC\xE4\xDD\x82\x8D\x11\xE4\xEA\xEA\xEC\xEE\xE8\xDE\xE1\xF5\xEF\xEC\xF7\xF4\xF3\xED\xF0\xEF\xE5\xF4\xFE\xC8\x00\x07\xE4\xF6\xE5\xF0\x8C\xD3\xFA\xFC\xFB\x10\x39\x7A\x65\x04\x02\x9C\x65\x7E\x66\x07\x86\x8F\x7C\x82\x0B\x8A\x8C\x83\x83\x0E\x91\x8E\x65\x83\x13\x9A\x62\x05\x81\x15\x92\x87\x68\x85\x1B\x90\x89\x87\x87\x98\x53\x08\x85\x87\x1A\xA5\x69\x80\x88\x26\x9C\x89\x8A\x66\x14\x23\x8B\x89\x89\xD3\x6A\x81\x8E\x87\x24\xA8\x83\x8C\x8C\xE7\x6A\x79\x78\x78\x3B\xAE\x7D\x8C\x00\x12\x7D\x7F\x8D\x79\x16\x2E\x87\x8E\x8D\x1D\x57\x06\x91\x47\x18\x0B\x91\x7F\x89\x35\x91\x9F\x88\x92\x4F\xB2\x89\x8C\x8F\x3A\x99\x98\x97\x96\x3E\x83\x49\x06\x93\xEF\x54\x42\x93\x40\x1B\x20\x93\x92\x95\x55\xB4\x83\x96\x94\x47\xAC\x9D\x44\x07\x66\x9A\x91\x41\x07\x71\x9C\x92\x7E\x41\x1E\x35\x9D\x96\x9D\x50\xAB\x9E\x9D\x9B\x7F\x97\x9B\x9F\xA0\x00\x1F\x0A\x9F\x9D\x72\x88\xAC\x9C\x9A\xFE\x6A\x9C\x6C\x08\x87\xBD\x90\xA3\xA4\x82\x8A\xA4\xA2\xA4\x1D\x61\x01\xA4\xA3\x67\x8E\xA5\xA4\xA6\x69\xB8\x8A\x42\x08\x9B\x9A\x63\x09\xA9\xA2\x89\x44\x08\xAA",
			"\x54\x8D\xA9\xA9\xA7\xAF\x89\xA0\xA9\x42\x25\x2C\xAE\x99\xA8\xAD\xB0\xA9\xAD\xA2\x45\x0A\x4E\x5B\x98\xA2\x72\x60\x6A\x4B\xBF\xB2\x40\x6B\x6A\x7F\x44\xB6\xB3\x5F\xC5\x83\x4E\x69\x56\xC8\x83\xB5\x49\xB3\x02\x42\x60\xB5\x55\xCA\x80\xBE\x71\xB4\xA2\x59\xBB\xB2\x73\xD4\x81\x4F\xB3\x5F\xDC\x8E\x7E\xB5\x60\x55\x65\xB2\x77\xB9\x02\x70\x5E\x72\xB0\xDD\x93\xBA\x42\xB5\xE4\x98\xB2\xBF\xB7\xE0\xAD\x69\xBA\xBD\x22\x61\xB0\x00\xBD\xC7\xBC\xBF\x46\xBF\xEE\x92\x70\xBE\xB9\x25\x6A\xBE\x48\xBB\x01\x40\xC2\x6A\xC2\x0B\xFD\xB8\xBD\xBE\x09\x63\xB1\xC1\x56\x0C\xFF\xBB\xBC\xC6\xF7\x83\x7F\x5F\xC1\xEB\xA5\x46\xC5\xBC\x22\x60\xC1\xC6\x48\x23\xC8\xC2\x48\xC4\x27\xDA\x4E\xBF\x6E\xFE\xA9\xC2\x74\xCB\x2D\xFF\x3E\xBE\xC3\xDB\x82\xCB\x44\xC1\x55\x46\x79\x40\xCD\x1B\x66\xC5\xCD\x46\x32\xC3\xD9\x46\xD0\x43\xC5\xD6\xD0\xD2\x35\xFE\xBC\xD3\x46\x40\xE7\xCF\xC9\x55\x4E\xD4\xDA\xBF\xB5\x1C\xD2\xC9\x40\xCE\xD2\x55\xD8\xD5\xB2\x1D\xC3\x45\xC2\x4B\x3E\xC6\x4A\xD1\xC9\x3A\xDA\x45\xDB\xB7\x64\xD3\xC2\x77\xDA\x02\x7E\xBD\xDA\xB6\xD2\x68\x0E\xD9\xC1\x1D",
			"\x77\xCE\xDA\xBA\x32\xC5\xC2\xCE\xDE\x15\xCA\x4A\xB8\xC8\x05\xE0\xC0\xE2\x41\x20\xEA\xBC\xD4\x6E\x74\xCC\xE6\x43\xE1\x03\x4E\xE3\x42\xBA\x05\xD0\xEB\x42\x42\xBF\x74\xD9\xE7\xE3\xF3\x98\xE2\xE1\x43\x9F\xC9\x42\xE6\xDB\x03\x41\x11\x75\xC1\x4D\x93\xCC\xD5\x79\x5C\xCA\x94\xEB\x7B\xFE\xAD\x8A\xE9\x7C\x1D\x5F\x93\xEF\x7B\xEA\xA3\xEF\xE8\x00\x42\x11\x7A\xB8\x74\xBB\xC3\x43\x12\xEF\x0A\x57\x81\xF2\x40\x44\x04\xF9\x40\x9C\xC7\xC4\xA6\x0A\xDB\xAB\xF6\x74\xEB\xD8\x9C\x83\x4C\xCF\x7B\x33\x76\xA5\x68\xD7\x72\xD2\xF8\xAF\xAD\x3F\xCA\x4F\xD0\x66\x79\xDA\xFC\x6C\xC8\xE3\xE5\x6D\x44\xF7\xB4\xFE\xA2\xFA\xE7\xD8\xDF\xF1\xA3\xFB\x09\x78\x71\xFD\xE0\x5B\xF1\x76\xE5\x40\x20\xD1\xFA\x65\x47\x9B\x76\x79\x7C\x7F\x67\x36\xFA\x7F\x45\x23\x70\x61\x21\xF7\x1A\x3A\x76\x00\x3E\x5D\x81\x01\x96\x4F\xA7\x55\x72\x21\x06\xB6\x7F\x80\x0A\x20\x7A\x41\x7E\x7C\x32\xE1\x28\x5A\x74\x9D\x77\x7E\x41\x7C\x3C\x73\xF7\x1A\x82\x80\x09\x31\x82\xB8\x6D\x79\x20\x02\x74\x6B\x56\x06\x3E\x82\x40\x17\x89\x51\x8E\x06\x7E\x63\xB2\x56\x3C\x73\x09\x29\x7C\xDE\x1D\x22",
			"\x44\x6D\x31\x3C\x0D\xF1\x6B\x38\x85\x03\x8C\x50\x1D\x21\x4B\x06\xF1\x31\x41\xFC\x49\x23\x87\x4B\x82\x87\x40\x29\x75\x85\x1F\x40\x8D\x8A\x03\x27\x86\x40\x09\x86\x52\x99\x22\x48\x87\x8B\x5A\x33\x78\x4F\x8C\x84\x5D\x60\x7E\x20\x47\x80\x03\x18\x98\x8E\x55\x5D\x42\x24\x84\x03\x29\x8D\x79\x1D\x25\x4D\x20\xAF\x3A\x89\x62\x6A\x22\x0B\x88\x75\x8D\x81\x34\x4E\x8E\x3F\x45\x48\x20\x83\x2B\x8F\x38\xBD\x8A\x20\x86\x4E\x8B\x8F\x54\x8F\x82\x83\x05\x95\x5A\x87\x81\x20\xA9\x03\x96\x4F\x3A\x98\x8A\x20\x37\x83\x21\x13\xEC\x86\x21\x55\x6F\x84\x82\x01\x37\x88\x21\x91\x9D\x8A\x18\x83\x22\x76\x06\x3B\x91\x0D\x8A\x25\x56\x4A\x97\x56\x3E\xA8\x83\x22\x28\x92\x81\x3F\x13\x07\x50\x8F\x07\x24\x96\xDD\x2E\x9D\x8B\x3F\xA0\x89\x20\xB8\x81\x22\x1C\xDE\x79\x20\x15\x21\x87\x47\x79\x5C\x95\x30\x9A\x62\x8A\x81\x2D\x06\x7D\xEF\x30\x50\xDD\x2E\x76\x20\x41\x9C\x93\x20\x2F\x10\x9A\x19\xA5\x3C\x90\x81\x16\x9B\x95\x09\x31\x06\x36\xB9\x8A\x32\xDB\x55\x9C\x94\x33\x03\x9D\x18\x9C\x3F\x8B\x81\x3D\x84\x74\x35\x07\x99\xA2\x1A\x5C\x97\x76\xB3\x84\x94\x38\x01",
			"\x77\x8F\x27\x5A\x91\x81\x36\x9D\x61\xA4\x9C\x06\x3C\xF6\x4F\x78\x5E\x8C\x7E\x20\x96\x80\x9E\x41\x3F\x0A\x9D\x57\x9A\x36\x97\x6C\x72\x7B\xC2\x4D\x78\x5E\xEA\x68\x26\xA2\x22\x38\x6D\xF6\x77\x64\x75\x05\xAA\x26\xA3\x03\x7D\xA2\x48\xEE\x63\x6B\x81\x95\x3C\x83\x1F\x3C\x68\xDE\x2A\xAB\x7D\xE8\x0C\x9B\x62\x51\x7C\x21\x4C\x99\x2A\x5D\x97\x54\x72\x35\xA4\x67\x6E\x4A\x3A\xAF\x22\x99\x6F\x70",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfThenStat",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfThenStat] BEGIN ",
			L"[10][IfThenStat] END [ENDING]",
			L"[11][IfThenStat]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][IfThenStat]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][IfThenStat]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][IfThenStat]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][IfContent] BEGIN ",
			L"[16][IfContent] END [ENDING]",
			L"[17][IfContent]<< !IfThenStat \"else\" @ Stat >>",
			L"[18][IfContent]<< !IfThenStat \"else\" Stat @ >>",
			L"[19][IfContent]<< !IfThenStat @ \"else\" Stat >>",
			L"[20][IfContent]<< !IfThenStat @ >>",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]< IfContent @ >",
			L"[24][Stat]<< !Block @ >>",
			L"[25][Stat]<< !Do @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguity2Tokens, ModuleParserStates, IfElseAmbiguity2AstInsReceiver>(&IfElseAmbiguity2TokenDeleter, &IfElseAmbiguity2LexerData, &IfElseAmbiguity2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
