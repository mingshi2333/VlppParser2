/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity2ModuleParser.h"

namespace ifelseambiguity2
{
	void IfElseAmbiguity2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1362; // 11477 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 82;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\xD5\x2C\x00\x00\x4A\x05\x00\x00\x09\x00\x01\x82\x80\x06\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x95\x0A\x9A\x0A\x87\x1D\x01\x84\xFF\x19\x9A\x99\x8A\x80\x03\x8D\x8D\x1D\x9F\x9A\x81\x92\x97\x7C\x92\x91\x27\x9F\xA9\x80\x9A\x85\x92\x93\x96\x25\x9D\x9D\x97\x88\x89\x98\x98\x94\x37\xAA\xB9\x8C\x95\x98\x9D\x9E\x9D\x3F\xBC\x86\x8E\x9B\x93\x93\x9C\xA3\x41\xC8\x83\xB6\x99\x84\x9A\x82\xA7\x03\xC4\x87\xBC\x83\xAF\x95\xA4\xAA\x57\xD6\x8B\xBE\x9B\xA8\xA1\xAE\xA1\x51\xCC\x9F\xAA\xA1\xB4\xAD\xB2\xAF\x67\xE0\x82\x92\xA9\x82\x02\x84\xA8\x6B\xE2\xA9\xA4\xB1\xBE\xB1\xBA\xB4\x77\xEA\x81\x8C\xB3\xB0\xAD\xBE\xAD\x03\x83\x2F\xB5\xA5\xA6\xBF\xB8\xC3\x79\xF4\xBB\xB2\xB9\xC0\xC7\xC4\xBB\x8F\xF8\x91\xDA\xBE\x8C\xC7\xC8\xC5\x95\x90\xD9\xD2\xCB\xCC\xC8\xBF\xC3\x80\x8D\xE1\xD7\xCE\xC5\xCC\xCD\xCF\xA2\x9D\x8C\x8D\xAA\x85\x03\xC1\xAC\x1D\x88\x8F\xA4\xC4\xD8\xDA\x85\x03\xAF\xFF\x85\xC3\xD6\xD5\xD0\x05\xDC\x03\x8E\xB3\xD6\xD9\x82\x04\xE1\xD4\xB5\xBA\xCA\x8B\x07\xE4\xD0\xDE\x06\xCD\xBD\xFC\xC8\xDE\xE3\xDE\xEB\xE4\xA0\xD7\xC4\xEA",
			"\xEB\xE9\xEC\xEC\xE4\xDD\x82\x8D\x11\xE4\xEA\xEA\xEC\xEE\xE8\xDE\xE1\xF5\xEF\xEC\xF7\xF4\xF3\xED\xF0\xEF\xE5\xF4\xFE\xC8\x00\x07\xE4\xF6\xE5\xF0\x8C\xD3\xFA\xFC\xFB\x10\x39\x7A\x65\x04\x02\x9C\x65\x7E\x66\x07\x86\x8F\x7C\x82\x0B\x8A\x8C\x83\x83\x0E\x91\x8E\x65\x83\x13\x9A\x62\x05\x81\x15\x92\x87\x68\x85\x1B\x90\x89\x87\x87\x98\x53\x08\x85\x87\x1A\xA5\x69\x80\x88\x26\x9C\x89\x8A\x66\x14\x23\x8B\x89\x89\xD3\x6A\x81\x8E\x87\x24\xA8\x83\x8C\x8C\xE7\x6A\x79\x78\x78\x3B\xAE\x7D\x8C\x00\x12\x7D\x7F\x8D\x79\x16\x2E\x87\x8E\x8D\x1D\x57\x06\x91\x47\x18\x0B\x91\x7F\x89\x35\x91\x9F\x88\x92\x4F\xB2\x89\x8C\x8F\x3A\x99\x98\x97\x96\x3E\x83\x49\x06\x93\xEF\x54\x42\x93\x40\x1B\x20\x93\x92\x95\x55\xB4\x83\x96\x94\x47\xAC\x9D\x44\x07\x66\x9A\x91\x41\x07\x71\x9C\x92\x7E\x41\x1E\x35\x9D\x96\x9D\x50\xAB\x9E\x9D\x9B\x7F\x97\x9B\x9F\xA0\x00\x1F\x0A\x9F\x9D\x72\x88\xAC\x9C\x9A\xFE\x6A\x9C\x6C\x08\x87\xBD\x90\xA3\xA4\x82\x8A\xA4\xA2\xA4\x1D\x61\x01\xA4\xA3\x67\x8E\xA5\xA4\xA6\x69\xB8\x8A\x42\x08\x9B\x9A\x63\x09\xA9\xA2\x89\x44\x08\xAA",
			"\x54\x8D\xA9\xA9\xA7\xAF\x89\xA0\xA9\x42\x25\x2C\xAE\x99\xA8\xAD\xB0\xA9\xAD\xA2\x45\x0A\x4E\x5B\x98\xA2\x6E\x69\x56\x4B\xBF\xB2\x40\x6A\x60\xC3\xA5\x45\xB2\xB1\xCE\x4B\xB2\x42\xB0\x7F\x48\xBF\x5C\xB1\x0A\x52\xB7\xB1\x55\xD4\x80\xBE\x72\xB5\xA2\x59\xBC\xB1\xB3\xAD\x55\x5C\xB6\x73\xDE\x81\x62\xB8\xB6\xCA\x86\x90\xB4\x68\xE5\x82\x43\xBA\x74\xEF\xAE\x4D\xBA\xB1\xF3\x80\x0B\xBA\x68\xF1\xB2\xB2\x4A\xB3\x01\x79\xB2\x4A\xBF\xFA\x9A\x4C\xBC\x00\x70\x4E\x77\xBC\xB9\x25\x40\xC1\xC3\x3F\x03\xCA\xCA\x46\xC3\xFA\x83\xCB\x6F\xC0\x07\xF0\xB8\xBB\xBE\xD5\xA7\xB9\xB0\xC6\xDA\x92\x75\xC7\xC2\x1B\x6B\x63\xB5\x49\x1F\xE0\xC9\x46\xC8\xEC\x89\xC7\xC7\x47\x12\xD5\x54\xC6\xC6\x23\xDC\xC6\x40\xC4\xFF\x34\xC5\xBD\xC1\xD2\x42\x73\x40\xCA\xC1\xAB\xC1\xCA\xCF\x1A\x65\xC6\xC8\xCF\x08\xE2\x42\xD0\xC8\x03\xF2\x67\xB7\xC6\x2C\xDF\xB2\x69\xD2\x2E\xE1\xB9\x56\xCD\xE9\x89\x44\xCC\xD4\x53\xC0\xD9\x47\xC0\x38\xEE\x4A\xCF\xB3\x55\x47\xDB\xC3\xD7\xF4\xA5\x44\xDA\x4C\x5E\xFE\xA5\x57\xD9\x5D\xE5\x48\x0A\xD3\x01\x78\xCD\x45\xC3\x70\xC0\x04\xD2\xBD\xD1",
			"\x55\xC4\xDD\x42\x15\xF7\xDA\xD2\x40\x38\xFF\xD1\x43\xDE\x06\x42\xE6\xDD\xC6\x09\x78\x6D\xC6\xE2\x06\x44\xE3\x40\xE3\x3B\xD1\x7E\xE3\x42\x0A\x7F\x6D\xC6\xE5\x8D\xC8\xE6\x40\xE6\x91\xC9\x47\xDB\xDD\x90\xF5\xD3\x41\x10\xD1\x78\xCD\x90\xDC\x34\xDD\x4F\xBA\x92\xA2\xEF\x73\xC1\x8B\xA8\xF1\x7D\x47\x97\xB1\xEF\x70\xE9\xEB\x09\x42\x11\x77\xDD\xD0\x78\xE3\x43\x10\xBB\xCA\x47\x86\xEF\x02\x44\x11\xF1\x42\x70\x84\xF4\xA2\x09\x75\xE9\xEA\xF1\xDC\xB8\x98\x6C\xD6\xEC\xA5\xD1\xF5\x6B\xBB\x03\xE5\x7F\xA4\xA7\x9D\xC5\xE4\xF5\x5B\xB6\xA5\x66\xE2\xE1\xDA\xDA\xE3\x41\xF6\xF6\x73\xDA\x42\xE1\x9C\xF6\x9B\xF6\xA7\xEB\xCA\x48\x7F\x7B\x1D\x55\xCE\xF0\xF8\x56\xF1\xF9\xFC\xFD\x95\xEA\xDF\x7A\xDE\xB7\x3A\x7F\x8F\x1D\x26\x38\xFC\x7F\x41\x74\x83\x61\x81\x42\x6D\x74\x51\xF7\x71\x52\x20\x08\x97\x3F\xF7\x06\x2D\x77\x99\x71\x3F\x6C\xEF\x51\x83\xFD\x4E\x6C\x3F\xCC\x6F\x3D\x82\xE7\x7D\x7C\xDF\x13\x83\x20\x02\x5D\x63\x56\x06\x27\x6F\xFC\x03\x82\x79\xF0\x7C\x34\x39\x09\x24\x7D\xFA\x0A\x22\x44\x03\x89\x53\x85\x21\x89\x20\x0C\x86\x28\x86\xF7\x51\x26",
			"\x7C\x76\x41\x43\xFE\x06\x2B\x86\x73\x7C\x79\x21\xA7\x7E\x83\x8F\x35\x8A\x89\x81\x20\x82\x20\x05\x8C\x85\x42\x62\x43\x38\x5D\x58\x33\x3C\x3A\x84\x87\xA2\x70\x79\x21\x1E\x81\x20\x8B\x52\x96\x89\xA0\x0A\x2D\x83\x81\x1E\x8E\x52\x32\x25\x4E\x0D\xF6\x41\x49\x2A\xA5\x82\x80\x89\x5D\x20\x9D\x6B\x84\x51\x22\x74\x88\x00\x26\x9C\x86\x16\x81\x26\x51\x21\x89\x51\x89\x46\x86\x21\x1E\x81\x91\x8F\x51\x7E\x7F\x47\x6A\x8D\x8A\x40\x43\x76\x20\x21\xA1\x8B\x20\xAB\x47\x84\xF7\x02\x2C\x89\x37\x87\x8A\x8C\x94\x4A\x20\xEC\x0D\x9B\x8E\x00\x35\x57\x8E\x28\x83\x23\x26\x83\x25\x92\x1F\xAF\x3F\x04\x87\x4D\x8F\x40\x32\x8A\x33\x8E\x2F\x68\x94\xF6\x33\x8E\x1B\x82\x2A\x94\x81\x27\x8D\x7C\x09\x2A\x04\x10\x84\x59\x4F\x3B\xB5\x95\x5F\x9D\x8D\x07\x21\x89\x50\x53\x8E\x6C\x76\x20\x76\x8F\x92\x40\x2F\x03\x99\x2D\x9C\x30\x90\x02\x29\x99\x21\x89\x21\x07\x66\x97\x56\x3E\xB4\x68\x99\x27\xB3\x06\x9A\x34\xA5\x3C\x8A\xAB\x9D\x91\x0D\x3B\x98\x8C\x4D\x77\x88\x9C\xB6\x9D\x90\x0E\x0A\x27\x6F\xF2\x27\x56\x8F\x02\x28\x9C\x30\x97\x93\x20\x1E\x24\x9D\x3C\xCC\x77",
			"\x8D\xF2\x06\x29\x91\x69\x86\x27\x07\xDD\x81\x96\x40\x32\x9F\x5A\xED\x72\x5F\x79\xDF\x4D\x6C\x4A\x0A\xA2\x24\xB9\x73\x22\x74\x0E\xA1\xA1\x4C\x68\x75\x6A\xB8\x6D\x65\x9B\x32\x37\xA0\x3C\xD5\x36\x67\x77\x72\x6E\xA3\xAA\x71\x38\x00\x6F\x52\x27\x76\xB1\x26\xA4\x25\x37\x6E\xC4\x77\x62\x6F\xBB\x72\x22\x6C\x23\x30\xA5\xD0\x08\xA0\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfThenStat",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfThenStat] BEGIN ",
			L"[10][IfThenStat] END [ENDING]",
			L"[11][IfThenStat]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][IfThenStat]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][IfThenStat]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][IfThenStat]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][IfContent] BEGIN ",
			L"[16][IfContent] END [ENDING]",
			L"[17][IfContent]<< !IfThenStat \"else\" @ Stat >>",
			L"[18][IfContent]<< !IfThenStat \"else\" Stat @ >>",
			L"[19][IfContent]<< !IfThenStat @ \"else\" Stat >>",
			L"[20][IfContent]<< !IfThenStat @ >>",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]< IfContent @ >",
			L"[24][Stat]<< !Block @ >>",
			L"[25][Stat]<< !Do @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguity2Tokens, ModuleParserStates, IfElseAmbiguity2AstInsReceiver>(&IfElseAmbiguity2TokenDeleter, &IfElseAmbiguity2LexerData, &IfElseAmbiguity2ModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(IfElseAmbiguity2TypeName((IfElseAmbiguity2Classes)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	}
}
