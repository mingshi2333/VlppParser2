/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity2ModuleParser.h"

namespace ifelseambiguity2
{
	void IfElseAmbiguity2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1567; // 13517 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 31;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\xCD\x34\x00\x00\x17\x06\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x0A\x0A\x9A\x0A\x9F\x11\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x0A\xEC\x97\xA3\xC1\xD4\xD3\xD0\x04\x81\xB3\xEE\xDA\xD9\x86\x85\xD7\x84\x0A\x39\xFD\xBB\x8B\x01\xDB\xDD\xE1\xC7\x83\x8D\x02\xEE\xCB\x8E\x06\xE6\xA7\xC9\xD1\xFC\xD8\xE4\xE9\xE6\xE9\xA2\xB5\xE6\xD9",
			"\xE4\xDD\xEC\xEC\xDB\xB5\x8F\x06\xF6\xE3\xED\xEA\xF3\xEB\xE4\xDC\xDF\xFB\xE0\xF6\xED\xF5\xF6\xEB\x94\xF0\xEF\xFC\xF1\x08\xE8\xF5\xEF\x92\x23\xE7\xF5\xF0\xF6\x82\x0A\xF7\x73\x7C\x7C\x7E\x06\x50\x4A\x68\x7D\xF2\x56\x0B\x7E\x7F\x0C\xBD\x72\x40\x06\x01\xAC\x72\x86\x7C\x19\x11\x82\x7C\x7B\x12\x6B\x51\x7C\x66\xEC\x5C\x06\x84\x66\x1D\x1F\x8A\x67\x84\x1C\x97\x86\x89\x89\x28\xA3\x87\x8A\x8A\x29\x9C\x6B\x8A\x8B\x2D\xA5\x6F\x8A\x65\x1E\x22\x80\x8E\x66\x1F\x36\x82\x8D\x8C\xA3\x64\x8C\x8B\x8F\x37\x81\x9B\x8C\x90\x43\x82\x9D\x8F\x8C\x47\xBC\x85\x6C\x08\x3A\x89\x94\x92\x93\x46\x9A\x78\x92\x94\x4A\xAE\x76\x41\x08\x4D\x94\x9F\x92\x96\x51\x96\x9D\x80\x81\x5F\x80\x02\x09\x96\x5E\x8E\x80\x9A\x99\x02\xA1\x9E\x8D\x97\x0A\x63\x04\x9B\x86\x5B\xA5\x97\x99\x40\x24\x2F\x9F\x79\x09\x0B\xA8\x9B\x9A\x65\x27\x36\x93\x81\x9A\x7A\x93\x92\x9C\xA0\x73\x84\xA6\xA0\x7B\x28\x3E\x9A\x9A\xA0\x70\xAC\x98\x81\x95\x0A\x69\x0A\xA1\xA0\x90\x8F\xA1\x9D\xA3\x45\x96\x6A\x0B\xA4\x85\xBB\x90\x95\xA6\x9F\xA1\xAC\x94\xA8\xA3\xA2\xAB\x47\x0A\x9C\x86\xAC\x09\x9E",
			"\x9D\x8C\xA9\x42\x0B\xA9\x9E\xA5\xAB\xAC\x83\xB2\xA5\xAE\xAB\x7F\xAF\x01\xAC\xAE\x8B\x95\xAF\x9E\xAD\xDF\x51\x1C\xA8\x00\x6E\x59\x70\x6F\x55\x2C\x72\x60\x4E\x67\xA9\x7D\x59\xB3\xB2\x7D\x4A\xB3\x40\x6B\x9E\x52\xB2\x40\x60\x57\x56\xB1\x40\xB5\xA0\x5A\xB0\x00\xB6\x7D\x4D\xBE\x67\xB3\x07\xA1\xB3\x54\xB9\xD0\x99\x7E\xB4\xB7\xEA\x8A\x40\xB9\xB5\xAB\x53\x5E\xB7\xBB\xA0\x62\xB0\x68\xBA\x03\x45\xB0\x7B\xB1\xCE\xA3\x43\xBE\xBC\xEE\x93\x56\xBD\x76\xF8\x90\xB5\xC3\xB6\x00\xC9\x44\xBD\xBB\x09\x6C\xB0\x7B\xBF\x57\x43\xC0\x7B\xC1\xC4\x82\xC7\xBA\xBF\xE9\x9D\xB1\xBD\xB6\x01\xDC\xCD\xC1\xC2\x06\x4B\xC0\x7A\xC4\x2C\x54\xCA\xBC\x4B\x24\xE5\xC0\x4A\xB7\xB4\x6B\xB0\xCB\x5F\x2F\xC7\x41\xCD\x40\x22\xE8\xC7\xC7\xCA\x59\xBC\xB3\xBB\x48\x3A\xF7\xB3\x49\xCA\x2A\xD9\x4C\xCB\xCC\x04\x44\xD5\xCC\xC6\x1F\xDE\xC1\xCA\xC5\xC8\x88\xDF\x6D\x5F\x3D\xC4\xCC\xCF\xCD\x1D\x51\xD3\xC6\xD3\x03\x56\xD6\xCD\xD3\x38\xD9\xCF\xC3\x6B\x44\xCE\xC4\xC7\xD1\x5D\xC6\x4A\xD4\xD6\x32\xCA\xD0\xCE\xDA\x02\x67\xD0\x48\xD0\x41\xD7\x4E\xB7\xC9\x53\xDC\xDD\x44\x6E\x5E",
			"\xEC\x42\xD9\xDC\x18\x78\xD6\x40\xDC\x19\x7B\xDC\xDF\x3F\x7E\xE9\xBC\x49\xE1\x02\x5E\xB7\xE3\xB0\x8B\xE5\xBE\x64\xE2\x08\xEF\x74\x0E\xD7\x15\xDE\xD3\xD2\x86\x5E\xE2\xC2\xC6\xBE\x12\xDE\xBD\xE6\x42\x12\xE2\xCE\xC2\xBE\x0E\xEE\xC8\xE6\x41\x0E\xE2\xC6\xD6\xBE\x56\xDE\xBD\xE8\xD8\x0A\xCA\x47\x01\x80\xB3\xE7\xE3\x41\xED\x06\x5E\xB8\xEF\xDA\x4F\xC3\x4E\xB4\xC4\x06\x50\xE5\xE5\xF0\xC3\x82\xFE\xB6\xF0\x22\xFE\x6C\xEF\xED\x94\xDB\x48\x11\x80\xFA\x90\x89\xE6\x42\x49\x01\x8E\xB7\x05\xCD\xCA\x4A\x11\x80\x1B\x55\x83\xF5\x42\x4B\x01\x82\xCB\xEE\xD9\xC1\x4C\x12\xF8\x0A\x62\x75\xFB\x40\x4D\x28\xF9\x40\x04\xEB\xC3\x4E\x12\xFB\x06\x4F\x71\xFD\x40\x4F\x34\xF3\x42\x87\xF7\xC0\x00\x15\x80\x30\x14\x70\xD9\x1A\x33\x51\x98\x18\x53\x34\x73\x7F\x3B\xA0\x7A\x54\x6E\x5F\x4B\x79\x71\x0A\x87\x80\xAD\x5F\x32\x62\xB7\x44\x87\x3B\x09\x96\x52\x64\x56\x66\x82\xC9\x03\x52\x64\x8A\x72\x3F\x46\x2E\x7A\x20\xE1\x6C\x3F\x56\x0E\x88\x4E\xD5\x13\x01\x83\xF7\x25\x70\x83\xC3\x56\x68\x80\x6F\x33\x50\xF2\x41\x21\x84\x98\x3F\x71\x42\x56\x63\x80\x0F\x9F\x3A",
			"\x79\x10\x8F\x3F\xEB\x09\x26\x86\x00\x1D\x86\x32\x83\x45\x3A\xED\x68\x46\x78\xD9\x65\x85\x85\xBF\x5C\x54\x9A\x45\x8C\x84\x1A\x9F\x3B\x39\x4B\x85\x51\x70\x59\x80\x01\x22\xB3\x87\x4F\x83\x4A\x7D\xEE\x5F\x3C\x01\x61\x45\x8D\x87\x48\x9F\x3A\x7D\x5C\x8C\x3C\xFB\x63\x89\x21\xC2\x62\x73\x05\xEF\x35\x8B\xDE\x54\x52\x33\x40\x81\x21\x1D\xE1\x43\x51\x2F\xB9\x5A\x82\x1B\x39\x8C\x00\x7E\x88\x4D\x41\x46\x46\x8E\xAD\x58\x32\x12\xE6\x60\x8B\x30\x4A\x44\x8D\xF2\x30\x7C\x17\x8B\x93\x21\x3D\x85\x97\x3B\xD2\x6F\x8F\x9F\x7A\x33\x92\x85\x04\x95\x50\x83\x59\x42\x26\xE1\x4F\x92\x00\x1E\x5C\x92\xD7\x4D\x90\x9A\x7C\x73\x94\x34\x4F\x95\x95\x01\x25\x8F\x0E\xAA\x95\x51\x1A\x50\x90\x33\x99\x9E\x76\x42\x32\x96\x20\x4B\xA0\x97\x3B\x4C\x57\x96\x66\x22\x9A\x97\x84\x3C\x93\x20\xA5\x87\x87\x77\x63\x42\x98\xC9\x2C\x95\x98\x06\x27\x99\x2A\xD6\x8F\x3D\x3A\x4D\x9C\x46\xC3\x58\x88\x23\xD4\x9F\x4E\x13\x0C\x72\x3E\xC1\x90\x94\x00\x5A\x95\x92\x5A\x86\x51\x51\xD7\x83\x34\x33\xE2\x94\x9C\x81\x09\x9A\x84\xDF\x3B\x51\x3A\xB5\x36\x9A\x76\x9D\x60\x8C\xDF\x2B",
			"\x57\x3C\x9B\x2E\x9A\x2E\xAE\x8B\x20\x5B\x98\x9F\x7B\x30\x5E\x71\x3B\x92\x32\x8C\xCA\x26\x9C\xB0\x1A\x86\x32\x49\x86\x21\xA0\x7C\x9F\x3A\xAE\x05\xA9\x90\xCD\x2B\x8E\x20\xA8\x9F\x94\x43\xA6\x5F\x3A\x4E\x91\x9A\xA1\x52\x95\xA2\x64\x3E\x90\x01\x8B\x91\xA3\xA3\x13\x8F\x3D\x29\x9E\xA7\xA5\x28\xA9\x85\x50\x87\x99\x68\x48\x98\x31\x81\x7D\x8A\x20\x9D\x88\x80\x01\x4C\x82\x24\xA4\x65\xAF\x3A\x06\xDF\x98\x32\xA4\x14\xAA\xA6\x4F\xB3\xA2\x33\x93\x76\xA5\x42\x72\x99\xA7\x9D\xB4\x67\xA8\x92\x36\x05\x50\x9A\x38\x54\xA2\x98\x79\x21\xAF\x8D\xA5\x98\x38\x0B\x56\x5C\x8A\x21\xAB\x97\x8F\x3D\x0E\x5D\xAA\x32\xEF\x46\x20\xAC\x1A\xBF\x4E\x0E\x64\xA2\x32\x62\xAD\x68\xAA\x96\x3B\x07\x3D\xE1\x4A\x9E\x71\xAE\xAA\x8F\x70\xA3\x36\x0F\x73\xA8\x4C\x82\xB6\xAE\xA8\xDC\x81\x4D\x10\x7C\xA5\x51\x9A\xBF\xA9\x76\x81\xA8\x4C\x11\x04\xB6\x50\xA0\x9C\x8F\x99\x02\x3B\x01\x5E\xB5\x37\x08\xB6\x96\x31\x44\x79\x62\x85\xC9\x7D\x79\x5D\x06\xA8\x26\xB3\x1D\x3A\x5C\x4C\x22\xB6\x80\xCA\x78\x80\x25\xA7\xBD\x23\xE5\x5C\x82\xB5\xD5\xA2\x98\x26\xAE\xB0\x9B\x1F\xC3",
			"\x50\xB6\xEE\x71\xB1\x88\x39\xBF\x5A\x60\x68\x88\x22\x10\x9B\x22\x64\xA2\xA2\x64\x4C\x00\x71\x24\xE2\x98\x22\x62\x9C\xA1\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat \"else\" Stat >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat \"else\" @ Stat >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat \"else\" Stat @ >",
			L"[15][IfContent]< \"if\" \"cond\" \"then\" Stat @ \"else\" Stat >",
			L"[16][IfContent]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[17][IfContent]< \"if\" \"cond\" @ \"then\" Stat \"else\" Stat >",
			L"[18][IfContent]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[19][IfContent]< \"if\" @ \"cond\" \"then\" Stat \"else\" Stat >",
			L"[20][IfContent]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]< IfContent @ >",
			L"[24][Stat]<< !Block @ >>",
			L"[25][Stat]<< !Do @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguity2Tokens, ModuleParserStates, IfElseAmbiguity2AstInsReceiver>(&IfElseAmbiguity2TokenDeleter, &IfElseAmbiguity2LexerData, &IfElseAmbiguity2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
