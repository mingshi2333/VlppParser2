/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity2ModuleParser.h"

namespace ifelseambiguity2
{
	void IfElseAmbiguity2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1569; // 13517 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 33;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\xCD\x34\x00\x00\x19\x06\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x0A\x0A\x9A\x0A\x9F\x11\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x0A\xEC\x97\xA3\xC1\xD4\xD3\xD0\x04\x81\xB3\xEE\xDA\xD9\x86\x85\xD7\x84\x0A\x39\xFD\xBB\x8B\x01\xDB\xDD\xE1\xC7\x83\x8D\x02\xEE\xCB\x8E\x06\xE6\xA7\xC9\xD1\xFC\xD8\xE4\xE9\xE6\xE9\xA2\xB5\xE6\xD9",
			"\xE4\xDD\xEC\xEC\xDB\xB5\x8F\x06\xF6\xE3\xED\xEA\xF3\xEB\xE4\xDC\xDF\xFB\xE0\xF6\xED\xF5\xF6\xEB\x94\xF0\xEF\xFC\xF1\x08\xE8\xF5\xEF\x92\x23\xE7\xF5\xF0\xF6\x82\x0A\xF7\x73\x7C\x7C\x7E\x06\x50\x4A\x68\x7D\xF2\x56\x0B\x7E\x7F\x0C\xBD\x72\x40\x06\x01\xAC\x72\x86\x7C\x19\x11\x82\x7C\x7B\x12\x6B\x51\x7C\x66\xEC\x5C\x06\x84\x66\x1D\x1F\x8A\x67\x84\x1C\x97\x86\x89\x89\x28\xA3\x87\x8A\x8A\x29\x9C\x6B\x8A\x8B\x2D\xA5\x6F\x8A\x65\x1E\x22\x80\x8E\x66\x1F\x36\x82\x8D\x8C\xA3\x64\x8C\x8B\x8F\x37\x81\x9B\x8C\x90\x43\x82\x9D\x8F\x8C\x47\xBC\x85\x6C\x08\x3A\x89\x94\x92\x93\x46\x9A\x78\x92\x94\x4A\xAE\x76\x41\x08\x4D\x94\x9F\x92\x96\x51\x96\x9D\x80\x81\x5F\x80\x02\x09\x96\x5E\x8E\x80\x9A\x99\x02\xA1\x9E\x8D\x97\x0A\x63\x04\x9B\x86\x5B\xA5\x97\x99\x40\x24\x2F\x9F\x79\x09\x0B\xA8\x9B\x9A\x65\x27\x36\x93\x81\x9A\x7A\x93\x92\x9C\xA0\x73\x84\xA6\xA0\x7B\x28\x3E\x9A\x9A\xA0\x70\xAC\x98\x81\x95\x0A\x69\x0A\xA1\xA0\x90\x8F\xA1\x9D\xA3\x45\x96\x6A\x0B\xA4\x85\xBB\x90\x95\xA6\x9F\xA1\xAC\x94\xA8\xA3\xA2\xAB\x47\x0A\x9C\x86\xAC\x09\x9E",
			"\x9D\x8C\xA9\x42\x0B\xA9\x9E\xA5\xAB\xAC\x83\xB2\xA5\xAE\xAB\x7F\xAF\x01\xAC\xAE\x8B\x95\xAF\x9E\xAD\xDF\x51\x1C\xA8\x00\x6E\x59\x70\x6F\x55\x2C\x72\x60\x4E\x67\xA9\x7D\x59\xB3\xB2\x7D\x4A\xB3\x40\x6B\x9E\x52\xB2\x40\x60\x57\x56\xB1\x40\xB5\xA0\x5A\xB0\x00\xB6\x7D\x4D\xBE\x67\xB3\x07\xA1\xB3\x54\xB9\xD0\x99\x7E\xB4\xB7\xEA\x8A\x40\xB9\xB5\xAB\x53\x5E\xB7\xBB\xA0\x62\xB0\x68\xBA\x03\x45\xB0\x7B\xB1\xCE\xA3\x43\xBE\xBC\xEE\x93\x56\xBD\x76\xF8\x90\xB5\xC3\xB6\x00\xC9\x44\xBD\xBB\x09\x6C\xB0\x7B\xBF\x57\x43\xC0\x7B\xC1\xC4\x82\xC7\xBA\xBF\xE9\x9D\xB1\xBD\xB6\x01\xDC\xCD\xC1\xC2\x06\x4B\xC0\x7A\xC4\x2C\x54\xCA\xBC\x4B\x24\xE5\xC0\x4A\xB7\xB4\x6B\xB0\xCB\x5F\x2F\xC7\x41\xCD\x40\x22\xE8\xC7\xC7\xCA\x59\xBC\xB3\xBB\x48\x3A\xF7\xB3\x49\xCA\x2A\xD9\x4C\xCB\xCC\x04\x44\xD5\xCC\xC6\x1F\xDE\xC1\xCA\xC5\xC8\x88\xDF\x6D\x5F\x3D\xC4\xCC\xCF\xCD\x1D\x51\xD3\xC6\xD3\x03\x56\xD6\xCD\xD3\x38\xD9\xCF\xC3\x6B\x44\xCE\xC4\xC7\xD1\x5D\xC6\x4A\xD4\xD6\x32\xCA\xD0\xCE\xDA\x02\x67\xD0\x48\xD0\x41\xD7\x4E\xB7\xC9\x53\xDC\xDD\x45\x70\x5E",
			"\xEC\x42\xD9\xDC\x18\x78\xD6\x40\xDC\x19\x7B\xDC\xDF\x3F\x7E\xE9\xBC\x49\xE1\x02\x5E\xB7\xE3\xB0\x8B\xE5\xBE\x64\xE2\x08\xEF\x74\x0E\xD7\x15\xDE\xD3\xD2\x86\x5E\xE2\xC2\xC6\xBE\x12\xDE\xBD\xE6\x42\x12\xE2\xCE\xC2\xBE\x0E\xEE\xC8\xE6\x41\x0E\xE2\xC6\xD6\xBE\x56\xDE\xBD\xE8\xD8\x0A\xCA\x47\x01\x80\xB3\xE7\xE3\x41\xED\x06\x5E\xB8\xEF\xDA\x4F\xC3\x4E\xB4\xC4\x06\x78\x6E\xE2\x40\xC2\xF9\xEA\x41\xF1\xBE\xC7\xFD\xC6\x41\xBE\x7C\xE7\xEC\xE5\x1B\x48\x11\x82\xBE\x10\x99\xEA\x41\x12\x01\x9E\xB7\x04\xF4\x0A\x4A\x11\x83\x46\x15\x96\xF9\x43\x12\x01\xA2\xCB\xEC\xF7\x01\x4C\x15\xFA\x42\xE2\x68\xF3\x41\x13\xEB\xC9\x40\x06\xFB\x03\x4E\x11\xFE\x41\xCF\x74\xF1\x43\x13\xF7\xC3\x4E\x86\xFE\x00\x10\x09\x80\x30\x04\x72\xB2\x5A\x33\x50\x31\x38\x53\x68\x73\x6F\x3B\x41\x7A\x5C\x6E\xBE\x4E\x79\xE2\x0D\x8A\x80\x5A\x5F\x3A\x62\x6E\x67\x83\x77\x0C\x86\x52\xC9\x16\x69\x83\x92\x23\x52\xC8\x0A\x72\x3F\x8D\x2E\x72\x79\xEF\x37\x55\x04\xE8\x46\x6B\x09\x14\x87\x3D\xA5\x7B\x83\xB0\x56\x60\x41\x14\x9F\x3F\x7C\x01\x24\x84\x66\x1F\x79\x20\xAB\x46\x81",
			"\x84\xDF\x2D\x7B\x04\xEF\x3F\x75\x84\x38\x80\x00\x20\x96\x33\xA0\x45\x36\x76\x34\x48\x7B\x88\x06\x27\x8B\x13\x85\x5A\x85\x4B\x6F\x3F\x88\x2E\x96\x87\x7B\x4B\x3D\x89\x42\x50\x70\x00\xBA\x6A\x21\x0D\xFF\x43\x51\xF6\x46\x7F\x3D\x0C\x03\x5B\x11\xBF\x8A\x89\xEF\x36\x3D\x8B\x86\x59\x7F\x19\xC1\x7B\x62\x32\x9F\x39\x8B\xBD\x74\x52\x66\x42\x81\x20\x3C\xA1\x4B\x50\x63\x99\x5D\x05\x9B\x2C\x8E\x00\x01\x90\x4D\x83\x46\x41\x1E\xAD\x58\x32\x26\xA6\x6F\x85\x7F\x4A\x40\x1C\xEC\x33\x7E\x38\x8E\x93\x20\x7E\x88\x93\x77\x55\x73\x8F\x30\x7A\x3E\x92\x62\x90\x91\x98\x19\x4D\x92\x34\x47\x91\x87\x0A\x37\x93\xB5\x22\x98\x4D\xFF\x65\x95\x50\x92\x8F\x94\x00\x69\x8D\x86\x56\x85\x55\x46\x93\x92\x3C\x27\xC9\x79\x20\x5A\x86\x21\x93\x54\x9F\x38\x93\x39\x98\x32\x52\xBC\x96\x20\xBE\x83\x23\x29\x86\x53\x51\x31\x44\x9A\x33\xAE\x87\x9B\x40\x49\x9B\x94\x2D\xBF\x4D\x4E\xCF\x92\x30\x2E\xB2\x9C\x8B\x47\x96\x99\x4C\x26\x0C\x72\x7C\x43\x9C\x9A\x85\x00\x9C\x99\xDF\x29\x51\x36\x96\x3E\x99\x72\x89\x23\x99\xEC\x23\x53\xA6\x6B\x93\x34\x6C\xAE\x9B\x69\xDF\x88",
			"\x4F\xAA\x74\x95\x37\x70\xB0\x8A\x8E\x03\x3F\x89\x3C\xDF\x30\x57\xE1\x4C\x92\x33\x66\x8A\x3A\x2D\x87\x5C\x56\x34\x55\x96\x20\x02\xA5\x87\x77\x3A\x56\xA0\x86\x98\x37\x8D\x06\x2A\x95\x30\x9D\x84\x55\x41\x5F\x90\x99\x0B\xA0\x58\x47\xA3\x37\x9C\x8C\xBF\x8B\x90\x28\xAF\x9E\x42\x1F\xA7\xA5\x91\x96\x87\x3D\x8A\x99\x69\x48\xF2\x34\x80\x7E\x9B\x22\x9D\x8B\x80\x01\x4C\x82\x27\x9D\x81\xAF\x3A\x06\xE2\x98\x32\xA4\x15\xAB\xA7\x80\x30\x9A\xA2\x92\x61\xAA\x66\x73\x99\xA7\xA2\x9F\x5B\xA6\x98\x36\x06\x52\x92\x38\x55\x8A\x9B\x79\x21\xB1\x8D\xA7\x9F\x38\x0B\x56\xCC\x3B\x92\x20\x59\xBA\x93\x7B\x39\x0D\xAA\xCD\x21\x7E\x20\x61\xBB\xA3\x9F\x3A\x05\xAC\xC9\x06\x9D\x6D\x50\xBA\x33\x0E\x4B\x71\x4D\x7D\xB2\x97\xAD\x7D\x91\xAE\x64\x3E\x04\xAE\x34\x45\xA7\xAE\xA1\x99\x9D\xA1\x41\x0D\xAF\x42\x75\xA0\xB0\xB1\x62\xB2\xA1\x44\x05\xB0\x43\x40\xA8\x8E\xD1\x82\x23\x06\x7A\xA6\x33\x23\x2D\xAE\x32\x21\x59\x6D\x09\xA5\x60\x81\x74\x50\x80\x25\x9F\xBD\x22\xBE\x30\x23\xB5\x04\x94\x72\x87\x28\x28\xB5\x47\x17\x70\x8F\xD1\xAC\xB2\x96\x30\x2F\xB6\x34\x82",
			"\x2E\xB4\xE8\x5C\x80\x8E\xB1\xBF\x78\x1B\x9A\x2B\xB7\x8B\x23\x83\x23\x22\x63\xB6\xC8\x30\x20\x71\x90\x05\xB8\x23\x12\x7D\xB1\x40\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfContent] BEGIN ",
			L"[10][IfContent] END [ENDING]",
			L"[11][IfContent]< \"if\" \"cond\" \"then\" @ Stat \"else\" Stat >",
			L"[12][IfContent]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[13][IfContent]< \"if\" \"cond\" \"then\" Stat \"else\" @ Stat >",
			L"[14][IfContent]< \"if\" \"cond\" \"then\" Stat \"else\" Stat @ >",
			L"[15][IfContent]< \"if\" \"cond\" \"then\" Stat @ \"else\" Stat >",
			L"[16][IfContent]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[17][IfContent]< \"if\" \"cond\" @ \"then\" Stat \"else\" Stat >",
			L"[18][IfContent]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[19][IfContent]< \"if\" @ \"cond\" \"then\" Stat \"else\" Stat >",
			L"[20][IfContent]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]< IfContent @ >",
			L"[24][Stat]<< !Block @ >>",
			L"[25][Stat]<< !Do @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguity2Tokens, ModuleParserStates, IfElseAmbiguity2AstInsReceiver>(&IfElseAmbiguity2TokenDeleter, &IfElseAmbiguity2LexerData, &IfElseAmbiguity2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
