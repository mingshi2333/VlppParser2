/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity2ModuleParser.h"

namespace ifelseambiguity2
{
	void IfElseAmbiguity2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1393; // 12101 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 113;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\x45\x2F\x00\x00\x69\x05\x00\x00\x09\x00\x01\x82\x80\x06\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x95\x0A\x9A\x0A\x87\x1D\x01\x84\xFF\x19\x9A\x99\x8A\x80\x03\x8D\x8D\x1D\x9F\x9A\x81\x92\x97\x7C\x92\x91\x27\x9F\xA9\x80\x9A\x85\x92\x93\x96\x25\x9D\x9D\x97\x88\x89\x98\x98\x94\x37\xAA\xB9\x8C\x95\x98\x9D\x9E\x9D\x3F\xBC\x86\x8E\x9B\x93\x93\x9C\xA3\x41\xC8\x83\xB6\x99\x84\x9A\x82\xA7\x03\xC4\x87\xBC\x83\xAF\x95\xA4\xAA\x57\xD6\x8B\xBE\x9B\xA8\xA1\xAE\xA1\x51\xCC\x9F\xAA\xA1\xB4\xAD\xB2\xAF\x67\xE0\x82\x92\xA9\x82\x02\x84\xA8\x6B\xE2\xA9\xA4\xB1\xBE\xB1\xBA\xB4\x77\xEA\x81\x8C\xB3\xB0\xAD\xBE\xAD\x03\x83\x2F\xB5\xA5\xA6\xBF\xB8\xC3\x79\xF4\xBB\xB2\xB9\xC0\xC7\xC4\xBB\x8F\xF8\x91\xDA\xBE\x8C\xC7\xC8\xC5\x95\x90\xD9\xD2\xCB\xCC\xC8\xBF\xC3\x80\x8D\xE1\xD7\xCE\xC5\xCC\xCD\xCF\xA2\x9D\x8C\x8D\xAA\x85\x03\xC1\xAC\x1D\x88\x8F\xA4\xC4\xD8\xDA\x85\x03\xAF\xFF\x85\xC3\xD6\xD5\xD0\x05\xDC\x03\x8E\xB3\xD6\xD9\x82\x04\xE1\xD4\xB5\xBA\xCA\x8B\x07\xE4\xD0\xDE\x06\xCD\xBD\xFC\xC8\xDE\xE3\xDE\xEB\xE4\xA0\xD7\xC4\xEA",
			"\xEB\xE9\xEC\xEC\xE4\xDD\x82\x8D\x11\xE4\xEA\xEA\xEC\xEE\xE8\xDE\xE1\xF5\xEF\xEC\xF7\xF4\xF3\xED\xF0\xEF\xE5\xF4\xFE\xC8\x00\x07\xE4\xF6\xE5\xF0\x8C\xD3\xFA\xFC\xFB\x10\x39\x7A\x65\x04\x02\x9C\x65\x7E\x66\x07\x86\x8F\x7C\x82\x0B\x8A\x8C\x83\x83\x0E\x91\x8E\x65\x83\x13\x9A\x62\x05\x81\x15\x92\x87\x68\x85\x1B\x90\x89\x87\x87\x98\x53\x08\x85\x87\x1A\xA5\x69\x80\x88\x26\x9C\x89\x8A\x66\x14\x23\x8B\x89\x89\xD3\x6A\x81\x8E\x87\x24\xA8\x83\x8C\x8C\xE7\x6A\x79\x78\x78\x3B\xAE\x7D\x8C\x00\x12\x7D\x7F\x8D\x79\x16\x2E\x87\x8E\x8D\x1D\x57\x06\x91\x47\x18\x0B\x91\x7F\x89\x35\x91\x9F\x88\x92\x4F\xB2\x89\x8C\x8F\x3A\x99\x98\x97\x96\x3E\x83\x49\x06\x93\xEF\x54\x42\x93\x40\x1B\x20\x93\x92\x95\x55\xB4\x83\x96\x94\x47\xAC\x9D\x44\x07\x66\x9A\x91\x41\x07\x71\x9C\x92\x7E\x41\x1E\x35\x9D\x96\x9D\x50\xAB\x9E\x9D\x9B\x7F\x97\x9B\x9F\xA0\x00\x1F\x0A\x9F\x9D\x72\x88\xAC\x9C\x9A\xFE\x6A\x9C\x6C\x08\x87\xBD\x90\xA3\xA4\x82\x8A\xA4\xA2\xA4\x1D\x61\x01\xA4\xA3\x67\x8E\xA5\xA4\xA6\x69\xB8\x8A\x42\x08\x9B\x9A\x63\x09\xA9\xA2\x89\x44\x08\xAA",
			"\x54\x8D\xA9\xA9\xA7\xAF\x89\xA0\xA9\x42\x25\x2C\xAE\x99\xA8\xAD\xB0\xA9\xAD\xA2\x45\x0A\x4E\x5B\x98\xA2\x72\x60\x6A\x4B\xBF\xB2\x40\x6B\x6A\x7F\x44\xB6\xB3\x5F\xC5\x83\x4E\x69\x56\xC8\x83\xB5\x49\xB3\x02\x42\x60\xB5\x55\xCA\x80\xBE\x71\xB4\xA2\x59\xBB\xB2\x73\xD4\x81\x4F\xB3\x5F\xDC\x8E\x7E\xB5\x60\x55\x65\xB2\x77\xB9\x02\x70\x5E\x72\xB0\xDD\x93\xBA\x42\xB5\xE4\x98\xB2\xBF\xB7\xE0\xAD\x69\xBA\xBD\x22\x61\xB0\x00\xBD\xC7\xBC\xBF\x46\xBF\xEE\x92\x70\xBE\xB9\x25\x6A\xBE\x48\xBB\x01\x40\xC2\x6A\xC2\x0B\xFD\xB8\xBD\xBE\x09\x63\xB1\xC1\x56\x0C\xFF\xBB\xBC\xC6\xF7\x83\x7F\x5F\xC1\xEB\xA5\x46\xC5\xBC\x22\x60\xC1\xC6\x48\x23\xC8\xC2\x48\xC4\x27\xDA\x4E\xBF\x6E\xFE\xA9\xC2\x74\xCB\x2D\xFF\x3E\xBE\xC3\xDB\x82\xCB\x44\xC1\x55\x46\x79\x40\xCD\x1B\x66\xC5\xCD\x46\x32\xC3\xD9\x46\xD0\x43\xC5\xD6\xD0\xD2\x35\xFE\xBC\xD3\x46\x40\xE7\xCF\xC9\x55\x4E\xD4\xDA\xBF\xB5\x1C\xD2\xC9\x40\xCE\xD2\x55\xD8\xD5\xB2\x1D\xC3\x45\xC2\x4B\x3E\xC6\x4A\xD1\xC9\x3A\xDA\x45\xDB\xB7\x64\xD3\xC2\x77\xDA\x02\x7E\xBD\xDA\xB6\x96\x80\x08\x0A\xDB\x05",
			"\xDD\x47\xCE\xDB\xEA\xB2\xC5\xC2\xCC\x7B\xD5\xCA\x42\xBA\x20\xC5\xC0\xC9\xE0\x06\x60\xCA\xB8\xD7\xB8\x74\xDD\xE2\x41\x88\xC3\x4F\xE3\x40\xEA\x85\xC1\xE7\x42\x0A\x7F\x64\xDE\xE6\x90\xF3\xB9\xE7\xE0\x0D\x60\xE9\x43\xE4\x6E\xC3\x41\x11\x74\x05\xCD\x93\xC4\xD7\xE5\x5C\xDA\x91\xE9\xEF\x7E\xBD\x8B\xEA\xF1\x5D\x4F\x94\xED\xEF\x6A\xB4\xE8\xEC\x00\x02\x11\x76\xBA\xD0\x7C\xE3\x43\x10\xBF\xCA\x47\x86\xF0\x02\x44\x15\xF1\x42\x70\x88\xF4\xA2\x09\x6E\xEC\xE6\x7D\xA5\x33\x78\xA8\x64\xCF\xEF\x55\xA5\xC3\xD8\x9C\xA8\xBD\x59\xED\xD6\xC1\xA1\x7C\xE1\xE0\xF1\xE6\xAD\x69\x20\xCF\xD8\x65\xA5\x5C\xF2\xD3\xF6\xAF\x0A\x60\xCC\xE5\xA2\x9F\x9D\xF6\x9C\xC8\xF8\x59\xF1\x7E\xCC\xD2\xDA\x67\xE5\x40\x20\x7D\x7C\x67\x15\x53\x7F\xB8\x7B\x78\x7E\xA3\x71\x7D\xF9\x3F\x40\x6F\x80\x2E\x7A\x33\xBB\x60\x02\xBF\x11\x85\x80\x42\x75\x7E\x53\xF1\x31\x81\xFE\x3F\x45\x53\xE0\x46\x22\x80\x94\x22\x3A\xF7\x06\x21\x82\x10\xAB\x79\x3E\xFC\x3D\x73\x7B\x1E\x83\x20\x7F\x55\x80\x00\x67\x63\x81\x7C\x04\x44\x6F\x59\x46\x22\x84\x02\x3B\x80\xFD\x71\x37\x78\x8F\x72\x56",
			"\x3E\xCC\x29\x22\xFA\x25\x35\x52\x11\x5F\x7F\x3D\x3A\x86\x81\x42\x41\x86\x21\x24\x96\x81\x3E\x41\x5F\x81\x7C\x01\x4B\x6B\xE5\x1E\x72\x7F\xEF\x2A\x76\x0A\xBF\x46\x89\x2D\x83\x24\x85\x02\x2D\x81\xDD\x15\x52\x4C\x1F\x8B\x52\x33\xE3\x2B\x8B\x02\xBF\x88\x82\x24\x8A\x21\x8D\x1C\x81\x7C\xA5\x28\x8A\x20\x27\xA3\x89\x3E\x65\x47\x8B\x8F\x51\x82\x6C\x85\x34\x81\x71\x6B\x96\x4C\x9D\x7A\x89\x51\x22\x44\x92\x20\x7F\x83\x22\x1D\xE5\x35\x52\x43\x55\x89\x8B\x57\x86\x21\x22\xD5\x51\x90\x42\x64\x57\x90\x84\x59\x8E\x17\x82\x2D\x87\x81\x14\x89\x8E\xEF\x2B\x55\x0D\xF6\x71\x21\x2E\x83\x23\x92\x4F\x8E\x57\xAE\x76\x43\x76\x83\x1F\x93\x87\xEF\x35\x54\x26\xF5\x65\x3D\x56\x83\x26\x94\x76\x57\x80\x67\x27\x07\x50\x3E\x87\x25\x92\x75\x77\x6F\x2C\xE5\x33\x90\x33\x81\x26\x97\x01\x2B\x93\xFB\x6F\x3A\x05\x48\x89\x51\x4F\xB3\x88\x9A\xC6\x58\x8F\x47\x16\x08\x87\x47\x90\x54\x6F\xEB\x06\x26\x90\x50\xBF\x47\x05\xD7\x8C\x8C\x67\x5A\x83\x21\x6E\xB0\x97\x47\x31\x01\x9F\x19\x9C\x37\x76\x6E\x80\x9D\x3C\x33\x0A\x9F\xA5\x76\x35\x8D\x81\x03\x8C\x37\x95\x55",
			"\x06\x33\xF6\x4A\x53\x59\xB5\x99\x87\xEF\x96\x3C\x0E\x22\x7F\x47\x53\x4F\x96\x20\xFF\x8D\x61\x40\x9A\x3C\x07\x7D\x8F\x7A\x9E\x00\x0D\x7A\x41\x1A\x97\x9D\x44\x7F\x00\xA2\x36\x83\x21\x31\xEC\x63\x7B\x85\x4E\x78\x5F\xDC\x68\x25\x48\xA2\x29\x6F\xEA\x78\x6D\x74\x0F\x8A\x25\x4A\x83\x68\xA5\x96\xAE\x6B\x6A\x0E\xA6\x3E\x09\x9A\x2C\x6B\xBC\x75\xA5\x23\x37\xB1\xA6\x4C\x51\x6C\x22\x9E\x99\x22\x5D\x2F\x75\x72\x6A\x25\x71\x86\x90\x05\xAB\x23\x32\x7F\xA2\x40\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfThenStat",
			L"IfContent",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfThenStat] BEGIN ",
			L"[10][IfThenStat] END [ENDING]",
			L"[11][IfThenStat]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][IfThenStat]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][IfThenStat]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][IfThenStat]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][IfContent] BEGIN ",
			L"[16][IfContent] END [ENDING]",
			L"[17][IfContent]<< !IfThenStat \"else\" @ Stat >>",
			L"[18][IfContent]<< !IfThenStat \"else\" Stat @ >>",
			L"[19][IfContent]<< !IfThenStat @ \"else\" Stat >>",
			L"[20][IfContent]<< !IfThenStat @ >>",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]< IfContent @ >",
			L"[24][Stat]<< !Block @ >>",
			L"[25][Stat]<< !Do @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguity2Tokens, ModuleParserStates, IfElseAmbiguity2AstInsReceiver>(&IfElseAmbiguity2TokenDeleter, &IfElseAmbiguity2LexerData, &IfElseAmbiguity2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[8][8] = {
			{0, 7, -1, -1, -1, 7, -1, 7, },
			{7, 1, -1, -1, -1, 7, -1, 7, },
			{-1, -1, 2, 2, 2, -1, -1, -1, },
			{-1, -1, 2, 3, 2, -1, -1, -1, },
			{-1, -1, 2, 2, 4, -1, -1, -1, },
			{7, 7, -1, -1, -1, 5, -1, 7, },
			{-1, -1, -1, -1, -1, -1, 6, -1, },
			{7, 7, -1, -1, -1, 7, -1, 7, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguity2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguity2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguity2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
