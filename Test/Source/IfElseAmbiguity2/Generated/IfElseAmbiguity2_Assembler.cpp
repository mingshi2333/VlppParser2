/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguity2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguity2_Assembler.h"

namespace ifelseambiguity2
{

/***********************************************************************
IfElseAmbiguity2AstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguity2AstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = IfElseAmbiguity2CppTypeName((IfElseAmbiguity2Classes)type);
		switch((IfElseAmbiguity2Classes)type)
		{
		case IfElseAmbiguity2Classes::BlockStat:
			return vl::Ptr(new ifelseambiguity2::BlockStat);
		case IfElseAmbiguity2Classes::DoStat:
			return vl::Ptr(new ifelseambiguity2::DoStat);
		case IfElseAmbiguity2Classes::IfContentCandidate:
			return vl::Ptr(new ifelseambiguity2::IfContentCandidate);
		case IfElseAmbiguity2Classes::IfContentToResolve:
			return vl::Ptr(new ifelseambiguity2::IfContentToResolve);
		case IfElseAmbiguity2Classes::IfStat:
			return vl::Ptr(new ifelseambiguity2::IfStat);
		case IfElseAmbiguity2Classes::Module:
			return vl::Ptr(new ifelseambiguity2::Module);
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void IfElseAmbiguity2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = IfElseAmbiguity2CppFieldName((IfElseAmbiguity2Fields)field);
		switch((IfElseAmbiguity2Fields)field)
		{
		case IfElseAmbiguity2Fields::BlockStat_stats:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity2::BlockStat::stats, object, field, value, cppFieldName);
		case IfElseAmbiguity2Fields::IfContentCandidate_elseBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity2::IfContentCandidate::elseBranch, object, field, value, cppFieldName);
		case IfElseAmbiguity2Fields::IfContentCandidate_thenBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity2::IfContentCandidate::thenBranch, object, field, value, cppFieldName);
		case IfElseAmbiguity2Fields::IfContentToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity2::IfContentToResolve::candidates, object, field, value, cppFieldName);
		case IfElseAmbiguity2Fields::IfStat_content:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity2::IfStat::content, object, field, value, cppFieldName);
		case IfElseAmbiguity2Fields::Module_stat:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguity2::Module::stat, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void IfElseAmbiguity2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = IfElseAmbiguity2CppFieldName((IfElseAmbiguity2Fields)field);
		return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
	}

	void IfElseAmbiguity2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = IfElseAmbiguity2CppFieldName((IfElseAmbiguity2Fields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* IfElseAmbiguity2TypeName(IfElseAmbiguity2Classes type)
	{
		const wchar_t* results[] = {
			L"BlockStat",
			L"DoStat",
			L"IfContent",
			L"IfContentCandidate",
			L"IfContentToResolve",
			L"IfStat",
			L"Module",
			L"Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 8 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguity2CppTypeName(IfElseAmbiguity2Classes type)
	{
		const wchar_t* results[] = {
			L"ifelseambiguity2::BlockStat",
			L"ifelseambiguity2::DoStat",
			L"ifelseambiguity2::IfContent",
			L"ifelseambiguity2::IfContentCandidate",
			L"ifelseambiguity2::IfContentToResolve",
			L"ifelseambiguity2::IfStat",
			L"ifelseambiguity2::Module",
			L"ifelseambiguity2::Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 8 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguity2FieldName(IfElseAmbiguity2Fields field)
	{
		const wchar_t* results[] = {
			L"BlockStat::stats",
			L"IfContentCandidate::elseBranch",
			L"IfContentCandidate::thenBranch",
			L"IfContentToResolve::candidates",
			L"IfStat::content",
			L"Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguity2CppFieldName(IfElseAmbiguity2Fields field)
	{
		const wchar_t* results[] = {
			L"ifelseambiguity2::BlockStat::stats",
			L"ifelseambiguity2::IfContentCandidate::elseBranch",
			L"ifelseambiguity2::IfContentCandidate::thenBranch",
			L"ifelseambiguity2::IfContentToResolve::candidates",
			L"ifelseambiguity2::IfStat::content",
			L"ifelseambiguity2::Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguity2AstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = IfElseAmbiguity2CppTypeName((IfElseAmbiguity2Classes)type);
		switch((IfElseAmbiguity2Classes)type)
		{
		case IfElseAmbiguity2Classes::IfContent:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguity2::IfContent, ifelseambiguity2::IfContentToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguity2Classes::IfContentCandidate:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguity2::IfContentCandidate, ifelseambiguity2::IfContentToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguity2Classes::IfContentToResolve:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguity2::IfContentToResolve, ifelseambiguity2::IfContentToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
