/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguityOnStat
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStatModuleParser.h"

namespace ifelseambiguityonstat
{
	void IfElseAmbiguityOnStatModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1208; // 10065 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 184;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x51\x27\x00\x00\xB0\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x3A\x0A\x4C\x5B\x87\x9E\x6C\x6E\x64\x4B\x97\xB0\x4E\x64\x60\x57\x5C\xAE\xA5\x5F\xA0\xBD\x52\xAB\x5A\x53\x65\xAB\xA7\x48",
			"\x9D\x83\x4E\x58\x73\xAA\xA0\x67\xAB\xA8\xB0\x93\x53\xAF\x40\xAD\xA0\x61\xAC\x73\xB7\x82\x4F\xA8\x74\x9A\xB2\xAC\xAA\xA5\xA9\xB6\xA3\xB0\xAD\xB5\xA1\xA7\xB2\x41\xB9\x89\xB6\xAB\xB2\xAE\x93\x51\xB0\xAF\x23\x7B\xA0\x75\xAF\x9E\xAC\x46\xB4\x4B\xD8\x80\x0D\xB0\x74\xDB\x9C\xB0\x4B\xB7\xBF\xAC\x43\xB7\xB5\xD5\x86\xB3\xB8\xB2\xCE\xAB\xAB\xB8\xAA\x57\x61\xB2\xB9\x46\xE4\x93\x59\x6B\xB3\x20\x67\xB3\xBD\x47\xF7\xAE\xBD\x46\xBE\xFB\x98\x4D\xBE\xB0\xF9\xAA\xBD\x47\xB7\xF2\x9D\x49\xC3\xBE\xDF\xB3\x68\xC1\xB1\xCA\xAF\xBC\xB3\x54\x0F\xF1\xB6\xC0\xBD\x1C\x80\x7F\x5E\xB4\x17\xD8\x4A\xC7\xA8\x2C\x5F\xC9\xB7\x48\x22\xDE\xB3\x55\xC9\xE5\xA3\x41\xA0\xBB\xBF\x9B\x4D\xC2\x42\xD6\x83\xC1\x43\xAF\x32\xE6\xC9\x41\xCD\xD6\xA7\xBF\xAF\xB9\xDF\xA7\xB6\xB4\x6C\x98\x82\x40\xD3\xC4\x09\x43\xDB\xC5\xD0\x01\x55\xC6\x43\x6D\x48\xC0\x0C\xD0\xD1\x4B\xF0\xCC\x6E\xD4\x09\x4F\xDC\xB9\x42\x36\x0F\x7F\xAE\x84\xEC\x8B\xC6\x67\xB7\x1B\x9D\xDD\x8F\x46\x16\xA2\xD2\x7E\xB5\x56\xD7\xD3\x43\x0D\xCF\x56\xBE\x72\xDA\x09\x78\x0D\xDA\x42\xF6\x70\xD6\x41\x0E\x73",
			"\xC9\x4B\x8E\xDD\x4E\xA3\x07\xD6\xD7\xA3\x6A\xD9\xCB\xA0\xF0\x81\x70\x89\x4C\x8C\x92\x66\xB7\xB7\xE3\x52\xA8\xA3\xCD\xAF\x63\xD4\xB1\xD3\x93\x85\xD1\xE6\x7C\x1B\x4B\xE2\xE5\xE1\x03\x46\xD2\x41\x6F\x98\xC9\xA4\xE2\x41\x9E\xC1\x40\x81\xE8\x09\x7C\xCD\x8F\xB7\xDF\xA5\xE0\x00\xE0\xB4\x5B\x49\xD9\xD2\x3D\xB5\xCF\xB7\xEC\x00\x2E\xED\xE1\x43\x93\xE0\x8E\xEB\xED\x53\xE8\xE8\x91\xA3\xB4\x78\xE7\xEB\xE1\x0A\x4A\x7C\xE5\x90\xA0\xD0\xD3\x40\xEE\xB0\xEA\xD1\x7B\xF2\x71\x84\x74\xF4\x00\xCD\xC3\x40\xC0\x66\x1B\x7B\x74\xE7\xE3\x06\x65\xC7\xF2\x93\x1B\x63\xFE\xAE\xE8\x9A\x4A\xF4\xEB\xE6\x06\x43\x8E\xF1\x90\x6F\xEF\xF1\x42\xFA\x03\x66\xF1\x9F\x46\x5C\xF2\xF2\x9D\xDD\xFA\xF4\xF2\x41\xF4\x57\x61\x6E\xFE\x7F\x3D\x77\x81\x31\x7B\x20\xD6\x68\x79\x42\x31\x4F\x7B\xD1\x46\x82\x21\xD3\x6A\x83\xF0\x11\x50\x83\xCB\x52\x83\x20\x7B\x63\x83\x82\x05\x82\x21\x08\xB5\x7C\x7D\x03\x26\x4B\xF5\x63\x35\x6C\xFD\x5E\x87\x7F\x20\x82\x23\x95\x23\x88\x3E\x0F\x7A\x7C\x7F\x08\x89\x84\x9B\x09\x76\x32\xEF\x46\x26\x7F\xF7\x68\x7C\x05\x89\x26\x7E\x00\x36\x84",
			"\x7C\x3A\x98\x4C\x6D\x6E\x7D\x72\x19\x80\x02\x4F\x2C\x98\x31\x06\xD1\x5F\x20\x85\x3D\x83\x77\x09\x2B\x66\x06\x98\x33\x49\xA6\x44\x88\x85\xC2\x63\x22\xDF\x49\x8A\x32\x11\x86\x73\x20\xF9\x63\x20\x83\x59\x82\x21\x12\x1C\x81\x4E\x24\x8A\x23\x18\x97\x82\x21\x13\x27\x8F\x50\x98\x22\x82\x18\xC6\x89\x05\x37\x95\x76\x20\x2E\x85\x88\x19\x81\x2B\x04\xAA\x60\x42\x49\xD7\x79\x8E\x40\x4F\x88\x3F\x8D\x2E\x06\x8F\x4E\x42\x4D\x20\x88\x91\x49\x8D\x31\x04\x91\x71\x48\x8A\xFE\x4B\x82\x20\x06\xAC\x89\x20\x34\x16\x8C\xF8\x03\x25\x8A\x64\x4D\x74\x5B\x7C\x77\x6B\xE0\x28\x23\x95\x8E\x2D\x60\x71\xA2\x8A\x6C\xE3\x2F\x2B\x94\x68\x74\x57\x65\x6F\x90\x24\x2C\xD7\x72\x96\xB5\x51\x78\x76\xFF\x16\x59\xCB\x56\x50\x26\xCD\x4A\x25\x66\x42\x20\x98\x4B\x35\x60\x6E",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityOnStatTokens, ModuleParserStates, IfElseAmbiguityOnStatAstInsReceiver>(&IfElseAmbiguityOnStatTokenDeleter, &IfElseAmbiguityOnStatLexerData, &IfElseAmbiguityOnStatModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[6][6] = {
			{0, 4, 4, -1, 4, 4, },
			{4, 1, 4, -1, 4, 4, },
			{4, 4, 2, -1, 4, 4, },
			{-1, -1, -1, 3, -1, -1, },
			{4, 4, 4, -1, 4, 4, },
			{4, 4, 4, -1, 4, 5, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguityonstat::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguityonstat::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguityonstat::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguityonstat::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
