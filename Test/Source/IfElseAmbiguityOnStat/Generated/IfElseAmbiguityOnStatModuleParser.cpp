/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguityOnStat
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStatModuleParser.h"

namespace ifelseambiguityonstat
{
	void IfElseAmbiguityOnStatModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1211; // 10065 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 187;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x51\x27\x00\x00\xB3\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x60\x46\x6A\xF2\x7E\x78\x7E\x81\xFD\x47\x88\x7E\x04\x01\x9C\x6A\x81\x82\x98\x53\x0D\x81\x69\xF8\x54\x03\x87\x68\x08\x9A\x65\x07\x85\xB4\x52\x44\x80\x7C\xF9\x60\x89\x86\x83\x10\x9A\x63\x88\x85\x25\xA4\x86\x8B\x83\x2B\xA9\x88\x8A\x66\x17\x1C\x85\x7A\x7B\x34\xB1\x72\x88\x8B\x2A\x92\x68\x06\x8C\xF4\x61\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x27\x98\x88\x8F\x8B\x39\x96\x6C\x07\x92\x50\x93\x92\x96\x8B\x5B\xAD\x8E\x95\x95\xA3\x5D\x08\x95\x93\x59\x9C\x91\x76\x96\x67\xA6\x93\x8D\x40\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x69\x9F\x94\x97\x9D\xA3\x5F\x0E\x9B\x78\x20\x3B\x98\x9B\x46\x21\x3E\x9A\x99\x8F\x74\xAB\x93\x9F\x9F\x84\xB8\x72\x0A\xA0\x76\x9D\x90\x99\x9D\x8F\x86\xA5\xA2\x42\x3A\x0A\x4C\x5B\x87\x9E\x70\x67\x54\x4B\x97\xB0\x4E\x65\x6A\x7D\x5C\xAE\xA5\x5F\xA0\x9E\x62\xAB\x5A\x53\x65\xA0\x6B\xA9",
			"\xC1\x64\xA3\x54\xAB\xA3\x90\x7A\xA8\x73\xB0\x82\x4D\xA7\xA7\xAF\xA3\x47\xAE\x40\x6E\x4C\x7A\xA5\xA8\xBA\x96\xA9\xA9\xAE\x20\x7B\xAE\xA4\x4B\xB3\x90\x75\xAD\x40\xC6\xB2\xA4\xB1\x47\xCD\xBD\xA0\x77\xAF\xA6\xA3\x49\xB0\x4B\xCB\xB0\x48\xB3\xB3\x19\x4D\xBD\xB3\xB6\x9B\x81\xB8\xA4\x68\xD4\xAB\xA6\xB4\xB7\x18\x4D\xB3\x6F\xB5\xD8\x85\xB2\xB3\x55\xEC\xAD\xBD\xB4\x87\xAC\x55\xB0\x49\xB9\xB4\xA3\x45\xBE\xB9\xF7\xA8\xB7\x47\xBE\xF9\xBD\xB1\xBA\xBB\x09\x40\x60\xBE\xBF\xFF\x2A\xB3\x55\xB3\x06\xEE\xA3\xC0\xB4\xEF\xBD\x5C\xC3\xB0\x0F\xF3\xB3\xB8\x73\xC4\x45\xC3\x54\xBE\xCA\xA3\x49\xC5\xAC\xD0\x5F\xC1\xAC\x4B\x22\xF6\xA3\x55\xC9\x01\x52\xBC\x49\xA0\x20\xC0\x02\xB7\x46\x0A\xDA\xC9\x41\xB2\xD2\x89\xBD\xB1\xB2\x0D\xC3\x40\xC2\xCB\xAB\x51\xCA\xCE\x42\x39\xC2\x4C\xC6\xB4\x1C\xCD\xBC\xC5\xD0\x29\xFE\xC2\x40\xD2\x00\x37\x67\xC5\xD3\x4A\xC1\x4E\xD2\x41\x4C\xFD\x62\xCE\x41\x53\xED\xC9\x42\x0D\xCF\x52\xB2\x85\xCB\x4C\xE3\x7D\xB3\x86\x60\xFD\x8B\x46\x85\x65\xF2\x7C\xD1\xD6\x5A\xC3\x47\x0F\x73\x4C\xCE\x7D\xD9\x42\x38\x30\xDA\x42\x7D\x73",
			"\xC6\x49\x0E\xDD\x09\x7B\x89\xDE\x93\x23\x1A\xD1\xD8\x7E\x6D\xEA\xC8\xA0\xAA\x4F\xE3\x71\x4C\xA3\x92\x4C\xDF\xB4\xE1\x89\x83\xA3\xCF\x6B\x66\xD1\xDC\xCD\x81\xF8\x5C\xCC\xC6\xE2\x40\xD6\xEC\xE4\xE2\x06\x5C\xC6\xD4\x88\x92\x87\xE1\xEA\x42\x00\xB2\x7B\x47\xCE\x8F\xD8\x6E\xB4\xE5\x57\xCE\x9B\x44\xDB\xCC\xBD\x86\xCE\x42\xB4\xC0\x0B\xE4\xE4\x09\x40\x73\x41\xEB\x9A\x45\xD8\xEC\x6F\x95\xD8\xE2\xE4\xD6\xA8\xC5\xF6\x42\x72\xA0\xCE\x93\xEB\xEF\xC3\xF1\xE1\x93\x46\xE1\x4D\xF1\x90\xCA\x00\x0D\xBF\xF3\x41\xCA\xC3\x4B\x7D\xE2\xA6\xFF\x69\xF2\xEA\xE3\xED\xAE\x93\x78\xCC\xE7\xE4\xFB\x43\x9E\xF8\x72\xDE\x41\xCD\xA9\xF3\x41\xEA\xA4\xD3\x4D\xF8\x66\x78\xF0\xFA\x42\xFC\x4B\xDD\xF2\x40\xD9\xFA\x72\x3C\xFD\x50\x79\x21\xF7\x43\x20\x7B\x9F\x66\x21\x8C\x60\x77\x79\x81\x06\x82\x20\xD5\x75\x7E\xF1\x0D\x54\x37\x08\x83\x23\x77\x98\x3B\x22\xDF\x01\x80\x44\x06\x56\x79\x20\x16\x82\x23\x00\xD3\x7A\x20\x23\x5F\x82\x4E\x68\x7C\x80\x78\x1D\x7B\x7C\x83\x17\x4F\x84\xE3\x3E\x42\x0A\x82\x29\x7F\x03\xBE\x7C\x4D\x8C\x76\x33\xF7\x4B\x77\x87\x43\x4D\x82",
			"\x84\x0A\x3B\x86\xEC\x11\x74\x83\x8D\x03\x42\x7D\x12\x86\x22\x9E\x30\x88\x3F\x0D\x83\x22\x5A\x47\x93\x7D\x0F\xAC\x63\x87\x38\x43\x4F\x69\x51\x9D\x7D\x0B\x83\x21\x70\x26\x98\x36\x84\xE6\x62\x23\xD7\x06\x2E\x83\x24\x83\x25\x04\xF7\x65\x8A\x42\x29\x83\x21\x32\x83\x89\x21\x27\x09\x8D\xA4\x0A\x20\x81\x36\xBD\x81\x05\x72\x98\x4D\x87\x30\x76\x8C\x81\x2B\x04\x85\x20\x4A\x4B\x09\xB2\x82\x8B\x2D\x82\x26\x05\x80\x8E\x4A\x98\x03\x99\x90\x12\x89\x21\x06\x8D\x91\x4F\x12\xD5\x80\x00\x27\x82\x23\x81\x7D\x81\x20\x0D\x79\x8E\x50\xCB\x17\x88\x64\x8A\x78\x5B\xDF\x5A\x66\x70\x93\x25\x90\x24\x2F\x6B\x70\x29\xED\x60\x78\x8F\x2D\x96\x62\x2D\x71\x67\x09\xB0\x22\x96\x4A\xB4\x95\x6D\x83\x66\x25\x2E\xA0\x2C\x69\x97\x4C\x68\x26\x8E\x68\x36\x60\x71\x50\x25\x64\x73\x68",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat [ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat @ [ \"else\" Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat [ \"else\" @ Stat ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat [ \"else\" Stat @ ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat [ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat [ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityOnStatTokens, ModuleParserStates, IfElseAmbiguityOnStatAstInsReceiver>(&IfElseAmbiguityOnStatTokenDeleter, &IfElseAmbiguityOnStatLexerData, &IfElseAmbiguityOnStatModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[6][6] = {
			{0, 4, 4, -1, 4, 4, },
			{4, 1, 4, -1, 4, 4, },
			{4, 4, 2, -1, 4, 4, },
			{-1, -1, -1, 3, -1, -1, },
			{4, 4, 4, -1, 4, 4, },
			{4, 4, 4, -1, 4, 5, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguityonstat::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguityonstat::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguityonstat::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguityonstat::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
