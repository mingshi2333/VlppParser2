/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguityOnStat
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStat_Assembler.h"

namespace ifelseambiguityonstat
{

/***********************************************************************
IfElseAmbiguityOnStatAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguityOnStatAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = IfElseAmbiguityOnStatCppTypeName((IfElseAmbiguityOnStatClasses)type);
		switch((IfElseAmbiguityOnStatClasses)type)
		{
		case IfElseAmbiguityOnStatClasses::BlockStat:
			return new ifelseambiguityonstat::BlockStat();
		case IfElseAmbiguityOnStatClasses::DoStat:
			return new ifelseambiguityonstat::DoStat();
		case IfElseAmbiguityOnStatClasses::IfStat:
			return new ifelseambiguityonstat::IfStat();
		case IfElseAmbiguityOnStatClasses::Module:
			return new ifelseambiguityonstat::Module();
		case IfElseAmbiguityOnStatClasses::StatToResolve:
			return new ifelseambiguityonstat::StatToResolve();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void IfElseAmbiguityOnStatAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = IfElseAmbiguityOnStatCppFieldName((IfElseAmbiguityOnStatFields)field);
		switch((IfElseAmbiguityOnStatFields)field)
		{
		case IfElseAmbiguityOnStatFields::BlockStat_stats:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat::BlockStat::stats, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStatFields::IfStat_elseBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat::IfStat::elseBranch, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStatFields::IfStat_thenBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat::IfStat::thenBranch, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStatFields::Module_stat:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat::Module::stat, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStatFields::StatToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat::StatToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void IfElseAmbiguityOnStatAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = IfElseAmbiguityOnStatCppFieldName((IfElseAmbiguityOnStatFields)field);
		return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
	}

	void IfElseAmbiguityOnStatAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = IfElseAmbiguityOnStatCppFieldName((IfElseAmbiguityOnStatFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* IfElseAmbiguityOnStatTypeName(IfElseAmbiguityOnStatClasses type)
	{
		const wchar_t* results[] = {
			L"BlockStat",
			L"DoStat",
			L"IfStat",
			L"Module",
			L"Stat",
			L"StatToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityOnStatCppTypeName(IfElseAmbiguityOnStatClasses type)
	{
		const wchar_t* results[] = {
			L"ifelseambiguityonstat::BlockStat",
			L"ifelseambiguityonstat::DoStat",
			L"ifelseambiguityonstat::IfStat",
			L"ifelseambiguityonstat::Module",
			L"ifelseambiguityonstat::Stat",
			L"ifelseambiguityonstat::StatToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityOnStatFieldName(IfElseAmbiguityOnStatFields field)
	{
		const wchar_t* results[] = {
			L"BlockStat::stats",
			L"IfStat::elseBranch",
			L"IfStat::thenBranch",
			L"Module::stat",
			L"StatToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityOnStatCppFieldName(IfElseAmbiguityOnStatFields field)
	{
		const wchar_t* results[] = {
			L"ifelseambiguityonstat::BlockStat::stats",
			L"ifelseambiguityonstat::IfStat::elseBranch",
			L"ifelseambiguityonstat::IfStat::thenBranch",
			L"ifelseambiguityonstat::Module::stat",
			L"ifelseambiguityonstat::StatToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguityOnStatAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = IfElseAmbiguityOnStatCppTypeName((IfElseAmbiguityOnStatClasses)type);
		switch((IfElseAmbiguityOnStatClasses)type)
		{
		case IfElseAmbiguityOnStatClasses::BlockStat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat::BlockStat, ifelseambiguityonstat::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStatClasses::DoStat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat::DoStat, ifelseambiguityonstat::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStatClasses::IfStat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat::IfStat, ifelseambiguityonstat::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStatClasses::Stat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat::Stat, ifelseambiguityonstat::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStatClasses::StatToResolve:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat::StatToResolve, ifelseambiguityonstat::StatToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
