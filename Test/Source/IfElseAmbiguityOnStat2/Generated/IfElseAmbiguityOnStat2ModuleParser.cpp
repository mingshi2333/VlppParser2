/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguityOnStat2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStat2ModuleParser.h"

namespace ifelseambiguityonstat2
{
	void IfElseAmbiguityOnStat2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1357; // 11477 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 77;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\xD5\x2C\x00\x00\x45\x05\x00\x00\x09\x00\x01\x82\x80\x06\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x95\x0A\x9A\x0A\x87\x1D\x01\x84\xFF\x19\x9A\x99\x8A\x80\x03\x8D\x8D\x1D\x9F\x9A\x81\x92\x97\x7C\x92\x91\x27\x9F\xA9\x80\x9A\x85\x92\x93\x96\x25\x9D\x9D\x97\x88\x89\x98\x98\x94\x37\xAA\xB9\x8C\x95\x98\x9D\x9E\x9D\x3F\xBC\x86\x8E\x9B\x93\x93\x9C\xA3\x41\xC8\x83\xB6\x99\x84\x9A\x82\xA7\x03\xC4\x87\xBC\x83\xAF\x95\xA4\xAA\x57\xD6\x8B\xBE\x9B\xA8\xA1\xAE\xA1\x51\xCC\x9F\xAA\xA1\xB4\xAD\xB2\xAF\x67\xE0\x82\x92\xA9\x82\x02\x84\xA8\x6B\xE2\xA9\xA4\xB1\xBE\xB1\xBA\xB4\x77\xEA\x81\x8C\xB3\xB0\xAD\xBE\xAD\x03\x83\x2F\xB5\xA5\xA6\xBF\xB8\xC3\x79\xF4\xBB\xB2\xB9\xC0\xC7\xC4\xBB\x8F\xF8\x91\xDA\xBE\x8C\xC7\xC8\xC5\x95\x90\xD9\xD2\xCB\xCC\xC8\xBF\xC3\x80\x8D\xE1\xD7\xCE\xC5\xCC\xCD\xCF\xA2\x9D\x8C\x8D\xAA\x85\x03\xC1\xAC\x1D\x88\x8F\xA4\xC4\xD8\xDA\x85\x03\xAF\xFF\x85\xC3\xD6\xD5\xD0\x05\xDC\x03\x8E\xB3\xD6\xD9\x82\x04\xE1\xD4\xB5\xBA\xCA\x8B\x07\xE4\xD0\xDE\x06\xCD\xBD\xFC\xC8\xDE\xE3\xDE\xEB\xE4\xA0\xD7\xC4\xEA",
			"\xEB\xE9\xEC\xEC\xE4\xDD\x82\x8D\x11\xE4\xEA\xEA\xEC\xEE\xE8\xDE\xE1\xF5\xEF\xEC\xF7\xF4\xF3\xED\xF0\xEF\xE5\xF4\xFE\xC8\x00\x07\xE4\xF6\xE5\xF0\x8C\xD3\xFA\xFC\xFB\x10\x39\x7A\x65\x04\x02\x9C\x65\x7E\x66\x07\x86\x8F\x7C\x82\x0B\x8A\x8C\x83\x83\x0E\x91\x8E\x65\x83\x13\x9A\x62\x05\x81\x15\x92\x87\x68\x85\x1B\x90\x89\x87\x87\x98\x53\x08\x85\x87\x1A\xA5\x69\x80\x88\x26\x9C\x89\x8A\x66\x14\x23\x8B\x89\x89\xD3\x6A\x81\x8E\x87\x24\xA8\x83\x8C\x8C\xE7\x6A\x79\x78\x78\x3B\xAE\x7D\x8C\x00\x12\x7D\x7F\x8D\x79\x16\x2E\x87\x8E\x8D\x1D\x57\x06\x91\x47\x18\x0B\x91\x7F\x89\x35\x91\x9F\x88\x92\x4F\xB2\x89\x8C\x8F\x3A\x99\x98\x97\x96\x3E\x83\x49\x06\x93\xEF\x54\x42\x93\x40\x1B\x20\x93\x92\x95\x55\xB4\x83\x96\x94\x47\xAC\x9D\x44\x07\x66\x9A\x91\x41\x07\x71\x9C\x92\x7E\x41\x1E\x35\x9D\x96\x9D\x50\xAB\x9E\x9D\x9B\x7F\x97\x9B\x9F\xA0\x00\x1F\x0A\x9F\x9D\x72\x88\xAC\x9C\x9A\xFE\x6A\x9C\x6C\x08\x87\xBD\x90\xA3\xA4\x82\x8A\xA4\xA2\xA4\x1D\x61\x01\xA4\xA3\x67\x8E\xA5\xA4\xA6\x69\xB8\x8A\x42\x08\x9B\x9A\x63\x09\xA9\xA2\x89\x44\x08\xAA",
			"\x54\x8D\xA9\xA9\xA7\xAF\x89\xA0\xA9\x42\x25\x2C\xAE\x99\xA8\xAD\xB0\xA9\xAD\xA2\x45\x0A\x4E\x5B\x98\xA2\x6E\x69\x56\x4B\xBF\xB2\x40\x6A\x60\xC3\xA5\x45\xB2\xB1\xCE\x48\xBF\x5E\x4B\xCE\xA0\x64\xB2\xAF\x55\x51\xB2\x6B\xB4\xC0\x8D\xB5\x54\xB6\xCC\x9A\xB9\xB2\x48\xD6\x8E\x7C\xB7\x40\xCB\xA2\x61\xBA\x74\xE3\x82\x40\x5E\x73\xC2\x8F\xBA\xB0\xB5\x59\x67\xBE\x49\xBA\xC6\x90\xBB\xB5\x49\xF2\xB3\xB2\x49\xB9\x01\x7C\xB2\x75\xBE\xFA\x9B\x4E\xBF\xBA\xD2\x6D\xB2\xB4\xBE\xF7\xBB\xB0\xBF\x5F\x00\xC1\xC9\x46\xBF\xBB\x4D\xCE\xC2\xC4\x01\xFE\xBE\xBE\xBD\xDF\x9F\x43\xC1\x55\x06\xD7\xB5\x4B\x6A\xEE\xA2\x4D\xC6\xB8\x1F\xC9\xCF\x44\xC5\xFA\x90\xC5\xB6\xC9\x1B\x68\xC3\xBE\xC5\x2B\xD9\xC2\xC2\x91\x20\xC7\xC2\xC8\xCB\x1A\x75\xCE\xC7\xCD\x32\xF9\xC8\xCD\x46\x23\xE8\xBF\xB9\x42\x2E\xEE\xC4\xBE\x4C\x47\xC5\xDF\xCF\x3F\x46\xC3\xD6\x43\xC5\x4E\xC1\x61\xCD\xC8\x1A\xC6\x92\x72\xD4\x59\x41\xDE\xC3\x46\x57\xCC\xBE\x49\xD7\xF5\xA5\x40\xD8\x00\x50\xE2\x43\xD8\xC1\x2E\x68\x0D\xB6\xBA\x6B\xFD\xBA\x43\xB9\xAA\x6D\x61\x75\xD0\xFE\xA7\xB1\xD2\xCE\x01",
			"\x72\x63\x40\xC1\x7A\xC2\x45\xDE\x42\x7D\xC1\x48\xDC\x00\xE7\xB8\x69\xB4\x00\x86\xCF\xDF\xDB\x6D\x0A\x43\xE4\xC3\xDF\x09\x43\xEF\x6F\xE1\x93\xCA\xE4\xD2\x42\x95\xC3\x43\xE3\xD8\x83\xC9\xED\xD9\x42\x41\x11\x74\xC2\x92\x6D\xEE\xCD\x47\xB9\x5F\xA5\xE1\x7E\xBF\x2D\xAA\xEF\x78\x93\x9F\xE6\xED\xE0\xE3\x9F\xCA\x42\x11\x74\x83\xD0\x75\xED\x42\x43\x38\xEA\x43\x85\xBB\xC6\x44\x12\xEF\x09\x70\x91\xF1\xA2\x26\x31\xE1\x7D\xED\x68\xDC\xA4\xBB\xA1\x33\x76\xA5\x6B\xB9\x65\xDC\x6F\xA6\xF3\x0B\x40\xEB\xF3\xC2\x7B\xF8\xA8\x65\xE0\x04\x5B\xF7\xE5\x5B\xE2\xD6\xE6\x40\xF8\x99\xF6\x97\xF6\xA7\xDA\xC9\x48\x7F\xEB\x72\xE3\xFF\x8C\xE4\xE7\xCB\xE0\xFD\x42\xE9\xEE\xDF\x78\xDD\xB4\xF5\xF7\xFE\x41\xC6\x24\x7F\x7B\x1E\x7E\x6F\xFE\x43\x21\x7F\x96\x48\x68\xF6\x04\x54\x81\x80\x2F\x7F\x47\x1D\x3A\x76\x41\x32\x79\x21\xB1\x45\x76\x7E\x10\x8A\x20\x7F\x66\x79\x50\x09\x8F\x78\x7F\xF1\x79\x81\x42\x04\x47\x71\x59\x46\x23\x6C\x0F\x89\x51\x47\x40\x73\x38\x5D\x58\x34\x39\x09\x20\x7D\x79\x1D\x22\x44\x01\xBF\x41\x85\x05\x89\x20\x0C\x86\x28\x86\x42\x5D\x21",
			"\x48\x13\x91\x3D\x80\x72\x73\x21\x1D\x98\x6A\x84\x06\x2D\x4A\x0D\x89\x55\x86\x0E\x82\x26\x83\x02\x21\x80\x12\x83\x22\x4D\x16\xB2\x56\x3E\xE3\x3A\x85\xF9\x57\x8C\x7C\xF7\x4A\x21\x8B\x53\x8B\x51\x17\x86\x2B\x83\x81\x3D\x81\x81\x1D\x25\x4F\x12\xF6\x40\x89\xEE\x63\x85\x7D\x61\x93\x4C\xF7\x76\x45\x49\x35\x81\x24\x84\x3C\x9B\x8A\x40\x06\x54\x88\x3B\x4A\x89\x88\x6F\x9D\x8E\x0F\xA3\x53\x8E\x42\x6A\x8E\x89\x01\x2C\x87\x40\x43\x81\x8E\x00\x2B\x55\x84\x0B\x80\x01\x13\x83\x28\x8E\x15\x9E\x79\x50\x0A\x2D\x76\x41\x0C\x96\x92\x5A\x45\x91\x81\xE5\x3A\x93\x40\x13\x9A\x7D\xF8\x27\x07\x50\x6D\x87\x22\x1E\x81\x2A\x6C\x3B\x89\x84\x4E\x87\x69\x96\x03\xAB\x90\x00\x15\x18\x81\x51\x79\x4E\x96\x2C\x84\x74\x97\x16\x1F\x95\x3C\x90\x47\x70\xE9\x06\x25\x8F\x46\xAF\x07\x97\x91\x9F\x8F\x40\x45\x9D\x92\x83\x31\x00\x99\x63\x9E\x4A\x42\x4C\x95\x95\x84\x33\x00\x9A\xB1\x42\x21\x15\x83\x22\x86\xFB\x1D\x25\x06\xB7\x96\x4E\xA6\x2E\x9B\x9A\x81\x27\x8B\x86\x0A\x38\x07\xEC\x6F\x37\x54\x41\x80\x05\x9C\x01\x34\x83\xDA\x3C\x01\x9C\x42\x49\x7E\x95\xC6\x66",
			"\x23\x21\xCD\x93\x21\x1F\x18\x9B\x57\x02\x30\x97\xDA\x33\x83\x5F\xE3\x5F\x75\x79\x28\x28\xA2\x48\x04\x62\x26\x86\x91\x7F\x73\xD5\x60\x25\x44\xB3\x60\xA3\xDA\x6A\x67\x93\x32\x26\x76\xD1\x70\x67\x75\xDA\x5C\xA5\x9E\x00\x0C\xA3\xE0\x44\x23\xA4\x97\x0E\x71\x6E\x9F\x63\x70\xC4\x5A\x61\x26\x96\xA5\x21\x68\xBB\x60",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfThenStat",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfThenStat] BEGIN ",
			L"[10][IfThenStat] END [ENDING]",
			L"[11][IfThenStat]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][IfThenStat]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][IfThenStat]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][IfThenStat]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][If] BEGIN ",
			L"[16][If] END [ENDING]",
			L"[17][If]<< !IfThenStat \"else\" @ Stat >>",
			L"[18][If]<< !IfThenStat \"else\" Stat @ >>",
			L"[19][If]<< !IfThenStat @ \"else\" Stat >>",
			L"[20][If]<< !IfThenStat @ >>",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]<< !Block @ >>",
			L"[24][Stat]<< !Do @ >>",
			L"[25][Stat]<< !If @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityOnStat2Tokens, ModuleParserStates, IfElseAmbiguityOnStat2AstInsReceiver>(&IfElseAmbiguityOnStat2TokenDeleter, &IfElseAmbiguityOnStat2LexerData, &IfElseAmbiguityOnStat2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[6][6] = {
			{0, 4, 4, -1, 4, 4, },
			{4, 1, 4, -1, 4, 4, },
			{4, 4, 2, -1, 4, 4, },
			{-1, -1, -1, 3, -1, -1, },
			{4, 4, 4, -1, 4, 4, },
			{4, 4, 4, -1, 4, 5, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguityonstat2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguityonstat2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguityonstat2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguityonstat2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
