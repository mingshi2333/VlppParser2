/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguityOnStat2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStat2ModuleParser.h"

namespace ifelseambiguityonstat2
{
	void IfElseAmbiguityOnStat2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1551; // 13517 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 15;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\xCD\x34\x00\x00\x07\x06\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x0A\x0A\x9A\x0A\x9F\x11\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x0A\xEC\x97\xA3\xC1\xD4\xD3\xD0\x04\x81\xB3\xEE\xDA\xD9\x86\x85\xD7\x84\x0A\x39\xFD\xBB\x8B\x01\xDB\xDD\xE1\xC7\x83\x8D\x02\xEE\xCB\x8E\x06\xE6\xA7\xC9\xD1\xFC\xD8\xE4\xE9\xE6\xE9\xA2\xB5\xE6\xD9",
			"\xE4\xDD\xEC\xEC\xDB\xB5\x8F\x06\xF6\xE3\xED\xEA\xF3\xEB\xE4\xDC\xDF\xFB\xE0\xF6\xED\xF5\xF6\xEB\x94\xF0\xEF\xFC\xF1\x08\xE8\xF5\xEF\x92\x23\xE7\xF5\xF0\xF6\x82\x0A\xF7\x73\x7C\x7C\x7E\x06\x50\x4A\x68\x7D\xF2\x56\x0B\x7E\x7F\x0C\xBD\x72\x40\x06\x01\xAC\x72\x86\x7C\x19\x11\x82\x7C\x7B\x12\x6B\x51\x7C\x66\xEC\x5C\x06\x84\x66\x1D\x1F\x8A\x67\x84\x1C\x97\x86\x89\x89\x28\xA3\x87\x8A\x8A\x29\x9C\x6B\x8A\x8B\x2D\xA5\x6F\x8A\x65\x1E\x22\x80\x8E\x66\x1F\x36\x82\x8D\x8C\xA3\x64\x8C\x8B\x8F\x37\x81\x9B\x8C\x90\x43\x82\x9D\x8F\x8C\x47\xBC\x85\x6C\x08\x3A\x89\x94\x92\x93\x46\x9A\x78\x92\x94\x4A\xAE\x76\x41\x08\x4D\x94\x9F\x92\x96\x51\x96\x9D\x80\x81\x5F\x80\x02\x09\x96\x5E\x8E\x80\x9A\x99\x02\xA1\x9E\x8D\x97\x0A\x63\x04\x9B\x86\x5B\xA5\x97\x99\x40\x24\x2F\x9F\x79\x09\x0B\xA8\x9B\x9A\x65\x27\x36\x93\x81\x9A\x7A\x93\x92\x9C\xA0\x73\x84\xA6\xA0\x7B\x28\x3E\x9A\x9A\xA0\x70\xAC\x98\x81\x95\x0A\x69\x0A\xA1\xA0\x90\x8F\xA1\x9D\xA3\x45\x96\x6A\x0B\xA4\x85\xBB\x90\x95\xA6\x9F\xA1\xAC\x94\xA8\xA3\xA2\xAB\x47\x0A\x9C\x86\xAC\x09\x9E",
			"\x9D\x8C\xA9\x42\x0B\xA9\x9E\xA5\xAB\xAC\x83\xB2\xA5\xAE\xAB\x7F\xAF\x01\xAC\xAE\x8B\x95\xAF\x9E\xAD\xDF\x51\x1C\xA8\x00\x6E\x59\x70\x6F\x55\x2C\x72\x60\x4E\x67\xA9\x7D\x59\xB3\xB2\x7D\x4D\xBE\x67\xB3\x1A\x97\x52\xB4\x68\xD4\x86\x4A\xB0\xB3\x53\x59\xB3\x41\xB1\xE0\x57\xB9\x76\xB7\xD0\xAC\x42\xB8\x78\xE4\x81\x4B\xB4\x68\xE7\xAC\x49\xB8\x00\xEB\x99\x7D\xBA\xBB\x20\x71\xB4\xB3\x54\xC7\x8E\xB3\x4A\xBD\xF6\xAF\xBD\xBF\x48\xF3\xB4\xB9\x46\xBD\xB4\x41\xC2\xC3\x45\xFC\x93\x56\xC3\xC1\x09\xD6\xBD\xB7\xBE\x59\x8B\xC2\xC0\xC1\x0A\xCF\xC5\xBF\xB0\xE6\x96\xCD\x45\xC3\xD1\x9A\xC3\xC1\xC4\x1E\xD8\x44\xC6\xC3\xC8\x90\xC5\xB5\xC7\x25\xD7\xC7\xC8\xB7\x29\xDB\xC9\x95\xBE\xD3\xA3\x40\xCC\xB6\x00\xE1\xC8\xC0\xB4\x2C\xFA\xBA\xCA\xB6\x15\xED\xCF\xC7\xCA\xEC\xB6\xCF\x3E\xBD\xE0\xAC\x4C\x69\xCC\x20\x73\xC3\xBB\x48\x47\xF4\xC9\xD2\xD0\x4D\xCB\xDF\xD2\xCF\x22\xCA\x40\x60\xC9\x3A\xEE\xC8\xCD\x76\xF6\x97\xD8\xC9\xD6\x3F\xFC\xC7\x55\xD7\x3D\xE0\xD5\xD4\xD0\x5C\xD6\xD5\xD8\xD2\x5A\xFF\x6D\x5D\x70\x09\x5E\xDE\x66\xD2\xE8\xA3\x40\xDF\xD6\x2C",
			"\x77\xD8\xCD\xDE\x18\xF6\xDD\xDC\x48\x7A\xC2\x45\xD2\x7C\x34\x1B\xD1\x40\xB8\x1B\x63\xC2\xDB\xD6\x72\xCB\x41\x83\xB9\xF6\x90\xEA\x43\xB9\x8D\xC1\x41\xD7\xBD\x09\x57\xE6\xBE\xE6\xAB\x6A\xD9\x40\xDD\xE0\xB4\xD6\xBE\xE8\xAF\x5E\xE6\x43\x01\x01\xA8\xE8\xD8\x00\xAA\xCB\xE3\x41\xEB\x7F\x41\x8C\xC5\xEC\x09\x78\x67\x82\x41\xB6\xEE\xE2\x41\xEE\x03\x76\xBC\xEE\x40\x95\xC0\x0E\x6C\xED\xA7\xC6\xE0\x4C\x13\x01\xA0\xB7\x06\xF1\xC1\xEC\x76\xBD\x85\x86\xCD\xF2\x7F\x46\x10\x91\xFF\x75\xF0\xB0\xC6\xF3\x41\x13\x01\x81\xF2\x7A\xF6\x09\x4E\x1D\xF6\x42\x10\x20\xF9\x43\x13\xE3\xC9\x4F\x72\xF9\x03\x50\x19\xFA\x41\x1E\xAC\xF8\x98\x0C\xCC\xDF\x73\xA1\x4C\x98\xA3\x64\xD2\xFD\xDF\x60\xB3\xE2\xAF\xC4\x7D\x74\xFF\x16\x5E\x51\x3F\x67\x5C\x6E\xEC\x23\x53\xFE\x04\x86\x32\xBA\x48\x83\x7A\xD7\x7F\x6E\x66\x09\x75\x75\xDA\x43\x87\x57\xBC\x48\x4C\xDD\x13\x07\x83\x30\x5C\x77\x3D\xB3\x62\x20\xDD\x00\x4F\x3D\x41\x59\x7A\x5D\xDF\x32\x73\xE7\x26\x71\x4D\x41\x43\x7A\x20\xFF\x58\x30\xE9\x09\x27\x84\x00\x0F\x80\x33\x83\x45\x3B\xEA\x6C\x3F\x76\x14\xB4\x82",
			"\x21\x3D\x86\x53\xAD\x00\x88\x4D\x1A\x9C\x85\x84\xDF\x2B\x3B\x0E\xF2\x31\x70\x1F\x85\x79\x21\x24\x9F\x4F\xA0\x5F\x7A\x77\x42\x4C\x03\x58\x35\x92\x78\x0E\xDF\x36\x3F\x25\x98\x33\x7D\x55\x80\x01\x10\x97\x79\x81\xEF\x07\x8E\x6D\xBD\x5A\x33\x0B\x81\x27\x8D\x16\x9F\x39\x8A\xDF\x59\x7D\x6D\x6B\x80\x00\x38\xA8\x4B\x50\x06\x48\x8C\xA5\x1A\x3A\x86\x83\x37\x83\x82\xDF\x2A\x42\x17\x9A\x35\x7D\xD5\x7D\x8B\x20\x6D\x97\x8F\x77\x55\x71\x8C\xF6\x3A\x3E\x90\x0A\x36\x8D\xA1\x03\x59\x43\x46\xB2\x3A\x92\xF0\x4A\x23\x21\xC0\x7D\x82\x34\x71\x7E\x92\x98\x22\x91\x18\xD7\x8B\x84\x24\xAF\x3D\x46\x83\x92\x30\x23\x82\x89\x20\x52\x86\x21\x91\x93\x9F\x38\x93\x29\x96\x33\x4A\xAC\x96\x20\xAE\x83\x20\x26\xE5\x8F\x3D\x31\x74\x93\x34\x9F\x97\x97\x40\x39\x9C\x92\x53\xBF\x4D\x4E\xBF\x95\x34\x2A\xE1\x8A\x88\x3F\x9D\x95\x50\x26\x12\x82\x64\x33\x9C\x98\x85\x30\x92\x88\xDF\x29\x51\x32\x9B\x2E\x97\x6A\x90\x8F\x99\x86\x5B\x53\x36\x8A\x28\x98\x6F\x86\x22\x8B\x80\x8F\x3F\xAA\x63\x99\x21\x68\xAB\x70\x8C\x03\x2D\x88\x36\xEF\x30\x57\xDB\x69\x8A\x32\x54\x8A",
			"\x38\x38\xC0\x5C\x81\xD1\x05\x96\x20\xF2\x9C\x95\xAE\x3B\x58\x33\x2E\x86\x23\x93\xB1\x9D\x9C\xAD\x5F\x3F\x90\x5C\xBB\x99\x83\xAD\x58\x33\x35\x86\xAE\x8C\x85\x83\x8A\x33\x98\x8D\xA1\x45\x98\x84\x89\x42\x79\x8B\x20\x7F\x92\x33\xA0\x74\x7C\x9C\x83\x1A\x9A\x8F\x01\x3F\xA2\x40\x57\x92\xA1\x30\x72\x02\x9A\x96\x32\x52\x3D\x82\x2A\xA5\x80\x3B\x90\x82\xEF\x25\x71\x49\x83\x22\x9C\x94\x80\x05\xA6\x00\x08\x9E\x48\xDF\x36\x06\x98\xA3\x30\x55\x33\xA1\x23\xF2\x09\x22\x95\x8D\xA1\x48\x07\x46\xAB\xA1\x42\x2B\x92\x21\xA6\x8A\x97\x3D\x3A\x11\xAB\xA0\x50\x76\x20\xAB\x89\xA7\x4F\x3C\x1A\xAB\x77\x36\x92\x85\x87\x98\x36\x07\x2C\x88\x4F\x3A\xE1\x84\xAC\x36\xA6\xAA\x33\x41\x09\xAD\xA1\x75\x9C\xAD\x48\xAF\xAA\x32\x44\x12\xAE\xA1\x24\xA5\xAF\xB8\x77\xAE\x32\x47\x1A\xAC\x7B\x2F\xAB\x75\x60\x82\x23\x03\x7F\xA3\x36\x12\x62\xAF\x3D\x10\x46\x71\x81\xEE\x52\x7E\xE1\x7F\x78\x24\xCA\x9D\x20\x71\xF8\x66\x78\x66\xDA\xA1\x87\x9D\x5B\x6B\x81\xAB\x70\x26\xE2\x61\x82\xB5\x00\x59\x96\x78\xA0\xA4\xB4\x05\xC9\xA1\x20\xA1\xA1\x26\xB5\x18\x21\x78\xE2\x41",
			"\x70\x27\xE0\x44\x62\x62\x1A\x38\xB7\x45\x67\x52\xB3\x81\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat \"else\" Stat >",
			L"[12][If]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat \"else\" @ Stat >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat \"else\" Stat @ >",
			L"[15][If]< \"if\" \"cond\" \"then\" Stat @ \"else\" Stat >",
			L"[16][If]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[17][If]< \"if\" \"cond\" @ \"then\" Stat \"else\" Stat >",
			L"[18][If]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[19][If]< \"if\" @ \"cond\" \"then\" Stat \"else\" Stat >",
			L"[20][If]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]<< !Block @ >>",
			L"[24][Stat]<< !Do @ >>",
			L"[25][Stat]<< !If @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityOnStat2Tokens, ModuleParserStates, IfElseAmbiguityOnStat2AstInsReceiver>(&IfElseAmbiguityOnStat2TokenDeleter, &IfElseAmbiguityOnStat2LexerData, &IfElseAmbiguityOnStat2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[6][6] = {
			{0, 4, 4, -1, 4, 4, },
			{4, 1, 4, -1, 4, 4, },
			{4, 4, 2, -1, 4, 4, },
			{-1, -1, -1, 3, -1, -1, },
			{4, 4, 4, -1, 4, 4, },
			{4, 4, 4, -1, 4, 5, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguityonstat2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguityonstat2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguityonstat2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguityonstat2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
