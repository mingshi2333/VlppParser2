/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguityOnStat2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStat2ModuleParser.h"

namespace ifelseambiguityonstat2
{
	void IfElseAmbiguityOnStat2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1369; // 11477 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 89;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\xD5\x2C\x00\x00\x51\x05\x00\x00\x09\x00\x01\x82\x80\x06\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x95\x0A\x9A\x0A\x87\x1D\x01\x84\xFF\x19\x9A\x99\x8A\x80\x03\x8D\x8D\x1D\x9F\x9A\x81\x92\x97\x7C\x92\x91\x27\x9F\xA9\x80\x9A\x85\x92\x93\x96\x25\x9D\x9D\x97\x88\x89\x98\x98\x94\x37\xAA\xB9\x8C\x95\x98\x9D\x9E\x9D\x3F\xBC\x86\x8E\x9B\x93\x93\x9C\xA3\x41\xC8\x83\xB6\x99\x84\x9A\x82\xA7\x03\xC4\x87\xBC\x83\xAF\x95\xA4\xAA\x57\xD6\x8B\xBE\x9B\xA8\xA1\xAE\xA1\x51\xCC\x9F\xAA\xA1\xB4\xAD\xB2\xAF\x67\xE0\x82\x92\xA9\x82\x02\x84\xA8\x6B\xE2\xA9\xA4\xB1\xBE\xB1\xBA\xB4\x77\xEA\x81\x8C\xB3\xB0\xAD\xBE\xAD\x03\x83\x2F\xB5\xA5\xA6\xBF\xB8\xC3\x79\xF4\xBB\xB2\xB9\xC0\xC7\xC4\xBB\x8F\xF8\x91\xDA\xBE\x8C\xC7\xC8\xC5\x95\x90\xD9\xD2\xCB\xCC\xC8\xBF\xC3\x80\x8D\xE1\xD7\xCE\xC5\xCC\xCD\xCF\xA2\x9D\x8C\x8D\xAA\x85\x03\xC1\xAC\x1D\x88\x8F\xA4\xC4\xD8\xDA\x85\x03\xAF\xFF\x85\xC3\xD6\xD5\xD0\x05\xDC\x03\x8E\xB3\xD6\xD9\x82\x04\xE1\xD4\xB5\xBA\xCA\x8B\x07\xE4\xD0\xDE\x06\xCD\xBD\xFC\xC8\xDE\xE3\xDE\xEB\xE4\xA0\xD7\xC4\xEA",
			"\xEB\xE9\xEC\xEC\xE4\xDD\x82\x8D\x11\xE4\xEA\xEA\xEC\xEE\xE8\xDE\xE1\xF5\xEF\xEC\xF7\xF4\xF3\xED\xF0\xEF\xE5\xF4\xFE\xC8\x00\x07\xE4\xF6\xE5\xF0\x8C\xD3\xFA\xFC\xFB\x10\x39\x7A\x65\x04\x02\x9C\x65\x7E\x66\x07\x86\x8F\x7C\x82\x0B\x8A\x8C\x83\x83\x0E\x91\x8E\x65\x83\x13\x9A\x62\x05\x81\x15\x92\x87\x68\x85\x1B\x90\x89\x87\x87\x98\x53\x08\x85\x87\x1A\xA5\x69\x80\x88\x26\x9C\x89\x8A\x66\x14\x23\x8B\x89\x89\xD3\x6A\x81\x8E\x87\x24\xA8\x83\x8C\x8C\xE7\x6A\x79\x78\x78\x3B\xAE\x7D\x8C\x00\x12\x7D\x7F\x8D\x79\x16\x2E\x87\x8E\x8D\x1D\x57\x06\x91\x47\x18\x0B\x91\x7F\x89\x35\x91\x9F\x88\x92\x4F\xB2\x89\x8C\x8F\x3A\x99\x98\x97\x96\x3E\x83\x49\x06\x93\xEF\x54\x42\x93\x40\x1B\x20\x93\x92\x95\x55\xB4\x83\x96\x94\x47\xAC\x9D\x44\x07\x66\x9A\x91\x41\x07\x71\x9C\x92\x7E\x41\x1E\x35\x9D\x96\x9D\x50\xAB\x9E\x9D\x9B\x7F\x97\x9B\x9F\xA0\x00\x1F\x0A\x9F\x9D\x72\x88\xAC\x9C\x9A\xFE\x6A\x9C\x6C\x08\x87\xBD\x90\xA3\xA4\x82\x8A\xA4\xA2\xA4\x1D\x61\x01\xA4\xA3\x67\x8E\xA5\xA4\xA6\x69\xB8\x8A\x42\x08\x9B\x9A\x63\x09\xA9\xA2\x89\x44\x08\xAA",
			"\x54\x8D\xA9\xA9\xA7\xAF\x89\xA0\xA9\x42\x25\x2C\xAE\x99\xA8\xAD\xB0\xA9\xAD\xA2\x45\x0A\x4E\x5B\x98\xA2\x72\x60\x6A\x4B\xBF\xB2\x40\x6B\x6A\x7F\x44\xB6\xB3\x5F\xC8\x83\xB5\x49\xB3\xA2\x4A\xBD\x59\x55\xD0\x8E\x72\xB7\x70\xCC\x95\x57\xB7\xB2\xD2\x55\xB2\x76\x4B\xDE\xAE\x4B\xB6\x40\xC5\x87\xBA\xB5\x49\xE5\x82\x40\x5E\x73\xC2\x91\xB8\xBA\xAF\xD4\xA7\xB2\x49\xBA\xC6\xA0\xB2\xBF\x47\xE1\xA2\xB3\xBC\xBC\x59\x79\xBA\xBF\x46\xF4\x80\x0B\xBA\x74\xED\x96\xBF\xB3\xBD\x00\xFC\xB9\xB5\x56\xE3\xB5\xB7\xC0\xC3\x0F\xC9\xBF\xBB\xB4\xFD\x88\xCA\x45\xC0\x03\xEE\x45\xC3\xB7\x25\x6E\x60\xC6\x48\x1B\xFF\xBF\x46\xC7\x12\xE2\x4E\xBE\xC8\xFF\x01\xCB\x6F\xC9\x22\xEC\xCF\xBD\xC0\x01\xF6\xBF\xC7\x47\x18\xD5\x54\xCA\xB3\x20\xD6\xC9\x47\xCD\xEE\xB9\xC3\xCF\x46\x3C\xC6\xCE\xCD\xC9\x34\xCA\x42\x61\xC5\x3F\xD7\xCC\xB6\x68\x01\xC7\xDB\xC0\xD1\x1B\x6E\xCA\xBC\xCC\x55\x4D\xD1\xBD\xD2\x19\x75\xC9\x56\x71\x09\x4E\xD0\x69\xC8\x28\xD9\x4C\xD7\xD2\x2E\x63\xDC\xB5\xD9\x0A\xE0\x66\xDA\xBA\x55\x68\x0B\xD1\x40\x03\xDD\x46\xD7\xDB\xDE\x81\xD2\xC1\x6B\x69",
			"\xC2\x4E\xD6\x40\x76\xDE\xBB\xC7\xC0\x1B\xF3\xD6\x43\xC6\xDE\xBB\xD1\x40\x6E\xC0\x87\xE9\xDD\x40\x86\xC0\x08\xE2\x41\xDE\x83\xC2\xE3\x40\xDE\xBF\x69\xE0\x00\x96\xC6\x43\xE6\x40\x99\xD4\xED\x42\x42\xDE\x8F\xEF\xD9\x42\x41\x11\x73\xC2\x92\x6F\xCD\xE5\x79\xE3\x5F\xA9\xE1\x7D\xC0\x2D\xAE\xEF\x78\x93\xA3\xEA\xE6\x7D\xE8\xA3\xDD\x42\x11\x74\xDE\x90\x79\xED\x42\x43\x3C\xEA\x43\x85\xBF\xC6\x44\x12\xF0\x09\x70\x95\xF1\xA2\x26\x35\xE1\x7D\xEE\x19\xDC\xA3\x42\xD6\x3F\xB3\x46\xAD\x69\x8D\xF1\xC6\x7F\xA7\xD2\xCB\x4A\x40\xD8\x9A\x72\xD7\xF4\x6F\x1B\xE0\xFC\x65\x47\xD9\xCF\xFB\xE0\x41\x0A\x5D\xE6\x9C\xF7\x9E\x9F\xFA\x40\x7E\xB3\xF8\xDD\xD7\xEB\x46\xF2\xF7\xFD\xFD\x09\x6E\xF1\x42\xF6\x9A\x36\x6D\xC0\x22\x77\x20\xF5\x45\x3B\x7D\xE5\x24\x83\xFF\x37\x3D\x7C\x03\xBA\x57\x56\x09\x2A\x83\x7D\x0E\x83\x20\xDF\x46\x26\x76\x9A\x22\x39\x60\x0C\x8B\x7F\xEA\x4A\x24\x3F\x9A\x71\x3E\x05\xD3\x7D\x81\x84\x36\x6D\x3C\x1D\x24\x43\xE5\x33\x56\x20\x0D\x82\x24\x7E\x1E\x89\x20\xF1\x58\x52\x56\xFB\x0C\x39\x21\xE6\x74\x31\x47\x22\x44\x63\x1F\x70\x84",
			"\x84\x09\x37\x86\x41\x3F\x8F\x7D\x88\x39\x7F\x3D\x01\x5D\x83\x40\x42\x8B\x82\xFE\x46\x25\x49\x3D\x89\x50\x0F\xA1\x89\x21\x11\x82\x23\x6D\x84\x5D\x22\x98\x34\x8B\x50\xCD\x23\x39\x88\x14\x9D\x89\xAC\x2F\x8A\x21\x2F\xB1\x87\x81\x81\x5F\x83\xFC\x61\x81\x21\x32\x51\x8E\x4E\x41\x5C\x89\x40\x2A\x83\x70\x36\x80\x04\x4E\x6F\x84\x51\x91\x79\x80\x00\x3A\x83\x24\x88\x59\x8A\x22\xA1\x4A\x86\x4E\x28\x97\x82\x21\x7E\x9A\x6E\x1D\xA4\x5C\x8F\xF2\x2E\x8C\x8A\x06\x33\x87\x40\x49\x87\x8D\x81\x2B\x53\x85\xDD\x61\x23\x14\x83\x29\x91\x40\xAE\x53\x57\x02\x31\x76\x41\x14\x99\x51\x8E\x35\x55\x91\x99\x80\x02\x28\x83\x2B\x93\x22\xAF\x3F\x04\x87\x51\x8F\x40\x39\x88\x33\x8E\x2E\x68\x95\x9A\x38\x8E\x1C\xC0\x4B\x8C\x27\x83\x22\x05\x47\x9F\x45\x9E\x7C\x82\x96\x45\xBE\x92\x20\x2D\x08\x82\x7D\x10\x57\x72\xD4\x46\x23\x8F\x95\x82\x23\x0B\x4A\x91\x7F\x84\x06\x93\x20\xD0\x85\x96\x42\x31\x04\x9B\x31\x81\x25\x75\xCF\x96\x8F\x0C\x5D\x90\x95\x80\x1B\x8B\x96\x76\x95\x05\x30\x89\x5A\x52\x3E\xA7\x9C\x8C\xC7\x81\x20\x0E\x20\x71\x3F\x53\x44\x96\x9C\xEB\x8E",
			"\x96\x41\x3C\x09\x9E\x42\x4D\x7C\x8F\xCA\x66\x23\x23\xDA\x99\x21\x1F\x24\x98\x82\x06\x3A\x97\xD9\x5B\x72\x5D\xE5\x63\x71\x7A\x28\x30\xA2\x48\x71\x66\x7B\x87\xB9\x70\x80\x2A\x38\xA1\xD1\x23\x7A\x64\xF1\x5C\xA1\x77\x18\x8A\x25\x48\x9F\x2D\x70\x99\x25\xA0\x7D\x20\xB1\x38\x00\x52\x66\x24\x96\xBF\x19\x72\xAA\x39\x76\xB7\x2A\x67\x85\x98\x35\xA5\x63\x0E\xA3\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfThenStat",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfThenStat] BEGIN ",
			L"[10][IfThenStat] END [ENDING]",
			L"[11][IfThenStat]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][IfThenStat]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][IfThenStat]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][IfThenStat]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][If] BEGIN ",
			L"[16][If] END [ENDING]",
			L"[17][If]<< !IfThenStat \"else\" @ Stat >>",
			L"[18][If]<< !IfThenStat \"else\" Stat @ >>",
			L"[19][If]<< !IfThenStat @ \"else\" Stat >>",
			L"[20][If]<< !IfThenStat @ >>",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]<< !Block @ >>",
			L"[24][Stat]<< !Do @ >>",
			L"[25][Stat]<< !If @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseAmbiguityOnStat2Tokens, ModuleParserStates, IfElseAmbiguityOnStat2AstInsReceiver>(&IfElseAmbiguityOnStat2TokenDeleter, &IfElseAmbiguityOnStat2LexerData, &IfElseAmbiguityOnStat2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[6][6] = {
			{0, 4, 4, -1, 4, 4, },
			{4, 1, 4, -1, 4, 4, },
			{4, 4, 2, -1, 4, 4, },
			{-1, -1, -1, 3, -1, -1, },
			{4, 4, 4, -1, 4, 4, },
			{4, 4, 4, -1, 4, 5, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<ifelseambiguityonstat2::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseambiguityonstat2::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseambiguityonstat2::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseambiguityonstat2::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
