/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:StatAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStat2StatAst_Traverse.h"

namespace ifelseambiguityonstat2
{
	namespace traverse_visitor
	{
		void StatAstVisitor::Traverse(vl::glr::ParsingToken& token) {}
		void StatAstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
		void StatAstVisitor::Traverse(BlockStat* node) {}
		void StatAstVisitor::Traverse(DoStat* node) {}
		void StatAstVisitor::Traverse(IfStat* node) {}
		void StatAstVisitor::Traverse(Module* node) {}
		void StatAstVisitor::Traverse(Stat* node) {}
		void StatAstVisitor::Traverse(StatToResolve* node) {}

		void StatAstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
		void StatAstVisitor::Finishing(BlockStat* node) {}
		void StatAstVisitor::Finishing(DoStat* node) {}
		void StatAstVisitor::Finishing(IfStat* node) {}
		void StatAstVisitor::Finishing(Module* node) {}
		void StatAstVisitor::Finishing(Stat* node) {}
		void StatAstVisitor::Finishing(StatToResolve* node) {}

		void StatAstVisitor::Visit(StatToResolve* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Stat*>(node));
			Traverse(static_cast<StatToResolve*>(node));
			for (auto&& listItem : node->candidates)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<StatToResolve*>(node));
			Finishing(static_cast<Stat*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void StatAstVisitor::Visit(DoStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Stat*>(node));
			Traverse(static_cast<DoStat*>(node));
			Finishing(static_cast<DoStat*>(node));
			Finishing(static_cast<Stat*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void StatAstVisitor::Visit(IfStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Stat*>(node));
			Traverse(static_cast<IfStat*>(node));
			InspectInto(node->elseBranch.Obj());
			InspectInto(node->thenBranch.Obj());
			Finishing(static_cast<IfStat*>(node));
			Finishing(static_cast<Stat*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void StatAstVisitor::Visit(BlockStat* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Stat*>(node));
			Traverse(static_cast<BlockStat*>(node));
			for (auto&& listItem : node->stats)
			{
				InspectInto(listItem.Obj());
			}
			Finishing(static_cast<BlockStat*>(node));
			Finishing(static_cast<Stat*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

		void StatAstVisitor::InspectInto(Stat* node)
		{
			if (!node) return;
			node->Accept(static_cast<Stat::IVisitor*>(this));
		}

		void StatAstVisitor::InspectInto(Module* node)
		{
			if (!node) return;
			Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
			Traverse(static_cast<Module*>(node));
			InspectInto(node->stat.Obj());
			Finishing(static_cast<Module*>(node));
			Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
		}

	}
}
