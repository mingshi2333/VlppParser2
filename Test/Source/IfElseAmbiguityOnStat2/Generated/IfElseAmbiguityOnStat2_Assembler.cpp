/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseAmbiguityOnStat2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseAmbiguityOnStat2_Assembler.h"

namespace ifelseambiguityonstat2
{

/***********************************************************************
IfElseAmbiguityOnStat2AstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguityOnStat2AstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = IfElseAmbiguityOnStat2CppTypeName((IfElseAmbiguityOnStat2Classes)type);
		switch((IfElseAmbiguityOnStat2Classes)type)
		{
		case IfElseAmbiguityOnStat2Classes::BlockStat:
			return vl::Ptr(new ifelseambiguityonstat2::BlockStat);
		case IfElseAmbiguityOnStat2Classes::DoStat:
			return vl::Ptr(new ifelseambiguityonstat2::DoStat);
		case IfElseAmbiguityOnStat2Classes::IfStat:
			return vl::Ptr(new ifelseambiguityonstat2::IfStat);
		case IfElseAmbiguityOnStat2Classes::Module:
			return vl::Ptr(new ifelseambiguityonstat2::Module);
		case IfElseAmbiguityOnStat2Classes::StatToResolve:
			return vl::Ptr(new ifelseambiguityonstat2::StatToResolve);
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void IfElseAmbiguityOnStat2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = IfElseAmbiguityOnStat2CppFieldName((IfElseAmbiguityOnStat2Fields)field);
		switch((IfElseAmbiguityOnStat2Fields)field)
		{
		case IfElseAmbiguityOnStat2Fields::BlockStat_stats:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat2::BlockStat::stats, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStat2Fields::IfStat_elseBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat2::IfStat::elseBranch, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStat2Fields::IfStat_thenBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat2::IfStat::thenBranch, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStat2Fields::Module_stat:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat2::Module::stat, object, field, value, cppFieldName);
		case IfElseAmbiguityOnStat2Fields::StatToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&ifelseambiguityonstat2::StatToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void IfElseAmbiguityOnStat2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = IfElseAmbiguityOnStat2CppFieldName((IfElseAmbiguityOnStat2Fields)field);
		return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
	}

	void IfElseAmbiguityOnStat2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = IfElseAmbiguityOnStat2CppFieldName((IfElseAmbiguityOnStat2Fields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* IfElseAmbiguityOnStat2TypeName(IfElseAmbiguityOnStat2Classes type)
	{
		const wchar_t* results[] = {
			L"BlockStat",
			L"DoStat",
			L"IfStat",
			L"Module",
			L"Stat",
			L"StatToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityOnStat2CppTypeName(IfElseAmbiguityOnStat2Classes type)
	{
		const wchar_t* results[] = {
			L"ifelseambiguityonstat2::BlockStat",
			L"ifelseambiguityonstat2::DoStat",
			L"ifelseambiguityonstat2::IfStat",
			L"ifelseambiguityonstat2::Module",
			L"ifelseambiguityonstat2::Stat",
			L"ifelseambiguityonstat2::StatToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 6 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityOnStat2FieldName(IfElseAmbiguityOnStat2Fields field)
	{
		const wchar_t* results[] = {
			L"BlockStat::stats",
			L"IfStat::elseBranch",
			L"IfStat::thenBranch",
			L"Module::stat",
			L"StatToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElseAmbiguityOnStat2CppFieldName(IfElseAmbiguityOnStat2Fields field)
	{
		const wchar_t* results[] = {
			L"ifelseambiguityonstat2::BlockStat::stats",
			L"ifelseambiguityonstat2::IfStat::elseBranch",
			L"ifelseambiguityonstat2::IfStat::thenBranch",
			L"ifelseambiguityonstat2::Module::stat",
			L"ifelseambiguityonstat2::StatToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> IfElseAmbiguityOnStat2AstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = IfElseAmbiguityOnStat2CppTypeName((IfElseAmbiguityOnStat2Classes)type);
		switch((IfElseAmbiguityOnStat2Classes)type)
		{
		case IfElseAmbiguityOnStat2Classes::BlockStat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat2::BlockStat, ifelseambiguityonstat2::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStat2Classes::DoStat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat2::DoStat, ifelseambiguityonstat2::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStat2Classes::IfStat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat2::IfStat, ifelseambiguityonstat2::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStat2Classes::Stat:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat2::Stat, ifelseambiguityonstat2::StatToResolve>(type, candidates, cppTypeName);
		case IfElseAmbiguityOnStat2Classes::StatToResolve:
			return vl::glr::AssemblerResolveAmbiguity<ifelseambiguityonstat2::StatToResolve, ifelseambiguityonstat2::StatToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
