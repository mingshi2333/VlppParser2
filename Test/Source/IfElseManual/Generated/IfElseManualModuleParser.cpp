/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseManual
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseManualModuleParser.h"

namespace ifelsemanual
{
	void IfElseManualModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2251; // 20378 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 203;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x9A\x4F\x00\x00\xC3\x08\x00\x00\x09\x00\x01\x82\x80\x0A\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x97\x0A\x9D\x0A\x83\x12\x85\x13\x0A\xAB\x0A\x8F\x1A\x86\x12\x01\x84\xFF\x21\xA2\x81\x9A\x80\x03\x91\x91\x25\xA7\xA2\x89\x9A\x97\x7C\x96\x95\x2F\xA7\xB1\x88\x9A\x85\x96\x97\x9A\x2D\xA5\xA5\x81\x08\x98\x99\x9E\x99\x3F\xB4\xA0\x99\x91\xA3\x95\xA2\x92\x47\xB7\x83\xBE\x9B\xA0\xA1\xA6\xA1\x06\xB6\xB3\x86\xA9\x84\x9D\xAB\xA4\x53\xC8\x8F\xB4\xA1\xAC\xA3\xAC\xAD\x5D\xCC\xA1\xAE\xA3\xB0\xAB\x80\xA9\x58\xE9\x9F\xAA\xA5\xB4\xAF\xB2\xAF\x06\x9F\x97\xAB\xB9\xAC\xB7\xB6\xB1\x77\xE4\xB9\xA6\xB2\x80\xB4\xBA\xB5\x06\x83\x0A\x96\xAD\xB0\xB3\xBC\xB7\x7D\xF0\x87\xC6\xC9\xC0\xBD\xC6\xBD\x8F\xFC\x81\x9E\xB5\xC6\xB9\xC8\xC4\x93\x8A\xD7\xCC\xC9\xCE\xC5\xCE\xC8\x9F\x92\xE6\x9A\xC1\xD0\xCF\xD0\xCF\xA7\xA0\xE9\xC2\xD4\xCB\x80\x87\xB9\x06\x85\x03\xC0\xC3\x86\x03\xD9\xBF\xB8\x95\xE5\x87\x07\xDA\xDC\xDB\xCD\x96\x81\x88\x1D\xD3\x86\x86\x82\xC2\x8B\xC1\xC4\x84\xE0\xE5\xBA\xE6\x85\x0B\x4C\xE5\xDC\xC0\x04\x06\xE9\xD5\xA6\xAD\xCD\xFF",
			"\xD3\xEA\xE6\xED\xEE\xCF\xB9\xC9\xE1\xFE\xDA\xF3\xEC\xF3\x01\x8D\x17\xFF\xE8\xEC\xE8\xF7\xF7\xA4\xED\xDE\xF1\xF0\xF8\xD5\xFA\xD5\xF7\xAC\xF4\xFB\xF6\xFC\xFE\xD4\x07\xEB\x7E\x72\x68\x44\xB0\x63\x7C\x76\x7C\x25\x50\x01\x80\x6A\x11\x0B\x88\x7E\x80\xD9\x50\x8E\x7A\x84\xF3\x7D\x76\x87\x83\x17\xBA\x79\x85\x84\x1B\x93\x88\x6A\x04\x0E\x9A\x88\x87\x88\x22\xA5\x8C\x84\x89\x27\xA2\x63\x05\x88\x29\xAD\x8E\x84\x8A\x2F\xA6\x81\x8E\x8B\xCA\x54\x0C\x8B\x8C\x38\x95\x80\x8E\x8E\x32\xBC\x84\x8C\x79\x06\xA8\x78\x83\x81\xF9\x7F\x87\x81\x05\x37\xBE\x84\x76\x05\x49\x80\x97\x7A\x41\x12\x45\x8F\x91\x90\xE5\x46\x48\x05\x93\x07\x99\x08\x96\x90\xEC\x5A\x0B\x96\x41\x1B\x1F\x94\x97\x98\x53\xA5\x90\x78\x91\x14\x8E\x97\x98\x97\x69\xA8\x9D\x86\x92\xCA\x5C\x02\x9A\x99\x43\xAC\x9F\x9A\x9A\x75\x95\x93\x40\x45\x52\xAB\x9A\x9C\x9D\x45\xB9\x88\x9D\xA0\xCA\x5E\x03\x9E\x9F\x64\x88\xA0\xA1\x7C\x1F\x07\xA9\x9F\x40\x20\x0A\x42\x5F\x9F\x8A\x95\xA0\x02\x08\x8E\x84\xA3\xA1\x9B\x76\xBB\x8B\xA7\x9D\x15\x59\xAC\xA4\xA5\x8F\x8B\xA8\x68\x09\xA2\xA0\xA2\x91\x09",
			"\xA9\xAA\x66\x09\xAB\x3D\xA5\x48\x45\x9F\xA5\x81\x48\x08\xAC\x46\x9D\xA1\xAE\x9B\x9E\x87\x89\x08\xAE\x82\xBC\xAB\xAE\xAE\xB9\xA4\xAA\xA6\xB0\xC5\x83\x4A\x08\xB0\x70\x9F\xAD\xAC\xB1\xC1\x90\xBD\xB0\xB2\xD1\x86\xB3\xAB\x40\x1A\x74\xA7\xB1\x42\x2C\x12\xA4\xB7\xB4\x09\x6E\x0E\xA0\x47\xDA\x97\xB6\xAB\xB3\xD6\xAA\xA9\xB8\xBA\x89\xB5\xAE\xBB\xB6\xA4\xB0\x0C\xB2\xB3\xC3\xAB\xB5\xBD\xBB\x31\x33\xBF\xB4\xBD\xA6\x72\x0A\xBE\xB4\xFC\x94\x73\x0F\xBF\xF6\x89\xB7\xBB\xBD\x07\xC6\xC6\xA4\x0D\x04\xED\xB0\xBE\xC3\xE6\x96\xAC\x79\x0D\x0D\xC9\xC5\xB4\xC4\xEA\x98\xCC\xB8\x9D\x36\x15\xC1\x43\x0D\x1E\xEE\xB8\x0D\xC8\x0F\xD6\xC0\xB9\xC1\x17\xE6\xC5\x49\x0E\x24\xD1\xCF\xBA\xCB\x25\xD6\xAA\x0D\xCB\x19\xEA\xCB\xBF\xCD\x00\xCA\x4B\x0D\xC8\x3C\x34\xCA\x69\x0F\x3E\xC8\xC2\xC4\xCC\x44\xF5\xC6\xA6\x0F\x41\xCA\xCF\xCA\xD1\x4B\xDB\xC1\x43\x0F\x49\xE9\xC3\xD0\xD3\x31\xCD\xD2\xD0\x00\x40\x21\xC1\x11\xD4\xCA\x42\x1C\xD5\xC0\x27\xDA\xC7\xD5\xD5\xEC\x43\x1F\xD4\xCE\x28\xE1\xD6\xCD\x42\x81\x1E\xB5\xBA\x4A\xB6\x6B\x56\x4F\xA4\x3A\x40\x7F\x69\x65\x36",
			"\x77\xD9\x73\xDC\x75\xD5\x6A\xDC\x70\x7C\xC9\x44\xDE\xDD\x49\x79\xD5\xE1\x4B\x83\xC1\x48\x70\xE1\x72\xED\x4F\xDD\x77\x81\xFD\xDD\x77\xE3\xF2\x51\xE3\x41\xE2\xF2\x54\xE6\x4E\xE1\x8D\xEA\x48\xE7\xE2\xDD\x71\xD8\xDC\xE2\x6E\xFE\xD7\xE2\x4A\x9A\xDB\xEE\xE6\xE4\x8C\xE3\xEB\xEA\xE0\x49\x69\xEA\xEB\x48\xB2\xF3\xE1\x4B\xE7\x49\x62\xEB\xDC\xE9\xB0\xEB\x55\xEE\xED\xBF\xF3\xE8\xE5\x5D\xC1\xEA\xE8\xE4\xE6\x9C\xEE\xE7\x49\xF1\x9B\xF8\xEE\xEF\xE9\xCB\xD0\xF3\x4B\xF0\xB1\xD2\xF2\x4B\xF1\xD5\xDD\xE1\xF6\xF6\xD3\xC9\x9A\xEC\xE0\x8E\xD6\xF1\x48\xF3\x96\xFD\xD5\xF9\x40\xC8\xE1\xFC\xF7\xF5\xA5\xC9\x74\xFA\xFA\xCA\xDD\xFF\xDB\xF6\xF1\xE2\x4F\xFB\xEB\xAC\xC9\xFB\xEC\xFE\x97\xD9\xF5\xFF\xF8\xE2\x7F\x1E\xF3\x15\x38\x21\xB8\x09\x28\x7B\xCF\x6B\x7C\x00\x8A\x82\x80\xD6\x5D\x38\x81\xA6\x6C\x80\x04\xEE\x71\x81\xFB\x67\x23\x80\xC9\x3F\x78\xE4\x70\x7B\x7F\x0B\x8E\x81\x73\x01\x98\x80\x70\x32\x3C\x80\x0D\x95\x75\x25\x24\x9F\x7F\x3F\x26\x86\x76\xDA\x55\x81\x84\x1F\x9A\x7C\xF8\x7C\x72\x21\xF4\x68\x77\x85\x12\x89\x49\x0A\x9D\x83\x24\x16\xAD\x81",
			"\x24\x3B\x93\x87\x49\x3E\x8F\x86\x0B\xAE\x81\x87\x0E\x92\x87\x06\xB4\x88\x7C\xFF\x7C\x86\x7E\x30\x93\x7F\x48\x41\x8B\x89\x21\x81\x84\x8A\x27\x90\x6D\x14\x81\x3E\x88\x21\x87\x8A\x85\xD4\x6B\x2C\xE6\x02\x39\x80\x30\xAD\x78\x38\x63\x9D\x89\x15\xDF\x8F\x89\xDB\x49\x4D\x80\x03\x24\x8D\x65\x44\x8D\x84\x38\xA6\x7D\x25\x76\x95\x6E\x4D\x79\x80\x00\x1B\xA7\x24\x8F\x7E\x83\x24\x1F\xA0\x72\x3E\x40\x89\x2B\x90\x49\x3A\x0B\x07\x84\x91\x8C\x2E\x8E\x84\x90\x94\x78\x88\x23\x8A\x28\x8A\x39\x83\x22\x92\x0A\x34\x72\x09\x93\x99\x20\x13\x96\x92\x20\x9B\x99\x92\x42\x3C\x39\x21\xE1\x3D\x76\x20\xA4\x86\x22\x71\x03\x29\x95\x81\x26\x96\x20\x94\x68\x93\x29\x83\x2C\x8F\x4F\x81\x22\x96\xB0\x90\x3A\x42\x2F\x9D\x7F\x84\x16\x39\x21\xD1\x29\x23\x2A\x82\x21\x98\x83\x3C\x93\x21\x0A\x2A\x3C\xAD\x18\x7A\x98\x47\x86\x25\x99\x03\x30\x92\x42\x00\x40\x99\x5D\xA7\x89\x20\xD4\x86\x23\x2F\x86\x29\x9B\x81\x05\x9D\x38\xD3\x9A\x95\x29\xA2\x93\x96\x64\xA3\x9D\x9C\x01\x23\x9A\x70\x64\x97\x39\x6B\x80\x06\x96\x00\x12\x9B\x43\x57\x38\x72\x02\x4E\x9B\x20\xF6\x91",
			"\x98\x3B\x83\x2A\x41\x73\xA8\x97\x83\x25\x3A\x0F\x75\x26\x82\x5C\x07\xB0\x9C\x3D\x84\x8C\x56\x41\x87\x48\x8B\x16\x1F\x87\xA0\xF1\x25\x27\xAB\x0B\xA2\x49\x63\x81\x25\x95\x00\xA2\x23\x1E\x57\x36\xA3\xEA\x19\xA1\x21\x7C\x17\x38\x46\x81\x26\x47\x8F\x83\x25\x0F\x03\xAA\x23\xB2\x14\xA4\x54\x78\xBF\x54\xA5\xED\x5D\xA3\x8A\x26\xA2\x20\x3F\x22\xA2\x21\x5A\x54\xA5\x40\x7F\x04\x9E\x85\x32\x4A\xA7\xEE\x5D\xA1\x98\x40\xA0\x11\xEB\x14\x71\x52\x8F\x87\x41\x47\xF9\x50\xA8\xF6\x04\x0F\xA1\x07\x40\xA0\x21\xD5\x62\x84\x4B\x7B\x21\x64\xF0\x81\x92\x69\x60\x68\x4E\x4D\x91\xAE\x9D\x53\xAE\x66\x09\xF4\x82\x35\x92\x30\x98\xA2\xA8\x26\xAE\x42\x26\x8D\xA2\xF6\x1C\xAF\x40\x26\x98\x52\x90\x25\x26\x84\xAD\x94\x39\xAB\x6B\xAA\x20\x5A\xAA\x35\x25\x8E\xBB\xAA\x34\x95\x83\x95\x5E\xF3\xA2\x9D\x7B\xB4\x4E\xAF\x82\xBE\x9D\xBB\x6F\xA2\x49\x91\x97\x57\xAB\x09\x3D\x99\x0D\x87\x4F\x9B\xC9\x89\x26\xB1\x7F\xBB\xAA\x42\x7D\x96\xB0\x4B\x50\x9A\x20\xF0\x9D\xA0\x16\xEE\xAA\x21\x99\xAD\x99\x67\xC2\x81\x9C\x61\x89\x25\xA5\xD3\xA9\x6D\x24\x95\xA1\x20\x59\x9A",
			"\xB9\x20\x24\x49\x21\xB3\xD4\x3C\xB1\x1C\x85\xB3\x20\xB9\xA4\x55\x24\x57\x48\x9E\xBB\x26\xBD\x96\x83\x31\xB7\x9D\x90\xA6\x22\x97\x37\xB7\x48\xBD\x8A\x23\x9B\xB4\x89\xBB\x9E\x21\x6F\xB3\x80\x07\xBC\xB4\xA8\xA4\x56\x64\xE9\x32\xBB\xB5\x64\x51\x9F\x02\x2C\x4B\x6A\x86\x26\x50\x29\x8A\x6D\x41\x9D\x9D\xB9\x40\x0D\x5C\xB8\x21\x41\xBD\xB3\x00\x08\xBE\x41\x62\xBF\xB6\x85\x3E\xB5\xB8\xED\x43\xAA\x01\x89\x22\xBF\xDD\xA3\xBB\x20\xA8\x4D\xBC\xA9\x7C\x40\xBE\x10\x69\xBF\xBF\x02\x33\x54\x7C\xEC\x38\xA9\x02\xF6\xBA\xBD\x00\x0B\xA7\x7E\xA4\x56\x22\xE1\x86\xC3\xC1\x11\xAA\x21\xB7\x02\xCD\x5C\x85\xB0\xBC\xB8\x02\x3A\xB4\x9D\x25\x24\x5C\xD7\xA2\x6E\x34\xAD\xA3\x23\x85\x8B\xB8\x6D\x76\x76\xB6\x20\xFD\xA3\xC5\x8B\xF4\x44\xBF\x81\x2F\xC4\xC5\xD9\xAD\x5D\x94\x06\x23\xB6\xEA\x25\x22\x5E\x1C\xD4\x4F\xAD\x41\xC1\x21\x1D\xC3\x23\xBB\xEE\x45\x27\xC0\x66\xB4\x3B\x6C\x66\xC2\x20\x46\xC1\xBC\x84\x8C\x62\xB8\xF6\x1B\xC3\xC2\x03\x31\xC9\x40\x38\xBA\x39\x92\x1D\x64\xC8\xEE\x45\xA0\x7C\xB9\xA6\x4A\x08\xE4\x69\x3E\x64\xC3\x23\x72\xF5\xB9\xC6\x3A",
			"\x6B\xCD\x36\x10\xCC\x64\x98\xEC\x3C\xA8\xF8\xAF\xCA\x20\xF7\xB2\xC5\x42\x3D\x65\xCB\xF8\x14\xC8\xCB\x02\x37\xCF\x96\x90\xC8\x69\x39\xF1\x3F\xCB\xF0\xBA\xBF\x40\x6F\xB8\xC7\xD7\x87\x47\xA7\x65\xC8\xC1\x40\x5B\x6C\xC8\xB5\x41\x24\xC0\xBD\xB0\xC2\xD7\x15\xD8\x4E\xF6\xBC\xC0\xC2\x66\x66\xD0\x6A\x72\xC9\x97\x84\x1E\xD7\xC8\x10\xC6\x0A\xA3\x40\x62\xB9\x53\xD2\xCA\xD2\x00\x07\x0A\x3B\xEC\x30\x6A\x30\xEE\xD3\xD0\xB0\xC9\x0A\x73\xC2\x4B\xD3\x52\xC6\x25\xC1\x03\x25\xBC\x9B\x86\x2C\x09\x90\x61\x02\x21\xB7\xC9\xCB\x8C\x96\x59\xCF\x80\x07\xD8\xD6\x67\xC8\x35\x85\x9F\xD0\xD7\x26\x33\xD1\x3E\xAA\xD4\x57\xB4\xFE\xB3\xD9\x81\x0F\x0F\xDA\xA8\x32\xD4\xAD\x1E\xC0\xC0\x08\xD1\x08\xDC\x4E\x60\x03\x44\x86\x21\xC1\x6E\xC2\x23\x0A\xE8\xD7\x6A\x82\xF0\xC0\xD7\x2A\x3B\xD4\x54\x48\x0E\x9F\xBC\xAF\xDE\xDD\x80\x18\x09\xDE\xA6\x2A\x0B\x75\x7B\xD8\xD7\x7E\xC0\x02\x91\xA2\xCA\x37\x12\x6E\x9F\xA4\x83\x03\xCE\xE0\x5D\x00\xE2\xD4\x11\xCA\x21\x87\xCD\xD3\x20\x5F\x12\xE2\xA5\x80\x0E\xC8\x7A\xC6\xE1\x0C\xF7\xCD\x5E\xB5\xC2\xBD\xE2\x3C\xD0\xC4\x0C",
			"\x1A\xE5\x27\xB7\xB4\x55\xE5\x82\xD7\xE2\x20\x66\x01\xE4\x9D\x50\x0E\x9C\x87\x9C\x58\xC2\x69\x09\xE7\x81\x62\xC3\x21\x2B\xEF\xE1\x20\x6B\x1A\xE6\x90\x25\xCE\xE3\x9F\xC0\x05\x0D\xFB\x94\x4E\x14\x32\xE1\x20\xA2\xE6\xE0\xD6\x71\x0C\xEA\xBB\x76\xD2\xB8\xA7\xEE\xE2\xCF\x06\x34\x0D\xD2\x96\x57\x0A\xA9\xF5\xCB\x20\x40\xC6\xE0\x1E\x42\xE4\x54\x7F\x49\x89\xA2\x9B\x60\xAA\xE4\x61\xA0\x26\xB6\xEA\x24\x90\x3A\x30\xEF\x55\x9F\x86\xAE\x97\x35\xED\x81\x74\xE0\xA1\x23\x80\xDD\x6E\x2E\xC8\xBA\x6E\xF0\x9A\x25\xE0\xEA\xA0\xAB\xC2\xF0\xA2\x72\xCC\x60\x00\xF9\x14\x7A\x26\xC6\xE5\x26\xF1\x5B\xF1\x9D\x49\x23\xB9\x26\xCA\xE8\x80\xA0\x58\x9A\x25\xE6\x93\xF0\xA1\x1E\xEE\x26\xF3\x2B\x97\x38\x00\x26\x8A\x26\xC7\x92\x2E\xF4\x36\x2E\xB0\xDC\x8E\xBA\x27\xB6\xB9\x26\xF5\x2D\x3D\xA0\xDC\x9D\xAA\x26\x75\x88\x46\xF6\x9B\x76\xF5\x46\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"HalfIf",
			L"CompleteIf",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"CompleteStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][HalfIf] BEGIN ",
			L"[10][HalfIf] END [ENDING]",
			L"[11][HalfIf]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][HalfIf]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][HalfIf]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][HalfIf]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][CompleteIf] BEGIN ",
			L"[16][CompleteIf] END [ENDING]",
			L"[17][CompleteIf]< \"if\" \"cond\" \"then\" @ CompleteStat \"else\" Stat >",
			L"[18][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" @ Stat >",
			L"[19][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" Stat @ >",
			L"[20][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat @ \"else\" Stat >",
			L"[21][CompleteIf]< \"if\" \"cond\" @ \"then\" CompleteStat \"else\" Stat >",
			L"[22][CompleteIf]< \"if\" @ \"cond\" \"then\" CompleteStat \"else\" Stat >",
			L"[23][IfTail] BEGIN ",
			L"[24][IfTail] END [ENDING]",
			L"[25][IfTail]CompleteStat @ [ \"else\" Stat ]",
			L"[26][IfTail]CompleteStat [ \"else\" @ Stat ]",
			L"[27][IfTail]CompleteStat [ \"else\" Stat @ ]",
			L"[28][IfTail]HalfIf @",
			L"[29][If] BEGIN ",
			L"[30][If] END [ENDING]",
			L"[31][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[32][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[33][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[34][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[35][OtherStat] BEGIN ",
			L"[36][OtherStat] END [ENDING]",
			L"[37][OtherStat]<< !Block @ >>",
			L"[38][OtherStat]<< !Do @ >>",
			L"[39][CompleteStat] BEGIN ",
			L"[40][CompleteStat] END [ENDING]",
			L"[41][CompleteStat]<< !CompleteIf @ >>",
			L"[42][CompleteStat]<< !OtherStat @ >>",
			L"[43][Stat] BEGIN ",
			L"[44][Stat] END [ENDING]",
			L"[45][Stat]<< !If @ >>",
			L"[46][Stat]<< !OtherStat @ >>",
			L"[47][Module] BEGIN ",
			L"[48][Module] END [ENDING]",
			L"[49][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseManualTokens, ModuleParserStates, IfElseManualAstInsReceiver>(&IfElseManualTokenDeleter, &IfElseManualLexerData, &IfElseManualModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsemanual::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsemanual::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
