/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseManual
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseManualModuleParser.h"

namespace ifelsemanual
{
	void IfElseManualModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2289; // 21482 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 241;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\xEA\x53\x00\x00\xE9\x08\x00\x00\x09\x00\x01\x82\x80\x0A\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x97\x0A\x9D\x0A\x83\x12\x85\x13\x0A\xAB\x0A\x8F\x1A\x86\x12\x01\x84\xFF\x21\xA2\x81\x9A\x80\x03\x91\x91\x25\xA7\xA2\x89\x9A\x97\x7C\x96\x95\x2F\xA7\xB1\x88\x9A\x85\x96\x97\x9A\x2D\xA5\xA5\x81\x08\x98\x99\x9E\x99\x3F\xB4\xA0\x99\x91\xA3\x95\xA2\x92\x47\xB7\x83\xBE\x9B\xA0\xA1\xA6\xA1\x06\xB6\xB3\x86\xA9\x84\x9D\xAB\xA4\x53\xC8\x8F\xB4\xA1\xAC\xA3\xAC\xAD\x5D\xCC\xA1\xAE\xA3\xB0\xAB\x80\xA9\x58\xE9\x9F\xAA\xA5\xB4\xAF\xB2\xAF\x06\x9F\x97\xAB\xB9\xAC\xB7\xB6\xB1\x77\xE4\xB9\xA6\xB2\x80\xB4\xBA\xB5\x06\x83\x0A\x96\xAD\xB0\xB3\xBC\xB7\x7D\xF0\x87\xC6\xC9\xC0\xBD\xC6\xBD\x8F\xFC\x81\x9E\xB5\xC6\xB9\xC8\xC4\x93\x8A\xD7\xCC\xC9\xCE\xC5\xCE\xC8\x9F\x92\xE6\x9A\xC1\xD0\xCF\xD0\xCF\xA7\xA0\xE9\xC2\xD4\xCB\x80\x87\xB9\x06\x85\x03\xC0\xC3\x86\x03\xD9\xBF\xB8\x95\xE5\x87\x07\xDA\xDC\xDB\xCD\x96\x81\x88\x1D\xD3\x86\x86\x82\xC2\x8B\xC1\xC4\x84\xE0\xE5\xBA\xE6\x85\x0B\x4C\xE5\xDC\xC0\x04\x06\xE9\xD5\xA6\xAD\xCD\xFF",
			"\xD3\xEA\xE6\xED\xEE\xCF\xB9\xC9\xE1\xFE\xDA\xF3\xEC\xF3\x01\x8D\x17\xFF\xE8\xEC\xE8\xF7\xF7\xA4\xED\xDE\xF1\xF0\xF8\xD5\xFA\xD5\xF7\xAC\xF4\xFB\xF6\xFC\xFE\xD4\x07\xEB\x7E\x72\x68\x44\xB0\x63\x7C\x76\x7C\x25\x50\x01\x80\x6A\x11\x0B\x88\x7E\x80\xD9\x50\x8E\x7A\x84\xF3\x7D\x76\x87\x83\x17\xBA\x79\x85\x84\x1B\x93\x88\x6A\x04\x0E\x9A\x88\x87\x88\x22\xA5\x8C\x84\x89\x27\xA2\x63\x05\x88\x29\xAD\x8E\x84\x8A\x2F\xA6\x81\x8E\x8B\xCA\x54\x0C\x8B\x8C\x38\x95\x80\x8E\x8E\x32\xBC\x84\x8C\x79\x06\xA8\x78\x83\x81\xF9\x7F\x87\x81\x05\x37\xBE\x84\x76\x05\x49\x80\x97\x7A\x41\x12\x45\x8F\x91\x90\xE5\x46\x48\x05\x93\x07\x99\x08\x96\x90\xEC\x5A\x0B\x96\x41\x1B\x1F\x94\x97\x98\x53\xA5\x90\x78\x91\x14\x8E\x97\x98\x97\x69\xA8\x9D\x86\x92\xCA\x5C\x02\x9A\x99\x43\xAC\x9F\x9A\x9A\x75\x95\x93\x40\x45\x52\xAB\x9A\x9C\x9D\x45\xB9\x88\x9D\xA0\xCA\x5E\x03\x9E\x9F\x64\x88\xA0\xA1\x7C\x1F\x07\xA9\x9F\x40\x20\x0A\x42\x5F\x9F\x8A\x95\xA0\x02\x08\x8E\x84\xA3\xA1\x9B\x76\xBB\x8B\xA7\x9D\x15\x59\xAC\xA4\xA5\x8F\x8B\xA8\x68\x09\xA2\xA0\xA2\x91\x09",
			"\xA9\xAA\x66\x09\xAB\x3D\xA5\x48\x45\x9F\xA5\x81\x48\x08\xAC\x46\x9D\xA1\xAE\x9B\x9E\x87\x89\x08\xAE\x82\xBC\xAB\xAE\xAE\xB9\xA4\xAA\xA6\xB0\xC5\x83\x4A\x08\xB0\x70\x9F\xAD\xAC\xB1\xC1\x90\xBD\xB0\xB2\xD1\x86\xB3\xAB\x40\x1A\x74\xA7\xB1\x42\x2C\x12\xA4\xB7\xB4\x09\x6E\x0E\xA0\x47\xDA\x97\xB6\xAB\xB3\xD6\xAA\xA9\xB8\xBA\x89\xB5\xAE\xBB\xB6\xA4\xB0\x0C\xB2\xB3\xC3\xAB\xB5\xBD\xBB\x31\x33\xBF\xB4\xBD\xA6\x72\x0A\xBE\xB4\xFC\x94\x73\x0F\xBF\xF6\x89\xB7\xBB\xBD\x07\xC6\xC6\xA4\x0D\x04\xED\xB0\xBE\xC3\xE6\x96\xAC\x79\x0D\x0D\xC9\xC5\xB4\xC4\xEA\x98\xCC\xB8\x9D\x36\x15\xC1\x43\x0D\x1E\xEE\xB8\x0D\xC8\x0F\xD6\xC0\xB9\xC1\x17\xE6\xC5\x49\x0E\x24\xD1\xCF\xBA\xCB\x25\xD6\xAA\x0D\xCB\x19\xEA\xCB\xBF\xCD\x00\xCA\x4B\x0D\xC8\x3C\x34\xCA\x69\x0F\x3E\xC8\xC2\xC4\xCC\x44\xF5\xC6\xA6\x0F\x41\xCA\xCF\xCA\xD1\x4B\xDB\xC1\x43\x0F\x49\xE9\xC3\xD0\xD3\x31\xCD\xD2\xD0\x00\x40\x21\xC1\x11\xD4\xCA\x42\x1C\xD5\xC0\x27\xDA\xC7\xD5\xD5\xEC\x43\x1F\xD4\xCE\x28\xE1\xD6\xCD\x42\x81\x1E\xB5\xBA\x4A\xB6\x6B\x56\x4F\xA4\x3A\x40\x7F\x69\x65\x36",
			"\x77\xD9\x73\xDC\x75\xD5\x6A\xDC\x70\x7C\xC9\x44\xDE\xDD\x49\x79\xD5\xE1\x4B\x83\xC1\x48\x70\xE1\x72\xED\x4F\xDD\x77\x81\xFD\xDD\x77\xE3\xF2\x51\xE3\x41\xE2\xF2\x54\xE6\x4E\xE1\x8D\xEA\x48\xE7\xE2\xDD\x71\xD8\xDC\xE2\x6E\xFE\xD7\xE2\x4A\x9A\xDB\xEE\xE6\xE4\x8C\xE3\xEB\xEA\xE0\x49\x69\xEA\xEB\x48\xB2\xF3\xE1\x4B\xE7\x49\x62\xEB\xDC\xE9\xB0\xEB\x55\xEE\xED\xBF\xF3\xE8\xE5\x5D\xC1\xEA\xE8\xE4\xE6\x9C\xEE\xE7\x49\xF1\x9B\xF8\xEE\xEF\xE9\xCB\xD0\xF3\x4B\xF0\xB1\xD2\xF2\x4B\xF1\xD5\xDD\xE1\xF6\xF6\xD3\xC9\x9A\xEC\xE0\x8E\xD6\xF1\x48\xF3\x96\xFD\xD5\xF9\x40\xC8\xE1\xFC\xF7\xF5\xA5\xC9\x74\xFA\xFA\xCA\xDD\xFF\xDB\xF6\xF1\xE2\x4F\xFB\xEB\xAC\xC9\xFB\xEC\xFE\x97\xD9\xF5\xFF\xF8\xE2\x7F\x1E\xF3\x15\x38\x7B\xE7\x6B\x78\x80\x07\x82\x80\xEB\x5D\x35\x80\xD3\x49\x85\x81\xEE\x61\x83\xFD\x27\x23\x81\xE4\x1F\x78\x72\xF0\x7B\x7C\x05\x8B\x89\x73\x00\x95\x80\x38\x17\x95\x71\x4B\x21\x86\x76\xDA\x52\x86\x83\x1C\x9A\x7C\xF8\x7C\x72\x21\xF4\x68\x77\x84\x0F\x9E\x79\x00\xA4\x85\x84\x04\xBF\x7F\x1F\x13\x92\x7D\xFE\x19\x8B\x85\x0D\xBD\x76",
			"\x81\x37\x99\x84\xFB\x73\x73\x24\x1A\xB5\x86\x88\x25\x98\x72\x60\x06\x81\x88\x14\x8B\x87\x7C\x00\x0B\x88\x10\x9A\x8A\x87\xFE\x6B\x2A\x89\xFE\x74\x8A\xFD\x4E\x87\x39\xDC\x41\x83\x38\x4F\x8D\x26\x6C\x09\x83\x8D\x1B\xA5\x8A\x8B\x21\x27\x8D\x0F\xA3\x20\x8D\x1D\xAA\x25\x8D\x56\x95\x30\x1C\xAD\x89\x28\x35\x98\x82\x25\x76\x82\x87\x1B\xC9\x43\x8E\xF4\x49\x2D\x8F\x00\x0E\x87\x49\x00\x90\x74\xF9\x00\x92\x8A\xED\x5A\x08\x07\x85\x94\x7B\x84\x08\x95\x6F\x85\x94\x71\x1E\x8C\x9A\x21\x3C\x8F\x91\x20\x93\x8A\x20\xE5\x21\x84\x93\x84\x21\x87\x92\x00\x1C\x92\x26\x8A\x2C\x37\x84\x00\x90\x73\xA5\x86\x22\x71\x03\x29\x95\x81\x00\x94\x72\x08\x3D\x8B\x0F\x83\x21\x97\x81\x20\x95\x96\x02\x31\x90\x74\x0A\x27\x94\x85\x16\x39\x21\xD1\x29\x23\x2A\x82\x21\x98\x83\x2F\x92\x21\xEA\x34\x54\xE6\x49\x91\x30\x64\x97\x3C\x72\x00\x40\x98\x2F\xED\x72\x21\x68\x86\x27\x97\x06\x36\x9B\x40\x45\x95\x38\x85\x1A\x9C\x98\xD3\x89\x20\xE5\x18\x74\x73\x5E\x82\x99\x9C\x06\x34\x71\x27\xCD\x94\x56\xCA\x44\x42\x96\x71\x2A\x23\x3B\xB6\x92\x9F\x67\x8A\x22\x41\xA6\x84",
			"\x94\x07\xA5\x22\x0F\xEB\x21\x82\x5C\x0B\x80\x97\x1C\x57\x35\x90\x56\x41\xA2\x21\x74\x17\x39\x1E\xAD\x0C\x82\x50\xB5\x0F\x3A\x25\x2F\x57\x41\x89\x26\x0F\xEB\x00\x95\x95\xFB\x82\x23\x1D\x16\xAE\x97\x8C\x89\x20\x0F\xD7\x38\xA1\x40\x36\x4E\xA3\x81\x39\x0E\x9F\x0A\x2B\x5B\x44\x86\x2A\x0F\xEB\x20\x97\x57\x2B\xA3\x23\x1E\x1C\xA9\x21\x15\x65\xA2\x20\x7C\x01\xA6\x42\x5A\x47\xA7\x80\x3D\x0F\x3A\x98\x72\x4D\x4F\x80\x0E\x0E\x9A\xA0\x4B\xA8\x00\x1F\x0E\x3D\x89\x21\x53\x05\x85\x94\x3D\x80\x99\x5F\x50\x80\x17\x3A\x22\x0D\xA7\x40\x78\x5B\x24\xDA\x71\x83\x21\xA7\xB1\x38\x4F\x85\x9E\xA8\xD3\x20\x92\x90\xD1\x20\x6F\xAC\xA3\x9E\x90\x56\x87\x4F\x83\xA9\x6A\x31\x84\x48\x86\xAF\x81\x20\x90\x94\xF6\x25\x20\x94\x21\x80\x92\x5D\xDB\xAB\x6C\x83\x21\x80\x53\x42\x58\x4D\x08\xE5\xA6\x34\xB2\x8A\x27\x93\x6B\xA2\x4B\x21\x87\x46\x92\x7D\xAA\xA9\xB0\x07\x5C\x9A\x40\x75\xA1\x3F\xC5\x89\x22\xA4\x00\x1A\xAF\x57\xFC\xAE\xAC\xD1\x18\xB0\xB0\xA4\x58\x4F\x37\xFE\x82\x48\xC9\xA4\xB6\x20\x98\xB4\xB0\x6A\x78\x48\x9E\x76\xA4\x54\x99\xF4\x99\x9D\x42\x79",
			"\x8B\xAE\x21\x76\xA0\x9E\x62\x66\x37\x30\x81\x23\xB4\x77\x78\x4C\xA4\xB8\xBD\xAF\x36\x87\xB9\xB0\x52\x48\x4E\x91\x07\x4D\xB5\x6C\x86\x26\xB5\x4B\x45\xBD\x5D\x57\x53\x94\x9D\x37\xBC\xAA\x70\x88\xB8\xB2\x42\x5E\x4B\x75\xC6\xBA\x20\x50\x98\x9C\x96\xCF\xB4\x4C\x9F\x41\xBD\xB2\xD3\x30\xB6\xBA\xA1\xBC\xB2\xD5\x26\x3D\xB7\xF3\x96\x50\xAD\x39\x6F\x22\x42\x4C\x48\xBA\x52\x46\x54\x88\x4A\x6D\x43\x63\xE9\xB2\x49\x46\x5B\xB8\xBA\xDD\xAA\x22\x7E\x86\x24\xBE\xFE\xA4\x50\xB4\xD5\xB6\x51\x98\x52\xB1\x21\x01\xCB\xBD\x5D\x78\x48\x57\x7F\xE2\xB1\xC1\x84\x20\x43\xBF\x10\xC7\x43\xAC\x2E\xBD\x5D\xA6\x9C\xC2\x20\x17\xC6\x20\x82\xF4\x48\x4E\x95\xB1\x9A\x48\x16\x2C\xC0\x00\x21\xCF\xC0\x12\xC7\x45\x5B\x13\xD6\x52\x41\x9F\xC1\x20\xEA\x82\x22\xB9\x2E\xC2\x48\xB9\x64\xBB\xBC\xEA\x00\xBB\x20\x2C\xD9\xC5\xDA\x70\xB6\x21\xE3\x86\x26\xC1\x42\xD9\xB6\xD4\x6E\x55\xC1\x81\x06\xC9\xC3\xF1\xA3\xC9\x44\x44\xB5\xBF\x76\x72\x59\xC6\xEE\x57\x54\x96\xD1\x49\x9B\xF0\x96\x53\x60\xF8\xB4\x39\xB6\x3C\xCC\xCB\x81\x0D\xC9\xC9\x74\x4C\x62\x8A\xEC\x30\xC7\x13",
			"\xD0\x4D\xC2\x06\xCD\x5D\xC7\x58\xCC\x3C\x80\xB4\xC0\x00\x3C\xB6\x4A\x97\xBD\xCA\x6C\x4B\x79\xCB\x20\xDA\xB1\xCE\x70\x83\xD1\x21\x40\xF5\x33\xCF\xEC\x2C\x64\x9D\xF1\x32\xAB\x3B\xC6\xD2\x20\x23\xCF\xBF\x81\x3D\x6B\xCD\xF8\x2A\xCE\xCD\x80\xD0\xCC\x94\xA4\x58\x69\x45\xE8\x33\xCE\x77\xCB\xC2\x9E\xD5\xC4\xD0\x3E\xE5\x22\xA8\xA3\xC2\xD1\x79\xCB\xCC\x3D\xF1\x83\x21\xD2\xBE\xA7\x43\xD6\x61\xCD\xCE\x00\x3E\xBE\xAF\x88\xD1\x3E\xD7\x1E\xDA\x34\x45\xE9\x9A\x21\xB7\xC3\x21\x6F\xB5\xB4\x55\x22\x0E\x50\x68\x2A\xC1\xDA\x40\x67\xC2\xD2\x21\x46\x0C\x9A\x96\x50\x68\x96\xCA\xD1\x20\xD5\xAA\x30\x4F\x48\x1A\xD0\x9D\x3B\xDF\xD6\xA6\x8A\x27\xBE\xAA\xCE\x5F\x12\x21\x61\x04\x60\xF9\xD4\x6A\x2E\x70\xD5\xB9\xA4\xDB\xD5\x5A\xEC\x39\xC5\xB8\xCC\xDE\xBB\x4C\x00\xDA\x77\x4F\xDC\x56\xF0\xCD\xC5\xB3\xA4\x5E\x09\x7A\xEC\x3F\x08\xD7\x33\xC7\x40\x12\xC1\xDC\xF6\x10\x09\x64\x12\xA6\x20\xC1\x9B\xDD\x5D\x28\x21\x63\xC3\x87\xD2\xDC\x7B\x52\x0A\xDA\x4B\x59\xDA\xC5\x10\xEB\xDB\xB9\xAA\x35\x0A\x7F\xF1\x3A\x09\xD7\x39\xE1\xB5\x9B\xE2\x35\x2B\x15\xE2\xDC",
			"\xF5\xD0\xA6\x41\x5A\xC5\xE1\xF8\x0A\x94\xD6\x25\xCA\x20\xCB\x8C\xE4\x4F\x2D\x21\x63\xCC\x11\xED\xE4\x6A\x5C\x07\xE4\xF6\x0D\x0D\xDE\x38\xF0\xD0\xC9\xA6\x3F\x0A\x8F\xE8\x37\x09\xD7\x21\xEB\xC8\x92\xE1\x3F\x30\x3D\xE1\x3E\x07\xEA\xC4\x43\xDC\x53\xE8\xEA\x24\x09\x64\x76\xC3\x21\x9B\xB4\xE6\x53\x32\x21\x63\xC7\x39\xFC\xEA\xBB\x66\x09\xAC\x52\x54\xE0\xCB\x60\xE2\xE8\xD3\xA8\x3A\x0D\xA7\xE8\x35\xE3\x2A\xC9\xEF\xD2\xBA\xEA\x35\x36\x25\xED\x5D\x26\xF8\xC9\xA3\x83\x27\xCA\xBA\xE2\x31\x0E\x21\x7E\x5D\x18\xAB\xBB\x72\xA4\x90\x90\x2B\x62\xAA\x25\x21\xBA\x2B\xF0\xAD\x9C\x84\xB0\x24\x30\xF3\xED\x7B\x9D\x90\x15\xFA\x25\xF2\x77\xD2\x2A\xB5\xA7\x20\x94\x9D\x1D\xF7\xAE\xFB\x9F\xF3\xC9\x9E\xFB\x9E\xE6\x40\x04\x7C\x94\x7A\x25\xEA\xA5\x2B\xF5\xBB\xF9\x95\x24\xB4\xB9\x25\xEC\xE2\x8B\x9F\x3C\xBA\x26\xF6\xB0\xFB\x9D\x5C\xAB\x2B\xF6\x91\x22\x94\xCA\x0B\x98\xB2\x54\x42\xF6\x26\xCC\x8B\xF0\xB3\x3A\x3A\xB0\x4C\x4A\xFB\x8E\x5A\x59\xB3\x9F\xBB\xA8\x41\xF4\x9B\x71\xFA\xC3\xC0\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"HalfIf",
			L"CompleteIf",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"CompleteStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][HalfIf] BEGIN ",
			L"[10][HalfIf] END [ENDING]",
			L"[11][HalfIf]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][HalfIf]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][HalfIf]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][HalfIf]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][CompleteIf] BEGIN ",
			L"[16][CompleteIf] END [ENDING]",
			L"[17][CompleteIf]< \"if\" \"cond\" \"then\" @ CompleteStat \"else\" Stat >",
			L"[18][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" @ Stat >",
			L"[19][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" Stat @ >",
			L"[20][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat @ \"else\" Stat >",
			L"[21][CompleteIf]< \"if\" \"cond\" @ \"then\" CompleteStat \"else\" Stat >",
			L"[22][CompleteIf]< \"if\" @ \"cond\" \"then\" CompleteStat \"else\" Stat >",
			L"[23][IfTail] BEGIN ",
			L"[24][IfTail] END [ENDING]",
			L"[25][IfTail]CompleteStat @ [ \"else\" Stat ]",
			L"[26][IfTail]CompleteStat [ \"else\" @ Stat ]",
			L"[27][IfTail]CompleteStat [ \"else\" Stat @ ]",
			L"[28][IfTail]HalfIf @",
			L"[29][If] BEGIN ",
			L"[30][If] END [ENDING]",
			L"[31][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[32][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[33][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[34][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[35][OtherStat] BEGIN ",
			L"[36][OtherStat] END [ENDING]",
			L"[37][OtherStat]<< !Block @ >>",
			L"[38][OtherStat]<< !Do @ >>",
			L"[39][CompleteStat] BEGIN ",
			L"[40][CompleteStat] END [ENDING]",
			L"[41][CompleteStat]<< !CompleteIf @ >>",
			L"[42][CompleteStat]<< !OtherStat @ >>",
			L"[43][Stat] BEGIN ",
			L"[44][Stat] END [ENDING]",
			L"[45][Stat]<< !If @ >>",
			L"[46][Stat]<< !OtherStat @ >>",
			L"[47][Module] BEGIN ",
			L"[48][Module] END [ENDING]",
			L"[49][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseManualTokens, ModuleParserStates, IfElseManualAstInsReceiver>(&IfElseManualTokenDeleter, &IfElseManualLexerData, &IfElseManualModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsemanual::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsemanual::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
