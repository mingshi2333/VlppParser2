/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseManual
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseManualModuleParser.h"

namespace ifelsemanual
{
	void IfElseManualModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1940; // 17560 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 148;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\x98\x44\x00\x00\x8C\x07\x00\x00\x09\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x97\x0A\x9B\x0A\x80\x12\x85\x12\x0A\xB8\x41\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x92\x26\xFF\x68\x86\x9B\x93\x91\x96\x92\x0A\xA9\xAA\x91\x99\x91\x91\x91\x8D\x1C\xB5\xB4\x8C\x9B\x9E\x95\x9E\x98\x39\xBC\x81\xBE\x93\xA0\xA2\x82\x99\x2F\xA7\xBF\x8A\xA5\xA4\xA7\xA2\x9D\x09\xB8\x86\x92\xA3\x80\xA7\xA4\x90\x57\xB3\x8D\xB8\xAB\xAA\xAF\xA6\xA1\x5F\xC4\xA1\xA6\xA5\xA8\xAB\xB0\xA7\x65\xE0\xA9\xA2\xBB\xB4\xB2\x80\xAB\x09\x82\x0A\x94\xAF\xB6\xB1\xB6\xB4\x75\xEA\xB9\xAC\xBB\xBE\xB5\x80\xB8\x67\xDC\x81\xDE\xA3\x83\x03\xB9\xAC\x49\x82\xF7\xAA\xCD\xB8\xBF\xBE\xBB\x8D\x8C\xCF\xDA\xB3\xCC\xBD\xCA\xBF\x22\x90\xD7\xCE\xC9\xCC\xC9\xCE\xCB\x9F\x98\xC0\xCB\xC4\xC1\xC9\xD3\xCD\x92\xA1\xDC\xC3\xD6\xD1\x90\x87\xA8\x0A\x85\x07\xDD\xA1\x96\x02\x84\xB9\xB4\x88\xFA\xC9\x88\x83\xAB\xDD\xC1\x89\xA7\xC0\x0E\x8E\xD9\x86\x05\xD9\xC0\x8A\x8B\x17\xDF\xDC\xD1\xE1\x90\x0D\x48\xCE\xEA\x8E\x02\xE9\xD7\xE6\xD7\xB9\xDA\xE9",
			"\xEB\xEB\xE9\xEF\xEC\xDC\xE1\xDE\xE2\xF0\xF3\x80\x88\xD8\xDF\xA8\xC2\xEC\xDA\xF7\xE4\xED\xF6\xEF\xAA\xE9\xCC\xF2\xFB\xF6\xCD\xFA\xEE\xE9\xF8\xF1\xF4\xF8\x0A\xEA\xF8\xFA\x51\x0C\x72\x7E\xF4\x74\x73\x07\x7F\xFB\x49\x44\x04\x82\x05\xB7\x7D\x82\x67\x0F\xA0\x61\x86\x68\x0E\x95\x80\x86\x85\x12\x98\x84\x87\x85\x9E\x55\x0C\x82\x86\xAB\x60\x83\x7E\x88\xF6\x5C\x89\x86\x67\x16\x1F\x86\x8B\x86\x27\xAD\x8C\x8B\x8B\x21\xAB\x8C\x66\x44\xE8\x64\x70\x82\x8D\x09\xB8\x83\x85\x8C\x2E\xBC\x80\x8F\x88\x32\x80\x9D\x8E\x90\x3F\xA5\x80\x68\x06\x2A\x83\x92\x71\x06\x49\x85\x99\x7E\x41\x1A\x0D\x9E\x8F\x94\xA9\x54\x45\x8F\x78\x58\x82\x4C\x07\x80\x3A\xA4\x81\x4A\x07\x52\xA9\x6F\x05\x98\x46\x8E\x9C\x7E\x97\x67\x81\x95\x98\x95\x6B\x84\x9C\x9B\x93\x59\xB7\x81\x9C\x00\x16\x57\x95\x7B\x9D\x72\xB8\x99\x8F\x9C\x3B\xAE\x99\x69\x08\x64\xB0\x9A\x9D\x9F\x6D\x85\xA2\xA1\x9E\x01\x62\x01\xA1\x9A\x4A\x87\xAB\x9F\xA0\x68\x89\x43\x08\x97\x7C\x91\xAD\x96\x9A\x8E\x84\xA9\xA6\xA5\x95\x98\xA1\x7C\x46\x76\x88\xAF\xA2\xA8\x9A\x8C\xA6\x98\x81\xF7\x66\x0B\xA0\xAA",
			"\x9E\xAC\xAD\xA2\xA9\x6F\xB0\xA9\x6B\x09\xAB\xB8\x88\x09\xAD\x9D\xA0\x69\x08\xAE\x90\xAD\xA7\xA7\xAB\xAE\xA7\xAF\xAC\x66\x2A\x3C\xA4\xA8\xA7\xBD\x80\xB3\xB1\xAC\x09\x6B\x06\xB3\xA8\xD0\xA5\xA1\xB0\xB3\xCB\xA9\x6C\x0B\xB3\xD2\x95\xB6\xA2\xAC\xDB\x93\xBE\x9E\x70\x2D\x18\xB7\x7E\x0B\x94\x89\xB2\xB3\x40\x30\x22\xBE\xAD\xAE\xE7\xA6\xB4\xB4\xBB\xEF\x82\x41\x0E\xBA\xCA\xB0\xBF\xB7\xA6\xEB\xBA\x92\x0C\xBD\xED\x87\xB9\xBE\xBF\xF5\xBA\x93\x0C\xBF\xF1\x80\xCD\xBD\xB4\xC8\x86\xC5\xC0\x00\x34\x04\xC9\x69\x0D\xE5\x8A\xC7\xBE\x42\x37\x0E\xCD\xB6\xB6\xF8\x81\xC2\xC7\xC5\x73\xB8\x06\xC5\xC6\x07\xD9\xB6\xBC\xC7\x02\x6F\x11\xC4\x00\x74\x6A\x76\x6D\x57\x32\x78\x66\x4C\x69\xAF\x43\x6D\xCB\xCB\x83\x71\xC4\x6A\x4C\x36\xE6\x63\xCD\x5C\x59\x79\xCA\x78\xCE\x59\x7B\xC6\x42\xCB\x30\xC1\xD9\x48\xD1\x02\x69\xC5\x7E\xCF\xF5\x42\xD4\xCF\xD2\x46\xE6\x4C\xD2\x4C\x4E\xC2\x48\xD2\x7A\x53\xD4\xD2\xD5\xD4\x23\x57\xD0\x02\xD7\x40\xEC\xC7\xD0\x99\x2B\xF2\xC3\xD8\xCF\x5D\x59\xDA\xD7\x47\x5E\xC1\x7A\xDB\xDA\x1D\x6F\xD0\xDE\xD7\x60\xE9\x42\xDF\xDA\x77",
			"\xDA\xD4\xDD\xCF\x5C\xEC\xD4\xD9\xDF\x1E\x7B\xD9\xD8\xE0\x1D\x6D\xDC\xDE\xD8\x26\x42\xE5\xCC\xE1\xFF\x1E\xDA\xD1\xD8\x66\xC9\xEF\xD2\x69\x79\xD4\xD5\xE5\xD5\x01\x75\xDB\xD4\xE2\x23\x57\xE7\xDB\xD0\x87\xD1\xED\xD7\xDF\x9C\xDF\x4E\xE6\xE4\x68\xCB\xE5\xE9\xE0\x27\xF2\x45\xDB\xCD\x29\x6F\xEA\xCE\xDD\x8C\xC6\xE3\xE3\xEA\x85\xED\xE4\xEC\xEE\x8D\xE4\xE2\xEB\x47\xB2\xFF\xC1\xEC\xE3\xA7\xE3\xE3\xE4\xD4\xBC\xC5\xFE\xDD\xEA\x45\xC9\xF5\xEE\xEE\x9B\xFF\xEC\xE9\xA8\xF5\x41\xFD\xD3\xF0\xBC\xD6\xF0\xDF\xF2\x06\x46\x67\xEE\xF4\xB9\xC7\xF8\xE4\x00\xDE\xEA\xE0\xFB\x3F\xCA\xD3\xF0\xE9\x57\x5E\xE5\xFD\xF3\xF9\xE9\xE1\xFB\xFB\x60\xED\xE1\xE0\xEC\xEA\xC5\x43\x6A\xF7\xF6\x1D\x7D\x6F\xD2\x4C\xB2\x3C\x75\x00\xE7\x73\x81\xFB\x63\x25\x80\xB3\x66\x24\x02\xC2\x76\x24\xFF\x74\x62\x26\x0E\x99\x71\x56\x11\x8F\x6B\xAC\x0B\x87\x7A\x0A\x8C\x73\x05\xFC\x7D\x7E\x32\x54\x86\x7D\x7A\x43\x0B\xF1\x28\x63\x85\xFA\x47\x7E\x6B\x4C\x61\x27\x05\xD6\x7A\x68\xEB\x66\x86\x20\x2E\x8A\x20\xD3\x56\x77\x83\x03\x08\x46\x86\xCC\x62\x20\x08\x81\x28\x87\xF9\x43\x24",
			"\x69\x3D\x83\x23\x05\x94\x84\x39\x81\x14\x87\x38\xBC\x2A\x3A\x42\x0C\x08\x40\x26\xB9\x81\x20\x3B\x80\x02\x13\xBE\x8B\x21\x25\xB1\x32\x21\x51\x8C\x69\x11\x82\x28\x88\x83\x0B\x3C\x7A\x2F\x83\x20\x0A\xD7\x89\x21\xE8\x14\x7E\x8C\x54\x90\x8A\x42\x68\x82\x8C\x19\xAB\x8C\x8C\x06\x35\x39\x42\x56\x71\x88\x9A\x61\x08\x41\x4A\x6A\x53\xF1\x62\x08\x40\xA6\x64\x03\x84\x63\x08\x42\xD7\x51\x47\x78\x32\x08\x41\x8A\x4C\x47\x79\x19\x08\x41\x25\x49\x47\x7E\x0C\x08\x54\x8F\x08\xE7\x01\x92\x2B\x87\x78\x0D\x08\x57\x83\x82\x47\x79\x0C\x3C\x8A\x25\x03\x23\x8A\x0F\x21\x8A\x20\x4D\xE3\x6B\x0C\x91\x0A\x23\x4F\xF1\x6C\x05\x93\x84\x07\x47\x78\x6D\x0D\x96\x41\x34\x57\x78\x37\x08\x41\x07\x23\x91\x88\x7D\x0E\x57\x26\x6E\x61\x26\x71\xF1\x2E\x52\xD2\x0F\x79\x60\xF2\x50\x78\x34\x20\x6B\x60\x7D\x33\x81\x99\xF8\x00\x9E\x5B\xC2\x36\x7B\xFE\x1E\x3E\x51\x28\x9A\x70\x99\x27\x76\x78\x05\xBB\x9E\x97\x6E\xB3\x8C\x3A\xCD\x9A\x3F\x05\xBA\x97\x3F\x30\x82\x26\x7A\x29\x5A\x3E\xA3\x1F\x81\x3F\x71\x8A\x26\x7A\xE4\x94\x99\x7C\x5F\x89\x8C\x68\x54\x86\x6B\x75\x81",
			"\x23\x34\xD8\x9A\x3E\x36\x96\x69\x3E\x5D\x8D\x8D\x42\x79\x94\x21\x70\x98\x66\x9B\x06\x24\xA2\x1C\xB8\x4E\x51\xF3\x1D\x79\x3E\x53\x85\x32\x42\x04\xA9\x9C\x86\xB1\x3A\x02\x58\x91\x3E\x43\x92\xA3\xA1\x8C\xAA\x99\x3E\x1E\x4F\x88\xB4\x18\xA2\xA4\x0A\x9B\x87\x3E\x8E\x54\x45\xFE\x23\x61\x25\x2D\x81\x23\xA1\x73\x4E\x50\x92\x54\x72\x64\x81\x34\x9B\x20\xFB\x98\x32\xA3\x09\x95\x9E\xFA\x1B\x95\x9E\x37\xA2\x20\x4C\xFA\x4E\x50\x2B\x4F\xA2\x3F\x15\xBC\xA2\x17\x8A\x29\xA8\xA2\xB1\x3D\x94\x47\xB8\x44\x4F\xCA\xA3\x21\xA0\xAA\x8F\xA3\xFA\x20\x52\x48\xF4\x3B\x4A\x91\x91\xA4\x8B\x06\xB3\x4E\x23\xAB\xAE\x5D\xD4\x3E\x99\x20\x56\xB0\x59\x32\x93\x6A\x3F\xA1\x81\x27\xAC\x6A\xA8\xA0\x4B\x8A\x2B\xA2\x81\x0D\xAA\x54\x8E\x5F\x8C\x4D\xC5\x92\x41\x6F\x98\xA8\x47\xA0\x5D\xA7\x7D\x50\xA2\xA0\x83\x3D\xAE\x20\x77\xB1\xAE\x7E\x34\x92\xB0\xCF\x35\x4D\x9E\x87\xB4\xAA\x53\xFA\x3B\x57\xAD\xB7\x3A\x8F\xF5\x84\xA4\x0C\xE1\xAA\x4E\x67\x56\xB6\x33\x7A\xB9\xB0\x38\xFF\xA3\x4F\x70\x49\x21\x9E\xA0\x2A\x57\x69\x8A\x2A\xB3\x81\x09\xB4\x9B\xFA\x29\x5F\x6A\x94",
			"\xBE\xA2\x83\x2D\xB2\x87\x9C\xA2\x57\xC0\x1F\xB0\x35\x6B\x62\xA7\x95\x06\x3E\x3C\x69\xFA\x40\x63\xBD\xBF\x58\x00\x3F\xA3\x23\x6D\xF8\xA2\xAF\xB2\x82\x39\xA4\x86\xB9\xB4\xC2\x47\xB4\x3F\xC4\x90\xB9\xA6\xCD\xBB\x61\x48\x2A\xA3\x20\xB7\x8A\xB0\x47\x36\x07\x98\x66\x64\x54\x7A\xEE\xB6\xAA\xBA\xF4\x3E\x60\x6F\x98\x3F\x04\x04\x53\xAA\x20\x33\xB6\xA2\x7E\x3A\x0F\x62\x85\x04\x96\x20\xF1\xB8\xBA\x7E\x3B\x05\xBF\x84\x06\xA8\xA7\xE8\xB7\x3C\x0F\x62\xBC\x32\xD9\xA4\xA9\x20\xFF\xA7\xBF\x70\xA2\x5E\x06\x02\xE9\x33\x5E\xD4\x69\xC3\x55\xF2\xB8\x46\x20\x0E\xC2\x38\xFB\x54\x78\x28\x89\x2D\xAA\x0A\xF3\x4A\x08\xFD\xA6\x20\x61\xDA\x41\xC0\xCF\x22\x86\xB8\x1A\x60\x02\x2A\x86\x2D\xC2\xFD\xB8\x44\x08\x21\xC3\x23\x63\x80\xCB\xC0\x68\x45\x0F\xC2\x21\x3B\xB7\x81\xF4\x43\xB4\x0F\xFA\x4F\x08\xB5\xB3\x4D\xC3\x22\xA3\xC6\x05\xFE\xC2\x54\x4A\x01\xCA\x9E\x61\xB4\xC8\x25\xCC\xBA\x3F\x4D\x18\xC6\x42\x6A\xBB\xC6\xCC\x83\x22\xAB\x47\xD0\x5B\x13\x31\xC2\x21\xB1\x97\xCD\xC4\xA0\x30\x08\x97\x81\x21\xB5\x2F\xF5\xC4\x3E\x51\x03\xCC\x00\x01\xB4\xC7\x2C",
			"\xF4\x3A\x0A\x4E\xD0\x58\x2E\xA2\xAC\xCC\xA1\xA0\xC8\x33\x55\x0E\x8F\x7E\xF1\xC5\xCF\x80\x2F\xB0\xA5\xF1\x39\x0A\x9E\xB8\x4D\xC1\xD9\x86\x25\xCF\xC6\x87\xCF\x7D\x5D\x01\xCE\xFA\x01\x0F\x64\x8C\xA3\x22\x6A\xEE\xC7\x3E\x30\x2A\xCF\x56\xE2\x68\xA4\xD5\x23\x8C\xD3\xA4\x48\x34\x98\x29\x2A\x6A\x4D\x22\xDD\x97\x12\x88\x37\x9A\xC6\x67\x84\xA7\xB6\x72\xA4\x9B\x28\xB4\x24\xAF\xDF\x21\x14\xAE\xDC\xD3\x59\xE1\x26\xD6\x71\xD4\xD7\x08\x95\x70\x01\xCB\x4C\x6A\xD4\x29\x8A\x84\x62\x27\xA9\x25\x0B\xA2\xD7\x82\x6D\x77\x82\x4D\x39\xA7\x24\x66\xDE\x24\x85\xB5\x3C\xD1\x0C\x93\xA8\x30\x82\x94\x6C\xA0\x9D\xC0",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"HalfIf",
			L"CompleteIf",
			L"If",
			L"CompleteStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][HalfIf] BEGIN ",
			L"[10][HalfIf] END [ENDING]",
			L"[11][HalfIf]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][HalfIf]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][HalfIf]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][HalfIf]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][CompleteIf] BEGIN ",
			L"[16][CompleteIf] END [ENDING]",
			L"[17][CompleteIf]< \"if\" \"cond\" \"then\" @ CompleteStat \"else\" Stat >",
			L"[18][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" @ Stat >",
			L"[19][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" Stat @ >",
			L"[20][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat @ \"else\" Stat >",
			L"[21][CompleteIf]< \"if\" \"cond\" @ \"then\" CompleteStat \"else\" Stat >",
			L"[22][CompleteIf]< \"if\" @ \"cond\" \"then\" CompleteStat \"else\" Stat >",
			L"[23][If] BEGIN ",
			L"[24][If] END [ENDING]",
			L"[25][If]<< !CompleteIf @ >>",
			L"[26][If]<< !HalfIf @ >>",
			L"[27][CompleteStat] BEGIN ",
			L"[28][CompleteStat] END [ENDING]",
			L"[29][CompleteStat]<< !Block @ >>",
			L"[30][CompleteStat]<< !CompleteIf @ >>",
			L"[31][CompleteStat]<< !Do @ >>",
			L"[32][Stat] BEGIN ",
			L"[33][Stat] END [ENDING]",
			L"[34][Stat]<< !Block @ >>",
			L"[35][Stat]<< !Do @ >>",
			L"[36][Stat]<< !If @ >>",
			L"[37][Module] BEGIN ",
			L"[38][Module] END [ENDING]",
			L"[39][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseManualTokens, ModuleParserStates, IfElseManualAstInsReceiver>(&IfElseManualTokenDeleter, &IfElseManualLexerData, &IfElseManualModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsemanual::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsemanual::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
