/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseManual
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseManualModuleParser.h"

namespace ifelsemanual
{
	void IfElseManualModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2270; // 21354 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 222;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x6A\x53\x00\x00\xD6\x08\x00\x00\x09\x00\x01\x82\x80\x0A\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x97\x0A\x9D\x0A\x83\x12\x85\x13\x0A\xAB\x0A\x8F\x1A\x86\x12\x01\x84\xFF\x21\xA2\x81\x9A\x80\x03\x91\x91\x25\xA7\xA2\x89\x9A\x97\x7C\x96\x95\x2F\xA7\xB1\x88\x9A\x85\x96\x97\x9A\x2D\xA5\xA5\x81\x08\x98\x99\x9E\x99\x3F\xB4\xA0\x99\x91\xA3\x95\xA2\x92\x47\xB7\x83\xBE\x9B\xA0\xA1\xA6\xA1\x06\xB6\xB3\x86\xA9\x84\x9D\xAB\xA4\x53\xC8\x8F\xB4\xA1\xAC\xA3\xAC\xAD\x5D\xCC\xA1\xAE\xA3\xB0\xAB\x80\xA9\x58\xE9\x9F\xAA\xA5\xB4\xAF\xB2\xAF\x06\x9F\x97\xAB\xB9\xAC\xB7\xB6\xB1\x77\xE4\xB9\xA6\xB2\x80\xB4\xBA\xB5\x06\x83\x0A\x96\xAD\xB0\xB3\xBC\xB7\x7D\xF0\x87\xC6\xC9\xC0\xBD\xC6\xBD\x8F\xFC\x81\x9E\xB5\xC6\xB9\xC8\xC4\x93\x8A\xD7\xCC\xC9\xCE\xC5\xCE\xC8\x9F\x92\xE6\x9A\xC1\xD0\xCF\xD0\xCF\xA7\xA0\xE9\xC2\xD4\xCB\x80\x87\xB9\x06\x85\x03\xC0\xC3\x86\x03\xD9\xBF\xB8\x95\xE5\x87\x07\xDA\xDC\xDB\xCD\x96\x81\x88\x1D\xD3\x86\x86\x82\xC2\x8B\xC1\xC4\x84\xE0\xE5\xBA\xE6\x85\x0B\x4C\xE5\xDC\xC0\x04\x06\xE9\xD5\xA6\xAD\xCD\xFF",
			"\xD3\xEA\xE6\xED\xEE\xCF\xB9\xC9\xE1\xFE\xDA\xF3\xEC\xF3\x01\x8D\x17\xFF\xE8\xEC\xE8\xF7\xF7\xA4\xED\xDE\xF1\xF0\xF8\xD5\xFA\xD5\xF7\xAC\xF4\xFB\xF6\xFC\xFE\xD4\x07\xEB\x7E\x72\x68\x44\xB0\x63\x7C\x76\x7C\x25\x50\x01\x80\x6A\x11\x0B\x88\x7E\x80\xD9\x50\x8E\x7A\x84\xF3\x7D\x76\x87\x83\x17\xBA\x79\x85\x84\x1B\x93\x88\x6A\x04\x0E\x9A\x88\x87\x88\x22\xA5\x8C\x84\x89\x27\xA2\x63\x05\x88\x29\xAD\x8E\x84\x8A\x2F\xA6\x81\x8E\x8B\xCA\x54\x0C\x8B\x8C\x38\x95\x80\x8E\x8E\x32\xBC\x84\x8C\x79\x06\xA8\x78\x83\x81\xF9\x7F\x87\x81\x05\x37\xBE\x84\x76\x05\x49\x80\x97\x7A\x41\x12\x45\x8F\x91\x90\xE5\x46\x48\x05\x93\x07\x99\x08\x96\x90\xEC\x5A\x0B\x96\x41\x1B\x1F\x94\x97\x98\x53\xA5\x90\x78\x91\x14\x8E\x97\x98\x97\x69\xA8\x9D\x86\x92\xCA\x5C\x02\x9A\x99\x43\xAC\x9F\x9A\x9A\x75\x95\x93\x40\x45\x52\xAB\x9A\x9C\x9D\x45\xB9\x88\x9D\xA0\xCA\x5E\x03\x9E\x9F\x64\x88\xA0\xA1\x7C\x1F\x07\xA9\x9F\x40\x20\x0A\x42\x5F\x9F\x8A\x95\xA0\x02\x08\x8E\x84\xA3\xA1\x9B\x76\xBB\x8B\xA7\x9D\x15\x59\xAC\xA4\xA5\x8F\x8B\xA8\x68\x09\xA2\xA0\xA2\x91\x09",
			"\xA9\xAA\x66\x09\xAB\x3D\xA5\x48\x45\x9F\xA5\x81\x48\x08\xAC\x46\x9D\xA1\xAE\x9B\x9E\x87\x89\x08\xAE\x82\xBC\xAB\xAE\xAE\xB9\xA4\xAA\xA6\xB0\xC5\x83\x4A\x08\xB0\x70\x9F\xAD\xAC\xB1\xC1\x90\xBD\xB0\xB2\xD1\x86\xB3\xAB\x40\x1A\x74\xA7\xB1\x42\x2C\x12\xA4\xB7\xB4\x09\x6E\x0E\xA0\x47\xDA\x97\xB6\xAB\xB3\xD6\xAA\xA9\xB8\xBA\x89\xB5\xAE\xBB\xB6\xA4\xB0\x0C\xB2\xB3\xC3\xAB\xB5\xBD\xBB\x31\x33\xBF\xB4\xBD\xA6\x72\x0A\xBE\xB4\xFC\x94\x73\x0F\xBF\xF6\x89\xB7\xBB\xBD\x07\xC6\xC6\xA4\x0D\x04\xED\xB0\xBE\xC3\xE6\x96\xAC\x79\x0D\x0D\xC9\xC5\xB4\xC4\xEA\x98\xCC\xB8\x9D\x36\x15\xC1\x43\x0D\x1E\xEE\xB8\x0D\xC8\x0F\xD6\xC0\xB9\xC1\x17\xE6\xC5\x49\x0E\x24\xD1\xCF\xBA\xCB\x25\xD6\xAA\x0D\xCB\x19\xEA\xCB\xBF\xCD\x00\xCA\x4B\x0D\xC8\x3C\x34\xCA\x69\x0F\x3E\xC8\xC2\xC4\xCC\x44\xF5\xC6\xA6\x0F\x41\xCA\xCF\xCA\xD1\x4B\xDB\xC1\x43\x0F\x49\xE9\xC3\xD0\xD3\x31\xCD\xD2\xD0\x00\x40\x21\xC1\x11\xD4\xCA\x42\x1C\xD5\xC0\x27\xDA\xC7\xD5\xD5\xEC\x43\x1F\xD4\xCE\x28\xE1\xD6\xCD\x42\x81\x1E\xB5\xBA\x4A\xB6\x6B\x56\x4F\xA4\x3A\x40\x7F\x69\x65\x36",
			"\x77\xD9\x73\xDC\x75\xD5\x6A\xDC\x70\x7C\xC9\x44\xDE\xDD\x49\x79\xD5\xE1\x4B\x83\xC1\x48\x70\xE1\x72\xED\x4F\xDD\x77\x81\xFD\xDD\x77\xE3\xF2\x51\xE3\x41\xE2\xF2\x54\xE6\x4E\xE1\x8D\xEA\x48\xE7\xE2\xDD\x71\xD8\xDC\xE2\x6E\xFE\xD7\xE2\x4A\x9A\xDB\xEE\xE6\xE4\x8C\xE3\xEB\xEA\xE0\x49\x69\xEA\xEB\x48\xB2\xF3\xE1\x4B\xE7\x49\x62\xEB\xDC\xE9\xB0\xEB\x55\xEE\xED\xBF\xF3\xE8\xE5\x5D\xC1\xEA\xE8\xE4\xE6\x9C\xEE\xE7\x49\xF1\x9B\xF8\xEE\xEF\xE9\xCB\xD0\xF3\x4B\xF0\xB1\xD2\xF2\x4B\xF1\xD5\xDD\xE1\xF6\xF6\xD3\xC9\x9A\xEC\xE0\x8E\xD6\xF1\x48\xF3\x96\xFD\xD5\xF9\x40\xC8\xE1\xFC\xF7\xF5\xA5\xC9\x74\xFA\xFA\xCA\xDD\xFF\xDB\xF6\xF1\xE2\x4F\xFB\xEB\xAC\xC9\xFB\xEC\xFE\x97\xD9\xF5\xFF\xF8\xE2\x7F\x1E\xF3\x15\x38\x7B\xE7\x6B\x78\x80\x07\x82\x80\xEB\x5D\x35\x80\xD3\x49\x85\x81\xEE\x61\x83\xFD\x27\x23\x81\xE4\x1F\x78\x72\xF0\x7B\x7C\x05\x8B\x89\x73\x00\x95\x80\x38\x17\x95\x71\x4B\x21\x86\x76\xDA\x52\x86\x83\x1C\x9A\x7C\xF8\x7C\x72\x21\xF4\x68\x77\x84\x0F\x9E\x79\x00\xA4\x85\x84\x04\xBF\x7F\x1F\x13\x92\x7D\xFE\x19\x8B\x85\x0D\xBD\x76",
			"\x81\x37\x99\x84\xFB\x73\x73\x24\x1A\xB5\x86\x88\x25\x98\x72\x60\x06\x81\x88\x14\x8B\x87\x7C\x00\x0B\x88\x10\x9A\x8A\x87\xFE\x6B\x2A\x89\xFE\x74\x8A\xFD\x4E\x87\x39\xDC\x41\x83\x38\x4F\x8D\x26\x6C\x09\x83\x8D\x1B\xA5\x8A\x8B\x21\x27\x8D\x0F\xA3\x20\x8D\x1D\xAA\x25\x8D\x56\x95\x30\x1C\xAD\x89\x28\x35\x98\x82\x25\x76\x82\x87\x1B\xC9\x43\x8E\xF4\x49\x2D\x8F\x00\x0E\x87\x49\x00\x90\x74\xF9\x00\x92\x8A\xED\x5A\x08\x07\x85\x94\x7B\x84\x08\x95\x6F\x85\x94\x71\x1E\x8C\x9A\x21\x3C\x8F\x91\x20\x93\x8A\x20\xE5\x21\x84\x93\x84\x21\x87\x92\x00\x1C\x92\x26\x8A\x2C\x37\x84\x00\x90\x73\xA5\x86\x22\x71\x03\x29\x95\x81\x00\x94\x72\x08\x3D\x8B\x0F\x83\x21\x97\x81\x20\x95\x96\x02\x31\x90\x74\x0A\x27\x94\x85\x16\x39\x21\xD1\x29\x23\x2A\x82\x21\x98\x83\x2F\x92\x21\xEA\x34\x54\xE6\x49\x91\x30\x64\x97\x3C\x72\x00\x40\x98\x2F\xED\x72\x21\x68\x86\x27\x97\x06\x36\x9B\x40\x45\x95\x38\x85\x1A\x9C\x98\xD3\x89\x20\xE5\x18\x74\x73\x5E\x82\x99\x9C\x06\x34\x71\x27\xCD\x94\x56\xCA\x44\x42\x96\x71\x2A\x23\x3B\xB6\x92\x9F\x67\x8A\x22\x41\xA6\x84",
			"\x94\x07\xF2\x07\x3B\x10\xA2\x5B\x81\x73\x17\x39\x21\xAC\x5B\x80\x3A\x17\x39\x8F\x2D\x1C\x81\x1D\x57\x35\x25\x57\x4B\x86\x0E\xD7\x20\x91\x2B\xFD\x67\x0F\x88\xBE\x94\x83\x78\x17\x3B\x44\x81\x26\x47\x05\xB9\x0D\x9F\x0A\x2B\x5B\x02\xFA\x07\x3A\x50\xBF\x53\x81\x7B\x16\xA1\x42\x2B\x4B\x80\x3E\x1A\xA2\x21\x5A\x4B\x81\x1F\x57\x38\x72\x39\x4B\x86\x0F\x2A\xA0\x4C\x07\xFF\x06\x9F\x84\x11\x51\x8C\xA8\x20\x91\xBE\x0B\x80\x11\xEB\x04\x0C\x83\xA0\x8C\x3C\x9E\x3B\x28\x6D\x38\x83\x25\x90\x4A\xA7\x41\x21\xD0\xAE\x64\x50\x82\x92\x34\x60\x79\xAB\x28\x9E\x97\x40\x3C\x5F\x83\x6A\xAA\x21\x84\x12\xD8\xA7\x40\x50\x89\xA9\x3E\x25\x20\x95\x08\x80\x91\xAB\x9C\x6E\xAE\x20\x21\x98\x52\x90\x78\x41\x85\xAB\xA6\x36\xAA\x0A\x3F\x91\x57\x87\x47\x91\x03\x56\x92\x9F\x5C\xB3\xAF\x81\x5C\x92\x21\xB3\x81\xAA\x21\xA0\x9B\xA0\x00\x6C\xA8\xAD\xA6\xAB\x6E\x20\x8A\xB2\xAC\xA9\x78\x4F\x9A\x3F\x82\x4C\xB0\x96\xB0\xB0\x62\xFB\xA2\x48\x7C\xAC\x9C\x54\xCC\x94\x9D\x3E\x89\x29\x8F\xB6\xA4\x54\xA5\xF0\x82\x6E\x69\x43\x91\x21\xCA\xAE\x58\x4F\x1D\xA9\xB7\x63\xDB",
			"\x99\xAE\xCE\xA4\x50\x49\x8E\x87\x42\x67\xA2\xB6\x20\xCC\x97\x56\xB6\xED\x57\x4B\x2C\xF4\x48\xB4\xA7\xA0\x99\xB7\x82\xA2\x4A\x97\x48\xB7\xB7\xCD\x89\x20\x9B\xB4\x80\xB8\x9D\x7C\x42\xB6\xB0\xA2\x31\xB4\xC7\xB3\xB2\x63\xD6\xB6\x34\xD7\x98\xBE\x52\x5A\xAF\xAF\x40\x73\x92\x20\x26\x49\xBC\x54\x86\x44\x8A\xD2\x0D\x41\xB0\xED\x82\x4D\x51\xCC\xA1\xBA\x73\x86\x2C\xBC\x83\x26\xBE\xBD\xA4\x52\xB2\x71\x96\x51\x4D\xE1\x81\x25\xBE\xBC\xAD\x5C\x9E\x28\x51\xBF\xE9\xB3\xBB\x20\x20\x4D\xBE\x80\x87\x43\x57\xCF\xAD\x5F\xA7\x0E\xC2\x21\x82\x86\x2A\xBE\x3A\x78\x4A\xA4\xF1\x82\x4A\x45\x7E\xB0\x01\x09\xC1\xC6\xC2\x07\x5D\x59\x81\x96\x54\xA1\x08\xC1\x25\xB8\x02\x3B\xB4\x88\xC2\x44\x5D\xEA\x96\x6E\x34\xB1\xA8\xC2\x74\xDC\xB2\x6A\x77\x78\xB4\xBE\x33\xCF\xC5\x8D\xEC\x37\xBF\x81\x37\xC3\xC1\xE2\xB3\xB6\x40\x51\x40\xAF\x1C\xEC\x3A\x5E\x23\xCE\x5F\xAD\x49\xC4\xC9\x81\x2E\xB6\xB4\xED\x43\x62\x7A\xD4\x39\x5A\x17\xCD\xCD\xBC\x46\xD1\x3C\xC3\x1C\xCC\x3C\x11\xD9\xC0\x4A\x07\xCB\xC4\xA9\x1D\x69\xC8\xF6\x3F\x9E\xC4\x00\x11\xA6\x95\x59\xC4\x6A\x97",
			"\x6A\xCB\x20\xCB\xB8\xBE\x6A\xBB\xC1\x3F\x38\xF5\x34\xCD\xAA\x2C\x65\x99\xF1\x33\xA8\x34\xF6\xCA\x20\x15\xC0\xBF\x81\x3D\x6C\xCA\x2D\xD4\x99\x20\x7F\xC1\x22\x61\xAA\x38\x4E\xA4\x7B\xC8\x35\x64\xC8\xCD\x7F\xEB\xC7\xBD\x39\xEA\x6E\x52\x36\xB4\xD2\x9C\xC2\xC4\xC6\xE5\x14\xBB\x20\x81\xCF\xB7\x81\x5B\x63\xCB\x4B\xC0\x00\xBE\x45\xD5\xD0\x9D\x5E\x6F\xD1\x3C\xDB\xAE\x20\xA8\xCE\xC8\x9E\xA2\x35\x08\x47\x40\x6C\xC3\xB1\xD8\xCA\xAA\x96\x56\x09\x43\xEE\x58\x6A\x49\xD9\xD6\xA2\xB3\xD6\x34\x24\x21\xCE\x52\xAC\xC9\x9E\x42\x10\xC3\x21\xF4\x9B\xD6\x52\x4B\x01\x65\x08\x0A\x22\xD8\x51\xC1\xCD\xD3\x25\x21\xD7\xB4\xBB\xDA\xC6\x53\xEC\x3B\xC3\xA9\xCF\xDA\xBB\x4C\x0E\xD6\xF6\x3D\xD4\x56\xE0\xDF\xC2\xA0\xC2\x4E\x09\x72\xF1\x3F\x08\xD7\x25\xC7\x40\x04\xC2\xDC\xF6\x10\x09\x64\x0E\xA6\x20\xBD\xC0\xC4\x55\x28\x21\x65\xC1\x77\xDC\xD8\x7B\x52\x07\xD8\x77\x46\xDC\xC3\x00\xFA\xD5\xBD\xF1\x35\x0A\x77\xE8\x32\x09\xD7\x29\xE3\xB0\x82\xE1\x3F\x2B\x05\xE4\x3D\xD1\xDC\xC3\x49\x86\x2B\xC9\x85\xE8\x32\x91\xA5\xD7\xC2\x42\x1D\xEC\xDF\x76\x5B\x09\x64",
			"\x55\xC1\xE2\xC7\xAA\x3C\x0B\x8B\xF1\x3D\x09\xBE\xC9\xE4\xA0\xC4\xD4\x3B\x2F\x0E\xE2\x35\x4F\x17\x3A\xCC\x93\xEB\xE4\xD1\x21\x0E\xE5\xA8\x37\xDC\x87\x89\xAC\x5A\x9A\xCA\x3C\x0C\x21\x67\xCF\x40\x5E\xC5\xE4\x3A\x65\x09\x64\x2D\xCA\xE5\xD3\x96\x56\x0D\x57\xED\x5C\xE0\x49\xD1\xEB\xCC\x94\xE8\x34\x35\x00\xEA\x35\x0D\xFC\xC2\xD6\xBC\xE3\xEA\x77\x6D\x0E\xEA\x74\x56\xE1\x92\xFD\xC3\x20\x24\xFD\xE6\x34\x71\x01\x66\xBF\x40\xAC\xD1\xCD\x5C\x87\xEE\xB9\x98\x28\x55\xAD\x25\x90\x9D\x3D\xEC\xA9\x1C\x96\xAC\x49\x02\xF7\x77\xBB\xCD\x94\xC3\x3A\x27\xF0\x9A\xD2\x2B\xD1\x93\x20\x92\x27\x8F\xE9\xAF\xDD\x91\xF5\xE0\xC8\xF7\xEC\x79\x00\x04\x7C\xE5\x3A\x2B\xF3\x92\x1D\xF0\xED\x8A\x65\x25\x69\xB9\x23\xF4\x31\xB7\xE9\x8F\x3A\x28\xF6\xE8\xF7\xE3\xAD\x95\x2D\xF2\x24\xA2\x95\xB4\x07\x8A\xB2\x2A\xDA\xF6\x22\xB1\x7D\xEA\xB2\x4E\x0C\xB0\x26\xDE\xFB\x8C\x56\x8B\xB7\xEC\x6B\x88\x43\xF9\xCD\x43\xF8\xEF\x25\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"HalfIf",
			L"CompleteIf",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"CompleteStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][HalfIf] BEGIN ",
			L"[10][HalfIf] END [ENDING]",
			L"[11][HalfIf]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][HalfIf]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][HalfIf]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][HalfIf]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][CompleteIf] BEGIN ",
			L"[16][CompleteIf] END [ENDING]",
			L"[17][CompleteIf]< \"if\" \"cond\" \"then\" @ CompleteStat \"else\" Stat >",
			L"[18][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" @ Stat >",
			L"[19][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" Stat @ >",
			L"[20][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat @ \"else\" Stat >",
			L"[21][CompleteIf]< \"if\" \"cond\" @ \"then\" CompleteStat \"else\" Stat >",
			L"[22][CompleteIf]< \"if\" @ \"cond\" \"then\" CompleteStat \"else\" Stat >",
			L"[23][IfTail] BEGIN ",
			L"[24][IfTail] END [ENDING]",
			L"[25][IfTail]CompleteStat @ [ \"else\" Stat ]",
			L"[26][IfTail]CompleteStat [ \"else\" @ Stat ]",
			L"[27][IfTail]CompleteStat [ \"else\" Stat @ ]",
			L"[28][IfTail]HalfIf @",
			L"[29][If] BEGIN ",
			L"[30][If] END [ENDING]",
			L"[31][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[32][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[33][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[34][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[35][OtherStat] BEGIN ",
			L"[36][OtherStat] END [ENDING]",
			L"[37][OtherStat]<< !Block @ >>",
			L"[38][OtherStat]<< !Do @ >>",
			L"[39][CompleteStat] BEGIN ",
			L"[40][CompleteStat] END [ENDING]",
			L"[41][CompleteStat]<< !CompleteIf @ >>",
			L"[42][CompleteStat]<< !OtherStat @ >>",
			L"[43][Stat] BEGIN ",
			L"[44][Stat] END [ENDING]",
			L"[45][Stat]<< !If @ >>",
			L"[46][Stat]<< !OtherStat @ >>",
			L"[47][Module] BEGIN ",
			L"[48][Module] END [ENDING]",
			L"[49][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseManualTokens, ModuleParserStates, IfElseManualAstInsReceiver>(&IfElseManualTokenDeleter, &IfElseManualLexerData, &IfElseManualModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsemanual::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsemanual::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
