/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseManual
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseManualModuleParser.h"

namespace ifelsemanual
{
	void IfElseManualModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2288; // 21482 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 240;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\xEA\x53\x00\x00\xE8\x08\x00\x00\x09\x00\x01\x82\x80\x0A\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x97\x0A\x9D\x0A\x83\x12\x85\x13\x0A\xAB\x0A\x8F\x1A\x86\x12\x01\x84\xFF\x21\xA2\x81\x9A\x80\x03\x91\x91\x25\xA7\xA2\x89\x9A\x97\x7C\x96\x95\x2F\xA7\xB1\x88\x9A\x85\x96\x97\x9A\x2D\xA5\xA5\x81\x08\x98\x99\x9E\x99\x3F\xB4\xA0\x99\x91\xA3\x95\xA2\x92\x47\xB7\x83\xBE\x9B\xA0\xA1\xA6\xA1\x06\xB6\xB3\x86\xA9\x84\x9D\xAB\xA4\x53\xC8\x8F\xB4\xA1\xAC\xA3\xAC\xAD\x5D\xCC\xA1\xAE\xA3\xB0\xAB\x80\xA9\x58\xE9\x9F\xAA\xA5\xB4\xAF\xB2\xAF\x06\x9F\x97\xAB\xB9\xAC\xB7\xB6\xB1\x77\xE4\xB9\xA6\xB2\x80\xB4\xBA\xB5\x06\x83\x0A\x96\xAD\xB0\xB3\xBC\xB7\x7D\xF0\x87\xC6\xC9\xC0\xBD\xC6\xBD\x8F\xFC\x81\x9E\xB5\xC6\xB9\xC8\xC4\x93\x8A\xD7\xCC\xC9\xCE\xC5\xCE\xC8\x9F\x92\xE6\x9A\xC1\xD0\xCF\xD0\xCF\xA7\xA0\xE9\xC2\xD4\xCB\x80\x87\xB9\x06\x85\x03\xC0\xC3\x86\x03\xD9\xBF\xB8\x95\xE5\x87\x07\xDA\xDC\xDB\xCD\x96\x81\x88\x1D\xD3\x86\x86\x82\xC2\x8B\xC1\xC4\x84\xE0\xE5\xBA\xE6\x85\x0B\x4C\xE5\xDC\xC0\x04\x06\xE9\xD5\xA6\xAD\xCD\xFF",
			"\xD3\xEA\xE6\xED\xEE\xCF\xB9\xC9\xE1\xFE\xDA\xF3\xEC\xF3\x01\x8D\x17\xFF\xE8\xEC\xE8\xF7\xF7\xA4\xED\xDE\xF1\xF0\xF8\xD5\xFA\xD5\xF7\xAC\xF4\xFB\xF6\xFC\xFE\xD4\x07\xEB\x7E\x72\x68\x44\xB0\x63\x7C\x76\x7C\x25\x50\x01\x80\x6A\x11\x0B\x88\x7E\x80\xD9\x50\x8E\x7A\x84\xF3\x7D\x76\x87\x83\x17\xBA\x79\x85\x84\x1B\x93\x88\x6A\x04\x0E\x9A\x88\x87\x88\x22\xA5\x8C\x84\x89\x27\xA2\x63\x05\x88\x29\xAD\x8E\x84\x8A\x2F\xA6\x81\x8E\x8B\xCA\x54\x0C\x8B\x8C\x38\x95\x80\x8E\x8E\x32\xBC\x84\x8C\x79\x06\xA8\x78\x83\x81\xF9\x7F\x87\x81\x05\x37\xBE\x84\x76\x05\x49\x80\x97\x7A\x41\x12\x45\x8F\x91\x90\xE5\x46\x48\x05\x93\x07\x99\x08\x96\x90\xEC\x5A\x0B\x96\x41\x1B\x1F\x94\x97\x98\x53\xA5\x90\x78\x91\x14\x8E\x97\x98\x97\x69\xA8\x9D\x86\x92\xCA\x5C\x02\x9A\x99\x43\xAC\x9F\x9A\x9A\x75\x95\x93\x40\x45\x52\xAB\x9A\x9C\x9D\x45\xB9\x88\x9D\xA0\xCA\x5E\x03\x9E\x9F\x64\x88\xA0\xA1\x7C\x1F\x07\xA9\x9F\x40\x20\x0A\x42\x5F\x9F\x8A\x95\xA0\x02\x08\x8E\x84\xA3\xA1\x9B\x76\xBB\x8B\xA7\x9D\x15\x59\xAC\xA4\xA5\x8F\x8B\xA8\x68\x09\xA2\xA0\xA2\x91\x09",
			"\xA9\xAA\x66\x09\xAB\x3D\xA5\x48\x45\x9F\xA5\x81\x48\x08\xAC\x46\x9D\xA1\xAE\x9B\x9E\x87\x89\x08\xAE\x82\xBC\xAB\xAE\xAE\xB9\xA4\xAA\xA6\xB0\xC5\x83\x4A\x08\xB0\x70\x9F\xAD\xAC\xB1\xC1\x90\xBD\xB0\xB2\xD1\x86\xB3\xAB\x40\x1A\x74\xA7\xB1\x42\x2C\x12\xA4\xB7\xB4\x09\x6E\x0E\xA0\x47\xDA\x97\xB6\xAB\xB3\xD6\xAA\xA9\xB8\xBA\x89\xB5\xAE\xBB\xB6\xA4\xB0\x0C\xB2\xB3\xC3\xAB\xB5\xBD\xBB\x31\x33\xBF\xB4\xBD\xA6\x72\x0A\xBE\xB4\xFC\x94\x73\x0F\xBF\xF6\x89\xB7\xBB\xBD\x07\xC6\xC6\xA4\x0D\x04\xED\xB0\xBE\xC3\xE6\x96\xAC\x79\x0D\x0D\xC9\xC5\xB4\xC4\xEA\x98\xCC\xB8\x9D\x36\x15\xC1\x43\x0D\x1E\xEE\xB8\x0D\xC8\x0F\xD6\xC0\xB9\xC1\x17\xE6\xC5\x49\x0E\x24\xD1\xCF\xBA\xCB\x25\xD6\xAA\x0D\xCB\x19\xEA\xCB\xBF\xCD\x00\xCA\x4B\x0D\xC8\x3C\x34\xCA\x69\x0F\x3E\xC8\xC2\xC4\xCC\x44\xF5\xC6\xA6\x0F\x41\xCA\xCF\xCA\xD1\x4B\xDB\xC1\x43\x0F\x49\xE9\xC3\xD0\xD3\x31\xCD\xD2\xD0\x00\x40\x21\xC1\x11\xD4\xCA\x42\x1C\xD5\xC0\x27\xDA\xC7\xD5\xD5\xEC\x43\x1F\xD4\xCE\x28\xE1\xD6\xCD\x42\x81\x1E\xB5\xBA\x4A\xB6\x6B\x56\x4F\xA4\x3A\x40\x7F\x69\x65\x36",
			"\x77\xD9\x73\xDC\x75\xD5\x6A\xDC\x70\x7C\xC9\x44\xDE\xDD\x49\x79\xD5\xE1\x4B\x83\xC1\x48\x70\xE1\x72\xED\x4F\xDD\x77\x81\xFD\xDD\x77\xE3\xF2\x51\xE3\x41\xE2\xF2\x54\xE6\x4E\xE1\x8D\xEA\x48\xE7\xE2\xDD\x71\xD8\xDC\xE2\x6E\xFE\xD7\xE2\x4A\x9A\xDB\xEE\xE6\xE4\x8C\xE3\xEB\xEA\xE0\x49\x69\xEA\xEB\x48\xB2\xF3\xE1\x4B\xE7\x49\x62\xEB\xDC\xE9\xB0\xEB\x55\xEE\xED\xBF\xF3\xE8\xE5\x5D\xC1\xEA\xE8\xE4\xE6\x9C\xEE\xE7\x49\xF1\x9B\xF8\xEE\xEF\xE9\xCB\xD0\xF3\x4B\xF0\xB1\xD2\xF2\x4B\xF1\xD5\xDD\xE1\xF6\xF6\xD3\xC9\x9A\xEC\xE0\x8E\xD6\xF1\x48\xF3\x96\xFD\xD5\xF9\x40\xC8\xE1\xFC\xF7\xF5\xA5\xC9\x74\xFA\xFA\xCA\xDD\xFF\xDB\xF6\xF1\xE2\x4F\xFB\xEB\xAC\xC9\xFB\xEC\xFE\x97\xD9\xF5\xFF\xF8\xE2\x7F\x1E\xF3\x15\x38\x7B\xE7\x6B\x78\x80\x07\x82\x80\xEB\x5D\x35\x80\xD3\x49\x85\x81\xEE\x61\x83\xFD\x27\x23\x81\xE4\x1F\x78\x72\xF0\x7B\x7C\x05\x8B\x89\x73\x00\x95\x80\x38\x17\x95\x71\x4B\x21\x86\x76\xDA\x52\x86\x83\x1C\x9A\x7C\xF8\x7C\x72\x21\xF4\x68\x77\x84\x0F\x9E\x79\x00\xA4\x85\x84\x04\xBF\x7F\x1F\x13\x92\x7D\xFE\x19\x8B\x85\x0D\xBD\x76",
			"\x81\x37\x99\x84\xFB\x73\x73\x24\x1A\xB5\x86\x88\x25\x98\x72\x60\x06\x81\x88\x14\x8B\x87\x7C\x00\x0B\x88\x10\x9A\x8A\x87\xFE\x6B\x2A\x89\xFE\x74\x8A\xFD\x4E\x87\x39\xDC\x41\x80\x21\x3B\x8A\x26\x6C\x09\x83\x8D\x1B\xA5\x8A\x8B\x21\x27\x8D\x0F\xA3\x20\x8C\xC9\x76\x25\x8D\x2D\x89\x28\x1C\xE8\x79\x28\x35\x98\x82\x8C\x5F\x89\x4B\x1C\x80\x0E\x85\x93\x3B\x8D\x8F\x6C\x9A\x8E\x42\x52\x8D\x5C\x2D\x1C\x80\x74\x7C\x9C\x80\x21\xFD\x68\x90\xCA\x76\x88\x00\x88\x98\x73\x23\x8B\x91\x21\x47\x8D\x92\x21\x21\x91\x90\x26\x83\x9B\x92\x5A\x54\x74\x37\x09\x23\x3B\x0F\x83\x20\x94\x83\x06\x3C\x94\x0A\x22\x96\x41\x14\x7B\x8E\x4D\x89\x23\x8F\x94\x8B\x3A\x27\xD0\x39\x95\xF6\x42\x26\x3A\x09\x31\x39\x42\x27\x92\x20\x5D\x86\x22\x95\xAE\x2A\x22\x7A\x34\x58\x73\x61\x81\x32\x98\xD7\x34\x70\x80\x39\x95\x97\x51\x82\x23\x99\x06\x38\x96\x41\x50\x93\x20\x5F\x85\x3A\x21\xD4\x9D\x95\x33\xAB\x96\x97\x80\x14\x70\x98\x71\x9B\x97\x36\xC1\x94\x98\x4E\xB3\x97\x21\xD7\x38\x70\x81\x47\x98\x9D\x73\x86\x22\x41\xA1\x8A\x21\x29\x9C\x86\x20\x39\x17\x39\x84\xE2\x4B",
			"\x81\x2C\xF3\x07\x3A\x44\xAC\x52\x9F\x0A\x34\x0F\x75\x0F\x9D\x04\x45\x8A\x25\x0E\xD7\x25\x27\xAB\x00\xA9\x20\x3B\x17\x38\x9C\x01\x33\x9C\x3D\x82\x27\x0F\x87\x8A\x22\x9A\x13\xA2\x20\x1E\x57\x32\xA3\x80\x36\x41\xA3\x03\x39\x0F\x3D\x8A\x2B\x58\x86\x86\x22\x0F\xD7\x31\x97\xAF\x26\xA3\x21\x3D\x16\xA1\x21\x2B\x40\xA6\x40\x7C\x0C\xA2\x85\x1A\x4A\xA6\x01\x3D\x0D\x3A\x8A\x22\x4E\x9C\x80\x06\x0F\x2F\xA0\x4E\x4F\x80\x0F\x0F\x64\x8A\x21\x52\x0B\x88\x90\x7B\x10\xA0\x01\x7C\x7E\xA0\x10\xD7\x24\x0A\x41\xC2\x48\x4F\x9D\x28\x6E\x8A\x5D\x94\xAB\x81\x08\x9A\xA8\x97\x71\x90\x90\xA6\x20\x6E\x58\x8A\x24\x72\x24\xA2\x30\x4F\x1F\x93\x6A\x6A\x21\x86\xAD\xB0\x87\x41\x96\xB1\x8C\x3D\x49\x31\x91\x84\xA6\xB2\xAF\xAA\x6B\x66\x21\x08\x98\x5A\xAA\x21\x61\x80\xAC\xD4\x3F\xA9\x27\xEC\x94\x54\x3C\x4C\xA9\xAE\xF1\x33\x92\x3C\x83\xBD\x5C\x3C\x56\x9A\x20\x88\xA8\x37\x61\x8B\xB1\x9F\xBE\xA9\x6B\xAC\x09\x3D\xA3\xA5\x07\x48\x4F\x6C\xB4\x8A\x48\x8F\xBF\xB2\x41\x1A\xB1\xB2\xD5\x38\x48\x9E\x84\xAD\x5E\x31\x83\x21\x96\xA6\x8F\x97\xAE\x42\x51\xA5\x56\x97",
			"\xBD\x20\x6C\x9C\xB7\x40\x1F\xB3\xB6\xD8\x26\x31\xB4\x00\x2D\xAC\x3A\x78\x48\x49\x42\x25\xB2\x34\xD4\xAC\xB4\x96\x09\x3C\xAD\x61\x87\x47\x4A\x67\x96\x52\xB6\x58\xB5\x9A\x39\xCB\xB2\x48\x2F\x43\xBF\x48\xD3\xA3\x20\x46\x87\x27\xB6\x21\x7C\x4A\xB7\x79\xA3\x23\x6A\xDA\x96\xB3\xDD\x92\x6E\x5D\x9E\xA0\x03\x78\x96\x58\xB2\xDA\xAD\x9E\x20\x4C\x45\xBC\x9D\x06\x54\x88\xA5\x4D\x41\x21\xBF\xAA\x38\x9E\x0D\x57\xBA\x21\x4D\xB9\xB5\x02\x37\xBC\x7C\xDD\xB4\x54\xE5\x91\xBC\x4E\x61\x4E\xB8\x00\x02\xC7\xB8\xF9\x96\x50\x55\xFD\xA4\x57\x77\x8D\xC6\x20\x10\x78\xBC\xC0\xED\x53\x54\x80\x96\x58\xA9\x0D\xC0\x06\xC2\x06\x26\xC0\x9D\x78\x45\xA5\xB8\x07\x46\x22\x0A\xC0\xC4\x85\x8D\xB7\x41\x6E\x51\xC5\x5D\xFF\x9E\xC0\x74\x82\x26\xB9\x11\xC7\x44\x5C\xE0\xAA\xAE\x68\x39\xB3\x20\x15\xF6\xC1\x67\x40\xC6\x22\x70\x86\x2C\xC1\x1F\xEE\xBF\xC8\x03\x31\xBE\x90\x98\xC1\xBD\x26\xC1\x21\x4A\x7A\xAC\xCA\xA5\x72\x5F\xC4\x3A\x77\x55\xCA\x4F\xD6\xB6\x83\xEE\x53\x61\xFA\x94\x39\x5B\x39\xC0\x00\x94\xC9\xC2\xCA\x77\x4C\x62\xC1\xEC\x2E\xC6\x89\x89\x23\xCC\xC8",
			"\xA5\xCC\x3D\x1D\x78\xCA\xBB\x79\x9E\xC3\x9B\x96\x4F\xCD\x45\x6E\x68\x00\x76\xC3\x20\xEB\x94\xB8\xC9\x4E\xC0\x02\x9F\xB5\x38\xCE\xD4\x2C\x62\xCE\xEC\x2E\xAA\x87\x83\xD2\x20\x11\xEC\xBF\x40\x3D\x68\xCD\x7C\x67\xCB\xCC\x83\x0C\xD1\x20\xC4\xAE\xAE\x90\x48\x68\xD1\xF8\x31\xCE\xC3\x09\xD7\xCF\x96\xE4\x6E\x65\x9E\xA2\xD7\xCF\xE6\xAA\x6E\xA5\x13\xCD\xD1\x42\xEA\x33\x6B\x5E\xCA\xD4\x00\x7C\xB1\xCB\x51\xF1\x3E\x6B\x9D\xC6\xD0\x59\x8A\x24\xD7\x81\x29\xB8\xB6\xA4\x45\x0A\xA3\x40\x6A\xC1\x5E\xC2\x22\xC9\x2C\xC2\x4A\x11\x5D\x9E\x5C\xA8\x72\xCE\xD8\x98\xCE\xD6\x68\x48\x09\xBA\x3A\x78\xD4\x9B\x09\x3D\xC3\x40\x74\xB8\xD4\x3A\x4B\x09\x64\x21\x1C\xD6\xB4\xCA\x65\x6A\x47\xC0\x01\xDC\xB6\xD4\x6A\xCB\x28\xC5\xD7\x6E\xD6\x54\x09\xCC\xCC\x3F\xB2\xB4\x5C\xDD\x15\xC6\xCD\x5D\x4E\x11\xDD\x7C\x47\x07\x3B\x18\xC3\x20\xC2\xEE\xCE\x5C\x14\x21\x6B\xA0\x83\x00\xE1\xD9\xA4\x51\x09\xC8\x1A\xC4\xD1\x74\xEA\x32\x0A\xD5\xD6\x50\xB5\x8A\xCC\xE1\x63\xE3\xDC\x3A\x55\x1A\xDC\x6A\x4A\x07\x3B\x8A\xD1\xDE\xE1\xA2\x37\x09\xC4\xEE\x5F\xDA\x05\xEB\xA6\x20",
			"\x57\xC1\xE0\x7B\x06\x91\xD6\x12\xCA\x21\xE5\x08\xED\x5F\x16\x21\x60\xCD\x86\xEA\xE1\x3E\x5C\x03\xE4\x7B\x4D\x0C\xD9\x9A\xED\xD0\xE4\xA6\x3F\x0A\xC6\xAA\x3F\x09\xEB\x3E\xE7\xE3\x37\xE8\x35\x18\x3A\xE1\x3F\x81\xCA\xC5\xA0\xDC\x57\xE2\x72\x64\x01\x64\x3A\xC3\x22\xCD\x31\xF4\x4D\x19\x21\x68\xC6\x9B\xD9\xEE\x52\x66\x1B\xD6\x90\x10\xE2\xCF\xAE\xFF\xE1\xE9\xAA\x2A\x0C\xD3\xA8\x39\xE2\x05\xE6\xE8\xE9\x5F\xEE\x5D\x1B\x62\xE4\x54\x91\xF2\xCA\xD1\x03\x34\xC8\xDA\xA2\x31\x0F\x90\x7E\x5F\x89\xF1\x35\x73\x50\x8C\x98\x2B\xAE\xAD\x20\x91\x3A\x28\xF2\x55\x9C\x80\xB0\x97\x0D\xF2\x81\x8C\xF4\x9C\xF5\x4C\xDA\x27\x4C\xE4\x26\xF2\x21\x31\x95\xE5\xF4\x9A\xF3\xB9\x9C\xF7\xF3\x1C\x8C\x78\x00\x64\x74\x72\x9D\x25\xF5\x24\xA7\xF4\xEF\x40\x08\xFF\xB5\x9C\x2D\xF5\x25\x8F\x9A\x25\xEC\xA5\x23\xF6\x85\x35\xF7\xC2\x74\x39\xBF\x3F\x19\x95\x25\x10\xBA\x22\xB3\x52\x20\xFA\x4D\x1A\xB8\xF0\xCD\xBA\x26\xAE\x39\x28\xF9\x4B\x4C\xA8\xF0\xA6\xBA\x24\x97\xE0\x30\xF9\xE5\x52\xF3\xF0\x00\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"HalfIf",
			L"CompleteIf",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"CompleteStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][HalfIf] BEGIN ",
			L"[10][HalfIf] END [ENDING]",
			L"[11][HalfIf]< \"if\" \"cond\" \"then\" @ Stat >",
			L"[12][HalfIf]< \"if\" \"cond\" \"then\" Stat @ >",
			L"[13][HalfIf]< \"if\" \"cond\" @ \"then\" Stat >",
			L"[14][HalfIf]< \"if\" @ \"cond\" \"then\" Stat >",
			L"[15][CompleteIf] BEGIN ",
			L"[16][CompleteIf] END [ENDING]",
			L"[17][CompleteIf]< \"if\" \"cond\" \"then\" @ CompleteStat \"else\" Stat >",
			L"[18][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" @ Stat >",
			L"[19][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat \"else\" Stat @ >",
			L"[20][CompleteIf]< \"if\" \"cond\" \"then\" CompleteStat @ \"else\" Stat >",
			L"[21][CompleteIf]< \"if\" \"cond\" @ \"then\" CompleteStat \"else\" Stat >",
			L"[22][CompleteIf]< \"if\" @ \"cond\" \"then\" CompleteStat \"else\" Stat >",
			L"[23][IfTail] BEGIN ",
			L"[24][IfTail] END [ENDING]",
			L"[25][IfTail]CompleteStat @ [ \"else\" Stat ]",
			L"[26][IfTail]CompleteStat [ \"else\" @ Stat ]",
			L"[27][IfTail]CompleteStat [ \"else\" Stat @ ]",
			L"[28][IfTail]HalfIf @",
			L"[29][If] BEGIN ",
			L"[30][If] END [ENDING]",
			L"[31][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[32][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[33][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[34][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[35][OtherStat] BEGIN ",
			L"[36][OtherStat] END [ENDING]",
			L"[37][OtherStat]<< !Block @ >>",
			L"[38][OtherStat]<< !Do @ >>",
			L"[39][CompleteStat] BEGIN ",
			L"[40][CompleteStat] END [ENDING]",
			L"[41][CompleteStat]<< !CompleteIf @ >>",
			L"[42][CompleteStat]<< !OtherStat @ >>",
			L"[43][Stat] BEGIN ",
			L"[44][Stat] END [ENDING]",
			L"[45][Stat]<< !If @ >>",
			L"[46][Stat]<< !OtherStat @ >>",
			L"[47][Module] BEGIN ",
			L"[48][Module] END [ENDING]",
			L"[49][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseManualTokens, ModuleParserStates, IfElseManualAstInsReceiver>(&IfElseManualTokenDeleter, &IfElseManualLexerData, &IfElseManualModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsemanual::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsemanual::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsemanual::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
