/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseManual
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseManual_Assembler.h"

namespace ifelsemanual
{

/***********************************************************************
IfElseManualAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> IfElseManualAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = IfElseManualCppTypeName((IfElseManualClasses)type);
		switch((IfElseManualClasses)type)
		{
		case IfElseManualClasses::BlockStat:
			return new ifelsemanual::BlockStat();
		case IfElseManualClasses::DoStat:
			return new ifelsemanual::DoStat();
		case IfElseManualClasses::IfStat:
			return new ifelsemanual::IfStat();
		case IfElseManualClasses::Module:
			return new ifelsemanual::Module();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void IfElseManualAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = IfElseManualCppFieldName((IfElseManualFields)field);
		switch((IfElseManualFields)field)
		{
		case IfElseManualFields::BlockStat_stats:
			return vl::glr::AssemblerSetObjectField(&ifelsemanual::BlockStat::stats, object, field, value, cppFieldName);
		case IfElseManualFields::IfStat_elseBranch:
			return vl::glr::AssemblerSetObjectField(&ifelsemanual::IfStat::elseBranch, object, field, value, cppFieldName);
		case IfElseManualFields::IfStat_thenBranch:
			return vl::glr::AssemblerSetObjectField(&ifelsemanual::IfStat::thenBranch, object, field, value, cppFieldName);
		case IfElseManualFields::Module_stat:
			return vl::glr::AssemblerSetObjectField(&ifelsemanual::Module::stat, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void IfElseManualAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = IfElseManualCppFieldName((IfElseManualFields)field);
		return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
	}

	void IfElseManualAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = IfElseManualCppFieldName((IfElseManualFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* IfElseManualTypeName(IfElseManualClasses type)
	{
		const wchar_t* results[] = {
			L"BlockStat",
			L"DoStat",
			L"IfStat",
			L"Module",
			L"Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElseManualCppTypeName(IfElseManualClasses type)
	{
		const wchar_t* results[] = {
			L"ifelsemanual::BlockStat",
			L"ifelsemanual::DoStat",
			L"ifelsemanual::IfStat",
			L"ifelsemanual::Module",
			L"ifelsemanual::Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElseManualFieldName(IfElseManualFields field)
	{
		const wchar_t* results[] = {
			L"BlockStat::stats",
			L"IfStat::elseBranch",
			L"IfStat::thenBranch",
			L"Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	const wchar_t* IfElseManualCppFieldName(IfElseManualFields field)
	{
		const wchar_t* results[] = {
			L"ifelsemanual::BlockStat::stats",
			L"ifelsemanual::IfStat::elseBranch",
			L"ifelsemanual::IfStat::thenBranch",
			L"ifelsemanual::Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> IfElseManualAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = IfElseManualCppTypeName((IfElseManualClasses)type);
		return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
	}
}
