/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElsePriority
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElsePriorityModuleParser.h"

namespace ifelsepriority
{
	void IfElsePriorityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1118; // 9001 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 94;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x29\x23\x00\x00\x56\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x6E\x7C\x7E\x10\x6A\x62\x7F\x78\x12\x01\x8C\x64\x7E\xE3\x53\x0A\x82\x65\x14\x0F\x83\x6B\x80\xFD\x4C\x86\x85\x85\x18\x82\x87\x86\x66\x15\x12\x81\x77\x86\x0B\x99\x81\x8A\x86\x98\x52\x46\x80\x7C\xF9\x68\x84\x84\x89\x2C\xA3\x8E\x8A\x65\x17\x1E\x85\x7A\x7B\x34\xB1\x7A\x88\x88\xA5\x78\x78\x06\x8C\xF4\x69\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x2B\xAF\x83\x84\x8E\x53\x98\x6C\x07\x92\x50\x94\x9F\x86\x88\x39\x9C\x95\x95\x8B\x96\x5D\x08\x95\x93\x59\x9E\x9B\x94\x98\x5F\x92\x97\x9A\x64\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x5D\xA8\x9B\x99\x9D\x92\x5F\x0E\x9B\x78\x20\x3B\x9A\x97\x46\x21\x3E\x96\x9B\x8C\x71\xB4\x99\x98\x9E\x88\x87\xAA\xA0\x6D\x22\x02\xA6\x9C\xA1\x73\xBF\x9D\x8E\xA1\xB4\x68\x0A\x40\x5B\x27\x9E\x6C\x6A\x67\x2C\x58\xA0\x4E\x67\x9E\x9F\xAC\x71\xA8\x02\x64\xA3\xAA\x87\xA6\xB0\x4D\xA7\xA5",
			"\x53\x69\xAE\x58\x73\x9B\xA0\x6B\xAB\x5A\xAD\xA2\xA0\xA8\xAB\x57\x6E\xA5\xAE\xAD\xA7\xB4\xA9\xAE\x87\xB1\x8C\x7C\x49\xB0\xD0\x73\xAC\xAE\xB1\x03\x69\xA8\xB2\x40\xAF\x90\x74\xB0\x4B\xC3\x93\x51\xB7\x55\xCB\x81\x40\x63\xAF\xBC\x90\x79\xAB\xB5\x7D\x69\xAA\xB3\x48\xDB\xBB\xA1\x71\x5F\xCF\x90\xB0\x4B\x6D\xD9\xAC\x49\x69\x5F\xEA\x92\xB3\x4B\xBA\x9C\xA3\x48\xBB\xB1\xF2\xB8\xAD\x5F\xBC\x03\x4D\xBC\x48\xBE\x02\x5C\xBE\x65\xA0\xD9\x8D\xBB\x45\xAA\x1B\x7E\xBB\x43\x73\xF0\xA5\xAA\x41\xC2\xD6\xAB\x6F\x70\xB1\xA9\x84\xB6\xC1\x40\xB0\x59\xA2\x41\xC5\x06\x69\xA8\xC7\x5F\xCF\x61\xB9\x40\xBF\x01\x4D\xB0\xC8\x00\xA9\xA3\xC3\xC4\x00\xBD\x49\x47\xCB\xC8\x1B\x7D\x96\xC5\xC8\x13\x59\xB0\x00\xC0\xE3\x89\xBA\x41\x87\xD9\x8D\xAF\xC8\x4C\x11\x99\xB3\x0B\x73\x2B\xF2\xC4\x08\xD0\x0A\x76\x79\xB5\x09\x44\xC9\x41\x79\xB6\x26\x09\xD6\x43\x8E\xD9\xA7\x0F\x73\xCF\xD9\xA7\xC2\xCC\x00\xFA\x92\xAE\xAD\xCD\xA2\x8D\xB9\xD7\xA0\x0A\x67\xC4\xC3\xA4\x5A\xC6\x4C\xC0\x00\x1B\xE2\xAA\xAF\x81\xF8\x69\xD4\xC6\xCC\x27\xDF\xDA\x67\xC0\xAF\x7C\x62\xCC\xA5\x90",
			"\xAE\xD0\x00\x80\xD9\xA7\xD2\xDE\x64\xDE\xB5\xDA\xCA\xCC\xC4\xBF\xD6\x67\xD9\x25\xC2\xEC\xAE\xDE\x86\xE3\x6A\xDD\xE2\x09\x69\xC4\xBC\xD8\xF2\x63\xCC\xDC\xAF\x23\xCD\xE4\x6E\xE4\x36\xDF\xC1\xDA\xCC\x9C\xCC\xBD\x8C\x71\x5B\xC3\x41\xE9\x40\xC4\x9B\x40\x71\xBE\x64\xD8\x6B\xEA\x40\x97\xF6\xA4\xE8\xD7\x85\xB8\x7A\x71\x42\x7A\xDB\x47\xEC\xED\x72\x8E\x75\xEA\x40\xBB\xC3\x41\xEE\xA8\xBE\xFC\xE3\x7A\xD1\x19\xCA\x41\xF1\xBF\x32\xCB\xD6\xF0\x7E\xC3\xC1\x49\xA9\xF1\x03\x79\xE5\xD2\x9B\x09\xBF\xE1\x40\xF5\xB0\xF2\xCB\x7F\xCE\xE3\x7D\xC9\xF1\x42\xDC\xCD\xC9\xB5\xF4\x58\xFD\x86\x8B\xF8\x06\x4E\xF3\x43\xEC\xB6\x85\x8F\xF0\xE5\x06\x48\xFF\xFA\xBD\x03\x59\xF3\xFF\xA3\xD7\xE4\xFE\xA2\x9A\x1B\x3F\x7A\x41\x4B\x7F\x52\xBC\x7D\x40\x7D\x02\x96\x56\x01\xF2\x32\x7F\xEA\x72\x66\x41\xE0\x7A\x47\x73\x0D\x8D\x7B\x6C\x62\x7C\x75\xF2\x23\x4B\xCE\x14\x86\x7C\x5E\x78\x63\x7F\x92\x26\x4B\xCE\x10\x86\x20\xFD\x76\x53\x7D\x18\x88\x4A\x66\x17\x82\x20\x13\xA2\x51\x46\x11\x94\x7F\x40\x1F\x89\x7E\x99\x50\x68\x84\x89\x54\x34\x0A\x97\x62\x66\x0D\xAC\x7E",
			"\x49\x4A\x5A\x78\x00\x3B\x81\x20\xF4\x5B\x21\x88\x3F\x81\x4A\x98\x42\x84\x88\x00\x16\x6A\x21\x4B\x89\x89\x9C\x7A\x42\x89\x1B\x83\x20\x86\xBC\x54\x88\x0E\x8B\x5B\x22\x1F\x8A\x80\x3F\xC5\x57\x6A\x18\xE9\x72\x36\xCD\x7F\x1A\x60\x31\x37\x68\x1A\xF8\x77\x35\x6F\x60\x5F\x6A\x63\x6C\x8E\xDA\x70\x84\x8E\xB8\x42\x37\x64\xD0\x51\x6D\xC1\x57\x62\x6C\xD4\x02\x37\x6C\xD0\x47\x6C\x4C\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat +[ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" @ Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" Stat @ ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat @ +[ \"else\" Stat ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat +[ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat +[ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElsePriorityTokens, ModuleParserStates, IfElsePriorityAstInsReceiver, ModuleParserStateTypes>(&IfElsePriorityTokenDeleter, &IfElsePriorityLexerData, &IfElsePriorityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2)
	{
		return -1;
	};

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(const vl::WString & input, vl::vint codeIndex)
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};
}
