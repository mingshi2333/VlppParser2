/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElsePriority
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElsePriorityModuleParser.h"

namespace ifelsepriority
{
	void IfElsePriorityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1208; // 10065 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 184;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x51\x27\x00\x00\xB0\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x6E\x7C\x7E\x10\x6A\x62\x7F\x78\x12\x01\x8C\x64\x7E\xE3\x53\x0A\x82\x65\x14\x0F\x83\x6B\x80\xFD\x4C\x86\x85\x85\x18\x82\x87\x86\x66\x15\x12\x81\x77\x86\x0B\x99\x81\x8A\x86\x98\x52\x46\x80\x7C\xF9\x68\x84\x84\x89\x2C\xA3\x8E\x8A\x65\x17\x1E\x85\x7A\x7B\x34\xB1\x7A\x88\x88\xA5\x78\x78\x06\x8C\xF4\x69\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x2B\xAF\x83\x84\x8E\x53\x98\x6C\x07\x92\x50\x94\x9F\x86\x88\x39\x9C\x95\x95\x8B\x96\x5D\x08\x95\x93\x59\x9E\x9B\x94\x98\x5F\x92\x97\x9A\x64\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x5D\xA8\x9B\x99\x9D\x92\x5F\x0E\x9B\x78\x20\x3B\x9A\x97\x46\x21\x3E\x96\x9B\x8C\x71\xB4\x99\x98\x9E\x88\x87\xAA\xA0\x6D\x22\x02\xA6\x9C\xA1\x73\xBF\x9D\x8E\xA1\xB4\x7A\x0A\x40\x5B\x27\x9E\x6C\x6A\x67\x2C\x58\xA0\x4E\x67\x80\x57\x5D\xA7\xA7\x7D\x61\xAD\x5F\xA8\x6B\x53\x56\xA8\xA7",
			"\x23\x5E\xA3\x42\x5B\xCC\x6B\xA0\x68\xAA\xA4\xB1\xA3\x54\xAD\x03\x6E\xA0\x6A\xAC\xCC\x78\xA2\x40\xAC\xD0\x5B\xA3\xAD\xAB\x97\xAA\xA7\xAC\xB1\xB5\xB6\xA2\xA8\xB2\x06\x7A\xAA\xB3\xA9\xCC\xAF\xA6\xB3\xB2\x20\x4E\xB0\x4C\x4B\xBC\x90\x7E\xAD\x40\xD6\x98\xB7\xB1\xB5\x1E\x82\xBD\xAF\x48\xE2\x9A\xB3\x49\xB6\x2C\x5B\xB7\xB7\xB9\xDF\x9D\x46\xB5\xB7\xEC\x94\xBE\xBA\x87\xA9\x50\xB0\x49\xB9\xE9\xA3\x45\xBC\xAB\xF7\xAD\xB9\x47\xBE\xC3\xBD\xB2\xBD\x46\xD6\xA8\xB1\xBE\xBD\xF3\x89\xB0\x75\xC1\xD3\x88\xC4\xC1\xB1\x57\x4C\xC7\x56\xC1\xF9\x8F\xC9\xA4\x68\xC0\x7F\x53\x54\xBE\x15\xD9\x49\xC4\xA9\x2C\x5F\xCF\xA5\xC8\x10\xFD\x52\xC8\x00\xC0\xAC\x41\xA2\xC2\xC0\x9B\x46\xB7\x46\xD9\x80\xC1\x40\xB0\x32\xC0\x06\xB5\xCD\xD9\xA5\xB0\xB1\xB9\xD6\xA5\xB9\xB4\x6C\x17\xC1\x40\xD1\xB3\xAF\x4A\x49\xB4\xB0\x12\xC6\x47\x6D\xD0\x00\x0B\xD4\xD1\x42\x4E\xDA\xC9\x41\x6F\x09\x59\xB1\xD6\xC2\x06\x76\x0F\x70\xB0\x0E\x8A\xC4\xC6\x66\xD6\x9D\x8E\xD5\x8F\x1B\x51\x83\xDA\x7C\x56\xD8\xDB\x47\x0D\xCF\x59\xB6\x7E\xDA\x09\x78\x0D\xDA\x42\xE1\x70\xD6\x41\x0E\x73",
			"\xC9\x4B\x8E\xDD\x4E\xA3\x08\xD7\xD7\x92\x6A\xD9\xCA\xA4\xA9\x8C\xD3\x79\x4C\x8E\x92\x69\xB4\xBC\x98\x50\xA4\xA4\x6A\x45\xF2\x7E\xC9\xE2\x96\x43\xD3\x42\xE5\x41\xB0\xC5\xCA\x93\x93\xC9\x48\xE5\x40\x54\xE8\x8E\xE0\xE1\x06\x5F\xE0\x00\x80\x92\xEB\x6B\xE5\x90\xEF\x91\xE6\x40\xE0\x96\x5B\x47\xD4\xB7\x3D\xB5\xC6\xB7\xEC\x00\x26\xE7\xE1\x43\xAB\xF1\x96\xEB\xED\xBC\x64\xD3\xA4\xE9\x03\x78\xE8\xEA\xE8\x0A\x4A\x75\xE0\x8A\xA1\xF9\xAA\x40\xEE\xB0\xE3\x6B\x45\xDD\x4F\xE8\x84\x73\xF2\x03\x4D\xF7\x42\xF0\xFA\x54\xE3\x6B\xC9\xC7\xDC\xEA\x41\xF8\xBF\x83\xF8\x66\xF2\xA5\xDC\xF6\x41\x81\xD5\xCE\x9E\x70\xF6\x02\x68\xF3\x40\xF9\x71\x9B\x4D\xD5\xFB\x41\xAF\xD8\xFD\x40\xF2\xC2\x41\xF4\x6D\x1B\x22\x6F\xFE\x72\x44\x7E\x9B\x4A\x27\x7D\xE9\x69\x75\x42\x31\x40\x7F\x38\x49\x45\x81\x00\x08\x83\xFC\x6A\x73\x21\x21\x50\x83\x3C\x66\x63\x82\x04\xFE\x74\x82\x81\x0A\x4F\x82\xF8\x26\x47\x00\xD4\x73\x21\xEB\x48\x79\x21\x62\x46\x70\xF1\x02\x2A\x7F\x12\xBD\x46\x5A\x6D\x4A\x87\xA0\x0A\x2D\x84\x81\x1B\x81\x4E\x83\x73\x86\x7C\x7B\x39\x39\x0E\x85\x53",
			"\x85\x01\x25\x80\x0F\xA7\x88\x49\x47\x4A\x24\x7D\x97\x7E\x84\x00\x7A\x40\x84\xCC\x3B\x69\x38\xEB\x63\x7E\x12\xAB\x63\x81\xF1\x16\x80\x8A\x03\x28\x88\x07\x8A\x86\x20\xBF\x4D\x8A\x33\x46\x4C\x6B\xFD\x03\x2F\x80\x22\x83\x25\x04\xBD\x71\x50\x66\x19\x84\x8C\x25\xA7\x01\x8D\x8F\x6A\x22\x00\xED\x8C\x8B\x81\x29\x00\x8E\x40\x80\x02\x08\xC9\x85\x8E\x81\x2B\x06\x68\x3D\x5F\x83\x00\xFB\x82\x21\x02\xBB\x71\x21\x2E\x00\x92\x7C\x29\x83\x90\x45\xA6\x8A\x20\x31\x0E\x92\x93\x4C\x83\x81\x27\x83\x24\x81\x8F\x81\x20\x0D\x78\x8A\x86\x83\x17\x8D\x56\x87\x69\x5C\xDF\x58\x69\x86\x94\x25\x95\x23\x2D\x68\x70\x29\xEA\x6C\x70\x94\x2D\x91\x61\x0A\x6F\x65\xE7\x31\x9C\x95\x5A\xBF\x6A\x30\xFF\x7F\x1F\xD1\x1A\x77\x96\x08\x80\x05\x66\x42\x20\x98\x4B\x35\x60\x6E",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat +[ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" @ Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" Stat @ ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat @ +[ \"else\" Stat ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat +[ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat +[ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElsePriorityTokens, ModuleParserStates, IfElsePriorityAstInsReceiver>(&IfElsePriorityTokenDeleter, &IfElsePriorityLexerData, &IfElsePriorityModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(IfElsePriorityTypeName((IfElsePriorityClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	}

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsepriority::Module, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsepriority::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	}
}
