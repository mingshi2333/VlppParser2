/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElsePriority
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElsePriorityModuleParser.h"

namespace ifelsepriority
{
	void IfElsePriorityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1212; // 10065 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 188;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x51\x27\x00\x00\xB4\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x6E\x7C\x7E\x10\x6A\x62\x7F\x78\x12\x01\x8C\x64\x7E\xE3\x53\x0A\x82\x65\x14\x0F\x83\x6B\x80\xFD\x4C\x86\x85\x85\x18\x82\x87\x86\x66\x15\x12\x81\x77\x86\x0B\x99\x81\x8A\x86\x98\x52\x46\x80\x7C\xF9\x68\x84\x84\x89\x2C\xA3\x8E\x8A\x65\x17\x1E\x85\x7A\x7B\x34\xB1\x7A\x88\x88\xA5\x78\x78\x06\x8C\xF4\x69\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x2B\xAF\x83\x84\x8E\x53\x98\x6C\x07\x92\x50\x94\x9F\x86\x88\x39\x9C\x95\x95\x8B\x96\x5D\x08\x95\x93\x59\x9E\x9B\x94\x98\x5F\x92\x97\x9A\x64\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x5D\xA8\x9B\x99\x9D\x92\x5F\x0E\x9B\x78\x20\x3B\x9A\x97\x46\x21\x3E\x96\x9B\x8C\x71\xB4\x99\x98\x9E\x88\x87\xAA\xA0\x6D\x22\x02\xA6\x9C\xA1\x73\xBF\x9D\x8E\xA1\xB4\x7A\x0A\x40\x5B\x27\x9E\x60\x6F\x55\x2C\x58\xA0\x4E\x67\xA9\x7D\x5D\xA7\xA7\x7D\x61\xAE\x67\xA8\x6B\x53\x56\xA8\x68",
			"\xA8\x81\x75\xAB\x54\xAD\xA4\xA0\x77\xAA\xCC\x71\xA2\x42\xA7\xA0\xB0\xA3\x48\xAE\x02\x6E\x5C\x73\xA6\xA2\xBB\xA7\xA6\xAA\xBA\xA0\x4C\xAF\xA7\x2C\x74\xA0\x76\xAD\x01\x47\xB3\xAD\xB1\x1D\x4E\xBE\xAF\xB3\x9C\x82\xB2\xAC\x73\xCA\xAC\x4C\xB0\x00\xCE\x89\xB0\xB5\x46\xD2\x93\x50\xB3\xA9\x23\x63\xBC\xAB\x48\xD9\x9A\xB6\xB3\xB5\xD8\x9F\xB8\x46\xB3\xDD\xA8\xBE\xBB\x45\xE1\x97\x5C\x68\xB9\x20\x66\xB5\xAF\x48\xF7\xA7\xB9\xBF\xBC\xFF\x3D\xBB\xBF\xBF\xD5\xAB\xB9\x40\x60\x57\x69\xBA\xB8\xB8\xEC\x90\x7E\xB0\xC2\xAF\x85\xC1\xB7\xB0\x57\x4F\xC4\xB2\xC4\x0C\xD9\xA0\x68\x71\x07\xE2\xB0\xC0\xC7\xD7\xAC\x40\xCA\xAC\x22\xD4\xCD\x5F\xC8\xBD\x93\x51\xA0\xBB\xD3\x9B\x4E\xB3\x46\x10\xC3\x4A\xB3\xB4\xCA\x8E\xBA\xB1\xCC\x07\x4F\x72\xC0\xB7\xAB\x4A\x48\xCD\x40\xFA\x80\x03\xB5\xD0\xCE\x81\xDF\xCE\xD0\x26\xFF\x5A\x43\x6D\x1A\xC1\x4C\xD2\x41\xCE\x8F\xDA\xD1\x42\xBD\x5D\xC9\x42\xD4\x0D\xC3\x46\x0F\x73\xD3\x8E\x8C\xBB\xD1\xE3\x4E\xBD\x87\xD7\x3D\x9B\x41\x84\xD9\xF2\x47\xD8\xD5\xD6\x01\x77\x0F\x73\xD1\xF6\x6C\xD6\x40\x0E\x6F\xCA\x41\x7A\xDC\x03",
			"\x79\x05\xDD\x42\x3B\xB8\xD1\x93\x08\x0D\xE0\xD8\x7D\xD6\xD3\x94\xAE\xCA\x9B\x31\x4E\xA2\x67\xD1\xF1\x98\x60\xA6\xE1\x0A\x4A\xB1\xD3\x78\x87\xCD\xD1\xA4\x66\x41\xD3\xE3\xE2\xCF\x49\xC1\x95\xE6\x41\x41\xD5\xD8\x8B\xE3\x92\x89\x41\xD0\x80\xF2\x5B\x4B\xCD\xE3\x9A\x70\xBF\x68\xE7\xA9\xCB\xDD\xE5\x9C\x35\xF2\xE6\xE9\xD9\x0D\x73\xE2\x9C\xD1\xB6\xC6\x42\xEA\x93\xA4\xC3\xAD\xEF\x40\xA8\xE3\xEA\x42\x72\xA9\xB2\x7F\xEF\xAD\xC3\xC2\x42\xE2\xE3\x76\xFA\xE3\x78\xCA\xCD\xBC\x6D\xCD\xEC\xFA\x4A\xE6\x64\x70\xC4\xF8\xE9\x41\xF1\x03\x45\xE5\xEA\x41\xC8\xE0\xEE\xF6\x41\x05\x90\xDD\x8E\x73\xC9\xE4\xFA\x40\xF8\x9E\xD3\x42\xF4\x7E\x71\xEA\xF9\x70\xEC\xC6\xC9\x43\xDA\xFD\x28\xB0\xF5\xF5\x42\xEC\x66\x7C\xF6\x06\x21\x47\xF6\x4E\x49\x41\x06\x82\x21\x00\xDD\x73\x81\x81\x03\x49\x81\x71\x47\x6C\xFF\x03\x2B\x80\xE7\x67\x7B\x20\x4A\x50\x82\x9C\x26\x43\x82\x81\x37\x6E\x20\xD4\x72\x4F\x46\x62\x46\x72\xC8\x49\x25\x7E\x03\x21\x85\xD8\x0A\x2D\x4D\x12\xA3\x7B\x20\x28\x8A\x81\x8F\x62\x72\x78\xF9\x3B\x3F\x7E\x0D\x85\x4F\xA3\x6F\x7A\x21\x1B\xB9\x78",
			"\x49\x3B\x8F\x23\xEB\x39\x81\x20\x3D\x5A\x83\x3C\x7D\x6E\x57\x40\x69\x7C\x81\x1F\x83\x23\x65\x1D\x91\x4F\x03\xCA\x82\x20\x26\x96\x84\x88\x00\x00\x73\x11\xF8\x36\x48\xCB\x5E\x6E\x20\x08\x8E\x8A\x40\x25\x03\x7F\x1A\x86\x22\x82\x03\x21\x8C\xF0\x0A\x27\x05\x32\x81\x8E\x20\xFB\x69\x8F\x05\x82\x29\x04\x37\xAA\x4B\x23\x1C\x83\x22\xE6\x50\x79\x21\x15\x38\x7E\x49\x19\x91\x88\x00\x79\x82\x20\xFF\x62\x82\x21\x2E\x1F\x8D\x90\x24\x82\x90\x42\x81\x27\x79\x9A\x3B\x21\x0C\x0A\x91\x4E\x23\x82\x91\x89\x03\x25\x82\x18\x81\x24\x06\x3B\x89\x54\x36\x53\x84\x67\xE0\x5A\x5E\x6E\x96\x42\x34\x86\x20\x2D\x65\xE2\x0D\x6A\x94\x4F\x9A\x24\x75\x13\x6D\x63\xCB\x1F\x77\x5B\x59\xBA\x70\x26\xB6\x96\x69\x6E\x10\x9D\x23\xA3\x6D\x67\x68\x30\x2C\x70\x6A\x02\x3A\x60\x90\x0A\x5C\x6D",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat +[ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" @ Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" Stat @ ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat @ +[ \"else\" Stat ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat +[ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat +[ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElsePriorityTokens, ModuleParserStates, IfElsePriorityAstInsReceiver>(&IfElsePriorityTokenDeleter, &IfElsePriorityLexerData, &IfElsePriorityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsepriority::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsepriority::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
