/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElsePriority
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElsePriorityModuleParser.h"

namespace ifelsepriority
{
	void IfElsePriorityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1168; // 9433 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 144;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\xD9\x24\x00\x00\x88\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x6E\x7C\x7E\x10\x6A\x62\x7F\x78\x12\x01\x8C\x64\x7E\xE3\x53\x0A\x82\x65\x14\x0F\x83\x6B\x80\xFD\x4C\x86\x85\x85\x18\x82\x87\x86\x66\x15\x12\x81\x77\x86\x0B\x99\x81\x8A\x86\x98\x52\x46\x80\x7C\xF9\x68\x84\x84\x89\x2C\xA3\x8E\x8A\x65\x17\x1E\x85\x7A\x7B\x34\xB1\x7A\x88\x88\xA5\x78\x78\x06\x8C\xF4\x69\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x2B\xAF\x83\x84\x8E\x53\x98\x6C\x07\x92\x50\x94\x9F\x86\x88\x39\x9C\x95\x95\x8B\x96\x5D\x08\x95\x93\x59\x9E\x9B\x94\x98\x5F\x92\x97\x9A\x64\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x5D\xA8\x9B\x99\x9D\x92\x5F\x0E\x9B\x78\x20\x3B\x9A\x97\x46\x21\x3E\x96\x9B\x8C\x71\xB4\x99\x98\x9E\x88\x87\xAA\xA0\x6D\x22\x02\xA6\x9C\xA1\x73\xBF\x9D\x8E\xA1\xB4\x7A\x0A\x40\x5B\x27\x9E\x60\x6F\x55\x2C\x58\xA0\x4E\x67\xA9\x7D\x5D\xA7\xA7\x7D\x61\xAE\x67\xA8\x6B\x53\x56\xA8\x68",
			"\xA8\x81\x75\xAB\x54\xAD\xA4\xA0\x77\xAA\xCC\x71\xA2\x42\xA7\xA0\xB0\xA3\x48\xAE\x02\x6E\x5C\x73\xA6\xA2\xBB\xA7\xA6\xAA\xBA\xA0\x4C\xAF\xA7\x2C\x74\xA0\x76\xAD\x01\x47\xB3\xAD\xB1\x1D\x4E\xBE\xAF\xB3\x9C\x82\xB2\xAC\x73\xCA\xAC\x4C\xB0\x00\xCE\x89\xB0\xB5\x46\xD2\x93\x50\xB3\xA9\x23\x63\xBC\xAB\x48\xD9\x9A\xB6\xB3\xB5\xD8\x9F\xB8\x46\xB3\xDD\xA8\xBE\xBB\x45\xE1\x97\x56\xB9\xAD\xE5\xB3\xBF\x3F\xBD\xCB\x96\xB6\x40\x60\x57\x69\xBA\xB8\xB8\xEC\x90\x7E\xB0\xC0\xAF\x95\xBB\xB9\xAA\x57\x47\xC4\xB2\xC2\xD1\x9E\x8C\xBF\xC0\x1D\x7D\x6C\xB8\x4B\xAC\x64\xB0\x49\xC6\xE7\x9B\xCA\xBE\xC5\xD7\xAC\x40\xCB\x40\xF1\xA0\x43\xC9\xAF\x53\x67\xC1\x40\xC2\x9E\x41\xAC\xBB\xB4\x1B\x4E\xBB\x44\xCB\x0B\x4F\x7A\xB2\xB3\xCA\xB4\xC1\x40\xC7\x01\x53\xBC\xCC\xB7\xAB\x4A\x4A\xCC\x00\xFC\x93\xBC\xBE\xB3\xFC\x83\xD3\xB6\xC3\x09\x77\x69\xA6\x40\x4E\xC6\x4E\xB1\xD4\x7F\x7C\x62\xD2\x42\x54\xE4\xA2\x0F\x73\xD3\x8E\x8C\xBB\x0C\xCF\x4E\xBD\x84\xBB\x34\x0F\x7B\x45\x84\xEC\xB5\x0F\x73\xD0\x59\xDF\xA6\x0F\xDA\x0A\x76\x7C\xBB\x0D\x70\xC9\x41\x78\xBB\x38",
			"\x35\xD6\x43\x8E\xEC\xB9\x0F\x73\x08\x05\xC3\xD5\xC0\x00\xD3\x94\xA1\xCE\xD9\x5C\xD3\xA8\x7F\xD0\x32\xCA\xE3\xA2\x42\xCA\xBC\xB7\xE3\xD3\x85\xB8\x7C\xBE\xE4\x57\xCC\xC8\x8B\xE4\x06\x7C\xBA\xC8\x4C\x86\xFD\x8C\xBC\x80\xEC\xBF\xC5\xCA\x66\xF0\xAF\x69\xE7\xB5\x6D\xC0\xD2\x7F\xCD\x58\xEA\xEC\xB8\x70\x24\xE2\xE3\xB1\xD3\x56\xD7\xC2\xA6\x7C\xAD\xE4\xE7\xB6\x72\x9A\xCE\x9F\xE7\xD4\xAB\xF2\xA7\xDE\xD4\x3D\x84\x71\xF2\x40\x9F\xFF\xCB\x47\x7E\x94\xD1\xA8\x64\xED\x02\x7E\xE2\xAE\xF5\x28\xC7\x88\x7C\xF0\x9D\xC5\xC5\x80\xF2\xF2\x4E\x7B\xF1\x40\xDC\xC3\x48\xF7\xA7\x5E\xE0\xF8\x8A\xDC\xEA\xC3\x45\xFA\x40\x82\xCA\x43\xD9\xFB\x41\xA7\xFE\xEA\x41\xE2\xDD\xFC\xB9\x8C\xE3\xF2\x99\x81\xFF\xF9\x66\x7D\xC1\x43\x4D\x7F\xF1\x28\x6C\x7E\x01\x21\x80\xFC\x05\x6A\x49\x02\xB8\x3E\x44\x08\x80\x03\xF1\x03\x2A\x79\x6B\x62\x49\x7A\xA1\x69\x20\xFB\x14\x87\x76\x83\x2D\x48\x83\xBB\x66\x23\x06\x82\x2A\x81\x9E\x4E\x77\x51\x0A\x30\x7A\x41\x6F\x78\x59\x10\x8E\x4E\x7E\x2A\x92\x55\x06\xA8\x4F\x7B\x81\x18\x71\x21\x7A\x4E\x80\x66\x7C\x6E\x55\x81\x35\x85",
			"\x7A\x05\x6E\x65\x04\xE3\x34\x81\x1E\x82\x27\x87\x2B\x65\x60\xE0\x3A\x8A\x32\x23\x51\x79\x7D\x03\x3F\x7F\xB5\x25\x0E\x50\xC9\x07\x81\x8A\x05\x66\x05\x15\x96\x33\x7E\x2C\xAC\x5F\x04\x5B\x83\x34\x04\xB6\x85\x60\x14\x05\x79\x48\x0D\x91\x83\x18\xC0\x8C\x5D\x15\x27\x89\x4E\x17\x8A\x8F\x1B\xB0\x2E\x05\x39\xA3\x39\x87\x11\x9C\x87\x40\x7C\x77\x5B\x18\x21\x8C\x36\x45\x92\x84\x7E\x4B\x53\x71\x42\x84\x72\x30\x85\x6C\x24\xCC\x31\x23\x71\x45\x9D\x82\x3B\xA7\x71\x61\xC1\x0D\x7F\x90\x59\x54\x95\x7F\x30\x37\x93\xBF\x02\x33\x68\x6D\x4A\x6B\x66\x83\x6C\x70\x6A\x02\x32\x60\x90\x0A\x58\x26",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat +[ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" @ Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" Stat @ ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat @ +[ \"else\" Stat ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat +[ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat +[ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElsePriorityTokens, ModuleParserStates, IfElsePriorityAstInsReceiver, ModuleParserStateTypes>(&IfElsePriorityTokenDeleter, &IfElsePriorityLexerData, &IfElsePriorityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return Parse<ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens) const
	{
		 return Parse<ModuleParserStates::Module>(tokens, this);
	};
}
