/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElsePriority
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElsePriorityModuleParser.h"

namespace ifelsepriority
{
	void IfElsePriorityModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1206; // 10001 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 182;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x11\x27\x00\x00\xAE\x04\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x08\x0A\x96\x0A\x93\x01\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x81\xD7\x83\xC1\xD4\xD3\xD3\x03\xD8\x7D\xB3\xFA\xCA\x88\x00\xDF\x80\x87\xAD\xB2\xCA\x8A\x0E\xDF\xD2\xD6\xE1\x09\x8B\x05\xE2\xD4\xDC\x07\xE5\xDA\xB4\xA6\xCC\xFB\xD8\xE1\xDF\xE2\xEB\xD5\x9E\xD4\xF8",
			"\xEC\xEA\xEF\xEB\x81\x0D\x4F\xD2\xF0\xEB\xEE\xED\xEC\xE3\xE7\xD3\xDF\xE8\xFD\xEC\xF6\xF3\xF6\xEA\xE9\xE4\xEB\xF1\x86\x06\xF0\xCA\xF3\x89\x8F\x17\xF8\xCB\xF3\xF0\x08\xFC\x5A\x6E\x7C\x7E\x10\x6A\x62\x7F\x78\x12\x01\x8C\x64\x7E\xE3\x53\x0A\x82\x65\x14\x0F\x83\x6B\x80\xFD\x4C\x86\x85\x85\x18\x82\x87\x86\x66\x15\x12\x81\x77\x86\x0B\x99\x81\x8A\x86\x98\x52\x46\x80\x7C\xF9\x68\x84\x84\x89\x2C\xA3\x8E\x8A\x65\x17\x1E\x85\x7A\x7B\x34\xB1\x7A\x88\x88\xA5\x78\x78\x06\x8C\xF4\x69\x8F\x7B\x8F\x35\x80\x09\x04\x8F\xF2\x5A\x04\x93\x8D\x98\x5B\x07\x90\x90\x36\x8C\x9E\x8D\x90\x2B\xAF\x83\x84\x8E\x53\x98\x6C\x07\x92\x50\x94\x9F\x86\x88\x39\x9C\x95\x95\x8B\x96\x5D\x08\x95\x93\x59\x9E\x9B\x94\x98\x5F\x92\x97\x9A\x64\x1E\x23\x9F\x90\x99\x70\xAF\x92\x9D\x94\x5D\xA8\x9B\x99\x9D\x92\x5F\x0E\x9B\x78\x20\x3B\x9A\x97\x46\x21\x3E\x96\x9B\x8C\x71\xB4\x99\x98\x9E\x88\x87\xAA\xA0\x6D\x22\x02\xA6\x9C\xA1\x73\xBF\x9D\x8E\xA1\xB4\x7A\x0A\x40\x5B\x27\x9E\x60\x6F\x55\x2C\x58\xA0\x4E\x67\xA9\x7D\x5D\xA7\xA7\x7D\x61\xAE\x67\xA8\x6B\x53\x56\xA8\x68",
			"\xA8\x81\x75\xAB\x54\xAD\xA4\xA0\x77\xAA\xCC\x71\xA2\x42\xA7\xA0\xB0\xA3\x48\xAE\x02\x6E\x5C\x73\xA6\xA2\xBB\xA7\xA6\xAA\xBA\xA0\x4C\xAF\xA7\x2C\x74\xA0\x76\xAD\x01\x47\xB3\xAD\xB1\x1D\x4E\xBE\xAF\xB3\x9C\x82\xB2\xAC\x73\xCA\xAC\x4C\xB0\x00\xCE\x89\xB0\xB5\x46\xD2\x93\x50\xB3\xA9\x23\x63\xBC\xAB\x48\xD9\x9A\xB6\xB3\xB5\xD8\x9F\xB8\x46\xB3\xDD\xA8\xBE\xBB\x45\xE1\x97\x56\xB9\xAD\xE5\xB3\xBF\x3F\xBD\xCB\x96\xB6\x40\x60\x57\x69\xBA\xB8\xB8\xEC\x90\x7E\xB0\xC0\xAF\x95\xBB\xB9\xAA\x57\x47\xC4\xB2\xC2\xD1\x9E\x8C\xBF\xC0\x1D\x7D\x6C\xB8\x4B\xAC\x64\xB0\x49\xC6\xE7\x9B\xCA\xBE\xC5\xD7\xAC\x40\xCB\x40\xF1\xA0\x43\xC9\xAF\x53\x67\xC1\x40\xC2\x9E\x41\xAC\xBB\xB4\x1B\x4E\xBB\x44\xCB\x0B\x4F\x7A\xB2\xB3\xCA\xB4\xC1\x40\xC7\x01\x53\xBC\xCC\xB7\xAB\x4A\x4A\xCC\x00\xFC\x93\xBC\xBE\xB3\xFC\x83\xD3\xB6\xC3\x09\x77\x69\xA6\x40\x4E\xC6\x4E\xB1\xD4\x7F\x7C\x62\xD2\x42\x54\xE4\xA2\x0F\x73\xD3\x8E\x8C\xBB\x0C\xCF\x4E\xBD\x84\xBB\x34\x0F\x7B\x45\x84\xEC\xB5\x0F\x73\xD0\x59\xDF\xA6\x0F\xDA\x0A\x76\x7C\xBB\x0D\x70\xC9\x41\x78\xBB\x38",
			"\x35\xD6\x43\x8E\xEC\xB9\x0F\x73\x08\x05\xC3\xD3\x79\xC1\x00\x13\xB4\xA5\xCC\x6E\xB1\x4E\xA2\x64\x43\xE5\xCA\x64\xA4\x87\xCA\x4A\xB3\xC4\xF8\x48\xEF\xD1\xA1\xF8\x7C\xB4\xE4\x66\x33\xC3\xB2\x7E\xE5\x06\x7C\xBA\xCA\x9C\x90\xD2\xA9\x40\xBF\x00\x9F\xE1\xD0\xC3\x28\xB0\xBF\x6B\xD5\xAA\xCD\xDE\xE4\x8A\x37\xD8\xDF\xE9\xEC\x06\x40\x74\xC9\x8F\x47\xF6\xE9\x43\xE8\x83\xD3\xA6\xEA\x41\x6D\xC0\x09\xE8\x8A\x1B\x4A\x7C\xEA\x93\xA3\xD3\xD0\xEC\xF2\x0A\x77\xD2\xD5\x8F\xC4\x4B\xF2\x43\xE8\x3F\xC1\xFA\x7F\xE2\x96\x7A\xE2\x43\xF1\x4E\x9B\x40\xF8\xCA\x07\xB8\x7A\xF1\xE8\x3D\x9B\x45\x83\xF4\xF2\x4E\x76\xF5\x40\xE7\xC3\x43\xF9\x9C\x1B\x5E\xDC\xF8\x8A\x72\xF7\xF3\x41\xFC\x02\x42\xE5\xE6\x42\x63\x7A\x7D\x90\x73\x70\x69\x84\x2E\x78\x7D\xB8\x63\x21\x8C\x6F\x72\x4F\x04\x4C\x87\x80\xF2\x69\x7E\x42\x43\x4C\x81\xF1\x28\x6A\x80\x01\x30\x81\xFF\x12\x89\x20\x25\x55\x80\x3F\x26\x58\x80\x00\x52\x73\x21\xEA\x50\x79\x21\x62\x57\x71\xA4\x18\x39\x7F\x12\xBD\x46\x59\x6D\x4A\x85\xE4\x09\x2D\x84\x81\x1A\x81\x4E\x86\x63\x7A\x93\x7B\x39\x38\x0E\x88\x4F",
			"\x51\x0A\x24\x80\x0F\xA7\x8F\x86\x35\x6A\x7F\x76\x44\x83\x22\x9E\x1F\x88\x32\xBE\x6E\x53\x20\xEB\x71\x81\x02\x82\x2E\x64\x11\xA3\x3C\x82\x4F\x82\x21\x14\x9B\x83\x8B\x80\x00\x74\x89\x9A\x26\x4A\x0A\xF6\x73\x20\x07\x89\x8A\x20\x25\x1C\x7B\x68\x17\x85\x8C\x1F\x83\x26\x04\x6A\x94\x35\x00\xED\x8D\x8A\x00\x27\x01\x8E\x1B\x21\x87\x40\x1B\x7F\x70\x85\x28\x07\x79\x4E\x5E\x82\x08\xFA\x8F\x7A\x37\x82\x23\x05\x80\x81\x49\x0A\x83\x99\x90\xFA\x4A\x26\x05\x8D\x92\x4F\x12\xA2\x8E\x88\x05\x86\x91\x20\x31\x18\x8F\x04\x85\x63\x70\x6D\x44\x77\x93\x85\x62\x31\x0E\xA3\x20\x66\xC5\x45\x65\x94\xB3\x7A\x3A\xE3\x11\x65\x60\x99\x60\x77\x5A\xAE\x89\x96\xAC\x31\x99\x20\xFF\x66\x26\x96\x20\x2A\x69\xE7\x01\x72\x97\x9A\x72\x32\x60\x20\x2A\x5B\x27\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" @ Stat +[ \"else\" Stat ] >",
			L"[12][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" @ Stat ] >",
			L"[13][If]< \"if\" \"cond\" \"then\" Stat +[ \"else\" Stat @ ] >",
			L"[14][If]< \"if\" \"cond\" \"then\" Stat @ +[ \"else\" Stat ] >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" Stat +[ \"else\" Stat ] >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" Stat +[ \"else\" Stat ] >",
			L"[17][Stat] BEGIN ",
			L"[18][Stat] END [ENDING]",
			L"[19][Stat]<< !Block @ >>",
			L"[20][Stat]<< !Do @ >>",
			L"[21][Stat]<< !If @ >>",
			L"[22][Module] BEGIN ",
			L"[23][Module] END [ENDING]",
			L"[24][Module]< Stat @ >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElsePriorityTokens, ModuleParserStates, IfElsePriorityAstInsReceiver>(&IfElsePriorityTokenDeleter, &IfElsePriorityLexerData, &IfElsePriorityModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelsepriority::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelsepriority::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelsepriority::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
