/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElsePriority
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_IFELSEPRIORITY_MODULEPARSER_SYNTAX
#define VCZH_PARSER2_UNITTEST_IFELSEPRIORITY_MODULEPARSER_SYNTAX

#include "IfElsePriority_Assembler.h"
#include "IfElsePriority_Lexer.h"

namespace ifelsepriority
{
	enum class ModuleParserStates
	{
		Do = 0,
		Block = 4,
		If = 9,
		Stat = 17,
		Module = 22,
	};

	const wchar_t* ModuleParserRuleName(vl::vint index);
	const wchar_t* ModuleParserStateLabel(vl::vint index);
	extern void IfElsePriorityModuleParserData(vl::stream::IStream& outputStream);

	class ModuleParser
		: public vl::glr::ParserBase<IfElsePriorityTokens, ModuleParserStates, IfElsePriorityAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		ModuleParser();

		vl::Ptr<ifelsepriority::Module> ParseModule(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<ifelsepriority::Module> ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif