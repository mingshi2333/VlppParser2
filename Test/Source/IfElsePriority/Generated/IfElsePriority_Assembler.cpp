/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElsePriority
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElsePriority_Assembler.h"

namespace ifelsepriority
{

/***********************************************************************
IfElsePriorityAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> IfElsePriorityAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = IfElsePriorityCppTypeName((IfElsePriorityClasses)type);
		switch((IfElsePriorityClasses)type)
		{
		case IfElsePriorityClasses::BlockStat:
			return new ifelsepriority::BlockStat();
		case IfElsePriorityClasses::DoStat:
			return new ifelsepriority::DoStat();
		case IfElsePriorityClasses::IfStat:
			return new ifelsepriority::IfStat();
		case IfElsePriorityClasses::Module:
			return new ifelsepriority::Module();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void IfElsePriorityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = IfElsePriorityCppFieldName((IfElsePriorityFields)field);
		switch((IfElsePriorityFields)field)
		{
		case IfElsePriorityFields::BlockStat_stats:
			return vl::glr::AssemblerSetObjectField(&ifelsepriority::BlockStat::stats, object, field, value, cppFieldName);
		case IfElsePriorityFields::IfStat_elseBranch:
			return vl::glr::AssemblerSetObjectField(&ifelsepriority::IfStat::elseBranch, object, field, value, cppFieldName);
		case IfElsePriorityFields::IfStat_thenBranch:
			return vl::glr::AssemblerSetObjectField(&ifelsepriority::IfStat::thenBranch, object, field, value, cppFieldName);
		case IfElsePriorityFields::Module_stat:
			return vl::glr::AssemblerSetObjectField(&ifelsepriority::Module::stat, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void IfElsePriorityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token)
	{
		auto cppFieldName = IfElsePriorityCppFieldName((IfElsePriorityFields)field);
		return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
	}

	void IfElsePriorityAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem)
	{
		auto cppFieldName = IfElsePriorityCppFieldName((IfElsePriorityFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* IfElsePriorityTypeName(IfElsePriorityClasses type)
	{
		const wchar_t* results[] = {
			L"BlockStat",
			L"DoStat",
			L"IfStat",
			L"Module",
			L"Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElsePriorityCppTypeName(IfElsePriorityClasses type)
	{
		const wchar_t* results[] = {
			L"ifelsepriority::BlockStat",
			L"ifelsepriority::DoStat",
			L"ifelsepriority::IfStat",
			L"ifelsepriority::Module",
			L"ifelsepriority::Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElsePriorityFieldName(IfElsePriorityFields field)
	{
		const wchar_t* results[] = {
			L"BlockStat::stats",
			L"IfStat::elseBranch",
			L"IfStat::thenBranch",
			L"Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	const wchar_t* IfElsePriorityCppFieldName(IfElsePriorityFields field)
	{
		const wchar_t* results[] = {
			L"ifelsepriority::BlockStat::stats",
			L"ifelsepriority::IfStat::elseBranch",
			L"ifelsepriority::IfStat::thenBranch",
			L"ifelsepriority::Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> IfElsePriorityAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = IfElsePriorityCppTypeName((IfElsePriorityClasses)type);
		return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
	}
}
