/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1811; // 15780 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 19;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\xA4\x3D\x00\x00\x0B\x07\x00\x00\x09\x00\x01\x82\x80\x07\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x84\x09\x0A\x98\x0A\x9C\x0A\x80\x12\x85\x40\x01\x09\xBF\x7B\x8C\x8B\x8E\x84\x00\x1D\x9D\x9F\x81\x9C\x8B\x90\x93\x7F\x26\xA4\xA9\x81\x9B\x92\x92\x85\x93\x28\xAF\xA7\x9F\x8F\x89\x8E\x8D\x99\x32\xAA\xB9\x8C\x9B\x9E\x97\x9A\x9D\x3F\xBC\x81\xBE\x96\x80\x99\x97\x92\x3D\xC8\x83\xAA\xA5\xA0\x9D\x84\x9B\x06\xD0\x83\x86\xA9\xA6\x8D\xAB\x98\x4B\xD6\x99\xB8\xAD\xA0\xA1\xAE\xA1\x5F\xC4\x93\xAE\xA1\xB4\xA7\xB0\xAF\x67\xE0\xA9\xA2\xB2\x84\xA9\x84\x01\x0A\xD2\xAD\xA4\xBB\xB6\xB3\xB8\xB4\x77\xEA\xB9\xAC\xB1\x86\xB5\xB2\xAD\x7F\xDC\x83\x83\x01\xBF\xAB\xA2\xC0\x75\x88\xFB\xB6\xBD\xBC\xBB\xC4\xC5\x8D\xF8\x91\xDA\xB3\xCC\xBC\x90\xC7\x95\x8C\xD7\xD2\xCB\xCC\xC9\xCE\xCB\x7E\x89\xC2\xCF\xC3\xD1\xCC\xC9\xCF\x9A\xA1\xE4\xDF\x8C\x87\xA6\x85\x02\x85\xDB\x9F\x86\x01\xD9\xC3\xC3\xD2\xA8\xA7\xC8\x91\xA6\xC5\xDE\xD8\x85\x08\x35\xC3\x8E\x8C\xDF\xDD\x84\x05\xC2\xAB\xFE\xD6\xDA\x83\x05\xE4\xD3\xB8\x8C\x0F\xF9\xD8\xDA\xD4\xE9\xDB\xD8\xCB\xE2\xD9",
			"\xE6\xE4\xE5\xEF\xED\x0A\x8D\x13\xF6\xE4\xEF\x8E\x06\x85\x70\xDF\xCA\xEA\xF1\x80\x0B\xF0\xCC\xE5\xDA\xEB\xFE\xE4\xF8\xF0\xF7\xF8\xF7\xE4\xFA\xF0\xFB\xFC\xCD\xFE\xCF\xFF\x60\x60\x7D\x04\xEF\x7E\x7C\x7F\x81\x9C\x50\x4E\x69\x7E\xF0\x53\x05\x80\x80\x08\x9E\x64\x07\x83\x96\x55\x04\x85\x6A\x11\x82\x86\x83\x86\x10\x9C\x8A\x85\x87\x9E\x56\x07\x87\x69\x01\x98\x8E\x86\x89\x20\x9F\x8A\x88\x8A\x2B\xA4\x80\x7F\x05\x23\x95\x70\x7E\x44\x0B\xB5\x73\x7E\x7D\x06\x59\x01\x8F\x47\x1A\x3B\x82\x7F\x75\x3F\xB8\x76\x8C\x90\x0C\xA7\x87\x6B\x06\x3E\x85\x99\x88\x8B\x4C\xAE\x8C\x64\x45\x35\xB8\x82\x97\x8D\x54\x84\x93\x92\x90\x03\x5D\x09\x93\x95\x25\x8E\x9B\x92\x97\x2D\xB2\x86\x92\x98\x5F\xA4\x91\x98\x77\x5C\x99\x8A\x66\x07\x5B\x93\x91\x43\x07\xE8\x41\x9D\x94\x6E\x21\x2D\x92\x42\x08\x76\x96\x9E\x98\x96\x55\xBC\x9A\x9D\x9F\x73\xA8\x9B\x9D\xA0\x72\xAA\x97\x6B\x08\x79\xBE\x9A\xA0\xA1\x4A\xA7\x91\x90\x09\x89\x8C\xA9\x9B\x98\x1F\x65\x01\xA6\xA1\x66\x8D\x99\xA7\x69\x26\x17\xA4\xA5\xA1\x9F\x8D\xAA\xA6\xA0\x80\xB0\x77\x0A\xA7\x65\xA4\xAF\x9F\xAA",
			"\x8B\x98\xAA\xA8\x00\x28\x28\xAE\xA2\xA8\x60\xA3\xA0\xA9\xAA\xB7\x96\x69\x0A\xAC\x9A\x6A\x0C\xAD\xAD\xA7\x6B\x0F\xAF\xA6\xC4\xAF\xA2\xA7\xA0\xAE\xB9\xAA\x64\x0B\xC3\x86\xB9\xB0\xAD\xC5\x8A\xB7\x69\x0B\xCD\x92\xB1\xB4\xB4\xCE\xA1\xA3\xA6\x67\x2E\x15\xB9\x43\x0B\xDE\x97\x90\x0D\xB8\xC8\x9A\xB5\xB8\xAE\xD8\x96\xBF\x45\x0C\xE4\xA5\xA6\xBA\xBB\xE8\x9B\xB6\x66\x16\x71\x91\x94\x68\x6D\x5B\x70\x49\x78\x4D\xA2\x6D\x61\x60\x4C\xFE\xA2\x6A\xBC\xBF\x81\x41\xC4\x6B\xC0\x6F\x57\x56\xC0\x74\x00\xD7\x58\xC1\x71\x05\xCE\xC7\x4B\xC2\xD4\x4F\xC4\xC0\x75\x14\xF0\x46\xC6\x40\xFB\xBD\xB2\xC4\x49\x19\xDA\xC4\x49\xC7\x02\x72\x50\x74\xBE\xFF\x93\xCF\xC5\x48\x24\xFC\xBB\xC5\x40\x2D\xD4\x71\xCD\xCC\x0D\xF9\xB7\x49\xCC\x26\xD8\xCB\xC9\x47\x21\xE2\xCD\x45\xCC\xB7\x7D\xCE\xCF\x46\x33\xCA\xCB\xCC\x47\x42\xC3\xD8\xCF\x55\xC8\x49\xCB\x55\xD2\x3E\xD0\xD2\xC8\xD0\x46\xF6\xC3\xC9\xBD\x11\xD6\xD1\x4A\xD4\x1A\xCB\xDB\x55\xD1\x4F\xC7\xD4\xD3\xC5\xA4\x60\xD1\x62\xD9\x1E\xDA\xDF\xCD\x8C\x28\xC2\xCA\xCA\xDA\x1C\x54\xD1\xD8\xDC\x63\xF6\xB0\x74\x6C\x74",
			"\xFF\x3D\xDB\xC1\x27\x78\xD9\xC8\x49\x7B\xCC\xCF\xDB\xDF\x5B\xE2\xDF\x3E\xDC\x59\xC4\xEB\xDA\xD3\x89\xEE\xD0\xCA\xE1\x5E\xC1\x6E\xDE\xE3\x21\x41\xE5\xC5\xDF\x86\xD6\xE3\xD3\xE2\x06\x44\x63\xDE\xE2\x48\xD0\xE4\xD8\x74\x31\xDE\xED\xE0\xDF\x57\xCC\xE2\x69\xE9\x55\xE0\xEB\x44\xD7\x2F\xC0\x09\xCC\x4C\x4D\xDD\xE7\x56\xE6\x9B\xDB\x45\xEF\xC5\xB4\xE3\xE4\x77\xEE\x1C\xCC\xD8\xD6\x68\xC0\xC1\x43\xEF\x49\xC5\xF2\xE7\x54\x8D\x64\xF0\x49\xCE\xEF\xD4\x4F\xFE\xED\xEC\xAC\x7E\xE1\x73\x56\xA6\xE7\xBD\x46\xF4\xA3\xCE\xFE\xEC\xC5\x1F\x57\xF2\xBD\xDC\xDF\xD6\xF6\xB4\xF7\xB6\xD0\xB8\xFB\x40\x3F\x3E\xE9\xCC\xE2\x83\x6E\xFA\x40\xC5\x93\xE5\xC3\xF2\x40\xF5\xC1\x49\xF4\xFE\xD3\x54\xC6\xE5\xCC\xBB\x23\x22\xF8\x03\x26\x72\x8A\x44\x3B\x20\xEF\x6D\x22\x42\x7B\x71\x21\x03\xB6\x79\x21\x14\x69\x79\x02\xC7\x3B\x80\x85\x12\x83\x7E\xCD\x2A\x23\xFF\x19\x89\x21\x00\x82\x26\x39\x09\x23\x83\x07\x9A\x88\x82\xD5\x4B\x23\x3A\xAC\x76\x6C\x00\x14\x62\x3A\x15\xB1\x65\x85\xE9\x66\x20\x0C\x88\x85\x84\x83\x22\x39\x21\xF9\x64\x20\xF4\x0A\x24\x0B\xFE\x4A\x20",
			"\x4E\xA3\x6C\x82\xA2\x39\x6D\x47\x20\x81\x4A\x88\x6C\x46\x8B\x7D\x1F\x28\x48\x25\x97\x49\x87\x1E\x9B\x84\x00\x55\x0E\x87\x84\x04\x42\x8A\x03\x36\x0B\x74\x42\x80\x84\x2C\x81\x27\x0A\x5B\x8A\x23\x79\x5E\x8C\x55\x1C\xB7\x84\x8C\x58\x13\x39\x0E\xEE\x34\x8C\x00\x19\x08\x85\x0A\x36\x43\xE8\x47\x7C\x33\x1C\xB8\x4D\x8D\xE4\x32\x06\xEF\x42\x84\x3D\x57\x75\x22\x5D\xF7\x66\x79\x90\x2F\x59\x66\x3A\xB1\x59\x7E\x26\x8C\x55\xB6\x07\x9D\x4E\xFF\x43\x91\x48\x91\x7A\x7A\x66\x16\x78\x76\xCE\x2F\x52\x88\x7C\x90\x3F\x47\x42\x86\x72\x11\x8A\x90\x90\xE9\x49\x22\xE5\x30\x4B\x88\xDF\x71\x63\x83\xF7\x22\x8B\x29\x95\x85\x95\xFB\x1E\x90\x00\x99\x95\x8C\x2B\x86\x21\x8A\x00\x15\x96\x33\xAF\x5D\x88\x22\xD7\x4F\x94\x21\xB5\x97\x95\x7D\x80\x97\xF8\x3A\x3A\x20\x52\x97\x4F\x23\x68\x62\x23\x18\x86\x24\x66\xF8\x3A\x91\x78\x1D\x93\x97\x9E\x2F\x5C\x8D\x18\xBB\x4F\x8C\xBB\x82\x83\x6B\x0F\x97\x3E\x07\x6A\x87\x58\x02\x2E\x81\x40\x37\x96\x33\x57\x53\x41\x91\x8A\x55\x9B\x40\x31\x62\x9C\x00\x06\x9B\x9A\x35\x8B\x9E\x42\x22\x4F\x9A\xF8\x0A\x40\x62\xC3\x25",
			"\x98\x37\x86\x28\x94\x83\x2F\x9F\x81\x57\x5E\x98\x3E\xE1\x92\x9B\x3E\x6F\x54\x79\xF2\x97\x3F\x39\xCC\x9C\x82\x19\xBB\x9A\x9B\xF5\x8F\x5C\xAB\x33\x82\x20\x72\x9A\x37\x55\x45\x96\x99\x9F\x74\x9A\xA3\x80\x14\xA1\x20\xFF\x9F\x91\x42\x6D\x91\x66\x2D\x68\x9C\x3C\x3A\x48\x9F\x47\xB0\x9F\xA1\x3E\x40\x8D\xA3\x8A\x4D\x88\x4C\xD8\x92\x21\xE4\x41\x99\x94\xC3\x98\x37\x32\x83\x26\xA6\x4D\x81\x4F\x8E\x03\xAC\x54\x79\x0F\x04\x85\x56\x97\x48\x51\x09\x31\x96\x67\x49\x80\xA6\xA2\x89\x21\xA4\x8A\x5F\x23\x33\xB0\x6A\x21\x4E\x67\xA0\x3E\x75\x48\x9E\x53\xB0\xA7\xA7\x2B\x71\x51\xA9\x41\x48\xA8\x4C\xEA\x95\xA7\x96\x82\xAF\x59\x57\x57\x8A\x41\x3D\xA6\x93\xF0\x01\x95\x55\x12\xA0\x02\x5A\x83\x2B\xAA\x78\xB8\xA2\x92\xA7\x37\x9F\x40\x50\xAD\xAB\x3D\x42\x59\xA2\x8C\x81\x23\x42\x84\x86\xAC\x45\x4C\x5F\xAA\x9C\x36\xA8\x4C\x83\xB2\x20\xBE\xBE\xA1\x21\x75\xB0\x9A\x41\x5D\x50\xB0\x5D\x6F\xAC\xB1\x20\xA5\xB3\x5C\x92\xB3\x20\x70\x55\xB2\x33\x7F\xAC\xA1\x42\x18\xBC\xA4\xA3\xBB\x4B\x5C\x88\xBE\x30\xB5\x60\xA9\x20\x39\x86\x22\xA0\x76\xB7\x4A\x1E\x9F",
			"\xB0\x58\xDC\x1C\xA3\x20\xA4\xBD\xAC\xBC\x33\x57\x4A\xA8\xB7\xB6\xA0\xC2\x98\xAC\x6E\x08\xA5\xA3\xC2\xA4\x3B\x06\x6F\xA4\x3C\x6A\xC1\xA0\x00\xE2\xBA\x7E\xB8\xF0\x35\x05\x72\xF0\x3C\x5C\x15\x99\xA3\x20\x29\xA7\x99\x90\x37\x03\xBB\xB8\xB2\xA0\xBB\xD0\xBC\x31\x0E\x5D\xB1\xB0\x00\x10\x4C\x9F\xE1\xBE\x33\x0E\x05\xAC\x55\xD9\xA2\xB6\x20\xE7\xBB\xAD\x61\xB0\xBC\xB2\x81\x3E\x04\xBC\x96\x34\x07\x74\x71\xB2\x20\xA5\xA5\x99\x48\x40\x0C\xBE\xA2\x52\xB8\x9C\xA6\x99\x4D\xB0\xAE\xB4\x85\x42\x43\x08\xBE\x5B\x49\x27\xA5\x07\xC6\xB5\x9F\x45\x0D\xC1\xDA\x9F\x26\x22\xA2\x89\xBE\x65\x47\x01\x9F\x3E\x5C\xBC\xB5\x06\x38\xC2\x3F\x85\xBF\xB6\xAA\x89\x23\x09\x02\xC4\x3E\x0E\x6F\xA2\xC5\x6C\x80\xBF\x3E\x4E\x1D\xC0\xAB\x3C\x02\xC0\xA0\x83\x21\xAB\xDA\xB7\x3E\x14\x15\xC7\x5A\x83\x22\xAC\x77\x9A\x9A\x61\x1B\x97\x66\x90\x91\x05\xCB\x7B\xD0\x6B\x7E\x82\xA3\x7D\x98\x95\x0D\xC9\x75\xCC\xA0\x01\x24\x89\xA1\xCB\x64\xB5\xBC\x60\xF0\x74\xC8\xD9\x7E\xB5\x24\x2E\xDC\x22\x88\x34\x20\xCF\x26\xD0\x72\xCC\x19\xE5\x38\x76\x14\x6F\x78\xF8\x1F\x29\x86\xA3",
			"\x2D\xC8\x26\x39\x8F\x79\x0E\xB4\x26\xA2\x8F\x35\xCB\x23\x96\x7B\x87\xEC\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfTail] BEGIN ",
			L"[10][IfTail] END [ENDING]",
			L"[11][IfTail]!(!0;If @) \"else\" Stat",
			L"[12][IfTail]!(!0;If) \"else\" @ Stat",
			L"[13][IfTail]!(!0;If) \"else\" Stat @",
			L"[14][IfTail]( ([0]? If @) )",
			L"[15][IfTail]OtherStat ( \"else\" @ Stat | ( ([0]? ) ) )",
			L"[16][IfTail]OtherStat ( \"else\" Stat @ | ( ([0]? ) ) )",
			L"[17][IfTail]OtherStat @ ( \"else\" Stat | ( ([0]? ) ) )",
			L"[18][If] BEGIN ",
			L"[19][If] END [ENDING]",
			L"[20][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[21][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[22][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[23][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[24][OtherStat] BEGIN ",
			L"[25][OtherStat] END [ENDING]",
			L"[26][OtherStat]<< !Block @ >>",
			L"[27][OtherStat]<< !Do @ >>",
			L"[28][Stat] BEGIN ",
			L"[29][Stat] END [ENDING]",
			L"[30][Stat]<< !(0;!If @) >>",
			L"[31][Stat]<< !OtherStat @ >>",
			L"[32][Module] BEGIN ",
			L"[33][Module] END [ENDING]",
			L"[34][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"allow_half_if",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
