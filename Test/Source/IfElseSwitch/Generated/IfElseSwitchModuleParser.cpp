/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1481; // 12605 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 201;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\x3D\x31\x00\x00\xC1\x05\x00\x00\x09\x00\x01\x82\x80\x06\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x95\x0A\x9A\x0A\x87\x1D\x01\x84\xFF\x19\x9A\x99\x8A\x80\x03\x8D\x8D\x1D\x9F\x9A\x81\x92\x97\x7C\x92\x91\x27\x9F\xA9\x80\x9A\x85\x92\x93\x96\x25\x9D\x9D\x97\x88\x89\x98\x98\x94\x37\xAA\xB9\x8C\x95\x98\x9D\x9E\x9D\x3F\xBC\x86\x8E\x9B\x93\x93\x9C\xA3\x41\xC8\x83\xB6\x99\x84\x9A\x82\xA7\x03\xC4\x87\xBC\x83\xAF\x95\xA4\xAA\x57\xD6\x8B\xBE\x9B\xA8\xA1\xAE\xA1\x51\xCC\x9F\xAA\xA1\xB4\xAD\xB2\xAF\x67\xE0\x82\x92\xA9\x82\x02\x84\xA8\x6B\xE2\xA9\xA4\xB1\xBE\xB1\xBA\xB4\x77\xEA\x81\x8C\xB3\xB0\xAD\xBE\xAD\x03\x83\x2F\xB5\xA5\xA6\xBF\xB8\xC3\x79\xF4\xBB\xB2\xB9\xC0\xC7\xC4\xBB\x8F\xF8\x91\xDA\xBE\x8C\xC7\xC8\xC5\x95\x90\xD9\xD2\xCB\xCC\xC8\xBF\xC3\x80\x8D\xE1\xD7\xCE\xC5\xCC\xCD\xCF\xA2\x9D\x8C\x8D\xAA\x85\x03\xC1\xAC\x1D\x88\x8F\xA4\xC4\xD8\xDA\x85\x03\xAF\xFF\x85\xC3\xD6\xD5\xD0\x05\xDC\x03\x8E\xB3\xD6\xD9\x82\x04\xE1\xD4\xB5\xBA\xCA\x8B\x07\xE4\xD0\xDE\x06\xCD\xBD\xFC\xC8\xDE\xE3\xDE\xEB\xE4\xA0\xD7\xC4\xEA",
			"\xEB\xE9\xEE\x85\x06\xD1\xD4\xD2\xFD\x8E\x01\xF2\xCB\xF1\xD8\x82\x90\x8C\xDD\xE8\xE5\xF7\xEA\xE9\xF0\xEF\xE8\xF3\xFA\xF2\xFB\xF3\xF7\x9A\xF9\xFC\xCB\xFE\xCC\xFD\xF3\x10\x26\x7A\x7F\x7F\x03\x9A\x61\x06\x80\xFC\x67\x72\x04\x82\xFE\x45\x8C\x67\x04\x0C\x98\x64\x05\x84\xA5\x7D\x77\x68\x81\x09\x8E\x8D\x81\x86\x1C\x94\x62\x44\x7B\x06\x56\x04\x87\x74\x18\x9B\x86\x8B\x85\x1A\xA8\x8D\x86\x8A\x27\x95\x85\x88\x8B\x98\x57\x03\x8A\x76\xDC\x75\x8E\x75\x7D\x2F\xAE\x89\x8A\x8E\x2B\xBC\x8D\x88\x89\x3B\x80\x9D\x8C\x6F\x18\x33\x81\x7C\x00\x19\x06\x98\x8E\x66\x14\x60\x87\x8E\x41\x1B\x0A\x96\x8E\x7B\x53\xB2\x75\x94\x7D\x57\x96\x8E\x8C\x8C\x5B\x9D\x92\x93\x8F\x34\x83\x4C\x06\x94\x4F\xA5\x94\x96\x99\x56\xA8\x98\x96\x9A\x1D\x24\x97\x9B\x9B\x69\xB0\x9B\x9A\x40\x1E\x2E\x91\x9D\x40\x1F\x36\x93\x9F\x9D\x00\x20\x0A\x9E\x96\x5F\x9C\x91\xA2\x97\x61\xB2\x90\xA1\xA1\x01\x61\x0F\x9D\x8E\x83\x8D\xA8\xA3\x9E\x90\x87\xAA\x42\x08\x8B\x81\x9F\xA2\xA4\x4B\x83\x9F\xA3\x08\x95\x9A\xA7\x90\xA6\x59\x8C\xA7\xA6\xA8\x0A\x64\x0D\xA4\x65\x25\x27\xA2\xA1\x47",
			"\x26\x2A\xA4\xA3\xA7\xA4\x99\xA0\x98\xAC\x96\x8A\x47\x0A\xAB\x8E\xB4\xAE\xA6\xAC\xAB\x87\x90\x12\x42\x6E\x4E\x92\x6A\x6C\xA0\x6E\x41\xB2\x4C\xA0\x6B\x6F\x5E\xB1\xC8\xBF\x5A\xB1\xB1\x25\x47\xB3\x42\xB4\xA2\x4F\xB2\x68\xB3\xC2\x8E\x76\xB6\x73\xD8\x8D\xBA\xB5\x55\xDD\x93\xB5\x57\xB6\xD2\x61\xB2\x40\x5C\xCE\x44\xB7\xB5\x49\xE4\xAE\x46\xB8\xB2\x2E\x6D\xBE\xBA\x48\xD4\x81\x45\xBE\x74\xF2\xB3\xBB\x47\xBD\xE8\xB8\xB0\xB9\xB4\xDE\x95\xBF\xBC\xBD\xC0\xA3\xB3\xC3\x47\xFC\x95\x5F\x6D\x5B\x55\x77\xB7\xBD\xBC\x07\xFB\xB1\xC3\xB7\x59\x6F\xB0\x03\xC3\xEC\x91\xCA\x45\xC2\x59\x6A\xBC\xB5\xC6\x15\xC0\xC3\xC4\xC4\x21\xC4\xCC\xC1\x56\xF9\xBA\xB9\x44\xC7\x7F\x5E\xC5\xB9\x49\x2E\xEA\xCB\x45\xCC\x32\xEB\xCA\x42\x60\x28\xDA\xC6\xCF\xC8\x22\xC6\x48\xCE\xB3\x3A\xFF\x3E\xC1\xC3\x37\xC6\xC5\xC8\xC2\x23\xB4\xC5\xCF\xC2\x01\xEE\x4E\x6B\xD1\x1B\x4F\xDB\xB1\x49\x52\xD0\xB2\x48\xD3\xDE\xAE\x48\xD6\x40\x18\xD7\xD3\x8B\xD6\x01\x7F\xC0\x69\x9D\x3C\xE2\x4D\xBF\xC4\xCE\x67\xDA\x40\xB9\x1D\x60\xD1\xA5\x49\x6A\xC9\x4C\xDA\x42\x6E\xE4\xC1\xC1\xDD\x25",
			"\x62\xD6\xA0\xDC\x68\xFB\x67\xBE\x6A\x68\xF8\xD1\x91\xDC\x06\x73\xD9\x42\xE0\x1F\x46\xE6\x40\xE2\x3F\x84\xE1\x62\xAE\x1B\x4E\xE2\x42\x0A\x68\xD2\xE6\xBC\xDA\x7A\xC1\x44\xB9\xBF\xE4\xB7\xB4\xB9\xE6\x00\x15\xD7\xB9\x6B\x05\xC9\x42\xE9\xD8\x0A\x6E\xCD\xBE\xCB\xF7\xAE\xC0\xE8\x6E\xA6\xD1\x70\xEE\x41\xA7\xD7\xC7\x6C\xE9\x09\x60\xED\xBF\xBD\xA0\xEE\xDD\xBE\xDB\xF7\xAE\xD0\xEA\x70\x03\x64\xB3\xEE\xB7\x38\x11\x7D\xBE\x8C\x13\xF9\x01\x74\xE8\x49\x93\xCA\x0D\x74\x1D\x45\x93\xC7\x0E\xD1\x46\xF8\xD8\x0F\xD9\xCA\x45\x7B\xC4\x3D\x1D\xF9\x40\x78\x13\xFE\x01\x77\xBD\x0B\xA5\xDC\x64\xB9\x63\x93\xCF\x0D\x74\x28\x18\xE7\x93\xA3\x33\x50\xE8\x64\xCB\x6A\x8F\xAD\xBD\xBF\xA0\x8F\xE7\xCB\x95\xA3\x55\x57\x7C\x64\x5A\x68\xCE\x0F\x50\x7F\x7B\x7A\x32\xCB\x05\x84\x33\xBE\x7C\x75\x74\x00\x90\x83\x40\x2E\x6C\x70\xCC\x01\x83\x57\x57\x4E\x67\x84\x73\x3F\x51\xDA\x5D\x6C\x33\x43\x69\x22\xEB\x73\x77\x49\xE3\x5C\x6F\x48\x9D\x77\x76\x08\xA4\x8F\x7E\x71\x49\x24\x78\x27\x93\x3C\xEB\x2A\x8B\x70\x16\xA1\x52\x80\x57\x46\x85\x40\x1B\x81\x83\xF9\x0C\x3D",
			"\x85\x72\x40\x78\x0D\xFE\x7D\x87\x2B\x64\x7E\x20\x1F\x94\x32\x71\x40\x81\x20\xB7\x75\x72\x3C\x8F\x4B\x3F\x70\x37\x8C\x32\x18\x81\x24\x81\x16\x8B\x6E\x16\x89\x21\x40\x26\x90\x50\x3A\x5E\x96\x88\x00\x3C\x89\x7E\xBA\x52\x82\x20\xE9\x68\x8B\x91\x5F\x7A\x8D\x17\x85\x6C\x83\x0A\x2B\x89\x1B\x86\x24\x8D\x18\x97\x4D\x8B\x73\x83\x23\x0F\x86\x20\x8D\x22\x83\x25\x8F\x03\x3C\x7D\xAC\x57\x40\x91\x83\x36\x83\x20\x47\x8E\x85\x88\x67\x8C\x4F\x34\x8A\x97\x8F\x0A\x35\x8C\x9F\x0F\x56\x7B\x3C\xB2\x4A\x92\xB6\x69\x21\x21\xA8\x70\x8F\xF9\x0D\x4E\x92\x7C\x42\x46\x17\x89\x92\x20\x39\xA5\x8C\x57\xAF\x53\x3C\x1B\x83\x26\x94\x39\x57\x83\x56\xAA\x8B\x3B\x21\xEA\x3C\x90\x48\x6D\x7B\x8A\x6A\x52\x8B\x40\x18\x90\x8B\x23\x6D\x49\x5B\x6F\x66\x41\xEA\x33\x91\x21\x03\x72\x6A\x21\x64\x60\x94\xA4\x15\x94\x89\x81\x06\x9C\x8E\xC4\x80\x03\x87\x4A\x9E\x4E\x2F\xA2\x39\x4A\xB9\x6A\x23\x33\xCD\x9E\x94\x85\x0C\x7A\x99\x94\x56\x9B\x79\x49\x9C\x9B\x80\x0E\x92\x20\x78\x87\x97\x95\x26\x50\x99\xFE\x42\x20\x42\x09\x3B\x99\x37\xA8\x99\x57\xF9\x18\x90\x9E\x7E\x89",
			"\x80\x06\xEA\x43\x9B\x09\x91\x99\x7A\xCA\x89\x56\x38\x9A\x3A\x50\x60\xBD\x9A\x20\xBC\x87\x3F\xA3\x37\x53\xA0\xCE\x21\x98\x97\x02\x27\xA0\x27\xF9\x9C\x4F\x14\x35\x92\x3C\x9C\x40\x9B\x37\x83\x22\x94\x8A\x80\x00\x9B\x10\xA1\x23\x0A\x38\x55\x7A\x85\x1D\xA2\x9D\x6A\x4C\x04\x49\x8A\x20\xA0\x8E\x91\x9A\x3C\x2D\x0B\xA5\x42\x1F\x9E\x9F\x4E\x86\x27\x96\x8F\x82\x22\x0B\x6F\x8B\x9D\x5A\xB4\xA0\xA1\x2F\xA7\x3D\x0C\x3C\xAA\x4D\x56\x5E\x8F\xA7\x13\xA8\xA6\x9C\x34\x04\xA8\x39\x71\x7E\x8B\x38\xA2\x20\x48\xCA\xAC\x4F\x1B\x32\xA6\x20\xBF\x8D\x6A\x42\xEE\x5D\x6F\xAE\x80\x02\x90\x28\x20\xAE\xD9\x7D\x66\x73\x80\x25\xA9\x93\xBA\x29\x8A\xC4\x40\x98\xAD\x40\x9D\x20\x81\x76\x81\x60\xE8\x44\x23\xAE\x97\x20\x72\x26\x77\xBD\x21\x5E\xCD\xAD\x59\x94\x60\x26\xAF\x1B\x3B\x70\xE0\x68\x69\x84\xDC\x7A\x37\x89\x4E\x7E\xA9\x42\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfTail",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfTail] BEGIN ",
			L"[10][IfTail] END [ENDING]",
			L"[11][IfTail]!(!0;Stat @) \"else\" Stat",
			L"[12][IfTail]!(!0;Stat) \"else\" @ Stat",
			L"[13][IfTail]!(!0;Stat) \"else\" Stat @",
			L"[14][IfTail]( ([0]? Stat @) )",
			L"[15][If] BEGIN ",
			L"[16][If] END [ENDING]",
			L"[17][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[18][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[19][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[20][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]<< !(0;!Block @) >>",
			L"[24][Stat]<< !Do @ >>",
			L"[25][Stat]<< !If @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
