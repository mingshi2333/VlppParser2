/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1794; // 15676 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 2;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\x3C\x3D\x00\x00\xFA\x06\x00\x00\x09\x00\x01\x82\x80\x07\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x84\x09\x0A\x98\x0A\x9C\x0A\x80\x12\x85\x40\x01\x09\xBF\x7B\x8C\x8B\x8E\x84\x00\x1D\x9D\x9F\x81\x9C\x8B\x90\x93\x7F\x26\xA4\xA9\x81\x9B\x92\x92\x85\x93\x28\xAF\xA7\x9F\x8F\x89\x8E\x8D\x99\x32\xAA\xB9\x8C\x9B\x9E\x97\x9A\x9D\x3F\xBC\x81\xBE\x96\x80\x99\x97\x92\x3D\xC8\x83\xAA\xA5\xA0\x9D\x84\x9B\x06\xD0\x83\x86\xA9\xA6\x8D\xAB\x98\x4B\xD6\x99\xB8\xAD\xA0\xA1\xAE\xA1\x5F\xC4\x93\xAE\xA1\xB4\xA7\xB0\xAF\x67\xE0\xA9\xA2\xB2\x84\xA9\x84\x01\x0A\xD2\xAD\xA4\xBB\xB6\xB3\xB8\xB4\x77\xEA\xB9\xAC\xB1\x86\xB5\xB2\xAD\x7F\xDC\x83\x83\x01\xBF\xAB\xA2\xC0\x75\x88\xFB\xB6\xBD\xBC\xBB\xC4\xC5\x8D\xF8\x91\xDA\xB3\xCC\xBC\x90\xC7\x95\x8C\xD7\xD2\xCB\xCC\xC9\xCE\xCB\x7E\x89\xC2\xCF\xC3\xD1\xCC\xC9\xCF\x9A\xA1\xE4\xDF\x8C\x87\xA6\x85\x02\x85\xDB\x9F\x86\x01\xD9\xC3\xC3\xD2\xA8\xA7\xC8\x91\xA6\xC5\xDE\xD8\x85\x08\x35\xC3\x8E\x8C\xDF\xDD\x84\x05\xC2\xAB\xFE\xD6\xDA\x83\x05\xE4\xD3\xB8\x8C\x0F\xF9\xD8\xDA\xD4\xE9\xDB\xD8\xCB\xE2\xD9",
			"\xE6\xE4\xE5\xEF\xED\x0A\x8D\x13\xF6\xE4\xEF\x8E\x06\x85\x70\xDF\xCA\xEA\xF1\x80\x0B\xF0\xCC\xE5\xDA\xEB\xFE\xE4\xF8\xF0\xF7\xF8\xF7\xE4\xFA\xF0\xFB\xFC\xCD\xFE\xCF\xFF\x60\x60\x7D\x04\xEF\x7E\x7C\x7F\x81\x9C\x50\x4E\x69\x7E\xF0\x53\x05\x80\x80\x08\x9E\x64\x07\x83\x96\x55\x04\x85\x6A\x11\x82\x86\x83\x86\x10\x9C\x8A\x85\x87\x9E\x56\x07\x87\x69\x01\x98\x8E\x86\x89\x20\x9F\x8A\x88\x8A\x2B\xA4\x80\x7F\x05\x23\x95\x70\x7E\x44\x0B\xB5\x73\x7E\x7D\x06\x59\x01\x8F\x47\x1A\x3B\x82\x7F\x75\x3F\xB8\x76\x8C\x90\x0C\xA7\x87\x6B\x06\x3E\x85\x99\x88\x8B\x4C\xAE\x8C\x64\x45\x35\xB8\x82\x97\x8D\x54\x84\x93\x92\x90\x03\x5D\x09\x93\x95\x25\x8E\x9B\x92\x97\x2D\xB2\x86\x92\x98\x5F\xA4\x91\x98\x77\x5C\x99\x8A\x66\x07\x5B\x93\x91\x43\x07\xE8\x41\x9D\x94\x6E\x21\x2D\x92\x42\x08\x76\x96\x9E\x98\x96\x55\xBC\x9A\x9D\x9F\x73\xA8\x9B\x9D\xA0\x72\xAA\x97\x6B\x08\x79\xBE\x9A\xA0\xA1\x4A\xA7\x91\x90\x09\x89\x8C\xA9\x9B\x98\x1F\x65\x01\xA6\xA1\x66\x8D\x99\xA7\x69\x26\x17\xA4\xA5\xA1\x9F\x8D\xAA\xA6\xA0\x80\xB0\x77\x0A\xA7\x65\xA4\xAF\x9F\xAA",
			"\x8B\x98\xAA\xA8\x00\x28\x28\xAE\xA2\xA8\x60\xA3\xA0\xA9\xAA\xB7\x96\x69\x0A\xAC\x9A\x6A\x0C\xAD\xAD\xA7\x6B\x0F\xAF\xA6\xC4\xAF\xA2\xA7\xA0\xAE\xB9\xAA\x64\x0B\xC3\x86\xB9\xB0\xAD\xC5\x8A\xB7\x69\x0B\xCD\x92\xB1\xB4\xB4\xCE\xA1\xA3\xA6\x67\x2E\x15\xB9\x43\x0B\xDE\x97\x90\x0D\xB8\xC8\x9A\xB5\xB8\xAE\xD8\x96\xBF\x45\x0C\xE4\xA5\xA6\xBA\xBB\xE8\x9B\xB6\x66\x16\x71\x91\x94\x68\x6D\x5B\x70\x49\x78\x4D\xA2\x6D\x61\x60\x4C\xFE\xA2\x6A\xBC\xBF\x81\x41\xC4\x6B\xC0\x6F\x57\x56\xC0\x74\x00\xD7\x58\xC1\x71\x05\xCE\xC7\x4B\xC2\xD4\x4F\xC4\xC0\x75\x14\xF0\x46\xC6\x40\xFB\xBD\xB2\xC4\x49\x19\xDA\xC4\x49\xC7\x02\x72\x50\x74\xBE\xFF\x93\xCF\xC5\x48\x24\xFC\xBB\xC5\x40\x2D\xD4\x71\xCD\xCC\x0D\xF9\xB7\x49\xCC\x26\xD8\xCB\xC9\x47\x21\xE2\xCD\x45\xCC\xB7\x7D\xCE\xCF\x46\x33\xCA\xCB\xCC\x47\x42\xC3\xD8\xCE\xD1\x36\xE0\xC7\xD0\xD1\x17\xE4\x69\xD2\xCF\x45\xDB\x53\xD6\xC8\x57\xDA\xCB\xD3\x56\x55\xD1\xCD\xD0\xCB\x51\xD0\x7D\xD6\x68\x63\xD2\xDF\xD3\x3F\x5B\xC1\x68\xCA\xC0\x2A\xDF\xDF\xCD\xD8\x3A\xEE\xDC\x45\xDA\xA2\x6B\xD7\xC3\x49\x76",
			"\xCC\xCD\xD9\xCA\x4E\xF2\xD0\xD5\xD8\x35\xFC\xD0\xD9\xC2\x56\xE7\xD9\xD7\xCB\x00\x39\xC0\x4D\xDE\x15\xF8\xD7\xD9\xCC\x84\x45\xEE\xDF\x3F\x87\xF7\xC0\xDC\xE2\x91\xDE\xD2\xE3\xDB\x84\xC1\x60\xE4\xD3\x9B\xC8\xDF\xE1\x8C\x8C\xC3\xDD\x45\x70\x80\xE7\x40\x6F\xE4\xAB\xE1\xEB\x45\xEB\x6C\xE4\x40\xEF\xDD\x24\x68\xE1\xD4\x4C\xB6\xC3\x44\xCF\x49\xB9\xDC\xC7\x55\xEF\x30\xFF\xE1\x8C\xF0\x89\xC2\xF9\x41\xE6\xA2\x74\x87\xEF\x49\x39\xF0\xD4\x75\xF3\x97\xD6\xE1\xD8\xC5\x1F\x44\xF0\x4C\xF2\xF0\x9D\x40\xF5\xEA\x24\x5B\xF6\x40\xF5\xC0\x56\xB0\xD2\x42\xE0\xC9\x46\xF4\xA6\xDE\xC3\x66\xB5\xFA\x02\x7F\x00\xDD\xCE\xE3\xC7\xFF\xF8\xF9\xAF\x53\x71\xCF\xEC\x01\x58\xF1\x40\xFE\xC5\xC9\x44\xC4\xE3\x31\x7B\x37\x40\x44\x7C\x70\x8A\x44\x3B\x20\xF0\x6D\x22\x42\x7A\x70\x01\x03\xA5\x64\x7E\xC7\x36\x7E\x42\x48\x32\x7F\x08\xB6\x59\x20\x14\x6E\x39\x42\x00\x8D\x38\x85\x02\x82\x20\x1A\x86\x20\xF1\x21\x83\x21\x02\xB5\x5F\x7B\x12\x95\x80\xC4\x03\x24\x62\xE9\x17\x80\x00\x31\x6E\x86\x41\x0C\x82\x86\x04\x90\x86\x20\xE2\x29\x20\xFF\x1F\x8C\x5E\x27\x13\x3C",
			"\x62\x70\x41\x6F\x13\x53\x39\x67\x1E\x61\x68\x0A\xD3\x2C\x80\x9B\x61\x61\x0B\xE9\x1F\x20\x49\x61\x72\x0B\x74\x3B\x80\x6F\x29\x3F\x82\x21\x04\x41\x6C\x15\x49\x8D\x83\xB0\x55\x0C\x8B\x09\x27\x3D\xD8\x56\x03\x8B\xF0\x30\x6F\x0A\x65\x89\x22\x7B\x61\x68\x0B\x14\x86\x26\x42\xDC\x7E\x30\xFF\x78\x41\x6D\x2C\x13\x3A\x06\x70\x6C\x80\x79\x2F\x55\x26\x75\x67\x86\x86\xF7\x2F\x55\xCE\x0A\x7F\x59\x19\xBF\x8D\x4F\xD9\x51\x5F\x9E\x7F\x71\x49\x57\x74\x69\x7B\x9A\x2C\x71\xE9\x70\x3F\x54\x06\xBA\x8C\x92\x0B\x8A\x20\xE3\x67\x7C\x33\x44\xB3\x57\x4A\x8C\x70\x45\x20\xF0\x61\x66\x0E\xB7\x3C\x81\xA5\x99\x93\x28\xF7\x34\x79\x4B\x9C\x34\x7F\x0C\x9C\x84\x00\x13\x9D\x93\x20\x64\x82\x20\xAE\x9E\x31\x2B\x9E\x81\x7D\x55\xB2\x5E\x56\xF7\x32\x96\x28\xD7\x4F\x23\xB2\x41\x22\x8C\x06\x3B\x74\x67\x37\x91\x79\x84\x32\x91\x97\x96\x2F\x57\x1A\x86\x97\x3F\x1C\x94\x9A\x84\xF5\x7E\x97\x9E\x0E\x4F\x85\x63\x42\x26\x81\x01\x34\x96\x67\x2F\x53\x43\xCE\x7B\x4B\x9A\xBA\x6A\x81\x42\x43\x9B\x4E\xD6\x07\x91\x20\x22\x5D\x98\x7C\x0A\x4B\x85\x6F\x8A\x24\x9D\x88\x9A",
			"\x93\x3B\x80\x08\x9F\x80\x04\x94\x33\xDC\x95\x9D\x40\x60\x90\x00\x68\x9A\x37\x55\xCA\x69\x9F\x7D\x65\x99\x99\x2E\x86\x25\x86\xF9\x86\x7D\xBB\x2C\x50\xA3\x70\x8D\x91\x48\x46\x97\x9B\x9E\x71\x9A\xA2\x81\x15\xA4\x9F\x17\xA9\x20\x41\xB1\x6A\x4A\x73\xBD\x4A\x47\x26\xA1\x23\x47\x86\xA7\x35\x57\x41\x8D\xA3\xAC\x50\x88\x4C\x80\x06\x9B\x81\x14\x84\x98\x7E\x89\x5D\x18\x93\x81\xA5\x5F\x80\x5F\x5A\x06\x2F\x02\x3E\xDA\x9D\x4E\x3A\xB3\xA4\x3C\x4B\x93\xA6\x50\xEB\x9D\xA7\x81\x0C\x98\x86\x0A\x36\x51\x4A\x8A\x55\x4F\xA9\x8B\xAF\xA8\x98\x97\x3F\xA9\x2A\x8B\x4E\x44\x5C\xAA\x20\xE8\x82\x23\x4D\xED\x99\xA6\x9F\xB8\x31\x8B\x06\x23\xAD\x44\xB8\x8B\x9E\x6F\xAC\x50\xAD\x03\x37\xA8\x59\xBA\xA6\xAD\x8F\x34\x9B\x20\xFD\x8A\x53\xAB\x3E\x52\x9F\x77\x41\x24\xA1\x25\x8D\xA9\x9F\x42\x53\xAA\xF2\x1D\x57\xAB\x7F\xB7\x9E\x60\x81\x22\xAE\xDF\x49\x24\x5A\x7D\xBE\x33\xAE\x53\xA0\xB0\x81\x39\xAB\x8F\x58\x9B\x9D\xB7\x11\xB6\x32\xC2\x8D\xA1\x21\x95\xB9\x7F\x62\x8A\x50\x5D\xC2\xB0\x38\xB2\x33\xB0\x8E\x41\x01\xA3\xAF\x2B\x6C\x5C\xB3\xC0\x86\x20\x47\x83",
			"\x21\xB4\xBD\xA5\xAF\x5C\x96\x39\xAF\x6C\xEB\xA8\xB7\xD8\xBB\x49\xA1\x02\x22\x9D\x34\xC1\x48\x8E\xD3\x9C\x33\x5C\x2F\x80\xBA\x68\xC4\xAC\x54\x1A\x2D\xA8\x3E\xAF\xA2\xA0\x00\x19\xA3\x20\x94\xB8\xA7\x3E\x36\x13\xA0\x00\x32\xA5\xBB\xD1\xA4\x3F\x06\xDA\xB0\x4A\x41\x42\xB7\xA1\x20\x78\x02\x95\x57\x45\xBB\x67\x86\x22\xBC\xBC\xA3\xB4\xB5\x8E\xA6\x23\x0E\x4F\xBC\x32\xE7\xAF\x85\xBD\xB8\x9E\xB8\x7C\x3D\x08\xBD\x3D\x75\x03\x9F\x49\xB9\x4B\x68\xAA\xB0\x90\x83\x00\x0A\xBB\x2F\xA2\xC0\x73\x8A\x51\x08\xED\x96\x23\x83\xFA\xBC\x32\x10\x37\x8B\x4E\xF0\x88\xB0\x00\x0F\xC6\x23\x65\xD9\xA2\xB7\x7D\x86\x0D\xBF\x7D\x5A\x07\x3E\x99\xCA\x7D\x05\xE4\x39\x09\x14\xDD\x4C\x0F\x20\xC1\x20\xA3\x83\x25\xAA\xD7\xB7\x49\x13\x5A\xBE\xAB\xE5\x5D\x92\x63\xCE\x79\xC5\xFF\x36\x3F\x9F\xEE\x4E\x7C\x7D\x0F\x84\x96\x61\x4A\x93\x64\x27\x8F\x91\xBE\x05\xCB\xBE\x42\xD3\xA4\x27\xF8\x4C\xCF\x23\x2C\xA8\x25\x94\xFF\x1C\x80\x9A\x15\xC8\xCA\xCE\x77\xC9\x8A\xD7\x37\x70\x8A\x4D\x7D\x7C\x3A\x86\x30\xFF\x1A\x6C\x7F\xE6\x7C\x7C\x26\xE4\xBE\x21\x9A\x9B\x2C\x71\x1C",
			"\xCA\x70",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfTail] BEGIN ",
			L"[10][IfTail] END [ENDING]",
			L"[11][IfTail]!(!0;If @) \"else\" Stat",
			L"[12][IfTail]!(!0;If) \"else\" @ Stat",
			L"[13][IfTail]!(!0;If) \"else\" Stat @",
			L"[14][IfTail]( ([0]? If @) )",
			L"[15][IfTail]OtherStat ( \"else\" @ Stat | ( ([0]? ) ) )",
			L"[16][IfTail]OtherStat ( \"else\" Stat @ | ( ([0]? ) ) )",
			L"[17][IfTail]OtherStat @ ( \"else\" Stat | ( ([0]? ) ) )",
			L"[18][If] BEGIN ",
			L"[19][If] END [ENDING]",
			L"[20][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[21][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[22][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[23][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[24][OtherStat] BEGIN ",
			L"[25][OtherStat] END [ENDING]",
			L"[26][OtherStat]<< !Block @ >>",
			L"[27][OtherStat]<< !Do @ >>",
			L"[28][Stat] BEGIN ",
			L"[29][Stat] END [ENDING]",
			L"[30][Stat]<< !(0;!If @) >>",
			L"[31][Stat]<< !OtherStat @ >>",
			L"[32][Module] BEGIN ",
			L"[33][Module] END [ENDING]",
			L"[34][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"allow_half_if",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
