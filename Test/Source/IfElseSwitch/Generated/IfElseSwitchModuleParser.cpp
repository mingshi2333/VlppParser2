/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2211; // 20082 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 163;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x72\x4E\x00\x00\x9B\x08\x00\x00\x09\x00\x01\x82\x80\x0A\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x06\x0A\x91\x0A\x94\x0A\x81\x0E\x85\x0F\x0A\xA5\x0A\x8C\x1A\x86\x12\x01\x84\xFF\x21\xA2\x81\x9A\x80\x03\x91\x91\x25\xA7\xA2\x89\x9A\x97\x7C\x96\x95\x2F\xA7\xB1\x88\x9A\x85\x96\x97\x9A\x2D\xA5\xA5\x81\x08\x98\x99\x9E\x99\x3F\xB4\xA0\x99\x91\xA3\x95\xA2\x92\x47\xB7\x83\xBE\x9B\xA0\xA1\xA6\xA1\x06\xB6\xB3\x86\xA9\x84\x9D\xAB\xA4\x53\xC8\x8F\xB4\xA1\xAC\xA3\xAC\xAD\x5D\xCC\xA1\xAE\xA3\xB0\xAB\x80\xA9\x58\xE9\x9F\xAA\xA5\xB4\xAF\xB2\xAF\x06\x9F\x97\xAB\xB9\xAC\xB7\xB6\xB1\x77\xE4\xB9\xA6\xB2\x80\xB4\xBA\xB5\x06\x83\x0A\x96\xAD\xB0\xB3\xBC\xB7\x7D\xF0\x87\xC6\xC9\xC0\xBD\xC6\xBD\x8F\xFC\x81\x9E\xB5\xC6\xB9\xC8\xC4\x93\x8A\xD7\xCC\xC9\xCE\xC5\xCE\xC8\x9F\x92\xE6\x9A\xC1\xD0\xCF\xD0\xCF\xA7\xA0\xE9\xC2\xD4\xCB\x80\x87\xB9\x06\x85\x03\xC0\xC3\x86\x03\xD9\xBF\xB8\x95\xE5\x87\x07\xDA\xDC\xDB\xCD\x96\x81\x88\x1D\xD3\x86\x86\x82\xC2\x8B\xC1\xC4\x84\xE0\xE5\xBA\xE6\x85\x0B\x4C\xE5\xDC\xC0\x04\x06\xE9\xD5\xA6\xAD\xCD\xFF",
			"\xD3\xEA\xE6\xED\xEE\xCF\xB9\xC9\xE1\xFE\xDF\x87\xEB\xEF\xD8\xD4\xE8\xEB\xF4\xD1\xF6\xE4\x07\xE7\xED\xEC\xE8\xD3\xFA\xD5\xFA\xD6\xF2\xF9\xF4\xFA\xFA\xD7\x05\xF9\xFD\x00\xB6\x7C\x7C\x7E\x01\x84\x82\x81\x81\xA6\x50\x0F\x7F\x81\x0C\x86\x8E\x81\x76\x03\x90\x88\x82\x7A\x11\x94\x88\x6A\x44\xB0\x63\x7C\x74\x00\x12\x0B\x8F\x82\x85\xAA\x53\x0E\x86\x84\x0D\xA4\x8F\x86\x77\x15\xA8\x83\x86\x8A\x25\xA0\x82\x68\x45\x19\x9B\x72\x7A\x8C\xE5\x75\x8A\x87\x8C\xE0\x5B\x88\x79\x05\x23\xAE\x86\x8B\x8F\x3E\x81\x9C\x8B\x89\xE4\x77\x86\x8C\x8D\x03\x56\x0D\x8F\x90\xA6\x57\x0B\x91\x91\x48\x82\x48\x07\x93\x3A\xA9\x80\x95\x8E\x38\xAE\x77\x96\x96\x55\xA8\x66\x45\x8C\x58\x87\x91\x9A\x91\x64\x91\x93\x9A\x99\x5C\x99\x97\x7C\x90\x4C\x82\x95\x4A\x06\x54\xAA\x96\x95\x97\x2D\xAD\x96\x9F\x96\x6B\xAE\x94\x9C\x91\x7B\xA6\x6B\x05\x9C\x62\x80\x0C\x04\xA0\x65\xA7\x91\x41\x07\x84\x82\x4E\x05\xA2\x86\xA9\x91\xA1\x9E\x77\xBD\x9A\x9E\x9C\x2B\xB8\x93\x9C\xA5\xAA\x58\x40\x9A\xA3\x85\x9C\xA8\x98\xA4\x5B\xA0\x0C\xA2\xA7\x8D\xA0\xA2\xA5\xA4\x98\xBC\x99\xA8\x9B",
			"\x96\x95\xAB\x85\x08\xA3\xA8\x72\x0A\x42\x72\x4F\xA7\xA6\x41\x24\x23\xAA\x47\xA6\xA6\xAB\xA3\xA6\xAD\xAE\xBE\xA8\xA8\xB0\x75\xAD\xA5\xB1\x47\xB1\xB7\xAD\xA5\xAF\xC4\xAA\xA6\x43\x09\xC9\x81\xBD\xB0\xAB\xA7\x9B\x98\x09\xB4\xC7\x82\xB6\xB2\xB3\xCB\x8A\xBF\xA6\xB7\xA5\xA0\xB4\xA8\x00\x29\x18\xB2\x6A\x0A\xE6\x94\xB9\x43\x0A\xA3\x9C\x4C\xAE\xB8\xCC\x9D\xB2\xB6\xBC\xD9\x93\xBF\xAC\xBD\xDC\xA8\x9D\x09\xBA\xF7\x9F\xB3\xBE\xBF\xF5\x83\x4E\x08\xBF\xC3\xB8\xBA\xBA\x41\x2F\x04\xC5\x48\x0C\xB4\x95\xBB\x86\x0C\x0A\xCE\xCA\xB6\xC4\xF6\x85\xC8\x9B\x0C\x11\xD3\xCA\xC5\xC5\xDB\xA6\x64\x0D\xC6\x1C\xD4\xC6\xC1\xBF\x8D\xB5\x00\xCB\xC8\x16\xE1\xB8\x6A\x0D\x27\xC0\xC2\x6B\x0D\x2D\xC1\x48\x0D\xCC\xE3\xB9\x03\xAA\x0E\x34\xF1\xBE\xCB\xC1\x28\xDD\xC4\xC8\x00\x3B\x34\xCC\x0D\xCE\xED\x7D\x04\xD3\xBF\x2A\xC1\xCB\xCF\xCF\x3A\xC1\x4E\x0F\xD1\x4A\xC9\xD9\xBE\xD4\x3C\xCB\xDA\x73\x0F\x34\xC0\x10\xD6\x68\x41\x23\xA2\x13\xD6\x55\xD4\xDC\xD0\xBC\x64\xC8\xD3\xB9\xD3\x67\xED\x73\x10\xCD\x71\x0D\xCF\xBA\x4A\xB2\x6B\x56\x4D\xAD\x3A\x40\x72\x62\xDC\x2D",
			"\x77\xD5\x67\xDC\x75\xD5\x6A\xDD\x72\x7C\xC9\x44\xDE\xDD\x49\x76\x4F\xDC\x70\x81\xC7\x79\x53\xE1\xDD\x46\xE5\xE1\x4B\x83\xF5\xDE\xE0\xDE\x2A\x51\xE0\x02\xE5\x93\xFB\xD9\xDF\xE3\x95\xCB\x91\xDE\xE6\x2A\x4C\xEE\x79\xE2\x7D\xEE\x72\xEA\x4D\xA4\xC2\x48\x70\x70\xAF\x60\xE7\x4B\xE7\x80\xED\x4D\xE9\xEC\x70\xDC\xE7\x4B\xE9\xA8\xE1\xE6\xEF\x48\x96\xF5\x58\xED\xEE\xBC\xEE\xDE\xDF\xEE\x22\x7F\xE0\xF1\x48\x96\xEB\xED\x77\xEC\x88\xED\x40\xED\xF3\x2A\x4C\xFD\xE2\xF3\xC4\xC8\xFA\x42\xF1\x23\x58\xF0\xF2\xF6\xB9\xFD\xE9\x52\xE5\xDC\xFF\x31\xF9\xEA\x01\x58\xE0\xE7\xF5\x8B\xD5\xF2\xFA\xFA\xC9\xC9\x56\x73\x40\xE1\xCF\xF3\xF5\xE7\x82\xE9\xF4\xE7\xED\xEC\xE5\xE4\xE3\xFD\xC1\xF5\xFB\x5B\xF8\x9B\x7C\x7E\x48\x6D\x7B\x2C\xCB\x66\x7A\x77\x02\x96\x7A\xFE\x6E\x36\x81\xEF\x42\x79\x39\x00\x94\x7E\xE2\x6B\x22\x7F\xD1\x67\x7E\x7F\xC3\x69\x83\x3F\x5E\x75\x81\x07\xBB\x7E\x75\xFD\x73\x81\x65\x15\x87\x79\xEC\x79\x7B\x81\xE4\x77\x72\x03\x98\x80\x83\x13\xA2\x81\x39\xEF\x62\x23\x01\xF8\x7A\x83\x08\xA7\x24\x83\x19\x80\x87\x00\x9E\x8D\x3A\x1B\xA6\x82",
			"\x83\x04\x99\x84\xED\x37\x8B\x80\x06\xBC\x86\x74\x2E\x83\x22\xF2\x48\x85\x87\x24\xBD\x69\x73\x43\x81\x87\x40\x33\x8F\x86\x1D\xA1\x26\x87\x3B\x8F\x6F\x49\x31\x82\x73\x96\x1C\x8A\x27\x36\x3F\x88\x15\xA2\x2F\x8B\x25\xA1\x8F\x88\x67\x8C\x84\x70\x65\x8E\x7D\x25\x59\x0D\x88\x4B\x98\x84\xFC\x70\x8A\x20\xE9\x40\x05\x82\x71\x8A\x21\x05\xA2\x78\x8F\x3A\x87\x8E\x8E\x79\x89\x22\xE8\x4B\x86\x8E\xDB\x1B\x56\x72\x86\x81\x32\x42\x09\x9A\x88\x3F\x89\x24\x37\x09\x23\x3B\x21\x8A\x22\x92\x45\x91\x97\x3A\x76\x9F\x88\x42\x71\x2D\x20\xE8\x1D\x91\x21\xD6\x2F\x93\x27\x86\x2B\x92\xD7\x0A\x20\x22\x09\x30\x3E\x1A\x81\x28\x94\x83\x3E\x3A\x94\xE6\x29\x96\x23\xA4\x97\x89\xE8\x20\x92\x21\x90\x94\x95\x42\x76\x8A\x41\x49\x89\x25\x97\x96\x86\x20\x30\x8D\x9B\x96\x85\x2A\x94\x93\x09\x2F\x96\x41\x39\x93\x21\x63\xA6\x91\x21\x18\x4F\x86\x0C\x91\x28\x7C\x68\x98\x92\x21\x1D\x42\x90\x2E\xC5\x85\x25\x34\x17\x3E\x72\xC3\x9D\x6D\xF8\x3B\x2E\x93\x05\xA3\x9B\x91\x0A\x2A\x99\xE9\x67\x9B\x81\x50\xBA\x7C\x9D\xC1\x83\x20\x33\xDC\x92\x20\x35\x17\x3A\x74\x22\x54",
			"\x9D\xA0\x73\x91\x21\x29\x7A\x9B\x20\x6B\x17\x9E\x42\x4E\x4F\x9E\x81\x2C\x0F\x3A\x95\x83\x23\xA0\x0B\x86\x8D\xF6\x16\x75\x5C\x05\xA1\x21\x1B\x57\x3C\x90\x81\x17\x59\xA2\xE3\x55\x80\xB4\x0C\xAB\x43\x2F\xB3\x54\xA3\x59\x56\x71\x0C\x18\xA0\x00\x37\x17\x3D\x82\x03\x60\xA5\xA0\x22\x7C\x5C\x8C\xAF\x0A\xA0\x09\x2C\x60\x46\xF0\x07\x3A\x22\x05\x88\x9E\x05\xAD\xA2\xD9\x41\x8D\x52\x72\x9A\x8B\x6A\x00\x02\x77\x18\xD4\x3E\x67\x94\x40\x05\x90\x1B\x45\x24\x4F\xD6\x65\x25\x8A\x81\x26\xA9\xE3\x45\x26\xE8\x38\xA2\x9C\x74\x97\x91\x4B\x45\xBB\x48\x54\x8B\x58\xAA\xAB\x88\x9B\xA5\x47\x90\xA8\x55\xF5\x69\xA0\x81\x23\xAF\x8E\xD5\x8B\x9A\x57\xBD\xA5\x9D\x78\xA8\x4D\xAC\x01\x22\x74\x3F\x80\x00\xAF\xA8\xA2\x60\x4D\x73\xBC\xA9\xA0\x25\x2E\x99\x69\x99\x4E\x96\x5F\xB2\x9D\x5A\xEC\xAF\x97\xC1\xA8\x4D\x95\x73\x97\xA9\x6C\x49\xAA\x21\x7C\x92\x9A\x6C\xCA\x3F\x88\x54\xE8\x35\x24\x18\x41\xB0\x4D\xE1\x81\x23\x12\xDF\x87\xAD\x92\x0A\x4B\x95\xE3\x51\x98\x31\x86\x20\xB1\x81\x25\x90\x4D\x25\x3E\x9F\x65\x90\xB5\x24\x77\xA6\xB4\xB1\x09\x30\x4C\x68\xE8",
			"\x68\xB0\x81\x13\xB5\x3D\x25\x2B\xA2\x5B\x8D\x59\x9B\xD5\x80\x05\xB6\x01\x3A\xAC\x61\x86\x2A\x52\xDF\xA8\x3E\xB2\xA3\xA3\x20\x70\xC1\xA0\xB6\x83\x30\x52\x9B\x59\x5C\x44\x68\xEA\x92\x21\xBE\x8D\x55\x24\xB9\x53\xB6\xB8\x19\xB0\x00\xEB\xB6\xA9\x21\x26\x08\x8E\xB8\x22\xB6\xB7\xE6\x83\x27\xA2\x06\x36\x8C\x7A\x04\xAB\xB6\x00\x24\xB9\xB8\xE6\xA2\x22\xBB\x6D\xB8\x3C\xD9\xBE\xB7\xBD\xCC\xBD\xA9\x42\x09\x65\x99\x2C\x7A\xB1\xB1\x06\x2E\xB3\x40\x3D\xB3\xB9\x81\x18\x62\xBB\x66\x68\xBA\x40\x59\xBB\xAE\x85\x26\x67\xA7\xA6\x25\xB9\x72\x82\x2F\xB2\x83\x37\xB0\x35\x25\x2C\x64\x74\x81\x52\x55\x0D\xC9\x4A\x21\xC2\xA8\xB6\x42\x36\x68\xC0\xD5\x23\x07\x88\x15\xC0\xC1\x81\x82\x21\x68\x0F\xE8\x4B\x57\xED\xAC\xBF\x40\x52\xBD\xC1\x8D\x5D\x52\xB5\x1F\xDA\xBD\xC8\x59\x4F\x4A\x83\x21\xC7\xBA\x0A\x2F\x68\x84\xBF\x6F\x4F\x84\x17\xC2\x35\x25\x38\x69\x89\xA2\x38\xBC\x15\xC2\x25\xC8\x3E\xD1\xBD\x40\x5D\x63\xC8\xE5\x2D\xA6\xB7\x50\xC3\x20\x83\xAB\xC1\x21\xAF\x55\xCD\x24\xFB\x4E\xC5\x40\x59\xC6\xAC\x29\xC0\x03\x6D\x4B\xC6\x36\x4C\xED\xBF\xBE\x81",
			"\x36\xBC\xCB\x00\x05\x08\xCD\x08\x59\x20\x32\xC0\xCE\xC6\x68\x5F\xC4\x00\x74\xC5\xC7\x1D\xC1\x52\xC2\x0B\xC6\xCE\x11\x34\x6F\xB8\x0B\xE6\xCF\x08\xE2\xA8\x37\x81\xED\xB5\xD0\x2D\xE6\xC9\x09\xA3\x5A\xC0\xA3\x86\xB7\xCE\x83\x0A\x09\xD1\xAA\x24\xC5\x7B\x9F\xA6\x21\x0E\xFD\xCB\x20\x4C\x14\x67\x89\x89\x2D\xD0\x11\xF8\xCD\x51\x5B\xC2\x23\xA8\x9F\xDC\xA9\x0D\x70\xC5\x36\x66\xCD\x08\xA6\xA2\x33\x68\xD0\xAF\xD2\x51\x66\xCF\x0B\xA8\x42\xCF\xB0\x00\x37\xD1\x20\xA9\xD5\xD3\x40\x50\x03\x54\x25\xFE\xB7\xD7\xF9\xAC\xD5\x40\x51\x03\xD6\xD3\x14\xCE\xB7\x1B\xA6\x21\x78\xBA\xCD\x67\x0D\x4D\xCA\x20\xD3\xCA\xD8\x00\x53\x04\x66\x88\x92\xDE\xCC\x68\x68\x3E\xB7\x83\x28\x5C\x6A\xED\xD1\x4B\xE5\xC6\xD2\xB9\x81\x24\x0A\x4A\xE3\x58\xCD\xED\xA9\xDF\x40\x7A\xC4\xB2\x85\x17\x0D\xD9\xD4\x23\xD0\x68\xF2\xD5\xCD\x75\xC0\x07\x8D\x62\xC3\x5C\x12\x6E\xD7\xCB\x81\x19\xD8\xCE\xE1\xCD\x3F\x7C\xB0\xDE\xDE\x2E\x38\xDA\x39\x4B\x07\x8B\xC2\x81\xDE\xDE\x2F\x23\x52\xD6\xA0\xB3\xE1\x5C\xE6\xCF\x0B\x87\xE5\x22\xD7\xA0\xA9\xA6\x41\x61\xCA\xDB\x84\xE8\x34\xBF",
			"\xEA\xDA\xD9\x18\x6E\xD8\x3C\x66\xC1\xE0\xE5\xF3\xC6\xCC\x19\x1E\xEA\x21\x76\xE0\xB0\xE6\xFD\xDA\xDA\x19\x2C\xED\x3C\x2B\x2E\xDB\xCD\x03\x24\xE4\xC2\xE5\x6A\x35\x91\xBB\xB8\xDC\x44\xE2\x34\xC4\x28\x88\xB6\xD4\x64\xA5\x6F\x3A\xB2\x25\xD4\xA7\x2B\x88\x9D\x15\xEE\xA7\x0B\x83\xAA\x4B\x5A\xEB\x83\xEB\x2A\x87\xA6\x58\x23\x7F\x20\xD2\xAC\x9A\xF5\xB9\x26\xEC\xB2\x7C\x98\x09\xB9\x2B\xEC\xEA\x45\x8D\x82\x3A\x30\xED\x53\xD8\x27\xC9\x93\x10\xAA\x27\x77\xF3\xED\x11\xF9\xEB\x9A\xBA\x33\xA8\x75\x73\xBA\x25\xE0\xBB\x3C\x9B\xC1\xD4\x90\x2B\x75\xA8\x75\x5D\xBD\x75\xAF\xAA\xF5\xAA\x27\x8F\xE5\x25\xE4\xA3\x93\x3D\x2F\xA8\x74\x8D\x94\xE5\x77\x17\xBA\x2B\xF2\x6E\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"OtherStat",
			L"Stat",
			L"Module",
			L"IfTail_SWITCH_COMBINED",
			L"If_SWITCH_1allow_half_if",
			L"If_SWITCH_0allow_half_if",
			L"IfTail_SWITCH_1allow_half_if",
			L"IfTail_SWITCH_0allow_half_if",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][OtherStat] BEGIN ",
			L"[10][OtherStat] END [ENDING]",
			L"[11][OtherStat]<< !Block @ >>",
			L"[12][OtherStat]<< !Do @ >>",
			L"[13][Stat] BEGIN ",
			L"[14][Stat] END [ENDING]",
			L"[15][Stat]<< !If_SWITCH_1allow_half_if @ >>",
			L"[16][Stat]<< !OtherStat @ >>",
			L"[17][Module] BEGIN ",
			L"[18][Module] END [ENDING]",
			L"[19][Module]< Stat @ >",
			L"[20][IfTail_SWITCH_COMBINED] BEGIN ",
			L"[21][IfTail_SWITCH_COMBINED] END [ENDING]",
			L"[22][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if \"else\" @ Stat",
			L"[23][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if \"else\" Stat @",
			L"[24][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if @ \"else\" Stat",
			L"[25][If_SWITCH_1allow_half_if] BEGIN ",
			L"[26][If_SWITCH_1allow_half_if] END [ENDING]",
			L"[27][If_SWITCH_1allow_half_if]< \"if\" \"cond\" \"then\" @ IfTail_SWITCH_1allow_half_if >",
			L"[28][If_SWITCH_1allow_half_if]< \"if\" \"cond\" \"then\" IfTail_SWITCH_1allow_half_if @ >",
			L"[29][If_SWITCH_1allow_half_if]< \"if\" \"cond\" @ \"then\" IfTail_SWITCH_1allow_half_if >",
			L"[30][If_SWITCH_1allow_half_if]< \"if\" @ \"cond\" \"then\" IfTail_SWITCH_1allow_half_if >",
			L"[31][If_SWITCH_0allow_half_if] BEGIN ",
			L"[32][If_SWITCH_0allow_half_if] END [ENDING]",
			L"[33][If_SWITCH_0allow_half_if]< \"if\" \"cond\" \"then\" @ IfTail_SWITCH_0allow_half_if >",
			L"[34][If_SWITCH_0allow_half_if]< \"if\" \"cond\" \"then\" IfTail_SWITCH_0allow_half_if @ >",
			L"[35][If_SWITCH_0allow_half_if]< \"if\" \"cond\" @ \"then\" IfTail_SWITCH_0allow_half_if >",
			L"[36][If_SWITCH_0allow_half_if]< \"if\" @ \"cond\" \"then\" IfTail_SWITCH_0allow_half_if >",
			L"[37][IfTail_SWITCH_1allow_half_if] BEGIN ",
			L"[38][IfTail_SWITCH_1allow_half_if] END [ENDING]",
			L"[39][IfTail_SWITCH_1allow_half_if]IfTail_SWITCH_COMBINED @",
			L"[40][IfTail_SWITCH_1allow_half_if]If_SWITCH_1allow_half_if @",
			L"[41][IfTail_SWITCH_1allow_half_if]OtherStat @ [ \"else\" Stat ]",
			L"[42][IfTail_SWITCH_1allow_half_if]OtherStat [ \"else\" @ Stat ]",
			L"[43][IfTail_SWITCH_1allow_half_if]OtherStat [ \"else\" Stat @ ]",
			L"[44][IfTail_SWITCH_0allow_half_if] BEGIN ",
			L"[45][IfTail_SWITCH_0allow_half_if] END [ENDING]",
			L"[46][IfTail_SWITCH_0allow_half_if]IfTail_SWITCH_COMBINED @",
			L"[47][IfTail_SWITCH_0allow_half_if]OtherStat \"else\" @ Stat",
			L"[48][IfTail_SWITCH_0allow_half_if]OtherStat \"else\" Stat @",
			L"[49][IfTail_SWITCH_0allow_half_if]OtherStat @ \"else\" Stat",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(IfElseSwitchTypeName((IfElseSwitchClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	}

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	}
}
