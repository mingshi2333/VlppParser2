/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2252; // 21186 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 204;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\xC2\x52\x00\x00\xC4\x08\x00\x00\x09\x00\x01\x82\x80\x0A\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x06\x0A\x91\x0A\x94\x0A\x81\x0E\x84\x10\x0A\xA6\x0A\x8C\x19\x8A\x01\x85\x7F\x20\xA1\xA0\x8A\x80\x02\x92\x90\x92\x26\xA1\xA8\x89\x9F\x7B\x95\x94\x97\x26\xB0\xA7\x8A\x8C\x95\x94\x9A\x96\x24\xA4\x81\x17\x9F\x94\x9D\x98\x9F\x33\x9F\xB8\x80\xAA\x94\xA3\x90\xA3\x36\xC2\xBD\x8A\xAF\x9C\xA5\xA0\x83\x35\xB2\x85\xA9\x8B\x9C\xA8\xA4\xA9\x47\xCE\x93\xB0\xA3\xA2\xAD\xAC\xAE\x4B\xE0\x8D\xA2\xBF\xA3\x81\xA9\xAB\x68\xDE\x89\xA4\xBB\xAE\xB1\xAE\x83\x1E\xD6\xAA\xB8\xAB\xB6\xB5\xB0\xBB\x63\xF8\xA5\xA2\x87\xB3\xB9\xB4\x83\x03\x0A\x95\xAC\xBF\xAA\xBD\xB6\xBE\x6F\x86\xC5\xC8\xC7\xBC\xC5\xBC\xC7\x7B\x81\xBD\xA4\xC5\xB8\xCB\xC2\xC9\x89\x96\xCB\xD8\xCD\xC4\xCF\xC6\xCF\x91\xA5\x99\xC0\xD7\xCA\xD1\xCE\xD3\x9F\xA8\xE1\xD3\xC3\x84\x86\xB8\x83\x05\x02\xFF\xA3\x86\x02\xDA\xBF\xDB\x94\xA4\x87\x16\xD9\xDB\xDA\xCD\xCA\x01\x88\x3C\xC3\x8E\x86\x83\xC0\xC5\xC0\x84\x83\xFF\xD4\xBD\xE6\x85\x05\xCB\xA4\xDB\xC0\x0C\x01\xEA\xD5\xD2\xAC\xCC\xFE\xD2",
			"\xE9\xE1\xEC\xEE\xE7\xB8\xC8\xE0\xFD\xDF\x86\xEA\xEF\xEB\xD3\xE7\xEA\xE3\xD8\xF1\xE6\x06\xF3\xEC\xEB\xE7\xD2\xF9\xD4\xFB\xD5\xF8\xF8\xF3\xF9\xE9\xDF\x00\xFA\xFD\xFF\xF5\x7B\x77\x7C\x80\x03\x81\x84\x81\x69\x10\x3E\x76\x83\x82\x05\x8D\x88\x76\x80\x0F\x87\x89\x78\x84\x13\xA7\x62\x47\x6B\xE2\x5B\x70\x02\x04\x0A\x8E\x85\x85\x6A\x13\x1D\x81\x84\x83\x23\x9E\x8D\x74\x85\x27\x92\x89\x88\x89\x1F\xA1\x64\x44\x86\xDA\x61\x71\x8C\x79\x34\x99\x82\x8F\x77\x1A\xA7\x75\x06\x88\x2D\xA5\x8E\x8D\x8F\x40\xAB\x86\x8B\x78\x36\xB5\x83\x8F\x40\x16\x3C\x82\x91\x69\x17\x0A\x94\x93\x91\x02\x58\x0E\x91\x8E\x28\x8F\x98\x8F\x8D\xED\x56\x99\x94\x95\xA7\x56\x40\x8F\x95\x46\xA0\x95\x93\x98\x50\xA2\x95\x9B\x96\x58\xB6\x7F\x8F\x92\x41\xA4\x4A\x07\x94\x69\x95\x9C\x94\x8B\x6C\xB5\x9A\x96\x9A\x6D\xB3\x93\x92\x9E\xA5\x5B\x00\x9D\x98\x00\x1C\x0F\x9C\x99\x66\x81\x4D\x07\xA0\x02\x5E\x08\xA1\xA1\x68\x80\xA8\x9E\x9D\x7C\xB9\x91\x9E\x8A\x77\xB2\x93\xA5\x6A\x1F\x0B\xAD\xA0\xA1\x9B\x82\x48\x47\x97\x9D\x8C\xA1\x0A\x42\x71\x4E\xA6\xA6\x41\x23\x1A\xAF\xA1\xA5",
			"\x94\x91\xA0\xA7\xA5\x7B\x89\x44\x0A\xAA\xA7\x9C\xAB\xAA\xAB\xAC\xA9\x65\x08\xAD\xAD\xB0\xAB\x99\xAE\xB1\x80\xAA\x44\xA8\xB7\xBE\xA2\xA6\xA9\xA7\x67\x0C\xAC\x9D\x5A\xA8\x0B\xB1\x68\x29\x0F\xBF\xAE\x42\x2A\x1A\xAB\x0A\xB4\xC7\xB6\xA5\xAF\x99\xC5\x88\xBC\xB3\x46\xD8\x89\x7D\x09\xB8\x5A\xAE\x04\xB8\xAE\xE8\x86\xBF\xAA\xB7\xC1\x83\x4F\x0B\xB9\xEA\x80\xB3\xB5\xBC\xE9\x80\xA0\x0C\xBC\x06\x71\x08\xBC\xA7\x32\x1A\xA3\x0F\xBE\xDC\x9B\xBC\xA1\xB7\xDA\xBD\xAC\xBB\xBC\x07\xD9\xB7\x98\x0D\x00\xC3\xC2\xC1\xA8\x10\xF5\x0D\xC0\xC4\x04\xC1\xC6\xC1\xC1\xDF\xB4\xBA\xC5\xC2\xEB\x83\x46\x0F\xC4\x37\x24\xA5\xBC\xA7\x39\x1A\xAA\x0F\xC4\x15\xCE\xC7\xC6\xC5\x19\xDC\xC2\xBE\xC2\x2A\xE9\x6B\x0C\xCA\x0F\xE9\xC4\xC7\xC3\x3C\x34\xCB\xC9\xCC\xED\xAC\xC1\x69\x0F\x3A\xED\xC8\xC5\xCF\x3C\xC8\xC3\xD2\xD1\x3E\xC8\xD5\xD3\x74\x3E\x13\xCF\x0D\xD0\xA1\x40\x1A\xA5\x10\x50\xCA\xD7\xCF\xCE\x57\xC2\xD9\xD0\xCC\x59\xC4\xD0\xC6\x10\x55\xDC\xD6\xCF\xD8\xEC\x43\x11\xD9\xC7\x02\x71\x12\xC8\xB1\x2C\x75\x6A\x59\x4D\xA5\xB9\x4F\x6E\x6B\x94\x75\x44\xDC\x72\x70",
			"\xF2\xD4\x67\xDD\xBF\x79\xD9\x41\xDC\x73\xC8\x56\xDE\xE0\x2C\x40\xE1\x43\x71\x81\xEF\xDC\x48\xDF\xDC\x7E\xDA\xDC\x77\x8C\xED\x7E\xE3\x40\x86\xED\x71\xE5\x4D\x83\xCA\xE9\x49\xE5\x88\xDC\x7E\xD9\xDD\x8B\xC4\xEB\xE7\xE3\x89\xE0\xE3\xE8\xDB\x29\x71\x6A\xE6\x49\x9F\xF8\xDC\x4A\xEA\xA6\xEC\xE2\xEA\x49\x97\xD8\xE9\x49\xED\xB6\xE2\x45\xE4\x5D\xB8\xF9\xE0\x49\xE5\x95\xD9\xE1\xEE\x48\xBD\xFE\xEC\xE4\x52\xB0\xEE\xE9\x49\xEB\x7D\xEF\xE3\xEE\x48\xCC\xCD\xE5\xE2\x42\x81\x6A\x55\xF1\xEE\xD7\xF6\xEB\xEC\x52\x95\xD5\xFB\xDF\xF3\x21\x40\xFC\xF4\xF5\x48\x59\xF8\xE6\xF9\x93\xC2\x4D\xE5\x7B\x08\x40\x68\x51\xF4\x92\xD3\xFF\xDD\xF9\xE0\xE0\x48\xFA\xFC\xA4\xC2\xFA\xF2\x49\xE2\xD6\xF5\xFF\x3F\xF7\x67\x76\x71\x74\x7B\x74\xDD\x64\x74\x3B\xFD\x74\x31\x02\xC8\x31\x80\xFE\x4A\x4D\x7D\x94\x64\x83\xF0\x21\x2D\x80\x03\x87\x82\x7F\xCD\x62\x81\x04\xFE\x75\x80\x0A\xBF\x7F\x78\x1C\x93\x83\xEF\x07\x8D\x3D\x05\xA5\x73\x7F\x16\x83\x81\x08\xA8\x8E\x83\x0E\xA3\x87\x82\xA1\x6E\x87\x3F\x26\x80\x73\xFF\x55\x81\x7C\x4A\x54\x86\xE5\x1F\x84\x85\xF4\x41\x21",
			"\x78\xF8\x7B\x83\xF7\x32\x80\x84\xCA\x30\x7E\x77\x29\x82\x88\x03\xBC\x80\x86\x0D\x82\x20\x88\xB7\x6C\x8A\x0A\xC6\x8F\x7E\x08\xBA\x6D\x26\x56\x92\x6C\x16\xEB\x64\x33\x2C\x80\x03\x7D\x5B\x93\x7E\x5A\x5E\x80\x8C\x96\x1E\x88\x8A\x26\x24\x8E\x86\x59\x04\x85\xF5\x5B\x79\x21\xDE\x6F\x73\xFA\x11\x79\x78\xF5\x5C\x8B\x20\x75\x81\x21\x1C\x82\x29\x8F\x2F\x8A\x21\x72\x95\x71\x72\x1B\xE4\x70\x55\xC8\x70\x7B\x90\x09\x30\x7F\x1E\x81\x27\x91\x3F\x8A\x23\x37\x09\x22\x38\xA8\x15\x72\x92\xF7\x51\x96\x3A\x91\x65\x3A\x12\x87\x2F\x39\x47\x8D\x26\x91\x09\x35\x3B\x24\x8A\x22\x94\x4B\x86\x25\x94\x03\x33\x8E\x42\x10\x22\x8C\x83\x2F\x39\x21\x90\x86\x20\x2B\x86\x21\x73\xFE\x23\x91\x21\xB6\x86\x97\x40\x39\x99\x94\x50\x86\x21\x41\x09\x3A\x93\x13\x8A\x20\x98\x83\x1E\x8D\x98\x03\x30\x38\x2C\xC4\x9F\x93\x84\x11\x77\x42\xB2\x97\x8E\x40\x50\x93\x21\x57\x86\x21\x96\x03\x34\x9A\x40\x33\x9D\x34\x85\x1C\x40\x8E\x9E\x84\x86\x42\x69\x06\x3B\xCA\x48\x9A\x6F\x8B\x90\x63\xFA\x4A\x94\x75\x74\xA7\x3D\x92\xBB\x84\x86\x3B\xEC\x34\x24\x54\xA8\x9A\x43\xE9\x98",
			"\x9A\x38\x82\x2A\x0C\xEB\x29\x99\x44\xFB\x80\x52\x30\x81\x22\x4B\x80\x83\x23\x0D\xFE\x8A\x21\x93\x06\xA2\x20\x36\x25\x9A\x21\x87\x4C\xA1\x40\x6D\x06\x3A\x78\x82\x22\x50\x12\xB0\x61\x1F\xFE\x47\x81\x32\xA7\x31\x9D\x99\x59\xA2\x1B\x0F\xA9\x21\x5D\x59\xA7\x0D\xD6\x3D\x8E\x08\x6D\x88\x9E\x85\x33\x51\xA3\x70\x16\x38\xFC\x51\x5D\xA2\x0D\x7A\x99\x20\xEF\x55\xA4\x96\x44\x02\x9E\x0D\x5A\x4A\x27\x23\x63\x98\xEA\x29\x3A\x4B\xF5\x5E\xA2\x6B\x7A\x92\x98\xA3\x2F\x68\x6C\x46\x46\x96\xA7\x1A\x45\x8B\xD1\x53\x30\x7F\x23\xB4\x9D\xA5\xE0\x98\x48\x49\x69\x90\x7E\x8B\x8B\xA9\xA8\x4B\x69\x38\xFC\x57\x5A\xAA\x0D\x70\x78\x8D\xA1\x29\x9D\xE5\x0A\x90\xAA\x2C\x5E\xA8\x00\xF3\x87\x35\x1F\xF9\x9A\x20\xAB\xA7\x32\x4B\xEC\x83\x21\x5C\xA9\x3F\xAC\xBA\x97\x95\xAC\x1B\x73\xA9\x72\x37\xA0\x00\xB2\x80\x52\x4B\xD6\x9B\x90\xA3\x79\xA2\xA9\x6B\x84\x97\xB0\x1A\x47\x9D\x52\xD8\x4C\x9A\x81\x29\x9F\xAD\x7D\x87\x3E\x96\x00\xA3\x8A\xC1\xA4\x23\xA0\x00\x16\xAC\x51\x9A\x4F\x44\xB8\x11\xB6\x3A\xA0\xBB\xAD\x68\x5A\x49\x49\x56\x9C\x52\x9B\x87\x7D\x91\x42\x5E",
			"\x8A\xB2\x0D\x45\xA6\xB4\x81\xA2\x22\x3D\x81\x24\xB7\xAB\x98\x4F\x4D\xAE\xBB\x69\x72\x15\xBC\x91\xB6\x80\x50\xA3\xBA\x87\x4F\x37\xB8\xB1\x9B\x84\x06\xB4\x53\x5A\x41\xA4\x73\x9C\x55\xB5\x5E\xA5\x39\xAB\x90\xB8\x4B\xA8\x58\xBC\x53\x1D\x41\xB9\x20\xBC\x82\x21\x62\xE7\x4A\x4B\x97\x93\xBA\xB8\x24\x32\xB0\x00\x63\xBF\xAA\x2C\x43\x5F\xBC\x61\xA4\x24\x6C\xA1\xB6\xB8\x4E\x4E\x5E\x99\x1A\x4B\xA1\x72\x81\x23\xBF\xE7\xA4\xBA\x43\x1C\x3C\xBB\x99\x40\xB0\xBE\x00\x33\xBA\xB5\xA5\x3A\x49\x4E\xB4\x9A\x42\xE4\xBA\xAA\x21\x9C\xA3\x23\x72\xD0\xBA\x43\x7F\x5F\xBD\x6B\xA5\x35\xBA\x40\x7A\x50\xB0\x40\x52\x63\xA8\xA1\x32\xBA\x75\x86\x2D\xB4\x83\x22\xB3\xB5\x1A\x5F\x62\x80\x8C\x5F\x53\xFD\x80\x05\xC4\x03\x3E\xBD\x7B\x80\x55\x65\x0B\xE7\x39\x55\x17\xD0\xC6\x65\xF5\xB7\x4D\x99\x6B\xC0\x62\x26\xAE\xC6\x7E\x83\x2E\xBB\xEC\xAE\x60\xAC\x00\x17\xB4\x92\x3C\xC1\xBE\x24\xDE\x4E\xC4\x4C\xD0\x61\xD3\x36\xCC\x3D\xFB\x85\xC7\xC9\x31\xD1\xCB\x79\x52\x60\xC5\xD2\x15\x58\x54\x58\xDB\xC2\x96\xEC\x34\x6B\x2E\xD3\x3A\xC6\x00\x15\x71\x98\x93\xB6\xC8\x4E",
			"\x60\x6C\xCA\xA7\x23\x5F\x85\x9C\xA6\x20\x02\xD4\xC1\xB7\x4D\xC9\x22\x83\x82\x26\xCF\xFF\xBB\xA3\x62\x11\xB5\xCF\x98\xD8\x66\x67\x40\xC3\x22\x51\x1D\xDE\xB0\x92\x88\xD0\xCB\x44\xE7\x4D\x08\x8F\xBC\x53\x82\x8F\xC9\x20\x46\xD9\xCE\xD1\x8C\x48\x0A\x52\x90\x6D\x5F\x0B\xD6\xD3\xC7\x98\xD0\x62\x12\x11\xDB\x60\x52\xC1\x22\xC4\x7C\xC3\xD0\x52\x98\xC3\x3B\x16\xF4\x32\xD5\xA1\x2D\x0B\xA6\xE7\x31\x65\x0B\xEE\xD2\xCC\xA1\xC7\x3F\x13\x1A\x55\xC7\x02\xF7\xD4\xCD\x77\xC0\x50\x14\x33\xDC\x3C\x1F\xC5\xC3\xA5\x09\x3B\xB9\x9B\xE8\xB8\xC8\x1C\xCD\xD3\xD9\x8C\x52\x0A\xA9\x90\x60\x69\x1F\xCE\xDF\xD2\xD0\xD0\x61\x15\x44\xD7\x34\x2E\xC5\xC7\xDA\xA0\xD9\xDB\x79\x57\x03\xDB\xF3\x2F\xCE\xC5\xE6\xA3\x22\xB2\xC1\xDA\xD0\x3C\xC0\x01\xC8\x03\x20\xDF\x8C\xED\xD7\xC9\x84\x2F\xB8\xDB\xEC\xC7\x4E\x16\x13\x66\xCB\x57\xF9\xD4\x3D\x5B\x1C\xD9\x6A\x10\xDF\xC7\x7E\xC2\x20\xCD\xB5\xB8\x49\x17\x1A\x5A\xD3\x0B\xC6\xE1\x20\x1C\xC2\xDC\x7B\x5E\x0A\x53\x51\xC5\xE5\xDC\xBE\xA0\x53\x17\x02\xE1\xD7\x69\xF4\xA6\x20\xCA\x5F\xDF\x69\x61\x03\x63\x2F\xC6\x27\xE1",
			"\x10\x6C\xAA\xCA\x8A\x28\xCC\x93\xF9\xD9\xCF\xF5\xC6\x21\x80\xF9\x50\xD7\xD2\x22\x0B\x62\xE6\x49\x91\xCD\xD3\x33\x0C\x8E\xE5\x33\xD8\x3F\xD9\xE4\xCD\xA2\xE9\x35\x32\x1A\x53\x0A\xD3\xC2\xE8\xA5\x92\xE7\x34\x33\x3E\xE3\x3A\x56\x13\xDB\xA4\x82\x22\xCE\xA6\xE9\x30\x0D\x13\x77\x5D\x42\x4A\xEE\xCF\x98\xF4\xDB\x20\x11\xE3\x22\xD6\xD6\xEE\x6A\x9B\x5D\xD1\x7F\xF4\x98\x71\x46\xF2\x87\x2B\xA3\xA6\x23\x7D\x39\x30\xEC\x50\xA4\x88\xAC\x95\x35\xE8\x87\xA0\x49\xCE\x38\x88\xC3\x24\xBE\xE0\x21\x9D\x70\xE9\x9D\x4E\x66\x70\x00\xF4\x51\x71\x27\x99\xB8\x25\xE2\xCE\x74\x85\x3E\x88\xF2\x9C\x27\xCA\x25\xE4\xA1\x27\xAC\x92\x0D\x95\xAE\x90\xF9\xF0\x09\x84\xB1\x2A\xCE\xF5\x24\xB0\x70\xE4\xB1\x4E\x22\xFA\x36\x71\xAF\xA9\x2A\xA7\xF5\x27\x5B\xB9\x2B\xF4\x92\x2D\xF2\x21\xAF\xE1\x9B\x55\x20\xB8\x72\xD0\xB9\x26\xF6\x9F\xA2\x9C\xEE\xEB\xE0",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"OtherStat",
			L"Stat",
			L"Module",
			L"IfTail_SWITCH_COMBINED",
			L"IfTail_SWITCH_1allow_half_if",
			L"IfTail_SWITCH_0allow_half_if",
			L"If_SWITCH_1allow_half_if",
			L"If_SWITCH_0allow_half_if",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][OtherStat] BEGIN ",
			L"[10][OtherStat] END [ENDING]",
			L"[11][OtherStat]<< !Block @ >>",
			L"[12][OtherStat]<< !Do @ >>",
			L"[13][Stat] BEGIN ",
			L"[14][Stat] END [ENDING]",
			L"[15][Stat]<< !If_SWITCH_1allow_half_if @ >>",
			L"[16][Stat]<< !OtherStat @ >>",
			L"[17][Module] BEGIN ",
			L"[18][Module] END [ENDING]",
			L"[19][Module]< Stat @ >",
			L"[20][IfTail_SWITCH_COMBINED] BEGIN ",
			L"[21][IfTail_SWITCH_COMBINED] END [ENDING]",
			L"[22][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if \"else\" @ Stat",
			L"[23][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if \"else\" Stat @",
			L"[24][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if @ \"else\" Stat",
			L"[25][IfTail_SWITCH_1allow_half_if] BEGIN ",
			L"[26][IfTail_SWITCH_1allow_half_if] END [ENDING]",
			L"[27][IfTail_SWITCH_1allow_half_if]IfTail_SWITCH_COMBINED @",
			L"[28][IfTail_SWITCH_1allow_half_if]If_SWITCH_1allow_half_if @",
			L"[29][IfTail_SWITCH_1allow_half_if]OtherStat @ [ \"else\" Stat ]",
			L"[30][IfTail_SWITCH_1allow_half_if]OtherStat [ \"else\" @ Stat ]",
			L"[31][IfTail_SWITCH_1allow_half_if]OtherStat [ \"else\" Stat @ ]",
			L"[32][IfTail_SWITCH_0allow_half_if] BEGIN ",
			L"[33][IfTail_SWITCH_0allow_half_if] END [ENDING]",
			L"[34][IfTail_SWITCH_0allow_half_if]IfTail_SWITCH_COMBINED @",
			L"[35][IfTail_SWITCH_0allow_half_if]OtherStat \"else\" @ Stat",
			L"[36][IfTail_SWITCH_0allow_half_if]OtherStat \"else\" Stat @",
			L"[37][IfTail_SWITCH_0allow_half_if]OtherStat @ \"else\" Stat",
			L"[38][If_SWITCH_1allow_half_if] BEGIN ",
			L"[39][If_SWITCH_1allow_half_if] END [ENDING]",
			L"[40][If_SWITCH_1allow_half_if]< \"if\" \"cond\" \"then\" @ IfTail_SWITCH_1allow_half_if >",
			L"[41][If_SWITCH_1allow_half_if]< \"if\" \"cond\" \"then\" IfTail_SWITCH_1allow_half_if @ >",
			L"[42][If_SWITCH_1allow_half_if]< \"if\" \"cond\" @ \"then\" IfTail_SWITCH_1allow_half_if >",
			L"[43][If_SWITCH_1allow_half_if]< \"if\" @ \"cond\" \"then\" IfTail_SWITCH_1allow_half_if >",
			L"[44][If_SWITCH_0allow_half_if] BEGIN ",
			L"[45][If_SWITCH_0allow_half_if] END [ENDING]",
			L"[46][If_SWITCH_0allow_half_if]< \"if\" \"cond\" \"then\" @ IfTail_SWITCH_0allow_half_if >",
			L"[47][If_SWITCH_0allow_half_if]< \"if\" \"cond\" \"then\" IfTail_SWITCH_0allow_half_if @ >",
			L"[48][If_SWITCH_0allow_half_if]< \"if\" \"cond\" @ \"then\" IfTail_SWITCH_0allow_half_if >",
			L"[49][If_SWITCH_0allow_half_if]< \"if\" @ \"cond\" \"then\" IfTail_SWITCH_0allow_half_if >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
