/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1641; // 13949 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 105;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x7D\x36\x00\x00\x61\x06\x00\x00\x09\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x0A\x0A\x9A\x0A\x9F\x11\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x97\x91\x8D\x1B\x95\x96\x8F\x9E\x96\x91\x9A\x94\x37\xAA\xB3\x96\x9B\x98\x9D\x9E\x9D\x06\xAC\xA9\x81\x99\x9C\xA3\x9E\xA3\x41\xB4\x89\x92\x96\x84\xA7\x80\xA1\x45\x9A\x91\xAD\x97\xA2\xA9\xAA\xAA\x49\xBC\x99\xBE\x9B\xA8\xA3\xA6\xA5\x5D\xC8\x9F\xBA\xA3\xB4\xAD\xB2\xAF\x02\xD0\x89\x82\x0A\x86\xA5\xB4\xB0\x67\xE2\xAF\xA4\xB3\xBE\xB1\xBA\xB4\x01\xEA\xA1\xB6\xAB\xB8\xAF\x81\x01\x6D\xD3\x83\xBC\xB1\xBC\xC3\xBA\xB9\x79\xF0\x87\xC6\xC9\xC4\xB9\xC6\xBB\x8F\xF8\x9C\x8A\xC1\xC8\xC7\xC8\xC7\x97\x90\xD9\xD2\xCA\xBD\xC2\xBF\xC5\x9F\x95\xCC\xDB\xC6\xCD\xCC\xD1\x8D\x0C\xCB\x8A\x88\x8D\xA2\xC2\x84\x03\x0A\xEC\x97\xA3\xC1\xD4\xD3\xD0\x04\x81\xB3\xEE\xDA\xD9\x86\x85\xD7\x84\x0A\x39\xFD\xBB\x8B\x01\xDB\xDD\xE1\xC7\x83\x8D\x02\xEE\xCB\x8E\x06\xE6\xA7\xC9\xD1\xFC\xD8\xE4\xE9\xE6\xE9\xA2\xB5\xE6\xD9",
			"\xE4\xDD\xEC\xEC\xDB\xB5\x8F\x06\xF6\xE3\xED\xEA\xF3\xEB\xE4\xDC\xDF\xFB\xE0\xF6\xED\xF5\xF6\xEB\x94\xF0\xEF\xFC\xF5\xFA\xF8\xFB\x98\xF8\xDA\xD1\x00\xEA\xF4\xFB\xFB\xF2\x52\x0D\x7F\x7C\xE7\x42\x43\x07\x78\x05\xBE\x79\x80\x00\x10\x6A\x6F\x7A\x05\x03\xBA\x7C\x64\x80\xF9\x54\x8A\x66\x84\xA5\x56\x83\x85\x85\x98\x57\x01\x86\x86\x96\x58\x08\x80\x7A\x0B\xAC\x72\x46\x83\x25\xA0\x83\x68\x86\x2B\xAA\x8A\x76\x7C\x1B\x1F\x8C\x87\x85\x2E\xAE\x79\x8B\x8C\x1B\x9A\x6C\x06\x8C\x34\xB8\x89\x86\x8F\x2D\x98\x6D\x04\x8F\x39\x92\x6E\x07\x88\xE5\x64\x8A\x92\x40\x20\x04\x96\x65\x08\x4E\x81\x9D\x8F\x94\x45\xBF\x84\x96\x95\x55\x92\x99\x97\x8B\x40\x9C\x97\x96\x96\x58\x96\x62\x09\x94\x5E\x9B\x96\x8F\x92\x0A\xA8\x94\x82\x9A\x23\x24\x97\x99\x92\x70\xA9\x91\x9C\x00\x24\x2E\x9F\x75\x09\x48\xB2\x9A\x9F\x9A\x02\x67\x06\x9F\x7F\x5D\xAF\x9B\x9C\x8B\x65\xA1\x90\x9B\xA1\xB5\x68\x0F\x9F\x8D\x5F\x85\xA8\xA2\xA0\x7C\x83\xA2\x7D\x0A\x8B\xAA\x94\xA0\xA4\x97\xB1\x71\xA2\x42\x2A\x15\xA3\x9D\xA6\x80\x8D\xA8\xA5\x8D\x9A\x9A\x6B\x0A\xA7\x7B\xAC\x09\x9D\xA4",
			"\xAC\xAC\x7E\x08\xAA\xAD\xA4\xA1\xAA\x99\xA5\xB4\xA3\xAE\x65\x2F\x30\xA0\xA8\xA3\xB6\xBC\xA6\xA2\xA3\xB5\x51\x1B\xAA\x5B\xD9\x70\x67\x54\x4B\xB2\x70\x4E\x65\x6A\x7D\x48\xBA\xB1\x5F\xCC\x9E\x6E\xB3\x5A\x53\x51\xB0\x6B\xB4\x06\x49\xBB\xB3\x54\xD8\x83\x44\xB0\x78\xD6\x99\x7D\xB7\xB3\x2C\x61\xB0\x7B\xB8\x01\x5A\xB0\x6A\xB9\x2C\x68\xB0\x02\xBA\xD9\x6C\xBD\xB8\x48\xF0\x80\x0F\xB4\x4B\xC6\x8D\xB3\x49\xBD\xF5\xAE\xBD\xBF\x48\xF2\xB3\xB9\x45\xBD\xB4\x41\xC2\xC3\x45\xFC\x95\xBC\xB7\xBE\xAB\xA5\xBB\xC0\xBD\x64\xB9\xB2\xB4\xC0\x0F\xDD\x44\xC2\xC2\xC7\x8C\xC4\xB7\x55\x06\xC7\xC9\xC0\xC7\x15\xC3\xC4\x99\xC7\x02\xD7\xC0\xC9\xC6\x10\xDB\xC0\xB5\xC8\x18\x5F\xCB\xC8\xCA\x16\xD1\xCC\xCB\x45\x24\xF3\xB6\xCB\xCB\xFA\xA9\xC9\xB4\xC6\x39\xF1\xCA\xCB\xB6\x30\xE2\xC8\x8A\x67\x12\xD7\xB3\x49\xD1\xE2\x87\xD3\xCF\x3F\xF5\x80\x67\xC9\xCF\x42\xCF\xB9\x75\xD3\x3C\xD3\xCA\xCF\x40\xFF\x97\xD2\x42\xD3\x38\xD6\xDE\xCF\xCE\x57\x54\xDF\xD2\xD7\x51\xDE\xB3\x54\xD2\xE7\xA3\x48\x6E\xD4\xD9\x6C\x64\xD8\x46\x6E\xC6\xD0\x49\xDC\x49\xE0\x4B\xD8\xDB\x2C",
			"\x77\xD6\xDB\x55\x7A\xC2\x49\xD5\x47\x7D\xE9\xB3\x55\xE0\x00\x1C\xDE\x65\x93\x6C\xE0\x7F\xB4\x6A\x89\xF0\x4C\x4B\xE2\x0A\x66\xBC\xE1\xE2\x86\xDF\xA3\x48\xE4\x09\x52\xED\xE2\xBB\x8D\xCA\xED\xE7\x54\x37\xD2\xDC\xE5\xE4\x9F\xE1\xD5\xE9\x5F\x98\xC6\x4A\xE5\xE2\x8F\xCD\xEB\xEA\x41\x95\xD2\xA0\x49\xEA\x03\x6F\xE3\x40\x0D\x8D\xF4\xEE\xDD\xE3\xA1\xDB\xD4\xEB\xD0\x0B\x6B\xA6\xB9\xBD\xE6\xB1\xE4\x43\x80\x74\xEF\xBB\x6B\xAA\xC9\xC6\xF8\xDB\xB7\x68\xF5\xB1\xF7\x6B\x0A\x46\xF7\x03\x80\xD7\xFF\xC2\x41\xF6\x60\xC6\x4C\xF7\x5F\x03\xAE\xC0\xF9\x42\x84\xDF\xB4\xE1\xBD\xE7\xCA\x44\xE2\xF1\xBE\x63\xFE\xF5\xE3\x48\x03\x8F\xB6\x87\x89\xC9\x11\xFA\x42\x19\x0D\xEA\x13\x80\x1B\x62\x89\xE3\x12\x03\x56\x79\xE3\x4C\x01\x80\x85\x0B\x39\x71\x4D\x05\x81\x42\x45\x39\x70\x27\x0A\x86\x20\x02\x49\x73\x13\x0F\x83\x21\x1D\x49\x70\x0A\x03\x50\x05\xE3\x46\x7C\x3C\x48\x71\x25\x56\x96\x35\x5F\xBD\x72\x30\x53\x6F\x63\x83\x53\x09\x26\x7B\xDF\x12\x33\x54\x14\x8B\x46\x5C\x68\x7D\x83\x77\x22\x80\x85\xD1\x28\x69\x86\x24\x9C\x75\xF5\x0D\x69\x86\xED\x41\x20",
			"\x6D\x84\x72\x87\xAD\x0F\x5F\x3A\xB4\x50\x07\x3B\x90\x49\x7B\x0A\xA1\x8B\x54\xB4\x54\x00\x89\xC3\x4A\x23\xF7\x3B\x7F\x3D\xE1\x54\x79\x85\x50\x8F\x3D\xFB\x54\x8B\x41\xE9\x49\x23\x8A\x3F\x99\x88\xEC\x2B\x5C\x81\xEE\x6A\x49\x7D\x5F\x8A\x7E\x18\x96\x52\x57\x05\x60\x88\x00\x47\x8F\x3C\xA4\x07\x86\x8D\x39\x41\x3E\x87\x00\x0F\x8F\x13\xF2\x8B\x78\xE0\x41\x22\x3C\x78\x8C\x3C\x03\x2B\x5F\x8C\x0E\xBD\x83\x41\xFC\x21\x92\x7C\x4F\x38\x8E\xC2\x49\x7A\x88\x0B\x47\x42\x1F\xB1\x58\x33\x2D\x81\x21\x8E\x0B\x50\x53\x1E\xBF\x3E\x57\xD1\x16\x90\x00\x9B\x8A\x4F\x46\x4F\x7A\x21\x06\x5C\x94\x8D\x98\x25\x8F\x40\x03\x9C\x8F\x34\x93\x93\x57\x6A\x4C\x96\x41\x38\x88\x33\x8D\x28\x8E\x20\x10\x4A\x90\x66\x18\x98\x6A\x85\x32\x93\x20\xBC\x93\x4C\xA4\x7E\x75\x8F\x3D\x51\x85\x98\x00\x1F\x96\x40\x21\x92\x98\x85\x37\x8F\x94\x02\x27\x44\x32\xEC\x3C\x98\xC1\x49\x22\x99\x01\x26\x91\x2D\xDF\x36\x83\x69\xB2\x39\x97\xC8\x94\x8F\x40\x4F\x92\x95\xEF\x07\x4F\x95\x6D\x83\x20\x23\xB3\x9B\x8C\x81\x2A\x91\x78\x09\x3F\x00\x0F\x98\x34\x99\x5E\x89\x23\x9D\xC0\x8D",
			"\x9F\x1F\xAB\x50\x4A\x5D\x9A\x32\x9A\xF6\x86\x20\x3E\xCB\x9A\x9E\x00\x09\x93\x8C\x09\x2D\x4E\x3F\x92\x3D\x9B\x80\xAA\x9B\x87\xAD\x86\x21\x35\xCA\x79\x20\x3C\x4B\xA6\x32\xE7\x88\x98\x20\x82\xA5\xA0\x58\x96\x73\x97\x0A\x3B\xA1\x39\xC3\x80\x58\x48\x47\xA3\x20\xB4\x9A\x33\x46\x60\x9E\xA1\x3E\x73\x9A\x33\x88\x68\x9B\x49\x82\x21\x99\x3D\x50\x54\x52\x17\xA3\x37\x98\x78\x83\xA7\x80\x13\xA0\x92\x03\x35\x9E\x40\x5F\x57\x55\x9C\xB5\x35\x4E\x3C\xB0\xA1\x26\xDF\x3D\x05\x97\x92\x36\x04\xAB\x47\x9B\x38\x9D\xA2\x3F\x5C\x68\x9E\x85\x03\x32\x92\x41\x3D\xAC\x55\x16\xA2\x57\x3B\x13\xBA\xAB\x48\x9D\x95\xA5\xEF\x26\x90\xA5\x05\xB9\x7C\x1E\x9A\x86\xA9\x8D\x0A\x53\x92\x67\xB4\xA4\x55\x98\x32\x06\xA7\x96\x30\xA7\xD0\x81\x21\x5C\xBE\xA5\xA1\x18\x53\x90\x77\x6D\xBC\x53\x80\x7B\xA5\x71\xB9\x9A\x36\x06\x76\xA3\x35\x51\xF9\xA0\x00\xFA\x78\x95\xA0\x0D\xA3\xAA\x42\x38\x0A\x56\xF9\x02\xA9\x20\x2C\xAD\x9B\x7B\x39\x05\xB2\xCC\x2A\xAF\xB1\x11\xAA\x4E\x0E\x1D\xBF\x9F\x2B\x8B\xA9\x21\x43\x58\x8F\x0E\x4A\xAA\x4C\x55\x78\x88\xA0\x72\xA1\xB7\x9C\x3E",
			"\x0C\xB5\x39\x6F\x57\xB5\x0A\x3F\xA7\x21\x83\x22\x9F\x49\x81\x0D\xB6\x7B\x4C\xAC\x32\xB0\xB9\x9A\xC3\x92\x34\x08\xC0\xAC\x55\x5D\xF8\x81\xB3\x80\x3E\xAF\xB4\x0B\x47\x08\x69\x92\x39\xB4\xBC\x64\x85\x5D\xA7\x79\x76\x60\x27\x83\x77\xCE\x7A\x72\xB2\x3A\x93\x37\x12\xAD\x6C\x7E\x1A\x91\x8F\xBC\x78\x8B\x72\x79\xF8\x80\x27\xDE\x5C\x8C\x6D\xEE\xA5\xBB\x6C\x5A\x90\x24\xE3\x4B\x76\x78\x30\x2A\x87\xE4\x43\x35\x66\x9A\x59\xBB\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][If] BEGIN ",
			L"[10][If] END [ENDING]",
			L"[11][If]< \"if\" \"cond\" \"then\" !(!0;Stat @) \"else\" Stat >",
			L"[12][If]< \"if\" \"cond\" \"then\" !(!0;Stat) \"else\" @ Stat >",
			L"[13][If]< \"if\" \"cond\" \"then\" !(!0;Stat) \"else\" Stat @ >",
			L"[14][If]< \"if\" \"cond\" \"then\" @ !(!0;Stat) \"else\" Stat >",
			L"[15][If]< \"if\" \"cond\" @ \"then\" !(!0;Stat) \"else\" Stat >",
			L"[16][If]< \"if\" @ \"cond\" \"then\" !(!0;Stat) \"else\" Stat >",
			L"[17][If]< ( ([0] \"if\" \"cond\" \"then\" @ Stat) ) >",
			L"[18][If]< ( ([0] \"if\" \"cond\" \"then\" Stat @) ) >",
			L"[19][If]< ( ([0] \"if\" \"cond\" @ \"then\" Stat) ) >",
			L"[20][If]< ( ([0] \"if\" @ \"cond\" \"then\" Stat) ) >",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]<< !(0;!Block @) >>",
			L"[24][Stat]<< !Do @ >>",
			L"[25][Stat]<< !If @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
