/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1820; // 15780 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 28;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\xA4\x3D\x00\x00\x14\x07\x00\x00\x09\x00\x01\x82\x80\x07\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x84\x09\x0A\x98\x0A\x9C\x0A\x80\x12\x85\x40\x01\x09\xBF\x7B\x8C\x8B\x8E\x84\x00\x1D\x9D\x9F\x81\x9C\x8B\x90\x93\x7F\x26\xA4\xA9\x81\x9B\x92\x92\x85\x93\x28\xAF\xA7\x9F\x8F\x89\x8E\x8D\x99\x32\xAA\xB9\x8C\x9B\x9E\x97\x9A\x9D\x3F\xBC\x81\xBE\x96\x80\x99\x97\x92\x3D\xC8\x83\xAA\xA5\xA0\x9D\x84\x9B\x06\xD0\x83\x86\xA9\xA6\x8D\xAB\x98\x4B\xD6\x99\xB8\xAD\xA0\xA1\xAE\xA1\x5F\xC4\x93\xAE\xA1\xB4\xA7\xB0\xAF\x67\xE0\xA9\xA2\xB2\x84\xA9\x84\x01\x0A\xD2\xAD\xA4\xBB\xB6\xB3\xB8\xB4\x77\xEA\xB9\xAC\xB1\x86\xB5\xB2\xAD\x7F\xDC\x83\x83\x01\xBF\xAB\xA2\xC0\x75\x88\xFB\xB6\xBD\xBC\xBB\xC4\xC5\x8D\xF8\x91\xDA\xB3\xCC\xBC\x90\xC7\x95\x8C\xD7\xD2\xCB\xCC\xC9\xCE\xCB\x7E\x89\xC2\xCF\xC3\xD1\xCC\xC9\xCF\x9A\xA1\xE4\xDF\x8C\x87\xA6\x85\x02\x85\xDB\x9F\x86\x01\xD9\xC3\xC3\xD2\xA8\xA7\xC8\x91\xA6\xC5\xDE\xD8\x85\x08\x35\xC3\x8E\x8C\xDF\xDD\x84\x05\xC2\xAB\xFE\xD6\xDA\x83\x05\xE4\xD3\xB8\x8C\x0F\xF9\xD8\xDA\xD4\xE9\xDB\xD8\xCB\xE2\xD9",
			"\xE6\xE4\xE5\xEF\xED\x0A\x8D\x13\xF6\xE4\xEF\x8E\x06\x85\x70\xDF\xCA\xEA\xF1\x80\x0B\xF0\xCC\xE5\xDA\xEB\xFE\xE4\xF8\xF0\xF7\xF8\xF7\xE4\xFA\xF0\xFB\xFC\xCD\xFE\xCF\xFF\x60\x60\x7D\x04\xEF\x7E\x7C\x7F\x81\x9C\x50\x4E\x69\x7E\xF0\x53\x05\x80\x80\x08\x9E\x64\x07\x83\x96\x55\x04\x85\x6A\x11\x82\x86\x83\x86\x10\x9C\x8A\x85\x87\x9E\x56\x07\x87\x69\x01\x98\x8E\x86\x89\x20\x9F\x8A\x88\x8A\x2B\xA4\x80\x7F\x05\x23\x95\x70\x7E\x44\x0B\xB5\x73\x7E\x7D\x06\x59\x01\x8F\x47\x1A\x3B\x82\x7F\x75\x3F\xB8\x76\x8C\x90\x0C\xA7\x87\x6B\x06\x3E\x85\x99\x88\x8B\x4C\xAE\x8C\x64\x45\x35\xB8\x82\x97\x8D\x54\x84\x93\x92\x90\x03\x5D\x09\x93\x95\x25\x8E\x9B\x92\x97\x2D\xB2\x86\x92\x98\x5F\xA4\x91\x98\x77\x5C\x99\x8A\x66\x07\x5B\x93\x91\x43\x07\xE8\x41\x9D\x94\x6E\x21\x2D\x92\x42\x08\x76\x96\x9E\x98\x96\x55\xBC\x9A\x9D\x9F\x73\xA8\x9B\x9D\xA0\x72\xAA\x97\x6B\x08\x79\xBE\x9A\xA0\xA1\x4A\xA7\x91\x90\x09\x89\x8C\xA9\x9B\x98\x1F\x65\x01\xA6\xA1\x66\x8D\x99\xA7\x69\x26\x17\xA4\xA5\xA1\x9F\x8D\xAA\xA6\xA0\x80\xB0\x77\x0A\xA7\x65\xA4\xAF\x9F\xAA",
			"\x8B\x98\xAA\xA8\x00\x28\x28\xAE\xA2\xA8\x60\xA3\xA0\xA9\xAA\xB7\x96\x69\x0A\xAC\x9A\x6A\x0C\xAD\xAD\xA7\x6B\x0F\xAF\xA6\xC4\xAF\xA2\xA7\xA0\xAE\xB9\xAA\x64\x0B\xC3\x86\xB9\xB0\xAD\xC5\x8A\xB7\x69\x0B\xCD\x92\xB1\xB4\xB4\xCE\xA1\xA3\xA6\x67\x2E\x15\xB9\x43\x0B\xDE\x97\x90\x0D\xB8\xC8\x9A\xB5\xB8\xAE\xD8\x96\xBF\x45\x0C\xE4\xA5\xA6\xBA\xBB\xE8\x9B\xB6\x66\x16\x71\x91\x94\x68\x6D\x5B\x70\x49\x78\x4D\xA2\x6D\x61\x60\x4C\xFE\xA2\x6A\xBC\xBF\x81\x41\xC4\x6B\xC0\x6F\x57\x56\xC0\x74\x00\xD7\x58\xC1\x71\x05\xCE\xC7\x4B\xC2\xD4\x4F\xC4\xC0\x75\x14\xF0\x46\xC6\x40\xFB\xBD\xB2\xC4\x49\x19\xDA\xC4\x49\xC7\x02\x72\x50\x74\xBE\xFF\x93\xCF\xC5\x48\x24\xFC\xBB\xC5\x40\x2D\xD4\x71\xCD\xCC\x0D\xF9\xB7\x49\xCC\x26\xD8\xCB\xC9\x47\x21\xE2\xCD\x45\xCC\xB7\x7D\xCE\xCF\x46\x33\xCA\xCB\xCC\x47\x42\xC3\xD8\xCE\xD1\x36\xE0\xC7\xD0\xD1\x17\xE4\x69\xD2\xCF\x45\xDB\x53\xD6\xC8\x57\xDA\xCB\xD3\x56\x55\xD1\xCD\xD0\xCB\x51\xD0\x7D\xD6\x68\x63\xD2\xDF\xD3\x3F\x5B\xC1\x68\xCA\xC0\x2A\xDF\xDF\xCD\xD8\x3A\xEE\xDC\x45\xDA\xA2\x6B\xD7\xC3\x49\x76",
			"\xCC\xCD\xD9\xCA\x4E\xF2\xD0\xD5\xD8\x35\xFC\xD0\xD9\xC2\x56\xE7\xD9\xD7\xCB\x00\x39\xC0\x4D\xDE\x15\xF8\xD7\xD9\xCC\x84\x45\xEE\xDF\x3F\x87\xF7\xC0\xDC\xE2\x91\xDE\xD2\xE3\xDB\x84\xC1\x60\xE4\xD3\x9B\xC8\xDF\xE1\x8C\x8C\xC3\xDD\x45\x70\x80\xE7\x40\x6F\xE4\xAB\xE1\xEB\x45\xEB\x6C\xE4\x40\xEF\xDD\x24\x68\xE1\xD4\x4C\xB6\xC3\x44\xCF\x49\xB9\xDC\xC7\x55\xEF\x30\xFF\xE1\x8C\xF0\x89\xC2\xF9\x41\xE6\xA2\x74\x87\xEF\x49\x39\xF0\xD4\x75\xF3\x97\xD6\xE1\xD8\xC5\x1F\x44\xF0\x4C\xF2\xF0\x9D\x40\xF5\xEA\x24\x5B\xF6\x40\xF5\xC0\x56\xB0\xD2\x42\xE0\xC9\x46\xF4\xA6\xDE\xC3\x66\xB5\xFA\x02\x7F\x00\xDD\xCE\xE3\xC7\xFF\xF8\xF9\xAF\x53\x71\xCF\xEC\x01\x58\xF1\x40\xFE\xC5\xC9\x44\xC4\xE3\x31\x7B\x37\x40\x44\x7C\x70\x8A\x44\x3B\x20\xF0\x6D\x22\x42\x7A\x70\x01\x03\xA5\x64\x7E\xC7\x36\x7E\x42\x48\x32\x7F\x08\xB6\x59\x20\x14\x6E\x39\x42\x00\x8D\x38\x85\x02\x82\x20\x1A\x86\x20\xF1\x21\x83\x21\x02\xB5\x5F\x7B\x12\x95\x80\xC4\x03\x24\x62\xE9\x17\x80\x00\x31\x6E\x86\x41\x0C\x82\x86\x04\x90\x86\x20\xE2\x29\x20\xFF\x1F\x8E\x79\x80\x0E\x0B",
			"\x3A\x14\x70\x4D\xD8\x0C\x8F\x09\xE9\x39\x65\x47\x43\x8A\x20\x14\x53\x3C\x80\x36\x49\x89\x21\x51\x13\x3B\x47\x48\x4F\x88\x83\x12\x0B\x3A\x3B\x9D\x85\x42\x53\x00\x88\x85\x04\x42\x8B\x03\x34\x08\x13\x9D\x80\x8C\x81\x15\x0B\x8C\x09\x27\x3D\x19\x81\x26\x0A\x2C\xA1\x3B\x8D\x01\x37\x0A\x1B\x89\x2E\x3C\x38\x98\x09\x85\x06\x36\x41\xD8\x0A\x70\x3E\xFE\x78\x48\x8E\x59\x13\x3A\x0C\x70\x6C\x80\xF2\x2F\x55\x26\xEA\x47\x86\x0D\xF7\x3F\x55\x9C\x7C\x8F\x5D\xF9\x6A\x91\x9F\x59\x51\x5F\x3D\x7F\x79\x48\xAF\x54\x6D\xF6\x1A\x3C\x71\xD2\x70\x3F\x55\x0C\x85\x93\x27\x8B\x8A\x20\xC6\x67\x7C\x33\x94\x93\x57\x95\x0C\x70\x46\x46\xB0\x69\x66\x1C\x97\x3C\x03\xB0\x94\x94\x57\xB7\x3C\x78\xA2\x9C\x30\xFF\x0C\x8C\x86\x00\x1E\x90\x95\x41\x44\x86\x40\x39\x9E\x32\x5C\x9E\x81\x7C\xB6\x92\x5E\xAD\x77\x3D\x97\x56\x97\x4F\x23\x65\x61\x22\x1A\x86\x2B\x76\xCE\x02\x99\x78\x09\x3D\x94\x31\x96\x3F\x55\x3A\xB3\x81\x48\x39\x9F\x9A\xF9\x75\x79\x99\x3D\x4E\x47\x85\xC7\x42\x22\x03\x81\x2F\x96\xCF\x2F\x53\x42\x9D\x7B\x4E\x37\xBA\x7A\x81\x84\x0E\x9B\x4F\xAC\x32",
			"\x91\x40\x22\x48\x9C\xF8\x0A\x43\x85\xEA\x8A\x23\x3D\x93\x95\x94\x7D\x80\x03\xA0\x01\x2F\x92\x67\x67\x90\xA1\x80\x2B\x98\x00\xDB\x9A\x33\xAB\x4A\x74\x9F\xFB\x30\x9C\x9A\x64\x86\x21\x0D\x84\xA3\x9D\x7E\x90\x92\x51\x1B\xAC\x9C\x26\xC1\x48\x88\x71\x97\x4C\x9F\x26\xA3\x21\x48\x87\xA3\xA5\x84\x0F\xA1\x66\x5A\x51\x9D\x9F\x3A\x42\xA7\x80\x2B\xA1\xA2\xA7\x2F\x56\x10\xA9\xAD\x4E\x2A\xBC\xA1\x20\xE1\x83\x20\x05\xCF\x99\x91\x74\x69\x8B\x82\x2D\xAA\x98\xB0\x57\x56\x21\x07\x05\xA5\x9C\x7D\x5F\x8F\x4F\x8A\x5E\x89\xA9\x8E\xAE\x9E\x49\xA3\x23\x35\xB0\x8A\x20\x4B\x75\xA2\x51\x75\x5F\xAB\x55\xD3\xA6\x91\x20\x67\x52\x85\x7B\x48\x50\x5A\x82\x23\x9E\x81\x03\xA8\x9F\x45\xAA\xA8\x6E\x5F\x86\x21\xB7\x9C\xA0\x87\x06\xA9\x9C\xAB\x74\xA3\x21\xB1\xB0\xAE\xA8\x72\xBF\x23\x3F\x83\x28\xA0\x45\x6F\x56\x57\x1E\xB5\x92\x40\x17\xA5\x85\xAC\xBD\x4A\x58\x5F\xA4\x3D\xA7\x6B\xA1\x20\xC6\x82\x25\xB0\x65\xA9\x22\x5F\xBE\x79\x20\x6A\x49\xB2\x57\x06\xB6\xB1\x40\x18\xB3\x95\x84\x3C\xAC\xB3\x06\x3D\x5B\x67\x9A\x30\xB2\x8C\x89\x22\xB4\x10\xAE\xB0\xAB\x60",
			"\x51\xB2\xF8\x1E\xB3\xAA\x7A\x86\x20\x43\xFF\xA7\x4A\x76\x6B\xB3\xA9\x1F\x28\xA7\x40\x30\xB9\xB3\xC0\xB1\xAC\xB0\x0A\x22\xBB\x5D\xE7\x5A\x95\x3D\x54\xA2\x20\xED\x9C\x99\x90\x03\x95\xB6\xCE\x23\x5F\x85\xCF\xB1\x90\x54\xAC\x54\x07\xBC\xB0\x3E\xB7\x0D\xA0\x01\x49\x83\x24\xA6\xA2\xB7\x3E\x06\xED\x41\x22\x4F\xE4\xB2\xB6\x45\x77\x01\xBD\x00\x10\x4A\x41\x51\xB2\xA3\x20\x78\x05\x96\x57\x54\xBA\x6B\x86\x22\xBE\xE4\x9B\xB8\x00\xBB\xA8\xB7\x40\x3B\x0E\xBA\xCE\x1D\xBF\x85\xFD\xA3\x99\x7B\xE4\x3D\x06\xFC\xBB\x4D\x06\x06\xB5\xA9\x96\x6D\xB9\xB7\x45\x86\x20\x08\xF0\xBB\xA7\x84\xFF\xB4\x3D\x20\x30\xBE\x22\x1B\x8B\xC0\x7C\x42\x07\x87\x3D\x6F\xBC\xB2\x00\x00\xC6\x41\x24\xB0\x99\x84\x0A\xB8\x9B\x06\x26\x0A\x83\xFD\x4A\x06\x83\xAA\xC2\x7D\x1C\xD0\x3D\x12\x25\xCD\x4E\x1E\x33\xC1\x20\x52\xA3\x21\x58\xE6\xB7\x4B\x26\x30\xBA\xAD\xCB\x68\x96\xC6\x70\x87\x62\x85\xA2\x26\xC9\xDA\x6E\x78\xFB\x0F\x8F\x94\xC3\x15\x9B\x64\x52\x9A\x92\x80\xD4\xCF\xAA\xA0\x71\x7F\xAB\x34\x3F\xC8\x59\xB3\x28\xA7\x8D\x0C\x84\x26\x67\xDF\x21\x9A\xBF\xCC\x5F\xAC",
			"\x40\x07\x70\x14\x6D\x79\xF9\x3A\x86\x30\xFE\x5A\x64\x7F\xCD\x7C\x7C\x4D\x74\xBE\x22\x3E\xDB\x24\x71\x3D\x8A\x70",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfTail] BEGIN ",
			L"[10][IfTail] END [ENDING]",
			L"[11][IfTail]!(!0;If @) \"else\" Stat",
			L"[12][IfTail]!(!0;If) \"else\" @ Stat",
			L"[13][IfTail]!(!0;If) \"else\" Stat @",
			L"[14][IfTail]( ([0]? If @) )",
			L"[15][IfTail]OtherStat ( \"else\" @ Stat | ( ([0]? ) ) )",
			L"[16][IfTail]OtherStat ( \"else\" Stat @ | ( ([0]? ) ) )",
			L"[17][IfTail]OtherStat @ ( \"else\" Stat | ( ([0]? ) ) )",
			L"[18][If] BEGIN ",
			L"[19][If] END [ENDING]",
			L"[20][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[21][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[22][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[23][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[24][OtherStat] BEGIN ",
			L"[25][OtherStat] END [ENDING]",
			L"[26][OtherStat]<< !Block @ >>",
			L"[27][OtherStat]<< !Do @ >>",
			L"[28][Stat] BEGIN ",
			L"[29][Stat] END [ENDING]",
			L"[30][Stat]<< !(0;!If @) >>",
			L"[31][Stat]<< !OtherStat @ >>",
			L"[32][Module] BEGIN ",
			L"[33][Module] END [ENDING]",
			L"[34][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"allow_half_if",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
