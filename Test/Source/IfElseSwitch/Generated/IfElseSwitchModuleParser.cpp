/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1476; // 12509 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 196;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\xDD\x30\x00\x00\xBC\x05\x00\x00\x09\x00\x01\x82\x80\x06\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x07\x0A\x95\x0A\x9A\x0A\x87\x1D\x01\x84\xFF\x19\x9A\x99\x8A\x80\x03\x8D\x8D\x1D\x9F\x9A\x81\x92\x97\x7C\x92\x91\x27\x9F\xA9\x80\x9A\x85\x92\x93\x96\x25\x9D\x9D\x97\x88\x89\x98\x98\x94\x37\xAA\xB9\x8C\x95\x98\x9D\x9E\x9D\x3F\xBC\x86\x8E\x9B\x93\x93\x9C\xA3\x41\xC8\x83\xB6\x99\x84\x9A\x82\xA7\x03\xC4\x87\xBC\x83\xAF\x95\xA4\xAA\x57\xD6\x8B\xBE\x9B\xA8\xA1\xAE\xA1\x51\xCC\x9F\xAA\xA1\xB4\xAD\xB2\xAF\x67\xE0\x82\x92\xA9\x82\x02\x84\xA8\x6B\xE2\xA9\xA4\xB1\xBE\xB1\xBA\xB4\x77\xEA\x81\x8C\xB3\xB0\xAD\xBE\xAD\x03\x83\x2F\xB5\xA5\xA6\xBF\xB8\xC3\x79\xF4\xBB\xB2\xB9\xC0\xC7\xC4\xBB\x8F\xF8\x91\xDA\xBE\x8C\xC7\xC8\xC5\x95\x90\xD9\xD2\xCB\xCC\xC8\xBF\xC3\x80\x8D\xE1\xD7\xCE\xC5\xCC\xCD\xCF\xA2\x9D\x8C\x8D\xAA\x85\x03\xC1\xAC\x1D\x88\x8F\xA4\xC4\xD8\xDA\x85\x03\xAF\xFF\x85\xC3\xD6\xD5\xD0\x05\xDC\x03\x8E\xB3\xD6\xD9\x82\x04\xE1\xD4\xB5\xBA\xCA\x8B\x07\xE4\xD0\xDE\x06\xCD\xBD\xFC\xC8\xDE\xE3\xDE\xEB\xE4\xA0\xD7\xC4\xEA",
			"\xEB\xE9\xEE\x85\x06\xD1\xD4\xD2\xFD\x8E\x01\xF2\xCB\xF1\xD8\x82\x90\x8C\xDD\xE8\xE5\xF7\xEA\xE9\xF0\xEF\xE8\xF3\xFA\xF2\xFB\xF3\xF7\x9A\xF9\xFC\xCB\xFE\xCC\xFD\xF3\x10\x26\x7A\x7F\x7F\x03\x9A\x61\x06\x80\xFC\x67\x72\x04\x82\xFE\x45\x8C\x67\x04\x0C\x98\x64\x05\x84\xA5\x7D\x77\x68\x81\x09\x8E\x8D\x81\x86\x1C\x94\x62\x44\x7B\x06\x56\x04\x87\x74\x18\x9B\x86\x8B\x85\x1A\xA8\x8D\x86\x8A\x27\x95\x85\x88\x8B\x98\x57\x03\x8A\x76\xDC\x75\x8E\x75\x7D\x2F\xAE\x89\x8A\x8E\x2B\xBC\x8D\x88\x89\x3B\x80\x9D\x8C\x6F\x18\x33\x81\x7C\x00\x19\x06\x98\x8E\x66\x14\x60\x87\x8E\x41\x1B\x0A\x96\x8E\x7B\x53\xB2\x75\x94\x7D\x57\x96\x8E\x8C\x8C\x5B\x9D\x92\x93\x8F\x34\x83\x4C\x06\x94\x4F\xA5\x94\x96\x99\x56\xA8\x98\x96\x9A\x1D\x24\x97\x9B\x9B\x69\xB0\x9B\x9A\x40\x1E\x2E\x91\x9D\x40\x1F\x36\x93\x9F\x9D\x00\x20\x0A\x9E\x96\x5F\x9C\x91\xA2\x97\x61\xB2\x90\xA1\xA1\x01\x61\x0F\x9D\x8E\x83\x8D\xA8\xA3\x9E\x90\x87\xAA\x42\x08\x8B\x81\x9F\xA2\xA4\x4B\x83\x9F\xA3\x08\x95\x9A\xA7\x90\xA6\x59\x8C\xA7\xA6\xA8\x0A\x64\x0D\xA4\x65\x25\x27\xA2\xA1\x47",
			"\x26\x2A\xA4\xA3\xA7\xA4\x99\xA0\x98\xAC\x96\x8A\x47\x0A\xAB\x8E\xB4\xAE\xA6\xAC\xAB\x87\x90\x12\x42\x6E\x4E\x92\x6A\x6C\xA0\x6E\x41\xB2\x4C\xA0\x6B\x6F\x5E\xB1\xC8\xBF\x5A\xB1\xB1\x25\x47\xB3\x42\xB4\xA2\x4F\xB2\x68\xB3\xC2\x8E\x76\xB6\x73\xD8\x8D\xBA\xB5\x55\xDD\x93\xB5\x57\xB6\xD2\x61\xB2\x40\x5C\xCE\x44\xB7\xB5\x49\xE4\xAE\x46\xB8\xB2\x2E\x6D\xBE\xBA\x48\xD4\x81\x45\xBE\x74\xF2\xB3\xBB\x47\xBD\xE8\xB8\xB0\xB9\xB4\xDE\x95\xBF\xBC\xBD\xC0\xA3\xB3\xC3\x47\xFC\x95\x5F\x6D\x5B\x55\x77\xB7\xBD\xBC\x07\xFB\xB1\xC3\xB7\x59\x6F\xB0\x03\xC3\xEC\x91\xCA\x45\xC2\x59\x6A\xBC\xB5\xC6\x15\xC0\xC3\xC4\xC4\x21\xC4\xCC\xC1\x56\xF9\xBA\xB9\x44\xC7\x7F\x5E\xC5\xB9\x49\x2E\xEA\xCB\x45\xCC\x32\xEB\xCA\x42\x60\x28\xDA\xC6\xCF\xC8\x22\xC6\x48\xCE\xB3\x3A\xFF\x3E\xC1\xC3\x37\xC6\xC5\xC8\xC2\x23\xB4\xC5\xCF\xC2\x01\xEE\x4E\x6B\xD1\x1B\x4F\xDB\xB1\x49\x52\xD0\xB2\x48\xD3\xDE\xAE\x48\xD6\x40\x18\xD7\xD3\x8B\xD6\x01\x7F\xC0\x69\x91\x3C\xE2\x4D\xBF\xC4\xCE\x67\xDA\x40\xB9\x68\xD2\x7A\xD9\x42\x6C\xEB\xD8\xDA\xD8\x86\xA5\x4F\xD9\xD3\x3D",
			"\xDE\xB1\xDD\xD9\x1F\x77\xD3\x43\xDE\x06\x40\xE9\xD6\xDD\x73\xFA\xAB\x46\xDF\x02\x6A\x08\xD8\xE2\xF6\x85\xE0\xDD\x74\xE4\xB7\xB4\xB8\xDD\x01\x55\xD7\xB9\x6B\x05\xC9\x46\xE5\xD8\x0A\x6E\xCD\xBE\xCB\xF7\xAE\xC4\xE4\x00\xB8\x5A\xE1\x75\xE9\x06\x5B\xE7\xC7\x6D\x98\xC9\x43\xE9\xBF\xF7\xA3\xE0\xD8\x00\xFD\xB3\xE7\xBF\xEC\xA3\xC2\x7F\xDC\xEB\x13\xF8\x01\x75\xBF\x32\x93\xC9\x0D\x74\xA3\xC9\x93\xC6\x0E\xD1\x5D\x44\xD9\xC0\x3B\x10\xEC\xED\xC0\x3C\x0E\xF9\x41\x79\x13\xFD\x02\xF6\x41\xE0\x53\xCE\x0D\x74\xF7\x8B\x8C\xDC\x65\xE4\xA3\x93\xC7\x0F\xD1\x68\x0E\xE3\x95\x8F\xB3\x46\xE0\x66\x2C\xEA\x9F\xA1\xBF\xFD\xA0\xA1\x61\xE6\xE8\xEB\xFF\xAB\x7C\xE4\x8A\xDC\x67\xA3\xED\xF5\xDA\x66\xCB\xFA\x74\x31\xDB\x31\x74\x7E\xF7\x45\x87\x20\x0A\x33\x76\x78\x23\x55\x57\xF9\x2E\x63\x42\xF3\x2F\x52\xEA\x5D\x6C\x33\xA1\x49\x22\x74\x47\x4F\x50\xEA\x62\x58\x7F\x03\x81\x23\x83\x08\x91\x82\x07\xAB\x79\x20\xDD\x5C\x6F\x48\xA0\x6F\x7B\x40\x0A\x87\x3C\x06\xBB\x57\x4A\x20\x81\x20\x04\xF5\x73\x3E\xE6\x27\x67\x4A\xB6\x6A\x86\x40\x23\x7B\x81\x23\x59\x7E",
			"\x20\x14\x94\x32\x71\x37\x8B\x85\xD6\x74\x87\x4A\xEB\x23\x39\xA8\x1A\x36\x85\x80\x01\x80\x33\xAA\x25\x69\x42\x01\x44\x88\x39\x50\x3D\x8A\x01\x2D\x88\x00\x33\x86\x81\x84\x31\x84\x76\x0A\x3E\x78\x10\xC7\x44\x7B\x31\xA5\x82\x8A\x47\x85\x89\xB6\x5B\x83\x84\xF1\x14\x8E\x8C\x06\x36\x86\x41\x57\x89\x8C\x81\x1A\x89\x7E\xB1\x57\x48\x1D\x83\x2F\x89\xD2\x1D\x23\x88\x70\x83\x22\x88\x58\x80\x52\x31\x9C\x83\x8E\x0A\x3C\x8A\x9C\x0F\x5B\x79\x43\xAA\x4A\x91\x8D\x69\x23\x1E\xBB\x89\x83\x23\x4D\x49\x90\x72\x43\x90\x26\x81\x2F\x87\x81\x00\x95\x8B\x4B\x8F\x86\x9A\x65\x8E\x93\x4A\xBC\x57\x7E\x57\x44\x96\x40\x72\x80\x95\x81\x13\x91\x92\x57\x42\x7E\x12\xEA\x49\x89\x81\x10\x90\x52\x8F\x4D\x4F\x1A\xF2\x72\x21\x03\x57\x86\x94\x06\x2A\x94\xE7\x09\x25\x4E\x42\xA2\x3D\x91\x94\x89\x22\x2F\x86\x27\x97\x1E\x8A\x99\x3A\x7E\x46\x9B\x79\x51\x4E\x74\x85\x0B\x9B\x7E\x22\x89\x22\x21\x97\x79\x20\x4A\x52\x9A\x33\xC5\x9E\x65\x18\x8A\x2F\x8D\x56\xB2\x4E\x54\xBB\x99\x8F\x40\x10\x4F\x99\x6C\xA1\x93\x56\xF3\x37\x94\x3B\xF5\x8C\x4E\x5E\xBC\x4F\x43\x06\x3D",
			"\x8C\x6F\x1D\x23\x9E\x47\x82\x21\x55\xDF\x9C\x32\xA2\x6B\x88\x9E\x5B\x80\x9A\x4D\xB7\x41\xA0\x65\x5E\x93\x96\x81\x05\xA1\x99\xF4\x90\x51\x0A\x6D\x87\x3C\x4E\x6B\x89\x78\x21\x47\xA2\x43\xD1\x3B\x04\x5C\x4A\x7A\x21\x9A\x86\x9C\x9F\x2C\x0E\xA2\x85\x06\x79\xA3\xEE\x8A\x4D\x0B\x25\xA9\x21\x4B\xBC\x8A\xA3\x01\x21\xA7\x09\x89\x2E\x04\x34\xAA\x48\x9D\x9B\x80\x02\x4B\x82\x2D\x99\x16\x87\x49\x06\x36\xB2\x4D\xAB\x04\x9B\xA7\x61\x91\xA2\x3C\x34\x01\xA8\x9F\x66\x74\x90\x59\x83\x24\x9A\x47\xA7\x3F\x0D\x2C\xA6\x20\x5D\xB8\x6A\x33\xE5\x4D\x6E\x56\xE0\x80\x36\x3C\x84\x73\x71\x6D\x6C\x70\x2C\xD9\x31\x88\x89\x6B\x8C\x84\x0D\xB3\xA5\x5A\xE3\xAE\x5A\x1E\xB1\x26\xAD\x25\x23\x76\x4C\x72\xAD\x22\xBA\x8A\xA8\x59\x29\x60\x25\x5E\x9B\x24\x5D\xB3\x42\x73\x77\x84\x80\x02\xEA\x44\x23\xB0\xA7\x5B\xA9\x21",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfTail",
			L"If",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfTail] BEGIN ",
			L"[10][IfTail] END [ENDING]",
			L"[11][IfTail]!(!0;Stat @) \"else\" Stat",
			L"[12][IfTail]!(!0;Stat) \"else\" @ Stat",
			L"[13][IfTail]!(!0;Stat) \"else\" Stat @",
			L"[14][IfTail]( ([0] Stat @) )",
			L"[15][If] BEGIN ",
			L"[16][If] END [ENDING]",
			L"[17][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[18][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[19][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[20][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[21][Stat] BEGIN ",
			L"[22][Stat] END [ENDING]",
			L"[23][Stat]<< !(0;!Block @) >>",
			L"[24][Stat]<< !Do @ >>",
			L"[25][Stat]<< !If @ >>",
			L"[26][Module] BEGIN ",
			L"[27][Module] END [ENDING]",
			L"[28][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
