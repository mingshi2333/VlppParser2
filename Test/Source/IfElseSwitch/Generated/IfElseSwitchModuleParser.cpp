/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2213; // 20082 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 165;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\x72\x4E\x00\x00\x9D\x08\x00\x00\x09\x00\x01\x82\x80\x0A\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x85\x06\x0A\x91\x0A\x94\x0A\x81\x0E\x85\x0F\x0A\xA5\x0A\x8C\x1A\x86\x12\x01\x84\xFF\x21\xA2\x81\x9A\x80\x03\x91\x91\x25\xA7\xA2\x89\x9A\x97\x7C\x96\x95\x2F\xA7\xB1\x88\x9A\x85\x96\x97\x9A\x2D\xA5\xA5\x81\x08\x98\x99\x9E\x99\x3F\xB4\xA0\x99\x91\xA3\x95\xA2\x92\x47\xB7\x83\xBE\x9B\xA0\xA1\xA6\xA1\x06\xB6\xB3\x86\xA9\x84\x9D\xAB\xA4\x53\xC8\x8F\xB4\xA1\xAC\xA3\xAC\xAD\x5D\xCC\xA1\xAE\xA3\xB0\xAB\x80\xA9\x58\xE9\x9F\xAA\xA5\xB4\xAF\xB2\xAF\x06\x9F\x97\xAB\xB9\xAC\xB7\xB6\xB1\x77\xE4\xB9\xA6\xB2\x80\xB4\xBA\xB5\x06\x83\x0A\x96\xAD\xB0\xB3\xBC\xB7\x7D\xF0\x87\xC6\xC9\xC0\xBD\xC6\xBD\x8F\xFC\x81\x9E\xB5\xC6\xB9\xC8\xC4\x93\x8A\xD7\xCC\xC9\xCE\xC5\xCE\xC8\x9F\x92\xE6\x9A\xC1\xD0\xCF\xD0\xCF\xA7\xA0\xE9\xC2\xD4\xCB\x80\x87\xB9\x06\x85\x03\xC0\xC3\x86\x03\xD9\xBF\xB8\x95\xE5\x87\x07\xDA\xDC\xDB\xCD\x96\x81\x88\x1D\xD3\x86\x86\x82\xC2\x8B\xC1\xC4\x84\xE0\xE5\xBA\xE6\x85\x0B\x4C\xE5\xDC\xC0\x04\x06\xE9\xD5\xA6\xAD\xCD\xFF",
			"\xD3\xEA\xE6\xED\xEE\xCF\xB9\xC9\xE1\xFE\xDF\x87\xEB\xEF\xD8\xD4\xE8\xEB\xF4\xD1\xF6\xE4\x07\xE7\xED\xEC\xE8\xD3\xFA\xD5\xFA\xD6\xF2\xF9\xF4\xFA\xFA\xD7\x05\xF9\xFD\x00\xB6\x7C\x7C\x7E\x01\x84\x82\x81\x81\xA6\x50\x0F\x7F\x81\x0C\x86\x8E\x81\x76\x03\x90\x88\x82\x7A\x11\x94\x88\x6A\x44\xB0\x63\x7C\x74\x00\x12\x0B\x8F\x82\x85\xAA\x53\x0E\x86\x84\x0D\xA4\x8F\x86\x77\x15\xA8\x83\x86\x8A\x25\xA0\x82\x68\x45\x19\x9B\x72\x7A\x8C\xE5\x75\x8A\x87\x8C\xE0\x5B\x88\x79\x05\x23\xAE\x86\x8B\x8F\x3E\x81\x9C\x8B\x89\xE4\x77\x86\x8C\x8D\x03\x56\x0D\x8F\x90\xA6\x57\x0B\x91\x91\x48\x82\x48\x07\x93\x3A\xA9\x80\x95\x8E\x38\xAE\x77\x96\x96\x55\xA8\x66\x45\x8C\x58\x87\x91\x9A\x91\x64\x91\x93\x9A\x99\x5C\x99\x97\x7C\x90\x4C\x82\x95\x4A\x06\x54\xAA\x96\x95\x97\x2D\xAD\x96\x9F\x96\x6B\xAE\x94\x9C\x91\x7B\xA6\x6B\x05\x9C\x62\x80\x0C\x04\xA0\x65\xA7\x91\x41\x07\x84\x82\x4E\x05\xA2\x86\xA9\x91\xA1\x9E\x77\xBD\x9A\x9E\x9C\x2B\xB8\x93\x9C\xA5\xAA\x58\x40\x9A\xA3\x85\x9C\xA8\x98\xA4\x5B\xA0\x0C\xA2\xA7\x8D\xA0\xA2\xA5\xA4\x98\xBC\x99\xA8\x9B",
			"\x96\x95\xAB\x85\x08\xA3\xA8\x72\x0A\x42\x72\x4F\xA7\xA6\x41\x24\x23\xAA\x47\xA6\xA6\xAB\xA3\xA6\xAD\xAE\xBE\xA8\xA8\xB0\x75\xAD\xA5\xB1\x47\xB1\xB7\xAD\xA5\xAF\xC4\xAA\xA6\x43\x09\xC9\x81\xBD\xB0\xAB\xA7\x9B\x98\x09\xB4\xC7\x82\xB6\xB2\xB3\xCB\x8A\xBF\xA6\xB7\xA5\xA0\xB4\xA8\x00\x29\x18\xB2\x6A\x0A\xE6\x94\xB9\x43\x0A\xA3\x9C\x4C\xAE\xB8\xCC\x9D\xB2\xB6\xBC\xD9\x93\xBF\xAC\xBD\xDC\xA8\x9D\x09\xBA\xF7\x9F\xB3\xBE\xBF\xF5\x83\x4E\x08\xBF\xC3\xB8\xBA\xBA\x41\x2F\x04\xC5\x48\x0C\xB4\x95\xBB\x86\x0C\x0A\xCE\xCA\xB6\xC4\xF6\x85\xC8\x9B\x0C\x11\xD3\xCA\xC5\xC5\xDB\xA6\x64\x0D\xC6\x1C\xD4\xC6\xC1\xBF\x8D\xB5\x00\xCB\xC8\x16\xE1\xB8\x6A\x0D\x27\xC0\xC2\x6B\x0D\x2D\xC1\x48\x0D\xCC\xE3\xB9\x03\xAA\x0E\x34\xF1\xBE\xCB\xC1\x28\xDD\xC4\xC8\x00\x3B\x34\xCC\x0D\xCE\xED\x7D\x04\xD3\xBF\x2A\xC1\xCB\xCF\xCF\x3A\xC1\x4E\x0F\xD1\x4A\xC9\xD9\xBE\xD4\x3C\xCB\xDA\x73\x0F\x34\xC0\x10\xD6\x68\x41\x23\xA2\x13\xD6\x55\xD4\xDC\xD0\xBC\x64\xC8\xD3\xB9\xD3\x67\xED\x73\x10\xCD\x71\x0D\xCF\xBA\x4A\xB6\x6B\x56\x4D\xAD\x3A\x40\x7F\x69\x65\x36",
			"\x77\xD9\x73\xDC\x75\xD5\x6A\xDC\x70\x7C\xC9\x44\xDE\xDD\x49\x79\xD5\xE1\x4B\x83\xC1\x48\x70\xE1\x72\xED\x4F\xDD\x77\x81\xFD\xDD\x77\xE3\xEE\x51\xE3\x41\xE2\xEE\x54\xE6\x4E\xE1\x8D\xEA\x48\xE7\xE2\xDD\x71\xD8\xDE\xE3\x87\xDE\xE2\xE4\xE3\xA3\xE6\xEF\xDB\x49\xB2\x5D\xE7\x4A\xE8\x7B\xED\x4D\xE9\xEA\xAF\xE5\xE7\x4A\xE6\x9B\xEA\x48\xED\xEE\x23\x58\xE5\x5F\xEE\xBC\xE1\x48\xE4\xE6\x9C\xF4\xE3\x48\xF0\xC1\xDF\xE9\x53\xEC\xB1\xF0\xD6\xEF\x48\xCC\xC0\xED\x48\xEC\xD2\xEA\xE1\x61\x52\xC8\xFC\xE9\xF5\xEE\xBE\xC9\x58\xE6\x60\x6B\x5B\xFB\xE7\xF0\xDE\xCA\x40\xFA\xDF\xCF\xE2\x42\xFA\xE5\x02\x60\xEE\x78\x42\xD7\xEB\x54\xF4\xE4\x88\xEE\xD8\xFA\xEB\xC7\xE9\xF2\xF3\xE9\x93\xFA\xFF\x3C\xF9\xE1\x7E\x7F\xFA\x75\x7B\x75\xDE\x76\x79\x39\x03\x96\x7A\xE4\x6C\x71\x20\xE2\x44\x81\x2E\xD8\x7E\x7E\xF2\x72\x72\x83\x03\xA8\x75\x79\x27\x3D\x7B\x5A\x00\x87\x7E\xE3\x62\x23\x82\x95\x33\x7D\xE5\x24\x78\x7F\x0F\xBC\x7E\x3D\x1C\x89\x39\x0A\x97\x85\x7B\x0C\x8B\x48\x7E\x97\x71\x81\x09\xA1\x29\x80\x17\xBC\x7D\x78\x18\x86\x82\xE0\x32\x8E\x82\x1A\x95\x85",
			"\x80\xEA\x7F\x87\xE9\x0C\x80\x00\x07\xBA\x72\x88\x03\x2E\x7C\x0E\xAD\x89\x7F\x19\xBF\x7F\x84\x4B\x94\x7E\x02\x82\x26\x89\xDB\x42\x80\x89\xED\x69\x28\x0C\xFD\x66\x27\x2D\xB5\x6D\x8B\x16\x9D\x3A\x17\x80\x0A\x89\x96\x23\x8D\x8A\x23\x27\x8E\x16\xAF\x8B\x49\x2C\x27\x86\x7D\x1A\x91\x7F\xE9\x6E\x74\x73\xE8\x4A\x71\x8C\x00\x16\x8C\x00\x67\x73\x20\x3D\xB4\x88\x8F\x94\x70\x8E\xF9\x57\x34\x72\x11\x82\x91\x21\x22\x9C\x8E\x40\x06\x9A\x20\xCA\x7C\x31\x21\xC3\x3B\x50\xE6\x11\x92\x8F\x81\x14\x91\x89\x8D\x8D\x22\x42\x6A\x89\x20\xE3\x03\x21\x3A\x9D\x8A\x22\x75\x09\x2F\x90\x83\x1E\x97\x20\x99\x86\x3D\x42\x70\x3B\x86\x55\x86\x26\x3F\xA4\x8A\x20\x44\x2B\x99\x94\x83\x1C\x96\x20\xA0\x86\x23\x28\x86\x25\x95\x81\x23\x8C\x72\x0A\x52\x92\x42\x41\x95\x92\x81\x04\x98\x93\x09\x34\x70\x2B\x90\x89\x20\x58\xBC\x92\x21\xCB\x8E\x35\x44\x57\x38\x72\x0C\x45\x99\x20\xD6\x88\x9A\x41\x14\x7D\x43\x84\x0A\x91\x20\xBD\x87\x87\x40\x69\x04\x9B\x61\xA7\x87\x9B\xE3\x4E\x7D\x2E\x92\x78\x9C\xF4\x22\x86\x99\xEC\x9B\x41\x49\x3B\x91\x9F\x2C\x68\x99\x9C\xE2\x81",
			"\x22\x1A\x57\x38\x9C\x11\x79\x99\x50\xF8\x80\x03\x94\x7F\x93\x21\x35\x3C\x9A\x21\x4E\x44\xA2\x40\x6C\x07\x3B\x4B\x82\x23\x50\xFC\x65\x8C\x6A\x18\x75\x5C\x85\x81\x25\x0D\xD7\x22\x87\xB5\x16\xA3\x5C\x3D\x90\x59\xA2\x1B\x47\x95\x40\x33\x50\xA5\x2C\x58\x71\x06\x1C\xA0\x02\x1B\x57\x3A\x8F\x81\x65\xA1\x50\xE8\x8C\x5C\x47\xEF\x07\xA1\x84\x0C\x64\xA3\x70\x17\x38\x11\x67\x92\x9F\x37\xA2\x64\x8A\xA3\x5B\x24\xCD\x68\x98\x8C\xD3\x3E\x61\x65\x00\x05\x91\x4F\xAD\x97\x39\x9F\x81\x22\x84\x22\x88\x3D\x49\x68\x9D\x9D\xF6\x13\xAA\x21\x22\x8E\xA1\xA3\x47\xAB\x4A\x11\x8B\x51\x4B\x25\x22\x85\x51\xD4\x34\xA8\xAC\x83\x90\xAC\x0A\x3A\xAB\x1E\x9B\x4A\x8F\x7B\xA6\xA8\xAD\x09\x2B\x9E\x40\x55\xA8\x34\xB5\xAE\xA8\x92\x4B\xA1\x65\x96\x01\xAF\xAB\x40\x65\x21\x9A\x40\xB9\x4A\x5C\x8D\x8A\x21\x80\xB4\xAA\x35\x25\x27\x9B\x5C\x9B\x43\x97\x6B\x80\x02\xAD\x7A\x92\xAA\x42\x7E\x9D\xA9\x8D\x45\x3F\xAD\x7E\xB3\x20\x1E\xE8\x3A\xB1\x3B\xA1\x96\x9B\x79\xA9\x4B\x66\xED\x39\x9B\x2C\xB1\xAB\x93\xA1\xB2\x4B\x68\xE6\x64\x9E\x54\xB0\xAE\x20\x70\x4C\xA9\xCF\x32",
			"\x98\xB3\x4E\x65\x20\xA2\x8E\xA8\x3D\x37\xCC\x96\x21\xC6\x83\x25\xAF\xB6\xB7\x23\x6A\xAA\x30\x47\xCA\xBD\xB7\xAC\x99\xA9\x20\xAC\x20\xB9\x4A\x1E\x72\xB2\x20\xF0\x82\x20\x60\xDB\xAA\x21\x5C\x4F\xBA\x6C\xCA\x3D\xB0\x00\x53\xB3\x5D\x92\x26\x03\xB8\x53\x60\x01\x69\xCF\xA9\xB5\x80\x1B\xA3\x9B\x1B\x49\xA2\x63\xE3\xB0\x00\xE0\xA8\x4D\x24\xEE\x59\xB5\x7B\x31\xBC\xB7\x81\x2C\xBF\xB0\xA2\x25\x25\xC2\x49\x9B\x42\xDC\x83\x25\x9F\x0A\x3B\xB5\x70\x89\x28\x63\xEB\xA9\x68\x35\xC5\xA3\x22\x75\xC9\xB6\x20\x93\x40\x8C\x3A\x9A\x46\xBA\x68\x88\x95\xBC\x00\x2C\x64\xB9\x81\x42\x54\x86\x93\xC6\x20\xF7\x94\xB9\x21\x36\x66\xC0\x7A\x23\x08\x8E\x25\x5B\xC7\xBD\x0A\x21\x6B\x89\x8D\x5B\x56\xC7\xAA\xBB\x20\xCE\xAC\xC3\x6C\xD9\x43\xA0\x83\x26\xC2\xC6\x56\x7B\x4B\x97\x1D\xC5\xC3\xA7\x4F\xC0\xA9\x7F\x54\xC3\x6B\x83\x28\x6A\x11\xED\x3F\xBC\xFF\xAA\x21\x90\xBC\xC3\xC8\x81\x1D\x6F\xC7\x25\x32\xA5\x7D\x82\x2B\xC8\x05\xD5\xC7\x6B\x50\xCA\x23\xBE\x2B\xC0\x01\x2A\xCB\xB5\xC9\x01\x2B\x6E\x91\xA8\x37\xA6\xC7\xBE\xBA\x20\xF4\xA3\xC2\x41\x45\x04\x66\x44",
			"\x49\x26\xCB\x1F\xDA\xAD\xA0\x1E\xC0\x00\x37\xF8\xC0\xBB\x5B\x51\xC2\x95\xE0\xC0\x00\x23\x34\x63\xB9\x06\x31\xAA\x55\x8A\x27\x08\xF0\xA6\x35\xC0\x8E\xA0\xD3\x9E\xF7\xC0\x01\x24\x23\x57\xC2\x89\xC8\xBA\x9A\x83\x2A\x08\x43\xD4\x39\xC4\x8E\xA4\xA6\x41\x1A\xCC\xD0\x26\x34\x64\xC4\xCA\xB5\xC0\xDA\x68\x3B\xC1\x81\x20\xD4\xD1\xA3\xCD\x3D\x8B\xB5\x35\xC3\x26\x16\xD2\x39\x43\x66\xC3\xAA\x8A\x55\xC3\x27\x23\x56\xC7\x12\xC2\x23\xAC\x81\x25\xD4\x14\xC9\x20\x0A\xA3\x45\xCB\x94\x81\x2B\xD7\xB5\xBC\xC9\x0A\xAF\xC5\x27\x93\xC3\xD0\x01\x8F\x86\x27\xBB\x7C\xC9\xD4\x6A\x48\xC2\x20\x68\xCC\xD3\x0A\x34\x75\xA3\xB3\xA2\xD5\x6C\xD5\x1A\xDB\x20\xE8\x51\xD9\xB7\xE7\x55\xB6\x5F\xC6\x24\x0A\x92\xC8\x4E\x98\x8E\xB1\xDC\x26\xCC\xD7\x0A\xC9\xCA\x22\x9F\x86\xCD\xDD\x24\xFC\xCE\x8D\x5C\xC8\x3C\x12\x69\xD1\x20\x29\xC3\x26\xDA\x93\xD9\xC7\x86\x71\xBC\xD4\x3E\xDC\x09\xDE\x09\x2B\x08\x1E\x84\xE2\x21\x5E\xF1\xCB\x20\x5E\x03\x56\xAB\x86\xCC\xE1\x80\x38\xBE\xA8\x0A\x3F\x08\xC2\x86\x26\xD6\x03\xEE\xA6\x20\x5B\xC8\xD7\xB8\xA6\x3B\xBF\x40\xD5\xC1\x0C",
			"\xFC\xC3\x5C\xB2\xDC\xC5\xE5\xDF\x95\xC4\x0C\x1B\xE3\x20\xBA\x86\xCD\xE5\x2F\xCC\xD6\x0C\x29\xE8\x3E\x15\x29\xE5\xCD\x81\x21\xE1\xE0\x78\xDB\x40\x4A\x89\x25\xE7\x87\xC2\xE1\x4B\x10\x77\x86\x55\x9B\x79\xA5\xBE\x52\xA2\x26\x4F\xE7\x26\xFB\x3A\x23\xEA\xA1\xA7\x83\xAC\x2E\x38\xEB\x13\x9B\x55\x88\x71\x97\xE4\x24\x5F\xE1\x24\x3A\xD3\xE8\x9C\x9D\x22\x79\xA9\x85\x74\x72\x4E\x11\xB9\x26\xB6\xF2\x72\x9C\x7A\x8B\xEE\x38\x82\xD0\x26\xBA\xCE\x7F\x84\x22\x9A\x25\xDE\xE1\xA2\x9D\x80\x92\x2E\xEF\x36\x21\xA2\x4E\x02\xFB\x37\xBE\xE2\x9A\xAD\x52\x28\xF2\x4D\x6A\xAE\x76\xB5\x93\xEA\xAD\x3A\x30\xF1\x49\x12\xFA\x92\xBA\x22\xA5\x72\x97\xF3\xEB\xE5\xBA\x2B\xF3\x92\x1D\xF7\x84",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"OtherStat",
			L"Stat",
			L"Module",
			L"IfTail_SWITCH_COMBINED",
			L"If_SWITCH_1allow_half_if",
			L"If_SWITCH_0allow_half_if",
			L"IfTail_SWITCH_1allow_half_if",
			L"IfTail_SWITCH_0allow_half_if",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][OtherStat] BEGIN ",
			L"[10][OtherStat] END [ENDING]",
			L"[11][OtherStat]<< !Block @ >>",
			L"[12][OtherStat]<< !Do @ >>",
			L"[13][Stat] BEGIN ",
			L"[14][Stat] END [ENDING]",
			L"[15][Stat]<< !If_SWITCH_1allow_half_if @ >>",
			L"[16][Stat]<< !OtherStat @ >>",
			L"[17][Module] BEGIN ",
			L"[18][Module] END [ENDING]",
			L"[19][Module]< Stat @ >",
			L"[20][IfTail_SWITCH_COMBINED] BEGIN ",
			L"[21][IfTail_SWITCH_COMBINED] END [ENDING]",
			L"[22][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if \"else\" @ Stat",
			L"[23][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if \"else\" Stat @",
			L"[24][IfTail_SWITCH_COMBINED]If_SWITCH_0allow_half_if @ \"else\" Stat",
			L"[25][If_SWITCH_1allow_half_if] BEGIN ",
			L"[26][If_SWITCH_1allow_half_if] END [ENDING]",
			L"[27][If_SWITCH_1allow_half_if]< \"if\" \"cond\" \"then\" @ IfTail_SWITCH_1allow_half_if >",
			L"[28][If_SWITCH_1allow_half_if]< \"if\" \"cond\" \"then\" IfTail_SWITCH_1allow_half_if @ >",
			L"[29][If_SWITCH_1allow_half_if]< \"if\" \"cond\" @ \"then\" IfTail_SWITCH_1allow_half_if >",
			L"[30][If_SWITCH_1allow_half_if]< \"if\" @ \"cond\" \"then\" IfTail_SWITCH_1allow_half_if >",
			L"[31][If_SWITCH_0allow_half_if] BEGIN ",
			L"[32][If_SWITCH_0allow_half_if] END [ENDING]",
			L"[33][If_SWITCH_0allow_half_if]< \"if\" \"cond\" \"then\" @ IfTail_SWITCH_0allow_half_if >",
			L"[34][If_SWITCH_0allow_half_if]< \"if\" \"cond\" \"then\" IfTail_SWITCH_0allow_half_if @ >",
			L"[35][If_SWITCH_0allow_half_if]< \"if\" \"cond\" @ \"then\" IfTail_SWITCH_0allow_half_if >",
			L"[36][If_SWITCH_0allow_half_if]< \"if\" @ \"cond\" \"then\" IfTail_SWITCH_0allow_half_if >",
			L"[37][IfTail_SWITCH_1allow_half_if] BEGIN ",
			L"[38][IfTail_SWITCH_1allow_half_if] END [ENDING]",
			L"[39][IfTail_SWITCH_1allow_half_if]IfTail_SWITCH_COMBINED @",
			L"[40][IfTail_SWITCH_1allow_half_if]If_SWITCH_1allow_half_if @",
			L"[41][IfTail_SWITCH_1allow_half_if]OtherStat @ [ \"else\" Stat ]",
			L"[42][IfTail_SWITCH_1allow_half_if]OtherStat [ \"else\" @ Stat ]",
			L"[43][IfTail_SWITCH_1allow_half_if]OtherStat [ \"else\" Stat @ ]",
			L"[44][IfTail_SWITCH_0allow_half_if] BEGIN ",
			L"[45][IfTail_SWITCH_0allow_half_if] END [ENDING]",
			L"[46][IfTail_SWITCH_0allow_half_if]IfTail_SWITCH_COMBINED @",
			L"[47][IfTail_SWITCH_0allow_half_if]OtherStat \"else\" @ Stat",
			L"[48][IfTail_SWITCH_0allow_half_if]OtherStat \"else\" Stat @",
			L"[49][IfTail_SWITCH_0allow_half_if]OtherStat @ \"else\" Stat",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
