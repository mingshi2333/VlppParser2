/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitchModuleParser.h"

namespace ifelseswitch
{
	void IfElseSwitchModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1813; // 15780 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 21;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\xA4\x3D\x00\x00\x0D\x07\x00\x00\x09\x00\x01\x82\x80\x07\x03\x82\x81\x82\x06\x89\x82\x84\x0A\x80\x81\x84\x09\x0A\x98\x0A\x9C\x0A\x80\x12\x85\x40\x01\x09\xBF\x7B\x8C\x8B\x8E\x84\x00\x1D\x9D\x9F\x81\x9C\x8B\x90\x93\x7F\x26\xA4\xA9\x81\x9B\x92\x92\x85\x93\x28\xAF\xA7\x9F\x8F\x89\x8E\x8D\x99\x32\xAA\xB9\x8C\x9B\x9E\x97\x9A\x9D\x3F\xBC\x81\xBE\x96\x80\x99\x97\x92\x3D\xC8\x83\xAA\xA5\xA0\x9D\x84\x9B\x06\xD0\x83\x86\xA9\xA6\x8D\xAB\x98\x4B\xD6\x99\xB8\xAD\xA0\xA1\xAE\xA1\x5F\xC4\x93\xAE\xA1\xB4\xA7\xB0\xAF\x67\xE0\xA9\xA2\xB2\x84\xA9\x84\x01\x0A\xD2\xAD\xA4\xBB\xB6\xB3\xB8\xB4\x77\xEA\xB9\xAC\xB1\x86\xB5\xB2\xAD\x7F\xDC\x83\x83\x01\xBF\xAB\xA2\xC0\x75\x88\xFB\xB6\xBD\xBC\xBB\xC4\xC5\x8D\xF8\x91\xDA\xB3\xCC\xBC\x90\xC7\x95\x8C\xD7\xD2\xCB\xCC\xC9\xCE\xCB\x7E\x89\xC2\xCF\xC3\xD1\xCC\xC9\xCF\x9A\xA1\xE4\xDF\x8C\x87\xA6\x85\x02\x85\xDB\x9F\x86\x01\xD9\xC3\xC3\xD2\xA8\xA7\xC8\x91\xA6\xC5\xDE\xD8\x85\x08\x35\xC3\x8E\x8C\xDF\xDD\x84\x05\xC2\xAB\xFE\xD6\xDA\x83\x05\xE4\xD3\xB8\x8C\x0F\xF9\xD8\xDA\xD4\xE9\xDB\xD8\xCB\xE2\xD9",
			"\xE6\xE4\xE5\xEF\xED\x0A\x8D\x13\xF6\xE4\xEF\x8E\x06\x85\x70\xDF\xCA\xEA\xF1\x80\x0B\xF0\xCC\xE5\xDA\xEB\xFE\xE4\xF8\xF0\xF7\xF8\xF7\xE4\xFA\xF0\xFB\xFC\xCD\xFE\xCF\xFF\x60\x60\x7D\x04\xEF\x7E\x7C\x7F\x81\x9C\x50\x4E\x69\x7E\xF0\x53\x05\x80\x80\x08\x9E\x64\x07\x83\x96\x55\x04\x85\x6A\x11\x82\x86\x83\x86\x10\x9C\x8A\x85\x87\x9E\x56\x07\x87\x69\x01\x98\x8E\x86\x89\x20\x9F\x8A\x88\x8A\x2B\xA4\x80\x7F\x05\x23\x95\x70\x7E\x44\x0B\xB5\x73\x7E\x7D\x06\x59\x01\x8F\x47\x1A\x3B\x82\x7F\x75\x3F\xB8\x76\x8C\x90\x0C\xA7\x87\x6B\x06\x3E\x85\x99\x88\x8B\x4C\xAE\x8C\x64\x45\x35\xB8\x82\x97\x8D\x54\x84\x93\x92\x90\x03\x5D\x09\x93\x95\x25\x8E\x9B\x92\x97\x2D\xB2\x86\x92\x98\x5F\xA4\x91\x98\x77\x5C\x99\x8A\x66\x07\x5B\x93\x91\x43\x07\xE8\x41\x9D\x94\x6E\x21\x2D\x92\x42\x08\x76\x96\x9E\x98\x96\x55\xBC\x9A\x9D\x9F\x73\xA8\x9B\x9D\xA0\x72\xAA\x97\x6B\x08\x79\xBE\x9A\xA0\xA1\x4A\xA7\x91\x90\x09\x89\x8C\xA9\x9B\x98\x1F\x65\x01\xA6\xA1\x66\x8D\x99\xA7\x69\x26\x17\xA4\xA5\xA1\x9F\x8D\xAA\xA6\xA0\x80\xB0\x77\x0A\xA7\x65\xA4\xAF\x9F\xAA",
			"\x8B\x98\xAA\xA8\x00\x28\x28\xAE\xA2\xA8\x60\xA3\xA0\xA9\xAA\xB7\x96\x69\x0A\xAC\x9A\x6A\x0C\xAD\xAD\xA7\x6B\x0F\xAF\xA6\xC4\xAF\xA2\xA7\xA0\xAE\xB9\xAA\x64\x0B\xC3\x86\xB9\xB0\xAD\xC5\x8A\xB7\x69\x0B\xCD\x92\xB1\xB4\xB4\xCE\xA1\xA3\xA6\x67\x2E\x15\xB9\x43\x0B\xDE\x97\x90\x0D\xB8\xC8\x9A\xB5\xB8\xAE\xD8\x96\xBF\x45\x0C\xE4\xA5\xA6\xBA\xBB\xE8\x9B\xB6\x66\x16\x71\x91\x94\x68\x6D\x5B\x70\x49\x78\x4D\xA2\x6D\x61\x60\x4C\xFE\xA2\x6A\xBC\xBF\x81\x41\xC4\x6B\xC0\x6F\x57\x56\xC0\x74\x00\xD7\x58\xC1\x71\x05\xCE\xC7\x4B\xC2\xD4\x4F\xC4\xC0\x75\x14\xF0\x46\xC6\x40\xFB\xBD\xB2\xC4\x49\x19\xDA\xC4\x49\xC7\x02\x72\x50\x74\xBE\xFF\x93\xCF\xC5\x48\x24\xFC\xBB\xC5\x40\x2D\xD4\x71\xCD\xCC\x0D\xF9\xB7\x49\xCC\x26\xD8\xCB\xC9\x47\x21\xE2\xCD\x45\xCC\xB7\x7D\xCE\xCF\x46\x33\xCA\xCB\xCC\x47\x42\xC3\xD8\xCE\xD1\x36\xE0\xC7\xD0\xD1\x17\xE4\x69\xD2\xCF\x45\xDB\x53\xD6\xC8\x57\xDA\xCB\xD3\x56\x55\xD1\xCD\xD0\xCB\x51\xD0\x7D\xD6\x68\x63\xD2\xDF\xD3\x3F\x5B\xC1\x68\xCA\xC0\x2A\xDF\xDF\xCD\xD8\x3A\xEE\xDC\x45\xDA\xA2\x6B\xD7\xC3\x49\x76",
			"\xCC\xCD\xD9\xCA\x4E\xF2\xD0\xD5\xD8\x35\xFC\xD0\xD9\xC2\x56\xE7\xD9\xD7\xCB\x00\x39\xC0\x4D\xDE\x15\xF8\xD7\xD9\xCC\x84\x45\xEE\xDF\x3F\x87\xF7\xC0\xDC\xE2\x91\xDE\xD2\xE3\xDB\x84\xC1\x60\xE4\xD3\x9B\xC8\xDF\xE1\x8C\x8C\xC3\xDD\x44\x72\x80\xE7\x40\x6F\xE4\xAB\xE1\xEB\x45\xEB\x6C\xE4\x40\xEF\xDD\x24\x68\xE1\xD4\x4C\xB6\xC3\x44\xCF\x49\xB9\xDC\xC7\x55\xEF\x30\xFF\xE1\x8C\xF0\x89\xC2\xF9\x41\xE6\xA2\x74\x87\xEF\x49\x39\xF0\xD4\x75\xF3\x97\xD6\xE1\xD8\xC5\x1F\x41\x7B\x54\xF2\xF0\x9D\x40\xF5\xEA\x24\x5B\xF6\x40\xF5\xC0\x56\xB0\xD2\x42\xE0\xC9\x46\xF6\xBC\x1C\x5E\xF3\x62\xB5\xEA\xC2\x4F\x0C\xDC\x39\xE3\xF7\xF0\xFC\xE4\xEF\x63\x75\xCC\xB3\xC1\x48\xF5\x40\xF9\xC5\xF9\x40\xC5\x8C\x71\x67\x6E\x03\x27\x7D\x81\x0C\x74\x62\xC4\x23\x21\xFC\x0D\x2A\x21\xFD\x40\x01\x81\x25\x75\x7F\x71\x77\x7A\x20\xE2\x4E\x84\x78\x39\x74\x62\x73\x09\x21\x81\xE6\x0A\x23\x80\x02\x3B\x82\x41\x05\x81\x84\x85\x07\x85\x5E\xDF\x74\x83\xFC\x76\x51\x20\x8A\x52\x3C\x85\x00\x11\x67\x0B\x86\x2E\x81\x19\x8A\x82\x82\x06\x22\x3D\x42\x7D\x70\x84\xE7\x41\x26",
			"\x09\xD3\x34\x60\x9C\x61\x6E\x81\x27\x13\x39\x67\x3D\x44\x8A\x42\x50\x03\x3A\x07\xAC\x4A\x89\x09\x31\x0B\x74\x1F\x28\x48\x28\x86\x22\x0A\xD3\x3C\x86\x0F\x89\x23\x0B\x20\x8A\x24\x40\x5B\x83\x20\x15\x4D\x8E\x83\x30\x82\x25\x0A\x64\x89\x23\x79\x66\x81\x20\x2B\x19\x89\x3C\x6C\x81\x23\x15\x6F\x89\x20\xF7\x31\x88\x0B\x2A\x86\x22\x85\x61\x6A\x70\xF8\x3D\x78\x4F\x71\x99\x0B\x74\x32\x00\x6E\x07\xA4\x3F\x55\x35\x2A\x5C\x0A\xB7\x87\x3F\x57\x79\x65\x8F\xEF\x5A\x7F\x22\xFD\x49\x5B\x78\x7B\x48\x80\x41\x4F\x54\xDD\x59\x7A\x32\xC6\x65\x70\x3E\xAF\x4E\x82\x21\xA0\x9D\x80\x13\xA1\x7D\x91\x8A\x89\x5C\x07\x8A\x20\x46\x54\xA1\x69\x66\x1D\x97\x3E\x03\xB0\x95\x94\x57\x97\x4C\x84\x92\x97\x3D\xFF\x0E\x8D\x86\x00\x1F\x94\x33\xAF\x42\x87\xFA\x77\x38\x96\x00\x3C\x97\x94\x57\x55\x93\xAC\x57\x4D\x97\x56\x89\x9B\x92\xC1\x6A\x8C\x34\x8A\x52\x98\xDF\x49\x25\x97\xA3\x80\x99\x90\x76\x84\x87\x20\x7A\x85\x9B\xE6\x76\x7E\x2D\xFB\x4E\x40\x18\x87\x5A\x20\x10\x81\x23\x2F\x9E\x3F\x55\x09\x5D\x73\x4F\xDC\x9A\x74\x03\x89\x2E\x99\x3D\x6C\x33\x9A\x22\x46",
			"\x9C\x7C\x0A\x40\x63\xE1\x2C\x91\x93\xA6\x8F\x9E\x40\x75\x91\x83\xFB\x25\x9D\x9F\xE8\x95\x97\x33\xF7\x3A\x78\x79\xB7\x3E\x9D\x06\x31\x65\x35\x81\x26\x86\x4A\x88\x9C\x91\xE8\x60\x59\x74\x01\xAB\xA1\x2B\x49\x88\x9C\x57\x59\x9C\x48\x83\x25\xA3\x80\x04\xA4\x55\x1F\x29\x9D\x0C\x8A\x2A\x4A\x81\xAC\x52\x47\x2E\xA0\x01\x49\xC6\x90\xA1\xFB\x03\x8B\xA4\x7D\x55\x88\x4E\x81\x2F\x9B\x81\x04\x7F\x90\xA9\x99\xA0\x6E\x6B\x86\x21\x9F\xA4\x92\x95\x42\xBF\x23\x03\x1C\xA6\x9F\x20\x40\x93\xA7\x8A\x4F\x88\x54\xCB\xA4\x9F\x9A\x86\x23\xA2\x2B\xA9\x22\xA5\x31\xA4\x3D\x3A\x71\xA4\xAA\x50\xA0\xAB\x7D\x27\x5B\x85\x2B\x48\x55\xAC\x03\x31\x9E\x40\x46\xAA\x9A\xA4\xA7\x5E\x32\x60\x85\xAA\x55\x83\x2D\xA6\x6B\x89\xA9\x48\x71\xA3\x20\x58\xCD\xAE\xAC\x4E\xA7\x34\x9F\x03\x27\xA6\xA2\x2F\x5E\x56\x7D\x91\x90\x00\x10\xA6\x83\x5C\xFD\x42\x58\xAE\xB0\x3D\x53\x68\xA2\x21\x62\x83\xAB\xB1\x80\x3B\xAE\xAE\x03\x34\x5A\x61\x9E\x3B\x57\x98\x93\xB6\xA4\x95\xA0\x01\x5E\x98\xB2\x21\x6E\x5B\xB6\x32\x8D\xB1\xA2\x42\x1F\xB4\xA7\x71\xBD\x48\x5C\x8E\xBC\x32\x66\xD0",
			"\xAB\x8E\x83\x07\xA4\xAF\x57\x4C\x5F\x69\xB6\x59\x20\x91\x83\x24\xB5\x62\xB7\xAD\x5F\xA0\xBD\xB7\xD0\xA7\x9C\x55\xE4\x2D\xA2\x40\x6B\x96\x33\x57\x44\x91\xB6\x9E\x23\x5C\x0C\xCA\xB9\x97\x8E\xBB\x4C\x06\xD3\x84\x3E\x6E\x88\xA1\x21\x8F\x83\x20\xA6\xD6\xBD\x4E\x0D\x6D\x51\x20\x9D\x9F\xBE\xB8\xF0\x37\x04\x79\x80\x00\x4A\x83\x0C\xBA\x33\xAF\x58\x06\x42\xFB\x4F\xB8\xD5\x89\x25\xBD\x81\xA1\xB7\x6D\xA4\xB1\x21\x1D\x19\xB8\x3E\xD8\xB0\x84\x7E\x82\x29\x9A\x76\x81\x4D\x07\xF3\xBD\x4D\x0D\x53\x92\xAB\x2C\x61\xB5\xB6\x18\xA3\x20\x10\x6B\xB7\xA6\x07\xEE\xB4\x55\x41\x0B\xBE\x45\x2B\x97\xC2\x45\x42\x08\x87\x7B\x4A\xBD\x64\x81\x2B\xC2\x83\x02\xB1\xB8\x03\x3E\xB4\x7F\x80\x06\x09\x04\xEC\x52\x07\xD3\x85\xC7\x30\xE1\xBC\x55\x24\x20\xC5\x4F\x3C\x0E\xC4\x00\x4F\xA3\x20\xAF\xB4\xC2\x51\x4D\x0B\xBF\x59\xCB\x70\x98\x8D\x71\x8F\x62\x90\x8C\x25\x92\xA1\x2D\x7D\x82\xBC\x8E\x79\xBB\x6A\x25\x94\xA3\x63\x8B\x4D\xAB\xC5\x79\x65\x6B\xC4\x4D\x72\x71\xA6\x9A\x05\xC2\x24\x5F\xDD\x22\x03\xDE\xCE\x79\x31\xDF\x26\xCC\x37\xD7\x3B\xE1\x14\x6D\x79\xF2",
			"\x7B\x86\x30\xFD\x7A\x61\xFF\x4D\x7D\x7E\x9A\x2F\xBE\x23\x77\xDB\x20\xE3\x3E\x8A\x70",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"Do",
			L"Block",
			L"IfTail",
			L"If",
			L"OtherStat",
			L"Stat",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][Do] BEGIN ",
			L"[1][Do] END [ENDING]",
			L"[2][Do]< \"do\" \";\" @ >",
			L"[3][Do]< \"do\" @ \";\" >",
			L"[4][Block] BEGIN ",
			L"[5][Block] END [ENDING]",
			L"[6][Block]< \"{\" @ { Stat } \"}\" >",
			L"[7][Block]< \"{\" { Stat @ } \"}\" >",
			L"[8][Block]< \"{\" { Stat } \"}\" @ >",
			L"[9][IfTail] BEGIN ",
			L"[10][IfTail] END [ENDING]",
			L"[11][IfTail]!(!0;If @) \"else\" Stat",
			L"[12][IfTail]!(!0;If) \"else\" @ Stat",
			L"[13][IfTail]!(!0;If) \"else\" Stat @",
			L"[14][IfTail]( ([0]? If @) )",
			L"[15][IfTail]OtherStat ( \"else\" @ Stat | ( ([0]? ) ) )",
			L"[16][IfTail]OtherStat ( \"else\" Stat @ | ( ([0]? ) ) )",
			L"[17][IfTail]OtherStat @ ( \"else\" Stat | ( ([0]? ) ) )",
			L"[18][If] BEGIN ",
			L"[19][If] END [ENDING]",
			L"[20][If]< \"if\" \"cond\" \"then\" @ IfTail >",
			L"[21][If]< \"if\" \"cond\" \"then\" IfTail @ >",
			L"[22][If]< \"if\" \"cond\" @ \"then\" IfTail >",
			L"[23][If]< \"if\" @ \"cond\" \"then\" IfTail >",
			L"[24][OtherStat] BEGIN ",
			L"[25][OtherStat] END [ENDING]",
			L"[26][OtherStat]<< !Block @ >>",
			L"[27][OtherStat]<< !Do @ >>",
			L"[28][Stat] BEGIN ",
			L"[29][Stat] END [ENDING]",
			L"[30][Stat]<< !(0;!If @) >>",
			L"[31][Stat]<< !OtherStat @ >>",
			L"[32][Module] BEGIN ",
			L"[33][Module] END [ENDING]",
			L"[34][Module]< Stat @ >",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"allow_half_if",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<IfElseSwitchTokens, ModuleParserStates, IfElseSwitchAstInsReceiver>(&IfElseSwitchTokenDeleter, &IfElseSwitchLexerData, &IfElseSwitchModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<ifelseswitch::Module, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<ifelseswitch::Module> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<ifelseswitch::Module, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
