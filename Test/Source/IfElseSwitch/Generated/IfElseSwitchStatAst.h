/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:StatAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_IFELSESWITCH_STATAST_AST
#define VCZH_PARSER2_UNITTEST_IFELSESWITCH_STATAST_AST

#include "../../../../Source/AstBase.h"
#include "../../../../Source/SyntaxBase.h"

namespace ifelseswitch
{
	class BlockStat;
	class DoStat;
	class IfStat;
	class Module;
	class Stat;

	class Stat abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<Stat>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(DoStat* node) = 0;
			virtual void Visit(IfStat* node) = 0;
			virtual void Visit(BlockStat* node) = 0;
		};

		virtual void Accept(Stat::IVisitor* visitor) = 0;

	};

	class DoStat : public Stat, vl::reflection::Description<DoStat>
	{
	public:

		void Accept(Stat::IVisitor* visitor) override;
	};

	class IfStat : public Stat, vl::reflection::Description<IfStat>
	{
	public:
		vl::Ptr<Stat> thenBranch;
		vl::Ptr<Stat> elseBranch;

		void Accept(Stat::IVisitor* visitor) override;
	};

	class BlockStat : public Stat, vl::reflection::Description<BlockStat>
	{
	public:
		vl::collections::List<vl::Ptr<Stat>> stats;

		void Accept(Stat::IVisitor* visitor) override;
	};

	class Module : public vl::glr::ParsingAstBase, vl::reflection::Description<Module>
	{
	public:
		vl::Ptr<Stat> stat;
	};
}
namespace vl::reflection::description
{
#ifndef VCZH_DEBUG_NO_REFLECTION
	DECL_TYPE_INFO(ifelseswitch::Stat)
	DECL_TYPE_INFO(ifelseswitch::Stat::IVisitor)
	DECL_TYPE_INFO(ifelseswitch::DoStat)
	DECL_TYPE_INFO(ifelseswitch::IfStat)
	DECL_TYPE_INFO(ifelseswitch::BlockStat)
	DECL_TYPE_INFO(ifelseswitch::Module)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

	BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(ifelseswitch::Stat::IVisitor)
		void Visit(ifelseswitch::DoStat* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(ifelseswitch::IfStat* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(ifelseswitch::BlockStat* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

	END_INTERFACE_PROXY(ifelseswitch::Stat::IVisitor)

#endif
#endif
	/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
	/// <returns>Returns true if this operation succeeded.</returns>
	extern bool IfElseSwitchStatAstLoadTypes();
}
#endif