/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:IfElseSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "IfElseSwitch_Assembler.h"

namespace ifelseswitch
{

/***********************************************************************
IfElseSwitchAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> IfElseSwitchAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = IfElseSwitchCppTypeName((IfElseSwitchClasses)type);
		switch((IfElseSwitchClasses)type)
		{
		case IfElseSwitchClasses::BlockStat:
			return new ifelseswitch::BlockStat();
		case IfElseSwitchClasses::DoStat:
			return new ifelseswitch::DoStat();
		case IfElseSwitchClasses::IfStat:
			return new ifelseswitch::IfStat();
		case IfElseSwitchClasses::Module:
			return new ifelseswitch::Module();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void IfElseSwitchAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = IfElseSwitchCppFieldName((IfElseSwitchFields)field);
		switch((IfElseSwitchFields)field)
		{
		case IfElseSwitchFields::BlockStat_stats:
			return vl::glr::AssemblerSetObjectField(&ifelseswitch::BlockStat::stats, object, field, value, cppFieldName);
		case IfElseSwitchFields::IfStat_elseBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseswitch::IfStat::elseBranch, object, field, value, cppFieldName);
		case IfElseSwitchFields::IfStat_thenBranch:
			return vl::glr::AssemblerSetObjectField(&ifelseswitch::IfStat::thenBranch, object, field, value, cppFieldName);
		case IfElseSwitchFields::Module_stat:
			return vl::glr::AssemblerSetObjectField(&ifelseswitch::Module::stat, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void IfElseSwitchAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = IfElseSwitchCppFieldName((IfElseSwitchFields)field);
		return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
	}

	void IfElseSwitchAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = IfElseSwitchCppFieldName((IfElseSwitchFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* IfElseSwitchTypeName(IfElseSwitchClasses type)
	{
		const wchar_t* results[] = {
			L"BlockStat",
			L"DoStat",
			L"IfStat",
			L"Module",
			L"Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElseSwitchCppTypeName(IfElseSwitchClasses type)
	{
		const wchar_t* results[] = {
			L"ifelseswitch::BlockStat",
			L"ifelseswitch::DoStat",
			L"ifelseswitch::IfStat",
			L"ifelseswitch::Module",
			L"ifelseswitch::Stat",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 5 ? results[index] : nullptr;
	}

	const wchar_t* IfElseSwitchFieldName(IfElseSwitchFields field)
	{
		const wchar_t* results[] = {
			L"BlockStat::stats",
			L"IfStat::elseBranch",
			L"IfStat::thenBranch",
			L"Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	const wchar_t* IfElseSwitchCppFieldName(IfElseSwitchFields field)
	{
		const wchar_t* results[] = {
			L"ifelseswitch::BlockStat::stats",
			L"ifelseswitch::IfStat::elseBranch",
			L"ifelseswitch::IfStat::thenBranch",
			L"ifelseswitch::Module::stat",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> IfElseSwitchAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = IfElseSwitchCppTypeName((IfElseSwitchClasses)type);
		return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
	}
}
