/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge1_Lri
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge1_LriModuleParser.h"

namespace prefixmerge1_lri
{
	void PrefixMerge1_LriModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3838; // 34412 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 254;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\x6C\x86\x00\x00\xF6\x0E\x00\x00\x08\x00\x01\x82\x80\x0B\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x81\x06\x85\x07\x0A\x94\x0A\x82\x1A\x87\x12\x85\x17\x0A\xB5\x0A\x9E\x1A\x81\x22\x84\x54\x02\x09\xBF\x63\x94\x93\x92\x84\x00\x25\xA5\xA7\x89\x94\x93\x94\x97\x7F\x2E\xAC\xB1\x89\x93\x9A\x96\x85\x97\x30\xA7\x8A\x81\x07\x9F\x95\x9B\x96\x3D\xB2\x81\xB4\x93\xA6\x9A\x90\x9F\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x06\xB8\xA7\x9C\x99\x84\xAA\x83\x90\x55\xC9\xA6\x9A\xA9\x9F\xA6\xA5\xA8\x48\xDE\x9B\xA2\xBD\xA8\xB0\xA6\xB3\x4E\xE8\x90\xA3\x82\xAC\xAF\x9F\xB1\x6A\xDF\xAC\xA1\xB1\xB8\xBB\xB9\xB3\x03\x83\x3B\x8E\xBA\x84\x03\xBD\x84\x05\x7F\xB5\xA5\xB7\xB9\xB5\xC3\xB5\x02\xED\xA4\xAF\xB4\xC1\xC4\xBB\xC3\x72\x8E\xF8\xB2\xC6\xC4\xC8\xC5\x80\x8A\x83\xE7\x8C\x89\xAB\xC4\xBE\xCF\xA0\x9A\xDF\xC2\xD1\xD0\xCA\xBA\xCB\x91\x98\xCF\xC8\xD7\xD1\x83\x02\xC1\xA6\x8D\xEA\xD3\xC3\xDD\xC9\xDB\xCB\x28\xAB\xF7\xC9\xD9\xDC\xD9\xDE\xDB\xBF\xB8\xD9\xD1\xD7\x90\x81\xCE\xD2\xC8\xC4\xE3\xCA\xE5\xD4\xD6\xD9\xE0\xBC\xC3\xCE\xEC\xC4\xEB\xE7\xE8\xEB\x01\x8E\x89\x98",
			"\xA9\xE7\xE9\xE7\xDD\xAD\xD0\xE1\xF2\xE0\xF7\xE4\xF2\xF1\xE6\xBA\xE8\xF5\xEF\xEB\xF4\xEC\xF7\xED\xE7\xF2\xEA\xF7\xF0\x86\x82\xAB\xCC\xDD\xE5\xEC\xFA\xF8\xF9\xFE\x06\x0A\x5C\x79\x7F\x80\xDE\x46\x4E\x00\x6C\x05\x84\x8B\x7F\x7B\xF3\x7E\x6D\x80\x70\xE7\x50\x47\x72\x82\xFE\x54\x8F\x82\x70\xF4\x59\x8E\x82\x86\x10\xAA\x70\x04\x82\x0B\xB1\x7C\x84\x86\x1B\xA5\x8D\x86\x89\x24\xA7\x8A\x89\x8A\x2C\x91\x73\x8A\x8B\xBE\x51\x00\x89\x85\x09\xB5\x81\x89\x7F\x17\xB0\x8B\x8A\x8E\x2D\xA3\x7A\x7A\x04\x33\xB9\x8E\x8C\x8A\x3C\x85\x93\x93\x8E\xE1\x53\x01\x93\x8B\x47\xBD\x89\x7A\x6F\x12\x53\x86\x8C\x8D\x37\x96\x8C\x93\x93\xC0\x55\x01\x83\x7B\x17\x0B\x94\x91\x93\x46\x98\x9E\x90\x7F\x56\x9F\x92\x99\x98\x64\x93\x98\x06\x97\x48\x8F\x79\x07\x96\xED\x5B\x0C\x9B\x98\x0C\x97\x99\x99\x95\x02\x5C\x00\x9D\x7F\x1E\x33\x9C\x6F\x07\x33\xA0\x0A\x42\x5E\x22\xA6\x97\x9C\x95\x88\x82\x97\x98\x98\x8C\x8F\x73\x0B\x8C\x24\x3E\x9D\xA3\xA1\x8A\xA7\x45\x0B\x8C\x26\x03\xA5\x9E\xA1\x9B\xAD\x94\xA6\x7A\x29\x33\x8A\x0A\xA6\x85\x9E\xAD\xA4\x9D\xA5\xA8\xAD\x7D\x0B",
			"\x92\x8B\xAE\xAB\xA7\x9C\xA9\xA8\x9B\xA9\xB3\xB2\xA1\x7A\x0B\xAD\xB0\xA6\xAA\xAD\xAF\xAF\x78\x46\x94\x78\x81\xB8\xA0\x0C\x33\xB1\x04\xA8\x8E\x76\xB4\xA3\xA6\xB2\xCF\x74\x03\x8E\x46\x09\x44\xA8\xB1\xAC\xD3\xBB\xA5\xB4\x6E\x38\x33\x89\x0F\xB1\x65\x96\xBD\xB6\xAA\xDF\xB5\xAD\x7C\x0F\xB9\x8C\xBA\xAC\x6E\x3D\x25\xBC\xAF\xB9\xE2\xA1\xBB\xB3\xBA\x1B\x6A\xB7\xB5\xBB\x53\x95\xA6\xBA\x42\x3F\x32\xBE\xB9\xAF\xF0\xBD\xBD\x7C\x10\xFA\xB5\xB9\xB2\xBF\xFB\xAC\xBF\xBA\x41\x1E\x40\xB9\xA3\xC0\xF3\xA1\x72\x11\xC0\xC2\xB6\xB4\xC2\xC0\xD4\x85\xC7\xBD\x42\x43\x33\x84\x10\xC4\x0B\xD5\xC2\x41\x11\x1C\xD2\xC6\x42\x11\x21\xCC\xC6\xC5\x42\x47\x1C\xC8\x13\x8C\x49\x25\xCE\xC5\xC4\x26\xD4\xCE\xB6\xCC\xB8\x4A\x13\x8F\x12\x2E\xF3\xC0\xCF\xCB\x88\x8C\x19\xCC\xB8\x34\xF4\xB2\xB1\x13\x33\x8E\x1F\xCE\xD0\x1D\xFA\xC9\xD0\xD0\xC2\x8F\x17\xD3\xC1\x27\xC6\x40\x17\xD3\xFC\x8D\xC5\xD5\xD4\x58\xC1\xD0\xD6\x40\x51\x14\xD6\xC3\xD5\x02\x52\x1C\xC7\x14\x33\x94\x1E\xD7\xC5\x56\xDF\xDA\xD8\xDA\x59\xC2\xB5\x17\xD9\x09\x56\x13\x8F\x15\x70\xE9\xDC\xDA\xD6\x60",
			"\xC2\xB8\x15\xDD\x14\x99\x1B\x9C\x85\x5B\x3C\xD8\xDF\xDA\x13\xFB\xCA\xD0\x17\x82\xC6\xEC\xD3\xD2\x48\xE7\x7D\x14\xC7\x5E\x09\xEC\xE1\x78\x5F\x12\xE0\x1A\xE4\x22\xED\xD3\xE5\xDE\x00\x21\x18\xE5\xCC\x8A\xCD\xE0\xE8\x00\x62\x1C\xC3\x1B\xDF\x83\xEF\x75\x1B\x8C\x66\x28\xE1\xE9\x78\x68\x1F\xEC\xCD\xE6\xA9\xED\x79\x18\xC7\x6A\x32\xE0\x73\x1A\x33\xAC\x1A\xEF\xE2\x6D\x3F\xE2\xEA\x6F\x6E\x02\xFB\xD7\xEB\x9C\xF4\xE8\xF3\x49\x6F\x06\xF9\xF3\xE8\xCA\xDB\xE4\xE2\xDD\xED\x70\x1E\xE8\xA2\x72\x0E\xF3\xF6\xE6\xD1\xD1\xF3\x1E\xF6\x77\xCB\xF1\xF8\x00\xA1\x38\x71\x42\x80\x02\x41\x6C\xAC\x4E\xDA\x46\x4D\xF9\x6C\xEA\xC3\x68\x4D\xFC\xB1\x78\x4F\x68\x59\x38\x68\xF1\x42\xB4\xB1\x46\x72\xFF\x4B\xEF\x6B\x20\xB3\x6C\x7A\x20\xFA\x4E\x3E\x80\xE5\x33\x7C\x57\x76\x7B\x81\x97\x3A\x78\x00\xFC\x6E\x3A\xFF\x75\x70\x80\x85\x1C\x33\x30\x11\x89\x82\x03\x85\x83\x81\x0A\x89\x21\x80\xE5\x3E\x2C\xFE\x2F\x28\x80\xF4\x39\x7D\x55\x0F\x86\x7D\x79\x19\x86\x85\x0D\x80\x35\x83\x2C\x20\x84\x00\x32\x87\x84\x85\x75\x87\x3E\x5C\x25\x84\x4E\x0A\x83\x84\x96\x2C\x83",
			"\x87\x24\x8D\x82\x0F\xC2\x89\x25\x1F\x80\x8D\x88\x44\x85\x26\x11\xC7\x84\x25\x25\x8C\x8F\x1F\x4E\x8C\x89\x14\xC7\x83\x8A\x20\x8F\x82\x87\x57\x44\x83\x07\xDC\x25\x8B\x1D\xA9\x84\x8B\x49\x84\x27\x17\xE4\x2D\x8A\x9C\x25\x8E\x85\x06\x38\x8A\x99\x5A\x8E\x7C\x30\xBD\x81\x25\x63\x98\x81\x18\xA3\x21\x8F\xD8\x27\x8B\x88\x6F\x85\x27\x15\xB0\x89\x24\x19\xB4\x87\x25\x77\x90\x8D\xAB\x01\x9A\x8F\x41\xB3\x88\x8A\x87\x9B\x8F\xFA\x1E\x8D\x8C\xB2\x2A\x8F\x89\x8F\x8C\x8B\xFD\x7F\x7C\x25\x07\x8F\x80\x27\x13\x8E\x38\x1B\x83\x22\x85\xC1\x11\x97\x88\x93\x94\x81\x25\x96\x8C\x2B\x4C\x9A\x81\x86\x0A\x2A\x01\x0E\x87\x91\x94\x4D\xA8\x8B\x20\x2A\x88\x3E\x29\xAD\x88\x95\xED\x2B\x91\x8F\x24\x3F\x90\x10\xAD\x97\x94\x41\xB6\x94\x2C\xB3\x8F\x88\x49\x32\x8D\x92\xF8\x6C\x91\x91\xA4\x80\x9B\x21\xB2\x8A\x94\x47\x87\x98\x97\x74\x8D\x55\x30\xC2\x9F\x1E\x19\x97\x91\x88\xD0\x9F\x1E\x2E\xBB\x8C\x96\x5A\xBE\x97\x2A\xA5\x8B\x99\x5F\x37\x94\x93\x94\x1D\x9C\x9A\xFF\x0F\x83\x05\xFD\x72\x9D\x84\x0D\x9E\x93\xCF\x85\x9D\x21\xB6\x8F\x25\x69\x82\x9E\x9A\xE4\x82",
			"\x95\x4A\x5B\x9C\x81\x6C\x96\x91\x9C\xD9\x84\x99\x3E\xAE\x9C\x25\x73\x94\x9A\x9D\x00\xB2\x9F\x30\xA9\x93\xA1\x5E\xA5\x26\xA0\xC2\x95\x8E\x04\xED\x90\x9C\x67\x99\x9C\x9F\x2F\x30\xA3\x13\xFF\x9A\x99\x80\xA3\x9E\xA2\x0A\xA3\x26\x46\xCC\x88\xA1\x8E\xA1\xA5\x9A\x0C\xA0\xA6\x3E\x8F\xA8\x98\x7A\xAC\x26\x9E\x4F\x98\x9C\x59\x23\xA7\x88\x8E\x83\x30\xA6\x4C\x82\xA3\x4C\xAD\xA6\x21\x75\x93\xA6\xA3\xEE\x9C\x28\x4D\xD6\x82\x9A\x8A\x83\x27\x9A\x78\x87\xA4\x21\xCD\x87\x91\xA5\x91\x9F\x85\x8B\x95\x95\x23\x83\x35\x98\x82\xBB\x9F\x90\x55\xAE\xA1\x2E\xCD\xAC\xAB\x6C\x8E\xA8\x91\x5E\xBD\xAB\x49\x8A\x96\x6B\x4D\x82\x27\x8F\x49\xAB\xA4\x53\xE1\xAC\xAC\xA5\xA2\xAA\xAD\x23\x3F\xAB\x57\xE4\xAB\x5E\xB3\x99\x3E\x8D\x6E\xAD\xAC\x5C\xE0\xA9\xAF\xBE\xBB\xAA\xAE\x3C\xA3\x23\x36\x8C\x36\xAF\x19\x8D\xA6\x9B\x25\x38\xA1\x41\x81\xBA\x27\xF2\x38\xA7\x88\x32\x91\x94\x0F\xA7\xAA\xB0\x73\x8C\xB5\xB1\x98\x86\xAA\x40\x12\xB0\x91\xB7\x96\xAA\x89\x9E\xBA\xA9\x5C\xA1\xB8\xB1\xB5\xBE\xAF\xB3\x62\x9C\x81\x54\xFD\x8D\x20\xBC\xBF\xAC\xB4\xE8\x80\xB2\x5E\xA8",
			"\xBF\xA9\x34\xBC\x8D\x24\x7E\x87\xB0\x3A\x95\xBC\xA4\x7F\x9F\xA7\xA6\x9A\xAE\x36\x6E\xD4\x9C\xB6\x92\x03\xAE\x8B\xBF\xAC\x9C\x50\x86\x27\xB8\xD9\xA7\xB2\xB4\xE9\x86\x92\x6F\xAE\xA8\x89\xD9\x90\xBC\xAE\x78\x65\xB0\x5A\xD7\xA7\xA3\x43\x85\xBA\xA4\xB0\xB4\x9A\x73\xFB\xAF\xB0\x20\x99\xAD\xB4\x23\x3F\xBB\x3F\x47\xB7\x87\xC6\x8E\xB1\xB8\x00\x1C\xB0\x4B\x6A\xBC\xBD\xCE\x96\xB8\xBD\x7C\xA4\xBC\x56\xDE\xBB\xBF\xEE\x99\x9D\xBE\xA3\x89\x23\x79\x99\xBB\xB9\x81\x07\xBA\xBD\x08\xDC\xBF\x7F\xE1\xB2\x99\xF2\x9C\x9F\xB2\x00\x08\xA9\x4A\x0E\xC5\xB1\x01\xD8\x9F\xA4\x00\xD5\xBB\x73\xF8\xBF\xAA\x0A\xEF\x26\xC2\xC2\x94\xBC\x84\x8C\x3E\xC2\xA9\xB0\x93\xB8\xC2\x99\xC0\x68\xD9\x95\xC4\xCB\x93\xB8\x87\x26\xBB\xAE\x4C\xF0\x9B\xC1\xFB\xA8\x9D\xC5\xBD\xA3\xAD\x32\xC0\xB5\xC0\x81\x2F\x9E\x98\x35\xDB\xC1\x6C\x8C\xCF\x88\x1C\xE4\x20\xC4\x90\x9D\xBC\x65\xF1\x9B\xAF\x07\x88\xCD\x24\x46\xC3\x26\x0C\x87\xCA\xC1\x25\xC1\xCF\xB5\x2C\xCC\xC8\x6D\xD1\xBF\x96\x1E\xE7\xA2\xA7\x34\xD8\xC0\x91\xCC\x81\xCB\xF5\x90\xC2\xBE\x13\xD0\xBE\x84\x89\xBA\xCA\xE8",
			"\x9D\xC5\xCD\xF8\xA5\xA6\x97\xB2\xC9\xA4\x39\xB6\xC2\xBC\x63\xD4\x89\x9E\xC0\x83\xBD\x2D\xFD\xCF\xBA\xAA\xA5\xAC\x23\x83\x2B\xBB\x92\x0F\xCF\x88\xEA\xBF\xCD\x9C\xD2\xB2\xC9\x83\x8C\xD0\xCB\x8D\xD1\xA1\xA0\xF5\xA3\xD1\xB3\x9C\x2F\xD0\x40\x8A\xBF\x8C\xB1\x3B\xD2\xE7\x18\xD3\x87\x9F\xD8\x25\xA8\x9F\xCA\xC8\x3A\xD1\x5C\x2B\x32\x9D\x8A\x0C\x8C\x3B\xD4\x54\xCA\x26\xC1\xA3\xCC\x25\xAC\xA9\x23\xD6\x43\xE5\xD3\xCB\xB5\xC7\xCB\x21\xB7\x7E\xBD\xCD\xBD\xD2\x20\x36\xB9\x2D\x72\xE9\x7B\xC6\x61\xC2\xC3\xD2\x02\x3D\x99\x71\x2F\xDD\xB5\x5F\xC0\x07\xC7\x02\x33\x94\xB4\x81\x22\xDB\x66\xFF\xD6\x3E\x03\x33\x94\xB6\xD1\xDA\x21\x6D\xF7\xAE\xD9\x3E\xA2\xBA\xB3\xA5\x81\xDC\x00\x25\x82\xD9\x0A\x20\x43\xB1\xD0\xAD\xA7\x74\xC3\xD9\x20\xE7\xCE\xD8\x00\x0D\x0F\xDC\x73\xC5\xDA\x20\xF4\xCB\xDE\x6D\x89\x28\xDC\x7D\xC2\xB7\xDE\x01\x27\xBD\xBC\xCE\xD7\x40\x76\xC3\x25\xDC\x05\xFB\xDC\x73\xF2\xD2\x42\x83\x1F\x41\x21\x0F\xE6\x22\x8C\x4E\xD0\x48\x7F\xC2\x25\xE2\x06\x2A\x49\x42\x51\x46\x21\xF3\x9A\xE1\xE3\x11\x2A\x22\x96\x09\x23\xE4\x83\x25\xE3\x20",
			"\x16\x15\xDC\xB9\x8A\x29\xE4\x8B\xF0\xDA\x21\xFD\xC6\x21\x97\x09\x23\x97\x99\xC6\x25\xE6\xD6\xDD\xD7\x9A\x4E\xD3\x97\x93\x1D\x8B\x2A\x0A\x39\xDE\xBC\x89\x2E\x10\x15\xB1\x97\x81\x09\xE3\xEB\x40\x0F\x16\xE8\x98\xCA\x20\xE3\xBD\xCC\x84\x24\x4D\xE9\x21\x72\xCE\x5E\xD9\x2C\x91\x10\xD5\x8A\xE3\x20\x5C\x58\xEA\x21\x92\x1B\xEA\xB1\x86\x21\x53\xAF\xED\x39\x96\x97\x46\xED\x7F\x0F\x82\x50\xB5\xC3\x23\x12\x62\xFE\xD5\x42\x00\x5E\xEC\x81\x14\x11\xEE\x01\xEA\x23\x9B\x4A\xE6\x21\x4A\x38\xE8\x00\xE7\xBB\xEC\xDF\x82\x26\x13\xBF\xDD\x9C\x05\x83\xE3\x23\x25\x06\xFA\x20\xC4\xC9\xF1\x20\x98\x1F\xED\xB9\xB2\x0F\xF1\x80\x19\x17\xEF\x2C\x99\x59\xDD\x81\x2A\x13\xBF\xCF\x81\x5D\x9B\xE0\x03\x26\x7F\xE1\x97\x1D\x32\xDC\x85\x9C\x0C\xF1\x42\x37\x07\xF4\x85\x1D\x17\xEF\xE7\xBB\x59\xE8\x9E\x1A\xF4\x83\x3A\x05\xF5\x09\x3F\x10\xEC\x8A\x24\x5D\xD0\xE0\x15\xF6\x03\x20\x61\xE8\xE7\x37\xBD\x8C\x43\xFA\x3D\x74\x12\xDF\x9A\xBC\x33\xE9\x58\x87\xEF\x3D\x12\xA2\x5A\xCF\x92\x78\xBA\xE9\xF5\xDF\xBC\xB3\x88\xCC\x6E\x2C\x8F\xD3\xA1\xE7\x3D\xD3\xC2\x47\xBE",
			"\xF6\xCC\xFD\xDA\xC9\x42\xE7\x3D\x27\x2A\xDD\xC7\x8A\x21\xE3\x13\xED\x3D\x84\x3F\xF2\xDD\xF7\x6A\x35\xDD\xE5\xE1\x3F\x24\x13\xF5\xA0\xC8\xDD\xCD\xD7\x58\xB3\x97\xB8\x43\x77\x72\xC0\x63\x3E\x32\x4E\x6D\x88\x27\x12\x36\x7E\x7E\xD4\x33\x55\x03\x1A\x7E\x14\x27\x12\x3B\x70\x63\x0B\x83\x10\x06\x86\x7F\xCF\x17\x12\x82\x77\x54\x0A\x12\x27\xFC\x72\x77\xFA\x7D\x80\xE5\x7D\x1E\x27\x1D\x01\x1C\x3C\x42\xB1\x4E\x80\x02\x18\x82\xD6\x79\x10\x7D\x24\x5D\xB8\x12\x7E\x41\x75\x67\x0F\x8A\x10\x74\x72\x81\x9A\x39\x74\x3E\x68\x7E\x0A\x1D\x76\x36\x85\x3B\x06\x1D\x70\x03\x1F\x71\x33\x89\x10\x21\x02\x39\xF9\x73\x10\xED\x73\x25\x27\x14\x11\x2E\x88\x34\x50\x72\x10\x47\x8A\x84\xE3\x37\x1E\x42\x82\x10\x55\x8B\x82\x06\x1F\x28\x2E\x78\x28\x25\x4E\x71\xD7\x37\x1E\x27\x16\x11\x06\x72\x10\x8E\x7F\x81\x96\x63\x86\x01\x1C\x71\x14\x8A\x83\x09\x1E\x75\x66\x82\x2C\x38\x81\x10\xB1\x4A\x86\x29\x8C\x86\x06\x14\x2C\x1D\x82\x2C\x40\x8E\x81\x03\x14\x87\xE7\x36\x87\x03\x14\x79\xA7\x69\x10\xD0\x2F\x86\x00\x09\x84\x7F\x89\x10\x2D\x76\x10\x11\x83\x84\x13\x83",
			"\x25\x8B\x8B\x86\x22\x8A\x10\xAC\x79\x87\x88\x2F\x84\x89\x86\x10\x91\x85\x87\x93\x89\x10\xB2\x76\x88\xE7\x1E\x87\x11\x6C\x72\x5F\x8A\x1E\x27\x16\x7A\x83\x86\x10\x1C\x16\x89\x9B\x8B\x3F\x0A\x19\x80\x07\x10\x88\x02\x12\x7C\xA0\x8A\x1E\x19\x83\x80\x09\x10\x8B\x01\x1A\x82\x07\x8A\x10\x0F\x36\x89\xE7\x1C\x81\x86\x8A\x8B\xA3\x8D\x89\x06\x1B\x31\xA9\x83\x10\x29\x36\x89\x24\x89\x8C\x02\x1D\x88\x02\x12\x80\x58\x83\x10\x2D\x3D\x84\xC7\x30\x00\xD0\x81\x10\x7A\x26\x8C\x03\x16\x33\x5B\x86\x34\xD6\x8F\x1C\xD9\x80\x00\xCD\x8D\x1F\x27\x1E\x34\x5B\x84\x36\xE1\x80\x81\x0A\x1D\x82\xE6\x8A\x10\x66\x3B\x85\x7B\x3B\x8E\x7A\x7A\x10\xE3\x80\x86\x53\x86\x8B\xAF\x82\x8B\xE2\x3D\x1E\x1A\x02\x72\xFC\x80\x00\x7E\x34\x8F\xFE\x8A\x10\xDB\x8F\x8E\x09\x1A\x05\xF5\x61\x39\x04\x96\x10\xFF\x89\x10\xE5\x8E\x88\x03\x15\x39\x5B\x87\x3A\x0D\x93\x10\x0F\x96\x10\xEE\x82\x91\x02\x14\x06\xF5\x61\x3B\x17\x92\x10\xC2\x83\x10\xD2\x8D\x8B\x09\x1C\x6B\x3D\x8D\x8F\x06\x13\x92\x79\x21\x90\xB9\x3B\x85\xC5\x31\x92\x01\x1C\x92\x01\x11\x91\x52\x89\x10\xCD\x3B\x85",
			"\xDF\x32\x93\x00\x04\x93\x00\x0B\x91\x37\x96\x10\xC9\x7B\x85\x78\x0C\x31\x07\x98\x72\x01\x93\x7F\xBE\x16\x93\x01\x19\x91\x1C\x9A\x92\x14\x20\x94\x33\x99\x94\xD0\x3A\x1E\x35\x84\x92\x01\x99\x07\x92\x37\x95\x2D\x9C\x8D\x02\x1A\x07\xF5\x6E\x07\x1C\x3C\x95\x35\x91\x90\x7F\x05\x6F\x83\x03\x96\xED\x81\x90\x84\x05\x6F\x88\x0C\x31\x3C\x88\x95\x5E\x91\x10\x89\x02\x39\x71\x9D\x95\x08\x96\x10\x8A\x05\x6F\x8E\x00\x97\x0A\x1C\x94\x26\x96\x10\x8F\x05\x6F\x93\x0E\x97\x2C\x81\x90\x94\x05\x6F\x98\x0C\x31\x45\x84\x72\x54\x93\x3B\xEA\x1D\x98\x06\x17\x94\x41\x93\x10\x99\x0C\x2D\x02\x1C\x09\x8C\x9F\x97\x01\x9D\x09\x98\x91\x10\xA0\x0B\x99\x87\x93\x97\xE4\x3F\x99\x00\x04\x0A\x1C\x3C\x84\xFB\x79\x97\x03\x15\x0A\xA5\x8E\x1B\x77\x92\x87\x13\x1F\x9A\xC0\x17\x12\xA7\x06\x9A\xAA\x07\x3D\x92\x9A\x81\x09\x15\x76\x59\x81\x90\xAC\x04\x9B\x8B\x39\x76\xBF\x94\x9A\xAE\x02\x9C\x48\x39\x29\x09\x1A\x85\xAC\x9E\x83\x14\x22\x86\xAB\x9F\x94\x00\x00\x0B\xA6\x97\x1E\xCC\x9C\x9B\x06\x10\x9D\xD8\x92\x9D\xB3\x05\x6F\xB7\x07\x3D\xC4\x93\x76\x03\x11\x2A\x09",
			"\x17\x85\x81\x93\x10\xB9\x05\x6F\xE7\x18\x02\xF5\x64\x9E\x06\x1B\x02\x8F\x9A\x34\xE7\x1E\x9E\xDB\x95\x99\x02\x1D\x0B\xC8\x61\x10\xC2\x07\x3D\x65\x8F\x6F\x09\x13\x2A\xE5\x91\x90\xC4\x0A\x9E\xEA\x16\x2C\x5B\x80\xA0\xB5\x8E\x1B\x27\x18\x0C\xF9\x90\x00\xCD\x07\x3D\x85\x8E\x9F\xEF\x9A\x10\xEC\x94\x9A\xCF\x02\x39\xF0\x99\x10\xAC\x24\x9A\xD0\x05\x6F\xD4\x0C\x31\xFD\x92\x10\x19\xAD\x9C\x50\x93\x25\x21\xA1\x10\x08\xA2\x9D\x4A\x90\x1C\x1B\xA6\x10\xF4\x96\x9F\x25\xA2\x2C\x6E\x83\x10\x15\xA4\xA2\x00\x05\x0D\x92\x33\xA3\x02\x1D\xA2\xD2\x96\x0D\xF5\x6A\x0D\x1C\x3F\x2B\xD1\x90\xA3\x00\x0B\x0D\x04\xAE\x1B\xB7\x7E\x8C\x01\x12\xA4\xF5\x93\x8D\x02\x1F\x0D\x0D\xA4\x0E\xD7\x30\x7A\xEB\x79\x10\x06\xA3\xA4\x4E\xA1\x10\xE6\x05\x9D\xEA\x19\x30\x06\x1C\x42\x57\xAD\xA4\xE7\x92\x10\xE9\x05\x6F\xED\x07\x3D\xC8\x85\xA5\x06\x12\x88\x77\x81\x90\xEF\x02\x39\x6C\xA3\x10\x33\x01\x90\xF0\x05\x6F\xF4\x0C\x31\x73\xA6\xA5\xF1\x9B\x38\xE7\x17\x75\x6D\xA4\x9A\xF5\x02\x39\x7E\xA2\xA7\x01\x96\x0F\xF5\x6A\x0F\x1C\x31\xA1\x56\x81\x90\xFB\x08\x9C\xE1\x1B",
			"\x32\x0A\x3A\xA8\x01\x16\x80\xF8\x89\x10\xFD\x0E\xA8\xCF\x15\x8D\x29\x90\x00\x92\xA0\x00\xBC\x85\xA9\x51\x18\xA9\x27\x1E\x8D\x9B\xAD\xA9\x16\x8D\x7C\x2A\x4C\x7D\x2A\x4F\x40\x38\x36\x89\x95\x86\x10\x36\x01\x90\x06\x0F\x77\xD1\x3A\x79\xB0\xA1\x90\x07\x04\xAB\xA3\x36\xAB\xE3\x91\x90\x08\x0A\x42\x9F\xAA\x1E\x44\x36\x89\xBC\xA2\x10\x61\xA4\xA4\x14\x0A\x42\x71\x88\x28\xE8\x8B\xA9\x9F\x83\x10\xB1\xA4\x9A\x22\x0A\xAB\x3C\x39\xA4\xB7\xA4\x9A\x23\x04\xAD\x4A\x38\x8A\xD7\xA6\xA3\x24\x0A\xAD\x8B\x3C\xAD\x48\x94\x9A\x25\x0A\x42\x0E\x67\x12\x53\x3A\x30\xE2\xA2\x10\x2F\xA9\xA5\x00\x0D\x02\xC0\xAF\x1E\x5D\x36\x89\xEB\xA3\x95\xA4\x99\x03\xE6\xAF\x1E\xEA\x8B\xA9\xF5\xA0\x00\x4E\x94\xA4\x41\x09\xAF\xED\x11\x8F\xFC\xAA\x10\xC7\xAE\xAE\x49\x0A\xAC\xEF\x1F\x36\x0A\x3D\x7B\xDD\xA2\x9D\x57\x00\xAE\x48\x34\xA5\xD0\xA1\x90\x58\x02\xB1\xD7\x84\xB1\x02\x1D\x8A\x63\xA1\x10\x59\x02\xB0\xFD\x12\x37\x0A\x3A\xB1\xF6\xA6\xA3\x61\x00\xB2\x14\x24\x37\x23\xBA\x10\xFF\xAE\xAE\x69\x08\xB2\x53\x23\x8F\x9B\xAB\x8A\x58\xAD\xB1\x00\x01\x07\x2A\x43\x58",
			"\x0A\x13\x90\x6A\xA3\x10\x34\xB2\xA6\xA0\xA3\x10\x76\x0A\x42\xE5\x6C\x07\xAB\xAA\x10\x8F\x38\x86\x00\x04\x8B\x03\x19\x2F\xA4\x9E\x07\x47\xB5\x38\x00\x0E\xA5\x92\x86\xA3\x80\x09\xAA\xEF\x15\x3A\x96\x84\xB5\x9C\x86\xA3\x83\x08\xB5\xED\x1E\x91\x5B\xB2\xAA\xF2\x66\x08\x2A\x47\x5E\x8A\x01\xB5\x06\x1D\x3A\x4A\xA0\x00\xC6\x76\x10\xBF\x86\xA3\x8C\x0A\xB6\x9A\x39\xA6\xBD\x60\x86\x3B\x45\x79\x7C\x8D\x7F\xCD\x70\x74\x8B\x13\x7E\x24\x11\x4B\x3A\x17\xAA\x16\x8C\x65\xCE\x61\x7D\x99\x8F\x6B\x88\xB0\x41\x6E\x15\x46\x2C\x4A\x13\x8F\xB3\x7D\xF2\x6D\x7D\xA1\x67\x7E\x2A\x77\x12\x96\xBB\x85\x25\x40\x78\xF5\x6C\xB9\x6D\xBE\xB9\x5C\x7C\x49\x9D\xB7\x5E\x8F\xB0\x83\xF5\x6F\x40\xA0\xBF\x6B\x83\x5C\x4F\x25\x42\xB8\x9B\xB7\x12\x25\x48\xBA\xE5\x62\x15\xB3\xB8\x13\xE5\x62\xB8\xB7\xBB\x19\x33\x20\x00\xB9\xB0\x70\xF1\x5A\xBB\xF2\x60\x80\xEC\x5D\x4D\x82\xB4\xBC\x27\x16\xBC\x4E\x72\x6F\xE7\xA4\x61\xB3\x48\xBA\xCD\xBB\x6C\xCA\xB3\x74\x3D\x70\xBD\x9B\xA0\x00\xD9\x77\x12\x85\x6D\x12\xD9\xBB\x50\xF2\x63\x6D\xEB\x1E\xBD\x3B\x4E\xBD\x4A\x70",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
			L"ExprModule",
			L"TypeModule",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[23][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[24][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[25][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[26][_LongType]< _LongType \"*\" @ >",
			L"[27][_LongType]< _LongType \"const\" @ >",
			L"[28][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[29][_LongType]< _LongType @ \"*\" >",
			L"[30][_LongType]< _LongType @ \"const\" >",
			L"[31][_LongType]<< !_PrimitiveShared @ >>",
			L"[32][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[33][_LongType]lrp:(Shared,Type) @",
			L"[34][_Expr0] BEGIN ",
			L"[35][_Expr0] END [ENDING]",
			L"[36][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[37][_Expr0]<< !_PrimitiveShared @ >>",
			L"[38][_Expr0]lrp:(Expr,Shared) @",
			L"[39][_Expr1] BEGIN ",
			L"[40][_Expr1] END [ENDING]",
			L"[41][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[42][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[43][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[45][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[46][_Expr1]<< !_Expr0 @ >>",
			L"[47][_Expr] BEGIN ",
			L"[48][_Expr] END [ENDING]",
			L"[49][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[50][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[51][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[52][_Expr]<< !_Expr1 @ >>",
			L"[53][Module] BEGIN ",
			L"[54][Module] END [ENDING]",
			L"[55][Module]<< !_PrimitiveExprOnly ( lri:(Expr)->_Expr @ | lri:<skip> ) >>",
			L"[56][Module]<< !_PrimitiveExprOnly @ ( lri:(Expr)->_Expr | lri:<skip> ) >>",
			L"[57][Module]<< !_PrimitiveShared ( lri:(Shared)->_LongType @ | lri:(Shared)->_Expr | lri:<skip> ) >>",
			L"[58][Module]<< !_PrimitiveShared ( lri:(Shared)->_LongType | lri:(Shared)->_Expr @ | lri:<skip> ) >>",
			L"[59][Module]<< !_PrimitiveShared @ ( lri:(Shared)->_LongType | lri:(Shared)->_Expr | lri:<skip> ) >>",
			L"[60][Module]<< !_PrimitiveTypeOnly ( lri:(Type)->_LongType @ | lri:<skip> ) >>",
			L"[61][Module]<< !_PrimitiveTypeOnly @ ( lri:(Type)->_LongType | lri:<skip> ) >>",
			L"[62][ExprModule] BEGIN ",
			L"[63][ExprModule] END [ENDING]",
			L"[64][ExprModule]<< !_Expr @ >>",
			L"[65][TypeModule] BEGIN ",
			L"[66][TypeModule] END [ENDING]",
			L"[67][TypeModule]<< !_LongType @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge1_LriTokens, ModuleParserStates, PrefixMerge1_LriAstInsReceiver>(&PrefixMerge1_LriTokenDeleter, &PrefixMerge1_LriLexerData, &PrefixMerge1_LriModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge1_LriTypeName((PrefixMerge1_LriClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseExprModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::ExprModule>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseExprModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::ExprModule>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseTypeModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::TypeModule>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseTypeModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::TypeModule>(tokens, this, codeIndex);
	}
}
