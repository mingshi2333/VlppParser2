/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge1_Lri
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge1_LriModuleParser.h"

namespace prefixmerge1_lri
{
	void PrefixMerge1_LriModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3676; // 33235 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 92;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\xD3\x81\x00\x00\x54\x0E\x00\x00\x08\x00\x01\x82\x80\x0B\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x81\x06\x84\x07\x0A\x93\x0A\x81\x1A\x86\x12\x84\x17\x0A\xB4\x0A\x9D\x1A\x80\x22\x84\x4F\x02\x09\xBF\x63\x94\x93\x92\x84\x00\x25\xA5\xA7\x89\x94\x93\x94\x97\x7F\x2E\xAC\xB1\x89\x93\x9A\x96\x85\x97\x30\xA7\x8A\x81\x07\x9F\x95\x9B\x96\x3D\xB2\x81\xB4\x93\xA6\x9A\x90\x9F\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x06\xB8\xA7\x9C\x99\x84\xAA\x83\x90\x55\xC9\xA6\x9A\xA9\x9F\xA6\xA5\xA8\x48\xDE\x9B\xA2\xBD\xA8\xB0\xA6\xB3\x4E\xE8\x90\xA3\x82\xAC\xAF\x9F\xB1\x6A\xDF\xAC\xA1\xB1\xB8\xBB\xB9\xB3\x03\x83\x3B\x8E\xBA\x84\x03\xBD\x84\x05\x7F\xB5\xA5\xB7\xB9\xB5\xC3\xB5\x02\xED\xA4\xAF\xB4\xC1\xC4\xBB\xC3\x72\x8E\xF8\xB2\xC6\xC4\xC8\xC5\x80\x8A\x83\xE7\x8C\x89\xAB\xC4\xBE\xCF\xA0\x9A\xDF\xC2\xD1\xD0\xCA\xBA\xCB\x91\x98\xCF\xC8\xD7\xD1\x83\x02\xC1\xA6\x8D\xEA\xD3\xC3\xDD\xC9\xDB\xCB\x28\xAB\xF7\xC9\xD9\xDC\xD9\xDE\xDB\xBF\xB8\xD9\xD1\xD7\x90\x81\xCE\xD2\xC8\xC4\xE3\xCA\xE5\xD4\xD6\xD9\xE0\xBC\xC3\xCE\xEC\xC4\xEB\xE7\xE8\xEB\x01\x8E\x87\xEC",
			"\xE9\xE7\xE9\xE7\xDD\xAD\xD0\xE1\xF2\xE0\xF7\xE4\xF2\xF1\xE6\xBA\xE8\xF5\xE9\x82\x04\xD8\xEF\xDD\xE5\xEC\xF1\xFB\xF0\xED\xFB\xEF\x04\xEF\xF2\xF6\xF7\xF5\xFE\xF4\xFF\xBE\x40\x80\x72\x80\xC2\x7F\x76\x81\x80\xEA\x4C\x0A\x7F\x7D\x06\x4D\x0B\x80\x81\xD1\x6A\x70\x47\x76\xF0\x5C\x76\x85\x85\x18\xBB\x78\x7C\x84\xE3\x47\x83\x82\x87\x05\x88\x82\x8B\x87\xBE\x4F\x0F\x80\x88\x11\xA3\x81\x88\x89\x2C\xAB\x8E\x89\x8A\x2D\xB0\x88\x6C\x04\x27\xAA\x82\x8F\x8D\x1D\xB6\x89\x8D\x8C\xE1\x51\x05\x8C\x8F\xE9\x7A\x81\x90\x70\x12\x3F\x8F\x8B\x8E\x47\x83\x99\x93\x7C\x03\x52\x44\x86\x86\x06\x54\x06\x90\x8E\x4A\x94\x9C\x91\x86\x0C\x97\x80\x96\x96\x59\x98\x9C\x87\x73\x15\x13\x98\x90\x6F\x16\x22\x9F\x73\x05\x66\x97\x9B\x96\x97\x28\xA3\x91\x78\x06\x69\x8A\x49\x05\x9C\x09\x5A\x0B\x83\x06\x0A\x7A\x5B\x85\x9B\x55\xAE\x9D\x9F\x9F\x6A\x9D\x9B\x9B\xA0\x00\x1E\x0B\x83\x07\x74\xB4\x7F\x95\xA0\x20\x0B\x84\x45\x42\x7A\x8A\xAC\x9D\xA0\x8B\xBC\x7A\x78\x09\x0B\xA5\x09\x9E\xA5\x42\x94\xA3\xA4\xA7\x40\x81\xA8\x09\xA2\x5C\x95\xAB\x9D\xA7\xA0\x8B\x99\xAA\x95",
			"\xF6\x69\x04\xA8\x9B\xA8\xA7\xA1\xAA\x7D\x2A\x2F\xA4\xA3\x79\x2B\x0B\x8C\x0B\xA6\xB2\xAA\xAD\xAC\xAB\xBF\xA1\x7F\x0B\x82\x30\x3C\xA2\xA5\xAC\xC7\xB3\xA1\xB3\x73\x33\x0B\x8A\x44\xA4\xAB\xBE\x9E\xA4\xB2\xA5\x9F\xA8\x7F\x0D\xB6\x82\xAA\xB6\xA9\x06\x78\x09\xB4\xB7\xD5\x94\xB0\xAE\xB2\xC9\xB8\x69\x0F\xB7\xD6\xA5\xB0\xB2\xBA\xD2\x8A\x4A\x0C\xBA\xE2\xB7\xA9\xB9\xB8\xE4\x83\x4B\x0C\xBC\xF5\xA3\xBE\xAC\xBB\x80\x91\xBF\x70\x0F\xF8\xBB\xB4\xBC\x6E\x1C\x4F\x9B\xB7\xBC\xFA\xAB\xB3\xC2\xC2\x09\xED\xB8\x7E\x0F\x0B\xBF\x01\xC0\xC3\x84\x9E\x46\xC0\xB8\x58\x81\x13\xC6\xC3\xFC\xA7\x42\x11\xB6\x43\x0B\x84\x13\xC6\xFD\x8B\xB3\xB5\xBE\xF2\xB1\xB0\x01\x11\x0B\x86\x14\xCB\xC9\x02\xCD\xCF\x73\x11\x2F\xFE\xB0\xCC\xC5\x00\x08\x1B\x81\x12\x35\xE6\xC6\xCF\xCF\x3E\xC9\x4A\x11\xCF\x1D\xF6\x7B\x10\xD1\x0B\xDC\xC9\xD1\xC9\x45\xC1\xD4\x7C\x13\x48\xF2\xC1\xA1\x13\xD9\x8E\x1B\x83\x13\x51\xE9\xC8\xCB\xC1\x2A\xD8\xCA\xD5\xCC\x5F\xFC\x60\x15\xD6\x00\x11\x1B\x82\x14\x64\xDE\xDC\xD7\xD6\x6A\xE7\x73\x15\xDA\xEA\x54\x19\xB5\x15\x70\xDD\xD8\xC1\xD8\x4A",
			"\xD2\xDA\x42\x15\x75\xEC\xD7\xDF\xDA\x60\xC0\x07\x15\xB6\x58\x3D\xD1\xE1\x16\x64\xDA\x16\xE0\xCE\x6D\xFF\xD7\x7B\x16\x8B\xF9\xD8\xDC\xD3\x4B\xE7\x4C\x15\xB6\x5D\x0A\x48\x55\xD3\xF4\x5F\x1B\x80\x18\x9A\xC0\xD6\x42\x18\x91\xD4\xEA\xDE\xD3\x5C\xA3\x19\xB4\x19\xA5\xE7\x45\x1B\x82\x66\x2D\xE6\x7F\x19\xB2\xE8\xE2\x40\x1A\xB5\xDC\xE5\xE6\xE8\xBB\xC9\x49\x19\xEE\xBD\xFA\xE7\xEA\xF0\x93\xF7\xC1\x7A\x1A\xD9\xAB\x10\xF3\xF0\xC1\xCD\xFC\xF2\x40\x6C\x0B\xF5\xF0\xEF\xCF\xC1\x44\x26\x55\x02\x5B\xE3\x41\x60\xCB\xB8\x4A\x76\x41\xDF\xF1\x6C\xF7\x60\x38\x63\xF1\x6C\x4E\xAF\x64\x58\x4E\xF6\x02\x51\xA1\x6E\x71\xE4\xEF\x41\xFB\x42\xFE\x9E\xFA\x42\xF9\xCE\x78\xF5\x79\xF9\x5C\x68\xFD\xFF\x4B\xEC\x61\x22\xFB\x4E\x30\x7F\xF3\x72\x7A\x21\x9C\x23\x33\x00\xFB\x70\x81\xFB\x75\x7F\x80\x09\x33\x7D\x79\x7E\x2A\x7D\x97\x3A\x78\x3D\xEB\x66\x4F\x05\xB8\x2C\x7F\x0A\xAC\x21\x80\x00\x18\x7A\x73\x0B\x88\x83\x06\x80\x37\x81\x2C\x32\x80\x00\x2A\x88\x26\x12\x9C\x86\x82\xFF\x6C\x26\x0B\xAF\x89\x25\x19\xB4\x84\x24\x36\x97\x87\x3F\x39\x87\x86\x1E\xB4\x86",
			"\x87\x2F\x80\x88\x07\xC2\x89\x83\x13\x9D\x78\x82\xE0\x7C\x28\x11\xA6\x86\x20\x11\xA5\x3B\x89\x32\x91\x85\x4A\x20\x8B\x82\x3E\x76\x79\x82\x4A\x92\x89\x49\x20\x8E\x88\xF4\x10\x8D\x86\x5A\x84\x24\x15\xA8\x89\x24\x15\xAC\x87\x25\x5F\x9B\x8A\x99\x69\x88\x87\x30\xA3\x23\x8C\x47\x89\x85\x43\x5C\x25\x8A\x1D\xBF\x1D\x8E\x3A\x89\x7D\xFC\x1F\x81\x74\xB2\x05\x86\x39\x57\x86\x20\x05\x83\x38\x8F\x1B\xBA\x8E\x80\x7C\x89\x21\x02\xEF\x7E\x8D\x7F\x2A\x86\x3D\x64\x25\x90\x0D\x87\x90\x90\x26\x83\x25\x8B\x38\x3F\x8C\x03\xF2\x89\x20\x10\x9D\x83\x8F\x29\x32\x93\x0B\x94\x9B\x93\x29\xBD\x8B\x30\x9A\x85\x84\x27\x82\x94\x8F\x46\xA4\x92\x95\xA6\x8A\x90\x57\x29\x96\x8F\x91\x0F\x95\x95\x1E\x89\x27\x2B\xB5\x9F\x1E\x2E\xB3\x95\x91\x2A\x9E\x90\x0C\xB9\x95\x24\x51\x9C\x83\x97\xB5\x80\x86\x30\xAC\x24\x97\x5A\xAA\x83\x90\xE2\x6E\x95\x23\xA0\x8B\x90\x02\x80\x9A\x21\x90\x84\x92\x34\xC4\x92\x8C\x33\x4D\x9E\x8E\xC1\x98\x94\x28\xC5\x9B\x9B\x71\x9D\x9D\x93\xBF\x9C\x9A\x2D\xFD\x22\x9C\x44\xBA\x93\x9A\x08\x89\x9E\x39\xEB\x9D\x3D\x76\x95\x94\x25\xC8\x96",
			"\x8E\x2F\xFE\x87\x9A\x74\x91\x95\x91\xC6\x9E\x7E\x3A\xBD\x97\x94\x46\x83\xA7\x99\xF6\x85\x95\x49\x79\x9A\x86\x6A\xB2\x9E\x9D\x25\x37\x97\x3F\x83\xAC\xA1\x1B\xBB\x98\x95\xFD\x97\x28\x57\x15\xA4\x86\x65\x8F\xA7\x9E\x65\x8C\x9C\x59\x1C\xAF\x84\x87\xBC\x9F\xA0\xD8\x9B\xA0\x3C\x97\x6F\x25\x6F\xBA\x81\x9C\x64\x2C\x8F\x48\x32\xAB\x87\x46\xB4\xA0\x8E\xFC\x41\x93\x40\x67\x8C\x24\x68\xA0\xA4\x9C\x03\xBE\xA6\x42\xA4\x21\xA0\x34\xB6\xA7\xA8\x03\xB4\xA6\x52\xAB\xA6\x20\x63\x8C\x32\xA7\x02\x3C\xA4\x18\xC9\xA8\xA9\x79\xB5\xA4\xAA\x58\xB6\xAB\x52\x83\xA8\xA7\xA5\x50\xA9\x3B\x59\x99\xA8\x44\xED\x82\xAD\x9F\xA4\xAA\xAB\x55\xA3\xAF\x4C\xCC\xAB\x7A\x32\x91\xA3\x8E\x13\xB6\xA9\x51\xF8\x9C\xAC\x9D\x25\x3E\xA5\x37\x8A\x84\x26\xC3\x92\xAF\x72\xAA\xAC\xA0\x76\xA6\xA2\x55\xFA\xA1\xAC\xB4\xA5\xAB\xA8\x6B\xA7\xB0\x2C\xA5\x2B\xAA\xC3\x96\xAD\xAB\x32\x7F\xAB\x0A\x85\xBF\xAF\xC6\x95\xB1\xAD\x66\xA9\xB3\x63\x8E\x81\x8F\x90\x98\x89\xAE\x7F\xB3\xAF\x3B\xDC\xA2\xA4\x8C\xA8\xA1\x21\x24\xB7\x8C\x40\xFE\xA9\xB2\xC0\xAC\x97\xA4\x83\xAA\x21\x6A\x96",
			"\xBD\xB5\x9B\xAB\x88\xB3\x88\xAE\xB5\x5B\x9D\xBF\xAD\xCF\x9A\x9B\xA0\xA2\xA0\xAA\x55\xA9\xBD\x84\xDC\x8B\xB7\xAC\x7F\xB8\xAC\x0D\xC2\xA7\xB9\x91\x01\xBC\x24\xC4\xB6\x91\x60\x99\x99\xA3\x4B\x89\xA5\xB9\xFF\x11\xB9\x14\x8A\xBC\x96\x9A\x8A\xBF\x85\xCC\xBC\x97\x73\xA3\x21\xBD\x5A\xA3\xB9\xBB\x75\xA1\x21\x79\xCC\x95\xBA\x81\x29\xB7\xBC\xF0\xAB\xB4\x45\xC6\xBC\x97\xEF\x87\x99\xBD\x00\x0B\x99\x4A\x76\xB2\xB3\xF5\xA1\x94\xB5\xB9\xB4\xB5\x80\x8D\x9C\xBF\x97\x3E\xBF\x86\xE7\xBA\xB9\x2C\x81\xB7\xAF\xF6\x81\x23\xAF\x2C\x29\xC0\x7D\xB5\x95\xC0\xBA\xA4\xB4\xA5\xEC\xA7\xB6\x46\xA0\xBD\xB4\x05\xCC\xB4\xC0\x00\xD8\xBA\x49\xA6\xB1\xB7\x7A\x9C\xC1\xB7\x1E\xC8\xB9\x6D\x93\xC6\x8F\x0A\xE9\x27\xC0\x34\x87\xBC\x8C\xAF\x82\xC3\x0B\xEF\xB4\xC4\x7F\xAA\x87\x7B\xF2\xBD\xAF\xF9\x9C\xBC\xC2\x21\xDC\x96\x47\xB0\xB9\xC7\xD2\x91\x9E\xC7\x8E\xA9\xB9\x90\xC9\x9E\x9A\x07\xF9\xBF\xBA\xBC\x89\xC6\x66\xCA\xC8\xC9\xBF\xA3\xC2\xB0\x45\xC6\xC6\x02\xAC\xCA\x86\x01\xD8\xBE\xCB\xDD\xBC\xC9\x0F\xE2\xCD\xA2\xCE\xB9\xA0\x89\x3B\xBC\x2B\x8C\x9C\x87\xBC\x30",
			"\xCC\xC8\xC3\x53\xA9\xCB\x8A\xB6\xCB\xB7\x33\xEB\x91\xCD\x64\x2B\xCF\x27\xD9\xCB\xC3\xC1\x30\xA3\x30\x7A\xC6\xC1\x23\x81\xDD\xA7\x41\xCE\xCA\x88\x2A\x88\xD0\x83\xCE\x3A\x84\xC6\x2A\x86\xBE\x84\xCF\xC6\xA1\xC1\xA3\xD2\xAB\x91\xD5\x24\x97\xC4\x24\xE8\x0B\xD1\x85\x82\x81\xB4\x84\xCC\xB7\x81\x35\x82\x86\xC8\x81\x17\x87\x95\xC5\x30\xAF\xA2\xD9\x93\x21\x54\xAC\xD1\xAA\x9C\xD9\x3D\x42\x29\x98\x21\x24\x9C\xD3\xD4\x00\x08\xD6\x99\x83\x28\xD7\x53\xF1\xD2\x41\x09\x21\xD5\x3C\x89\x20\xD9\x1B\xF5\xCB\x20\xBA\xC9\x22\x83\x41\xDB\xD6\xFA\x4A\xDD\xD4\x01\x3E\xD4\xA7\xC2\xD2\x96\x66\xC6\x8E\x20\xC9\xC6\x23\x84\x4D\xA3\xD8\x6D\xCD\xDE\x35\xB1\xC6\x45\x42\x34\x49\x20\x1F\x5C\xD5\x48\xD6\xC6\x20\xBA\x86\x2E\x49\x28\x50\xD8\x00\xED\xCD\x4A\x42\x52\x49\x21\x30\x75\xDA\x21\xF6\xC6\x21\x99\x69\xD7\xD8\x67\xFA\xDF\xDD\xD2\xCB\xD0\x9A\x33\xDA\x21\x81\xF6\xD3\xD1\x70\x5C\xD1\x2A\xA7\x22\x89\x93\x20\x85\xD8\xB1\xC6\x21\x20\x4E\x8D\x8B\x2E\xB5\xD1\xE2\x03\x22\x10\xC5\xB2\xBA\x20\x73\xCB\xD4\x84\x83\x1B\xE1\xB5\x86\x2D\x58\x4E\xE4\x84\x10",
			"\x22\xFC\xD9\x42\x2D\x01\xD6\x12\x85\x11\xE5\x79\x2A\x23\x08\x2D\xE6\x3F\x2E\x98\x56\xE4\xF6\x20\x84\xA2\x38\xE9\x20\x43\x30\xE2\x20\x5D\x86\x50\xCF\x86\x27\x11\x9F\xEA\xBA\x21\x09\xF8\xE3\x40\x08\x16\xE8\x00\x0C\xB9\xE9\x4A\xE1\x21\x22\x4D\xEF\x95\x5C\x51\xEA\x20\x8A\x14\xEA\x42\x56\xE7\xEA\x00\x0B\x15\xE9\xB8\xD1\x05\xD7\x81\x2C\x11\xA6\xE4\x80\x5B\x43\xE3\x21\x23\x4D\xE0\x84\x80\x69\xEA\x20\x8E\x0D\xE9\x17\xEF\x5F\xED\x80\x0F\x12\xEB\x09\x36\x04\xCD\x89\x20\x13\xA6\xCC\xBE\x5B\x75\xE0\x01\x24\x78\xE6\x21\x73\x41\xF2\x12\x7E\xEA\x23\xBD\x01\xF3\x12\xC2\xC3\x22\x62\x81\xE7\x3C\x73\x9F\x61\xF2\xF5\x2D\x09\xD6\xFA\xB8\x35\xC4\x95\xEE\xD2\x42\x57\xA4\x4B\x0C\xE4\x6C\x64\x84\x57\x24\xE6\x8C\xB9\x95\x10\xC0\x38\xA8\xF6\x31\x51\x3F\xDC\x4C\xB9\xA9\xFA\xF2\x42\x17\xE0\xE8\xEA\x47\xEF\xDA\xA0\xEA\x20\xC4\x82\x2C\xB8\x72\xCD\x8E\x3E\x17\x8D\xE1\xAC\x8D\x7E\x36\x5C\xD9\xF4\x37\x27\x3E\xE3\x40\x20\x81\xDF\xEC\x71\xD5\x8B\xA9\x89\xB5\xC4\xF9\xDB\xF8\xDB\xD3\xB7\xD9\xF8\x27\x26\xC1\xD6\xB6\x77\x80\x34\xF1\x20\xAF\xC4\xF4",
			"\xD2\xE4\x6B\xF6\xF0\xEC\xF2\x4E\x64\x6B\xD9\x83\x67\xF5\x4F\x6C\x5C\xF0\xFB\x7D\xD9\xF5\x42\x78\x4E\x9E\x83\x1D\x05\xF3\x4F\xD5\xFF\x40\x5B\xD3\x21\x75\xF2\xFE\x20\x3B\x7F\x7B\xDD\x70\x00\xBE\x73\x10\xE2\x64\x1F\x27\x1D\x28\x70\x61\x38\xCA\x72\x10\x05\x88\x25\xC6\x36\x3A\x01\x1E\x7F\x02\x14\x81\xE2\x79\x10\x8F\x26\x6C\x58\x26\x7A\x0A\x16\x81\xF9\x78\x80\x0A\x1A\x29\xB8\x72\x10\xB5\x2A\x7F\x02\x19\x4A\x17\x4D\x7C\x01\x1A\x7E\xFF\x73\x10\xBB\x26\x82\x84\x2C\x82\xB5\x79\x10\x2A\x8F\x81\x2D\x82\x10\x18\x10\x2D\x09\x12\x76\x30\x80\x00\xFC\x7E\x7C\xF7\x69\x10\xDB\x70\x81\xD6\x77\x1E\xD4\x72\x10\x32\x87\x81\x24\x78\x7F\xE7\x1F\x80\x01\x10\x42\x47\x8F\x84\xEC\x76\x10\x35\x06\x2C\x03\x10\x78\xF1\x75\x81\x56\x82\x10\xFB\x6B\x7E\xD9\x7E\x2E\x4C\x8A\x1E\x51\x86\x83\x5C\x81\x86\xBE\x17\x12\x6E\x76\x10\x24\x40\x79\x59\x81\x10\x43\x84\x6A\x42\x83\x6F\x53\x83\x10\x1A\x3B\x80\x38\x3F\x86\x00\x04\x7F\x20\x89\x10\x94\x7A\x81\x01\x1E\x32\x76\x81\x1E\x78\x8C\x01\x73\x82\x10\x34\x3C\x6F\x02\x17\x34\x81\x87\x26\x0A\x17\x7F\x5F\x89",
			"\x10\x50\x38\x88\x01\x13\x36\x8B\x87\x12\x50\x72\x10\x78\x87\x1E\x11\x81\x28\x97\x81\x10\x5D\x87\x83\xD3\x38\x1F\x73\x29\x10\xF4\x6B\x87\x06\x16\x36\x95\x86\x1F\xA3\x86\x10\x7A\x80\x8A\x00\x08\x36\x92\x80\x00\x7C\x39\x8A\x09\x1B\x8A\x03\x14\x88\x8F\x86\x10\x83\x31\x8B\x90\x34\x8B\x06\x16\x8B\x02\x1E\x88\xA6\x83\x10\x97\x31\x8B\x9B\x62\x80\xF4\x16\x27\xA4\x85\x88\x01\x11\x06\x64\x3A\x8C\xAC\x8C\x8C\x00\x04\x3A\xB1\x81\x3B\xBE\x83\x10\xD0\x87\x8B\xD2\x84\x3B\xB1\x8A\x3C\xD7\x82\x10\xD9\x81\x8C\xD2\x81\x3D\xB1\x80\x07\xD9\x2D\x8A\x02\x13\x86\x9A\x85\x84\xEA\x18\x8B\xBF\x82\x8D\xC4\x70\x1C\xC2\x88\x8D\xF0\x8E\x38\xEA\x12\x74\xEE\x69\x8B\x03\x11\x07\x64\x38\x8F\x03\x18\x8E\x4A\x83\x10\x72\x0F\x6E\x76\x09\x2D\xFE\x82\x10\xEE\x8E\x8A\x77\x0F\x6E\x7B\x06\x90\x8D\x82\x8D\x7C\x0F\x6E\x80\x09\x2D\x01\x83\x10\xA5\x8E\x8A\x81\x04\x36\x15\x92\x10\x00\x9A\x2D\x27\x12\x08\xEF\x66\x08\x14\x9A\x10\x09\x94\x84\x09\x17\x08\xEF\x6B\x08\x23\x99\x10\xF3\x86\x92\x06\x1C\x08\xEF\x60\x09\xD9\x2A\x80\xF9\x83\x8C\xD5\x3A\x2D\x34\x9F\x8F",
			"\xD2\x81\x09\x5B\x86\x3D\x33\x94\x92\xD2\x85\x09\x3D\x90\x00\x98\x0F\x93\x2C\x92\x8D\x99\x03\x94\x9C\x09\x2D\x19\x8D\x7F\xD2\x8D\x09\x66\x80\x1C\xE1\x8F\x60\x13\x11\x95\xB2\x79\x10\x9F\x03\x94\xA2\x08\x7F\x1D\x90\x42\x33\x79\x10\x22\x02\x8D\xA4\x06\x95\x38\x37\x73\x06\x11\x96\xFA\x82\x10\xA6\x04\x96\x92\x30\x00\x22\x87\x96\xF5\x86\x37\xBE\x16\x11\x09\x1E\x81\xEB\x89\x10\xA8\x03\x94\xE7\x1D\x92\x52\x89\x10\x74\x9D\x86\x1E\x9A\x10\xAB\x0F\x6E\xAF\x08\x7F\x1B\x90\x87\x06\x13\x2A\x75\x92\x8D\xB1\x0F\x6E\xE7\x18\x96\x7E\x80\x00\x8A\x96\x10\x25\x86\x93\xA1\x84\x1F\x93\x95\x7D\x69\x91\x10\xB5\x0F\x6D\x00\x0A\x0B\xF8\x7F\x97\xFD\x61\x10\xAE\x2B\x98\x9B\x90\x00\xBC\x0E\x98\xEA\x1C\x75\x03\x1C\x5C\xA5\x90\x98\x77\x96\x10\xC0\x0E\x99\xC5\x08\x7F\xC3\x23\x82\x01\x15\x99\x03\x17\x02\xD2\x87\x0C\x64\x3A\x9B\x02\x1F\x82\x96\x90\x00\xC8\x0F\x6E\xCC\x09\x2D\xAC\x94\x82\x71\x9E\x37\xBE\x19\x9C\xA4\x9B\x9C\x81\x37\x1E\xC2\x93\x10\x99\x9E\x92\xCE\x34\x28\x2C\x79\x10\xBC\x97\x9A\xCD\x04\x36\xD9\x96\x10\xD3\x96\x9D\x02\x1E\x0C\xEF",
			"\x62\x0D\xD9\x29\x83\xEA\x62\x8D\xD3\x0A\x9A\xBE\x1F\x2C\x6A\x87\x11\x6C\x9F\x1C\x27\x17\x0D\x9E\x9C\x0D\xF8\x78\x76\x91\x95\x2C\xA6\x93\x9C\xDE\x0A\x97\xEA\x1B\x78\xEF\x99\x10\xFA\x90\x9B\xEA\x17\x12\xE1\x0F\x6E\xE5\x08\x7F\x10\x31\x8B\x3C\x86\x10\xB7\x93\x9C\xE7\x04\x36\x0D\xA3\x10\x32\x02\x8D\xE8\x0F\x6E\xEC\x09\x2D\x15\xA2\xA0\xD0\x9C\x38\xEA\x15\x72\x0E\xA2\x8D\xED\x04\x36\x20\xA4\xA1\xD2\x8E\x0E\xEF\x62\x0F\xD9\x2E\x9E\x4E\x97\x9A\xF3\x01\x9F\x1E\x3E\x2C\x0A\x19\x84\x81\x99\x10\xF5\x00\xA3\x0A\x11\x32\x06\x3C\xA2\x40\x83\x9C\xF7\x03\x94\xFA\x08\x7F\x23\x3D\x83\x7A\x79\x10\x55\x87\x9A\xFC\x04\x36\xF8\x93\x10\x47\xA3\x9C\xFD\x0A\xA4\x0A\x15\x9D\x01\x92\x10\xFE\x0A\x7B\xF6\x10\x88\x80\x9B\xA4\x02\x13\xA0\xAE\x8A\x00\x4E\x4F\x83\x84\x2A\x33\x06\x38\x85\x4C\xA2\x8D\x18\x0D\x74\x6A\x36\x78\x54\x82\x8D\x19\x08\xA6\x7F\x34\x77\x6B\xA7\x9A\x1A\x0E\xA6\x2A\x30\xA7\x03\x1A\x8E\x05\xAA\x10\x1B\x0E\x44\xF6\x57\x12\x3C\x36\x30\x76\xA2\x10\x52\xA5\xA3\x06\x13\x02\x4E\x45\x7E\xDA\x23\x34\x3D\x81\xA8\x01\x13\x95\x84\xA3",
			"\x10\x2F\x0C\xA7\xF6\x11\x89\xC8\x83\x10\x8C\xA0\x00\xC0\x83\xA5\x01\x17\x03\x92\xA8\x1F\x54\x30\xA8\x0A\x1C\xA5\xE2\x91\x10\x3F\x0F\xA5\xF6\x16\x35\x06\x30\xA0\x65\xA7\x9A\x4D\x04\xA7\x5B\x39\x86\xAB\xA3\x9C\x4E\x0E\xAA\x81\x30\xAB\xE9\x82\x8D\x4F\x0D\xA9\xF4\x18\x35\x06\x36\xAB\x8D\xA2\x8D\x57\x0A\xAB\x5C\x24\x89\x95\xA2\x10\xBE\xA8\xA9\xD2\x8F\x05\xC2\xA8\x25\xA8\x85\xAC\x01\x15\x30\xE9\x97\x9A\x67\x0E\x44\x4E\x5A\x10\xB0\x81\x99\xD0\xAA\x99\xC3\x9C\x06\x4E\x48\x6B\x72\x0E\x44\x20\x43\x8B\x2A\x76\x10\x6C\x83\x10\x0B\xA3\x9C\x74\x00\xAE\xD6\x76\x31\x5E\x83\x9C\x76\x0E\x44\xC2\x79\x10\xBD\x80\x98\xEC\xAA\xAD\xAE\x89\x07\x4E\x4C\x5C\x7D\x0A\xAE\x09\x19\x39\x3A\x86\x10\x7D\x84\x87\xD2\x8F\x07\xFC\xA4\x3C\x00\x0A\xA3\x8B\x6A\x89\x1C\x43\x76\x33\x8C\x69\x5D\x4A\x13\x0F\xB1\x7B\x2D\x12\xB1\x24\x1F\xB0\x0E\x7E\x16\xC7\x77\x4E\x9C\x60\x42\x3A\x1C\xB1\xA1\x7B\x18\x44\x44\x42\x3A\x12\xB2\x1F\xB3\x6D\x6E\x1A\x67\xD4\x61\x8B\x17\x4E\x74\x9E\x9C\xB2\xB8\x97\x7B\x91\x9E\xB2\x01\xAA\xB2\xA5\x7F\x6E\x32\xB1\x73\xEF\x6F\xB0",
			"\xCC\x5C\xB1\xCC\x5A\x13\x4E\x51\x50\x17\x4F\xB0\x2B\xB7\x12\x17\x4C\xB1\xB8\x62\x15\x47\xB8\x13\xB8\x6F\xB0\x4B\xBB\x19\x0B\x20\x00\x4D\xBD\x6D\xDC\x73\x72\x8B\x62\x7D\xC4\x5F\x4A\x0F\xB8\xB5\x27\x1A\xB5\x1C\x71\x6B\x7D\xAC\x5F\xA9\x4C\xB1\x61\xB9\x6A\x5E\xB1\x71\x0B\x74\xB6\xCE\xA1\x10\xA8\x77\x12\x52\x5A\x12\x6D\xBD\x5B\x9C\x61\x7E\xEB\x12\xB7\x1C\x42\xB7\x18\x70",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
			L"ExprModule",
			L"TypeModule",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" ( _PrimitiveShared @ | _PrimitiveTypeOnly ) >",
			L"[12][_PrimitiveTypeOnly]< \"const\" ( _PrimitiveShared | _PrimitiveTypeOnly @ ) >",
			L"[13][_PrimitiveTypeOnly]< \"const\" @ ( _PrimitiveShared | _PrimitiveTypeOnly ) >",
			L"[14][_PrimitiveExprOnly] BEGIN ",
			L"[15][_PrimitiveExprOnly] END [ENDING]",
			L"[16][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[19][_LongType] BEGIN ",
			L"[20][_LongType] END [ENDING]",
			L"[21][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[22][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[23][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[24][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"*\" @ >",
			L"[26][_LongType]< _LongType \"const\" @ >",
			L"[27][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType @ \"*\" >",
			L"[29][_LongType]< _LongType @ \"const\" >",
			L"[30][_LongType]<< !_PrimitiveShared @ >>",
			L"[31][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[32][_LongType]lrp:(Shared,Type) @",
			L"[33][_Expr0] BEGIN ",
			L"[34][_Expr0] END [ENDING]",
			L"[35][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[36][_Expr0]<< !_PrimitiveShared @ >>",
			L"[37][_Expr0]lrp:(Expr,Shared) @",
			L"[38][_Expr1] BEGIN ",
			L"[39][_Expr1] END [ENDING]",
			L"[40][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[41][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[42][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[43][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[45][_Expr1]<< !_Expr0 @ >>",
			L"[46][_Expr] BEGIN ",
			L"[47][_Expr] END [ENDING]",
			L"[48][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[49][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[50][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[51][_Expr]<< !_Expr1 @ >>",
			L"[52][Module] BEGIN ",
			L"[53][Module] END [ENDING]",
			L"[54][Module]<< !_PrimitiveExprOnly ( lri:(Expr)->_Expr @ | lri:<skip> ) >>",
			L"[55][Module]<< !_PrimitiveExprOnly @ ( lri:(Expr)->_Expr | lri:<skip> ) >>",
			L"[56][Module]<< !_PrimitiveShared ( lri:(Shared)->_LongType @ | lri:(Shared)->_Expr | lri:<skip> ) >>",
			L"[57][Module]<< !_PrimitiveShared ( lri:(Shared)->_LongType | lri:(Shared)->_Expr @ | lri:<skip> ) >>",
			L"[58][Module]<< !_PrimitiveShared @ ( lri:(Shared)->_LongType | lri:(Shared)->_Expr | lri:<skip> ) >>",
			L"[59][Module]<< !_PrimitiveTypeOnly ( lri:(Type)->_LongType @ | lri:<skip> ) >>",
			L"[60][Module]<< !_PrimitiveTypeOnly @ ( lri:(Type)->_LongType | lri:<skip> ) >>",
			L"[61][ExprModule] BEGIN ",
			L"[62][ExprModule] END [ENDING]",
			L"[63][ExprModule]<< !_Expr @ >>",
			L"[64][TypeModule] BEGIN ",
			L"[65][TypeModule] END [ENDING]",
			L"[66][TypeModule]<< !_LongType @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge1_LriTokens, ModuleParserStates, PrefixMerge1_LriAstInsReceiver>(&PrefixMerge1_LriTokenDeleter, &PrefixMerge1_LriLexerData, &PrefixMerge1_LriModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge1_LriTypeName((PrefixMerge1_LriClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseExprModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::ExprModule>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseExprModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::ExprModule>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseTypeModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::TypeModule>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseTypeModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::TypeModule>(tokens, this, codeIndex);
	}
}
