/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge1_Lri
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge1_LriModuleParser.h"

namespace prefixmerge1_lri
{
	void PrefixMerge1_LriModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3698; // 32880 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 114;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\x70\x80\x00\x00\x6A\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x80\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC6\x42\x19\xC6\x63\x15\xEB\xC8\x00\x64\x0D\xE5\x1A\xE7\x2F\xCE\xE5\xDB\xE7\x66\x24\xE3\xCE\xE5\xA6\xFA\xA7\x19\xC6\x68\x0A\xE9\xE4\x87\x6A\x1A\x8B\x1A\xEC\x97\xCB\x7D\x1A\xEA\x3E\xDF\xEC\xEB\x78\x6E\x19\xCF\x18\xEF\xB8\x70\x1A\x85\x1C\x8D\xD0\x22\x56\x40\xFD\x42\x4D\x5D\xB0\x34\x56\x77\x40\x56\xCF\xFF\x54\x4D\xF5\xAD\x74\x4B\x68\x58\x34\x4D\xF1\x43\x99\x7F\x42\x76\xF7\x4A\xD2\xC1\x48\x66\xBE\xD1\xCA\x48\xF6\x72\xEB\xE1\x77\xF4\x56\xDA\xF0\xFB\x4A\xF7\x00\x20\xFD\x6A\xF8\xD9\xE4\xFA\x43\xF9\xAD\x76\xFA\x71\xF7\xEA\x74\x5D\xFA\x09\x25\x7C\xF2\x3A\x2C\x7B\x2B\x2D\x7C\x79\x00\x82\x5B\xF9\x7F\x56\x7F\xEE\x6E\x80\x5F\x02\x8A\x7E\x02\x98\x2C\x7E\xCB\x6A\x38\x06\xD4\x72\x7E\x94\x0A\x84\x26\x34\x30\x83\x02\x89\x8D\x83\x92\x22\x80\x84\x2B\x27\x84\x0A\xA6\x85\x85\x90\x2A\x83\x85\x20\x2F\x84\x0C\xFF\x12\x86\x18\xB5\x83\x85\x37\x88\x84\xFD\x1F\x8C\x47\x01\x86\x25",
			"\x80\x21\x8D\x84\x48\x1B\x80\x2D\x1C\xA0\x84\x88\x7F\x26\x89\x10\x88\x88\x25\x1D\x94\x80\x25\x05\x80\x8B\x4A\x5B\x73\x7D\x26\xB8\x74\x3C\xF8\x7F\x7D\x05\x86\x27\x81\xBF\x14\x89\x7F\x56\x89\x20\xFF\x4A\x39\x8B\x08\x90\x8A\x21\x0A\x18\x2B\x17\xDA\x81\x8C\x83\x19\x81\x3C\x65\x83\x87\x19\x89\x24\x7F\xF8\x4C\x8D\x24\xF4\x75\x8F\x4A\x71\x83\x86\x90\x05\x85\x8B\xAD\x2B\x8E\x19\xF8\x8B\x7E\xAC\x3C\x8D\x8F\xFF\x05\x81\x1A\xE0\x22\x90\x39\x84\x95\x81\x28\x27\x91\x1F\x85\x8A\x8E\x94\x0A\x8A\x82\x6E\x98\x2B\x25\xED\x83\x21\x37\xA4\x3B\x93\x2C\x97\x8D\x48\x4E\x80\x7B\x2D\x83\x22\x8A\x96\x82\x8B\x47\x48\x8D\x7E\x55\xBF\x1C\x95\xCA\x20\x96\x0B\xAE\x94\x94\xF4\x66\x93\x7A\x60\x3C\x85\x1F\xBA\x93\x87\x46\x88\x97\x95\x57\x94\x26\x24\xB3\x8F\x8E\x0E\xA2\x90\x24\xBE\x88\x90\xFD\x63\x80\x8E\x57\x8A\x96\x98\x55\x85\x25\x32\xFD\x80\x97\x66\x87\x9F\x23\x94\x90\x98\x18\xA5\x2C\x96\x18\x93\x9B\x86\x79\x86\x92\x33\xF9\x2A\x9A\x36\x92\x9C\x96\x85\x80\x2F\x30\xB0\x8F\x99\x5C\xAE\x97\x9B\x30\x95\x98\x16\xE3\x94\x8F\x72\x83\x91\x24\xDD\x8B",
			"\x84\x3C\xAB\x81\x9C\x75\xB4\x9C\x8B\xF6\x8E\x91\x48\x7B\x9A\x87\x74\xA1\x7F\x9F\x03\x2B\x93\x5F\x79\x98\x84\x82\x87\x8F\x57\xEB\x8B\x85\x36\xEE\x97\x9B\x7F\x0C\xA0\x84\x0E\xAC\x83\x54\x62\x95\xA3\x62\x94\xA1\x9A\x03\xA8\x9E\x18\x9C\xA0\xA4\x3F\xA8\x89\xA0\xBF\x99\xA0\x26\x9D\x94\xA5\x6D\xA1\x23\xA2\x0B\xAE\x97\x45\xF6\x85\xA5\x55\x81\x9B\x8F\x08\xA2\x20\x20\xEC\x7F\x9C\x91\x86\x24\x99\xF3\x9D\xA3\x49\x9F\xAE\xA4\x64\xBE\xA4\xA5\xFE\x82\xA9\x3D\xC5\x8E\x94\x59\xB1\x85\xA9\x47\xAE\x7B\x13\xA5\x21\x8A\xAC\x3B\xA7\x9E\x20\x33\xA7\x4A\x57\xA2\xA1\xAC\x90\xAD\xA2\x4E\xBF\x21\x58\xB4\x8F\xAB\x9A\xA4\xAD\xA2\xB5\x82\x62\x0F\xA7\x9A\x93\xB2\x85\xAA\xAC\x6E\xA6\x9F\x2C\xE0\xA1\xAE\xAC\xB0\xA8\xAD\x01\x85\x97\x1C\xBF\x8D\xAC\xBA\xBE\xAE\xAC\x63\xA1\xB1\x5D\xDD\xA7\xAE\xB3\xA9\xAC\x6C\x6B\xB8\x95\x4C\x95\xAA\xAA\x94\x2A\xA4\x93\x36\x36\x9A\x59\x85\x8E\x93\xF7\x4C\xB5\xA7\x78\xB1\xB3\xFD\x39\xA1\x21\xCA\xA9\x83\xB0\xBF\x82\xB3\x5F\xEF\xA7\xAC\xC0\xA0\xB2\x99\x79\xB6\x97\x5E\xEC\xAC\xA9\xD1\xB2\xAF\xA9\xAE\xB6\xAD\x69\xA4",
			"\xB3\xAD\xC3\xB9\x71\xB1\xD5\x28\xA4\x22\x8D\xB7\x9D\xCC\x80\xA1\xA9\x93\xAA\x22\x43\xBC\xB8\x9E\xCC\x86\xB4\x9C\xC0\xA4\xB5\x01\x8E\xA2\xB4\xD3\xBE\xB0\xA9\x49\x91\xA9\x67\xFD\xAE\xB9\xE3\x93\x82\xAF\x54\xAD\x22\x6E\xBB\x92\xA6\xE3\xB4\xB7\xB4\x7D\x83\xAD\x44\xA8\x8C\xAB\x5F\x84\xBE\xA8\xCF\xBA\xB2\x30\x9C\xB0\x00\xCF\x9E\x86\xBB\xAF\xA5\xB3\x77\xB1\xB4\xB1\x7F\x23\xB8\x84\xE5\xBB\xB6\x2B\xF9\xBC\xBB\x8A\x8F\xB7\x91\xBF\xA7\xA2\x52\x86\x23\xB9\xEE\x97\xB7\xC0\x66\xBF\xBF\x5C\xE6\xA7\xBE\x9A\xA4\xB5\x9F\x02\xC1\xB9\x42\x7C\xBC\x9A\xF8\xB2\xB5\xB9\xF3\xAC\xC3\x7E\x86\xC9\xC0\xE9\xB6\x23\xBD\x03\xD0\xB9\x6B\x67\xBF\x22\x05\xF0\xB2\xC3\xFE\xBE\xC2\x7B\xA5\x2D\xC1\x5B\x81\x25\x92\x15\xC9\xC4\x7D\xBF\x9D\xC4\xC7\x9E\xC0\xA8\x20\xD2\xC2\x41\x0A\xA3\xC4\x0B\xF5\xB8\xC3\xF1\xB3\xB5\x90\xB5\xC5\x24\x0A\xF0\x84\xC4\xFF\x06\xCB\x0A\xC8\xC6\xC4\x9B\x93\xC5\xA5\x41\xCB\xBB\x76\xB3\x88\xC8\x26\xE0\xBB\x86\x44\xC1\xA5\x7A\xAF\xC0\xCA\xD9\x9E\xA3\xB1\x1D\xD3\xC4\x22\xD9\xC8\xBC\xEB\x99\x91\xB9\x51\xD7\xA7\x7B\xB2\xC5\xBA\xD2",
			"\xA4\xCD\xC4\x37\xDD\xC9\x7D\xED\x9F\x2E\x98\xAD\x36\xCE\xCA\x2A\xC8\x79\x9B\xC5\xA2\x3D\xF8\xBC\xBD\x46\x85\x81\xA0\x9A\xB7\xCE\x42\xCA\x3D\x80\xF7\xBE\xCC\x4D\x0A\xDB\xAA\x3E\xE6\xAC\xD1\x28\x30\xD1\x91\xAE\x90\x6E\x43\xED\xBE\xD2\x00\x10\xC1\x5D\x48\xB6\x20\x05\x80\xAA\x84\x5C\xAA\x81\x23\xC1\x3A\x21\x38\x85\x83\x24\x3C\xC2\x21\x1C\xA9\xD1\x21\x55\xDA\xBE\xD2\xF2\x29\x21\x1C\xB1\xD6\x21\x59\xEF\xD6\xD0\x40\xA3\xD5\x6A\x83\x20\xA8\x51\xD8\xD3\x3F\x4F\xD7\xBB\x4F\x8A\x20\xD9\x00\xC3\x26\xD7\x96\xCD\x00\xA7\xC7\xD6\xA1\x81\x0A\xD9\xD8\x9D\xC2\xB8\xA6\xA1\xDD\xD8\x9D\xBB\xD2\x20\xBA\xC9\x21\x80\x42\xDC\xD6\x85\x1B\xD9\xDA\x09\x39\xDB\x43\x0A\x29\x43\x84\x25\xDE\x20\x2C\x56\xD2\x8E\x50\xD3\x21\x75\xC6\x24\x48\x09\x2A\x4A\xB1\x82\x20\xDF\x77\xD1\x22\x21\x53\x49\x21\xBE\x86\x2B\xDF\x81\x16\x00\xD3\x71\x83\x26\x11\xCF\x2A\x21\x67\xD8\xD1\x21\x7D\x0F\x8E\x27\xF4\x7F\xDB\x83\xC3\x26\x0F\x0A\xF2\xD9\x42\x6E\xD4\xD0\x11\xBF\x09\xE2\x23\xA9\x22\xB2\x16\xD2\x84\x40\x18\xE0\xDC\x06\x30\x04\xA6\xA2\x81\x11\x8F\xDB\xD1\x21",
			"\x92\x5C\xE3\x7A\x1E\x94\x52\x95\xE9\x3C\x7E\x22\x03\xE6\x42\x02\x16\xE4\x81\x1E\x90\x50\x2E\xE6\x23\x20\x35\xE1\x20\xAE\x9B\x06\xE1\x09\x24\x10\xCF\x80\x0E\xE6\xA0\xC6\x25\x10\x43\xED\x91\xAA\x46\xE2\x20\x43\x09\xEA\x21\x4B\xEC\xE8\x00\x07\x13\xE8\xA0\xB4\x02\xEA\x01\x28\x13\xD0\xA2\x8A\x06\x99\xC9\x21\x11\x43\xF4\x7F\x0F\x5E\xE6\x20\x45\x03\xEE\x93\xE1\x59\xE7\x40\x0B\x1F\xE9\x84\x17\x5A\xED\x02\x2C\x13\xD0\xDC\xAB\x06\xB2\xC3\x25\x11\x6D\xE6\x23\xB7\x70\xE1\x20\x47\x33\xEA\x21\x3E\x16\xEE\x40\x0F\x13\xE8\x39\x18\xD0\xC6\xB4\x27\xE2\x27\x8B\xEB\x3C\x79\xA3\x3A\xE0\x8D\x76\xB7\xA1\x23\x2C\xAA\xAE\xB1\x8B\xC5\xB4\x20\xD7\x7A\x3A\x58\xCE\x43\x5C\xA8\xF3\xB8\x23\x24\xAD\xA2\xC3\x76\x6B\xDC\xDC\x49\x23\x25\xDB\x40\x5C\xA7\xDC\xD2\xC6\x52\x81\x03\xF8\xD3\xEF\x66\x30\xA8\xC4\xE1\xF2\x21\xE9\xDB\xA1\x42\x75\xD7\x3A\x4C\xDE\x91\x8E\x0E\xA7\xE1\xBF\xCC\x72\x70\xD6\x86\x23\xF4\xA8\xEA\x22\x95\x10\x93\x67\x02\xAA\xF1\xF9\x09\x23\x4C\xF3\xBC\x68\xF8\x2E\xE9\x3B\x24\x65\x4B\xAA\x41\x3F\xEA\xFA\xD7\xD9\xD4\xD8\x0A\x35\xFB",
			"\xE4\x8A\x20\x4F\xE9\xF8\x32\x84\x9E\x8F\xF9\x40\x6A\xF3\xFD\x84\x1E\x01\x63\x9F\xE5\xE3\x50\xF8\x33\x25\x0F\x0D\x75\xE1\x02\x2C\xD5\xFB\x86\x2C\x4E\xF3\xD8\x71\x20\x0C\x26\x6F\xD7\x7F\x27\x8D\x39\x7B\x03\x1D\x7A\xD0\x76\x10\x31\x7E\x7F\x54\x34\x71\x02\x16\x80\x09\x80\x39\x87\x2C\x7B\xF4\x6B\x79\x13\x1B\x6C\x4C\x2A\x40\x5C\x54\x81\xD6\x74\x7F\x0A\x19\x72\x20\x73\x10\xA0\x2D\x7D\x8A\x5C\x6C\xF1\x61\x7E\x16\x89\x10\x51\x7D\x7B\xE9\x18\x7F\xD3\x57\x82\x09\x1C\x7E\x8F\x7A\x10\x22\x74\x82\x86\x21\x80\xDE\x72\x6F\x2C\x8E\x81\x09\x14\x2B\x09\x12\x42\xBE\x26\x83\x00\x08\x80\x1D\x8E\x6F\xF8\x69\x82\x83\x36\x28\xFF\x6E\x7E\x48\x83\x10\xD1\x26\x10\x5C\x79\x31\x4B\x86\x10\xF6\x73\x80\x09\x15\x77\x3F\x80\x78\x52\x8A\x10\xFD\x7C\x83\x06\x13\x76\x59\x89\x10\xF8\x2C\x80\x23\x1B\x7C\xFC\x6D\x84\xA5\x76\x28\x66\x83\x10\xEF\x76\x85\x06\x10\x30\x61\x86\x10\x18\x34\x86\xCA\x7A\x10\x55\x8E\x85\x03\x1D\x31\x71\x83\x10\x2D\x34\x87\x09\x1B\x86\x02\x1D\x85\x1C\x23\x12\x31\x3B\x87\x02\x1A\x33\x7E\x86\x10\xD2\x76\x10\x1A\x08\x86\xB9\x3A",
			"\x2B\x8B\x83\x10\xE2\x73\x83\x09\x12\x34\x42\x83\x1E\x0E\x85\x84\x02\x11\x89\x02\x12\x83\xE6\x19\x34\x6A\x6C\x1B\x3A\x84\x7C\xD1\x71\x8A\x89\x7A\x10\x52\x36\x88\x01\x18\x36\x42\x83\x85\x27\x76\x10\xD9\x77\x7C\x8E\x80\x00\x6E\x37\x89\xE6\x11\x8B\x3B\x83\x10\xB8\x8D\x89\xB3\x8A\x37\xB6\x8A\x1B\xDC\x7A\x7B\xB0\x86\x8A\xB7\x79\x10\x7F\x3A\x8A\x00\x0F\x05\x57\x45\x7E\x50\x8A\x10\x8D\x8A\x6F\xB3\x84\x39\x89\x8C\x21\xCF\x86\x10\x6D\x88\x87\x02\x1B\x39\xEC\x62\x10\xA9\x33\x8D\x02\x15\x8D\x03\x17\x87\x83\x8A\x10\xAF\x3B\x8D\x01\x17\x3B\xDE\x81\x10\xE0\x81\x88\xB3\x8C\x06\x18\x81\x10\xC6\x39\x8E\x00\x01\x8C\x03\x1B\x8E\x86\x27\x37\x54\x34\x8F\x02\x1B\x8B\xF7\x85\x7C\x4C\x2E\x26\xD0\x8E\x86\x03\x18\x3C\xF2\x83\x1E\x00\x96\x8D\xB3\x86\x78\xE6\x80\x00\x76\x09\x31\x07\x91\x8E\xB3\x87\x07\xEF\x80\x00\x7B\x0E\x90\x5C\x83\x8B\x7C\x03\x91\x80\x09\x31\xCC\x83\x10\xC3\x7D\x8F\x09\x11\x08\x8D\x3D\x91\x02\x17\x8D\xE3\x89\x10\x82\x03\x91\x86\x0C\x91\x76\x83\x8B\x87\x03\x91\x8B\x0C\x92\x09\x12\x88\x11\x81\x77\x13\x90\x09\x19\x36\x92",
			"\x9B\x83\x8B\xB3\x7A\x1B\xE2\x82\x10\x0F\x95\x93\x8F\x8B\x1E\x34\x91\x10\x24\x90\x92\x49\x87\x28\x38\x77\x86\x02\x92\x10\x91\x0D\x38\x4B\x9C\x86\xB3\x82\x09\x13\x96\x09\x19\x31\x95\x02\x1F\x93\x48\x93\x10\x97\x03\x91\x9B\x07\x95\x17\x9D\x94\x01\x1C\x09\x13\x90\x0A\x19\x3B\x80\x4C\x98\x8D\x01\x11\x0A\x8D\x38\x96\x52\x92\x96\x00\x02\x0A\x13\x96\x0A\x67\x9D\x92\x70\x97\x0A\x13\x9B\x0A\x75\x93\x93\xB3\x8C\x0A\x13\x90\x0B\x19\x33\x28\x02\x8A\x96\x00\x01\x0B\xC4\x8B\x27\x1A\x22\x98\xB9\x82\x94\x00\x03\x0B\xE2\x20\x00\xB6\x07\x45\x58\x9A\x89\x01\x15\x02\x0A\x1C\x28\x70\x9D\x93\xBC\x1F\x28\x09\x18\x99\x84\x9A\x99\xB4\x10\x82\x03\x1E\x99\x27\x96\x10\xB8\x07\x98\x54\x3D\x72\x06\x14\x9A\x8C\x9A\x0B\xA8\x9A\x2B\x16\x1B\x7B\xB3\x8C\x0B\x8F\x93\x1E\x8A\x94\x8A\x06\x11\x9B\xC2\x85\x9A\x03\x1F\x0B\x13\x93\x0C\x57\x46\x99\xC8\x8E\x29\xB2\x90\x97\xC5\x03\x91\xE3\x1A\x9A\xAB\x7A\x10\xC4\x96\x10\xA7\x29\x99\xBE\x36\x1E\xCD\x9B\x98\x5B\x92\x10\xC9\x07\x6D\x01\x1E\x0C\x57\x43\x82\x21\x82\x10\xDC\x93\x10\x1C\x8B\x7F\x03\x10\x0D\xC8",
			"\x96\x1E\xB1\x23\x6F\x01\x1F\x9D\xB8\x9C\x9B\x02\x14\x0D\xD8\x90\x00\xD9\x07\x45\x41\x8D\x9D\x01\x1F\x9C\x06\x1A\x02\xB3\x8B\x0D\x8D\x36\x9F\x03\x1F\x02\xB3\x8C\x0D\x13\x90\x0E\x19\x3B\x82\x02\x1C\x9F\x8C\x90\x9A\xB8\x14\xA0\xE9\x9C\x93\xD1\x9A\x1B\xFE\x99\x10\xD3\x97\xA0\x0D\xAC\x1B\x35\x87\x9F\xB3\x81\x0E\x8D\x35\xA1\xFD\x93\x8B\xE2\x03\x91\xE6\x09\x31\xE7\x90\x9E\xB3\x87\x0E\xE5\x9A\x1B\x5D\x78\x8C\x21\xAB\x9E\x8C\x9B\x0E\xEF\x90\x0F\x57\x49\x76\xE8\x90\x00\x33\x0A\x10\xE1\x94\x89\x06\x12\x0F\xB5\x96\x1E\xEF\x28\x8C\x33\xAF\x8B\xBC\x13\x12\xF5\x03\x91\xF9\x07\x45\x08\x3B\x90\x57\x7D\x83\xB3\x8B\x0F\x8D\x37\xA4\x06\x13\x9F\xEC\x91\x10\xFC\x03\x91\x97\x67\x66\xF8\x1E\xA4\x02\x1D\xA3\x9F\x93\xA1\xB4\x1B\x71\x06\x1E\x83\x84\x91\x00\x43\x7C\x3A\x5C\xA3\x10\x56\xA5\x9D\x2F\x6F\x46\x5C\x56\x00\x61\xA6\x1E\x4F\x82\xA2\x70\x97\x00\x6F\x46\x7B\xDD\x17\x32\xB2\x2D\xA6\x02\x13\x89\x9F\x8D\x10\x71\xAB\x1E\x29\x35\xA7\xE0\x70\x97\x0B\x0B\xA7\xE9\x1D\x87\x54\xAE\x84\xAF\x98\x69\x0D\x0F\x46\x22\x40\x01\x82\xA6\x10\x85\x8B",
			"\x9B\x02\x1F\x76\x06\x15\x2D\x70\x92\x01\x6B\xA5\x3A\x27\xA3\xA9\xB3\x83\x01\x97\xA3\x33\x99\xA3\x10\x11\xA6\xA6\x00\x04\x01\x6F\x4E\x89\xBA\x18\x33\x42\x8F\xA9\x57\xA3\x8B\x20\x0F\x46\x2E\x87\x28\x96\x85\xA8\x02\x18\x85\x9A\xA0\x97\x2E\x0D\xA9\x3C\x3B\x77\xB5\xA4\x98\x2F\x08\xAB\x92\x30\x00\x30\xA3\x10\x94\xA4\x98\x30\x0E\xAB\xFF\x70\xAC\x0A\x1C\x89\xA2\xA1\x03\x6F\x47\x5F\x23\x14\x34\xB2\x21\xAC\x02\x11\xAA\xE2\x91\xA9\xA5\xAB\x1E\x4A\x32\x84\xD2\xA6\x94\xB3\x85\x04\xCD\xAB\x1E\xA9\x82\xAB\x01\x1B\xAD\x00\x01\x94\xA2\xAD\x04\xDF\xA9\x1E\x5A\x31\xAD\x0A\x18\xA5\x4F\xA0\x00\x55\x0E\xAA\xEB\x1F\x35\xB2\x21\x78\x09\x13\xAC\xEF\xA3\x06\xC6\xA4\x35\x60\x8B\xAB\xEF\xA4\x06\xFB\xAA\x2B\xFD\xA3\x10\xCA\xA5\xAD\x01\x15\x06\xE9\xA8\x1F\xAC\x82\xAE\x00\x03\xB0\x02\x17\x94\x06\xB0\x00\x6D\x09\xB0\x1C\x2C\x36\xB2\x2E\xB0\x01\x16\xAE\x11\xB5\x07\x14\xBC\x24\xB5\x8C\xB0\xEA\x26\x69\x8F\x70\x42\x58\x76\x73\x8A\x77\xB2\xCB\x20\x7A\x20\x1E\x49\x36\x12\xA7\x2C\x1E\xB2\xC0\x47\x78\x1A\x2F\x7D\x32\xB2\x2B\xF5\x3A\x16\x4A\x42\x42",
			"\x36\x1A\xB3\x90\x73\x6D\x6A\x1A\x68\x5C\x56\x13\x41\xB4\x79\xEF\x94\x74\x45\xB4\x6D\x13\x9A\x40\x46\xBB\x90\x4B\xBD\x8C\x49\xB4\xB4\x4C\xBC\x55\x3A\xB1\x7F\x13\x94\x3F\x00\x07\x51\x57\xB0\x3F\x0A\x46\xB5\x5B\xB3\x12\x0A\x4C\xB2\x4A\xB7\x19\x6A\x18\x63\x34\x10\x54\x2C\xB6\xB6\x62\xB6\xB3\x68\xB5\x6D\x2F\x89\x71\x96\x61\x7C\x19\x5D\x48\x2C\xB2\xB7\x23\x14\xB7\x12\x76\x69\xCE\xAD\x60\x71\x46\xB5\x7B\xB4\x6A\x00\x77\x70\x01\x7E\xB7\x0C\xB0\x00\x97\x77\x70",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ | lri:<skip> ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr | lri:<skip> ) >>",
			L"[59][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr | lri:<skip> ) >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ | lri:<skip> ) >>",
			L"[61][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr | lri:<skip> ) >>",
			L"[62][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ | lri:<skip> ) >>",
			L"[63][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType | lri:<skip> ) >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge1_LriTokens, ModuleParserStates, PrefixMerge1_LriAstInsReceiver>(&PrefixMerge1_LriTokenDeleter, &PrefixMerge1_LriLexerData, &PrefixMerge1_LriModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixmerge1_lri::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge1_lri::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
