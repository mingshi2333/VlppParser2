/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge2_LriRequired
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge2_LriRequiredModuleParser.h"

namespace prefixmerge2_lrirequired
{
	void PrefixMerge2_LriRequiredModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3766; // 33747 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 182;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\xD3\x83\x00\x00\xAE\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x9E\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC3\xE1\x42\x18\x95\xEB\xC0\x03\x18\x8D\xE4\x1A\x85\x19\x9D\xEF\xCE\xE1\xD9\xE6\x66\x15\xEB\xCC\x96\xE7\xEA\xAF\x19\xAB\xFE\xCE\xE5\xEB\xB4\xE6\x78\x1A\xE2\x99\xDC\x8A\x1A\x86\x6B\x38\xE7\xE7\x72\x6D\x1A\x8E\x19\xEC\x92\xEE\xE2\xE3\x40\x6F\x04\xF8\xE7\xEF\x77\xE8\xE6\xE8\x1C\xCA\xCB\x71\x1E\x86\x72\x0D\xE3\x1E\x86\x74\x11\xFD\xF3\xF6\xEB\x53\x22\x56\x40\xFD\x42\x4D\x5D\xB0\x34\x56\x77\x40\x56\xE3\xFF\x54\x4D\xFA\xAD\x74\x4B\x68\x58\x34\x61\xF1\x43\x99\x7F\x42\x7A\xFB\x4A\xE6\xC1\x48\x66\xBE\xE5\xCA\x4C\xFA\x72\xFF\x61\x3F\xFA\x58\x2E\x7C\x02\xAB\x22\x7E\x00\x14\x7D\x6B\x76\x7D\x7C\xFC\x4A\x23\x7F\xAD\x2A\x82\x72\x71\x7E\x7E\x7A\x7D\x79\x21\xF9\x64\x3E\x5E\x70\x7B\x25\x00\xA4\x3C\x82\xD2\x47\x83\xAF\x12\x82\x80\x11\xBC\x2E\x82\x0E\x98\x80\x56\x08\x8F\x7A\xE5\x2C\x80\x7D\x06\x88\x26\x07\xB4\x24\x26\x12\x9F\x85\x83\x31\x85\x26\x0D\xB4\x8B\x25\x1D\xBC\x82",
			"\x87\x39\x81\x26\x0F\xBF\x80\x25\x21\x84\x8F\x1F\x46\x84\x89\x12\xBF\x8B\x88\x1E\x88\x83\x86\x3C\x57\x82\x41\x19\x85\x87\x20\xA0\x27\x85\x60\x2D\x88\x0D\xD8\x8F\x2E\x2D\x95\x8C\x83\x28\x2F\x88\x0A\xA8\x29\x82\x2A\xAB\x27\x7D\xF7\x61\x8E\xEF\x64\x3C\x81\x09\xA9\x86\x20\x1B\x9F\x2C\x1A\x8D\x8A\x8D\x84\x10\x82\x39\x6D\x85\x84\x19\x8A\x2A\x00\xAC\x33\x8E\x8D\x75\x86\x21\x0B\xE1\x39\x8F\x1B\xBB\x89\x21\x08\x85\x80\x18\xA5\x28\x81\x44\xAB\x25\x90\x47\x80\x25\x06\xF1\x8D\x35\x3F\xBA\x8C\x91\x0F\x98\x28\x24\x91\x9F\x1F\x0C\xBD\x88\x2C\x96\x86\x90\x26\xA1\x88\x25\x4D\x91\x91\x83\x8E\x88\x26\x17\xA6\x82\x90\xAC\x2B\x91\x90\x03\x23\x90\x79\x2F\x90\x89\x45\xA1\x22\x8C\xE4\x6F\x8F\x40\x66\x8A\x94\x2B\x9F\x24\x8B\x11\x9E\x97\x3F\x40\x9A\x38\x5A\x82\x8A\x98\xB8\x9C\x7E\x2E\xE7\x70\x2C\x28\x91\x96\x99\x47\x81\x94\x27\xC3\x9B\x8C\x9A\x26\x97\x88\x93\x90\x86\x2D\xA0\x22\x9A\x4E\x88\x87\x8E\x84\x82\x9A\x27\xDA\x99\x8D\x92\x1D\x99\x92\xC4\x81\x9F\x36\x9F\x28\x94\x72\xB4\x8D\x24\xD0\x84\x8B\x39\xC7\x8D\x90\x4D\xA2\x99\x2F\xEE\x80",
			"\x92\x39\xC8\x99\x92\xB0\x17\x9C\x88\xE3\x8D\x9A\x30\xF3\x94\x89\x74\xAC\x8F\x9E\x88\x99\x9F\x25\xA1\x21\x9F\x1F\x84\xA7\x87\xF5\x9E\x9C\x42\xF0\x8A\xA0\x51\xA1\x27\xA1\x4E\x9D\x9D\xFD\x13\xA3\x21\x4F\xBF\x2D\xA1\x3C\x98\xA3\x16\xBF\x5F\x9F\x1F\xAD\x9A\xA0\xEB\x9F\x1C\x48\xB4\x82\xA4\x10\x93\x2E\x9E\x29\xB9\x98\x4A\xE5\x97\xA2\x7E\xB6\x88\xA6\x34\xB2\x90\x1F\x95\xA3\x9B\x96\xAC\x91\x96\x38\xAF\x9D\x48\x27\xAF\xA2\x61\xAB\xA2\x91\x39\xBF\x95\x35\x8F\x9C\xA2\x81\x14\x90\x80\x03\xB6\xA6\x41\x60\x97\xA1\x98\xBB\xA3\xA6\x42\xBC\x9A\x54\xC0\xA2\xA2\xAB\x89\xA1\x8B\xC2\x86\x99\x11\xE1\xAB\xAA\xF1\x63\x8D\x24\x65\x98\x2B\x53\x8B\xA0\x25\xA3\xAB\x23\xAD\x16\xAD\xAC\x59\xA9\xA2\xAD\x8F\x35\xA8\x89\x73\xA9\xA8\x5E\xA9\xA9\x98\x81\x52\x8B\x97\xAE\x99\xAD\x56\xF6\xA2\xB0\x7D\x87\x9C\xAE\x85\xAC\xAC\x61\xFC\xA5\x83\x5C\x87\x93\x8A\x81\xA8\xB2\x64\xFA\xA7\xAF\xCA\x89\xB1\xAE\x8B\xBA\xAD\x5F\xE4\x6F\xAE\x66\x85\xA9\xA5\x6E\xA8\x26\x4F\xB0\x96\x26\x75\xBA\xA9\x83\xB2\x83\x80\x68\xD1\xAC\xB1\xD2\x8B\x85\xA9\x01\x29\xB5\x0F\x97",
			"\xB3\x9A\xCB\x93\xB3\xB0\x7B\xB4\xB0\x6D\xDE\x9D\xB0\x65\x8F\xB0\xB0\x60\xB7\xB6\x61\xE3\xA2\xB8\xC5\xB9\xB0\xB7\x77\xBB\xB3\xEF\x1D\xB5\x3A\x9E\x9C\x91\xB4\xFB\x8D\xB4\x45\xDD\xA7\xB4\x85\x22\xA0\xBA\x0C\xAC\xB6\x66\xF8\x94\xBA\xDC\x99\x82\xA4\xB6\xBA\xB6\x74\xDC\xAD\x8B\xB2\xB1\xB1\xB2\xE2\xBB\xBB\x09\x8E\xB8\xAD\x86\x0E\xBF\x99\xDA\xA8\xBB\x6E\x91\x97\xAF\x92\xBC\x80\xAE\xD3\x98\xBA\x56\xE3\xBE\xB4\x6B\xB0\xB0\x00\xB2\xB2\x85\x7C\xC3\xB9\xB2\xF9\x85\xB8\xB3\xFF\x16\xBC\x0D\xF8\xBF\xB8\x61\x8C\xC0\xBE\x29\xA3\xB7\x28\xD3\xBB\xA2\xAF\x86\x22\xA4\x0F\xC7\x8A\x7E\x9F\x29\xC2\x22\x9B\xC2\xA5\x46\xA3\xC2\x71\xF5\xB2\xC4\x04\xD1\xA5\xC2\xD5\xA9\x21\x87\xF2\xA1\xC3\xF9\x87\x89\xBC\xB8\xAA\xC0\x4D\x2B\xCC\x87\x0F\xD2\xC7\x96\xAE\xAF\xB6\x85\xE4\xBD\x34\x1B\xEE\xC4\x88\x32\xC7\x8E\x79\x80\xC1\xA8\x02\xDD\x93\xA9\x02\xCD\xC7\x81\xD3\x91\xC8\xD1\x83\xCC\xAA\xFE\xBB\xC6\x40\x1E\xAD\xC7\x12\xF5\xB7\xC7\x4C\x82\x99\x93\xA5\x24\xC6\x1A\x9F\xC5\xCB\xAA\xBA\xAF\x8D\xD7\x8C\xBA\x14\xDE\xBE\xBA\x6A\xA1\xC5\x4A\xE0\xC8\x87\xD5",
			"\x8A\xC9\xBD\x31\xD6\xC8\x6F\xDF\xA6\xCC\x23\xF2\xA7\xB3\x62\xD8\xC8\x0F\xDB\xC5\xA6\xFE\xA7\xBD\xBB\x76\xC8\xC8\x3C\xF2\xC4\xBE\x2D\xC4\xD4\x9E\x1A\xBA\xC5\x8A\x86\x24\xCA\xE5\x2C\xC9\xC9\x7A\xAF\xD1\x7B\xF4\xCD\x34\xA2\xAD\x32\xD2\x21\x38\xD0\x48\x1A\xDC\xC2\x07\xFF\xBA\x8B\x19\x80\xD5\x8E\xCA\x39\x82\xC4\x19\x82\xC1\x9C\xDF\x1D\xAA\xAB\xD2\x98\xB8\x63\xD4\xC8\xAF\xC7\xC5\x5D\x65\xC3\x20\x0F\x94\xAE\x86\x70\xBE\x81\x28\xC1\x3A\x21\x42\xA5\xD7\xAA\x06\x25\x91\xA3\x81\x22\xD8\xF7\xAF\xD2\x3E\x09\x25\x90\xB2\xC1\xDA\x21\x65\xC0\xBB\xD4\x54\xBB\xD5\x6F\x83\x24\xAA\x5D\xEF\xD0\x00\xFB\x2A\xC7\xB4\x8B\x2A\x21\x6C\xD4\xC5\xD6\x68\xCF\xD5\x03\x34\xD6\xAD\x9B\x89\x23\xDC\xDA\xCB\xBF\x85\xD7\xD9\xD7\x44\xCE\xAB\xDB\xAA\x37\xD9\x80\x6A\xD4\xDA\x85\x33\xDE\x20\xD6\xCF\xD4\x83\x06\x29\x43\x84\x3D\xDE\x20\x2C\x4F\xD6\x8E\x69\xD6\x21\x81\xC6\x24\x48\x09\x2A\x4B\xB7\x82\x28\xE1\x83\xD1\x22\x21\x53\x49\x21\xC4\x86\x23\xE3\x81\x16\x07\xDA\x85\x83\x26\x16\xCF\x2A\x20\x74\xD7\xD9\x21\x83\x03\x92\x2C\x88\x87\xDF\x8F\xC3\x24\x10",
			"\x22\xE1\xDD\xC1\xD7\xD6\x87\x42\x29\xE6\xDC\x06\x2A\x5B\xAB\xB6\x86\x11\x97\xF8\xDA\x21\x30\x0C\xE6\x42\x07\x16\xE7\x59\xC9\x22\x52\x33\xEB\x3E\x2C\x94\x51\xE9\xF4\x08\x82\x04\x3A\xE9\x20\x22\x3D\xE2\x20\x59\x80\x55\xE8\x06\x29\x10\xD3\x81\x20\xAF\x0D\x26\xE1\x21\x8A\x13\xE8\x00\x55\xE7\xEA\x83\x0B\x12\xEB\xA1\x89\x55\xD7\x82\x2C\x10\xB0\xCA\x22\xEC\x63\xE0\x01\x23\x5A\xE4\xAA\x1A\x29\xE9\x20\x8E\x1A\xEA\x0D\xBB\x09\xE8\xFC\x08\x80\x5F\x50\xFC\x42\x2C\xBF\x05\xEE\x0E\x61\x97\x5A\x79\xE2\x23\x23\x5A\xE0\xAF\x6F\x41\xF1\x20\x90\x06\xED\x42\x61\x57\xF0\x00\x11\x14\xF0\x0A\x2A\x5D\xE3\x92\x1A\xEB\x3A\x17\xD9\x95\xBC\x3F\xE2\x2C\xA3\xEB\x3C\x83\xA3\x3A\xE3\x8D\x6A\xBB\xA1\x23\x20\xAE\xB8\x85\x91\xC0\xBC\x38\xD7\x7A\x3A\x56\xD2\x26\x70\xA8\xF5\xB4\x23\x26\xB3\xCD\xE7\x79\x77\xF4\xDC\x49\x23\x3E\xDB\x40\x70\xAF\xDE\x1E\xCC\x4E\x83\x1B\xF7\xD9\xED\x3A\x34\xAA\xCC\xF1\xF2\x21\x01\xEF\xA5\x42\x0D\xE7\x3B\x6B\xF2\x95\x90\x22\xBF\xE1\xC5\xE0\x75\xF7\xE6\x89\x23\xF6\x86\x43\x26\x95\x24\x93\x67\x0C\xBA\xF0\xF7\x0A\x23\x4C",
			"\xF7\xBC\x68\xFA\x00\x06\xF8\x37\x23\x25\x4C\xA5\x82\x26\xEB\xF5\xFF\xCA\xF9\x06\x3F\xF9\x40\x65\xFF\xF2\x85\x30\x4B\xFC\xB8\x36\x86\x2C\xF2\xF8\xDB\xD5\xCA\x26\x03\x19\x3F\x7A\x1D\x70\x6C\x1C\x23\x12\x1F\x0D\x38\x25\x73\x65\xFE\x79\x10\x7C\x28\x7F\xCB\x30\x00\xFB\x63\x10\xCC\x70\x7E\x09\x1F\x74\xAD\x4A\x36\x00\x09\x7C\x03\x1D\x7B\x14\x86\x10\x48\x7E\x80\x54\x36\x70\x03\x1A\x81\x1D\x80\x39\x87\x23\x81\x01\x18\x82\xA3\x73\x11\xE4\x66\x28\x1E\x40\x57\x2A\x87\x7E\xDD\x13\x12\x40\x77\x73\x09\x10\x2A\xEE\x74\x10\xF0\x60\x00\x0A\x73\x10\xF4\x76\x1E\x23\x18\x76\xCD\x79\x1E\x09\x8F\x7E\x03\x1D\x83\x02\x1C\x7F\xF5\x79\x10\x39\x79\x83\xE3\x11\x81\xB4\x79\x70\x82\x67\x7C\x09\x14\x2B\x09\x16\x43\xBE\x29\x83\x1C\x81\x10\x08\x47\x71\x12\x7B\x80\x9A\x37\x28\x5E\x86\x10\x00\x89\x1E\x23\x11\x2D\x06\x16\x43\x3A\x09\x31\x63\x83\x10\x07\x86\x86\x0A\x14\x77\x57\x8A\x10\x3E\x0C\x86\x0A\x1D\x80\xF8\x13\x12\x7C\x73\x87\x09\x18\x77\x17\x88\x1F\xDB\x74\x71\x60\x86\x82\xE3\x11\x88\x03\x15\x86\x79\x8A\x10\x00\x3C\x87\x06\x18\x31\x20\x8A",
			"\x7D\x0A\x1F\x86\x89\x89\x10\x1D\x3C\x88\x03\x1D\x32\x8F\x8A\x10\x86\x82\x10\x78\x85\x80\x0A\x11\x33\x96\x82\x10\x3A\x39\x89\x09\x12\x7E\x06\x1A\x01\x83\x89\x3B\x4C\x26\x8A\x3E\x89\x8A\x01\x12\x34\x4E\x86\x1E\x22\x84\x7D\xA5\x8D\x6D\xAE\x80\x00\x4A\x31\x8B\xBA\x18\x84\x5C\x81\x7E\x53\x88\x7E\x0A\x12\x35\xA1\x81\x10\x68\x39\x83\x6D\x82\x10\x36\x4A\x7E\x06\x1F\x83\xBA\x13\x12\x6E\x3A\x8B\xBC\x1A\x8C\x43\x86\x10\xD2\x89\x84\xB7\x8A\x37\xD0\x84\x1B\xED\x70\x7F\x03\x15\x8D\xBD\x80\x87\x09\x1F\x37\xC3\x80\x00\x5F\x0B\x46\xF7\x79\x86\x0A\x18\x8A\x5F\x80\x8E\x06\x14\x39\xA4\x88\x1F\xEA\x84\x86\xB7\x8C\x39\x04\x73\x10\xAA\x3F\x8E\x03\x11\x8F\x6E\x87\x8B\xB0\x35\x8F\x02\x1D\x3B\xF8\x82\x10\xFA\x8C\x89\xB7\x8C\x06\x2D\x80\x00\xD0\x31\x90\x01\x1B\x8D\xF9\x87\x8B\xC3\x7C\x1B\x0C\x92\x10\xDE\x8B\x82\x18\x83\x1E\x6E\x2B\x8E\x93\x86\x10\xD3\x3A\x90\x87\x27\x91\xF2\x8C\x8E\x03\x15\x3D\xFE\x81\x10\x76\x09\x31\x1E\x9B\x8F\x20\x92\x10\x77\x07\x90\x7B\x06\x92\x77\x87\x8B\x7C\x07\x90\x80\x09\x31\xE7\x83\x10\xD3\x79\x7D\x0A\x11\x08",
			"\x8D\x35\x93\x02\x18\x88\x9E\x89\x10\x82\x07\x90\x86\x04\x93\x91\x87\x8B\x87\x07\x90\x8B\x04\x94\x0C\x87\x8B\x8C\x07\x90\x90\x09\x31\x3E\x92\x10\xAC\x85\x82\xAA\x86\x28\x92\x83\x10\x27\x94\x95\xCC\x3B\x1E\x9D\x82\x10\x3C\x98\x93\x15\x96\x1E\x16\x86\x93\xB7\x81\x09\x8D\x33\x96\x3D\x97\x8B\x92\x07\x90\x96\x09\x31\x68\x91\x10\x57\x9A\x95\x00\x07\x09\x07\x9B\x09\x6E\x9F\x92\x29\x91\x10\x9C\x07\x90\xA0\x09\x31\x1F\x82\x88\x79\x90\x00\xA1\x0D\x38\x7F\x97\x88\xB7\x82\x0A\x07\x96\x0A\x7E\x95\x94\x81\x97\x0A\x07\x9B\x0A\x8B\x9B\x94\x81\x9C\x0A\x07\x90\x0B\x19\x33\x28\x0E\x71\x98\xB1\x0F\x8B\x7B\x2A\x21\x98\x93\x8D\x3F\x96\x10\xB3\x02\x2E\x00\x06\x0B\x6B\x4F\x96\xE6\x7A\x10\x25\x0A\x10\x8C\x21\x98\x0F\x94\x1B\x8F\x29\x10\xAD\x99\x91\x84\x86\x1E\x35\x83\x10\xB3\x91\x9A\x03\x18\x0B\x9C\x94\x35\x44\x76\x10\xB9\x92\x97\xBA\x0D\x9B\xBA\x26\x11\xCB\x77\x8B\xBC\x04\x9A\xE3\x1F\x99\xB4\x86\x10\xC6\x9C\x8D\x72\x9F\x0B\x07\x93\x0C\x6B\x4B\x9A\xE3\x8E\x29\xC7\x91\x98\xC5\x07\x90\xE3\x1F\x9B\xBB\x7A\x10\xD8\x96\x10\xA7\x2E\x9A\xB3",
			"\x36\x1E\xE1\x90\x9A\x72\x99\x0C\x3B\x8E\x0C\x6B\x48\x83\x36\x86\x10\xEE\x92\x81\xB7\x80\x0D\xDC\x96\x1E\xB1\x2B\x70\x01\x11\x9F\xCD\x9A\x9B\x02\x14\x0D\x3B\x89\x0D\x6B\x49\x85\xEF\x93\x10\xE3\x96\x10\x2A\x07\x8B\xDB\x0D\x38\x05\xA3\x10\x2F\x07\x8B\xDC\x07\x90\xE0\x09\x31\x42\x82\x10\x0B\xA2\x97\xAF\x98\x1B\x13\xA9\x9F\x0E\x95\x9E\xBA\x1D\xA0\x09\x17\x9E\x16\xAC\xA1\xBC\x1D\x84\x06\xA7\x8B\xE1\x0D\x38\x24\xAC\xA0\xB7\x82\x0E\x07\x96\x0E\x19\x37\x9F\xF2\x91\x98\xE7\x05\x9F\xBA\x1B\x86\xE3\x80\xA3\xFB\x92\x97\xEB\x0B\x83\xF0\x0B\x46\x8C\x78\x9F\x00\x03\x03\x0A\x1A\x82\x4B\x86\x10\xF2\x0A\x9C\xE6\x1F\x2E\xE3\x82\xA4\xD9\x80\x8C\x09\x15\x0F\x07\x99\x0F\x6B\x48\x30\x23\x90\x00\x6E\x75\x85\xB7\x8B\x0F\x8D\x37\xA5\x06\x12\xA0\xFC\x91\x10\xFC\x07\x90\xB0\x6E\x7B\x86\x2E\xA5\x02\x1C\xA4\xB4\x95\x95\x87\x22\x73\x06\x16\x85\x69\xA1\x5B\x5A\x7D\x3A\x6C\xA3\x10\x66\xA0\x96\x53\x13\x48\x70\x56\x00\x71\xA6\x1E\x68\x81\xA3\x6F\xA0\x00\x07\x03\x48\x32\x8B\x1C\x27\x32\x2B\x7D\xA2\x10\xCC\x89\x79\x0D\x12\xA8\xEB\x19\x32\x86\xA6",
			"\x8B\x81\x9B\x00\x8C\xA9\x1E\x98\x8F\x87\x03\x17\xA8\xDF\x8F\xA7\x0D\x03\x48\x36\x40\x01\x93\xA6\x10\xA0\x80\x9D\x01\x10\x78\x06\x15\x2D\x81\x92\x01\x7B\xA6\x3A\x36\xA6\x10\x20\xA6\xA7\x12\x83\x48\x4A\x86\x1E\x38\x39\x83\xAB\xA3\x10\x68\xAF\xA5\x00\x0F\x01\x83\x45\x84\x87\x20\x8B\x96\xA2\x10\x72\x85\xAA\xB7\x8D\x02\x9F\xA6\x82\xC1\xA3\x10\xB5\xA1\xA2\x1D\xA9\xAA\xBC\x16\x78\xC2\xA1\x98\x30\x0C\xAC\x3C\x3F\xA3\x03\x16\xAA\x7F\xA1\x03\xD2\xA5\x3C\x75\x85\x8B\x81\x92\x03\x83\x4A\x60\x23\x14\x34\xB2\x2B\xAD\xAC\xA7\x8B\x3A\x00\xAB\xEB\x19\x8B\xA2\xA0\x00\xE4\xA3\x10\x5F\x94\x91\x8D\x8F\xAD\xEB\x12\x8C\xBF\xA1\x10\xED\xA2\x10\x59\x9E\xAA\xA2\x82\xAF\xE9\x1A\x35\xE3\xAA\x10\xB7\xA2\x97\x56\x0B\xAB\xEB\x1F\x35\xB2\x2B\x87\xCF\xAF\xA7\x64\x05\xAC\x6A\xA8\xB0\x03\x17\xAF\xFA\xA6\x28\x66\x09\xAD\xE9\x2A\x10\xD6\xA8\xAB\x67\x04\xB1\x54\x3A\xA4\x06\x13\x95\x11\xB0\x00\x68\x0C\xAF\xF8\x15\x8C\xF5\xA0\x00\x1C\xBE\xAE\xB7\x80\x07\x22\xBC\x21\x6C\x32\x2B\x27\xB8\xAF\xB7\x88\x07\x2B\xBC\x24\xCF\x85\xB2\x7E\x85\xAD\xB7\x80\x08",
			"\x0C\xBB\x95\x7D\x8A\x10\x2F\xBF\xB1\xE3\x12\x08\x1A\xB3\x12\x8B\x83\x6A\x9F\x74\x43\x6F\x71\x85\xAF\x62\x4B\x36\x1C\xB4\xB0\x79\x12\x4F\xB0\x12\x4C\xB3\x12\x83\xA9\x9A\xF0\x38\x40\x36\x16\x50\x56\xB1\x6B\x1A\x29\x40\x6A\x1E\x45\x36\x46\x13\x61\xB0\x7A\xEC\x6A\x16\x60\x60\x57\x36\x18\xB6\xA4\x7B\x83\x5B\x7C\xB6\xED\x67\x90\x1E\x4D\xB6\x55\xA2\xB7\xE8\x80\xB7\x6B\xB3\xB7\x70\x51\xB6\x02\x87\x90\x58\xBB\x52\x00\x07\x54\x1E\x4D\xB7\x6B\x4F\xB7\x5D\xB1\xB7\x97\x1A\x16\x50\x64\x13\x54\x5C\xB4\x8B\xB7\xB8\xB2\x20\x00\x8D\xBE\x6E\x46\x85\x6F\xD7\x61\x7D\x2D\x51\x4A\x4C\xB8\xB9\x23\x1A\xB9\x2A\x73\x6A\xE0\xA2\x63\x85\x41\xB7\xA1\xBC\x6B\x39\x80\x00\x85\x41\xB6\xA7\xB4\xBA\x75\xB9\x6C\x1F\x75\x48\x68\xBE\xBA\xAA\xB4\xA6\xA5\x50",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr ) >>",
			L"[59][Module]<< !_PrimitiveExprOnly @ >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ ) >>",
			L"[62][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr ) >>",
			L"[63][Module]<< !_PrimitiveShared @ >>",
			L"[64][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ ) >>",
			L"[65][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType ) >>",
			L"[66][Module]<< !_PrimitiveTypeOnly @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge2_LriRequiredTokens, ModuleParserStates, PrefixMerge2_LriRequiredAstInsReceiver>(&PrefixMerge2_LriRequiredTokenDeleter, &PrefixMerge2_LriRequiredLexerData, &PrefixMerge2_LriRequiredModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
