/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge2_LriRequired
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge2_LriRequiredModuleParser.h"

namespace prefixmerge2_lrirequired
{
	void PrefixMerge2_LriRequiredModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3644; // 32665 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 60;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\x99\x7F\x00\x00\x34\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x82\x1A\x87\x12\x85\x17\x0A\xB5\x0A\x8A\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\x91\x9E\x90\x93\x18\x17\x91\x9A\x42\x19\x14\x99\x7B\x06\x66\xA0\x9E\x99\x97\x6F\x9F\x90\x9D\x77\x1C\x2A\x98\x7E\x07\x6D\x9D\x7F\x06\x86\x20\x0A\x46\x5F\x84\x46\x84\x80\x96\xA0\x81\x80\xAC\x6F\x08\x1A\xA4\x09\x9E\x9C\x8C\xA2\x9D\x90\x00\x25\x1A\x86\x0A\x9F\x84\x9A\x9E\xA2\x8B\x73\x8D\xAA\x41\x0A\x1A\xAA\x04\xA6\xA1\x67\xA0\xA1\x9F\xA5\x83\xA9\x7D\x0B\xA2\xA4\x85\xA1\x8A\xAA",
			"\x4F\xAC\xAC\x90\xA6\x9A\x89\x4E\x08\xAA\x95\xA1\xAB\xAA\xA5\xEB\x58\x4B\x93\x98\xBC\x8F\xA0\x0E\x86\x31\x1F\xA7\xAE\xAD\xAD\xB8\xA2\xA9\x77\x34\x1A\x8A\x45\x42\x7F\x83\xB3\xA9\xAD\xCF\x87\xBB\x70\x0E\x1A\xB9\x02\xB1\xB1\xC4\xAF\xA5\xAA\xB3\x99\x8E\xAC\x0C\xAD\xD2\xA9\xAC\x6D\x0F\xE0\x9C\xB1\xAE\xB9\xE2\x99\xBD\xAF\x78\x3E\x25\xB8\xB5\xB4\xE8\x90\xBD\xB6\x42\x3F\x2E\xBA\xB6\xAB\xEB\x9B\xBF\xB9\x77\x40\x36\xB9\xBC\xBE\x8F\xB0\xA9\xB8\xBC\x1C\x81\x1E\xBD\xC0\xFA\x8C\x92\x13\xC1\x02\xF2\xB7\xBB\xBE\x0F\xF7\xB6\xB0\x7E\x43\x1A\x84\x10\xC3\x09\xFD\xA5\x10\xC6\x00\xC6\x1C\xC7\xC4\x10\xE3\x47\x13\xC1\x48\x1A\x89\x13\xC7\xEA\x88\xC0\xC1\xC3\xE1\xAB\x7A\x12\x86\x4B\x28\xC4\xC2\xC4\x29\xE3\x7C\x12\xCC\xF3\xAD\xCA\xCE\x41\x4D\x1A\x8E\x10\xCE\x11\xFF\xB0\xC8\xCD\x33\xFD\xAF\x10\xD0\x03\xF9\xC6\x40\x14\x48\xCE\xC9\xD1\xD0\x2A\xC3\xD2\xD1\xCA\x51\x0D\xDB\xCC\x87\x52\x07\xC3\x16\x86\x54\x16\xD1\xBF\xD5\x44\xCA\xD1\xCA\xD3\x64\xC9\x45\x16\xD7\x03\x56\x1A\x87\x15\x68\xE1\xD0\xD4\xCB\x5F\xF8\x78\x15\xDB\xBD\x99\x16\x9C\x87\x5B",
			"\x34\xD1\xD5\xCD\x19\xFB\xD5\xD3\xA3\x5C\x3A\xD0\xDF\xD8\x60\xD3\xDF\xDD\x17\x82\xFD\xDE\x16\xDE\x5F\x1A\x80\x19\xE2\x2B\xFD\xD3\xE2\x40\x61\x10\xE2\xD6\xDF\x62\xEE\xD3\x4A\x18\x96\xFC\xD1\xE7\xE7\x97\xE3\x73\x1B\xDD\x9A\xEB\x75\x1A\x86\x66\x24\xE6\xE1\x77\x68\x1A\x89\x19\xE7\x7F\xD3\xEB\xEB\x72\x6A\x30\xE9\xE7\xEC\x4F\xF9\xEB\x7B\x1A\xB6\xCB\x7C\x1A\x86\x6D\x3A\xDE\x1A\x86\x6F\x3D\xEA\xED\xE1\x8F\x87\x22\x56\x40\xFD\x42\x4D\x5E\xB4\x34\x56\x77\x40\x56\xCF\xFF\x54\x4D\xF5\xAD\x74\x4B\x68\x58\x34\x4D\xF1\x41\xB3\xAD\x42\x76\xF7\x4A\xD2\xC1\x48\x66\xB9\xD1\xCA\x48\xF6\x72\xEB\xE1\x77\xF4\x56\xDA\xF0\xFB\x4A\xF7\x00\x20\xFA\x72\xF8\xD9\xE4\xFA\x43\xF9\xAD\x76\xFE\xFB\xFC\xEA\x6E\x61\xFA\x09\x25\x7C\xF2\x3A\x2C\x7B\x2B\x2D\x7C\x79\x5D\x7B\x50\xFA\x4B\x7A\x39\xFE\x6B\x80\x00\xFC\x22\x80\xFD\x44\x80\x2B\x0E\x98\x83\xA2\x0A\x84\x27\xF7\x48\x80\x25\x11\x9D\x81\x02\xF2\x70\x84\x12\xA5\x21\x84\x22\x87\x86\x09\xA1\x28\x85\x14\xA0\x25\x85\x2E\x9F\x1C\x0C\xAE\x83\x87\x14\xB5\x82\x84\xF4\x7C\x80\x8F\x03\x86\x21\x02\xB4\x27",
			"\x86\x1D\x99\x80\x58\x40\x8C\x81\x5D\x64\x3C\x88\x2B\x28\x88\x4A\x39\x85\x82\x94\x05\x86\x87\x49\x8B\x84\x48\x42\x8F\x2E\x25\xA5\x24\x8A\xFD\x72\x8B\x47\x56\x81\x24\x26\x90\x7E\x82\x3D\x98\x28\x17\xD3\x8B\x51\x31\x9F\x20\x8B\x10\x9A\x8A\x0C\xEA\x8E\x8A\xF4\x60\x8B\x20\x50\x88\x26\x0E\xB1\x8F\x1F\x39\xB1\x83\x7B\xE3\x6B\x8A\xEA\x64\x38\x7E\xE5\x3C\x83\x20\x07\x9F\x2E\x1D\xAE\x88\x8F\xFC\x7A\x89\x21\xFC\x77\x7E\x1A\x85\x8A\x00\xEA\x6A\x8D\x90\x7E\x93\x82\x41\x0F\x81\x3D\x3E\xBF\x7E\x89\x7B\x9E\x81\x1E\xA5\x23\x91\x14\x90\x97\x92\x57\x99\x93\x4A\x16\x92\x82\x4C\x89\x21\x90\xAD\x3D\x92\x08\x9F\x95\x95\x50\x88\x90\x2B\xA4\x94\x8F\x47\x0C\x9E\x91\x0F\xA5\x24\x95\xB2\x9F\x1C\x1A\x95\x9B\x90\x51\xB2\x8A\x8D\xAA\x9D\x80\x2E\xB2\x94\x7E\xFA\x74\x21\x96\xB2\x85\x80\x2A\xEC\x7F\x90\x36\xBB\x78\x96\xBD\x89\x21\x23\xE0\x21\x99\xF8\x76\x95\x8B\x8B\x48\x98\x1D\x85\x86\x99\x11\x97\x98\x24\xD5\x8B\x27\x30\xF4\x85\x98\x68\x9F\x9B\x96\x79\x35\x97\x26\xA1\x23\x9D\x18\xB4\x79\x91\xBC\x87\x9F\x3F\x34\x94\x9B\x66\xB2\x9B\x97\x7C\x91",
			"\x9B\x54\x6A\x96\x90\x4E\xB6\x9B\x9D\x64\x89\x21\x37\xA8\x2A\x9B\x18\x8A\x9C\x9F\x91\x88\x25\x3B\xAE\x8F\x9C\x73\x80\xA0\x9D\xD2\x88\xA0\x28\xEC\x9E\x98\x23\x87\x9A\x9F\xD7\x38\x2B\x42\xA9\x85\x9C\xB0\x05\xA6\x85\x07\xA0\x2F\x46\xB8\x8F\x98\x8F\x98\xA2\x20\xD3\x9F\x2F\x48\xC1\x89\x9B\x93\x81\x23\xA0\x2A\x92\x9E\x19\xEB\x82\xA7\x8A\x86\x21\x98\x88\x3F\x8F\xF4\x60\x2B\x99\x89\xA0\x9A\x8D\x3D\xAD\x95\x48\x61\x95\x85\x9A\x86\xAF\xA1\x34\xA8\xAB\x4C\xB3\xAD\x8C\x88\x7A\xA5\x3A\x62\x8A\x8F\x52\xD2\xA4\xAB\xA3\xBD\x9C\x85\x55\xA8\xA9\x53\xEE\x6F\xA8\x82\x11\xAE\xAA\x09\xB1\xA6\x52\xD9\xA7\xAB\x17\xA4\xA9\xAC\x58\xB7\x9D\x00\xDF\x86\x95\x30\xB5\x9A\x9E\x44\xB7\x96\x4D\xB6\x2A\x90\x79\x85\x84\x92\xE4\x31\xAF\x50\xFF\x95\xAD\x33\xB4\xAF\x2F\x1F\xA9\x87\x5D\xDF\xA3\xAC\xB0\xBE\xA3\x8B\x67\xA7\xB1\x52\xFD\xAB\xB0\xB4\xA6\xAA\xAD\x14\x8C\xAD\x49\x4F\x84\xB0\xC6\x93\xAE\xB0\x42\xAF\xB1\x61\xDA\xAB\xAC\x37\xAD\xA8\x8E\x12\xB9\xB3\x47\x7A\xA0\x25\x95\x85\x8E\x20\x41\xB7\xA2\x5D\x8A\x2B\xA4\xD2\xA3\xB4\xAF\x8E\xBE\xAF\x29\x8E",
			"\xAC\xB1\x02\xAB\xA7\xB2\x9B\xAC\xB0\x3E\xBF\x83\xAE\x81\x38\xAC\xB7\x98\xB9\x97\x56\xB3\x7D\xAB\x38\xBE\x98\xAE\xB0\xAA\xB0\x6E\x96\xBA\x8D\xC0\xA2\x81\xB5\xB2\x8E\xB7\x3F\x26\xB2\x93\xBF\xB9\x9B\xB5\x16\xBE\x98\x52\xD4\xB5\xA9\xDC\xB1\xB5\xB1\x8A\xAE\xB9\x07\xD0\xB4\x8E\xE9\xA4\xB9\x86\xD2\xBC\xBA\x2B\xA8\xB4\xB7\xEF\xB6\xB0\x2B\xE7\xAE\x86\x79\xC0\x94\xBE\xE4\xB2\x9A\xBD\x69\xA8\xAA\x78\xD6\x9C\xB2\x81\xAD\xBA\xB1\x21\xA2\x91\x72\xA2\xB0\xBC\x02\xCB\xBF\xBB\xFB\xAB\x25\x7C\xA9\x89\xBD\xDE\xB4\xAA\xB5\x48\xA3\xB3\x5B\xDB\xB9\xB0\x02\xC9\xC2\xA1\x0E\xC0\x03\x6F\xA3\x9E\xA4\x00\x30\xA3\xAF\xF7\xB5\xC1\x2E\x97\xC2\xAE\xC8\x86\x20\x9E\xD7\xB1\xC2\x42\x29\xA9\x95\x01\xF9\x97\xC0\xCA\xAD\xB8\x50\xF5\xB8\xA9\x05\xE2\x85\xC1\x26\xC0\x93\x7F\x84\xCF\xBC\x9E\xB4\xC4\xB1\x36\xDD\x82\x74\xB8\xCE\xBB\xF0\xAE\xC4\x98\xBE\x85\x24\x89\xA1\x21\xC1\x16\xE1\xC1\xB8\xB2\x8B\xC9\x69\x99\xCB\xC2\x82\x9D\xC7\xC3\x3F\xAF\xC9\x91\x96\xC7\xC8\x72\xA5\xA0\xB0\x1D\xCC\xC6\x72\x41\xCA\x92\x20\xD7\xC8\x2B\xDC\x90\xBF\x8C\xF2\x94\xCC\x05",
			"\xEB\xCA\xC5\xCC\x48\xCF\xB5\x4A\x35\x80\xC4\x35\xCA\xCE\x09\x22\xBD\x9B\xA8\x2B\xCF\x92\x3D\xC9\x24\x7F\xC0\x26\xDD\x56\xB1\x20\xBC\xA3\x25\xA3\x06\x31\x81\x50\x8A\x88\xC4\x45\xDD\xB3\x20\xAC\x81\x3A\x42\x24\x97\xCF\x88\xB9\xCB\xC5\x93\xD8\xD3\x05\x84\xD0\x00\xF9\x17\xD1\x21\x9E\xC6\x20\x29\xA1\xD0\xB4\x4E\xE8\xC1\xD2\x8F\xCB\x21\xAA\xAA\x3C\xD2\x00\x3B\x3B\xB6\x91\xA7\xC6\x42\x2F\xDC\xBD\x58\xD0\xD5\xD5\x0D\x09\x9E\xAD\xAA\xD9\x21\x5C\xF0\xD7\xA6\xAC\xAD\xD7\xA2\xDF\xCA\xC7\x5D\xEC\xD4\xD3\x01\x46\xD8\x00\x28\xC9\xD8\x60\xC9\x20\xD5\x09\x2C\x42\x41\x19\x49\x20\x6A\xC6\x24\x45\x9C\xDA\x47\xAF\x83\x2A\xDA\x83\x04\x49\x21\x4A\x55\xD6\xB7\x8A\x2F\xDA\x83\x21\xDB\x20\x53\x49\x21\xBA\x86\x2B\xDD\x81\x16\x05\xD5\xA4\x83\x24\x10\xCF\x2A\x20\x5F\xED\xD1\x21\x77\x14\x90\x5E\xF4\x7D\xD9\x7B\xC3\x20\x0F\xFA\xC1\xD9\x42\x5D\xD6\xBB\x08\xB9\x09\xE0\xAF\x89\x21\xB2\x1C\xD1\x82\x3D\x08\xE6\xD9\x06\x33\x54\xC3\x8A\x2B\x0F\x87\xF5\x2A\x21\x8A\x53\xE1\x7A\x78\xA1\x52\x8D\xF8\x3C\x7E\x7D\x5E\xE3\x40\x7C\x06\xE2\xDF\x8A\x23\x4F",
			"\x22\xE2\x21\x1F\x25\xE1\x21\xA0\xA9\x4E\xDF\x06\x3E\x0C\xCB\x80\x0E\xE4\x98\xC6\x27\x0F\x33\xEC\x94\x0B\x36\xE3\x20\x40\x39\xE2\x21\x3B\xFC\xE5\x40\x01\x13\xE6\x14\xF2\x02\xE8\x01\x22\x13\xCC\x91\x86\x5B\x94\xFD\x54\x7E\xFD\x4E\xEB\xA3\x78\xA4\x5C\xA9\xE3\x3C\x95\x37\x0D\xD5\x04\x83\x13\xE7\xA0\xBA\x02\xEB\x0A\x24\x13\xCF\x89\x2B\x06\xB0\xC9\x25\x10\x5D\xEA\x21\xBB\x52\xE6\x11\x99\xF0\x0D\xD5\x58\xDD\x3B\xBD\xF8\xAB\xDF\xF5\x3B\xB6\x3C\xF2\xDA\x6F\x70\x8F\x53\x25\xA0\x81\xAC\x94\x55\xDC\x36\xA3\xE9\x3E\x51\x34\xE9\x39\xA8\x81\xF4\x37\x48\x24\xD6\xE4\xE4\x43\xDC\xF0\xB3\xDA\xD7\xB4\x87\x6A\x81\x79\xED\xD2\x76\x8F\x48\xC5\xDC\xCB\x33\x24\x6C\xFB\x99\x21\xE5\xD9\xA0\xA7\xF8\xA4\x95\x95\xB7\xDD\xDD\xCC\x65\x6E\x5B\x86\x2C\xF1\x5E\x63\x26\x4A\xD9\xA0\x61\x01\xB4\xDC\x43\x91\x25\x49\xF6\x97\x6D\xF6\x87\xEB\x33\x25\x97\xDF\xF6\x20\x6C\x5E\xBE\x11\xF4\x74\xF6\x81\x3A\xF3\x3C\x23\x3D\x03\xC1\x11\x88\xAF\xE2\xC1\x26\xF9\x7C\xEA\x20\x9E\x38\xF4\x36\xC4\xF5\xDA\xD3\xF8\x23\x24\xCA\x93\x9A\xF5\x81\x3D\xD8\xA5\xBC\xEA\x21",
			"\xC8\xDC\xF8\x78\x69\xC3\x21\xF4\x4C\x43\x25\x08\x7A\x6E\xF3\x81\x16\xDD\xF6\x13\x3A\x6C\xC1\x82\x2D\xFD\xF4\xDD\xFC\x49\xE8\xE1\x21\xFE\xD1\xF9\x20\x44\x5B\xDC\x49\x0A\x41\x54\xFB\x7B\x79\xF7\x66\x11\xCA\x61\x74\xBF\x75\x6A\x10\x73\x10\xE7\x66\x7C\xE1\x72\x2B\x49\x64\x1B\xDF\x75\x68\x11\x11\x79\x90\x79\x10\xBF\x22\x7C\xF8\x16\x7E\x8D\x76\x6E\x11\x88\x1B\x23\x17\x74\x71\x69\x10\xCB\x29\x80\x02\x1F\x7E\xA9\x79\x10\xEF\x69\x10\xB7\x79\x7D\xF7\x7D\x2B\x2B\x8C\x7A\x0F\x86\x10\x59\x7A\x81\x1C\x23\x7F\x2F\x5A\x10\x31\x83\x10\xD0\x78\x7C\x0A\x1D\x74\x26\x8D\x2B\x0D\x89\x83\x2A\x8F\x81\x72\x7A\x10\x65\x73\x82\x06\x1B\x76\x41\x80\x00\x3B\x82\x10\x11\x40\x7B\x32\x87\x81\x06\x11\x75\x4D\x83\x1E\xBE\x72\x7A\x06\x12\x85\x3C\x83\x83\x03\x1B\x30\x36\x8C\x24\xC1\x7D\x84\x5C\x89\x82\x2E\x89\x10\x17\x3A\x84\x03\x13\x32\x61\x81\x10\xCA\x7A\x86\x02\x1D\x82\xE8\x6E\x85\x02\x17\x32\xD4\x7F\x37\x72\x82\x10\x75\x24\x85\x03\x1F\x32\xFF\x71\x10\x3F\x37\x87\xDD\x19\x87\x6E\x84\x87\x01\x17\x34\x7F\x80\x00\x5B\x32\x88\xCB\x14\x88\x00\x03",
			"\x7D\x67\x86\x10\x5D\x39\x88\x73\x3C\x88\xBD\x7A\x10\x8E\x8E\x83\xC8\x38\x85\x0A\x15\x86\xAE\x7F\x82\x8F\x2A\x01\x0A\x18\x7A\x9F\x89\x10\x83\x64\x7E\x71\x33\x10\xA2\x89\x10\x7B\x81\x89\x03\x1A\x05\x92\x73\x10\x8B\x36\x89\x0A\x1B\x8A\x06\x1F\x86\xAE\x82\x10\x8D\x39\x88\xA3\x34\x8B\x09\x16\x8B\x03\x10\x89\xF0\x79\x10\x64\x01\x8B\x02\x1D\x3A\xBE\x80\x7C\xA3\x86\x88\x00\x0F\x3A\xC9\x8C\x21\x63\x83\x10\xAD\x83\x8C\x06\x15\x3B\x89\x83\x3C\xCF\x82\x10\xD1\x82\x10\xB8\x84\x8D\x03\x15\x3C\x89\x83\x07\x07\x3B\x8D\x01\x12\x8C\xF6\x79\x10\x74\x06\x8C\x01\x18\x07\x07\x33\x8D\x02\x1F\x84\xA5\x89\x8A\x4C\x2D\x8D\x02\x10\x8C\xE7\x82\x8F\xBD\x26\x8E\x01\x14\x8E\xFC\x78\x8F\x8F\x2B\x7D\x73\x8C\x87\x02\x19\x07\x7A\x30\x90\x7A\x8C\x8C\x7A\x0A\x8E\x00\x0E\x07\x07\x36\x90\x85\x82\x90\x01\x1F\x07\x0A\x93\x08\x0D\x92\x7D\xCC\x84\x08\x0A\x98\x08\x07\x33\x7E\x01\x99\x8B\x01\x19\x08\x7A\x3C\x91\x07\x90\x91\x00\x0A\x08\x0A\x9E\x08\x1B\x9A\x10\xF4\x81\x8F\x03\x1F\x08\x0A\x93\x09\x29\x99\x10\xFA\x8D\x8F\x03\x14\x09\x0A\x98\x09\x07\x3B\x7E",
			"\xEA\x6C\x8C\x98\x73\x1E\x3A\x96\x10\xEE\x8C\x92\x02\x19\x09\x73\x61\x10\x9C\x09\x93\x2A\x9C\x8C\x9D\x05\x94\x00\x00\x0A\x48\x92\x93\xCC\x81\x0A\x4C\x94\x0A\x07\x34\x11\xA0\x7C\x8C\xA5\x06\x84\xCB\x12\x92\x14\x89\x10\x56\x97\x85\x78\x7A\x10\xA7\x0C\x94\xAA\x0B\x47\x3F\x9A\x85\x03\x19\x71\x06\x1E\x7F\x1E\x90\x00\xAC\x0A\x95\x8E\x2D\x71\x6B\x9C\x8C\xAE\x00\x97\xEB\x13\x29\xFD\x7C\x93\x92\x36\x1E\x06\x83\x6E\x24\x90\x0B\x4C\x93\x1E\x6C\x98\x96\x02\x1D\x97\x84\x92\x94\x01\x13\x0B\x0A\x97\x0B\x7B\x42\x97\x17\x79\x10\x9C\x27\x95\x24\x99\x0B\x0A\x93\x1E\x28\x0A\x90\x91\x96\x10\x2B\x0A\x97\xA0\x34\x1B\x99\x97\x98\x34\x92\x10\xBD\x0B\x6A\x00\x02\x0C\x7B\x48\x80\x03\x1A\x40\x9E\x22\x99\x6D\x94\x0C\x95\x96\x1E\xC1\x29\x88\xAB\x90\x96\xBA\x13\x12\xC8\x04\x9A\xCD\x0B\x47\x25\x89\x9A\x0A\x1B\x99\x09\x17\x99\x24\x9F\x0C\x7A\x3E\x9B\x06\x17\x2A\x24\x90\x0D\x0A\x94\x0D\x07\x38\x9A\x02\x14\x9C\xDE\x85\x3A\xE9\x1C\x9C\x01\x13\x9B\xCF\x98\x3B\xEB\x16\x9C\x06\x1F\x99\xF7\x84\x38\xF8\x12\x71\x06\x10\x9C\x6D\x95\x0D\x7A\x3E\x9D\x03",
			"\x18\x9D\xD5\x90\x00\xD6\x0A\x90\xDA\x07\x30\xBA\x2E\x97\x6D\x9B\x0D\xAF\x9A\x1B\x5F\x70\x87\x01\x1D\x9E\xA0\x9A\x89\x06\x1F\x0D\xA4\x94\x0E\x7B\x45\x75\xE2\x63\x10\xB1\x9E\x9E\xE7\x96\x0E\x81\x96\x1E\x06\x34\x9F\x00\x01\xA0\xF7\x91\x96\x09\x19\x0E\x0A\x9D\x0E\x7B\x49\x86\xFF\x92\x10\x22\x86\x10\x19\x8D\x96\xEF\x0A\x37\x15\xA3\x10\x33\x0C\x8C\xF0\x0A\x90\xF4\x07\x30\x1D\xA9\x10\x0A\xAB\x9D\xD0\x98\x1F\x0B\x76\xA1\xCC\x85\x0F\x7A\x39\xA2\x1C\xAC\x8C\xF6\x0A\x90\xFA\x07\x30\xBB\x92\x10\xFB\x78\x9F\x03\x1B\x0F\x76\x99\x10\x25\x36\x44\x35\xA1\x10\xC7\x7C\xA0\x06\x1D\x0F\x3B\xA6\x10\x76\x88\x8A\x03\x1F\xA3\xAE\x6C\x93\x45\xAD\x87\xCA\x2D\xA4\x7F\x51\x00\x94\x4A\x68\x94\x44\x3F\x31\x3D\x86\x00\x05\x83\x06\x16\x03\xCC\x86\x00\x33\x78\x79\xD4\x20\x99\xCC\x87\x00\x94\x4D\x83\xE6\x1D\x33\x58\xA1\xA6\x06\x15\xA2\x88\x90\x00\x13\x04\x49\x13\x8F\x28\x88\x88\xA4\x02\x10\x84\x03\x1C\xA5\x24\x91\x02\x55\xA0\x8A\x76\xA2\x10\x6A\xA7\x9E\x82\x9F\xA5\xE6\x13\x9F\x5B\xAC\x8C\x24\x02\xA8\x00\x39\x84\x85\xA4\x92\x25\x08\xA8\x97\x3F",
			"\x2D\x45\x84\x92\x26\x04\x49\xE2\x53\x12\x4C\x36\x44\x90\xA9\x9D\xCC\x8E\x02\x65\xAB\x1E\x55\x38\xA5\x99\xA3\x10\xFC\x88\xA3\x02\x1A\x03\x94\xAB\x1E\x8B\x84\xA7\x01\x11\xAA\xF5\x8C\x8C\x42\x07\xAA\xE9\x13\x89\xAA\xA0\x00\xAC\xA1\x10\x6C\xA1\x9A\x01\x1A\x04\x70\xAB\x1E\x67\x36\x44\xFE\x97\xA7\xCC\x88\x05\x7B\xA8\x3C\xBF\xA2\x10\xB5\xA8\xAB\x8F\x2A\x05\x8E\xA4\x1B\x4C\x80\xAC\x24\x9B\x05\xCB\xAF\x37\xF5\x21\xA9\x6D\x9C\x05\xB0\xA8\x1F\x6A\x36\x44\xD3\xAA\x8C\x24\x94\x06\xD7\xAC\x21\x6C\x3A\xAD\xB5\x8C\x8C\x6C\x0F\xAD\x4C\x25\x89\xB3\xA6\x85\xCE\xAD\x96\x74\x03\xAC\xFE\x8A\xAE\x02\x1B\xAD\x80\xA6\x1E\x76\x01\xAD\xDD\x17\xA0\x84\x68\x7C\x1D\x48\x74\x1D\x84\x68\x86\x64\x6F\xA8\x29\x78\x21\x1F\xAF\x70\x9B\x79\xBA\x47\x6F\xF8\x4B\x7B\x70\x7A\x21\xF5\x3A\x16\x44\x41\x41\x36\x10\xB1\x79\x72\x6C\x6A\x14\x66\x8F\x79\x88\x0A\x44\x73\xA4\x9A\xB1\xCA\x6C\xB1\x13\xA2\x10\x41\x50\xB1\x17\xBF\xB1\x1E\xB4\xB2\x22\xBC\xB0\x41\x54\x3F\x25\xB6\x5D\x38\x55\x4D\x0A\x46\x68\x19\xB3\x12\x0A\x4A\xB2\x28\x6E\x14\x35\xB4\x13\x28\x66\x68",
			"\x39\xB7\x19\x0C\xBB\xB3\xC4\x6D\xAF\x03\x18\x62\x36\x16\x7A\xA6\x5C\x4A\x86\x66\xB4\x23\x18\xB4\x02\x7C\x69\x95\xAB\x5F\xA4\x49\xB1\x4F\xB2\x69\x58\xA0\x00\xA4\x40\xB1\x55\xB2\xB5\x89\x68\xB5\x84\x64\x4A\x41\x54\xB5\x0A\x9E\xB5\x46\x46\x13",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[23][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[24][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[25][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[26][_LongType]< _LongType \"*\" @ >",
			L"[27][_LongType]< _LongType \"const\" @ >",
			L"[28][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[29][_LongType]< _LongType @ \"*\" >",
			L"[30][_LongType]< _LongType @ \"const\" >",
			L"[31][_LongType]<< !_PrimitiveShared @ >>",
			L"[32][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[33][_LongType]lrp:(Shared,Type) @",
			L"[34][_Expr0] BEGIN ",
			L"[35][_Expr0] END [ENDING]",
			L"[36][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[37][_Expr0]<< !_PrimitiveShared @ >>",
			L"[38][_Expr0]lrp:(Expr,Shared) @",
			L"[39][_Expr1] BEGIN ",
			L"[40][_Expr1] END [ENDING]",
			L"[41][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[42][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[43][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[45][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[46][_Expr1]<< !_Expr0 @ >>",
			L"[47][_Expr] BEGIN ",
			L"[48][_Expr] END [ENDING]",
			L"[49][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[50][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[51][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[52][_Expr]<< !_Expr1 @ >>",
			L"[53][Module] BEGIN ",
			L"[54][Module] END [ENDING]",
			L"[55][Module]<< !_PrimitiveExprOnly ( lri:(Expr):_Expr @ ) >>",
			L"[56][Module]<< !_PrimitiveExprOnly @ ( lri:(Expr):_Expr ) >>",
			L"[57][Module]<< !_PrimitiveExprOnly @ >>",
			L"[58][Module]<< !_PrimitiveShared ( lri:(Shared):_LongType @ | lri:(Shared):_Expr ) >>",
			L"[59][Module]<< !_PrimitiveShared ( lri:(Shared):_LongType | lri:(Shared):_Expr @ ) >>",
			L"[60][Module]<< !_PrimitiveShared @ ( lri:(Shared):_LongType | lri:(Shared):_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared @ >>",
			L"[62][Module]<< !_PrimitiveTypeOnly ( lri:(Type):_LongType @ ) >>",
			L"[63][Module]<< !_PrimitiveTypeOnly @ ( lri:(Type):_LongType ) >>",
			L"[64][Module]<< !_PrimitiveTypeOnly @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge2_LriRequiredTokens, ModuleParserStates, PrefixMerge2_LriRequiredAstInsReceiver>(&PrefixMerge2_LriRequiredTokenDeleter, &PrefixMerge2_LriRequiredLexerData, &PrefixMerge2_LriRequiredModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
