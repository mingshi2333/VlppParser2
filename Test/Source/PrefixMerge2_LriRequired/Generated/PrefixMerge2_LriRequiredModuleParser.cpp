/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge2_LriRequired
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge2_LriRequiredModuleParser.h"

namespace prefixmerge2_lrirequired
{
	void PrefixMerge2_LriRequiredModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3631; // 31971 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 47;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\xE3\x7C\x00\x00\x27\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x9E\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC3\xE1\x42\x18\x95\xEB\xC0\x03\x18\x8D\xE4\x1A\x85\x19\x9D\xEF\xCE\xE1\xD9\xE6\x66\x15\xEB\xCC\x96\xE7\xEA\xAF\x19\xAB\xFE\xCE\xE5\xEB\xB4\xE6\x78\x1A\xE2\x99\xDC\x8A\x1A\x86\x6B\x38\xE7\xE7\x72\x6D\x1A\x8E\x19\xEC\x92\xEE\xE2\xE3\x40\x6F\x04\xF8\xE7\xEF\x77\xE8\xE6\xE8\x1C\xCA\xCB\x71\x1E\x86\x72\x0D\xE3\x1E\x86\x74\x11\xFD\xF3\xF6\xEB\x49\x12\x56\x40\xFD\x42\x4D\x5D\xB0\x34\x4A\x0D\x40\x56\x98\x7F\x54\x4D\xFA\xAD\x74\x47\x9A\x41\xEF\xED\x66\xF9\x42\xEC\xE4\xD5\xFA\x42\xE3\xFF\x55\xFD\x78\xEB\xD8\x5E\xFA\xB8\xE4\x33\x7E\x41\x7B\x74\x3C\xBD\x20\x2C\x26\xE1\x61\x21\xFE\x02\x67\x7F\x84\x16\x3A\x39\x0B\x8A\x39\xFF\x07\x8B\x25\x04\x80\x07\x7B\xCA\x36\x80\x06\xE1\x36\x80\xF5\x55\x80\x7F\xF4\x4D\x82\x41\x0F\x81\x3C\x0D\x98\x2E\x84\x60\x24\x80\x4D\x13\x8E\x82\x94\x1D\x85\x7D\x2B\x2A\x87\x0A\xAE\x8E\x7F\x95\x2F\x82\x82\x36\x95\x84\x0D\x94\x8B\x87\x16\xA5\x27",
			"\x86\xFC\x79\x84\x0F\xBF\x8A\x87\x92\x16\x81\x82\xBF\x62\x87\x40\x24\x85\x81\x22\xA1\x20\x85\x7F\x20\x88\x79\x08\x8F\x56\x29\xB3\x85\x87\x30\x88\x27\x11\xA1\x8B\x24\x01\x8B\x88\x2B\xF1\x60\x7C\x56\x5E\x82\x20\x2B\xAB\x21\x8C\x01\x32\x84\x4A\x64\x81\x20\x36\xA4\x38\x8D\x17\x83\x8E\xEF\x6F\x83\x8E\x25\xA5\x88\x8C\x0A\x2A\x8D\x49\x6E\x8E\x8D\xFF\x52\x5D\x8B\x75\x82\x8A\x0F\xCF\x85\x8A\x27\xA0\x20\x8A\xAD\x26\x8F\x15\xA0\x2A\x91\x45\xBF\x1B\x8B\xE4\x60\x92\x03\xD8\x2D\x91\x45\x88\x92\x39\x95\x97\x8B\x25\x9C\x86\x91\x8F\x19\x93\x86\x90\x9A\x5E\x1D\xD5\x38\x7D\x4E\xBF\x1A\x8F\x8B\x90\x8E\x05\xA3\x90\x01\x4F\xA7\x96\x94\x70\x88\x94\x48\x7C\x85\x95\x21\xA1\x20\x8E\x1B\x81\x81\x20\xA8\x22\x97\x19\xBD\x93\x85\xAA\x92\x8D\x42\x2E\x9F\x96\x3F\x83\x82\x98\x06\x3D\x8D\x0C\xB0\x9F\x56\x37\xAB\x93\x99\xB6\x80\x25\x31\xE7\x8B\x97\x3D\xB9\x2D\x96\x83\x80\x25\x2C\xC8\x93\x20\x65\xBC\x94\x99\x7F\x8B\x8D\x35\xA1\x23\x9B\x6F\x91\x9F\x23\xC1\x80\x2E\x1B\xC4\x90\x9D\x63\xAA\x9A\x21\xDE\x85\x25\x39\xA5\x28\x96\x6E\xA2\x89\x85\xA6\x93",
			"\x9F\x2D\xE3\x93\x97\x6B\xB8\x9F\x9C\xFF\x1B\x9B\x3B\x89\x21\x9E\x72\xAD\x9B\x20\xB9\x8C\x97\x33\xD8\x88\x86\x86\x81\x8E\xA1\x53\x82\x91\x16\xC6\x80\x85\x48\xA2\x9B\x92\x60\x28\x89\x44\xE6\x99\x9B\x8F\x1A\xA6\x91\xD2\x86\x96\x2B\xB4\x23\xA4\x89\x8D\xA4\x88\x00\xA5\xA4\x44\xA0\xAF\x23\x50\x8C\x82\x92\x23\x94\x92\x48\xB3\xA9\xA4\x9A\x9D\xA7\x1F\x2A\xA8\xA7\x4D\xB9\xA4\x90\xBE\x1C\x8F\xA2\x31\xA0\x2C\x4F\x8C\x96\xA7\x89\xA1\x23\xA8\x9E\x85\xAB\x49\xC7\xAA\xA9\x87\x94\xA6\xA7\x16\xB6\x98\x46\xFA\x79\x9F\x83\xB6\x21\x3C\x6E\x89\xA0\x34\xB7\xAA\x9E\x6D\x97\xAF\x2F\x59\xB2\xA5\x4D\xE3\xAB\xA7\xA6\x9B\xA2\xA7\x46\xA4\xA8\x59\xE9\xAD\xA5\x8A\xA2\x90\xA6\x5F\x82\xAA\x59\xAC\xA8\xA7\xB9\xAC\xA0\xA9\x75\xA0\xA2\x4B\xF6\x70\xAF\x83\x18\x9C\xAD\xAF\x80\xA0\x1C\xAE\x9E\x8D\xD5\x3F\x9C\xAB\x56\xA1\x20\x61\x8A\x26\xB1\x28\xB6\xA8\xA4\x78\xBB\x91\x13\xFA\xA5\x91\xB5\x8B\xAF\x90\x6E\xAF\xA4\x50\xF1\xA4\xAA\x80\x9D\xAF\x23\xC2\x25\xAE\x65\xCE\xAC\xA8\x80\x8C\x8C\xAE\x1F\xAC\xA7\x67\x81\xAF\xAA\xF9\x7F\x53\xB5\xA1\xA0\xB0\x5E\xB3",
			"\xB6\x95\xD3\xAC\xA1\xB5\x20\xAB\xB4\x6E\x8E\x9B\xB5\xC1\xB6\x9A\x35\x58\x3B\xB7\x22\xBA\xB5\xAA\xCF\x85\xBF\xA6\xB1\xB7\xB1\x52\xA6\xB9\xB0\x00\x0B\xA2\xAA\x06\x2C\x9C\x40\xC9\xB4\xB4\xB5\xA2\xB7\xBA\x80\xB6\xB4\x48\xC2\xB7\x8B\xDE\xAD\xB2\x39\x61\xA7\xB0\x60\xD4\xB7\xAD\xD2\xB7\xA2\xBB\x8E\x95\x9F\x40\xD3\x2F\xAE\xE5\xBF\x1C\xBC\x74\xB8\xAC\x7A\xA9\x99\x8F\xDF\x80\x05\xA0\x21\xB3\xBB\x63\x8E\x94\xB6\xE6\x80\xA4\xBB\xBE\x86\x94\x80\xAB\x8E\xBB\x61\xB6\xBD\xB1\xAD\x23\xC0\x0B\x80\xBA\xC1\xAD\x80\xB0\xB6\xFB\xAB\x93\x7C\xD7\x89\x9C\xB0\xBE\x9D\xB3\xC8\xB1\xC3\x15\x93\xC3\x86\xF5\x96\xC1\x21\xCF\xA6\xA2\x7E\xA3\xB5\xBC\x90\x1C\xC0\x98\xF5\xAB\xBD\x37\xC1\xB7\xB8\x06\xE6\x96\x99\xF6\xA1\xC4\x48\x0D\xC8\x24\x1A\xE5\x26\xC6\x21\x38\xC7\x8C\xAF\xC0\x80\x56\xB0\x8C\x95\x88\x2E\x8D\x90\x8A\x20\xBF\x95\x3A\xC6\xA3\x02\xC9\xC8\x40\xF0\x6F\xBB\x38\x8D\xCE\x82\x16\x9E\xB4\x54\xEE\x90\x7F\x0B\xC3\x22\xA3\x08\xDF\xA8\x79\xE4\xBC\x89\x91\x2E\x8C\xBC\x5F\xD0\x9F\xF9\x4D\xC2\x3F\x84\x24\xBD\xCC\x06\x27\xCF\x98\xDF\xB4\x81\x2C",
			"\xD7\xAA\xA3\x04\x98\xC9\x93\x80\x0B\x3E\x03\xD3\xCB\x20\x04\x95\xCD\x74\x99\xB2\x20\x37\xF6\x25\x01\x56\xC2\x7D\x8A\x86\x20\xD0\x3B\xC6\x22\xCE\x4D\xD2\x88\x9C\x81\xDA\x80\xC6\xB3\xC9\x40\x77\xCB\x22\x42\x10\xD7\xD0\x47\xCD\xCC\x41\x06\x39\x41\x42\x1A\xD6\x20\x16\x4D\xCA\x47\x86\xC3\x20\xA8\x86\x24\x49\x84\x0A\x4B\xCF\x09\x25\xD4\xA9\x91\x2A\x21\x29\x49\x26\xD5\x06\x30\xD7\x40\x16\x03\xCE\xF2\xA3\x27\xC7\xE6\x39\x95\xA1\xF3\xC9\x21\x1C\x1B\x81\x97\x16\x94\xD0\xAF\x83\x2A\x07\x5F\xD6\xD6\x20\xA3\xCD\xB4\x1C\xBB\x06\xD8\xFA\x4A\x22\x59\x4D\xD0\x8C\x0F\x4D\xD5\xD3\x84\x30\x03\xCE\x70\x9D\x04\xB5\xF5\x2A\x20\x49\x51\xDB\x3D\xB9\x94\x53\xB7\xE9\x36\x82\x11\x18\xDA\x21\x3E\x1B\xDA\x40\x39\x90\x51\x71\xC6\x27\x07\xEA\xCA\xB2\x42\x1B\x03\xD9\x84\x00\x09\xDE\xAD\x93\xDD\xBD\x86\x21\x08\x7C\xFE\xC9\x55\xFB\xC2\x22\x10\x7E\xDA\x20\x80\xC1\xE0\x00\x43\x18\xDC\x01\xB4\x07\xE1\x80\x04\x08\xDF\xCB\xC7\xDC\xB9\x8A\x28\x5E\x77\xDC\x41\x97\x3F\x12\xE0\x7E\x7E\xC7\x5A\x8B\xC2\x25\x08\xF8\xD2\x8B\xB7\x1E\xE1\x20\x23\x04\xE1\x21",
			"\xE1\x44\xE4\x00\x47\x01\xE4\x85\x2A\x5A\xE5\x48\x18\xDD\x1D\x73\xC2\xC7\xEE\x3C\xD1\x97\xC0\xCB\x3E\x64\xE3\x37\xD7\xC6\x7B\xAE\x50\x23\x32\x8A\x05\x84\x8A\xAA\xDD\x12\xC8\x3F\xBA\x5E\xCD\xCD\xCB\x32\x8B\xA2\xFC\x33\x24\x4C\x8E\xE8\xCF\x0A\xDB\x3C\x2F\xF3\x8A\xCF\x08\xAB\x3E\x46\xB8\xDA\x36\xEE\x69\x3C\x80\x4B\xFC\xD7\xAE\xD7\x3A\x20\x4C\xE4\xED\xC9\xB9\x84\xBE\x9F\xBC\xEA\x20\x4F\xEC\xBA\x6D\x04\x2A\x20\x9A\x9C\x43\x24\x55\xD9\xE8\xEE\x4C\x98\xE8\x93\x23\x27\xD5\xBB\xDA\x70\x00\x73\xF7\x9C\xD2\xAD\xD3\x8E\x2B\x60\xC2\x43\x16\x9A\xED\x40\x01\xF0\xE8\x85\x25\x49\x9C\xBC\x3E\xC3\x40\x0A\xF4\xCF\xAA\xCA\x22\x03\x19\x6D\xEA\x42\x63\xE2\x20\xFC\xB6\xE2\xDF\x90\xFC\x66\xB0\x9D\xF6\xF3\x84\x2E\x49\xF4\xC5\x66\xEE\x40\x76\xEB\xEE\x85\x30\x48\xF5\xCB\x60\x02\xDB\x83\x2C\xD2\xBA\xCA\x26\x03\x8D\x69\xDA\x40\x33\xFD\xF4\xB8\xE3\x3C\xF5\x01\x20\xFB\xA1\x23\x2F\x02\x46\xC7\x52\xA3\x52\x82\xF9\xD8\xF3\xC3\x51\x6A\xC6\x22\xDC\x6F\xE1\xAA\xF3\x83\x2D\xEE\x81\x0C\xF3\xF8\x0A\x2A\x04\x3F\xDD\x33\xF5\x80\x39\x95\xFA\x01\x34\xF0",
			"\xDB\x89\x20\x55\xC3\xE9\x3A\xF5\xDE\xEC\xD6\xF9\x83\xF9\x20\x83\xDC\xD9\x21\xB1\x51\xF8\xED\xF3\x84\xD7\x57\xE5\xF7\xEF\xE3\x35\xFE\x41\x38\xF9\x3D\x91\x33\x02\x43\x0C\x70\x7B\xCB\x1A\x7F\x03\x15\x7C\xFD\x7A\x10\xBE\x22\x2B\xD0\x66\x10\x52\x78\x1B\x04\x82\x10\x7C\x27\x80\x09\x11\x2D\x0C\x8A\x10\xD5\x22\x80\x23\x16\x78\xB1\x67\x7F\x90\x37\x28\x1A\x83\x10\xFC\x7C\x7E\x06\x1D\x71\x15\x89\x10\x3A\x09\x31\x1F\x82\x10\x06\x82\x82\x03\x1B\x03\x1A\x23\x72\x25\x88\x1F\x29\x81\x10\x11\x8C\x82\x02\x19\x72\x31\x83\x10\x3E\x09\x31\x63\x29\x10\x98\x72\x81\xF8\x76\x1E\x3D\x86\x10\xD7\x73\x7E\xEF\x6B\x7D\xCB\x1A\x7B\x01\x16\x41\x43\x83\x79\x1C\x82\x10\xEF\x2B\x7E\x1C\x20\x7E\xCE\x5A\x10\x4D\x82\x78\xB6\x79\x10\x00\x39\x10\x70\x48\x31\x52\x82\x10\x0F\x81\x10\x70\x4F\x78\x44\x8F\x84\x01\x17\x32\x5F\x86\x28\x64\x87\x76\x06\x1B\x86\x02\x12\x7E\xE6\x13\x12\x2D\x39\x86\x87\x24\x6F\x74\x8E\x86\x4B\x86\x86\x00\x06\x33\x5C\x8A\x10\x42\x34\x87\xAF\x75\x65\x3E\x84\x78\x40\x83\x10\x4A\x38\x81\xEB\x1F\x83\xFB\x7A\x87\x50\x34\x87\x5A\x38",
			"\x88\x83\x89\x10\x2B\x89\x85\x06\x1F\x35\x74\x8C\x36\x90\x86\x10\x8A\x83\x10\x35\x84\x89\x03\x1E\x36\x74\x8A\x37\x99\x83\x10\x76\x8A\x89\x7A\x85\x3B\xBA\x15\x8A\x03\x18\x87\xD8\x7E\x7B\xE6\x17\x7A\x1B\x85\x88\x02\x1D\x37\xA3\x8C\x24\xB0\x80\x82\x7A\x8F\x37\x74\x89\x38\xB5\x81\x10\xB7\x8A\x82\x7A\x8F\x05\x73\x44\x39\xBD\x80\x00\xBF\x84\x83\x7A\x8C\x39\x74\x82\x3A\xC5\x81\x88\x03\x12\x6B\xBD\x76\x10\xA4\x35\x8C\xE3\x1E\x8C\x02\x11\x82\x9E\x82\x10\xAA\x34\x87\xB7\x3D\x8C\x0A\x13\x89\xD1\x83\x10\x69\x03\x47\xBD\x3E\x8D\x09\x1D\x89\xE1\x82\x10\x6C\x03\x47\xC3\x35\x8C\xD8\x82\x10\x57\x8D\x78\xAE\x8A\x1B\xE0\x8E\x8B\xA7\x83\x3B\xE6\x18\x8E\x01\x16\x8D\xF2\x81\x84\xBA\x1D\x6E\xB1\x86\x83\x01\x19\x3C\xD4\x86\x1E\x00\x98\x8B\xB2\x81\x10\xD0\x34\x87\xD5\x35\x8C\x07\x90\x8C\x09\x90\x00\xD7\x34\x87\x33\x7E\x90\x0A\x1A\x8F\xAD\x86\x10\x76\x03\x47\x78\x09\x31\xE6\x66\x7F\x11\x99\x07\x8D\x3F\x91\x8B\x81\x91\x7A\x03\x47\x7C\x0E\x91\xDF\x8A\x87\x7D\x03\x47\x7F\x0A\x92\xE7\x8A\x87\x80\x03\x47\x82\x09\x31\xCD\x73\x10\xC2\x76\x84",
			"\x03\x13\x08\x48\x83\x12\x18\x99\x4B\x37\x98\x85\xE9\x81\x10\x85\x00\x40\x88\x03\x47\x0F\x99\x87\x09\x15\x02\x0A\x1C\x28\x11\x98\x8A\xBC\x1F\x28\x09\x1E\x94\x02\x96\x3C\xE9\x1E\x6D\x06\x14\x95\xD9\x81\x10\x8A\x0D\x93\xEB\x10\x7D\x03\x1A\x95\x43\x90\x00\x8C\x0E\x95\xE9\x16\x11\xA9\x6A\x87\x8E\x0D\x63\xE6\x11\x94\x4A\x96\x10\x68\x92\x7F\x63\x91\x09\xC6\x75\x09\x73\x4C\x94\x7D\x89\x10\x9E\x29\x96\x11\x97\x09\xC6\x73\x1E\x60\x97\x47\x7A\x9A\x10\xA7\x2F\x94\xF8\x8D\x29\x66\x9F\x5D\x9B\x0C\x67\x01\x10\x0A\x73\x45\x7E\xD3\x72\x10\x90\x98\x93\x7A\x82\x0A\x7F\x96\x1E\xF1\x73\x10\x52\x43\x99\x42\x9D\x8F\x03\x16\x0A\x8C\x90\x00\xAB\x03\x47\x09\x81\x99\x01\x15\x98\x06\x1A\x7D\x11\x9D\x0A\x8D\x38\x9A\x03\x1F\x02\x7A\x8E\x0A\x73\x40\x0B\x19\x3E\x7E\x02\x1E\x9A\x63\x90\x95\xB4\x16\x9B\x01\x1C\x99\x9E\x99\x3B\x4C\x20\x9B\x83\x96\x98\xA6\x33\x1E\xD7\x69\x10\xAA\x95\x95\xB1\x0D\x38\xC7\x96\x10\xC2\x95\x95\xB2\x03\x47\xB4\x09\x31\x99\x9B\x7A\x7A\x85\x0B\x97\x9A\x1B\x27\x89\x97\x06\x15\x9D\x6F\x9B\x95\x00\x09\x0B\xA1\x9E\x0B\x73",
			"\x48\x83\x9A\x9A\x10\xFF\x7C\x97\x55\x90\x0C\x6C\x9A\x1B\x51\x82\x88\x06\x19\x9E\x72\x9F\x9B\x01\x13\x0C\xC6\x77\x0C\x73\x48\x30\xA1\x62\x10\x01\x86\x10\xB4\x21\x91\xC9\x0D\x38\xFD\x93\x10\xA5\x90\x9E\xCA\x03\x47\xCC\x09\x31\x05\xA2\x10\xF2\x90\x9E\xBA\x98\x1B\x0B\x83\x10\xFF\x95\x95\xCD\x0D\x38\x11\xA2\x10\x0B\xA4\x9F\x00\x0E\x0C\x73\x40\x0D\x19\x34\x81\x94\x91\x91\xD1\x09\x98\x03\x18\x86\x39\x82\x10\x20\xA6\x7D\x7A\x83\x0D\x24\xA2\x10\x29\x32\x2B\x29\xA1\x7E\x7A\x85\x0D\x2D\xA1\x10\x73\x87\xA2\x01\x11\xA3\x55\x81\x91\xD7\x00\x40\xDA\x03\x47\x31\x34\x87\x24\x83\x10\x17\x85\x95\xDC\x0D\x38\xDB\x96\x10\x7B\x95\x95\xDD\x02\x66\xE9\x18\x33\x74\x89\xA4\x03\x1D\xA0\x63\x97\x0E\x0A\x10\x87\xBA\x1F\x87\x38\xA0\x00\x2E\x89\x10\x45\xA0\x9E\xF3\x05\xA3\x87\x2D\xA5\x06\x12\xA5\xB9\x96\x1E\xF5\x09\x31\x30\x84\xA4\x7A\x86\x0F\x8D\x36\x9E\x02\x1F\xA5\x63\x97\x0F\x8D\x3B\x83\x09\x11\x8F\x19\x93\x10\xF8\x03\x68\x1C\x24\x34\xB2\x26\xA7\x4A\xAA\x87\xFE\x0E\xA4\xF8\x17\x88\xF3\x90\x00\x80\xA3\x10\xFC\x89\xA7\x02\x18\x00\x1B\x4F",
			"\x4B\x23\x12\x35\x7F\xAA\x10\xC7\x8C\xA8\x01\x1E\x00\x8F\xAB\x1E\x8F\x8B\xA5\x89\xAC\xA0\x7A\x84\x01\x1B\x48\xA5\xBC\x16\x89\x5B\xA9\x71\x5E\xAA\x87\x20\x0B\x41\xCB\x79\x1E\xA6\xA6\x10\x9D\xAA\xA1\xE3\x12\x02\xF8\x63\x1E\x2F\x76\x10\x72\xAA\xA1\x23\x03\xAB\x9E\x3F\x9E\x03\x18\xA7\x3A\x92\x10\x24\x09\xA9\xE9\x18\x36\xB2\x2C\xAB\x02\x1B\xA8\xBF\xA1\x10\x2A\x02\xAC\xF8\x18\x89\x5B\xA6\xAC\xF6\x81\x91\x30\x0C\xAC\x1C\x20\x8A\x5B\xA5\x71\xB6\xAA\x87\x36\x0A\xAA\xC7\x32\x70\x0A\x10\xAD\x96\xA7\x28\x38\x0A\xAB\xBA\x1B\x85\xDF\x5C\x73\x2B\x4D\x70\xEB\x67\x73\xEC\xAB\x2C\x0D\x80\x12\xB9\x46\x13\x61\x7B\x74\x8F\x4C\x6B\x92\x5B\xA3\x4F\x6A\x21\x00\x0C\x75\x30\x1C\xAF\xF4\x4C\x6B\x70\x46\x13\x01\xB1\x74\x6A\x13\x52\x52\x46\x13\x07\xB4\xB0\x91\x62\x98\xA6\x92\x6F\x0B\xBE\xB0\x0D\xB9\x6F\xFB\x9C\xB0\xEF\x73\xB1\x00\x0A\x51\x12\xB8\x6A\x16\xB1\xB0\x9A\x76\x7C\x16\x47\xB1\x6A\x1A\x60\x1A\x5F\xB1\x23\xB3\x12\x1A\x51\xAF\x18\xB7\x19\x6A\x15\x4C\x44\x7A\xB2\xB2\x20\x00\x2D\xBC\xA7\xEB\xA2\xB3\xE9\x74\xB3\x57\x5B\x76\x3A\x18\xB3",
			"\x2B\x1E\x67\xF1\xAC\xB3\x23\x1E\xB3\xC7\x6F\x5D\x45\x6E\x12\x43\xB8\x12\xE4\x58\xB1\x47\xB1\x1C\x73\x40\x00\xE4\x51\xB0\x4D\xBA\xB4\xDC\x99\x66\xBC\x64\x5E\x07\xB4\xB5\x50\xBB\xA5\x36\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr ) >>",
			L"[59][Module]<< !_PrimitiveExprOnly @ >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ ) >>",
			L"[62][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr ) >>",
			L"[63][Module]<< !_PrimitiveShared @ >>",
			L"[64][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ ) >>",
			L"[65][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType ) >>",
			L"[66][Module]<< !_PrimitiveTypeOnly @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge2_LriRequiredTokens, ModuleParserStates, PrefixMerge2_LriRequiredAstInsReceiver>(&PrefixMerge2_LriRequiredTokenDeleter, &PrefixMerge2_LriRequiredLexerData, &PrefixMerge2_LriRequiredModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
