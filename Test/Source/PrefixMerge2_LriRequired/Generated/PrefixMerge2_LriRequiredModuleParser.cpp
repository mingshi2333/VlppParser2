/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge2_LriRequired
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge2_LriRequiredModuleParser.h"

namespace prefixmerge2_lrirequired
{
	void PrefixMerge2_LriRequiredModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3893; // 35279 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 53;
		static const vl::vint dataSolidRows = 15;
		static const vl::vint dataRows = 16;
		static const char* compressed[] = {
			"\xCF\x89\x00\x00\x2D\x0F\x00\x00\x08\x00\x01\x82\x80\x0B\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x81\x06\x85\x07\x0A\x94\x0A\x82\x1A\x87\x12\x85\x17\x0A\xB5\x0A\x81\x2A\x84\x22\x84\x63\x02\x09\xBF\x63\x94\x93\x92\x84\x00\x25\xA5\xA7\x89\x94\x93\x94\x97\x7F\x2E\xAC\xB1\x89\x93\x9A\x96\x85\x97\x30\xA7\x8A\x81\x07\x9F\x95\x9B\x96\x3D\xB2\x81\xB4\x93\xA6\x9A\x90\x9F\x45\xC0\x87\xA2\xAB\xA4\xA1\xA6\xA3\x06\xB8\xA7\x9C\x99\x84\xAA\x83\x90\x55\xC9\xA6\x9A\xA9\x9F\xA6\xA5\xA8\x48\xDE\x9B\xA2\xBD\xA8\xB0\xA6\xB3\x4E\xE8\x90\xA3\x82\xAC\xAF\x9F\xB1\x6A\xDF\xAC\xA1\xB1\xB8\xBB\xB9\xB3\x03\x83\x3B\x8E\xBA\x84\x03\xBD\x84\x05\x7F\xB5\xA5\xB7\xB9\xB5\xC3\xB5\x02\xED\xA4\xAF\xB4\xC1\xC4\xBB\xC3\x72\x8E\xF8\xB2\xC6\xC4\xC8\xC5\x80\x8A\x83\xE7\x8C\x89\xAB\xC4\xBE\xCF\xA0\x9A\xDF\xC2\xD1\xD0\xCA\xBA\xCB\x91\x98\xCF\xC8\xD7\xD1\x83\x02\xC1\xA6\x8D\xEA\xD3\xC3\xDD\xC9\xDB\xCB\x28\xAB\xF7\xC9\xD9\xDC\xD9\xDE\xDB\xBF\xB8\xD9\xD1\xD7\x90\x81\xCE\xD2\xC8\xC4\xE3\xCA\xE5\xD4\xD6\xD9\xE0\xBC\xC3\xCE\xEC\xC4\xEB\xE7\xE8\xEB\x01\x8E\x89\x98",
			"\xA9\xE7\xE9\xE7\xDD\xAD\xD0\xE1\xF2\xE0\xF7\xE4\xF2\xF1\xE6\xBA\xE8\xF5\xEF\xEB\xF4\xEC\xF7\xED\xE7\xF2\xEA\xF7\xF0\x86\x82\xAB\xCC\xDD\xE5\xEC\xFA\xF8\xF9\xFE\x06\x0A\x5C\x79\x7F\x80\xDE\x46\x4E\x00\x6C\x05\x84\x8B\x7F\x7B\xF3\x7E\x6D\x80\x70\xE7\x50\x47\x72\x82\xFE\x54\x8F\x82\x70\xF4\x59\x8E\x82\x86\x10\xAA\x70\x04\x82\x0B\xB1\x7C\x84\x86\x1B\xA5\x8D\x86\x89\x24\xA7\x8A\x89\x8A\x2C\x91\x73\x8A\x8B\xBE\x51\x00\x89\x85\x09\xB5\x81\x89\x7F\x17\xB0\x8B\x8A\x8E\x2D\xA3\x7A\x7A\x04\x33\xB9\x8E\x8C\x8A\x3C\x85\x93\x93\x8E\xE1\x53\x01\x93\x8B\x47\xBD\x89\x7A\x6F\x12\x53\x86\x8C\x8D\x37\x96\x8C\x93\x93\xC0\x55\x01\x83\x7B\x17\x0B\x94\x91\x93\x46\x98\x9E\x90\x7F\x56\x9F\x92\x99\x98\x64\x93\x98\x06\x97\x48\x8F\x79\x07\x96\xED\x5B\x0C\x9B\x98\x0C\x97\x99\x99\x95\x02\x5C\x00\x9D\x7F\x1E\x33\x9C\x6F\x07\x33\xA0\x0A\x42\x5E\x22\xA6\x97\x9C\x95\x88\x82\x97\x98\x98\x8C\x8F\x73\x0B\x8C\x24\x3E\x9D\xA3\xA1\x8A\xA7\x45\x0B\x8C\x26\x03\xA5\x9E\xA1\x9B\xAD\x94\xA6\x7A\x29\x33\x8A\x0A\xA6\x85\x9E\xAD\xA4\x9D\xA5\xA8\xAD\x7D\x0B",
			"\x92\x8B\xAE\xAB\xA7\x9C\xA9\xA8\x9B\xA9\xB3\xB2\xA1\x7A\x0B\xAD\xB0\xA6\xAA\xAD\xAF\xAF\x78\x46\x94\x78\x81\xB8\xA0\x0C\x33\xB1\x04\xA8\x8E\x76\xB4\xA3\xA6\xB2\xCF\x74\x03\x8E\x46\x09\x44\xA8\xB1\xAC\xD3\xBB\xA5\xB4\x6E\x38\x33\x89\x0F\xB1\x65\x96\xBD\xB6\xAA\xDF\xB5\xAD\x7C\x0F\xB9\x8C\xBA\xAC\x6E\x3D\x25\xBC\xAF\xB9\xE2\xA1\xBB\xB3\xBA\x0A\x7E\x0A\xBB\xB5\xED\x93\x95\xA6\xB9\x0A\x7F\x03\xBE\xBB\xBD\xB0\xBE\xBD\x7F\x40\x3B\xB6\xBD\xB2\xFF\xBC\xBC\xBB\xBB\x06\x5C\x40\xB1\xA2\x04\xF4\xB1\x7A\x10\x02\xC2\xB7\xBD\xC1\x03\xD4\xB6\xC0\xBE\x09\x43\x13\x8E\x47\x0B\xD3\xCE\xC3\x73\x45\x11\xCC\xC2\x6F\x46\x22\xCE\xC7\xC5\x09\x47\x12\xC8\x12\x33\x89\x16\xC9\xC3\x28\xDF\xC7\xC1\xBF\xFD\x4A\x13\x8F\x12\x2F\xD6\xC5\xC6\xB7\x53\x8C\x19\xCC\xCF\x12\xF0\xC3\x95\x13\x33\x8E\x1F\xCC\xB8\x3B\xC8\xD1\xD2\xCE\xC2\x8F\x17\xD1\xBD\x4B\xC0\x70\x17\xD3\x08\xF1\xC6\xD5\xD2\x50\xE3\xC0\xD0\x00\x51\x14\xD4\xCF\xD5\x01\x52\x12\xCB\x14\x33\x94\x1E\xD7\xCC\x68\xD8\xC2\xCE\xDA\x60\xC8\xA5\x17\xD9\x0A\x56\x13\x8F\x15\x70\xD4\xC1\xD6\xD2\x5A",
			"\xF8\xD8\x15\xDD\xFD\x59\x1B\x9C\x85\x5B\x3C\xDD\xDB\xC9\x58\xD5\xD5\xE3\x73\x5C\x02\xE7\xE1\xDA\x76\xF9\xD9\xD5\x17\x8A\xF7\xDC\x6E\x17\x91\xC0\x0F\x17\x8C\x60\x15\xE4\xE2\xE4\x86\xC2\xB1\x1A\xE6\x42\xDC\xEF\xD7\xE2\x0A\x62\x10\xE8\xD3\x8E\xDD\xE9\xEB\xE8\xC2\xA3\x1F\xDC\xE9\xED\x65\x13\x8E\x19\xAF\xE2\xE7\x48\x1A\x33\xA9\x17\xEB\xD6\x9B\xEB\xE7\x4A\x1A\xBB\xF8\xDD\xEF\xF0\xA1\xC8\xAB\x19\xF0\xBC\x6C\x13\x8D\x1B\x95\xEE\x13\x8F\x1B\xC8\xEA\xE4\xF0\xEA\xBD\xF0\x11\xF4\xEB\x88\xB1\x17\xF4\xE3\x6B\xCD\xED\xEE\x1C\xDB\xEC\xD0\xED\xF7\xE4\xC3\xE5\xF3\x1C\xB5\xC8\xA5\x1D\xF8\xDE\xC5\xF3\xF7\xD6\x76\x2C\xF5\xFB\xF8\x6D\xE4\x28\x7D\x40\x02\x82\x41\x60\xAF\x38\x5A\x76\x42\xFF\xB1\x3B\x7F\x60\x38\x22\x81\xD8\x38\x27\x35\x64\x38\x25\xFE\x01\x22\x5B\xD8\x06\x3B\x80\x2F\x20\x83\x42\x4C\x5D\x7E\x85\x05\x86\x39\x17\x85\x3C\x01\xDC\x27\x80\x0E\xAF\x23\x81\x00\x0D\x82\x73\x0F\x86\x81\x08\x8A\x24\x33\x83\x22\x86\x06\x9F\x86\x82\x0A\xA6\x81\x21\x12\x85\x3E\x5F\x09\x8F\x25\x0C\xA8\x3A\x81\xAD\x40\x87\xFD\x65\x3A\x85\x1B\xAC\x80",
			"\x30\x2E\x8C\x25\x0C\x80\x03\x88\x1C\x9D\x67\x87\xF7\x3C\x2A\x0D\xB8\x2B\x82\x1A\xAC\x25\x87\x4C\x95\x86\x07\xCF\x83\x8B\x94\x10\x89\x8A\x56\x95\x89\x49\x57\x88\x8A\x92\x1C\x8D\x8B\xFF\x1F\x89\x17\xE2\x88\x8A\x32\x91\x88\x84\x4B\x97\x49\x05\xB0\x8C\x2A\x33\x8C\x8A\x87\x6D\x9A\x88\x49\x70\x84\x2C\x37\xB8\x26\x8E\x48\x83\x21\x1A\xE6\x4B\x8D\xFF\x71\x8E\x89\x29\x34\x8D\x0A\xF2\x83\x24\x41\xB1\x30\x8F\x54\x80\x91\x49\x68\x81\x89\x94\x03\x8D\x88\x2F\x28\x91\x20\xAD\x52\x93\x45\x94\x94\x90\x61\x98\x90\x23\xFC\x7F\x84\x3F\xA4\x2B\x8F\x60\x80\x95\x17\x88\x80\x82\x96\x20\x80\x84\x38\x24\x86\x73\x7D\x83\x21\x19\x83\x32\x94\x58\x84\x95\x09\xA6\x97\x84\xAE\x2A\x93\x85\x42\x8A\x22\x02\x4A\x88\x92\x59\xAB\x91\x8F\x02\x3B\x84\x7A\x37\x9E\x87\x5C\x9B\x3C\x97\x8A\x84\x24\x2C\xD1\x8E\x96\x5C\x93\x97\x98\x64\x24\x98\x18\xA4\x23\x88\x57\x81\x85\x97\x9A\x95\x95\x34\x98\x93\x89\x5D\x9F\x90\x9B\xC9\x85\x91\xAB\x52\x93\x9B\x7F\x03\x88\x95\x52\x81\x9F\x3F\x4B\x9C\x89\x66\x85\x9F\x99\x57\x36\x94\x37\xFD\x28\x99\x52\xA9\x26\x9D\xE5\x9F",
			"\x1C\x08\xA8\x8E\x81\x79\x89\x26\x9B\xAF\x80\x9E\x3D\x96\x97\x88\x96\x24\x9B\x9A\xE7\x95\x9F\x2C\xA9\x2C\x9D\x0E\xAA\x9F\x94\xF2\x8A\x9D\x35\x8A\xAF\x96\x96\x38\x9D\x9C\xFB\x91\xA3\x40\xD4\x9A\x96\x8A\x8E\x9D\x24\x17\xB3\x9A\x21\xA3\x8E\x9F\x78\x9F\x9A\x9D\x0D\xAF\x25\x48\xE0\x80\xA3\x6D\x92\xA4\x9E\x27\xBB\xA3\x48\x2B\xAD\x8B\x8C\xAE\xA2\xA6\xE6\x9D\xA1\x4C\x8B\xA0\xA5\x6C\x85\xA1\x25\x07\xA0\x8D\x42\xE4\x24\xA6\x2C\xAD\xA3\x30\x41\xBD\x8B\x44\xC4\xAE\xA6\x83\x3C\x9C\xA4\x2F\xBF\x9C\x57\x45\xA7\x8D\x71\xA5\xA3\x20\xE8\x89\x90\x4E\x95\x9E\x8A\x4C\x9C\xAA\x9C\x40\x9C\x92\x31\x9E\x93\x30\x6B\x95\xA4\xA1\x98\x86\xAF\x47\xCA\x9E\xAB\xB6\xAA\x9F\xAB\x99\x8F\xAE\x5B\xB8\xAB\x93\x8F\x6C\x92\x20\x90\x9A\xA8\x4F\xDD\xA2\xAF\xBE\x9B\xAB\xAE\x7B\xA3\x24\x5C\xF0\xA5\xAE\x7E\x77\xA9\x3B\x7F\x9F\xAE\x5F\x81\xB1\xAE\xC5\x8E\xB4\xB1\x83\xAD\xAA\x1E\x8D\x95\x25\x47\x9E\xA7\x9D\x25\x29\xA6\x45\x92\xBA\x27\xF2\x09\xA8\x8B\x43\x82\x99\x13\xB8\xAA\xB3\x7B\x9C\xB5\xB3\xA9\x97\xA9\x30\x89\xB0\xB2\xC0\xA7\xAB\x8B\xAE\xAB\xAE\x60\xB1",
			"\xB8\xB2\xBE\xB4\xAD\x85\x62\xAE\x91\x43\x2C\xBF\xB4\xDB\xAD\xB3\xB1\xBD\xB3\xB4\x70\xB2\xBA\x9E\xDC\xB6\xAD\x93\x03\x39\xAC\x5A\xA8\xA2\xA0\xC6\xA0\x82\xAD\xC3\x8A\xB6\x6B\x17\xB9\x9F\xD2\xBD\xA7\xA1\x30\xA8\xAA\x74\x80\x04\xAB\xC6\xBF\xB7\xB1\xC1\xA5\xBB\x4F\xB0\xB8\xBB\xF1\xBE\xB1\xBC\x84\xA6\xBA\x61\xC8\xB8\xAE\xEA\xA5\x9E\xBA\x24\x3D\xBB\x1D\xB4\xB9\x9E\xB8\x9F\xB1\x8A\xD0\xB5\xB9\x73\xE1\xB0\x84\xC6\x37\xBC\x89\xA1\xAE\xBF\x34\xF2\xB1\x92\xFA\xA5\x9E\xBE\x69\xB8\x90\x7C\xA3\x29\xBF\xF7\xBB\xBC\xB8\xCF\xBA\xA0\x63\xC3\x8D\xBB\x06\xD3\x9B\xC1\xFF\x16\xC1\x28\x8A\xCC\xC2\x75\x84\xC2\xAF\xE1\xBF\xBE\x43\xB7\xB0\x9A\xED\x91\xAE\x20\x1A\xD9\xB3\x83\xB5\xB2\xB8\xF0\x84\xB8\xC1\xEA\x89\xC4\x16\x98\xCF\xC2\x78\x9D\xB6\xB3\xDB\xA2\xB5\x3A\xB8\xA5\xC6\xF2\xB8\xA2\xC4\x2A\xA7\xB4\x00\x3A\xC6\xA1\xED\x99\xAB\xB9\x3C\xC6\xC3\x34\xC0\xCB\xB3\xF2\x8E\xAA\xC2\xE1\xBD\x9A\x80\xE0\x8D\xC7\xF3\xAF\xC2\xC9\x60\x8C\xC9\x4A\x32\xC1\x8A\x0C\xDC\xCC\x89\x34\xC2\xCB\x97\xDA\xC5\xB2\x85\x15\xC5\xC3\x38\xBF\xCB\x68\x8C\xB1\xCD\xE1",
			"\xAC\xC7\x1F\x64\xD1\xBE\x90\xC7\xC5\x25\x38\xE3\x23\xA9\x01\xBE\xC0\x96\xDD\x86\xCF\x7F\x15\xC8\xAC\x49\x97\xA7\x84\xE9\x7B\xCD\xF0\xBF\xCE\xBB\x21\xCB\xC5\x3E\xB6\xA6\xC4\x9C\x92\xCC\x2C\x6A\xDB\xC4\x63\x91\xD0\xC5\x2B\xEE\xCD\xBE\x7B\xC5\x8D\xA6\xD1\x81\xB3\x4B\xD8\xA2\xBD\x87\x67\xB0\x11\xDC\x24\xD2\x24\xDF\xBF\xD4\xFC\xB7\x92\xA7\xA2\xAA\xD4\x17\xEF\xC9\xBD\x61\xA7\xBB\x58\xC9\xB4\xD4\x34\xC3\xD5\xC4\xB1\x23\xA9\x59\x89\xC1\xC6\x5E\xE9\xCB\xBB\x6E\x83\x89\xB0\xB7\xC9\xD6\x62\xCE\x3B\x88\xFF\xA5\xD5\x49\x4A\xD4\x24\x66\xCC\xC0\x93\xBA\x66\xDB\x90\xD2\xD0\x01\xA3\xB9\x29\xBB\x93\xA9\x23\x53\x8C\x88\xDA\xFD\x66\xCC\xDA\xC4\x84\x9B\x10\xA7\x20\xA1\x81\x04\x9D\xDC\x02\x27\xDF\x6E\xD2\xD6\x3E\x73\xCA\x25\xDD\xE9\xCF\xDF\xBA\xC6\xDB\xDA\xEE\x94\xDE\x86\xF5\xD6\x86\x3B\xA7\x20\x41\x84\x10\xB8\xDF\x0A\x3D\xDC\x8A\xA0\xD3\xBA\x69\xCD\x05\xDB\x01\x20\xE1\x42\x07\xEE\xDE\x82\xF6\xDA\xDA\xFF\xDA\x9B\xC0\xB1\xD3\x21\x7D\xCA\x27\x40\x14\xF3\x81\x42\x18\xE6\x20\x7D\xD4\xDA\x42\x06\x3F\x41\x42\x22\xE6\x20\x19\x52\xD8\x48",
			"\x0D\xE9\x20\xCA\x86\x2A\x49\x84\x11\x4B\xE2\x2C\xEA\x21\xCB\x86\x2F\xE5\x81\x1A\x49\x21\x37\xE6\x21\xCE\x83\x26\x02\x84\xC0\x02\xE1\x06\x3D\xE5\xCA\x9D\xEF\xDA\x69\xDD\x49\x21\xC4\x87\xEA\x41\x49\xE3\xDE\x62\xEB\x4A\xDA\xC4\x87\x26\x1B\xD3\x2A\x20\x86\xD4\xD9\x21\x94\x1B\x86\x30\xA0\x8C\xE3\xAB\xC3\x25\x12\x5A\xE5\xEA\x41\x2B\xE4\xD9\x1E\x96\x11\xEC\xDA\xCA\x22\xB3\x52\xDD\x87\x4B\x28\xEC\xE8\x09\x38\x54\xDB\x8A\x28\x13\xB7\xD7\xD9\x21\x91\x53\xED\x7B\x42\x97\x52\xBD\xFD\x38\x84\x82\x5E\xEF\x40\x19\x16\xEF\xD5\x89\x20\x50\x82\xE2\x22\x26\x05\xF1\x20\xE8\xAF\x4E\xEB\x06\x3B\x10\xE3\x80\x0E\xF0\xC8\xC6\x24\x13\x93\xEE\x9C\x0B\x16\xF3\x21\x4E\x19\xF2\x21\x9B\xFC\xF1\x40\x1E\x13\xF3\x7A\xF2\x02\xF4\x01\x3F\x13\xE4\xBD\x8B\x5B\xC4\xC2\x58\x84\x01\x6E\xF4\xA2\x42\x99\x5C\xD9\xE7\x3E\x9D\x37\x14\xD9\x0F\xA0\x13\xF2\xE8\xBA\x02\xF7\x0A\x21\x17\xE7\x89\x2B\x06\xE0\xC9\x22\x14\xBD\xF1\x5E\xF1\x86\x23\x15\xE1\xC6\x22\x63\xB6\xEA\x3C\x74\xA5\x61\xFA\xDF\x37\x0C\xDA\x74\xDC\x37\xD5\xC2\x9B\xEB\xF7\x23\xA2\x58\x52\xF5\x71",
			"\x61\xD3\x47\x24\xE8\x90\xBC\x98\x44\xC0\x39\x0F\xDF\xC7\xEB\xF3\x3A\xD4\x42\xD0\xA9\xFC\x6E\x27\x20\xDF\x80\x32\xF9\x6B\x11\xED\x3C\xBF\xBE\xE4\xE5\x81\x37\xF9\x3C\x36\x43\x75\xD4\x6F\x3E\xB8\x15\x6F\xD9\x71\x1E\x27\x16\x72\x26\x51\x73\xB8\x67\x63\xC2\x44\x4C\xDD\x57\x75\x3B\x72\x10\x07\x88\x3D\x43\x45\x7F\x88\x27\x12\x4A\x7E\x7F\xE2\x38\x58\x09\x12\x70\x14\x27\x12\x4F\x71\x68\xF3\x31\x10\x18\x85\x81\x57\x7F\x78\x0B\x83\x10\x72\x2D\x80\xF6\x79\x3E\x20\x87\x10\xEF\x17\x12\x1D\x02\x32\x3D\x42\x4C\x31\x81\x10\x39\x89\x81\x0A\x1D\x27\xE6\x51\x1E\xF1\x75\x75\x3A\x5D\x1F\x27\x18\x78\x24\x8D\x36\x5D\x72\x10\xE8\x60\x7E\x0A\x11\x78\x47\x84\x3F\x02\x10\x72\x03\x13\x73\x21\x8A\x10\x21\x05\x39\x0A\x83\x10\xFD\x74\x7E\x13\x15\x39\x64\x72\x10\x59\x8C\x85\xED\x3E\x1B\x54\x82\x10\x65\x8C\x84\x09\x1F\x28\x43\x74\x21\x36\x40\x5D\x67\x85\x6D\x33\x85\x11\x0E\x71\x7A\x2B\x8D\x5E\x19\x71\x10\x35\x72\x83\xFA\x7A\x10\x72\x75\x87\xC2\x29\x84\x2F\x8E\x72\x01\x71\x87\x09\x14\x2C\x2E\x88\x28\x52\x86\x78\x34\x74\x68\xEA\x17\x12\xA7\x71",
			"\x2D\x19\x19\x3E\x5B\x88\x3F\x0A\x12\x74\x06\x13\x82\x55\x83\x86\xC0\x16\x89\x03\x18\x81\xE7\x17\x12\xB9\x77\x88\xE7\x1F\x85\x94\x89\x10\x9C\x82\x10\x3B\x8F\x89\x0A\x1D\x7A\x7E\x88\x28\x79\x85\x8A\x41\x7C\x88\xBE\x17\x12\xC5\x70\x89\x09\x12\x2F\x87\x87\x8A\xDC\x69\x10\x1B\x8A\x87\x44\x8A\x10\xB1\x7D\x8A\xE7\x1A\x82\x58\x5A\x10\xBD\x8A\x83\x84\x86\x10\x10\x32\x8A\xEA\x1D\x82\xAD\x87\x8C\x70\x8B\x87\x09\x1C\x31\x06\x1D\x43\x2A\x37\x88\x35\x86\x8B\x97\x8A\x10\x13\x88\x86\x06\x1E\x32\x3F\x88\x3D\x98\x89\x27\xC9\x83\x10\x36\x3B\x86\x02\x16\x34\xE1\x82\x82\x0A\x19\x8D\xBF\x89\x10\x4E\x38\x8E\x01\x14\x36\xEB\x8A\x10\xE3\x81\x10\x3E\x8F\x8E\x06\x16\x36\xF2\x80\x00\x7B\x35\x8F\x09\x14\x8C\x02\x17\x8F\x3C\x8A\x89\xB8\x12\x90\x01\x10\x8D\xAA\x86\x90\xBC\x1A\x01\xDC\x85\x8E\x02\x1E\x37\x00\x9D\x1F\x0E\x99\x10\x7A\x22\x8D\x06\x1A\x05\x3E\x74\x39\x13\x93\x10\x15\x96\x10\xEE\x89\x89\x06\x17\x39\xFD\x8E\x3A\x1D\x92\x10\x1F\x93\x10\xF9\x82\x92\x03\x14\x06\x3E\x78\x3B\x27\x91\x10\xCE\x86\x73\x10\x91\x10\xD1\x6F\x84\xB6\x3A\x10",
			"\x33\x94\x8E\x18\x93\x10\xC0\x3D\x8F\xCE\x31\x93\x00\x0B\x93\x01\x11\x92\x62\x86\x10\xD0\x3D\x8F\xE8\x32\x94\x44\x90\x00\x2B\x97\x94\x03\x14\x07\x3E\x78\x07\x22\x37\x91\xB1\x8D\x93\x50\x82\x2C\x46\x91\x10\x29\x90\x95\x59\x98\x28\x4F\x92\x93\x35\x9E\x3B\xEF\x16\x84\x34\x98\x95\x01\x19\x07\x95\x36\x96\x3C\x9A\x8F\x03\x1A\x07\x3E\x7E\x07\x22\x3C\x96\x45\x93\x96\x7F\x0E\x73\x83\x03\x97\x3D\x83\x96\x84\x0E\x73\x88\x02\x32\x4E\x87\x96\x6E\x92\x10\x89\x05\x39\x81\x9D\x96\x2C\x92\x10\x8A\x0E\x73\x8E\x00\x98\xED\x83\x96\x8F\x0E\x73\x93\x0E\x98\x09\x11\x96\x05\x96\x10\x94\x0E\x73\x98\x02\x32\x57\x88\x73\x63\x94\x80\xBC\x1D\x99\x06\x16\x95\x89\x91\x10\x99\x0C\x2D\x02\x1C\x09\x9C\x9F\x98\x68\x90\x00\x9D\x08\x9A\x01\x10\x0A\xAB\x95\x99\x63\x91\x0A\xB0\x90\x00\xA4\x02\x32\x14\x19\x10\x6F\x8B\x90\x06\x15\x0A\xB2\x80\x1C\x87\x91\x88\x06\x1B\x9B\xC2\x8D\x88\x0A\x17\x0A\xB7\x9A\x0A\xE9\x32\x9A\xC5\x88\x77\x0A\x1A\x86\x83\x91\x10\xAC\x01\x9C\x78\x3D\x77\x06\x12\x9D\xA5\x90\x00\xAE\x06\x9D\x59\x39\x29\x69\x8F\x99\xEE\x3A\x1E\x16",
			"\x1C\x9B\x63\x90\x0B\xB7\x97\x1E\xDA\x94\x81\x72\x8C\x8C\xB3\x8A\x10\xB3\x0E\x73\xB7\x09\x3E\xD8\x97\x77\x06\x11\x2A\xE6\x9D\x9A\xB9\x0E\x73\xE7\x18\x02\x3E\x78\x9F\x06\x1B\x02\xE2\x94\x3D\xA0\x2E\x9D\x08\x8A\x10\xBD\x0E\x70\xC2\x09\x3E\x74\x89\x6D\x06\x13\x2A\xF9\x93\x9D\x00\x04\x0C\xFC\x9A\x1E\xC6\x2D\x8F\x10\xA7\x9C\xEF\x99\x10\xC8\x0E\x70\xCD\x09\x3E\xD0\x20\x77\x01\xAA\x10\xFE\x9D\x9A\xCF\x05\x39\x02\xA9\x10\xAC\x2D\x9A\xD0\x0E\x73\xD4\x02\x32\x0D\xA2\x10\x29\xA2\xA1\xA0\x91\x1E\x31\xA1\x10\x19\xAB\x9D\x35\xAF\x1C\x2B\xA7\x9F\x03\xAC\x3B\xEA\x1D\x87\x03\x15\xA2\x12\xA5\x0D\x95\x32\xA4\x02\x1D\xA3\xDB\x96\x0D\x3E\x7A\x0D\x22\x3F\x2B\x0C\x82\xA1\xDB\x05\xA1\xBE\x1F\x7B\xDA\x83\x10\x50\xAF\x9C\x12\xAF\x0D\x0E\x74\x0E\xE9\x35\x7B\x30\x73\x10\x17\xA1\xA5\xDB\x96\x0E\xE9\x9A\x1E\x0A\x35\x8D\x0A\x13\xA6\x5A\xAB\x9D\xE9\x0E\x73\xED\x09\x3E\xD4\x8D\x4A\x0A\x1F\x88\x06\x16\x88\x12\xAF\x0E\x95\x36\xA7\x03\x13\x03\x63\x90\x0F\x3E\x74\x0F\x22\x3E\xA7\x09\x1C\xA6\x5E\x99\x93\xED\x1B\x76\x77\xA3\x96\xF5\x05\x39\x8A\xAD",
			"\xA7\x63\x96\x0F\x3E\x7A\x0F\x22\x31\xA2\x53\x83\x96\xFB\x06\xA0\xCF\x1C\x32\x0B\x36\xA9\xBE\x8B\x9D\xFD\x0A\xA9\x27\x10\x8E\x38\x90\x00\x9E\xA8\x8C\xAD\x92\x1B\x28\x8A\x10\xE7\x85\xAA\xA7\xA1\x8D\x12\xA1\x00\x3B\x4B\x7E\x3B\x40\x42\x38\x37\x88\xA1\x86\x10\x36\x03\x96\x06\x03\x79\xBD\x39\x2D\x09\x10\xA0\xDB\x97\x00\x3B\x49\x8A\xEA\x14\x34\x87\x80\xAC\x06\x16\xA8\xDE\x83\x85\x3B\x40\x88\x88\x21\x8F\xA5\xAC\x8A\x03\x1B\xAB\xAD\x91\x02\xB5\xAD\x81\x00\x04\xAD\x02\x1A\xAC\x3A\xAA\x1E\x23\x0E\xAB\xEA\x16\xA5\xBA\xA3\x96\x24\x02\xAE\xA8\x35\x8B\xE5\xAD\x9A\x25\x08\xAE\x5B\x34\x2E\xA6\x83\x96\x26\x0B\x43\xFF\x57\x12\x53\x3B\x30\xF0\xAE\xA3\xAD\x9E\x02\xC5\xAF\x1E\x5D\x37\x88\xF9\xAC\x82\x63\x9A\x03\xF4\xAF\x1E\xF4\x85\xAA\x01\xB8\x92\x63\x92\x04\x05\xBD\x1E\xFC\x88\xB0\x6B\xA3\x96\x4A\x0F\xAC\xEF\x1F\x36\x0B\x30\xA6\xD5\xA3\x96\x58\x09\xAD\x8D\x38\xB1\x02\x19\xB0\xCD\xA3\x25\x5A\x0E\xAE\xB8\x18\x8B\xEB\xA2\xA1\x5B\x04\xB2\x59\x3A\x2F\xF1\xAD\x9A\x5C\x0D\xB0\xFD\x12\x37\x0B\x3C\xB2\x06\x1D\x94\xBE\x9D\x92\x30\xB4\x21",
			"\x74\x33\xB3\x0A\x1D\x95\x21\xB1\x10\x6C\x09\xB3\x53\x2F\x8F\xA5\xA1\x8C\x19\xBD\x9A\x74\x0C\xB1\x25\x80\x00\x46\xB2\x10\x34\xBF\xAD\xBE\x16\x07\x2A\xB1\x1E\x69\xA7\xA9\xAD\x97\x07\x3B\x4C\x4E\x27\x12\x91\x61\xA2\x10\x55\xBC\x9E\xAD\x9C\x07\x3B\x45\x6F\x82\x0A\xB4\x03\x10\x39\x77\x80\x00\xD0\x7A\x8C\x7C\x96\xB6\x5F\x93\xA7\x9F\xA7\xA8\x00\x06\x08\xB3\xAF\x1E\xA6\x37\x88\x70\xB8\xAA\x12\xA9\x08\x75\xBD\x1E\x2E\x98\xB7\xA2\xA4\x6D\x8C\x0B\x43\xD0\x50\x09\x6E\xB1\x10\xB4\x37\xA5\x02\x14\x7D\x06\x11\x32\xAD\x92\x09\x87\xB4\x96\x29\x33\x80\x8D\x8C\x44\xA8\x7A\x88\xC6\x62\x4C\x3A\x1A\xB9\xFF\x70\x13\x9D\xBF\x0F\x9A\xB7\x12\x28\x85\x81\xE2\x52\x6D\xDF\x70\x8B\xC6\x67\xBA\x21\x4E\x16\x76\x4D\x43\x3A\x1E\xBA\xE1\x74\x6D\xEC\x7A\x66\xF9\x7D\x8F\x36\x44\x79\x0E\x78\xBB\x69\xBA\xBB\x5D\xB2\x10\xD0\x5E\xBA\xB5\xBD\xBB\xBC\xB2\xBC\xC0\xB3\x23\xC3\xB0\xB6\xFD\x8A\x13\x5A\xBD\x50\x36\x4A\xB9\xB7\xB7\x12\x36\x4D\x5F\xF5\x62\x15\xD3\xB8\x13\xF5\x6A\xB9\xD7\xBB\x19\xC6\xB9\xBD\x12\x7C\x81\xDD\xB4\x6C\x11\x82\x5F\xEE\x4A\xB9\xE3",
			"\xB7\x12\xE5\xB2\x76\xC6\x65\xAF\x22\x64\x4C\xB7\xBC\xBE\xC5\x19\x3E\x00\x04\x4C\xAE\xB2\xBF\xEF\xBA\xB8\xF1\x60\x6E\x3E\x71\xBF\xF9\xB8\x7E\x27\x1A\x5C\x2A\x1E\xBF\x65\x64\x6D\x4B\x8B\x1E\x03\xCC\x44\x03\xCE\x75",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
			L"ExprModule",
			L"TypeModule",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[23][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[24][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[25][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[26][_LongType]< _LongType \"*\" @ >",
			L"[27][_LongType]< _LongType \"const\" @ >",
			L"[28][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[29][_LongType]< _LongType @ \"*\" >",
			L"[30][_LongType]< _LongType @ \"const\" >",
			L"[31][_LongType]<< !_PrimitiveShared @ >>",
			L"[32][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[33][_LongType]lrp:(Shared,Type) @",
			L"[34][_Expr0] BEGIN ",
			L"[35][_Expr0] END [ENDING]",
			L"[36][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[37][_Expr0]<< !_PrimitiveShared @ >>",
			L"[38][_Expr0]lrp:(Expr,Shared) @",
			L"[39][_Expr1] BEGIN ",
			L"[40][_Expr1] END [ENDING]",
			L"[41][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[42][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[43][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[45][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[46][_Expr1]<< !_Expr0 @ >>",
			L"[47][_Expr] BEGIN ",
			L"[48][_Expr] END [ENDING]",
			L"[49][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[50][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[51][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[52][_Expr]<< !_Expr1 @ >>",
			L"[53][Module] BEGIN ",
			L"[54][Module] END [ENDING]",
			L"[55][Module]<< !_PrimitiveExprOnly ( lri:(Expr)->_Expr @ ) >>",
			L"[56][Module]<< !_PrimitiveExprOnly @ ( lri:(Expr)->_Expr ) >>",
			L"[57][Module]<< !_PrimitiveExprOnly @ >>",
			L"[58][Module]<< !_PrimitiveShared ( lri:(Shared)->_LongType @ | lri:(Shared)->_Expr ) >>",
			L"[59][Module]<< !_PrimitiveShared ( lri:(Shared)->_LongType | lri:(Shared)->_Expr @ ) >>",
			L"[60][Module]<< !_PrimitiveShared @ ( lri:(Shared)->_LongType | lri:(Shared)->_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared @ >>",
			L"[62][Module]<< !_PrimitiveTypeOnly ( lri:(Type)->_LongType @ ) >>",
			L"[63][Module]<< !_PrimitiveTypeOnly @ ( lri:(Type)->_LongType ) >>",
			L"[64][Module]<< !_PrimitiveTypeOnly @ >>",
			L"[65][ExprModule] BEGIN ",
			L"[66][ExprModule] END [ENDING]",
			L"[67][ExprModule]<< !_Expr @ >>",
			L"[68][TypeModule] BEGIN ",
			L"[69][TypeModule] END [ENDING]",
			L"[70][TypeModule]<< !_LongType @ >>",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge2_LriRequiredTokens, ModuleParserStates, PrefixMerge2_LriRequiredAstInsReceiver>(&PrefixMerge2_LriRequiredTokenDeleter, &PrefixMerge2_LriRequiredLexerData, &PrefixMerge2_LriRequiredModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge2_LriRequiredTypeName((PrefixMerge2_LriRequiredClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseExprModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::ExprModule>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseExprModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::ExprModule>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseTypeModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::TypeModule>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge2_lrirequired::TypeOrExpr> ModuleParser::ParseTypeModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge2_lrirequired::TypeOrExpr, ModuleParserStates::TypeModule>(tokens, this, codeIndex);
	}
}
