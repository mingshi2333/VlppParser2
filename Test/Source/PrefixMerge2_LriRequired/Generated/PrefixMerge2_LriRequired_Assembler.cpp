/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge2_LriRequired
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge2_LriRequired_Assembler.h"

namespace prefixmerge2_lrirequired
{

/***********************************************************************
PrefixMerge2_LriRequiredAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> PrefixMerge2_LriRequiredAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = PrefixMerge2_LriRequiredCppTypeName((PrefixMerge2_LriRequiredClasses)type);
		switch((PrefixMerge2_LriRequiredClasses)type)
		{
		case PrefixMerge2_LriRequiredClasses::CallExpr:
			return new prefixmerge2_lrirequired::CallExpr();
		case PrefixMerge2_LriRequiredClasses::ConstType:
			return new prefixmerge2_lrirequired::ConstType();
		case PrefixMerge2_LriRequiredClasses::FunctionType:
			return new prefixmerge2_lrirequired::FunctionType();
		case PrefixMerge2_LriRequiredClasses::MemberName:
			return new prefixmerge2_lrirequired::MemberName();
		case PrefixMerge2_LriRequiredClasses::MulExpr:
			return new prefixmerge2_lrirequired::MulExpr();
		case PrefixMerge2_LriRequiredClasses::Name:
			return new prefixmerge2_lrirequired::Name();
		case PrefixMerge2_LriRequiredClasses::PointerType:
			return new prefixmerge2_lrirequired::PointerType();
		case PrefixMerge2_LriRequiredClasses::TypeOrExprToResolve:
			return new prefixmerge2_lrirequired::TypeOrExprToResolve();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void PrefixMerge2_LriRequiredAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = PrefixMerge2_LriRequiredCppFieldName((PrefixMerge2_LriRequiredFields)field);
		switch((PrefixMerge2_LriRequiredFields)field)
		{
		case PrefixMerge2_LriRequiredFields::CallExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::CallExpr::args, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::CallExpr_func:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::CallExpr::func, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::ConstType_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::ConstType::type, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::FunctionType_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::FunctionType::args, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::FunctionType_returnType:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::FunctionType::returnType, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::MemberName_parent:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::MemberName::parent, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::MulExpr_first:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::MulExpr::first, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::MulExpr_second:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::MulExpr::second, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::PointerType_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::PointerType::type, object, field, value, cppFieldName);
		case PrefixMerge2_LriRequiredFields::TypeOrExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&prefixmerge2_lrirequired::TypeOrExprToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void PrefixMerge2_LriRequiredAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = PrefixMerge2_LriRequiredCppFieldName((PrefixMerge2_LriRequiredFields)field);
		switch((PrefixMerge2_LriRequiredFields)field)
		{
		case PrefixMerge2_LriRequiredFields::MemberName_member:
			return vl::glr::AssemblerSetTokenField(&prefixmerge2_lrirequired::MemberName::member, object, field, token, tokenIndex, cppFieldName);
		case PrefixMerge2_LriRequiredFields::Name_name:
			return vl::glr::AssemblerSetTokenField(&prefixmerge2_lrirequired::Name::name, object, field, token, tokenIndex, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
		}
	}

	void PrefixMerge2_LriRequiredAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = PrefixMerge2_LriRequiredCppFieldName((PrefixMerge2_LriRequiredFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* PrefixMerge2_LriRequiredTypeName(PrefixMerge2_LriRequiredClasses type)
	{
		const wchar_t* results[] = {
			L"CallExpr",
			L"ConstType",
			L"FunctionType",
			L"MemberName",
			L"MulExpr",
			L"Name",
			L"PointerType",
			L"QualifiedName",
			L"TypeOrExpr",
			L"TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 10 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge2_LriRequiredCppTypeName(PrefixMerge2_LriRequiredClasses type)
	{
		const wchar_t* results[] = {
			L"prefixmerge2_lrirequired::CallExpr",
			L"prefixmerge2_lrirequired::ConstType",
			L"prefixmerge2_lrirequired::FunctionType",
			L"prefixmerge2_lrirequired::MemberName",
			L"prefixmerge2_lrirequired::MulExpr",
			L"prefixmerge2_lrirequired::Name",
			L"prefixmerge2_lrirequired::PointerType",
			L"prefixmerge2_lrirequired::QualifiedName",
			L"prefixmerge2_lrirequired::TypeOrExpr",
			L"prefixmerge2_lrirequired::TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 10 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge2_LriRequiredFieldName(PrefixMerge2_LriRequiredFields field)
	{
		const wchar_t* results[] = {
			L"CallExpr::args",
			L"CallExpr::func",
			L"ConstType::type",
			L"FunctionType::args",
			L"FunctionType::returnType",
			L"MemberName::member",
			L"MemberName::parent",
			L"MulExpr::first",
			L"MulExpr::second",
			L"Name::name",
			L"PointerType::type",
			L"TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 12 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge2_LriRequiredCppFieldName(PrefixMerge2_LriRequiredFields field)
	{
		const wchar_t* results[] = {
			L"prefixmerge2_lrirequired::CallExpr::args",
			L"prefixmerge2_lrirequired::CallExpr::func",
			L"prefixmerge2_lrirequired::ConstType::type",
			L"prefixmerge2_lrirequired::FunctionType::args",
			L"prefixmerge2_lrirequired::FunctionType::returnType",
			L"prefixmerge2_lrirequired::MemberName::member",
			L"prefixmerge2_lrirequired::MemberName::parent",
			L"prefixmerge2_lrirequired::MulExpr::first",
			L"prefixmerge2_lrirequired::MulExpr::second",
			L"prefixmerge2_lrirequired::Name::name",
			L"prefixmerge2_lrirequired::PointerType::type",
			L"prefixmerge2_lrirequired::TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 12 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> PrefixMerge2_LriRequiredAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = PrefixMerge2_LriRequiredCppTypeName((PrefixMerge2_LriRequiredClasses)type);
		switch((PrefixMerge2_LriRequiredClasses)type)
		{
		case PrefixMerge2_LriRequiredClasses::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::CallExpr, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::ConstType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::ConstType, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::FunctionType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::FunctionType, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::MemberName:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::MemberName, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::MulExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::MulExpr, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::Name:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::Name, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::PointerType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::PointerType, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::QualifiedName:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::QualifiedName, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::TypeOrExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::TypeOrExpr, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge2_LriRequiredClasses::TypeOrExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge2_lrirequired::TypeOrExprToResolve, prefixmerge2_lrirequired::TypeOrExprToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
