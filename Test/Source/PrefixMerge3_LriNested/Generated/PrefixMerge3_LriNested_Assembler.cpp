/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge3_LriNested
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge3_LriNested_Assembler.h"

namespace prefixmerge3_lrinested
{

/***********************************************************************
PrefixMerge3_LriNestedAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> PrefixMerge3_LriNestedAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = PrefixMerge3_LriNestedCppTypeName((PrefixMerge3_LriNestedClasses)type);
		switch((PrefixMerge3_LriNestedClasses)type)
		{
		case PrefixMerge3_LriNestedClasses::CallExpr:
			return vl::Ptr(new prefixmerge3_lrinested::CallExpr);
		case PrefixMerge3_LriNestedClasses::ConstType:
			return vl::Ptr(new prefixmerge3_lrinested::ConstType);
		case PrefixMerge3_LriNestedClasses::CtorExpr:
			return vl::Ptr(new prefixmerge3_lrinested::CtorExpr);
		case PrefixMerge3_LriNestedClasses::FunctionType:
			return vl::Ptr(new prefixmerge3_lrinested::FunctionType);
		case PrefixMerge3_LriNestedClasses::MemberName:
			return vl::Ptr(new prefixmerge3_lrinested::MemberName);
		case PrefixMerge3_LriNestedClasses::MulExpr:
			return vl::Ptr(new prefixmerge3_lrinested::MulExpr);
		case PrefixMerge3_LriNestedClasses::Name:
			return vl::Ptr(new prefixmerge3_lrinested::Name);
		case PrefixMerge3_LriNestedClasses::PointerType:
			return vl::Ptr(new prefixmerge3_lrinested::PointerType);
		case PrefixMerge3_LriNestedClasses::TypeOrExprToResolve:
			return vl::Ptr(new prefixmerge3_lrinested::TypeOrExprToResolve);
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void PrefixMerge3_LriNestedAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = PrefixMerge3_LriNestedCppFieldName((PrefixMerge3_LriNestedFields)field);
		switch((PrefixMerge3_LriNestedFields)field)
		{
		case PrefixMerge3_LriNestedFields::CallExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::CallExpr::args, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::CallExpr_func:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::CallExpr::func, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::ConstType_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::ConstType::type, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::CtorExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::CtorExpr::args, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::CtorExpr_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::CtorExpr::type, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::FunctionType_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::FunctionType::args, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::FunctionType_returnType:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::FunctionType::returnType, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::MemberName_parent:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::MemberName::parent, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::MulExpr_first:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::MulExpr::first, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::MulExpr_second:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::MulExpr::second, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::PointerType_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::PointerType::type, object, field, value, cppFieldName);
		case PrefixMerge3_LriNestedFields::TypeOrExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&prefixmerge3_lrinested::TypeOrExprToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void PrefixMerge3_LriNestedAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = PrefixMerge3_LriNestedCppFieldName((PrefixMerge3_LriNestedFields)field);
		switch((PrefixMerge3_LriNestedFields)field)
		{
		case PrefixMerge3_LriNestedFields::MemberName_member:
			return vl::glr::AssemblerSetTokenField(&prefixmerge3_lrinested::MemberName::member, object, field, token, tokenIndex, cppFieldName);
		case PrefixMerge3_LriNestedFields::Name_name:
			return vl::glr::AssemblerSetTokenField(&prefixmerge3_lrinested::Name::name, object, field, token, tokenIndex, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
		}
	}

	void PrefixMerge3_LriNestedAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = PrefixMerge3_LriNestedCppFieldName((PrefixMerge3_LriNestedFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* PrefixMerge3_LriNestedTypeName(PrefixMerge3_LriNestedClasses type)
	{
		const wchar_t* results[] = {
			L"CallExpr",
			L"ConstType",
			L"CtorExpr",
			L"FunctionType",
			L"MemberName",
			L"MulExpr",
			L"Name",
			L"PointerType",
			L"QualifiedName",
			L"TypeOrExpr",
			L"TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 11 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge3_LriNestedCppTypeName(PrefixMerge3_LriNestedClasses type)
	{
		const wchar_t* results[] = {
			L"prefixmerge3_lrinested::CallExpr",
			L"prefixmerge3_lrinested::ConstType",
			L"prefixmerge3_lrinested::CtorExpr",
			L"prefixmerge3_lrinested::FunctionType",
			L"prefixmerge3_lrinested::MemberName",
			L"prefixmerge3_lrinested::MulExpr",
			L"prefixmerge3_lrinested::Name",
			L"prefixmerge3_lrinested::PointerType",
			L"prefixmerge3_lrinested::QualifiedName",
			L"prefixmerge3_lrinested::TypeOrExpr",
			L"prefixmerge3_lrinested::TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 11 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge3_LriNestedFieldName(PrefixMerge3_LriNestedFields field)
	{
		const wchar_t* results[] = {
			L"CallExpr::args",
			L"CallExpr::func",
			L"ConstType::type",
			L"CtorExpr::args",
			L"CtorExpr::type",
			L"FunctionType::args",
			L"FunctionType::returnType",
			L"MemberName::member",
			L"MemberName::parent",
			L"MulExpr::first",
			L"MulExpr::second",
			L"Name::name",
			L"PointerType::type",
			L"TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 14 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge3_LriNestedCppFieldName(PrefixMerge3_LriNestedFields field)
	{
		const wchar_t* results[] = {
			L"prefixmerge3_lrinested::CallExpr::args",
			L"prefixmerge3_lrinested::CallExpr::func",
			L"prefixmerge3_lrinested::ConstType::type",
			L"prefixmerge3_lrinested::CtorExpr::args",
			L"prefixmerge3_lrinested::CtorExpr::type",
			L"prefixmerge3_lrinested::FunctionType::args",
			L"prefixmerge3_lrinested::FunctionType::returnType",
			L"prefixmerge3_lrinested::MemberName::member",
			L"prefixmerge3_lrinested::MemberName::parent",
			L"prefixmerge3_lrinested::MulExpr::first",
			L"prefixmerge3_lrinested::MulExpr::second",
			L"prefixmerge3_lrinested::Name::name",
			L"prefixmerge3_lrinested::PointerType::type",
			L"prefixmerge3_lrinested::TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 14 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> PrefixMerge3_LriNestedAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = PrefixMerge3_LriNestedCppTypeName((PrefixMerge3_LriNestedClasses)type);
		switch((PrefixMerge3_LriNestedClasses)type)
		{
		case PrefixMerge3_LriNestedClasses::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::CallExpr, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::ConstType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::ConstType, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::CtorExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::CtorExpr, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::FunctionType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::FunctionType, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::MemberName:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::MemberName, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::MulExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::MulExpr, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::Name:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::Name, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::PointerType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::PointerType, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::QualifiedName:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::QualifiedName, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::TypeOrExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::TypeOrExpr, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge3_LriNestedClasses::TypeOrExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge3_lrinested::TypeOrExprToResolve, prefixmerge3_lrinested::TypeOrExprToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
