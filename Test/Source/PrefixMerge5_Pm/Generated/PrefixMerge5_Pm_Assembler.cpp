/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge5_Pm
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge5_Pm_Assembler.h"

namespace prefixmerge5_pm
{

/***********************************************************************
PrefixMerge5_PmAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> PrefixMerge5_PmAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = PrefixMerge5_PmCppTypeName((PrefixMerge5_PmClasses)type);
		switch((PrefixMerge5_PmClasses)type)
		{
		case PrefixMerge5_PmClasses::CallExpr:
			return new prefixmerge5_pm::CallExpr();
		case PrefixMerge5_PmClasses::ConstType:
			return new prefixmerge5_pm::ConstType();
		case PrefixMerge5_PmClasses::CtorExpr:
			return new prefixmerge5_pm::CtorExpr();
		case PrefixMerge5_PmClasses::FunctionType:
			return new prefixmerge5_pm::FunctionType();
		case PrefixMerge5_PmClasses::MemberName:
			return new prefixmerge5_pm::MemberName();
		case PrefixMerge5_PmClasses::MulExpr:
			return new prefixmerge5_pm::MulExpr();
		case PrefixMerge5_PmClasses::Name:
			return new prefixmerge5_pm::Name();
		case PrefixMerge5_PmClasses::PointerType:
			return new prefixmerge5_pm::PointerType();
		case PrefixMerge5_PmClasses::TypeOrExprToResolve:
			return new prefixmerge5_pm::TypeOrExprToResolve();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void PrefixMerge5_PmAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = PrefixMerge5_PmCppFieldName((PrefixMerge5_PmFields)field);
		switch((PrefixMerge5_PmFields)field)
		{
		case PrefixMerge5_PmFields::CallExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::CallExpr::args, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::CallExpr_func:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::CallExpr::func, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::ConstType_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::ConstType::type, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::CtorExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::CtorExpr::args, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::CtorExpr_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::CtorExpr::type, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::FunctionType_args:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::FunctionType::args, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::FunctionType_returnType:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::FunctionType::returnType, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::MemberName_parent:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::MemberName::parent, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::MulExpr_first:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::MulExpr::first, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::MulExpr_second:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::MulExpr::second, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::PointerType_type:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::PointerType::type, object, field, value, cppFieldName);
		case PrefixMerge5_PmFields::TypeOrExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&prefixmerge5_pm::TypeOrExprToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void PrefixMerge5_PmAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = PrefixMerge5_PmCppFieldName((PrefixMerge5_PmFields)field);
		switch((PrefixMerge5_PmFields)field)
		{
		case PrefixMerge5_PmFields::MemberName_member:
			return vl::glr::AssemblerSetTokenField(&prefixmerge5_pm::MemberName::member, object, field, token, tokenIndex, cppFieldName);
		case PrefixMerge5_PmFields::Name_name:
			return vl::glr::AssemblerSetTokenField(&prefixmerge5_pm::Name::name, object, field, token, tokenIndex, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
		}
	}

	void PrefixMerge5_PmAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = PrefixMerge5_PmCppFieldName((PrefixMerge5_PmFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* PrefixMerge5_PmTypeName(PrefixMerge5_PmClasses type)
	{
		const wchar_t* results[] = {
			L"CallExpr",
			L"ConstType",
			L"CtorExpr",
			L"FunctionType",
			L"MemberName",
			L"MulExpr",
			L"Name",
			L"PointerType",
			L"QualifiedName",
			L"TypeOrExpr",
			L"TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 11 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge5_PmCppTypeName(PrefixMerge5_PmClasses type)
	{
		const wchar_t* results[] = {
			L"prefixmerge5_pm::CallExpr",
			L"prefixmerge5_pm::ConstType",
			L"prefixmerge5_pm::CtorExpr",
			L"prefixmerge5_pm::FunctionType",
			L"prefixmerge5_pm::MemberName",
			L"prefixmerge5_pm::MulExpr",
			L"prefixmerge5_pm::Name",
			L"prefixmerge5_pm::PointerType",
			L"prefixmerge5_pm::QualifiedName",
			L"prefixmerge5_pm::TypeOrExpr",
			L"prefixmerge5_pm::TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 11 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge5_PmFieldName(PrefixMerge5_PmFields field)
	{
		const wchar_t* results[] = {
			L"CallExpr::args",
			L"CallExpr::func",
			L"ConstType::type",
			L"CtorExpr::args",
			L"CtorExpr::type",
			L"FunctionType::args",
			L"FunctionType::returnType",
			L"MemberName::member",
			L"MemberName::parent",
			L"MulExpr::first",
			L"MulExpr::second",
			L"Name::name",
			L"PointerType::type",
			L"TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 14 ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge5_PmCppFieldName(PrefixMerge5_PmFields field)
	{
		const wchar_t* results[] = {
			L"prefixmerge5_pm::CallExpr::args",
			L"prefixmerge5_pm::CallExpr::func",
			L"prefixmerge5_pm::ConstType::type",
			L"prefixmerge5_pm::CtorExpr::args",
			L"prefixmerge5_pm::CtorExpr::type",
			L"prefixmerge5_pm::FunctionType::args",
			L"prefixmerge5_pm::FunctionType::returnType",
			L"prefixmerge5_pm::MemberName::member",
			L"prefixmerge5_pm::MemberName::parent",
			L"prefixmerge5_pm::MulExpr::first",
			L"prefixmerge5_pm::MulExpr::second",
			L"prefixmerge5_pm::Name::name",
			L"prefixmerge5_pm::PointerType::type",
			L"prefixmerge5_pm::TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 14 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> PrefixMerge5_PmAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = PrefixMerge5_PmCppTypeName((PrefixMerge5_PmClasses)type);
		switch((PrefixMerge5_PmClasses)type)
		{
		case PrefixMerge5_PmClasses::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::CallExpr, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::ConstType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::ConstType, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::CtorExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::CtorExpr, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::FunctionType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::FunctionType, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::MemberName:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::MemberName, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::MulExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::MulExpr, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::Name:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::Name, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::PointerType:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::PointerType, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::QualifiedName:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::QualifiedName, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::TypeOrExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::TypeOrExpr, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixMerge5_PmClasses::TypeOrExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<prefixmerge5_pm::TypeOrExprToResolve, prefixmerge5_pm::TypeOrExprToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
