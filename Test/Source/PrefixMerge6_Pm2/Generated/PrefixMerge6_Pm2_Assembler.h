/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge6_Pm2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_PREFIXMERGE6_PM2_AST_ASSEMBLER
#define VCZH_PARSER2_UNITTEST_PREFIXMERGE6_PM2_AST_ASSEMBLER

#include "PrefixMerge6_Pm2TypeOrExpr.h"

namespace prefixmerge6_pm2
{
	enum class PrefixMerge6_Pm2Classes : vl::vint32_t
	{
		CallExpr = 0,
		CommaExpr = 1,
		ConstType = 2,
		CtorExpr = 3,
		FunctionType = 4,
		MemberName = 5,
		MulExpr = 6,
		Name = 7,
		PointerType = 8,
		QualifiedName = 9,
		ThrowExpr = 10,
		TypeOrExpr = 11,
		TypeOrExprToResolve = 12,
	};

	enum class PrefixMerge6_Pm2Fields : vl::vint32_t
	{
		CallExpr_args = 0,
		CallExpr_func = 1,
		CommaExpr_first = 2,
		CommaExpr_second = 3,
		ConstType_type = 4,
		CtorExpr_args = 5,
		CtorExpr_type = 6,
		FunctionType_args = 7,
		FunctionType_returnType = 8,
		MemberName_member = 9,
		MemberName_parent = 10,
		MulExpr_first = 11,
		MulExpr_second = 12,
		Name_name = 13,
		PointerType_type = 14,
		ThrowExpr_arg = 15,
		TypeOrExprToResolve_candidates = 16,
	};

	extern const wchar_t* PrefixMerge6_Pm2TypeName(PrefixMerge6_Pm2Classes type);
	extern const wchar_t* PrefixMerge6_Pm2CppTypeName(PrefixMerge6_Pm2Classes type);
	extern const wchar_t* PrefixMerge6_Pm2FieldName(PrefixMerge6_Pm2Fields field);
	extern const wchar_t* PrefixMerge6_Pm2CppFieldName(PrefixMerge6_Pm2Fields field);

	class PrefixMerge6_Pm2AstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif