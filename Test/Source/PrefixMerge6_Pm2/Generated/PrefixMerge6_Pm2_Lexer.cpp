/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge6_Pm2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge6_Pm2_Lexer.h"

namespace prefixmerge6_pm2
{
	bool PrefixMerge6_Pm2TokenDeleter(vl::vint token)
	{
		switch((PrefixMerge6_Pm2Tokens)token)
		{
		case PrefixMerge6_Pm2Tokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* PrefixMerge6_Pm2TokenId(PrefixMerge6_Pm2Tokens token)
	{
		static const wchar_t* results[] = {
			L"OPEN_ROUND",
			L"CLOSE_ROUND",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"COMMA",
			L"DOT",
			L"CONST",
			L"THROW",
			L"ASTERISK",
			L"ID",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge6_Pm2TokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge6_Pm2TokenDisplayText(PrefixMerge6_Pm2Tokens token)
	{
		static const wchar_t* results[] = {
			L"(",
			L")",
			L"{",
			L"}",
			L",",
			L".",
			L"const",
			L"throw",
			L"*",
			nullptr,
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge6_Pm2TokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge6_Pm2TokenRegex(PrefixMerge6_Pm2Tokens token)
	{
		static const wchar_t* results[] = {
			L"/(",
			L"/)",
			L"/{",
			L"/}",
			L",",
			L".",
			L"const",
			L"throw",
			L"/*",
			L"[a-zA-Z_]/w*",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge6_Pm2TokenCount ? results[index] : nullptr;
	}

	void PrefixMerge6_Pm2LexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 396; // 2887 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 140;
		static const vl::vint dataSolidRows = 1;
		static const vl::vint dataRows = 2;
		static const char* compressed[] = {
			"\x47\x0B\x00\x00\x84\x01\x00\x00\x16\x00\x01\x9D\x01\x84\x81\x80\x0E\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x14\x17\x84\xAA\x1A\x84\x84\x15\x8E\x82\x2E\x20\x84\x90\x14\x81\x1C\x83\x20\x04\xDA\x04\x9F\x2B\x94\x81\x30\x82\x62\x04\xA3\x32\x94\x84\x30\x83\x33\x04\xE8\x39\x84\x89\x34\x81\x36\x82\x6E\x40\x84\x8F\x33\xA4\x80\x38\x82\x71\x04\xB2\x2A\xA4\x83\x39\xA6\x82\x74\x50\x84\x95\x34\x86\x38\x83\x3B\x57\x84\xB8\x24\x8A\x3C\x83\x3C\xAF\x04\xFD\x21\xA4\x8B\x04\xB2\xB3\x80\x65\x81\x81\x04\x82\x02\x85\x81\x02\x04\x86\x04\x9F\x74\xBF\x7C\x87\x80\x77\x80\x39\xA7\x0D\x80\xBD\xBE\xBD\x7F\xF9\x82\xC4\x88\x01\xC3\xBF\x01\x04\x84\x33\xB5\xBC\xC5\xC6\xC7\xC7\x90\x91\xD2\xD3\xC4\xCD\xCA\xCB\xCB\x98\x99\xDA\xDB\xCC\xCD\xCE\xCF\xCF\xA0\xA1\xE2\xC3\xD4\xD5\xD2\xD3\xD3\xA8\xA9\xEA\xCB\xDC\xD5\xD7\xD5\x87\x01\xB0\xC0\x12\xD4\xD8\x89\xD8\xDB\xB3\x84\x8C\x18\xD5\xDF\xDA\xDF\xDC\xBF\xAE\xD2\xDD\xD0\xE5\xE0\xE2\x07\xBC\xC9\xFF\xC4\xEC\xE3\xC6\xE1\xE7\xD0\xD1\xCD\xEB\xEA\xE6\xE1\xEB\xE9\xD6\xC1\xD3\xCF",
			"\x04\x84\xED\x80\xEF\x00\x60\xD1\xE3\xF4\xF7\xC4\xED\xF3\xB8\x90\x17\xEB\xF4\xE9\x81\xF3\xBA\xE8\xED\xD9\xF3\xF1\xFC\xFA\xE7\xF2\xF5\xF9\xD5\xF1\x0C\xF3\xF8\xCA\xF0\x00\x9D\x77\x7F\x7B\x04\x82\x7A\x7E\x7C\x07\x80\x02\x05\x7F\xB2\x45\x89\x81\x7D\x13\x0C\x8D\x7E\x83\x12\x88\x85\x85\x71\x14\x13\x84\x83\x83\x17\x89\x85\x04\x6E\x14\x96\x82\x8A\x7D\x23\xB5\x71\x88\x89\x28\x9C\x85\x8B\x80\x8F\x7E\x3F\x3F\x0F\x00\x45\x42\x8C\x00\x6B\x41\x4D\x59\x40\x88\x41\x4A\x63\x5B\x6E\x40\x09\x41\x40\x85\x41\x4F\x8C\x60\x42\xBD\x83\x91\x5E\x43\x89\x9D\x8E\x5C\x01\x7C\x51\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
