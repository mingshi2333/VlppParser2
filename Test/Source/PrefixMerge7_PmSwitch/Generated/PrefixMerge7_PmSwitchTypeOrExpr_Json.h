/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:TypeOrExpr
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_PREFIXMERGE7_PMSWITCH_TYPEOREXPR_AST_JSON_VISITOR
#define VCZH_PARSER2_UNITTEST_PREFIXMERGE7_PMSWITCH_TYPEOREXPR_AST_JSON_VISITOR

#include "PrefixMerge7_PmSwitchTypeOrExpr.h"

namespace prefixmerge7_pmswitch
{
	namespace json_visitor
	{
		/// <summary>A JSON visitor, overriding all abstract methods with AST to JSON serialization code.</summary>
		class TypeOrExprVisitor
			: public vl::glr::JsonVisitorBase
			, protected virtual TypeOrExpr::IVisitor
			, protected virtual QualifiedName::IVisitor
			, protected virtual GenericQualifiedName::IVisitor
		{
		protected:
			virtual void PrintFields(CallExpr* node);
			virtual void PrintFields(CommaExpr* node);
			virtual void PrintFields(ConstType* node);
			virtual void PrintFields(CtorExpr* node);
			virtual void PrintFields(FunctionType* node);
			virtual void PrintFields(GenericMemberName* node);
			virtual void PrintFields(GenericName* node);
			virtual void PrintFields(GenericQualifiedName* node);
			virtual void PrintFields(GtExpr* node);
			virtual void PrintFields(LtExpr* node);
			virtual void PrintFields(MemberName* node);
			virtual void PrintFields(MulExpr* node);
			virtual void PrintFields(Name* node);
			virtual void PrintFields(PointerType* node);
			virtual void PrintFields(QualifiedName* node);
			virtual void PrintFields(ThrowExpr* node);
			virtual void PrintFields(TypeOrExpr* node);
			virtual void PrintFields(TypeOrExprToResolve* node);

		protected:
			void Visit(TypeOrExprToResolve* node) override;
			void Visit(QualifiedName* node) override;
			void Visit(CallExpr* node) override;
			void Visit(CtorExpr* node) override;
			void Visit(MulExpr* node) override;
			void Visit(LtExpr* node) override;
			void Visit(GtExpr* node) override;
			void Visit(ThrowExpr* node) override;
			void Visit(CommaExpr* node) override;
			void Visit(ConstType* node) override;
			void Visit(PointerType* node) override;
			void Visit(FunctionType* node) override;

			void Visit(Name* node) override;
			void Visit(MemberName* node) override;
			void Visit(GenericQualifiedName* node) override;

			void Visit(GenericName* node) override;
			void Visit(GenericMemberName* node) override;

		public:
			TypeOrExprVisitor(vl::stream::StreamWriter& _writer);

			void Print(TypeOrExpr* node);
		};
	}
}
#endif