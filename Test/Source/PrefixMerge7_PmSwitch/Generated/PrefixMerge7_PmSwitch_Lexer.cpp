/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge7_PmSwitch
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge7_PmSwitch_Lexer.h"

namespace prefixmerge7_pmswitch
{
	bool PrefixMerge7_PmSwitchTokenDeleter(vl::vint token)
	{
		switch((PrefixMerge7_PmSwitchTokens)token)
		{
		case PrefixMerge7_PmSwitchTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* PrefixMerge7_PmSwitchTokenId(PrefixMerge7_PmSwitchTokens token)
	{
		static const wchar_t* results[] = {
			L"OPEN_ROUND",
			L"CLOSE_ROUND",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"LT",
			L"GT",
			L"COMMA",
			L"DOT",
			L"CONST",
			L"THROW",
			L"ASTERISK",
			L"ID",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge7_PmSwitchTokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge7_PmSwitchTokenDisplayText(PrefixMerge7_PmSwitchTokens token)
	{
		static const wchar_t* results[] = {
			L"(",
			L")",
			L"{",
			L"}",
			L"<",
			L">",
			L",",
			L".",
			L"const",
			L"throw",
			L"*",
			nullptr,
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge7_PmSwitchTokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge7_PmSwitchTokenRegex(PrefixMerge7_PmSwitchTokens token)
	{
		static const wchar_t* results[] = {
			L"/(",
			L"/)",
			L"/{",
			L"/}",
			L"/<",
			L"/>",
			L",",
			L".",
			L"const",
			L"throw",
			L"/*",
			L"[a-zA-Z_]/w*",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge7_PmSwitchTokenCount ? results[index] : nullptr;
	}

	void PrefixMerge7_PmSwitchLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 450; // 3335 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 194;
		static const vl::vint dataSolidRows = 1;
		static const vl::vint dataRows = 2;
		static const char* compressed[] = {
			"\x07\x0D\x00\x00\xBA\x01\x00\x00\x18\x00\x01\x9F\x01\x84\x81\x82\x0E\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x14\x17\x84\xAA\x1A\x84\x84\x15\x8E\x82\x2E\x20\x84\x90\x14\x81\x1C\x82\x1E\x27\x84\xBE\x0A\x94\x81\x20\x82\x2D\x04\xDF\x31\x84\x81\x34\x82\x30\x82\x63\x38\x84\x84\x34\x87\x30\x82\x34\x3F\x84\xA9\x24\x8D\x34\x82\x36\xA3\x04\xEF\x09\xA4\x80\x3C\x81\x38\x82\x72\x50\x84\x93\x33\xAC\x80\x3A\xAB\x04\xF5\x04\x96\x34\x87\x39\xAE\x82\x78\x04\xBA\x24\x8B\x3C\xB0\x83\x3E\x67\x90\x81\x8F\x8B\xB2\xB4\x01\x00\x04\x82\x04\x8B\x04\x87\x00\x82\x04\x04\xFF\x7A\xBF\x75\x04\x82\x02\x82\x0C\x00\xC2\xC1\x89\x81\x81\xC0\xC3\x83\x80\x07\xCA\xC9\xC3\xC7\xC4\x86\x88\x91\xCC\xC1\x83\x04\x80\x03\xBC\x7B\x99\xDA\xDB\xCC\xCD\xCE\xCF\xCF\xA0\xA1\xE2\xC3\xD4\xD5\xD2\xD3\xD3\xA8\xA9\xEA\xCB\xDC\xD5\xD6\xD7\xD7\xB0\xB1\xF2\xD3\xD4\xDD\xDA\xDB\xDB\xB8\xB9\xFA\xDB\xDC\xDD\xDE\xDF\xDF\xC0\xC1\xC1\xEF\x08\xCB\xCC\xE3\x80\xC7\x80\x09\xEB\xE4\x84\xE4\xE4\x82\x0E\x4D\xD2\xEF\xE4\xEA\xE7\xE8\xEB\x01\xC2\xFB\xA9",
			"\xED\xCE\xE4\xED\xEF\xC9\x90\x17\xFE\xE4\xF3\xF2\xF3\xEC\xDA\xE9\xEA\xF3\xDC\xEC\xCD\xF3\xEA\xEF\xE0\xE7\xF2\xF0\xFF\xE9\xD1\x08\x04\xF8\xC1\x9A\xF0\x04\xFF\xF5\xFF\xC2\x6D\x76\x73\x7C\xF1\x49\x72\x04\x81\x08\xB5\x78\x7A\x76\x02\x9A\x65\x81\x82\xF4\x51\x8F\x81\x75\xEA\x4D\x89\x67\x84\x12\x90\x83\x04\x84\xDE\x77\x79\x7F\x87\xFB\x45\x70\x83\x88\xBB\x56\x8B\x74\x87\x28\x8A\x80\x00\x05\x29\x80\x05\x86\x88\x17\xAD\x81\x7D\x05\x32\xB3\x7F\x8B\x82\x0E\xB5\x8A\x88\x86\x16\x10\x87\x8E\x8B\xEE\x7A\x89\x87\x8E\xF3\x57\x06\x7D\x7A\x26\xBA\x58\x87\x92\x42\x9D\x88\x90\x8C\x27\x84\x92\x97\x90\x54\xB1\x71\x6A\x3F\x7A\x40\x45\x43\x96\x6F\x71\x54\x41\x65\x01\x57\x61\x41\x5F\x01\x7F\x51\x42\x5D\x01\x74\x59\x99\x43\x6B\x92\x6A\x98\x00\x6F\xAF\x9B\x61\x9C\x73\x75\x91\x40\x5E\x84\x44\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
