/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge8_PmVariadic
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PARSER2_UNITTEST_PREFIXMERGE8_PMVARIADIC_AST_ASSEMBLER
#define VCZH_PARSER2_UNITTEST_PREFIXMERGE8_PMVARIADIC_AST_ASSEMBLER

#include "PrefixMerge8_PmVariadicTypeOrExpr.h"

namespace prefixmerge8_pmvariadic
{
	enum class PrefixMerge8_PmVariadicClasses : vl::vint32_t
	{
		CallExpr = 0,
		ConstType = 1,
		CtorExpr = 2,
		FunctionType = 3,
		GenericMemberName = 4,
		GenericName = 5,
		GenericQualifiedName = 6,
		MemberName = 7,
		MulExpr = 8,
		Name = 9,
		PointerType = 10,
		QualifiedName = 11,
		TypeOrExpr = 12,
		TypeOrExprOrOthers = 13,
		TypeOrExprToResolve = 14,
		VariadicArgument = 15,
	};

	enum class PrefixMerge8_PmVariadicFields : vl::vint32_t
	{
		CallExpr_args = 0,
		CallExpr_func = 1,
		ConstType_type = 2,
		CtorExpr_args = 3,
		CtorExpr_type = 4,
		FunctionType_args = 5,
		FunctionType_returnType = 6,
		GenericMemberName_member = 7,
		GenericMemberName_parent = 8,
		GenericName_name = 9,
		GenericQualifiedName_args = 10,
		MemberName_member = 11,
		MemberName_parent = 12,
		MulExpr_first = 13,
		MulExpr_second = 14,
		Name_name = 15,
		PointerType_type = 16,
		TypeOrExprToResolve_candidates = 17,
		VariadicArgument_operand = 18,
	};

	extern const wchar_t* PrefixMerge8_PmVariadicTypeName(PrefixMerge8_PmVariadicClasses type);
	extern const wchar_t* PrefixMerge8_PmVariadicCppTypeName(PrefixMerge8_PmVariadicClasses type);
	extern const wchar_t* PrefixMerge8_PmVariadicFieldName(PrefixMerge8_PmVariadicFields field);
	extern const wchar_t* PrefixMerge8_PmVariadicCppFieldName(PrefixMerge8_PmVariadicFields field);

	class PrefixMerge8_PmVariadicAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif