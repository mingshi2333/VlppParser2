/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge8_PmVariadic
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge8_PmVariadic_Lexer.h"

namespace prefixmerge8_pmvariadic
{
	bool PrefixMerge8_PmVariadicTokenDeleter(vl::vint token)
	{
		switch((PrefixMerge8_PmVariadicTokens)token)
		{
		case PrefixMerge8_PmVariadicTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* PrefixMerge8_PmVariadicTokenId(PrefixMerge8_PmVariadicTokens token)
	{
		static const wchar_t* results[] = {
			L"OPEN_ROUND",
			L"CLOSE_ROUND",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"COMMA",
			L"VARIADIC",
			L"DOT",
			L"CONST",
			L"ASTERISK",
			L"ID",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge8_PmVariadicTokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge8_PmVariadicTokenDisplayText(PrefixMerge8_PmVariadicTokens token)
	{
		static const wchar_t* results[] = {
			L"(",
			L")",
			L"{",
			L"}",
			L",",
			L"...",
			L".",
			L"const",
			L"*",
			nullptr,
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge8_PmVariadicTokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge8_PmVariadicTokenRegex(PrefixMerge8_PmVariadicTokens token)
	{
		static const wchar_t* results[] = {
			L"/(",
			L"/)",
			L"/{",
			L"/}",
			L",",
			L"...",
			L".",
			L"const",
			L"/*",
			L"[a-zA-Z_]/w*",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge8_PmVariadicTokenCount ? results[index] : nullptr;
	}

	void PrefixMerge8_PmVariadicLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 320; // 2107 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 64;
		static const vl::vint dataSolidRows = 1;
		static const vl::vint dataRows = 2;
		static const char* compressed[] = {
			"\x3B\x08\x00\x00\x38\x01\x00\x00\x13\x00\x01\x98\x01\x84\x81\x83\x0A\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x14\x17\x84\xAA\x1A\x84\x84\x15\x8E\x82\x2E\x20\x84\x90\x14\x81\x1C\x83\x20\x04\xDA\x04\x9F\x2B\x94\x81\x30\x82\x62\x04\xA3\x32\x94\x84\x30\x83\x36\x04\xEE\x39\x84\x8F\x34\x9C\x82\x38\x04\xF2\x04\x93\x33\xA4\x80\x3A\xA3\x04\xF5\x04\x9A\x34\x83\x3D\xA6\x82\x7D\x50\x8D\x81\x8C\x84\xAB\xA8\x00\x01\x04\x82\x04\x88\x04\x81\x02\x82\x06\x04\xBF\x63\xBF\x79\x85\x80\xB3\x00\x68\x87\x0A\x87\xB4\xB5\xB4\xB7\x68\xE8\x83\x04\x84\x02\xB0\xB3\xBB\x78\xF9\xBA\xBB\xBC\xBD\xBE\xBF\xBF\x80\x81\xC2\xC3\xC4\xC5\xC2\xC3\xC3\x88\x89\xCA\xCB\xCC\xC5\xC6\xC7\xC7\x90\x91\xD2\xC9\xCB\x06\xBB\xC9\xCB\x90\x8F\x81\x9A\xC0\x04\xCE\xCE\x88\x9B\x84\x8C\x00\xDD\xCC\xD0\xCE\xCC\xA8\xA9\xEA\xC3\xBF\xC9\xD2\xD7\xD2\xAF\xAD\xF0\xD3\xD2\xDF\xBE\x06\x82\xB7\x81\xB9\xC0\x0B\xDB\xD6\xDE\xD4\x0F\x16\xFF\xC3\xEF\xBA\xDA\xE2\xD2\x10\x26\xCA\xEF\xD4\xE1\xBF\xE3\xD8\xCB\xB4\xD1\xE7\xDE\xBB\xDE\xEA\xDC\xC2\xCD\xDA\xFB",
			"\xEC\xE9\xCB\xE6\xE9\xD0\xE1\xC0\x11\x01\xED\xEF\x7F\xEF\xE8\xD3\xC4\x92\x04\xD6\xF1\xF4\xF1\xEF\xE0\xC0\x1F\xBE\x7F\x7B\x02\x80\x05\xF9\xD8\xBA\xA4\x83\xB9\x81\xBA\x01\x61\x5D\x59\x40\x5D\x43\x80\x01\x55\x00\x15\x66\x80\x5A\x08\x9F\x5B\x80\x41\x6B\x41\x40",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
