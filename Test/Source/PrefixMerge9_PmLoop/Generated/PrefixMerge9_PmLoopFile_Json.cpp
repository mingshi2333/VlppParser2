/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:File
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopFile_Json.h"

namespace prefixmerge9_pmloop::json_visitor
{
	void FileVisitor::PrintFields(ClassItem* node)
	{
	}
	void FileVisitor::PrintFields(File* node)
	{
		BeginField(L"items");
		BeginArray();
		for (auto&& listItem : node->items)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void FileVisitor::PrintFields(IntCommaItem* node)
	{
	}
	void FileVisitor::PrintFields(IntDotItem* node)
	{
	}
	void FileVisitor::PrintFields(IntItem* node)
	{
	}
	void FileVisitor::PrintFields(Item* node)
	{
	}

	void FileVisitor::Visit(IntItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"IntItem", node);
		PrintFields(static_cast<Item*>(node));
		PrintFields(static_cast<IntItem*>(node));
		EndObject();
	}

	void FileVisitor::Visit(IntCommaItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"IntCommaItem", node);
		PrintFields(static_cast<Item*>(node));
		PrintFields(static_cast<IntCommaItem*>(node));
		EndObject();
	}

	void FileVisitor::Visit(IntDotItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"IntDotItem", node);
		PrintFields(static_cast<Item*>(node));
		PrintFields(static_cast<IntDotItem*>(node));
		EndObject();
	}

	void FileVisitor::Visit(ClassItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ClassItem", node);
		PrintFields(static_cast<Item*>(node));
		PrintFields(static_cast<ClassItem*>(node));
		EndObject();
	}

	FileVisitor::FileVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void FileVisitor::Print(Item* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<Item::IVisitor*>(this));
	}

	void FileVisitor::Print(File* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"File", node);
		PrintFields(static_cast<File*>(node));
		EndObject();
	}

}
