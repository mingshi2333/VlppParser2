/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:File
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopFile_Traverse.h"

namespace prefixmerge9_pmloop::traverse_visitor
{
	void FileVisitor::Traverse(vl::glr::ParsingToken& token) {}
	void FileVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
	void FileVisitor::Traverse(ClassItem* node) {}
	void FileVisitor::Traverse(File* node) {}
	void FileVisitor::Traverse(IntCommaItem* node) {}
	void FileVisitor::Traverse(IntDotItem* node) {}
	void FileVisitor::Traverse(IntItem* node) {}
	void FileVisitor::Traverse(IntQuestionItem* node) {}
	void FileVisitor::Traverse(Item* node) {}
	void FileVisitor::Traverse(ItemToResolve* node) {}
	void FileVisitor::Traverse(QuestionItem* node) {}

	void FileVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
	void FileVisitor::Finishing(ClassItem* node) {}
	void FileVisitor::Finishing(File* node) {}
	void FileVisitor::Finishing(IntCommaItem* node) {}
	void FileVisitor::Finishing(IntDotItem* node) {}
	void FileVisitor::Finishing(IntItem* node) {}
	void FileVisitor::Finishing(IntQuestionItem* node) {}
	void FileVisitor::Finishing(Item* node) {}
	void FileVisitor::Finishing(ItemToResolve* node) {}
	void FileVisitor::Finishing(QuestionItem* node) {}

	void FileVisitor::Visit(ItemToResolve* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<Item*>(node));
		Traverse(static_cast<ItemToResolve*>(node));
		for (auto&& listItem : node->candidates)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<ItemToResolve*>(node));
		Finishing(static_cast<Item*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void FileVisitor::Visit(IntItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<Item*>(node));
		Traverse(static_cast<IntItem*>(node));
		Finishing(static_cast<IntItem*>(node));
		Finishing(static_cast<Item*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void FileVisitor::Visit(IntCommaItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<Item*>(node));
		Traverse(static_cast<IntCommaItem*>(node));
		Finishing(static_cast<IntCommaItem*>(node));
		Finishing(static_cast<Item*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void FileVisitor::Visit(IntDotItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<Item*>(node));
		Traverse(static_cast<IntDotItem*>(node));
		Finishing(static_cast<IntDotItem*>(node));
		Finishing(static_cast<Item*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void FileVisitor::Visit(IntQuestionItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<Item*>(node));
		Traverse(static_cast<IntQuestionItem*>(node));
		Finishing(static_cast<IntQuestionItem*>(node));
		Finishing(static_cast<Item*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void FileVisitor::Visit(ClassItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<Item*>(node));
		Traverse(static_cast<ClassItem*>(node));
		Finishing(static_cast<ClassItem*>(node));
		Finishing(static_cast<Item*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void FileVisitor::Visit(QuestionItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<Item*>(node));
		Traverse(static_cast<QuestionItem*>(node));
		InspectInto(node->item.Obj());
		Finishing(static_cast<QuestionItem*>(node));
		Finishing(static_cast<Item*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void FileVisitor::InspectInto(Item* node)
	{
		if (!node) return;
		node->Accept(static_cast<Item::IVisitor*>(this));
	}

	void FileVisitor::InspectInto(File* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<File*>(node));
		for (auto&& listItem : node->items)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<File*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

}
