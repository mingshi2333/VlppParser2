/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopModuleParser.h"

namespace prefixmerge9_pmloop
{
	void PrefixMerge9_PmLoopModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1604; // 12396 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 68;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x6C\x30\x00\x00\x3C\x06\x00\x00\x05\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x86\x02\x85\x05\x0A\x91\x0A\x94\x0A\x80\x0E\x84\x10\x0A\xFC\x4A\x9F\x7C\x8D\x8C\x8E\x85\x00\x1E\x9E\x80\x92\x95\x8C\x90\x90\x01\x1B\xA5\x9F\x74\x93\x95\x97\x92\x2F\xA2\xB1\x83\x9A\x90\x99\x9A\x99\x37\xB4\x89\x8B\x9C\x91\x9E\x92\x85\x29\x89\x81\xA6\x8C\x9B\x9B\x9F\x9D\x2E\xBE\x9F\x8A\xAD\x98\xA6\x9A\xA7\x38\xD0\xBA\x84\xA9\xA1\x86\x00\xA0\x4C\xC6\x8B\xB2\xA7\xA4\xAB\xA6\xAF\x51\xE0\x93\xA3\x85\xA1\xAE\xB2\xAE\x5B\x86\x8C\x82\xA7\xB2\xB1\xAE\xB2\x55\xEE\xA9\xB0\xBF\xAC\xB9\xB0\xBB\x63\x82\xA5\xA9\x84\x00\xAD\x84\x80\x6C\xE8\x8D\xB2\xB3\xC0\xBF\xB6\xBD\x71\x86\xF3\xA8\xC5\xBC\xC7\xBA\xC7\x79\x81\xBB\xA4\xC0\x96\x85\xC0\xCA\x6D\x8A\xC5\xD0\xC7\xC2\xC9\xC4\xCE\x8B\x9E\xCD\xC2\xDF\xC4\xD1\xC9\x90\x9F\x81\x87\x1E\xB6\x80\x86\x83\xA1\x9A\xA0\x89\x0C\xD1\xD9\xCC\xD1\xCD\xA6\x9D\xE8\xC3\xDB\xDD\xD1\xDF\xD3\x93\x83\x8A\x14\xD2\x80\x8B\xCB\xDA\x82\xDA\xB8\xDF\xDA\xD9\xE3\xDA\xE5\xD0\xB6\xF9\xC1\xD0\x04\x04\xE3\xE9\xCB\xCE\xD8\xF1",
			"\xE9\xE2\xE8\xE6\xEA\xDA\xDF\xD9\xE9\xD0\x05\x07\xEA\x00\x0E\x67\xE1\xEF\x0A\xF4\xF1\xF1\xF7\xEE\xF1\xFC\xD0\x0D\xF4\xDE\x89\xE3\x02\x92\x35\xFE\xD0\xFC\xDD\xFE\xDF\x13\x3B\x70\x72\x7C\xFC\x44\x83\x82\x7F\x06\x8D\x79\x80\x78\xE4\x54\x48\x7F\x76\xDE\x7F\x77\x81\x81\x08\x95\x84\x86\x6F\x15\x02\x8A\x82\x85\x13\x9D\x8B\x87\x85\x1E\x8C\x8C\x86\x6E\x16\x1A\x82\x88\x88\x1F\xA1\x83\x78\x6F\x17\x26\x8B\x88\x8A\x27\xAA\x8C\x74\x66\xDD\x49\x46\x47\x83\x00\x19\x0A\x43\x55\x35\xB4\x8E\x8C\x72\x3F\x8F\x71\x87\x82\x2F\xA7\x6B\x06\x8B\x33\x80\x9A\x92\x90\x3D\x83\x4C\x04\x92\x43\xA3\x81\x8D\x8A\x54\x93\x96\x95\x91\xBA\x5D\x00\x95\x93\x4C\x81\x90\x84\x97\x5F\x86\x4E\x07\x96\x06\x5F\x04\x9B\x92\x61\xA8\x92\x79\x92\x02\x58\x48\x8E\x84\x55\x98\x97\x94\x9B\x69\x9D\x93\x41\x08\xE7\x62\x0B\x8D\x94\x30\xB2\x9E\x9C\x9D\x6B\xBC\x92\x8E\x42\x24\x27\x92\x41\x09\xE7\x66\x06\xA1\x9D\x8C\x80\x07\x0B\xA2\x00\x28\x07\x79\x0A\x90\xB0\x94\x74\x1E\x7B\xBC\x5C\x50\x60\x84\x7C\x4B\x59\xA7\x2B\x7C\x86\x41\x5F\x82\x64\xA0\xA9\x49\x9C\x9A\x6E\xA4\x53",
			"\x3C\x62\xA7\x4B\x6D\x9F\xAA\xA1\xAA\x42\xA6\x9A\x69\xAB\x6D\x3C\x77\xA8\x74\x4F\xAB\x42\x6B\xAA\xAF\xB3\x96\x5C\x52\x6B\xB2\xA5\x46\x67\xA9\x22\x7A\xA2\x78\xAF\xAC\xAB\x41\xAC\xAE\xC1\xAA\x53\xB1\xB3\xC6\x94\xB2\x49\xAD\xD0\xA8\xA6\xB6\x47\xCF\xBB\xA1\xB7\xAB\xD8\x5D\xBB\xB3\xB7\x02\x58\xB8\x76\xB2\x3C\x79\xAB\xB5\x47\xBD\x88\xBC\xB7\xBA\x1C\x6E\xA2\x40\x6C\xB7\x72\xB1\x42\xBD\xE2\x44\xB9\xB6\x48\xC7\x85\xB9\xB0\xBC\xFF\x2D\xBE\xBF\xBB\xC0\xA5\x48\xBC\xBD\xD8\x78\xB2\xB8\x4F\xFA\x9E\xB5\xB5\xC1\xFF\x90\xCE\x44\xBA\xE9\xA5\x42\xC3\xBE\x04\xEE\xBD\x47\xC1\xD3\x92\xCD\x47\x6C\xE0\xB7\x64\xC5\xC5\x1E\x66\xB3\xBA\xB6\x1E\xDC\x43\xC8\xC9\x1C\x57\xCE\xC2\x48\x0B\xEC\xCB\xC6\x8B\x0D\xE7\xC2\x48\xC8\x21\xE2\x71\xCE\xCC\xFF\x38\xBA\x73\xCA\x2C\xEE\xC6\xCD\xC6\x03\xF3\xCF\x9B\x4A\x35\xFC\xCC\x44\xCE\x21\xFF\xAA\xC5\xBC\xB4\x8C\x5E\xCF\xA6\x00\xFB\xC2\xCC\xBE\x26\xFC\x49\xD6\xD2\x40\xE4\xC6\xD4\xCB\x53\xC2\x68\xBC\xBE\x4E\xC5\xD0\xD6\xA6\x62\xCA\x4F\xD5\x47\x6B\xD5\xC8\xD4\xD5\x29\xFF\x3D\xD5\xC5\x5B\xFC\xC3\xDD\xBA\x1C",
			"\xC2\x6D\xD8\xDE\x39\xC9\xCE\x8B\xD8\x4C\x7B\xDD\xA9\xD4\x69\xC7\xD6\xC2\xDA\x81\xC0\xCF\xDA\x60\x77\xE5\xD8\xC6\xD1\x39\xCE\xEF\xCA\x47\x8B\xC4\x6D\xE2\xB3\x8A\xFD\xDA\xCD\xE6\x68\xC4\x65\xDE\xCC\x9F\xEC\xC1\xE8\xC9\xA3\xF4\xD0\xC0\xD3\xE0\x9A\xD7\xEA\xE6\x3C\x7D\xBF\xE0\x47\xAE\xD3\xEF\xC4\xEB\x2B\x4F\xAD\xDC\xC2\x00\x0A\xC8\xE1\xE7\x03\x4A\xB1\xEC\x00\x42\xFF\xE2\xD1\xCD\xA8\xC1\x48\xEC\xF1\x99\x86\x43\x71\x42\xC6\x46\x46\x75\x42\xCB\xC6\x46\x78\xF4\x0A\x42\xDD\xF3\x40\x42\xCF\xFA\xF1\xF5\x0A\x53\xFB\xF5\x42\xC5\xC0\x08\xED\xF8\xF8\xA9\x78\x8E\xF9\x06\x78\xBC\x79\xDF\xCA\xA0\x4B\xDC\x48\x26\xD1\xF1\xCB\xFB\x9A\xE1\xFE\xFA\x42\x6D\x27\x7F\xED\xCD\xF7\xC9\x4E\x1B\x79\x26\x74\x3D\xDF\x62\x5F\x0D\xF3\x20\x20\x7D\xF3\x6A\x20\x1C\x67\x32\x68\xEF\x49\x81\x21\x71\x1A\x7E\x42\x7A\x4A\x72\x85\x32\x0C\x81\x0A\x2B\x7D\xCE\x62\x53\x0F\xF3\x38\x5B\x04\x15\x8A\x20\x1D\x06\x8A\x21\x12\x43\x86\x3B\x26\x63\x4F\x09\xE0\x40\x00\x65\x4F\x4D\x6F\xF8\x55\x0F\x79\x4A\x5A\x4A\x18\x8A\x26\x0E\x1E\x8A\x20\x08\xA1\x86\x21\x3B\x27\x3A",
			"\x05\x9A\x64\x6C\x79\x15\x88\x76\x4B\x4B\x39\x6F\x5E\x47\x24\xEE\x45\x84\x49\xFE\x69\x7E\x3B\x20\x20\x70\x0B\xA8\x2A\x20\x65\x65\x73\x39\xF0\x69\x7A\x9A\x61\x3F\x77\x00\x53\x8D\x21\x5A\x96\x4F\xBC\x12\x82\x59\x2F\x89\x25\x66\x42\x9C\x34\x12\x83\x25\x66\xA1\x61\x38\x24\xF2\x63\x8C\x0B\xE1\x31\x7C\x0D\x10\x8F\x21\x60\x8C\x86\xB8\x63\x7A\x21\x23\x66\x8E\x20\xF7\x26\x23\xEF\x61\x36\x64\xDC\x71\x8A\x35\x77\x89\x21\x8B\x65\x89\x89\xF0\x17\x7A\x20\x5E\x89\x88\x48\x3A\x4C\x90\x35\x4A\x58\x77\x8F\x97\x5D\x22\x86\x2E\x8F\x27\xAC\x87\x77\xB8\x6E\x82\x40\x5A\x7A\x4C\x90\x35\x87\x35\x82\x5A\x34\x02\x82\x26\x8F\x3F\x83\x22\x85\x06\x2E\x8C\x79\x42\x65\x7D\x3E\x9B\x93\x20\x88\x49\x22\x2C\xBC\x34\x7D\x0C\x8A\x24\x94\x62\x8F\x54\x0B\x15\x54\x3C\x01\x8E\x7F\x96\x02\x2D\x06\x42\x61\x76\x88\x90\x06\x9B\x20\x91\x85\x96\x42\x36\x0A\x21\xA4\x64\x39\x93\x00\x02\x5F\x33\x82\x29\x8C\xDF\x20\x26\x07\xD5\x9E\x3B\x2A\x81\x22\x5D\x40\x90\x98\x99\x01\x26\x08\x31\xBC\x31\x9B\xFC\x28\x98\x00\x47\x0B\x9E\x6F\x0E\x4E\x92\x49\x8A\x20\x09\x61\x8D",
			"\x52\x39\xF2\x86\x20\x13\x86\x21\x43\xAE\x82\x22\x12\x79\x91\x50\x16\x8B\x97\x9F\xEF\x8D\x9A\x77\x37\x46\x21\x76\x8D\x50\x24\x4C\x04\xA1\x78\x7A\x38\x46\x86\x83\x25\x9B\xA7\x20\x26\x13\x3B\x79\x88\x87\xB9\x75\x22\x12\xA3\x8A\x42\x51\x0C\xA2\x35\x40\xA5\x9E\x03\x2D\x96\x41\x14\x96\x9F\x84\x14\x0A\x9E\x46\x4A\x20\x4B\xD2\x99\x21\x2A\x30\xA2\x37\x2F\x86\x22\x4A\xB4\xAD\x91\x26\x8A\x27\x94\x03\x3D\x90\x4F\xDB\x8E\xA7\x84\x30\x93\x20\x33\xA1\x9B\x49\x56\x01\xA4\x29\x4B\x3E\x4C\x09\x29\xAB\x43\xA9\x93\x4F\x8B\x0A\x26\xA3\x6F\x8A\x20\x16\x25\xAA\xA9\x83\x97\xA6\xAA\x95\x8A\xA8\x48\x5B\x04\x71\x24\x92\xA9\x9B\x60\xA8\xA6\x58\x8A\x2F\x0B\xB2\xAA\x49\xA7\x03\x22\x5C\x05\x86\x28\x4F\x80\x81\x23\x0C\x37\xB4\x3B\x5C\xE7\x96\xAE\x00\x24\x0D\xA9\xBE\x30\xAA\x5A\x81\x2B\xAE\x6E\xAF\x9E\x0C\x80\xA7\x35\x5D\x83\xB0\x01\x1D\xB4\xAF\x9D\x68\x19\xAF\x72\x0E\xBC\xAF\x96\x86\x21\x0D\x89\xBA\x34\x65\x86\xB9\x21\xCD\x9A\x95\xAF\x6B\x19\xB0\x75\x39\x9C\xB1\x42\x7D\x6F\x8D\xE9\x41\x84\x13\xB0\x2B\xB5\x92\x38\x77\x24\x18\xA6\x25\x6C\x90",
			"\x73\x21\xD7\xAB\x8F\xAB\x9A\x6F\x7E\xE0\x62\x57\x24\xDE\x8E\x8D\xB6\xBF\xBC\x9F\xA8\x59\x27\x8B\x7F\x26\x67\x24\x77\x6D\x84\xAB\x17\x90\x25\xF6\x55\x31\x2B\x83\x8D\x76\x01\xBF\x7E\x66\x50\x8F\xB9\xAC\x02\x3F\x74\x6F\xBF\x77\x25\x5D\xB2\x26\xBB\x22\x22\x69\x77\xBC\x89\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Int",
			L"_IntItem",
			L"_Item",
			L"Module",
			L"_Item_LRI_Isolated_2",
			L"_IntItem_LRI_Original",
			L"_Item_LRI_Original",
			L"Module_LRI_Original",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Int] BEGIN ",
			L"[1][_Int] END [ENDING]",
			L"[2][_Int]< \"int\" @ >",
			L"[3][_IntItem] BEGIN ",
			L"[4][_IntItem] END [ENDING]",
			L"[5][_IntItem]<< !_Int @ >>",
			L"[6][_Item] BEGIN ",
			L"[7][_Item] END [ENDING]",
			L"[8][_Item]<< !_Int ( lri:(LRI__IntItem)->_Item_LRI_Original @ ) >>",
			L"[9][_Item]<< !_Int @ ( lri:(LRI__IntItem)->_Item_LRI_Original ) >>",
			L"[10][_Item]<< !_Item_LRI_Isolated_2 @ >>",
			L"[11][Module] BEGIN ",
			L"[12][Module] END [ENDING]",
			L"[13][Module]<< !_Int ( lri:(LRI__IntItem)->Module_LRI_Original @ ) >>",
			L"[14][Module]<< !_Int @ ( lri:(LRI__IntItem)->Module_LRI_Original ) >>",
			L"[15][Module]<< !_Item_LRI_Isolated_2 ( lri:(LRI__Item)->Module_LRI_Original @ ) >>",
			L"[16][Module]<< !_Item_LRI_Isolated_2 @ ( lri:(LRI__Item)->Module_LRI_Original ) >>",
			L"[17][_Item_LRI_Isolated_2] BEGIN ",
			L"[18][_Item_LRI_Isolated_2] END [ENDING]",
			L"[19][_Item_LRI_Isolated_2]< \"class\" @ >",
			L"[20][_IntItem_LRI_Original] BEGIN ",
			L"[21][_IntItem_LRI_Original] END [ENDING]",
			L"[22][_IntItem_LRI_Original]<< !_Int @ >>",
			L"[23][_IntItem_LRI_Original]lrp:(LRI__IntItem) @",
			L"[24][_Item_LRI_Original] BEGIN ",
			L"[25][_Item_LRI_Original] END [ENDING]",
			L"[26][_Item_LRI_Original]< _IntItem_LRI_Original \",\" @ >",
			L"[27][_Item_LRI_Original]< _IntItem_LRI_Original \".\" @ >",
			L"[28][_Item_LRI_Original]< _IntItem_LRI_Original @ \",\" >",
			L"[29][_Item_LRI_Original]< _IntItem_LRI_Original @ \".\" >",
			L"[30][_Item_LRI_Original]<< !_Item_LRI_Isolated_2 @ >>",
			L"[31][_Item_LRI_Original]lrp:(LRI__Item) @",
			L"[32][Module_LRI_Original] BEGIN ",
			L"[33][Module_LRI_Original] END [ENDING]",
			L"[34][Module_LRI_Original]< _Item_LRI_Original @ { _Item } >",
			L"[35][Module_LRI_Original]< _Item_LRI_Original { _Item @ } >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge9_PmLoopTokens, ModuleParserStates, PrefixMerge9_PmLoopAstInsReceiver>(&PrefixMerge9_PmLoopTokenDeleter, &PrefixMerge9_PmLoopLexerData, &PrefixMerge9_PmLoopModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge9_PmLoopTypeName((PrefixMerge9_PmLoopClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(tokens, this, codeIndex);
	}
}
