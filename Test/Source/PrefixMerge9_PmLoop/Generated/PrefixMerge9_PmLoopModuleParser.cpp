/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopModuleParser.h"

namespace prefixmerge9_pmloop
{
	void PrefixMerge9_PmLoopModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1879; // 15112 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 87;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\x08\x3B\x00\x00\x4F\x07\x00\x00\x06\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x80\x81\x84\x07\x0A\x92\x0A\x95\x0A\x81\x0E\x85\x0E\x0A\xC0\x01\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x90\x21\x9B\x9C\x86\x9F\x7D\x90\x96\x97\x26\xB0\xA3\x92\x94\x92\x84\x97\x96\x36\xAF\xB9\x91\x9B\x9B\x99\x9F\x9A\x2B\xBC\x81\xBE\x99\x82\x96\x82\xA3\x03\xB7\xB4\x87\x9F\x9C\xA7\xA0\xA0\x06\xCA\x8D\xA0\x93\xA8\x9F\xA6\xA7\x51\xBA\x97\xB4\xA9\x82\x02\x84\xA4\x02\xD2\x9B\xB6\xA9\xAA\xA1\xB2\xA2\x67\xD0\x89\xBA\xA9\xB0\xAF\xB4\xB3\x6F\xE8\xB1\xAA\xB1\xB4\xB7\xB8\xB7\x0B\xDF\x95\xAB\xAC\xAD\xB5\xBF\xBB\x7F\xF5\xB0\xA2\xC2\xBC\xC0\xBB\x80\x62\xFE\xA4\xA3\x84\x02\x86\xAF\x84\x0E\xC7\xBB\xB3\xC3\xB4\xBF\xC4\xC3\x78\x88\xF6\xB8\xC1\xC2\xCF\xC0\xCF\x85\xA0\xC7\xC2\x9B\xCA\xD1\xCC\x00\x07\x7A\x95\xD4\xCA\xC6\xCA\xD6\xD6\x80\x97\xE6\xDD\xC4\xD7\xCD\xDB\xD0\xB7\xA3\xC8\x92\xC9\x81\x06\xD5\xD6\xB0\x82\x8A\x1F\xD1\xDF\xD7\xD5\xE3\xC0\xC8\xC5\xEA\x8B\x04\xE0\xCE\xD9\xB9\xA7\xC9\xCB\xEA\xE2\x80\x06\xE7\xB3\xD0\xCD\x18",
			"\xE1\xEC\xDB\xE9\xE7\xC6\xC9\xE2\xF4\xE6\x80\x89\xA3\xE0\xD9\xE1\xE4\xEB\xF2\x87\x04\xEF\xEF\xE9\xE8\xC0\x10\x0E\xC1\x89\xFB\xEA\xF1\xF8\xDD\xF0\xE0\xFB\xFE\xF4\xF0\xF2\x7D\x72\x81\x69\x00\x14\x0F\x78\x81\x14\x5D\x5A\x43\x05\x07\xB6\x63\x82\x83\x04\x98\x0D\x80\x6E\x16\x4A\x89\x43\x06\x13\xA3\x6F\x80\x6E\x1B\x9A\x84\x80\x07\x19\x92\x74\x81\x87\x22\x90\x86\x88\x87\x23\xA9\x87\x8A\x87\x2B\xA7\x68\x47\x79\xFA\x64\x8E\x76\x8A\x28\xAD\x83\x8E\x8D\xD0\x5E\x01\x8B\x8D\x35\xBD\x8C\x8A\x8F\x25\x80\x9C\x8F\x8F\x44\x81\x95\x90\x6D\x1F\x3B\x8C\x7C\x8D\x47\x8B\x98\x8F\x7F\xF9\x63\x70\x81\x8C\x4C\xA7\x60\x0A\x92\x50\xBE\x72\x7D\x08\x58\x81\x85\x97\x90\x46\xA1\x90\x9B\x98\x4E\x82\x95\x9B\x68\x22\x1D\x94\x97\x93\x5E\xAC\x99\x43\x08\x6A\x92\x91\x94\x7B\x73\x93\x92\x9E\x96\xFA\x64\x07\x7E\x41\x26\x3B\x94\x9C\x9E\x77\xB2\x87\x9A\x98\x83\xA4\x99\x96\xA0\x21\x68\x0C\x75\x0A\x71\xBF\x98\xA1\x9B\xB8\x6A\x0C\x77\x0A\x8D\xB6\x9E\xA3\x97\x85\x99\xA7\xA0\xA6\x21\x6C\x05\xA5\x9D\xA0\x80\xA7\xA6\x9B\x77\xAD\x0F\xA6\xA8\x02\x6E\x0C\x77\x0B",
			"\xA7\x8F\xAB\x9A\x99\x9B\xA4\xA3\xA8\xAC\x0A\x70\x07\xA9\x0C\xDC\x72\x0D\xA8\xA7\x90\x8D\x91\x4B\x0C\xDC\x74\x0B\xAE\xAC\x96\x85\xB1\xA9\x0D\xDC\x76\x03\xB0\xAD\xAF\xBE\xAA\x42\x22\x7E\x82\x45\x01\x55\xD3\xA3\x57\x4C\x43\xD6\xAC\x4F\x62\x41\xD5\x8A\x6D\x61\xB6\x26\x5D\xB1\x6F\xB5\x55\x77\x4B\xB4\x4A\xCF\x58\xBA\x62\xB9\x4A\xAA\xB3\xBA\xB6\x0A\x62\xBF\x72\xBC\xD9\x77\x44\xBF\x7E\x37\x69\x60\xBB\x48\xEE\x8F\x7C\xB9\x42\xFD\x99\x7B\x6F\xBB\x26\x51\x64\xC3\x48\xF7\xB7\x49\xBD\xB9\x2C\x41\xC8\xBC\xBC\x09\x5F\xBA\x63\xC0\xFE\xAC\x46\xC1\xC5\xE1\x8C\xC9\xC7\xBE\x1F\x49\xCA\xC2\x49\xFA\xAB\xBD\xC2\xC6\x23\x54\xC5\xBC\x4B\x21\xC7\xCF\x47\xB9\x07\x55\x56\xCB\xC3\x26\x7E\x66\x86\x62\x1E\xDF\xCD\xC4\xC9\x37\xDC\xCE\x45\xCA\x18\xFC\xB8\xCE\x47\x2F\xF6\xC3\x48\xCF\x27\xE6\x4C\xC9\x40\x41\xEC\x49\xD2\xD0\x1D\x72\xC6\x43\xD1\xFB\x50\xD0\xD4\xB9\x3A\xDD\x40\xD6\x65\x52\xD5\x5E\xC0\xD3\x1E\x50\xD0\x59\x76\x59\xE3\x50\xD7\xD6\x23\xD5\xDF\x3C\xD4\x35\xE3\x41\xDA\x62\x50\xD2\xC1\x6C\xD9\x5C\xE8\xD4\xB7\xCF\x1D\x70\xDC\xD3\xD5\x5A",
			"\xF4\xD7\xD9\xBB\x7A\xF2\xD3\x59\xDA\x42\xF6\xD2\xD0\xDE\x63\x42\xE6\xCE\xD7\x79\xE6\xDE\xDC\xDB\xE8\xB4\xCD\xDE\x92\x80\xF6\xC6\xE3\xC7\x8B\xF1\x6E\xD9\xCF\x39\xE2\xC6\x4B\xE4\x0A\xC4\xEA\x60\xE7\xFF\xBC\x6C\xE0\xC0\x89\xDA\xEA\xD9\xBC\x55\x6D\xD5\xEA\xCA\x5D\xE8\xEF\xDE\xDE\x91\xDF\xC4\xD0\xCC\xA7\xC9\x4B\xD1\xC9\x7A\xCE\xD3\x43\xD4\x2C\x71\xEA\xC2\xEF\x0B\xCA\xEA\x43\xED\x1F\x44\xF6\xCE\xEE\x02\x7C\xEB\xC6\xE9\x99\xEC\xED\x47\xEC\x5C\xD6\xD3\xF2\xCB\xB9\xD1\xB9\x74\xF0\xBD\xFA\xD0\xF5\xF4\x50\xC6\xFD\x46\xF7\x0A\xC8\xF1\x42\xF2\x08\xF0\xEA\xF7\xE3\xB6\xD4\xF6\xDA\xF8\x00\x24\xFF\x47\xF6\x71\xD3\xF3\x58\xF8\x37\x6C\xFE\xFA\x47\x97\xC5\xD3\x49\xFE\xB4\xDF\x4C\xFD\xF4\xFF\x1F\x7D\xF4\x02\x8C\x6A\x02\x8C\x6C\x7D\x96\x26\x82\xD0\x0A\x86\x67\x8B\x7A\x7F\x23\x0E\x9D\x7E\x47\x08\x85\x2A\x0A\xA3\x2D\x04\x8D\x63\x23\xD7\x6D\x7A\x20\x87\x7C\x7C\x7F\xF7\x51\x83\xEC\x2F\x63\x76\xF6\x73\x73\x38\x09\x2D\x39\x42\x33\x77\x3B\x14\x8A\x23\x3B\x30\x46\x20\x0C\xCF\x6F\x85\x0E\x8A\x26\x3C\xA2\x63\x20\x0E\xBB\x77\x86\x1B\xAE\x81",
			"\x7D\xBD\x2A\x20\x0A\x86\x2A\x84\x83\x2D\x84\x88\x0A\x2E\x3D\x06\x81\x27\x5F\x90\x1C\x71\x24\xFC\x65\x89\x06\x8E\x6D\x0E\xEE\x37\x5B\x86\x53\x8A\x22\x1F\x5C\x31\x24\x0B\x86\x26\x61\x7F\x1C\x3B\x08\xCB\x81\x20\x87\x40\x12\x8C\x42\x84\x8C\x00\x0E\x61\x10\x34\x89\x27\x88\x59\x89\x22\x20\x6E\x86\x20\xFA\x2A\x8A\x21\x83\x1C\x38\xFF\x18\x84\x8C\x87\x44\x16\x8A\x0A\x3D\x4D\x1F\x8A\x25\x10\xEE\x11\x84\x4B\x64\x90\x6A\x21\x5C\x8A\x20\x0C\x43\x92\x3F\x11\x89\x4D\x22\x8A\x27\x10\xEE\x10\x69\x02\x77\x8A\x20\x22\x16\x9A\x20\x4C\x99\x96\x20\x89\x1C\x3B\x0D\x6A\x87\x7E\xDA\x37\x8B\x83\xAE\x54\x85\x0C\xFF\x49\x25\x65\x63\x36\x61\xA5\x90\x39\x48\x6B\x6C\x94\x40\x91\x62\x3E\x50\x96\x78\xAA\x21\x51\x82\x03\x7A\x39\x24\x11\x91\x95\x2B\xAB\x92\x21\x08\x92\x47\x97\xF2\x6A\x97\x9D\x08\x70\x32\x5D\xBD\x39\x24\x43\x9C\x86\x7E\x0E\x6B\x82\x12\xB8\x92\x21\x70\x82\x20\x2A\xBC\x51\x89\x84\x09\x48\x99\x09\x38\x89\x31\xF2\x3C\x7F\x0D\xAC\x7F\x4A\xE0\x86\x23\x04\x0D\x22\x3F\x7B\x5B\x81\x9A\x02\x30\x7C\x6E\x21\x25\x43\x1C\x86\x5B\x97\x00\x12",
			"\x89\x3C\xD7\x99\x20\x0D\x2E\x97\x34\xFA\x81\x20\x9C\x69\x93\x20\x47\x86\x20\x7C\xC0\x9C\x39\x36\x81\x22\x9F\xD1\x21\x23\xA0\xF6\x81\x55\x7F\x62\x9C\xA0\x7E\x86\x22\x4F\xC4\x92\xA0\x81\x14\xA0\x00\x88\xB5\x91\x21\x7C\x87\xA2\x7C\x33\x7B\x83\x1D\x82\x26\x97\x77\x41\x26\xA9\x24\x7A\x3F\x97\x50\x6E\xA4\x01\x27\x99\x4A\xB5\x5E\x87\x3B\x70\x9B\x7C\x3D\x93\x67\x47\x86\x20\x59\x5B\xBA\x3B\xA1\x6B\x99\xA6\x32\xBB\xA3\x21\x51\xBE\xA7\x4E\x4A\x9F\x8A\x42\x76\x86\x21\xA4\x84\xAA\x20\x3B\x1F\x9C\x6D\x4C\xA3\x20\x94\x8F\xA9\x20\x3C\x0E\x98\x81\x12\x2A\xA6\x81\x14\xAA\x20\x32\xB7\xA8\x00\x3E\x0A\xAA\xDB\x16\xA9\x79\x4B\xA5\xAF\x3C\x99\x2A\xAD\xD1\x16\x02\x97\x9E\x8D\xAA\x45\x83\x22\x08\xA9\x90\x39\xAE\x55\xB3\xAE\x40\x43\x0D\xAD\xD3\x21\xA8\xAD\x09\x38\xAC\x58\xFA\xA1\x21\x22\x3D\xAC\x36\xFE\x9D\xA9\x40\x02\xB8\xA6\x82\x82\x27\x08\x87\xB0\x38\x88\x0A\xB0\x00\xAE\x86\x27\xAC\xA1\x41\x25\x12\x76\xA1\x24\xCC\x80\x03\x9D\x8E\xA1\x22\x12\x1C\xB3\x22\x85\x3F\xA9\xB3\x0A\x2B\x08\x69\x89\x2C\x41\x84\x2F\xA9\xB4\x00\x0C\x0B\x6A\x86",
			"\x27\xB4\x00\x2D\xB3\xA6\xCD\x44\x50\x3D\x91\xB7\x8F\x26\x3C\xB2\x21\x3A\x59\xA0\x00\x06\xA3\x21\xC4\xB8\xB6\x20\x4F\x1F\xB6\x7E\x13\xB6\x20\xE3\xA2\xA9\x95\x7F\x4F\x47\x65\x84\xB0\x01\x28\x0A\xBE\x20\xDF\x91\xA0\x00\x52\xB3\x21\xDA\x8F\x9A\x21\x53\x17\xBB\x40\x68\x9A\xBA\xEE\x80\xB7\xB8\x03\x35\x09\x4D\xFF\x48\x91\xA1\x82\x26\xBC\x8D\xA8\xBE\x40\x58\x0B\xBD\x7B\x9E\xA7\xBC\x03\x39\xBB\x40\x41\xB2\xBF\x80\x1B\x0B\xB6\xF9\xAA\x20\x46\xFD\xB0\x00\x2E\x0A\x24\x7F\x60\x07\x54\x79\xFB\xB4\xBB\x30\x00\xC2\x20\x0B\xC2\x23\x80\xE2\xA2\x0D\x03\xCA\x26\x0C\xA7\x4D\xBD\x80\xB0\xB0\xBB\x7B\x92\x96\x20\x11\xC8\xB5\x6E\x86\x5A\x21\xFB\x81\x24\xBF\x62\xA7\x0F\x83\x82\xA2\xC0\xEA\xA8\x0E\xC2\x09\x2C\x0F\xA9\x13\xC2\x20\x13\xF8\x99\x56\xCC\x46\x21\x48\x8C\xC0\xB7\x36\x2B\xC0\x00\x3B\xD2\xC0\x75\xEE\x00\xC6\x83\x32\x0F\x54\x82\x86\x20\x8A\xF7\x91\x25\x39\x3F\xC1\xC9\x03\x34\xC6\x88\x86\x24\x0F\x22\xC3\x20\x0F\xA7\x47\x04\x70\xD4\xBD\xC3\x50\x5A\xC9\x21\x52\xD7\xC6\x42\x79\x05\xBF\x80\x3C\x0F\x54\x8A\x44\x8F\x33\x8A\x69\x93\x6D",
			"\xB1\x26\xCD\x26\x3B\x80\x4A\x42\x91\x97\xBD\x64\x97\x8E\xCC\x94\xB2\x9C\xB4\x92\x9A\xF7\xB9\x2D\x32\xA0\x6E\x60\x4A\x02\xD9\x97\xCA\x0C\x80\x7F\x77\x9E\x74\x00\x40\x7D\x89\x90\x0D\xD4\x9D\x95\x31\x82\xC2\x11\x82\xCF\x08\xA8\x25\xA1\x27\x38\xD3\xCE\x5C\x83\x77\xAB\x64\xA1\x24\x9D\xC0\xD6\xEB\x2B\x83\xD4\x83\x33\x72\xD0\xB3\x7C\x7C\x6A\x1F\x99\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Int",
			L"_IntItem",
			L"_Item",
			L"Module",
			L"_Item_LRI_Isolated_2",
			L"_Item_LRI_Isolated_3",
			L"_IntItem_LRI_Original",
			L"_Item_LRI_Original",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Int] BEGIN ",
			L"[1][_Int] END [ENDING]",
			L"[2][_Int]< \"int\" @ >",
			L"[3][_IntItem] BEGIN ",
			L"[4][_IntItem] END [ENDING]",
			L"[5][_IntItem]<< !_Int @ >>",
			L"[6][_Item] BEGIN ",
			L"[7][_Item] END [ENDING]",
			L"[8][_Item]<< !_Int ( lri:(LRI__IntItem)->_Item_LRI_Original @ ) >>",
			L"[9][_Item]<< !_Int @ ( lri:(LRI__IntItem)->_Item_LRI_Original ) >>",
			L"[10][_Item]<< !_Item_LRI_Isolated_2 ( lri:(LRI__Item)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[11][_Item]<< !_Item_LRI_Isolated_2 @ ( lri:(LRI__Item)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[12][_Item]<< !_Item_LRI_Isolated_3 ( lri:(LRI__Item)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[13][_Item]<< !_Item_LRI_Isolated_3 @ ( lri:(LRI__Item)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[14][Module] BEGIN ",
			L"[15][Module] END [ENDING]",
			L"[16][Module]< _Item_LRI_Original @ { _Item } >",
			L"[17][Module]< _Item_LRI_Original { _Item @ } >",
			L"[18][_Item_LRI_Isolated_2] BEGIN ",
			L"[19][_Item_LRI_Isolated_2] END [ENDING]",
			L"[20][_Item_LRI_Isolated_2]< \"class\" @ >",
			L"[21][_Item_LRI_Isolated_3] BEGIN ",
			L"[22][_Item_LRI_Isolated_3] END [ENDING]",
			L"[23][_Item_LRI_Isolated_3]< \"class\" \"?\" @ >",
			L"[24][_Item_LRI_Isolated_3]< \"class\" @ \"?\" >",
			L"[25][_IntItem_LRI_Original] BEGIN ",
			L"[26][_IntItem_LRI_Original] END [ENDING]",
			L"[27][_IntItem_LRI_Original]<< !_Int @ >>",
			L"[28][_IntItem_LRI_Original]lrp:(LRI__IntItem) @",
			L"[29][_Item_LRI_Original] BEGIN ",
			L"[30][_Item_LRI_Original] END [ENDING]",
			L"[31][_Item_LRI_Original]< _IntItem_LRI_Original \",\" @ >",
			L"[32][_Item_LRI_Original]< _IntItem_LRI_Original \".\" @ >",
			L"[33][_Item_LRI_Original]< _IntItem_LRI_Original @ \",\" >",
			L"[34][_Item_LRI_Original]< _IntItem_LRI_Original @ \".\" >",
			L"[35][_Item_LRI_Original]< _Item_LRI_Original \"?\" @ >",
			L"[36][_Item_LRI_Original]< _Item_LRI_Original @ \"?\" >",
			L"[37][_Item_LRI_Original]<< !_Item_LRI_Isolated_2 @ >>",
			L"[38][_Item_LRI_Original]<< !_Item_LRI_Isolated_3 @ >>",
			L"[39][_Item_LRI_Original]lrp:(LRI__Item) @",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge9_PmLoopTokens, ModuleParserStates, PrefixMerge9_PmLoopAstInsReceiver>(&PrefixMerge9_PmLoopTokenDeleter, &PrefixMerge9_PmLoopLexerData, &PrefixMerge9_PmLoopModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge9_PmLoopTypeName((PrefixMerge9_PmLoopClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 6, -1, 6, 6, 6, 6, 6, 6, },
			{6, 1, -1, 6, 6, 6, 6, 6, 6, },
			{-1, -1, 2, -1, -1, -1, -1, -1, -1, },
			{6, 6, -1, 3, 6, 6, 6, 6, 6, },
			{6, 6, -1, 6, 4, 6, 6, 6, 6, },
			{6, 6, -1, 6, 6, 5, 6, 6, 6, },
			{6, 6, -1, 6, 6, 6, 6, 6, 6, },
			{6, 6, -1, 6, 6, 6, 6, 7, 6, },
			{6, 6, -1, 6, 6, 6, 6, 6, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module>(tokens, this, codeIndex);
	}
}
