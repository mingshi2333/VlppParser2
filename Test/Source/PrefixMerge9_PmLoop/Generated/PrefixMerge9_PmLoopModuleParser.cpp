/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopModuleParser.h"

namespace prefixmerge9_pmloop
{
	void PrefixMerge9_PmLoopModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1560; // 12092 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 24;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x3C\x2F\x00\x00\x10\x06\x00\x00\x05\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x86\x02\x85\x05\x0A\x91\x0A\x94\x0A\x80\x0E\x84\x10\x0A\xFC\x4A\x9F\x7C\x8D\x8C\x8E\x85\x00\x1E\x9E\x80\x92\x95\x8C\x90\x90\x01\x1B\xA5\x9F\x74\x93\x95\x97\x92\x2F\xA2\xB1\x83\x9A\x90\x99\x9A\x99\x37\xB4\x89\x8B\x9C\x91\x9E\x92\x85\x29\x89\x81\xA6\x8C\x9B\x9B\x9F\x9D\x2E\xBE\x9F\x8A\xAD\x98\xA6\x9A\xA7\x38\xD0\xBA\x84\xA9\xA1\x86\x00\xA0\x4C\xC6\x8B\xB2\xA7\xA4\xAB\xA6\xAF\x51\xE0\x93\xA3\x85\xA1\xAE\xB2\xAE\x5B\x86\x8C\x82\xA7\xB2\xB1\xAE\xB2\x55\xEE\xA9\xB0\xBF\xAC\xB9\xB0\xBB\x63\x82\xA5\xA9\x84\x00\xAD\x84\x80\x6C\xE8\x8D\xB2\xB3\xC0\xBF\xB6\xBD\x71\x86\xF3\xA8\xC5\xBC\xC7\xBA\xC7\x79\x81\xBB\xA4\xC0\x96\x85\xC0\xCA\x6D\x8A\xC5\xD0\xC7\xC2\xC9\xC4\xCE\x8B\x9E\xCD\xC2\xDF\xC4\xD1\xC9\x90\x9F\x81\x87\x1E\xB6\x80\x86\x83\xA1\x9A\xA0\x89\x0C\xD1\xD9\xCC\xD1\xCD\xA6\x9D\xE8\xC3\xDB\xDD\xD1\xDF\xD3\x93\x83\x8A\x14\xD2\x80\x8B\xCB\xDA\x82\xDA\xB8\xDF\xDA\xD9\xE3\xDA\xE5\xD0\xB6\xF9\xC1\xD0\x04\x04\xE3\xE9\xCB\xCE\xD8\xF1",
			"\xE9\xE2\xE8\xE6\xEA\xDA\xDF\xD9\xE9\xD0\x05\x07\xEA\x00\x0E\x67\xE1\xEF\x0A\xF4\xF1\xF1\xF7\xEE\xF1\xFC\xD0\xFC\xD8\x0B\xF2\x89\xC7\xCF\xDE\xF4\xFE\xD9\xF2\x09\xF6\xF3\x72\x7D\x7E\x80\xC0\x44\x8D\x72\x81\xE0\x48\x8B\x73\x04\x00\x83\x81\x83\x83\x0E\x91\x85\x80\x84\x13\xBE\x64\x45\x7E\xDB\x7B\x7A\x80\x77\x98\x5D\x7E\x85\x87\x20\x83\x45\x05\x83\x15\xA5\x87\x80\x85\x27\xBE\x66\x04\x89\x29\xA6\x89\x80\x8A\x2F\x92\x8D\x8A\x6E\x17\x27\x76\x46\x55\x1A\xB0\x83\x7A\x8E\x1C\x88\x71\x8A\x7E\x1F\x83\x4A\x04\x8B\x31\xAE\x8B\x8E\x8C\x45\xBA\x6B\x04\x91\x47\x86\x9D\x8C\x90\x3F\x99\x81\x90\x94\x3E\x83\x4C\x04\x93\x4F\x92\x91\x96\x78\x59\x9C\x9A\x41\x07\x58\x8A\x4E\x05\x98\x53\x9A\x95\x94\x95\x68\x81\x4F\x04\x99\x5B\xBC\x7E\x91\x8E\x48\x8B\x78\x44\x86\x00\x21\x0A\x43\x55\x65\x9E\x99\x9E\x9B\x33\x89\x9E\x9D\x93\x7D\x8B\x73\x08\x9B\x03\x64\x07\x79\x09\x84\xA9\x9A\x9E\x41\x26\x09\xA1\x43\x09\xE7\x68\x0E\xA3\xA2\x67\x81\x4F\x1B\x9D\x0A\x7D\x52\x60\x60\x84\x7C\x4B\x59\xA7\x2B\x78\x96\x42\xA6\x84\x64\xAA\x64\x4F\x9C\xA7\xAB\x4B\xA7",
			"\xAA\xA5\x42\xAB\x49\xB7\x6C\xA7\x6C\x4F\xAF\x82\x46\xAB\x6D\xA9\xB3\xAB\x49\xAE\xD8\x7C\x4B\x6A\x60\x9E\x8C\x54\xAC\xA6\x82\x6E\x6D\xAA\x48\x96\x60\xA5\x48\xAF\xE2\x7E\xA2\xB3\xAA\xCF\xAE\xAA\x42\xAC\xD8\x46\xBA\xAD\x49\xC9\x87\xBE\x47\xAD\xBD\xBB\xA1\xB6\x48\xD4\x8D\xB1\xA8\xAC\x84\x61\xBC\x4F\xB0\x7C\x4C\x5C\xB3\xB9\xDE\x80\xBB\x4B\xAF\xCA\xA0\xBF\xB6\x47\xB5\x81\x40\x6F\x6D\xF5\x80\x09\xBC\x4F\xD6\x9D\xB8\xB7\xBC\x1D\x6B\xBC\xBA\x48\xF0\x9A\xBD\x46\xB9\x03\xF4\xBC\x91\xBE\x08\xE5\x4D\xBE\xB8\xFF\xAE\xBB\xB0\xC0\x1C\x42\xC9\xC0\x47\x05\xD7\xB2\xBE\xC4\x22\x79\xB7\xBD\xB5\x14\xFF\x33\x6C\xB9\xB1\xA1\xC9\xBE\x72\x16\xD7\xC9\xC6\xBF\x1B\xF1\xBA\xC0\x9D\xFC\xA1\xC3\xC8\xC9\xE2\x4D\xC7\xC5\xBE\xDC\xA2\x77\xCA\xBA\x21\xF6\xC9\xC0\xCE\x4C\x79\xC7\xC5\xC0\x3D\xE6\xC4\xCC\x76\xF9\xBB\xB0\xB4\xC7\x2F\xE3\xAC\x50\xC3\x4C\x7E\xC3\xC0\xD0\x9B\xA1\xC9\xC9\xC2\x42\xC3\xDF\x3F\xD5\x53\xCC\x92\xD4\xBB\x3B\xC2\x6E\xC7\xD3\xC4\xA5\xB6\xD1\xBA\x62\xCB\xC3\xB5\xD4\x67\xCE\xD5\xD4\xD3\x07\xED\xD4\xC9\xB0\x70\xDC\x44\xD4\x61\x5C",
			"\xEC\xBF\xD7\xB9\x61\xE6\xD5\xDF\x3F\x77\xDA\x69\xD7\xD0\x83\xD7\xC5\xE0\xD6\x21\xC7\xE3\xC3\xCC\x73\xEB\x4A\xE0\xBB\x8C\xE4\xBC\x4D\xB6\x1A\xDE\x44\xE4\xCB\x1E\x51\xE0\xAC\x4F\x90\x87\xDF\xC6\xBE\x6B\xC9\x41\xB9\xCE\xCC\x97\xE0\x03\xCA\x00\x26\xE8\xEB\xC3\x9A\xC0\x0F\xE4\xEB\x65\xC2\x7F\x42\x42\xD6\x49\x43\x71\x42\xE6\x76\xEA\x40\xEA\xC6\x46\x48\xE9\xED\x06\x77\xEE\xEE\x42\xB9\xC1\xFA\x41\xEB\x9F\xED\xE9\xBD\x7A\x74\x8C\xF6\x41\xBE\xEC\x47\xDC\xB0\x48\x7B\xE0\x49\xCE\xF0\x24\xD5\xF7\xD0\x00\xAD\xD4\xFA\x40\x19\xE7\x66\xEF\xC2\xF7\x09\x65\x17\x79\xCE\xF6\x47\xD1\xBA\x19\xE7\x60\x4E\xF1\xF6\x0A\x67\x17\x78\xEA\xC5\xF0\xF9\x40\x1A\xE1\xCA\x42\x0B\xF6\x20\x69\x13\xFE\x42\xD1\x74\x65\xB8\x6A\x07\x3D\x7C\x43\x54\x7F\x09\x2B\x0D\xFB\x0A\x2B\x44\xF5\x5E\x39\x67\x63\x4E\x81\x9E\x4C\x57\x4B\xA3\x79\x5C\x0D\xE7\x2C\x58\x98\x16\x8A\x21\x36\x05\x82\x21\x07\x88\x83\x40\x6E\x07\x3D\x14\x1B\x7A\x69\xBC\x3C\x7F\xE7\x7C\x44\x3B\xB1\x79\x48\x25\x93\x41\x3D\xB8\x28\x8E\x36\x90\x09\x6E\x3B\x30\x9F\x2D\xA6\x38\x8B\x86\x1C\x7B\x4C",
			"\x3C\xA6\x6C\x43\x0B\x8D\x21\x76\x45\x5F\x77\x73\xA6\x74\x87\x69\x20\x2F\x60\x25\xBA\x36\x85\xAD\x3B\x74\x0F\xBA\x70\x67\x0D\x47\x7A\x21\x43\x43\x89\x42\x3D\x73\x20\xD3\x72\x87\x3C\xAD\x6B\x4A\x16\x86\x28\x3E\x83\x1E\x8C\x3C\x39\x7F\x70\xF6\x02\x28\x75\xF0\x20\x25\x46\x3E\x8D\x4C\x79\x5C\x82\x20\x21\x9B\x48\x24\x19\x05\x8A\x99\x02\x2C\x59\xCF\x74\x89\x20\x4E\x94\x38\x48\x62\x8F\x78\xEF\x26\x77\x73\xF5\x62\x20\xF0\x15\x57\x25\x0D\xAF\x30\x4E\xA7\x2F\x7E\x40\x59\x87\x8E\x31\x52\x89\x4F\xA8\x6B\x7A\x42\x04\x9C\x90\x90\x08\x51\x21\x6D\x84\x3E\xF2\x00\x84\x77\x29\x86\x24\x05\x31\x84\x3D\xFA\x06\x26\x8F\x4E\x8A\x25\x05\x0A\x2F\x61\x78\x7F\x80\x01\x70\x6B\x93\x20\x81\x8B\x38\x48\x35\x01\x96\xEF\x12\x91\x20\xE1\x45\x8F\x40\x2D\x9A\x50\x90\x3D\x01\x95\xBC\x24\x99\x40\x7F\x33\x8D\x81\x3E\x00\x99\x16\x5A\x8C\xA5\x64\x5F\x06\x69\xA1\x3A\x98\x02\x3F\x71\x03\x86\x23\x45\x66\x82\x21\x08\xD6\x96\x89\x42\x70\x8C\x9A\x53\x8C\x94\x85\xCB\x37\x44\x2B\xE6\x92\x21\x21\x21\x9C\x37\xCC\x8F\x91\x42\x6A\x98\x96\x76\x81\x25\x08\xA1\x7B",
			"\x4A\x32\xA0\x73\x9F\x77\xB5\x82\x21\x48\x19\x9C\x23\xDD\x95\x91\x84\x14\x93\x20\x79\x9E\x99\x40\x4B\x00\x9B\xD3\x1C\x92\x20\x09\xB5\x91\x42\x4C\x0D\xA0\xDD\x15\x86\x20\x07\xA5\x98\x24\x81\x50\x24\x47\x83\x27\xA1\x7B\x9B\x72\x38\xDB\x41\x82\x83\x11\xA6\x95\x09\x2D\x0A\x3F\xEF\x49\x21\x35\x49\x27\xA4\x1A\xBF\x84\x8F\x17\x2A\x21\x7D\xAE\x8A\x21\x4F\x02\xA2\xA2\x64\x95\x9F\x84\x33\x4D\xA0\x12\xA6\x22\x14\x3D\x8B\x4A\x98\x80\x9C\xA6\x71\x88\xA6\x41\x56\x04\xA8\x46\x97\xA3\x20\xE1\x5B\x7D\x42\x76\x4A\xA0\x00\x1A\x0D\xA2\xD4\x32\xAB\x3A\xD5\xAB\x0B\x95\xBA\x36\xA5\x40\xA3\x22\x56\xBD\xA1\xA9\x81\x1D\x0E\xAB\xD4\x34\xA9\x58\x82\x21\x85\x81\x2A\xAA\xA9\x03\x3F\x08\x56\x82\x55\xA6\x7B\x80\x00\x0C\x68\xB4\xAD\x52\xEC\xA9\xAE\xFE\x62\x0D\xAF\x0A\x3F\x93\x5A\x81\x26\x51\xA3\x6E\x8F\x5C\x08\x8B\x86\x4B\x0A\xBB\x25\xCF\x67\x21\x97\xFC\x9D\x50\x14\x83\xBE\x74\x1B\xBC\x7D\x7A\x7B\x7F\x1D\xB8\x27\x2B\xB2\xF2\x72\x9A\x74\xED\x6F\x70\x4B\x22\xBF\x1F\x9C\x67\x21\x6F\x2C\x28\xB7\xD6\x6D\x73\x7B\xCA\x19\x2F\x8C\x2B\x27\x92\x6B\xFB",
			"\xA2\x20\xD9\x84\x8C\xB6\x01\x26\x77\x66\xA6\x77\x25\x50\xB0\x26\xB7\x25\x28\x75\x6F\xA2\x89\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Int",
			L"_IntItem",
			L"_Item",
			L"Module",
			L"_Item_LRI_Isolated_2",
			L"_IntItem_LRI_Original",
			L"_Item_LRI_Original",
			L"Module_LRI_Original",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Int] BEGIN ",
			L"[1][_Int] END [ENDING]",
			L"[2][_Int]< \"int\" @ >",
			L"[3][_IntItem] BEGIN ",
			L"[4][_IntItem] END [ENDING]",
			L"[5][_IntItem]<< !_Int @ >>",
			L"[6][_Item] BEGIN ",
			L"[7][_Item] END [ENDING]",
			L"[8][_Item]<< !_Int ( lri:(LRI__IntItem)->_Item_LRI_Original @ ) >>",
			L"[9][_Item]<< !_Int @ ( lri:(LRI__IntItem)->_Item_LRI_Original ) >>",
			L"[10][_Item]<< !_Item_LRI_Isolated_2 @ >>",
			L"[11][Module] BEGIN ",
			L"[12][Module] END [ENDING]",
			L"[13][Module]<< !_Int ( lri:(LRI__IntItem)->Module_LRI_Original @ ) >>",
			L"[14][Module]<< !_Int @ ( lri:(LRI__IntItem)->Module_LRI_Original ) >>",
			L"[15][Module]<< !_Item_LRI_Isolated_2 ( lri:(LRI__Item)->Module_LRI_Original @ ) >>",
			L"[16][Module]<< !_Item_LRI_Isolated_2 @ ( lri:(LRI__Item)->Module_LRI_Original ) >>",
			L"[17][_Item_LRI_Isolated_2] BEGIN ",
			L"[18][_Item_LRI_Isolated_2] END [ENDING]",
			L"[19][_Item_LRI_Isolated_2]< \"class\" @ >",
			L"[20][_IntItem_LRI_Original] BEGIN ",
			L"[21][_IntItem_LRI_Original] END [ENDING]",
			L"[22][_IntItem_LRI_Original]<< !_Int @ >>",
			L"[23][_IntItem_LRI_Original]lrp:(LRI__IntItem) @",
			L"[24][_Item_LRI_Original] BEGIN ",
			L"[25][_Item_LRI_Original] END [ENDING]",
			L"[26][_Item_LRI_Original]< _IntItem_LRI_Original \",\" @ >",
			L"[27][_Item_LRI_Original]< _IntItem_LRI_Original \".\" @ >",
			L"[28][_Item_LRI_Original]< _IntItem_LRI_Original @ \",\" >",
			L"[29][_Item_LRI_Original]< _IntItem_LRI_Original @ \".\" >",
			L"[30][_Item_LRI_Original]<< !_Item_LRI_Isolated_2 @ >>",
			L"[31][_Item_LRI_Original]lrp:(LRI__Item) @",
			L"[32][Module_LRI_Original] BEGIN ",
			L"[33][Module_LRI_Original] END [ENDING]",
			L"[34][Module_LRI_Original]< _Item_LRI_Original @ { _Item } >",
			L"[35][Module_LRI_Original]< _Item_LRI_Original { _Item @ } >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge9_PmLoopTokens, ModuleParserStates, PrefixMerge9_PmLoopAstInsReceiver>(&PrefixMerge9_PmLoopTokenDeleter, &PrefixMerge9_PmLoopLexerData, &PrefixMerge9_PmLoopModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge9_PmLoopTypeName((PrefixMerge9_PmLoopClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(tokens, this, codeIndex);
	}
}
