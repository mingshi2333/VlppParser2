/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopModuleParser.h"

namespace prefixmerge9_pmloop
{
	void PrefixMerge9_PmLoopModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2534; // 21048 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 230;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\x38\x52\x00\x00\xDE\x09\x00\x00\x06\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x80\x81\x84\x07\x0A\x96\x0A\x99\x0A\x85\x0E\x85\x10\x0A\xAC\x0A\x80\x41\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA3\xA3\x9D\x8E\x88\x97\x7F\x93\x2E\xB0\xA8\x92\x95\x94\x9A\x92\x85\x2E\xAF\xB8\x91\x9B\x9B\x99\x9F\x9A\x3F\xB7\xAD\x9E\x93\xA0\xA1\x84\x96\x06\xC8\x83\x99\x96\x99\x95\xA0\xA7\x45\xC2\x86\x8C\xAF\xA2\x91\xAA\x9D\x51\xD0\x93\xBC\x99\xAE\xA9\x84\x01\x0A\xCA\x82\x94\xAD\xA8\xAF\xAC\xA2\x67\xC6\xA9\xB2\xAB\xA4\xAF\xB4\xAD\x6D\xE8\xB1\xAA\xB3\xBC\xB7\xB0\xB7\x75\xF0\x8B\x81\xB7\xAD\xA6\xAF\xB7\x7F\xF9\x81\xD7\xB2\xBC\xC0\xBA\xC3\x76\x81\xA4\xA0\xC6\xB3\x80\x02\x85\x60\x89\x8E\x89\xAD\xBD\xC9\xB2\xBF\x8D\x88\xFA\xAA\xC8\xBA\xCF\xC0\xCE\x85\xA0\xC7\xC2\xD9\xC4\x91\xCE\xD2\x9B\x80\x07\x1C\xB7\xCE\xC8\xC6\xCC\xB0\xAE\xC2\xD9\xC8\xD7\xCE\xD3\xD0\xB7\xA3\xF9\xC5\xD8\x04\xD6\x82\x84\x94\xAD\xC2\xE6\x8A\x06\xDF\xD9\xD8\xC3\xC7\xF2\xDE\xC4\xDB\xDD\xD5\x05\xC6\xCC\xC8\xEF\xDB\xE5\xD9\xE6\x06\xD1\xD6\xE3\x8D",
			"\x09\xEE\xE6\xDB\xC5\xCA\xC9\xD2\xF5\xEE\xED\xE4\x89\xA3\xE4\xE0\xE3\xE2\xFA\xEA\x87\x07\xEE\xEA\xED\xEC\xE0\x00\x08\xCA\x84\x09\xF0\xA7\xE5\xF3\xE1\xF4\xEB\xF9\xF8\xFB\x69\x7A\x7C\x80\x00\x93\x09\x7C\x6E\x04\x83\x8A\x80\x82\x0B\xBA\x69\x80\x83\x10\xBA\x64\x05\x77\x15\x07\x8E\x82\x7E\x12\x68\x7F\x7D\x83\xA5\x4F\x87\x85\x84\x1D\xBA\x77\x05\x77\x18\x36\x79\x42\x06\x16\xA1\x88\x6F\x06\x29\xA9\x6C\x05\x8B\xDF\x5C\x89\x6A\x87\x2A\x9F\x86\x8D\x69\x16\x5A\x86\x42\x07\x26\x86\x40\x08\x8C\xCD\x40\x88\x46\x8E\xFD\x45\x9B\x7A\x41\x22\x00\x9C\x7F\x91\x46\xB2\x7E\x7F\x93\x4D\x81\x8B\x84\x88\x33\xBA\x73\x0A\x92\x02\x94\x91\x8E\x96\x41\xB2\x8B\x96\x6E\x24\x18\x93\x97\x8D\x55\x9C\x9B\x92\x93\x51\xB4\x85\x98\x99\xB6\x65\x02\x98\x94\x4C\xB1\x98\x9A\x9C\x52\xB0\x93\x9F\x9D\x75\xA9\x9A\x7E\x09\x6F\xBA\x96\x9A\x42\x27\x3D\x94\x9E\x9A\x5F\xB5\x86\xA3\x9A\x87\x85\xA8\xA3\xA2\xB6\x68\x02\xA0\x9E\x84\x9D\x9F\x9F\x7C\x29\x0F\xA9\x9F\xA0\x5E\x92\xAC\x9A\xA6\x89\x8D\x7A\x09\x8F\x03\x5A\x4F\x55\x96\x9B\xA7\x97\xA4\xA4\x99\xA6\xA1\xA6\xA9",
			"\x2E\x1D\x7F\x0A\xA5\xAB\xA4\xAD\xA7\x48\x30\x1D\x71\x0C\xAC\xA9\xB2\xAC\xA0\xA7\xBB\xAA\xAA\x7E\x0C\xB8\x93\xA6\x9F\xA9\xC4\xB1\xA9\x43\x0C\xC1\xBA\x64\x0D\x77\x35\x09\xB3\xAE\xAE\x8A\x91\xBC\xAE\xB4\xBE\x82\xB3\x42\x0D\x96\xB7\x0D\x74\x0E\xCE\xBD\xA0\xB7\xB4\xCD\x79\x0D\x76\x0E\xDD\x94\xBF\xB6\xA9\x3B\x1D\x7C\x0D\xB9\xE0\x95\xB5\xAB\xB9\x0A\x7D\x00\xAA\x40\x3F\x33\xB8\xAA\xB5\x98\xB8\xB7\xBF\xBB\x63\x8F\xB9\x41\x10\x96\x82\x16\xBC\x00\x44\x2C\xBE\xB9\x69\x45\x16\xA6\x13\xC0\x48\x06\xC0\xBD\x42\xF9\x03\xC5\x03\x55\x13\xE5\x59\x4C\x43\x16\xEE\x41\x66\x41\x15\xCC\x6F\x61\xC6\x28\x5D\xC3\x6F\xC5\x57\x79\x4B\xC6\x4A\xCC\x58\xCC\x62\xC9\x40\xAA\xC3\xCA\xC6\x0A\x62\xCC\x72\xCC\xD6\x79\x44\xCD\x79\x39\x6B\x60\xC9\x49\x2E\xCC\x7C\xC9\x42\x3D\xD6\x7D\x6F\xCE\x21\x53\x6F\xC9\xC8\x25\xEE\x4A\xCF\xCA\x2E\x41\xD8\xCC\xCC\x09\x5F\xCC\x63\xD0\x4C\xE8\x46\xD2\xCF\x2E\x77\xC9\x4E\xCD\x49\xC8\xD4\xD0\x48\x4B\xC7\xDC\xCD\xD7\x25\x54\xD2\xD9\x48\x61\xD8\xD8\x4B\xC9\x02\x66\xDC\x72\xDB\x35\xEE\x40\x73\x40\x6C\xD6\x7A\xD7\xD6\x5E",
			"\xD5\xD5\x4B\xDD\x78\xE8\xD4\xD9\x48\x4E\xFD\xD5\xDB\xDF\x60\xC4\xEF\x45\xDD\x00\x30\xD5\x7A\xE2\x82\xE1\x43\xDE\x40\x88\xE4\xCF\xD7\xE1\x28\xCC\x61\xE1\xE3\x94\xC4\x99\xCA\xE1\xFF\x08\xEC\xDF\xDE\x9C\xDF\xE2\xE1\xDA\x71\xE8\x47\xE4\xE6\x88\xD1\xE0\xD6\x41\xA7\xC3\xE3\xE7\x3F\x57\xE5\xE0\xEB\xEB\xA4\xCF\xD6\xE8\xE7\xA9\xD7\x58\xE2\xD4\xB3\x4C\xE8\xE4\xEC\xA1\xC1\xF4\xEC\xE7\xAD\xC2\xE9\xED\x59\xBE\xD8\xEF\xE0\xCA\x5C\xEF\xEC\xEE\xDA\xB3\xFA\xDE\xDF\xEB\xC5\xFD\xD7\xF3\xD4\x9C\xCB\xFA\x4A\xE4\xD2\xE0\x48\xE0\x66\xA2\xFD\xD5\xEF\xEF\xFF\x15\xF8\xDF\xF5\xBD\xD9\xF5\xE7\x6C\xE6\xDB\xD8\xE2\x58\x76\xDC\xE3\xFB\xEF\xED\xFF\xC6\x42\xEA\x28\x49\xFD\xE2\xF6\x98\x75\xFB\xEB\x40\xE1\x7F\x21\x00\xDB\x63\x7E\xCC\x7E\x7B\x6D\x03\x79\x26\xFE\x23\x78\x76\x85\x0B\x80\x24\x0F\x98\x6E\xF6\x78\x71\x7B\xB3\x60\x23\x80\x39\x64\x79\x03\xA3\x58\x78\xF5\x6B\x79\x7E\xCE\x62\x79\xF7\x1F\x25\x81\xC6\x47\x85\x24\xE8\x6F\x6E\x07\x9F\x8C\x7A\x0B\x99\x74\x85\x59\x72\x7E\x06\xAF\x79\x84\xA1\x6B\x83\x7D\x2D\x90\x79\x48\x6F\x74\x62\x19\x94\x7B",
			"\x83\xF7\x77\x29\x04\xDB\x6C\x7F\xAB\x27\x83\x87\x31\x7D\x87\xF0\x3F\x84\x87\x04\xAE\x23\x88\x19\x8D\x89\x42\x43\x80\x8A\xB9\x4E\x88\x81\x1F\x85\x3C\x06\xFF\x72\x20\xF8\x5A\x8B\x86\x23\x9D\x71\x12\xE5\x2F\x78\xD9\x61\x23\x8B\xB7\x72\x88\x0C\xE9\x81\x8C\x1E\xA5\x28\x71\xED\x67\x8A\xF7\x63\x8C\x31\xDD\x46\x88\x88\x00\x8A\x89\x18\xE8\x85\x25\x12\x86\x7E\x81\x42\x97\x84\xE4\x7A\x8E\x85\x7F\x3C\x8B\x7A\x6D\x80\x91\x07\xAF\x73\x82\x42\xBA\x87\x82\x3E\x89\x93\x14\x81\x9C\x91\x2B\x95\x87\x91\x02\x91\x91\x21\x88\x74\x8A\x41\x81\x24\x82\x67\x82\x85\x21\xFE\x86\x7A\x45\x98\x7D\x92\x1C\x8C\x30\x29\xE7\x76\x95\xF4\x68\x91\x88\x6F\x96\x90\xE0\x78\x85\x72\xFB\x74\x6F\x8E\x6A\x83\x22\x17\xB6\x93\x91\x58\x80\x68\x97\x92\x9C\x62\xEE\x32\x93\x8F\xA8\x40\x9B\x93\x74\x93\x37\x21\xA0\x22\x8F\x17\xB8\x85\x69\xB4\x81\x23\x2E\xD0\x99\x96\x81\x03\x83\x99\x1F\x2D\x9A\x18\xD9\x89\x86\x33\x85\x99\x38\x96\x71\x98\x00\x03\x85\x8C\xDB\x65\x25\x9C\xE4\x68\x9F\xEF\x6A\x98\x72\x76\x8D\x76\x9D\x82\x70\x9D\xDF\x72\x98\x6E\x7A\x9B\x6E\x9E\x39\x25",
			"\x88\x19\x9E\x9B\x7A\x97\x38\x9E\x9F\x9C\x7F\x9E\xD5\x1C\x71\x76\x73\x8E\x71\x8B\xE5\x22\x61\x16\xDE\x80\x8E\x85\x25\x9D\x9C\x37\x65\xA1\xED\x0A\x7A\x7B\xE2\x09\x20\x3A\x09\x36\xA2\x41\x18\xA6\x20\xEC\x09\x24\x3B\x9A\x61\x22\x47\x86\x20\xA4\x58\x9D\xA2\x21\x25\xA3\x22\xD3\x23\xA3\x20\x8E\x83\x27\x3C\x24\xBD\x38\x4C\x83\x29\xA5\x5E\x86\x23\xA6\x02\x35\xA5\x40\x4E\x68\xA7\x80\x2E\xA2\x20\xEF\x29\x21\x7D\x09\x21\x03\xFB\x2E\x3A\x21\x06\x49\x21\x50\x9B\xAA\x21\xA1\x8C\xAC\xA8\x0A\x3F\xA5\x40\x78\x3A\xA9\xA8\x88\xAF\xA8\x1F\xBD\x3A\x4E\x80\x08\x71\xAD\x8E\x6B\x42\x21\xA0\x00\x58\xA6\xA3\x21\xB1\xAA\xA2\x21\x15\x59\x8B\xCD\x23\x2D\x7D\x91\x25\x9A\xAA\x2A\x2E\x6A\x39\x5D\x37\x67\xAD\xAC\xAA\x21\xE7\x1D\x3B\x48\x7A\x9C\x74\x85\x28\x1D\x3B\x13\xA8\xA2\xD3\x69\x10\xB0\x85\x1A\xA3\x7D\x4E\x6A\x1D\x61\x89\x2C\xA5\xCA\x4E\x6B\x1D\xDD\x25\x9D\x52\x9F\x8E\x68\x76\x34\xA8\xAD\x82\xAA\x21\x3B\x7A\xAA\x21\xA2\x99\x8E\x69\xEE\x1D\x3A\xE2\x4E\xA8\xB0\x85\x2F\x1B\xB1\x06\x2D\x54\x42\x8A\x20\x1E\xD1\x86\xAF\xB3\x0A\x31\x1D\x77\x08",
			"\x7F\x55\xD5\x89\x22\x1E\xAE\xA9\x22\x59\x8E\xBA\x21\x79\x1C\xB1\x21\x1F\x19\xB3\x7C\x65\x95\x52\xD8\x89\x24\x1E\x97\xA9\x23\xA7\x46\xB6\x21\x7A\x1D\x3D\xA0\x6E\x59\x88\xE2\x76\x1F\xB8\x85\x3C\x4A\xBA\x0A\x37\x1F\x6C\x8A\x25\xB6\xDB\x83\x20\x1F\xDD\x29\x08\x42\xA0\x99\x35\xD5\x93\x9A\x5F\x5C\xB6\x53\x4A\x0E\x6F\x97\x54\x91\x4B\x24\x35\x84\x5B\x7A\x89\x27\x66\x7B\xAB\xB5\x9C\xE4\xA6\x5E\x64\x0A\x25\x45\xF9\x23\x25\xA0\xF9\xAD\x3A\x17\xDE\x85\xA1\x17\x7E\xBD\x95\x36\xB1\x4A\x1B\x86\x20\xC0\xF2\x23\x27\xB0\x09\xD4\x4E\xD3\x5E\x8A\x71\x55\x8D\x3B\x24\x8D\xB2\x9B\xC3\x3F\x3A\x21\x2B\x47\xC1\xAB\xFB\xA3\xB9\x77\x5A\x71\x4D\x0F\xC6\x23\xB2\x03\x25\xA0\x80\x37\x6E\x8A\x08\xC1\x26\xC2\xAB\xB4\x21\x58\xC6\x5F\xA8\x83\x30\xC0\xA1\x28\x53\xC5\xAE\x17\xA0\x50\x07\xCA\x24\x45\x93\x93\x3D\x41\xDE\x89\xC2\xD5\x3E\xC1\x21\x1E\xC0\x9E\x9F\x3A\x3B\xAB\x1B\xD9\x8D\xC4\x4A\xD9\x5C\x93\xBD\xC6\xC5\x81\x11\xBE\x20\x43\x83\x25\xED\x5E\x8D\xA6\x00\x3D\xBB\x58\x23\x2D\x04\x31\xB6\x3A\x70\x2E\xCA\x26\xC0\x60\xDC\xBB\x98\xCD\x3A\x7A\x33",
			"\xEE\xBC\x4E\x23\x37\x57\x9B\xF8\x4E\xC4\x00\x1E\x8C\xB4\x40\xA7\xCA\x41\x48\x5A\xC6\xF4\x9E\xB6\x20\x49\xCF\xBE\x42\x4B\x59\x20\x27\xF5\xC7\x96\x50\xA9\x20\x94\x82\xD9\x21\x74\x45\xD4\x3C\x5B\xA8\x70\x55\x86\x2B\xA8\x46\xC6\x22\xA1\x51\xDB\x5D\x69\x28\xC2\x21\x49\xD6\xD3\x20\x43\x08\xC2\xA6\xA9\x3C\xD3\x80\x1F\xCF\xD3\x02\x2B\x0A\xA8\xC4\x55\xD3\xBD\x09\x25\xD4\x00\x08\xCC\xAA\x81\x23\x0B\x55\xC0\x46\xD3\xAE\xC7\xC7\x9A\xAB\xBB\x0A\x5B\xFA\x39\xAD\x7D\xAF\xD4\x95\xE9\xC9\x21\x31\x0A\x22\x7B\x00\x47\xD5\x84\x81\x2B\xB7\x80\x2D\xD0\x4F\x23\x2C\x0C\x7B\x86\x20\xD9\xB2\xBA\xCB\x20\x6D\x1E\xD4\x7A\xD5\xD2\x20\x65\xD0\xDA\x21\x75\x1A\xDA\x6E\x39\xC1\xD8\x6A\xE7\xCF\xDA\x02\x3D\x0E\xB8\xB8\x4A\x20\xA7\x5C\xDF\x93\xE8\xC1\x21\x21\x6B\xD9\x35\x1F\x6D\xBE\xDC\x09\x21\x51\x95\x82\x2D\x11\x63\xE4\x39\xD0\xCB\xC0\x01\x86\x06\x2E\xDA\xF9\x8A\x26\x12\xD3\xC3\x21\xC1\xA3\x4B\xDF\x80\x17\x11\xE1\x02\x32\xC6\x41\x32\xD0\xCE\x85\x18\x10\xE2\x01\x20\xCA\x41\x64\xD3\xD6\x00\x19\x10\xE3\xB1\xDF\xC5\xBC\xC5\x5B\xC6\x83\x39\x44\xAC",
			"\x15\xE9\x22\x26\x3B\xDA\x21\x2B\xFA\x92\x21\xC1\xA9\x20\x8F\x0D\xE0\x00\x4E\x2C\xE3\x3E\xF6\xDB\x47\xC8\xB4\xC1\x4B\x21\x44\xE3\xE4\x9E\x17\xE6\x41\x57\xB9\xD2\x00\x3E\xE3\x20\x14\xFF\xD9\x42\x20\x12\xE9\x81\x3A\xDD\xE8\x47\xE1\xE0\x80\x23\x22\x15\x76\xE4\x3E\x51\x73\xC6\xE9\xD3\x95\x75\x14\xAB\xF3\x3B\xB9\x28\xE1\x20\xC0\x81\x29\x48\x9A\xE8\x10\xE4\x63\xE0\x00\xD6\xC4\xD6\x21\x54\x0E\xA2\x21\xAD\x16\x53\xA2\x82\x25\xEC\xB6\xC3\x26\x15\x20\xF3\xED\x40\x6B\xED\xE3\x57\x2F\xE9\x21\xB3\x16\x52\xCB\x82\x29\xED\xA9\xDB\xC1\x4A\x44\xE3\x22\xDE\x86\xED\x5E\x6F\x79\xDA\x21\x75\xFD\xE0\x2D\x20\xEF\xE9\x81\x3C\xE9\xE5\x06\x35\x17\xDF\x86\x29\x16\x4B\x57\xF1\x20\x95\xF8\xF3\x92\xFE\x56\x21\xE2\x88\x4B\xE4\xBA\x00\xE6\xE9\x96\xF3\xE5\x5D\x1B\xF3\x20\xBF\x16\x50\xD8\x83\x21\xF2\xD1\xC2\x20\x18\x20\xF3\xF6\x40\x1F\xFC\xF0\x83\x01\x1F\xF5\x02\x25\x1A\xA5\x2B\x00\xF3\x9D\xE5\xE1\x4A\xC4\xE9\x20\xEF\x86\xF9\x20\x63\x1E\xEE\x20\xC9\x16\x52\xA8\x3F\xE4\xE6\x65\x0F\xF9\x4A\xD3\xE8\xD2\x41\x59\xF2\x21\xA4\xFD\xF3\x20\xCD\x17\xF8",
			"\x9D\x2A\xB1\xEC\x00\x1C\xF8\xDE\x34\xF0\x18\xF0\xF8\x45\x57\x7B\xE1\x53\xEB\x28\x74\x1B\xFA\xC4\x5C\xCF\x72\xC3\x24\xFC\x03\x22\xCC\xCD\xD8\x10\xE4\xFC\xDD\xDB\xE4\xD9\x00\x7F\x00\x08\x2D\x59\x7E\x7F\x01\x1E\x7D\xCC\x76\x10\xDB\x02\x80\xDC\x25\x80\x02\x83\x12\xDD\x02\x80\xE4\x29\x75\xDD\x59\x7F\x23\x7F\x0D\x20\x75\x81\xFF\x74\x73\xE0\x02\x80\xEB\x24\x81\xE7\x64\x73\xE2\x02\x80\x3E\x03\x30\x1A\x88\x7E\x76\x72\x10\xE4\x02\x80\x40\x03\x30\xED\x7B\x46\xBA\x18\x33\xB6\x57\x5E\x35\x14\x83\x25\x1E\x45\x2A\x11\x60\xE9\x56\x31\xDF\x30\x5F\xAB\x5B\x60\xE5\x78\x83\xF1\x5B\x83\xE5\x70\x00\x6D\x55\x3F\x4E\x31\x57\xAB\x53\x61\x77\x51\x56\x46\x83\x30\x4F\x89\x75\x00\x06\x5F\xF8\x45\x4E\x2A\x13\x40\xE3\x45\x32\x6B\x53\x12\x5B\x8D\x10\x7D\x1A\x62\x39\x13\x64\xFF\x5B\x5A\x30\x66\x61\xFF\x0B\x65\x5A\x60\x85\x68\x8A\x10\xB5\x3F\x3D\xB5\x3B\x56\x6F\x89\x86\xEE\x73\x10\xB5\x36\x85\xB5\x3A\x12\x59\x60\x45\x8A\x38\x87\xDE\x59\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Int",
			L"_IntItem",
			L"_Item",
			L"Module",
			L"_Item_LRI_Isolated_2",
			L"_Item_LRI_Isolated_3",
			L"_IntItem_LRI_Original",
			L"_Item_LRI_Original",
			L"Module_LRI_Original",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Int] BEGIN ",
			L"[1][_Int] END [ENDING]",
			L"[2][_Int]< \"int\" @ >",
			L"[3][_IntItem] BEGIN ",
			L"[4][_IntItem] END [ENDING]",
			L"[5][_IntItem]<< !_Int @ >>",
			L"[6][_Item] BEGIN ",
			L"[7][_Item] END [ENDING]",
			L"[8][_Item]<< !_Int ( lri:(LRI__IntItem)->_Item_LRI_Original @ ) >>",
			L"[9][_Item]<< !_Int @ ( lri:(LRI__IntItem)->_Item_LRI_Original ) >>",
			L"[10][_Item]<< !_Item_LRI_Isolated_2 ( lri:(LRI__Item)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[11][_Item]<< !_Item_LRI_Isolated_2 @ ( lri:(LRI__Item)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[12][_Item]<< !_Item_LRI_Isolated_3 ( lri:(LRI__Item)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[13][_Item]<< !_Item_LRI_Isolated_3 @ ( lri:(LRI__Item)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[14][Module] BEGIN ",
			L"[15][Module] END [ENDING]",
			L"[16][Module]<< !_Int ( lri:(LRI__IntItem)->Module_LRI_Original @ ) >>",
			L"[17][Module]<< !_Int @ ( lri:(LRI__IntItem)->Module_LRI_Original ) >>",
			L"[18][Module]<< !_Item_LRI_Isolated_2 ( lri:(LRI__Item)->Module_LRI_Original @ ) >>",
			L"[19][Module]<< !_Item_LRI_Isolated_2 @ ( lri:(LRI__Item)->Module_LRI_Original ) >>",
			L"[20][Module]<< !_Item_LRI_Isolated_3 ( lri:(LRI__Item)->Module_LRI_Original @ ) >>",
			L"[21][Module]<< !_Item_LRI_Isolated_3 @ ( lri:(LRI__Item)->Module_LRI_Original ) >>",
			L"[22][_Item_LRI_Isolated_2] BEGIN ",
			L"[23][_Item_LRI_Isolated_2] END [ENDING]",
			L"[24][_Item_LRI_Isolated_2]< \"class\" @ >",
			L"[25][_Item_LRI_Isolated_3] BEGIN ",
			L"[26][_Item_LRI_Isolated_3] END [ENDING]",
			L"[27][_Item_LRI_Isolated_3]< \"class\" \"?\" @ >",
			L"[28][_Item_LRI_Isolated_3]< \"class\" @ \"?\" >",
			L"[29][_IntItem_LRI_Original] BEGIN ",
			L"[30][_IntItem_LRI_Original] END [ENDING]",
			L"[31][_IntItem_LRI_Original]<< !_Int @ >>",
			L"[32][_IntItem_LRI_Original]lrp:(LRI__IntItem) @",
			L"[33][_Item_LRI_Original] BEGIN ",
			L"[34][_Item_LRI_Original] END [ENDING]",
			L"[35][_Item_LRI_Original]< _IntItem_LRI_Original \",\" @ >",
			L"[36][_Item_LRI_Original]< _IntItem_LRI_Original \".\" @ >",
			L"[37][_Item_LRI_Original]< _IntItem_LRI_Original @ \",\" >",
			L"[38][_Item_LRI_Original]< _IntItem_LRI_Original @ \".\" >",
			L"[39][_Item_LRI_Original]< _Item_LRI_Original \"?\" @ >",
			L"[40][_Item_LRI_Original]< _Item_LRI_Original @ \"?\" >",
			L"[41][_Item_LRI_Original]<< !_Item_LRI_Isolated_2 @ >>",
			L"[42][_Item_LRI_Original]<< !_Item_LRI_Isolated_3 @ >>",
			L"[43][_Item_LRI_Original]lrp:(LRI__Item) @",
			L"[44][Module_LRI_Original] BEGIN ",
			L"[45][Module_LRI_Original] END [ENDING]",
			L"[46][Module_LRI_Original]< _Item_LRI_Original @ { _Item } >",
			L"[47][Module_LRI_Original]< _Item_LRI_Original { _Item @ } >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge9_PmLoopTokens, ModuleParserStates, PrefixMerge9_PmLoopAstInsReceiver>(&PrefixMerge9_PmLoopTokenDeleter, &PrefixMerge9_PmLoopLexerData, &PrefixMerge9_PmLoopModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge9_PmLoopTypeName((PrefixMerge9_PmLoopClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 6, -1, 6, 6, 6, 6, 6, 6, },
			{6, 1, -1, 6, 6, 6, 6, 6, 6, },
			{-1, -1, 2, -1, -1, -1, -1, -1, -1, },
			{6, 6, -1, 3, 6, 6, 6, 6, 6, },
			{6, 6, -1, 6, 4, 6, 6, 6, 6, },
			{6, 6, -1, 6, 6, 5, 6, 6, 6, },
			{6, 6, -1, 6, 6, 6, 6, 6, 6, },
			{6, 6, -1, 6, 6, 6, 6, 7, 6, },
			{6, 6, -1, 6, 6, 6, 6, 6, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(tokens, this, codeIndex);
	}
}
