/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopModuleParser.h"

namespace prefixmerge9_pmloop
{
	void PrefixMerge9_PmLoopModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2119; // 17057 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 71;
		static const vl::vint dataSolidRows = 8;
		static const vl::vint dataRows = 9;
		static const char* compressed[] = {
			"\xA1\x42\x00\x00\x3F\x08\x00\x00\x06\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x80\x81\x84\x06\x0A\x92\x0A\x95\x0A\x81\x0E\x85\x12\x0A\xC8\x01\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x90\x21\x9B\x9C\x86\x9F\x7D\x90\x96\x97\x26\xB0\xA3\x92\x94\x92\x84\x97\x96\x36\xAF\xB9\x91\x9B\x9B\x99\x9F\x9A\x2B\xBC\x81\xBE\x99\x82\x96\x82\xA3\x03\xB7\xB4\x87\x9F\x9C\xA7\xA0\xA0\x06\xCA\x8D\xA0\x93\xA8\x9F\xA6\xA7\x51\xBA\x97\xB4\xA9\x82\x02\x84\xA4\x02\xD2\x9B\xB6\xA9\xAA\xA1\xB2\xA2\x67\xD0\x89\xBA\xA9\xB0\xAF\xB4\xB3\x6F\xE8\xB1\xAA\xB1\xB4\xB7\xB8\xB7\x0B\xDF\x95\xAB\xAC\xAD\xB5\xBF\xBB\x7F\xF5\xB0\xA2\xC2\xBC\xC0\xBB\x80\x62\xFE\xA4\xA3\x84\x02\xBD\x85\x02\x8E\x8A\xFC\xAB\xC6\xC0\xBC\xC4\xBB\x95\x81\xD7\xC3\xCB\xCD\xC1\xCF\xC3\x22\x98\xDF\xD6\xC1\xD4\xCD\xD2\xCF\x00\x0E\x87\xBB\xBC\xD3\xB3\xC9\xD7\xAD\x92\xF1\xC0\xC4\xCB\xD2\xCD\xD3\xA0\x87\x11\xC3\x88\x83\xD5\x85\x04\xBB\x99\xF5\xC0\x0A\x01\xE2\xDB\xE1\x89\xB4\xF0\xCE\xD3\xDA\xE1\x91\x05\xC6\xB8\xE4\xC9\xEE\xE5\xE7\xE3\x90\x10\xC5\x96\xF2",
			"\xE7\xDC\xE9\x81\x06\xD1\x8E\x11\xFE\xEC\xE8\xE6\xD1\xF2\xCB\xB2\xCC\xEB\xFA\xF5\xF6\xE5\xED\x0F\x63\xE7\xE4\xF4\xFB\xFA\xFA\xD3\xF5\xF8\xF7\xE8\xD4\xF0\x09\xE9\x08\xD1\x52\x4A\x74\x7B\x03\x53\x02\x7E\x7E\x08\xBC\x7B\x7C\x68\xF9\x4A\x86\x68\x05\xD1\x54\x43\x82\x41\x16\x07\x8E\x80\x6A\x17\x16\x8C\x83\x82\xA4\x58\x0A\x87\x74\x1C\x9D\x71\x8A\x79\x09\x9B\x85\x88\x88\x27\xA2\x89\x8B\x70\x16\x53\x8F\x78\x81\xD5\x70\x87\x77\x76\x0D\xA6\x87\x84\x68\x1A\x1F\x8A\x8B\x8D\x28\xBC\x8B\x8E\x8D\x40\xBD\x81\x93\x8F\x42\xA4\x6B\x06\x8E\x24\xBE\x89\x93\x90\x4B\x85\x97\x6C\x07\x48\xA9\x7F\x8A\x7B\x31\x94\x93\x8E\x8C\xE8\x4A\x4D\x05\x74\x1E\x0A\x4C\x40\x96\x35\x8E\x9D\x90\x91\x64\xA3\x96\x9A\x94\x55\x93\x93\x41\x08\xD1\x62\x01\x94\x8D\x23\xA8\x97\x96\x41\x23\x11\x74\x0B\x9B\x60\xB1\x90\x9E\x69\x18\x6E\x82\x42\x09\x78\x96\x99\x95\x9E\x2B\xB2\x93\xA2\xA0\xE4\x67\x01\xA2\x9A\x69\x8D\xA3\x9C\xA3\x8F\x8E\xA0\x00\x0A\x8B\x92\xA1\x99\x99\x86\x97\xA3\x71\x0A\x95\x81\x4A\x09\x74\x2B\x1D\xA7\xA0\xA4\xA3\x96\xAA\x9C\xA1\x4A\x99\xA7\x78\x0B",
			"\xA2\xAD\x01\x76\x0B\xA2\x9A\xAA\xA9\xA1\x0A\x6F\x01\x74\x0C\xB1\xA7\xA8\xA2\xAE\xA4\xA4\x71\x0D\x74\x32\x1E\x9B\x9D\xAA\xC3\x8C\x93\xAC\xB1\xA8\x86\xBA\x41\x0D\xA2\xB6\x01\x77\x0D\xB9\xB4\xA8\x94\x0E\xA2\xB9\x01\x76\x0E\xD1\x88\xB2\xA2\x2F\x0A\x5E\x59\x41\x63\x63\x50\x63\x5B\x4D\x5F\x8A\x67\x4E\xB7\x06\x60\xBA\x62\xBA\xB4\x77\x42\xBA\xB9\x2C\x65\xBD\xB8\x4B\xE8\xA8\x42\x72\xBC\xC2\x67\xBA\x40\xBB\xC2\x6F\xB3\xBE\x49\xFE\xB9\xBC\x4A\x6E\xE3\xB1\xB5\x56\xBE\x5D\x55\x5D\x6F\xBF\x23\x6A\x6C\xC3\x47\x01\xC7\x77\x4C\xC1\xF0\xA6\x48\xBE\xC4\xF4\x82\xB3\x5B\xC2\x02\xE6\x4E\xC1\xC7\x23\x51\xC5\x7B\xC4\x07\xC6\xC5\xC2\x49\xF5\x82\x42\xCB\x4D\x1C\xD8\xCE\xC5\xC9\x00\xF0\xC1\xCA\xCC\x10\xF4\xCE\x44\xC5\x0F\xDE\x47\xC7\xC8\x2C\x6D\xCC\xCE\x49\x38\xE0\xCF\x45\xCA\x01\x7E\xCC\xCA\xCD\x1D\x40\x79\xC3\x58\x3B\xF7\x48\xC2\xBD\xF7\x88\xDF\x3C\xD1\x00\x3C\xB7\x73\xCA\x4E\xF1\xC7\xCB\x48\x41\xEE\xC3\x49\xD3\x59\xE3\x44\xD4\x58\xC7\x54\xD4\xD7\xD1\x5B\xDF\x4F\xC6\xD7\x35\xE9\xD7\xCE\xD4\x60\xE1\xDE\x47\xD8\x55\x54\xD1\xDF\x48\x46",
			"\xF2\xDE\x47\xDA\x3F\xF3\xCE\xD9\x47\x5D\xFD\xDF\x47\xDD\x72\xF4\xD3\x58\xD5\x58\xE6\x49\xDE\xDE\xFF\x3C\xDC\xE1\x47\x89\xFA\xD1\xE6\xDC\x81\xCF\xEF\x3C\xE1\x61\xC6\xEA\x63\xE2\x7A\xCA\xD0\xD7\xD5\x52\xD6\xD2\xE2\x47\x93\xE1\xD5\xE7\xE3\x98\xD9\xDA\xE4\x6D\x9C\xF2\xDE\xE7\xE7\xE4\x92\xD4\xD7\x64\xA5\xD9\xD7\xE8\xE3\xA9\xCE\xDB\xEA\x70\xAD\xE1\xDF\xE8\xD4\xB1\xFF\xD3\xD7\xBE\x55\x75\xEE\xD3\xED\x7A\xF9\xEF\xD3\x40\x64\xE5\x7D\xEE\xED\xB2\xCA\x4F\xF3\x3F\xD3\xF7\x4F\xED\x40\x67\xD9\xCF\xE4\xE8\xC2\xCA\xFA\xF5\xBA\x55\x62\xE6\xE6\xF1\xC1\xD5\xC2\xDB\xF6\x65\xDD\xB5\x56\xF7\x28\xC4\xF7\xE2\xC6\x8A\x6C\xF7\xFB\xB7\x75\xCA\x46\xF2\xFC\x43\xEE\xFA\x60\xF9\x2C\x7C\xF0\xD1\xF4\x09\x33\x79\xF5\x2C\x27\x7A\x00\x19\x7A\x6B\xE6\x6D\x6D\x02\xEF\x62\x78\xAA\x42\x82\x6A\x05\x87\x82\xDF\x0B\x80\x72\xA9\x48\x7D\x70\xD2\x6A\x60\x04\xEA\x71\x5C\xA9\x7E\x7C\x6B\x00\x86\x23\x03\xC2\x71\x83\xE2\x5E\x86\x82\x21\x9C\x36\x06\xA4\x8C\x82\xC5\x17\x81\x73\x19\x9B\x63\x06\xCB\x6A\x31\xDD\x47\x38\x7F\x73\x68\x7D\x79\x36\x8B\x87\x16\xB4\x30",
			"\x87\x1D\x34\x6A\xF8\x5F\x7C\x79\xFA\x49\x21\x77\x40\x83\x78\xFD\x6F\x7E\x4F\xF4\x4F\x33\x7D\x29\x82\x23\x10\x88\x89\x67\x8E\x09\x8B\x76\x50\x8D\x82\xFE\x34\x3F\x83\xC1\x51\x8E\x5E\xE5\x75\x8A\x12\xE0\x73\x2D\x29\xBA\x6E\x8C\x72\x68\x8D\xD8\x6A\x89\x6A\x36\x8E\x6E\x8D\x37\x30\x8C\x01\xBA\x81\x8F\x19\x9B\x7D\x8E\xC2\x6E\x73\xE3\x7A\x8C\x70\x3E\x9D\x74\x8E\x2C\x21\x58\xFA\x4D\x76\x6E\xF8\x43\x23\x67\xA2\x62\x64\xDF\x01\x7E\x66\x46\x8A\x26\x91\xBF\x2A\x21\x71\x4D\x80\x01\x02\x93\x96\x20\x54\x65\x82\xCF\x50\x3F\x20\x85\x20\x39\x21\x9C\x86\x22\x78\x20\x9A\x21\xF8\x24\x91\x80\x0A\x39\x3A\x08\x9E\x9A\x21\x50\xAA\x81\x21\xA3\x86\x22\x2B\x87\x25\x95\x56\x92\x91\x3A\x97\x83\x20\xD5\x7E\x34\x92\x5E\x98\x92\x21\x00\x48\x7E\xC8\x21\x29\x77\x90\x22\x73\x96\xF6\x5B\x67\x2B\x51\x31\x25\x02\x84\x9A\x21\xB0\x11\x38\xDF\x3E\x6F\x99\x84\x31\x12\x9A\xB7\x88\x7F\xCE\x32\x11\x3A\xD1\x41\x9B\x7B\x3B\x73\x14\x33\xB5\x9A\x9A\x85\x34\x11\x3A\x81\x71\x97\xE7\x3B\x65\x16\x6C\x89\x22\x51\x3A\x8A\x22\x2D\x68\x9A\x20\x5F\xAB\x9A\x21\xB7\x11",
			"\x38\xD5\x14\x51\x9F\x84\x38\x13\x9C\x09\x39\x41\x39\xD8\x42\x75\x3A\x43\xA6\x20\xB9\x11\x3A\xC8\x5D\x48\x7C\xAA\x7A\x12\xA1\x0A\x3F\x02\x0E\xD4\x6B\x16\x88\x89\x20\x04\x13\xAA\x20\x2F\x7A\x9A\x20\x7E\xBD\x9B\x20\xBD\x11\x3B\x0E\x19\xA8\x4B\x78\x8D\x7A\x56\x3E\x82\x23\x49\xE7\x39\x25\x6C\x60\x33\x67\x12\x80\x35\x48\x66\x6B\x3B\x96\x8F\x8B\x89\x82\x46\x99\x4A\x91\x5C\xA7\xD4\x0A\x20\x42\x25\xAD\x23\x4E\xA5\x51\x21\xE6\x4D\x7C\x6F\x31\xA4\x35\x48\x3E\x69\xA9\xDB\x3C\x85\x91\x35\xB9\x9A\x6F\x3B\x56\x35\x02\x87\x49\xA8\xA7\x86\x22\x1F\xAF\xA1\x3B\x02\x90\x48\xAB\x06\x3F\x9B\x40\x5B\xA4\x34\xD1\x4D\x7D\x80\x5B\x40\xAF\x40\x02\xAA\xAB\xED\x22\x65\x79\xB9\x82\x23\x0B\xB7\x31\x25\xB4\x93\xAD\x57\xE7\x28\x98\x00\x73\xA3\x39\x90\x0C\xA7\xAE\xA6\x46\x36\x5E\xEC\x4A\xAC\x81\x12\xA0\x95\x58\x5C\x6D\xF3\x2A\x93\x20\xA0\xB9\xA2\x21\xF0\x9F\x94\x96\x01\x7B\xB1\xA1\xA4\x39\x24\x9C\x54\x84\xA9\x3E\x6D\x78\x75\x82\x27\x93\x8F\xA9\x21\xA8\x14\x98\xA5\x84\x26\x96\x20\x57\xA1\xB6\x41\x2C\x59\x20\xBE\x8D\x9B\xA8\xA7\xA3\x23\x57\xAA",
			"\xB3\x21\x19\x0F\x93\x3B\x7A\xB4\x69\x6C\x82\x26\xAE\x52\x61\x20\x5B\xAD\xBB\x38\x68\xBA\x95\x9E\x56\x85\xB1\x20\x41\x0E\xA4\x69\x62\xA2\x20\x7B\x92\x51\x24\x42\x11\x84\x55\xA8\x3C\xB9\x80\x0E\xB6\xB7\x0A\x2A\x0A\x74\xA4\x5B\xB7\x80\x3B\x65\xBA\x06\x91\xA9\x42\x52\x0B\xBA\x49\x42\x46\x20\xDF\xAA\x20\x61\xB4\xB2\x20\x2D\x0A\x25\x80\xE4\x32\x42\x64\x86\x27\xBD\xC6\xA2\xBE\x20\x63\x0A\xBB\x6D\x57\xB2\x20\x03\x47\xB8\x00\x64\x1A\xBF\x70\x72\xB4\xB9\xFF\xA5\x0E\xB2\xE7\x2C\xAD\x11\x81\xAA\x21\x0A\x7F\xBF\x0C\x08\xD2\x5A\x41\x1E\x49\x20\x07\xEC\xBD\xA7\xA5\xA6\x21\x8B\x06\x2C\xBF\x9E\xA1\x21\x0D\x11\xC8\x34\x85\x80\xB1\x21\x0D\xC5\xC7\xC2\x00\x0B\x0E\x21\x92\x56\xC4\x81\x14\x6D\xC5\xD8\x77\xBF\x40\x6E\x0B\xC5\x9E\xA9\xB7\xC4\x03\x30\xC5\x78\xFF\xB1\x0F\x1A\xC4\xA8\x00\xBD\xAE\xC6\x42\x37\xC2\x21\x1C\x7F\xBC\x0E\x02\xC1\x24\x91\x81\x2E\x4D\xFF\xB5\x0B\x8B\x02\x39\x0E\xA8\x33\xB3\x20\x23\xE8\xC2\x0F\x49\xCA\x20\x95\x82\x2D\xC8\x14\xFB\x08\xCA\x01\x3F\x0E\xA8\x41\xC1\x20\x2B\xD8\xB9\x21\x80\x19\xC9\x42\x64\xC0\x01\x2E",
			"\xE7\xCE\x20\x81\x00\xCC\x00\x05\x12\x55\xBF\x83\x23\xC9\x3F\xC7\x5A\xB2\x09\x27\xB0\x83\x1B\xCE\xC3\xC5\x42\x4D\x48\x18\xAB\xCC\x19\xC1\xB2\x5B\x6B\x4A\x22\x99\xCF\xBA\x20\x43\x2A\xCE\x20\xEB\xA3\x22\x9B\x8C\xD9\x21\x43\x32\xCB\x11\xA2\x53\xD1\x40\x11\xD4\xD3\xE9\xBB\xCC\x4E\x8A\xC6\xD1\x40\x0C\x1F\xD1\x81\x06\xA6\x20\x9A\xD9\xCE\x42\x0D\x12\xCF\x48\x22\x57\x4E\x09\x2B\xD0\xA0\xC9\x52\xD0\x85\x30\xD0\xD5\xA2\xC0\x02\x24\x3E\xC5\x12\x51\x7D\x4C\xC3\xB9\xD6\x12\x8F\xE4\x3D\xCE\x1C\xC2\x27\xD7\xC6\xD3\xD6\x41\x19\x12\xCE\xF2\x1C\xD6\xBB\x17\x21\xC6\x4C\x8A\x2D\x13\x66\xE7\x3F\xD6\x87\x91\xDA\x66\x9D\xD3\x21\x50\x16\xDE\x34\x91\xB9\xDB\x3B\x8A\x20\x51\xFF\xA5\x15\xD4\x02\x21\xDE\x40\x1D\xCA\xD5\x84\x26\x12\xDA\xA4\x3F\x53\xB6\x81\x2A\xDD\x18\xFF\xB8\x15\xF0\xD7\x34\x6B\xF3\xB3\x20\x8F\x83\x25\xDC\x28\xCA\x14\xBA\x81\x2E\xDF\x75\xF9\xD3\x15\xF9\xC3\x38\xAC\x73\xD3\x53\x84\xF1\x9D\x15\x0E\xEA\x20\xAE\x0C\xE9\xB3\x3B\xAC\xA6\x69\xFD\x8B\xA5\x4C\x1A\xE6\x25\xE6\x68\x25\xA9\x2D\x20\xE7\x18\xDB\x78\x8B\xA1\x9E\xE4\x87",
			"\x00\x05\x9A\xF2\x3B\x68\x24\x96\xD5\x9C\xC4\xD0\xD4\x91\xD5\x7B\x20\x8E\xD1\x68\x26\x78\x00\x04\x7F\x5B\xA1\x23\x99\x90\x24\xA8\x24\x3F\xFD\x22\x62\xBE\xE3\xA8\x9F\x87\x8C\xE8\x32\xE8\xA8\xD2\xE8\xBB\xE9\x81\x03\x9C\x6F\x4F\xF2\xCE\xD1\xE8\x7E\xB4\xBE\xBF\x19\x70\x28\x38\xE9\x3C\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Int",
			L"_IntItem",
			L"_Item",
			L"Module",
			L"_Item_LRI_Isolated_3",
			L"_IntItem_LRI_Original",
			L"_Item_LRI_Original",
			L"Module_LRI_Original",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Int] BEGIN ",
			L"[1][_Int] END [ENDING]",
			L"[2][_Int]< \"int\" @ >",
			L"[3][_IntItem] BEGIN ",
			L"[4][_IntItem] END [ENDING]",
			L"[5][_IntItem]<< !_Int @ >>",
			L"[6][_Item] BEGIN ",
			L"[7][_Item] END [ENDING]",
			L"[8][_Item]<< !_Int ( lri:(LRI__IntItem)->_Item_LRI_Original @ ) >>",
			L"[9][_Item]<< !_Int @ ( lri:(LRI__IntItem)->_Item_LRI_Original ) >>",
			L"[10][_Item]<< !_Item_LRI_Isolated_3 ( lri:(LRI__Item)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[11][_Item]<< !_Item_LRI_Isolated_3 @ ( lri:(LRI__Item)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[12][Module] BEGIN ",
			L"[13][Module] END [ENDING]",
			L"[14][Module]<< !_Int ( lri:(LRI__IntItem)->Module_LRI_Original @ ) >>",
			L"[15][Module]<< !_Int @ ( lri:(LRI__IntItem)->Module_LRI_Original ) >>",
			L"[16][Module]<< !_Item_LRI_Isolated_3 ( lri:(LRI__Item)->Module_LRI_Original @ ) >>",
			L"[17][Module]<< !_Item_LRI_Isolated_3 @ ( lri:(LRI__Item)->Module_LRI_Original ) >>",
			L"[18][_Item_LRI_Isolated_3] BEGIN ",
			L"[19][_Item_LRI_Isolated_3] END [ENDING]",
			L"[20][_Item_LRI_Isolated_3]< \"class\" @ >",
			L"[21][_IntItem_LRI_Original] BEGIN ",
			L"[22][_IntItem_LRI_Original] END [ENDING]",
			L"[23][_IntItem_LRI_Original]<< !_Int @ >>",
			L"[24][_IntItem_LRI_Original]lrp:(LRI__IntItem) @",
			L"[25][_Item_LRI_Original] BEGIN ",
			L"[26][_Item_LRI_Original] END [ENDING]",
			L"[27][_Item_LRI_Original]< _IntItem_LRI_Original \",\" @ >",
			L"[28][_Item_LRI_Original]< _IntItem_LRI_Original \".\" @ >",
			L"[29][_Item_LRI_Original]< _IntItem_LRI_Original \"?\" @ >",
			L"[30][_Item_LRI_Original]< _IntItem_LRI_Original @ \",\" >",
			L"[31][_Item_LRI_Original]< _IntItem_LRI_Original @ \".\" >",
			L"[32][_Item_LRI_Original]< _IntItem_LRI_Original @ \"?\" >",
			L"[33][_Item_LRI_Original]< _Item_LRI_Original \"?\" @ >",
			L"[34][_Item_LRI_Original]< _Item_LRI_Original @ \"?\" >",
			L"[35][_Item_LRI_Original]<< !_Item_LRI_Isolated_3 @ >>",
			L"[36][_Item_LRI_Original]lrp:(LRI__Item) @",
			L"[37][Module_LRI_Original] BEGIN ",
			L"[38][Module_LRI_Original] END [ENDING]",
			L"[39][Module_LRI_Original]< _Item_LRI_Original @ { _Item } >",
			L"[40][Module_LRI_Original]< _Item_LRI_Original { _Item @ } >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge9_PmLoopTokens, ModuleParserStates, PrefixMerge9_PmLoopAstInsReceiver>(&PrefixMerge9_PmLoopTokenDeleter, &PrefixMerge9_PmLoopLexerData, &PrefixMerge9_PmLoopModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge9_PmLoopTypeName((PrefixMerge9_PmLoopClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, -1, 6, 6, 6, 6, 6, 6, 6, },
			{-1, 1, -1, -1, -1, -1, -1, -1, -1, },
			{6, -1, 2, 6, 6, 6, 6, 6, 6, },
			{6, -1, 6, 3, 6, 6, 6, 6, 6, },
			{6, -1, 6, 6, 4, 6, 6, 6, 6, },
			{6, -1, 6, 6, 6, 5, 6, 6, 6, },
			{6, -1, 6, 6, 6, 6, 6, 6, 6, },
			{6, -1, 6, 6, 6, 6, 6, 7, 6, },
			{6, -1, 6, 6, 6, 6, 6, 6, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(tokens, this, codeIndex);
	}
}
