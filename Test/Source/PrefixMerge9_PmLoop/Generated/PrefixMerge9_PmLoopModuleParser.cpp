/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopModuleParser.h"

namespace prefixmerge9_pmloop
{
	void PrefixMerge9_PmLoopModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1998; // 16505 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 206;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\x79\x40\x00\x00\xC6\x07\x00\x00\x06\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x80\x81\x84\x07\x0A\x92\x0A\x95\x0A\x81\x0E\x85\x0E\x0A\xC8\x01\x09\x8F\x7D\x8E\x8F\x8E\x0A\x80\x1F\x9F\x81\x93\x92\x8F\x90\x21\x9B\x9C\x86\x9F\x7D\x90\x96\x97\x26\xB0\xA3\x92\x94\x92\x84\x97\x96\x36\xAF\xB9\x91\x9B\x9B\x99\x9F\x9A\x2B\xBC\x81\xBE\x99\x82\x96\x82\xA3\x03\xB7\xB4\x87\x9F\x9C\xA7\xA0\xA0\x06\xCA\x8D\xA0\x93\xA8\x9F\xA6\xA7\x51\xBA\x97\xB4\xA9\x82\x02\x84\xA4\x02\xD2\x9B\xB6\xA9\xAA\xA1\xB2\xA2\x67\xD0\x89\xBA\xA9\xB0\xAF\xB4\xB3\x6F\xE8\xB1\xAA\xB1\xB4\xB7\xB8\xB7\x0B\xDF\x95\xAB\xAC\xAD\xB5\xBF\xBB\x7F\xF5\xB0\xA2\xC2\xBC\xC0\xBB\x80\x62\xFE\xA4\xA3\x84\x02\x86\xAF\x84\x0E\xC7\xBB\xB3\xC3\xB4\xBF\xC4\xC3\x78\x88\xF6\xB8\xC1\xC2\xCF\xC0\xCF\x85\xA0\xC7\xC2\x9B\xCA\xD1\xCC\x00\x07\x7A\x95\xD4\xCA\xC6\xCA\xD6\xD6\x80\x97\xC1\x88\x82\xCB\xD6\xDB\xD6\x0A\x89\x2A\xC6\x8A\x03\xDF\x81\x05\xBE\x9C\xF2\xC0\x0C\x01\xE2\xD3\xCE\xA4\x9F\xC9\xE1\xDB\xE3\xD1\xC5\xD8\xAF\x89\x8D\x06\xED\xE7\xD3\xE6\xE1\xD1\xB8\xCF\x94",
			"\xE7\xE9\x83\x06\xEE\xA5\xD5\xC8\xFD\xE2\xF3\xE0\xF3\xF3\xE1\x90\x20\xEA\xE8\xF4\xF5\xF0\xF2\x11\x6B\xCC\xED\xFC\xE2\x89\xAE\x85\x14\x0A\x8C\x97\xD0\xE8\xD8\xEC\xFF\xC7\x66\x7F\x7B\x80\xEE\x45\x83\x7D\x78\x17\x32\x73\x68\x06\x8E\x4A\x4A\x06\x82\xD6\x44\x87\x82\x72\x1B\x10\x88\x70\x07\x0D\x89\x4E\x06\x85\x02\x86\x8E\x72\x84\x1F\x8A\x7F\x04\x87\xD9\x7D\x7C\x7F\x7F\x27\x81\x85\x88\x8A\xDA\x6D\x86\x8A\x8B\x02\x60\x04\x88\x80\xE5\x6B\x8A\x88\x8D\xF4\x61\x8C\x71\x08\x33\xA9\x85\x8C\x8E\x20\x91\x8E\x86\x90\x13\x85\x9A\x8F\x91\xA7\x62\x0D\x8C\x8C\x37\xBE\x89\x8C\x91\x48\xA3\x71\x92\x94\x43\x94\x9C\x73\x08\x4B\xAF\x8A\x94\x8B\x03\x64\x09\x94\x97\x60\x8D\x9C\x93\x8F\x4E\x93\x9D\x86\x91\x50\xA7\x65\x0B\x97\x62\x9B\x9D\x99\x98\x64\xA3\x96\x08\x9B\x71\xAE\x95\x9C\x9C\x4F\x96\x91\x97\x70\x27\x19\x86\x41\x0A\xFA\x40\x95\x97\x99\x7B\xB6\x87\x9F\x9B\x88\x87\xAA\xA0\x79\x2C\x14\x7D\x08\x9D\x79\x84\xA9\x9A\x9E\xA7\x6E\x04\x77\x0B\x90\xA6\x96\xA1\xA4\x9B\x9A\xA4\x8C\x0C\x99\x83\xAD\xA6\xA8\x82\x8C\x71\x0D\xA8\xCC\x72\x04\x77\x0C",
			"\xA8\x85\xA5\xAA\xAB\x65\xA4\xA1\xAC\x9A\xC8\x74\x04\x9D\x0D\xD4\x76\x0D\xAB\xA4\x92\x94\xAE\xAF\x70\x37\x14\x78\x0F\xAE\xBF\xA3\xA4\xAF\x70\x39\x14\x7A\x0C\xB1\xBD\x8D\xB6\xB3\x68\x3B\x14\x7C\x0C\xB3\xCF\xBC\xA6\xA0\x29\x7E\x83\x45\x01\x55\xDB\xA3\x57\x4F\x7E\x8A\x77\x4F\x62\x41\xDD\x8A\x6D\x62\xB7\x2C\x65\xB1\x6F\xB7\x55\x62\xB8\x4B\x58\xE0\xAB\xBC\x4B\xB8\x03\x60\x51\x81\xBC\xC2\x6E\xB9\x42\xBA\xC2\x7C\xB1\x83\x4D\xFE\xA5\x70\xC1\xBB\x2C\x69\x68\xBA\x49\xF8\xBF\xB3\xBD\xA0\x63\x74\x62\xBE\x49\x91\x4F\xC3\x49\xC0\x37\x77\x46\xC1\xB8\x2C\x49\xC2\xC3\xC2\x09\x67\xBA\x62\xC3\xF9\xAC\x41\xC5\xC8\x26\x54\xC5\xC6\x49\x17\xD2\xCF\x46\xC6\x27\xC8\xC4\xC2\x49\x20\xCA\xC6\x4A\xC7\x2A\xDE\x46\xC9\xCB\x1E\x69\xC4\xCB\x48\xF4\x87\x45\x55\xCC\x1B\xE6\x4A\x6F\x7D\x63\x77\xC8\xCF\x3F\x46\xF8\xC9\xD1\xCB\x3A\xF2\xC3\x48\xCB\x47\xDD\x40\xD1\xD4\x1D\x4D\xD1\xD0\xCF\x0A\x53\xDC\x4A\xD6\x51\xC3\xD6\x41\xCF\x01\x8B\xD7\xCA\xD8\x15\xE4\xD6\xC7\xCB\x4F\xE8\xDF\x44\xD7\x47\xD6\xD4\xD7\x3F\x60\xC4\x4F\xCE\xDA\x1E\x5E\xD3\x41\xDC\xFA",
			"\x9F\xD5\x54\xD4\x51\xF1\xD6\x65\xDC\x78\xD9\xC4\xDD\x47\x71\xF6\xB5\x78\xE0\x55\x71\xDC\xDD\xDA\x07\xD8\xDB\xBD\xE2\xD9\x82\x71\xDC\xCD\xC2\x4B\xE8\xCD\xDC\x64\xC8\xE0\xBF\xE0\xFF\x16\xED\xC8\xE6\xDC\x9C\xEE\xE7\xC9\x7E\xFB\xDC\xE5\xE1\xA6\xCD\xEF\x44\xE8\x45\xE2\xE7\xEB\xBB\x8A\x63\xE5\xC4\xEA\x9B\xEA\xEE\x44\xEB\x8A\x65\xED\xEA\xED\x84\xDC\x86\xDA\xE0\xBC\xF0\xDA\x40\xD9\x94\xCE\xDF\x47\xEF\x2E\xC1\xFA\xED\xEC\xAF\xC5\x50\xE5\x42\xB2\xF2\xE9\xDE\xB6\xCF\xC6\x45\xF1\x79\xD2\xDC\xC4\xB9\xEA\x18\xC9\xFD\xF6\xE3\xDB\xFB\xEF\xF7\xF1\x9C\xEE\xD4\xD5\xDC\x6C\xEB\xDC\xE6\xDD\x02\x41\xE5\xC8\xE7\xC8\xE3\x46\xF9\xDF\x59\xF3\xD1\xF0\xFB\x01\x6E\xF3\xC4\xFC\xE5\xCD\xF6\x41\xFA\x1E\x20\x83\xC9\x78\x70\x00\xFD\x64\x79\x78\xF1\x7F\x23\xFC\x47\x68\x7C\xFB\x63\x7D\x6E\x91\x61\x6C\xFF\x41\x7B\x81\xCB\x75\x7D\x61\xEB\x71\x81\x79\x09\x86\x67\xFE\x4A\x7F\x82\x1F\x79\x80\xD1\x0A\x35\x83\xCF\x60\x81\x36\x02\x95\x60\x01\x86\x8E\x23\xEB\x6F\x6E\x85\x54\x70\x85\xD4\x32\x87\x68\x1A\xB8\x66\x86\x2D\x64\x82\x65\x38\x87\x64\x1E\x95\x63",
			"\x64\xC6\x7E\x20\x10\xD7\x6F\x22\x1F\xB7\x22\x87\x55\x28\x8B\x58\x2B\x00\x77\x7A\x5A\x82\x63\xD7\x71\x8B\xF0\x0D\x2A\x20\xAB\x40\x6E\x6A\x04\x96\x69\x6F\x09\x20\x39\x84\x16\x6D\x38\x5C\x95\x8A\x42\x53\x31\x8D\xED\x0E\x7E\x8C\x7A\x68\x8F\x40\x1A\x6F\x3B\x33\x86\x25\x8D\x69\x8F\x8C\xC3\x06\x2D\x8B\xFF\x79\x32\x21\x5B\x94\x8E\x42\x60\x8A\x8E\xE9\x0A\x25\x8E\x03\x2A\x3D\x13\x81\x21\x61\x90\x32\x71\x24\xD7\x60\x90\xEC\x1A\x66\x12\xEA\x01\x64\x8C\x83\x9A\x63\x25\x54\x31\x24\x25\x86\x22\x63\x98\x14\x3A\x15\x83\x91\x20\x8D\x59\x12\x93\x78\x9C\x90\x00\x1A\x6A\x12\x50\x89\x24\x8F\x4D\x9A\x63\x26\x26\x96\x20\x41\xA2\x91\x21\x9C\x14\x3B\xF5\x73\x4C\x92\x8D\x5D\x16\x91\x0A\x3D\x4D\x2D\x8A\x2E\x12\xEA\x03\x8C\x47\x9C\x91\x6F\x27\x14\x9A\x21\x0A\x7B\x96\x47\x43\x8A\x49\x30\x8A\x20\x14\x5F\x8A\x23\x4D\xC7\x86\x21\x28\x54\x31\x6F\xF8\x2F\x91\x21\xA2\x14\x9A\x42\x56\x97\x9B\x81\x23\x14\x3A\x3D\x02\x94\x0B\xC8\x3F\x94\xC3\x5C\x52\x83\xE6\x81\x3D\x4A\x54\x53\x8F\xBB\x74\x41\x24\x9A\x63\x4F\x3A\x8F\x7D\x63\x77\x8A\x27\x7A\xE3\x8E",
			"\x58\x15\x89\x29\x3E\x1F\x61\x23\x88\xF9\x93\x9D\x6D\x06\x23\x88\x06\x7E\x9F\x84\xED\x74\x44\xED\x04\xAA\x82\xF2\x21\x21\x8F\xEE\x9E\x46\xC6\x06\x77\x8A\x7B\xA7\x94\x9D\x09\x39\x8A\x45\x86\x20\x92\x27\xB3\x53\x34\x04\x83\x47\x41\xEA\x82\x21\x21\xA4\x3F\x7A\x86\x64\x82\x8C\x23\xA6\x21\x7E\x8C\xA6\x47\x01\x69\xA6\x42\x58\x4C\xA5\x81\x0F\x45\x8C\x63\x43\x8A\xE1\x10\xA2\x21\x12\xA4\x9F\x99\x18\xBD\x8E\x41\x3E\xA3\x39\x90\x34\x93\xA0\x76\x44\x3E\x22\x81\x24\xA6\x79\xB9\x90\xA1\x89\x56\x6A\xE1\x28\x9D\xA7\x8D\x83\x20\x53\x6E\x89\xA9\x78\x1D\xA5\xAB\x9A\x82\x20\x54\x59\xB8\x4F\x56\xB3\xA6\xAA\x81\x27\x51\x21\x29\x81\x24\xD0\x06\x70\x22\x7E\xA5\xA9\x20\xC9\x50\x78\x8D\x2B\x8A\x21\xB6\x86\x26\xA0\x4E\xA9\x23\xB4\x72\xAE\x47\xA5\x85\x85\xAE\x0D\xAA\x9E\x42\x3F\x07\x9E\x1A\x5C\xAD\x93\x80\xA3\x86\x9D\x21\x23\x09\xC2\xBE\x46\x95\x6B\x89\xB1\x1C\x8B\xBA\x21\x23\x0E\xB3\x4C\x13\x0D\x9E\x40\x10\xB2\x20\x38\x94\xB1\x21\x4B\x01\xA9\x20\xF8\x3F\xAC\x00\x0C\x09\xB0\xCA\x36\x02\x06\x9C\xB1\x20\xBC\x9F\xB6\x20\x4E\x08\xB4\x73\x2E",
			"\xB9\xA1\x84\x2C\xB7\xAF\x5E\xA1\x20\x14\x32\xB3\x35\x9B\x93\xB2\x20\xDC\x83\x22\x67\xF0\x41\x24\x29\x22\xB0\xB8\xA4\xB9\xB4\x00\x53\x0C\xB7\xD3\x18\x42\xB1\xC8\xA9\x20\x6D\x89\x51\x25\x2A\x0D\xB8\x39\x1B\x50\xB9\x40\x41\xB5\xB7\xBC\x86\x27\x0A\xD7\xA3\x3B\x4A\xBF\xB1\x20\xFB\x2D\xA5\xB4\x59\x07\xB9\x40\x2E\xA3\x21\xCC\x8A\xBA\x0B\xEA\xA0\x00\x45\x52\xB5\xB5\x2D\x31\xB9\x41\x09\x2A\xB6\x72\xDC\x01\xBF\xE9\x80\x00\xBF\xDE\xBA\xAA\xAC\x06\x26\x22\xED\x8A\x51\x24\x5D\x01\xBD\x48\x4A\x98\xA8\x81\x06\x9E\x20\xBE\xAF\xB7\x40\x5F\x0A\xC0\x1A\x4F\xB8\xC2\xA5\xA7\x9E\x8F\x18\x2E\xAC\xE5\xA1\x0D\xC2\x09\x2D\xAA\x47\x86\x2C\xC3\xBB\xA5\xB3\x0C\x20\xC6\x22\x97\x61\xA1\x21\x12\xD1\xA1\xC0\x02\x25\x0E\x66\x89\x50\x9A\xF2\x80\x06\xC5\xDD\xB2\xC2\x40\x68\x03\xC6\x45\x7A\x96\xC6\x38\xD9\x7D\x69\xEB\x0D\xC6\xF2\x00\x56\xC0\x22\xA6\x21\x76\xB0\xC1\x20\x37\x31\xB9\xC9\x5D\x45\xB7\x1B\x17\xB3\x21\x39\x34\x4B\xBC\x03\x2B\xCA\x8E\x81\x24\x0F\xF8\x98\xCA\x20\x2B\xCC\xC8\x00\x75\x04\xCA\x81\x39\x0C\x4E\xC0\x86\x20\x94\xC4\xBF\x54\x6B",
			"\x4A\x24\xC1\x03\x3F\xC8\x75\xED\xC5\x58\xB2\x9A\x45\xB4\x7A\x11\xBE\x88\xE0\xC5\xB5\x3D\x25\xC9\x20\x7F\x14\x4D\x98\x83\x2B\xCF\x39\xDF\xA6\xCD\x09\x35\xC5\x96\xA5\xB0\x11\xF8\x8A\xD4\xCF\xCA\xA1\x13\x9F\x80\x05\x10\x3A\x47\xAB\xD1\xCA\xA6\x11\x7C\x97\xD0\xD2\x31\xC7\x13\xD2\x8B\x14\x4F\x8F\x98\xD2\xCC\x46\x31\xBB\xD4\x9D\xDB\xC8\x00\x0D\x13\xD3\x48\x34\x48\x05\x0A\x3A\xC8\x9B\x87\xD5\xCF\x84\x30\xD1\x21\x83\xD3\xD6\x41\x12\x1D\xC7\x4A\x34\x4F\xC8\x83\x8E\xA1\xC5\x57\x99\x9D\x98\x05\xDE\x24\x86\x68\x25\x40\xF9\x92\x78\x71\xAF\x93\xA1\x36\xC9\xD9\x3C\xB6\xCE\x6F\x43\x92\x7A\x63\x28\x38\xD8\x22\xFB\x26\x89\xEB\x68\x24\x6C\x00\x06\x6D\x21\xA1\x23\xDD\x7D\xAD\x36\xA4\x37\x3A\xA7\x3F\xAF\x94\xA8\xD4\x2D\x5E\x6A\x7E\x76\x68\xB6\xF0\xD1\x24\x79\xF5\xDE\xDC\x43\xB8\xDF\x40\x52\xA7\xDF\x7A\xA2\x8C\x9E\x5E\x9D\x99\x42\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Int",
			L"_IntItem",
			L"_Item",
			L"Module",
			L"_Item_LRI_Isolated_3",
			L"_Item_LRI_Isolated_4",
			L"_IntItem_LRI_Original",
			L"_Item_LRI_Original",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Int] BEGIN ",
			L"[1][_Int] END [ENDING]",
			L"[2][_Int]< \"int\" @ >",
			L"[3][_IntItem] BEGIN ",
			L"[4][_IntItem] END [ENDING]",
			L"[5][_IntItem]<< !_Int @ >>",
			L"[6][_Item] BEGIN ",
			L"[7][_Item] END [ENDING]",
			L"[8][_Item]<< !_Int ( lri:(LRI__IntItem)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[9][_Item]<< !_Int @ ( lri:(LRI__IntItem)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[10][_Item]<< !_Item_LRI_Isolated_3 ( lri:(LRI__Item)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[11][_Item]<< !_Item_LRI_Isolated_3 @ ( lri:(LRI__Item)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[12][_Item]<< !_Item_LRI_Isolated_4 ( lri:(LRI__Item)->_Item_LRI_Original @ | lri:<skip> ) >>",
			L"[13][_Item]<< !_Item_LRI_Isolated_4 @ ( lri:(LRI__Item)->_Item_LRI_Original | lri:<skip> ) >>",
			L"[14][Module] BEGIN ",
			L"[15][Module] END [ENDING]",
			L"[16][Module]< _Item_LRI_Original @ { _Item } >",
			L"[17][Module]< _Item_LRI_Original { _Item @ } >",
			L"[18][_Item_LRI_Isolated_3] BEGIN ",
			L"[19][_Item_LRI_Isolated_3] END [ENDING]",
			L"[20][_Item_LRI_Isolated_3]< \"class\" @ >",
			L"[21][_Item_LRI_Isolated_4] BEGIN ",
			L"[22][_Item_LRI_Isolated_4] END [ENDING]",
			L"[23][_Item_LRI_Isolated_4]< \"class\" \"?\" @ >",
			L"[24][_Item_LRI_Isolated_4]< \"class\" @ \"?\" >",
			L"[25][_IntItem_LRI_Original] BEGIN ",
			L"[26][_IntItem_LRI_Original] END [ENDING]",
			L"[27][_IntItem_LRI_Original]<< !_Int @ >>",
			L"[28][_IntItem_LRI_Original]lrp:(LRI__IntItem) @",
			L"[29][_Item_LRI_Original] BEGIN ",
			L"[30][_Item_LRI_Original] END [ENDING]",
			L"[31][_Item_LRI_Original]< _IntItem_LRI_Original \",\" @ >",
			L"[32][_Item_LRI_Original]< _IntItem_LRI_Original \".\" @ >",
			L"[33][_Item_LRI_Original]< _IntItem_LRI_Original @ \",\" >",
			L"[34][_Item_LRI_Original]< _IntItem_LRI_Original @ \".\" >",
			L"[35][_Item_LRI_Original]< _Item_LRI_Original \"?\" @ >",
			L"[36][_Item_LRI_Original]< _Item_LRI_Original @ \"?\" >",
			L"[37][_Item_LRI_Original]<< !_IntItem_LRI_Original @ >>",
			L"[38][_Item_LRI_Original]<< !_Item_LRI_Isolated_3 @ >>",
			L"[39][_Item_LRI_Original]<< !_Item_LRI_Isolated_4 @ >>",
			L"[40][_Item_LRI_Original]lrp:(LRI__Item) @",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge9_PmLoopTokens, ModuleParserStates, PrefixMerge9_PmLoopAstInsReceiver>(&PrefixMerge9_PmLoopTokenDeleter, &PrefixMerge9_PmLoopLexerData, &PrefixMerge9_PmLoopModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge9_PmLoopTypeName((PrefixMerge9_PmLoopClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 6, -1, 6, 6, 6, 6, 6, 6, },
			{6, 1, -1, 6, 6, 6, 6, 6, 6, },
			{-1, -1, 2, -1, -1, -1, -1, -1, -1, },
			{6, 6, -1, 3, 6, 6, 6, 6, 6, },
			{6, 6, -1, 6, 4, 6, 6, 6, 6, },
			{6, 6, -1, 6, 6, 5, 6, 6, 6, },
			{6, 6, -1, 6, 6, 6, 6, 6, 6, },
			{6, 6, -1, 6, 6, 6, 6, 7, 6, },
			{6, 6, -1, 6, 6, 6, 6, 6, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module>(tokens, this, codeIndex);
	}
}
