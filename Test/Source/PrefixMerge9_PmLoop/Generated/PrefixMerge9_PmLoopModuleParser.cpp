/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoopModuleParser.h"

namespace prefixmerge9_pmloop
{
	void PrefixMerge9_PmLoopModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1593; // 12372 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 57;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x54\x30\x00\x00\x31\x06\x00\x00\x05\x00\x01\x82\x80\x08\x03\x82\x81\x82\x06\x89\x82\x83\x0A\x86\x02\x85\x05\x0A\x91\x0A\x94\x0A\x80\x0E\x84\x10\x0A\xFC\x4A\x9F\x7C\x8D\x8C\x8E\x85\x00\x1E\x9E\x80\x92\x95\x8C\x90\x90\x01\x1B\xA5\x9F\x74\x93\x95\x97\x92\x2F\xA2\xB1\x83\x9A\x90\x99\x9A\x99\x37\xB4\x89\x8B\x9C\x91\x9E\x92\x85\x29\x89\x81\xA6\x8C\x9B\x9B\x9F\x9D\x2E\xBE\x9F\x8A\xAD\x98\xA6\x9A\xA7\x38\xD0\xBA\x84\xA9\xA1\x86\x00\xA0\x4C\xC6\x8B\xB2\xA7\xA4\xAB\xA6\xAF\x51\xE0\x93\xA3\x85\xA1\xAE\xB2\xAE\x5B\x86\x8C\x82\xA7\xB2\xB1\xAE\xB2\x55\xEE\xA9\xB0\xBF\xAC\xB9\xB0\xBB\x63\x82\xA5\xA9\x84\x00\xAD\x84\x80\x6C\xE8\x8D\xB2\xB3\xC0\xBF\xB6\xBD\x71\x86\xF3\xA8\xC5\xBC\xC7\xBA\xC7\x79\x81\xBB\xA4\xC0\x96\x85\xC0\xCA\x6D\x8A\xC5\xD0\xC7\xC2\xC9\xC4\xCE\x8B\x9E\xCD\xC2\xDF\xC4\xD1\xC9\x90\x9F\x81\x87\x1E\xB6\x80\x86\x83\xA1\x9A\xA0\x89\x0C\xD1\xD9\xCC\xD1\xCD\xA6\x9D\xE8\xC3\xDB\xDD\xD1\xDF\xD3\x93\x83\x8A\x14\xD2\x80\x8B\xCB\xDA\x82\xDA\xB8\xDF\xDA\xD9\xE3\xDA\xE5\xD0\xB6\xF9\xC1\xD0\x04\x04\xE3\xE9\xCB\xCE\xD8\xF1",
			"\xE9\xE2\xE8\xE6\xEA\xDA\xDF\xD9\xE9\xD0\x05\x07\xEA\x00\x0E\x67\xE1\xEF\x0A\xF4\xF1\xF1\xF7\xEE\xF1\xFC\xC1\xF0\x0F\xF2\x89\xE3\x02\x92\x2D\xF3\xF2\xFE\xDC\xF8\xDE\x13\x3B\x7E\x7D\x7F\xC0\x44\x8D\x72\x81\xE0\x48\x83\x78\x7F\xBC\x54\x48\x7F\x76\xDE\x7F\x73\x80\x83\x13\x95\x85\x80\x6F\x15\x02\x87\x86\x85\x07\x94\x8B\x87\x87\x1D\x9C\x89\x80\x6F\x16\x1A\x81\x88\x88\x23\xA2\x8B\x82\x6F\x17\x26\x89\x88\x8A\x2B\xB0\x8C\x74\x66\xDD\x49\x46\x47\x83\x00\x19\x0A\x43\x55\x35\xB4\x8E\x8C\x72\x3F\x8F\x71\x86\x82\x33\x83\x4B\x06\x8B\x31\xA7\x8A\x93\x8B\x4B\x8B\x7C\x04\x92\x45\x82\x9D\x8C\x90\x54\x92\x91\x90\x84\x53\x82\x4D\x04\x94\x43\x9E\x8D\x91\x94\x58\x86\x4E\x04\x97\x09\x5F\x04\x9B\x95\xE2\x60\x99\x9A\x77\x18\x78\x82\x86\x8C\x5D\xAA\x8A\x99\x78\x21\x27\x72\x0B\x8E\x71\xB0\x99\x95\x98\x55\xBC\x96\x95\x9F\x6B\x89\x44\x0B\x99\x03\x65\x07\x7A\x09\x84\xBF\x9A\xA1\x40\x27\x09\xA1\x40\x0A\xE7\x69\x0E\xA1\xA0\x68\xB7\x18\x9C\x5F\x4C\x40\x64\x60\x4F\x6B\x5B\xAB\x48\x8F\x06\x7D\x52\x62\xA8\x9E\xA5\x4A\xA6\x66\x9C\x8C\x5C\x4C\xA8",
			"\x27\x77\x6D\xA4\xAA\x9F\x8A\x44\xAA\x66\xA7\xB7\x6C\x4D\xAD\xD8\x7C\x4B\x6A\x60\xA9\xBC\xA1\xAE\x55\x4C\x6E\x60\xAD\x49\x96\x65\xA2\x48\xAE\xE2\x7A\xAA\xAB\x4A\xAF\xB6\xAF\xAE\x5A\xC1\x8B\xB4\xB2\xB4\x22\x73\xAE\xB2\xA9\xD4\x9E\x4D\xB1\xAE\xCF\xAD\xA8\x77\xB6\xC9\x9D\xB2\x42\xB5\xD8\x48\xBC\x4F\xAD\xD9\x9D\x4B\xAE\xB1\xDA\xA9\xBC\x44\xAB\x02\x70\x67\x6C\xBC\x01\x74\xB2\x7A\xB0\xD7\xA2\x45\xB3\xB0\xC7\xAE\xBF\x3F\xBA\xFC\xAD\xBE\xAD\x49\xF6\xB2\xB8\x76\xBD\xE0\xBC\x48\xBC\xB7\xD3\x83\xCD\xBE\xC3\x1E\x66\xB7\xB9\x49\x00\xF9\xB2\xC0\xBB\x1D\x45\xC1\xB4\xC4\x1D\x73\x6E\xB7\x6D\x12\xD3\xCE\x44\xB9\xE1\x98\xBC\xC4\x47\x15\xCC\xC2\x49\xC2\x22\xDE\x4A\xC6\x60\x0B\xE5\xC2\x4A\xC7\x1F\xE2\x7C\xC9\xCB\xEF\xB5\xC5\xBA\xBF\x29\xF2\xC7\xC5\xC0\x19\xC8\x91\xCC\xCE\x1D\xFA\xC6\xCE\xBF\xF6\xA4\xCB\xAA\xD1\xE8\xA7\xCF\x3F\xCD\x38\xC9\xDC\x52\xD2\x44\xFF\x31\xC8\xCE\x50\xED\xC6\xBE\x72\xF6\xB6\xBD\xAC\xC6\x39\xD8\xA2\x60\xC2\x4C\x59\xD2\xCA\xD4\x82\x57\xDD\xCA\xDA\x22\xD4\xD4\xD0\xDB\x13\xEF\xC4\x62\xD9\x71\xCC\xD2\xB9\x40\x06",
			"\xE2\x7D\xD5\xD9\x48\xF2\xAC\x52\xDC\x9A\x64\xD2\x60\xDD\xE7\xA8\xD4\x60\xDC\xE7\x84\xEB\xD2\xCE\x5F\xC0\xD1\xD9\xA8\x99\xBE\xBA\xE3\xDD\x27\x4D\xE6\xC5\xD0\x62\xC4\x6E\xD8\xCE\x9B\xED\xCD\xE5\xDB\xFE\x9F\xE3\xC4\xCD\x1F\xFC\x42\xEB\xB9\xA4\xDE\xBC\x4F\xBE\x97\xDC\x4C\xEA\xCA\x1E\x69\xED\xA8\x4F\x8D\xBA\xC9\xDE\xE0\xD0\x99\xE3\x40\xB2\xAF\xC0\x0D\xCD\xEF\x3D\xF1\xC2\xEC\x00\x79\xC2\xF7\xA6\x41\xC3\x49\x46\x72\x41\xD6\x49\x49\xF2\x41\xE6\x4E\xFA\x41\xCF\xCB\xC3\x4D\xCD\xF3\xC8\xD3\xFA\x41\xF4\xD9\xC9\x43\xF1\xDE\xC3\xF6\xB9\x78\x8E\xE3\xC6\x46\xBC\x7B\x3A\xC8\xB0\x48\xE1\x20\x64\xCF\xF3\xC7\xEC\xC6\xD3\xF3\xFA\x0A\x6C\x17\x79\xEF\x31\xF4\xF9\x41\x1B\xE7\x64\xC5\x7E\xCE\xE0\x4E\x0F\x79\x20\x25\x7C\xF8\x4A\x27\x0D\xE7\x3D\x64\xF7\x06\x89\x20\x38\x37\x7A\x21\x77\x46\x6A\x42\x71\x09\x80\x85\x28\x7D\x66\xE0\x52\x0F\x79\x76\x53\x04\x09\x8A\x23\x0E\x03\x8A\x21\x89\x00\x8E\x3A\x92\x63\x4C\x84\x7B\x40\x00\xB2\x4F\x4A\x66\x7B\x74\x0F\x3C\xC8\x5B\x49\x0B\x8A\x25\x0F\x0D\x8A\x25\x83\x1E\x86\x22\x1D\x67\x3A\x04\xA3\x5E\x6C",
			"\x3C\x12\x99\x6F\x9B\x3A\x30\x71\x45\x67\x21\x6F\x42\x84\x4A\x42\x60\x5F\x86\xDE\x20\x23\x6F\x29\x88\x26\x42\x48\x57\x74\x09\xA4\x65\x89\x72\x4D\x22\x42\x01\x41\x8A\x2D\x80\x59\x85\x48\x9E\x8A\xF9\x5E\x30\x25\x98\x58\x8F\x34\x45\x81\x21\xCC\x3D\x61\x3C\x90\x2F\x79\x5E\x79\x5A\x37\xF0\x1A\x04\x8D\x87\x22\x88\x50\xE0\x40\x7E\x42\x47\x4D\x8B\x84\x37\x3E\x20\xBD\x61\x3C\xC9\x79\x6F\x8C\xD5\x35\x89\x21\x2D\x5F\x88\x9A\x61\x35\x7A\x81\x1C\x88\x4D\x20\x3A\x46\x22\x80\x58\x59\xBC\x4D\x95\x5E\x87\x86\x20\x1F\xE3\x89\x85\xDE\x79\x6B\x81\x02\x38\x78\xA0\x20\x22\x87\xD7\x31\x8C\x3A\x05\x82\x20\x1D\xFD\x82\x4C\xED\x69\x85\x67\xE2\x7B\x8D\x26\x85\x5E\x94\x34\x61\x7E\x82\x0A\x22\x96\x11\xA0\x2C\x05\x49\x74\x38\x97\xAC\x83\x21\x0B\x0A\x23\x68\x25\x89\x27\x7F\x06\x2F\x93\x28\x8A\x25\x06\x62\x9E\x3F\x92\x00\x00\x5C\x32\x83\x27\x8C\xDD\x20\x25\x07\xCE\x89\x85\x2A\x81\x20\x5D\x3F\x83\x22\x99\xBB\x8A\x21\x11\x3E\x94\x3C\x70\x81\x22\x3F\xC1\x82\x22\x11\x64\x9D\x41\xE3\x4B\x99\x21\x47\x0E\x9E\x11\xDE\x90\x8F\x84\x23\x86\x20\x19\x49",
			"\x9D\x40\x49\x02\x9E\x3F\x7E\x98\x00\x89\x98\x9F\x2C\xC6\x83\x88\xEA\x37\x41\x99\x03\xA1\x23\x12\x7D\x94\x53\x81\x28\x9E\x94\x36\x4C\xA1\x1B\x8A\x2D\x09\x25\x9E\x3E\x9C\x00\x16\x5F\x41\xD4\x99\xA0\x00\x10\x0E\xA2\x29\x99\x9C\x27\x86\x2B\x94\x83\x12\x90\x92\x0A\x33\x08\x3B\xBE\x3B\x93\x81\x27\xA7\x9D\x06\x34\x0B\x4A\xA7\x3C\x84\x92\x9D\xA5\xA0\x49\x54\x39\x29\xC6\x47\xA6\x63\xA8\x4F\x84\x26\xBD\xA1\x15\x12\xAE\xA7\x81\x26\x49\x21\x2F\xA1\x9D\x0A\xB8\xA0\x25\x36\x48\xA2\x9F\x00\x17\x08\x48\xE8\x41\xA0\x8E\x89\x26\xA9\x56\xA8\xA5\x42\x5A\x0E\x6F\x14\x89\xAC\x9B\x17\x24\xAA\x13\x8A\x2E\x0B\xAE\xA8\x4D\xA6\x03\x20\x5D\x04\x86\x25\x4E\xA8\xA2\x0B\xA6\xBA\x2B\xAF\x37\x9D\xA3\x0C\xB1\xBE\x37\xA8\x23\xA3\x22\x5C\x82\x25\x9A\xEA\x20\x25\x0C\x76\xA7\x35\x5B\xF9\xA2\x20\x1C\xAC\xAD\xA3\x67\x10\xAC\x75\x06\xB3\xAE\xA8\xA8\x09\xB0\xBA\x2C\xB0\x5F\xB7\x80\xB2\xBF\x8A\x22\x0D\x95\xAB\x3A\xA1\x13\x92\x21\x41\x4C\x70\x88\xE7\x5E\x81\x12\xB0\x23\xB5\x92\x39\x6F\x24\x7D\xAC\x25\x6A\xFF\x19\x8C\x4C\xB8\x41\xA3\x12\x8C\x7E\xE2\x60",
			"\x57\x24\xDA\xBA\x78\xA2\x09\x39\x8D\xFB\x59\x27\x75\x7F\x24\x67\x24\x88\x6A\x86\xAA\x15\x90\x24\xF5\x55\x31\x2B\x81\x8B\x77\x00\xBD\x7B\x6A\x4F\x87\xBC\xB3\x02\x3D\x74\x6D\xBD\x77\x24\x36\xAE\x26\xBA\x2B\x3D\x65\x75\xB9\x89\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Int",
			L"_IntItem",
			L"_Item",
			L"Module",
			L"_Item_LRI_Isolated_2",
			L"_IntItem_LRI_Original",
			L"_Item_LRI_Original",
			L"Module_LRI_Original",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Int] BEGIN ",
			L"[1][_Int] END [ENDING]",
			L"[2][_Int]< \"int\" @ >",
			L"[3][_IntItem] BEGIN ",
			L"[4][_IntItem] END [ENDING]",
			L"[5][_IntItem]<< !_Int @ >>",
			L"[6][_Item] BEGIN ",
			L"[7][_Item] END [ENDING]",
			L"[8][_Item]<< !_Int ( lri:(LRI__IntItem)->_Item_LRI_Original @ ) >>",
			L"[9][_Item]<< !_Int @ ( lri:(LRI__IntItem)->_Item_LRI_Original ) >>",
			L"[10][_Item]<< !_Item_LRI_Isolated_2 @ >>",
			L"[11][Module] BEGIN ",
			L"[12][Module] END [ENDING]",
			L"[13][Module]<< !_Int ( lri:(LRI__IntItem)->Module_LRI_Original @ ) >>",
			L"[14][Module]<< !_Int @ ( lri:(LRI__IntItem)->Module_LRI_Original ) >>",
			L"[15][Module]<< !_Item_LRI_Isolated_2 ( lri:(LRI__Item)->Module_LRI_Original @ ) >>",
			L"[16][Module]<< !_Item_LRI_Isolated_2 @ ( lri:(LRI__Item)->Module_LRI_Original ) >>",
			L"[17][_Item_LRI_Isolated_2] BEGIN ",
			L"[18][_Item_LRI_Isolated_2] END [ENDING]",
			L"[19][_Item_LRI_Isolated_2]< \"class\" @ >",
			L"[20][_IntItem_LRI_Original] BEGIN ",
			L"[21][_IntItem_LRI_Original] END [ENDING]",
			L"[22][_IntItem_LRI_Original]<< !_Int @ >>",
			L"[23][_IntItem_LRI_Original]lrp:(LRI__IntItem) @",
			L"[24][_Item_LRI_Original] BEGIN ",
			L"[25][_Item_LRI_Original] END [ENDING]",
			L"[26][_Item_LRI_Original]< _IntItem_LRI_Original \",\" @ >",
			L"[27][_Item_LRI_Original]< _IntItem_LRI_Original \".\" @ >",
			L"[28][_Item_LRI_Original]< _IntItem_LRI_Original @ \",\" >",
			L"[29][_Item_LRI_Original]< _IntItem_LRI_Original @ \".\" >",
			L"[30][_Item_LRI_Original]<< !_Item_LRI_Isolated_2 @ >>",
			L"[31][_Item_LRI_Original]lrp:(LRI__Item) @",
			L"[32][Module_LRI_Original] BEGIN ",
			L"[33][Module_LRI_Original] END [ENDING]",
			L"[34][Module_LRI_Original]< _Item_LRI_Original @ { _Item } >",
			L"[35][Module_LRI_Original]< _Item_LRI_Original { _Item @ } >",
		};
		return results[index];
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixMerge9_PmLoopTokens, ModuleParserStates, PrefixMerge9_PmLoopAstInsReceiver>(&PrefixMerge9_PmLoopTokenDeleter, &PrefixMerge9_PmLoopLexerData, &PrefixMerge9_PmLoopModuleParserData)
	{
	}

	vl::WString ModuleParser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(PrefixMerge9_PmLoopTypeName((PrefixMerge9_PmLoopClasses)classIndex));
	}

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module>(tokens, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(input, this, codeIndex);
	}

	vl::Ptr<prefixmerge9_pmloop::File> ModuleParser::ParseModule_LRI_Original(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixmerge9_pmloop::File, ModuleParserStates::Module_LRI_Original>(tokens, this, codeIndex);
	}
}
