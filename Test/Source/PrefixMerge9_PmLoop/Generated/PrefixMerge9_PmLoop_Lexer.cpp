/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixMerge9_PmLoop
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge9_PmLoop_Lexer.h"

namespace prefixmerge9_pmloop
{
	bool PrefixMerge9_PmLoopTokenDeleter(vl::vint token)
	{
		switch((PrefixMerge9_PmLoopTokens)token)
		{
		case PrefixMerge9_PmLoopTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* PrefixMerge9_PmLoopTokenId(PrefixMerge9_PmLoopTokens token)
	{
		static const wchar_t* results[] = {
			L"CLASS",
			L"INT",
			L"COMMA",
			L"DOT",
			L"QUESTION",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge9_PmLoopTokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge9_PmLoopTokenDisplayText(PrefixMerge9_PmLoopTokens token)
	{
		static const wchar_t* results[] = {
			L"class",
			L"int",
			L",",
			L".",
			L"?",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge9_PmLoopTokenCount ? results[index] : nullptr;
	}

	const wchar_t* PrefixMerge9_PmLoopTokenRegex(PrefixMerge9_PmLoopTokens token)
	{
		static const wchar_t* results[] = {
			L"class",
			L"int",
			L",",
			L".",
			L"/?",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < PrefixMerge9_PmLoopTokenCount ? results[index] : nullptr;
	}

	void PrefixMerge9_PmLoopLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 193; // 1030 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 193;
		static const vl::vint dataSolidRows = 0;
		static const vl::vint dataRows = 1;
		static const char* compressed[] = {
			"\x06\x04\x00\x00\xB9\x00\x00\x00\x0E\x00\x01\x8F\x01\x84\x81\x80\x81\x80\x09\x04\x89\x81\x8A\x04\x81\x87\x80\x0D\x04\x91\x81\x80\x14\x81\x8B\x80\x2C\x04\x99\x81\x8E\x14\x81\x8F\x80\x3F\x04\xA1\x81\x81\x34\x81\x93\x80\x63\x04\xA9\x81\x89\x34\x81\x97\x80\x6C\x04\xB1\x81\x8E\x34\x81\x9B\x80\x73\x04\xB9\x81\x84\x3C\x81\x9F\x80\x06\x04\x81\xA0\xA2\xA4\x83\x00\x82\x04\x04\x85\x04\x8F\x7D\xA7\x7F\x00\x04\x82\x0C\xAE\xA4\xAD\xAA\xAB\xAB\x58\xD9\x9A\xB7\xA7\x03\xAB\xAD\xAF\x60\xE1\x98\xA8\x0E\xAA\xB2\xB3\xB3\x68\xE9\xAA\xAB\xBC\xB5\xB4\xB5\x85\x00\x70\xB2\xA5\xBE\xB5\xB9\xB5\x87\x00\x76\xBA\xBA\xBB\x05\xB3\xB8\x84\x0A\xF4\xBB\xA3\xC4\xC4\x06\xC0\xC2\x88\x89\xE7\xB3\x89\xBA\xC6\xC6\x3C\x2A\x07\x85\x80\x03\xA4\xC9\xA8\xA3\x48\xCA\x85\xA4\xA1\x83\xA4\xCE\x00\x50\x9F\xC5\x80",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
