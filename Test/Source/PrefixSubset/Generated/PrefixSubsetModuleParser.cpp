/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubsetModuleParser.h"

namespace prefixsubset
{
	void PrefixSubsetModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2921; // 26495 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 105;
		static const vl::vint dataSolidRows = 11;
		static const vl::vint dataRows = 12;
		static const char* compressed[] = {
			"\x7F\x67\x00\x00\x61\x0B\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x81\x1A\x85\x12\x85\x16\x0A\xB3\x0A\x86\x12\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\x91\x9E\x90\x93\x18\x17\x91\x9A\x42\x19\x14\x99\x7B\x06\x66\xA0\x9E\x99\x97\x6F\x9F\x90\x9D\x77\x1C\x2A\x98\x7E\x07\x6D\x9D\x7F\x06\x86\x20\x0A\x46\x5F\x84\x46\x84\x80\x96\xA0\x81\x80\xAC\x6F\x08\x1A\xA4\x09\x9E\x9C\x8C\xA2\x9D\x90\x00\x16\x4B\x91\x42\x09\x7E\x84\xAA\x96\xA3\x2E\xB3\x9D\xA2\x42\x29\x1A\x8A\x09\xA5\x86\xA7\x91\xA9\x9C\x98\x83\xA9\x78\x46\x92\x8F\xA9\xA7\xA6",
			"\xA3\x9A\xA5\xA9\xA1\x21\xB0\xAC\x86\x0B\x8B\xAF\xA7\xA6\xA5\xA2\xB8\x7F\x09\xAD\xB8\xB8\x60\x0E\x86\x31\x20\xA1\xAF\xAD\xAD\xAC\xA3\xB0\x6D\x34\x1A\x85\x0E\xB0\x4F\xB2\xAC\x93\xAA\xB6\xB9\xAC\x84\x0E\xBC\x85\xB1\xB4\x6E\x39\x15\xB7\xB0\xA9\xBD\xAE\xAD\xB6\xB1\x1C\xBA\x0A\xB5\xB3\xC4\x9B\xBE\xB6\xB5\x0A\x7B\x03\xBB\xB3\xA6\xA6\xB0\xB8\xBB\xCE\xA3\x91\x40\x0F\xEB\xB2\xBA\xA9\xBB\x03\x7D\x05\xBF\xBD\xF1\xBC\xB5\xB8\xB9\xD2\xB0\xBF\xBE\x40\x3E\x1A\x8F\x0F\xBE\xD0\xAB\x70\x10\xC2\xF8\x82\x41\x10\xC3\xFD\x89\xC9\x42\x10\xFB\x83\x1A\x84\x11\x10\xC3\xC6\xBE\xC4\xEE\x97\xB7\xBA\x41\x45\x1A\x86\x11\xC6\x01\xDB\xCD\xC2\xBD\x47\x24\xCC\xB4\xBA\x2C\xC6\x48\x12\x86\x49\x2A\xCF\xC4\xC0\x2B\xDD\xCF\xB7\x48\x4A\x32\xCF\xBA\xC9\xBA\x4B\x1A\xCE\xC7\x3B\xFE\xB5\xCA\xD0\x35\xF4\xCD\x74\x13\x3F\xF7\xCB\x79\x13\xFB\x8E\x1A\x87\x13\x49\xED\xC6\xD1\xD0\x1C\xD3\xD0\xD3\xD5\x0A\x50\x11\xD6\x41\x51\x1A\x82\x17\xD6\x56\xCA\xD2\xD6\xC0\xB4\x53\x10\xD8\x93\x54\x36\x9C\x86\x15\x6A\xE4\xD5\xD2\xDB\x33\xF0\xD4\xD7\xC9\x00\x18\x17\xD8\xCF\x1A",
			"\xC4\xD1\xDE\xBD\x59\x37\xDA\xDF\xDC\x11\xF4\xDE\x39\xDB\x01\x7D\x55\xB0\x4D\xC2\x46\x46\x76\x72\x98\x7F\x54\x4D\xE3\xAD\x74\x4F\x9E\x41\x93\xED\x69\xE3\x40\x90\xF2\xD8\xE2\x42\x86\xFF\x59\xE5\x78\x8F\xD8\x52\xE4\xB3\xCA\x57\xEB\x40\x56\x7A\x60\x54\x4D\x7F\x02\x5D\xE3\xD7\xE6\x09\x4B\xE1\x7B\xE7\xE4\x6B\xEB\xA0\xEB\x01\x52\x5D\x69\xEA\x8E\xEB\x48\xEC\x00\xAE\xDA\xEB\x4A\xE9\xD5\x58\x5F\xEE\xEE\xCA\x47\xF8\x54\xED\x34\x61\xEA\xEB\x4A\xBC\xD1\xEB\x48\xF3\xCD\xE8\x41\xF6\x72\x34\x57\xF0\xE8\xF4\xA2\xDC\xFF\xF2\xF5\xDD\xE0\xFF\xF5\x49\xDA\xF5\xEE\xF5\xEF\x28\x7F\xE1\xF0\xDE\xD5\xDF\x44\xF0\x41\xA8\xE1\xF5\x4A\xF2\x60\x65\xFD\xFB\xFC\x8B\xB6\xF7\xFC\x48\xFA\xFB\xFF\x3E\xFA\xDF\x50\x76\xE2\x71\x73\x7D\x90\x34\x7F\x2F\xFD\x7B\x7F\x01\xBB\x72\x7F\x90\x09\x87\x7E\x00\x87\x73\xF0\x0D\x24\x80\xF4\x78\x79\x55\xD9\x6D\x80\x48\x0B\x8A\x39\x07\xAD\x7E\x83\xD5\x71\x82\xBB\x02\x83\x20\xD9\x64\x3C\x7A\xFE\x68\x87\xFE\x15\x72\x21\xDF\x64\x82\x20\x20\x9F\x1E\x0A\xF7\x7C\x85\x80\x33\x80\x24\xEF\x6A\x03\xF2\x1A\x8F\x23\x1A\x80\x00",
			"\x79\xE1\x2F\x7E\x0B\xD3\x7C\x86\x19\x85\x8E\x87\x43\x88\x27\xFB\x31\x87\x87\xEA\x7E\x85\x89\xFF\x19\x87\x0E\x85\x80\x24\x1F\x80\x8C\x3C\x42\x93\x8A\x05\xA1\x20\x8B\xD1\x49\x21\x89\x25\x2B\x8A\x16\xD2\x78\x25\x27\x98\x2A\x8A\x60\x3D\x8B\x4A\x56\x87\x8C\xC2\x67\x85\x88\x6A\x85\x8E\x1B\xAF\x81\x20\x26\x87\x8A\x21\x50\x88\x8E\xE7\x77\x88\x83\x09\x9F\x8B\x8C\xD8\x64\x88\x15\xBD\x83\x8E\x3F\x86\x26\x8E\x83\x9F\x1E\x19\xE0\x2A\x8F\xD6\x31\x8D\x24\x6C\x8C\x91\x21\xE2\x7B\x8A\xFE\x45\x89\x86\x19\x89\x92\x08\xAF\x76\x91\x12\x80\x93\x7B\x28\x2F\x92\x03\x97\x94\x95\x44\x98\x97\x7C\x64\x84\x7D\x11\x9B\x92\x78\x25\x94\x85\x7E\xA5\x95\x93\x47\x27\x94\x93\x54\xA3\x96\x94\xB1\x96\x96\x25\x9A\x9C\x73\x00\x9D\x97\x20\x15\x9A\x97\x2C\xB9\x91\x91\x5A\x85\x9A\x95\xB8\x89\x9A\x2C\xFF\x14\x97\x0B\x86\x23\x7D\x7F\x74\x8C\xFC\x69\x80\x8E\x3E\xB6\x26\x72\x8B\x42\x94\x48\x5A\x94\x91\x6B\x98\x9D\x8F\xC6\x80\x94\x32\xCB\x9D\x99\x5B\xA4\x9C\x98\xE2\x86\x9E\x30\xCC\x9B\x95\x5E\x92\x86\x95\xB1\x61\x9B\x31\xEA\x93\x9F\x5D\xA7\x9A\x99\xEB\x85",
			"\x9F\x06\xEE\x93\x85\x5F\x85\x7C\x9A\x89\x9C\x9A\x22\xF9\x2D\x8D\x84\x2B\x30\xA0\xCB\x82\xA2\x0F\xB1\x8F\x7D\x83\x88\x80\x9D\xE6\x61\x9D\x44\xE3\x99\x9E\x88\xBE\x7B\x98\xBC\x80\x9C\x45\xF5\x98\xA3\x65\x9C\x81\x3C\xFA\x9D\xA1\x45\x99\xAF\x98\x5F\xB0\x9B\x80\xB0\x98\x9C\x47\xEC\x9A\xA5\x74\xB6\x9B\x9D\xAC\x8C\x7D\xFB\x6F\x76\x84\xE7\x49\xA5\x88\xD0\x97\xA1\x14\x93\x91\x8C\x9E\xA1\x21\xA7\x17\xA0\xAA\xFF\x42\xAB\x7E\xA2\xB7\x7E\xA8\xED\x68\xA9\xF5\x4A\xAD\x79\xF7\x7E\x82\x9A\x4F\xBE\x9E\x4D\x52\x98\x31\xF7\x6F\x7C\x26\x4C\xB8\xA9\x11\xA3\x26\x6E\x6F\x82\x27\x8A\x23\x3F\x77\xEF\x0B\xAC\x9E\xCC\x64\x75\x8E\x65\xA2\x22\x43\xDE\xA6\xAB\x57\x9E\xA8\x00\x3A\x89\x21\x23\x82\x23\xAF\x7F\xAF\xAA\x3E\x72\xAA\x20\x5E\x86\x2F\x7D\xBD\x9E\x97\xAD\x00\x14\x77\x5A\xDE\x90\x9A\xDA\x50\x9B\xB0\xD7\x9B\x3D\x42\x65\x75\xB0\x85\x0A\xB7\x90\x69\xAA\x34\x60\x80\x0D\x00\x82\xBC\x28\x8F\x0A\x35\xB3\x62\x91\xB0\x00\xC4\xB6\x24\xB1\x98\xBB\xB3\x65\x86\xA3\xB3\x00\x63\xB6\x20\xB4\x66\xB5\x49\xA4\xB0\xB0\x06\x50\xB7\xB4\x66\xA9\x21\x86\x79",
			"\xA2\xB6\x85\x2F\x7B\xB6\x28\xAF\xAE\x6B\x83\x20\xB4\xD6\xAF\xAC\x45\x80\xAF\x7F\x48\x3E\x8D\x1A\x0D\x57\x8A\xB3\x93\xA9\x22\x37\x1A\x4F\x76\xD5\x89\xBB\x20\xDF\x1A\x42\x67\xBA\x40\xB0\x1F\xA0\x1A\x43\xB4\x72\x07\x64\xBE\x81\x1C\x0D\x50\x9C\x05\xDB\xAA\x22\x38\x1A\x4E\x86\x44\x55\xBA\x21\xE3\x06\xBA\x42\x0A\x57\xBD\x84\x24\x1C\xB9\x0A\x3D\x4D\x7B\x86\x25\x1C\xF5\x89\x23\x4F\xF3\xA3\x22\x39\x1A\x45\x7D\x34\x4F\xBE\x20\xE7\x1C\xBC\x9A\x7F\xB6\x20\x74\x12\xBA\x21\x9F\x44\xC2\x40\x69\x17\xC1\x84\x09\xC2\xC1\x00\x0A\x1C\x76\x8A\x2F\x56\x08\xC0\x03\x1D\x0D\xC6\x23\xB2\x79\xB2\x20\x76\x02\xC1\x21\x36\x01\xBD\x42\x6D\x1A\x42\x2D\x13\xB0\x8C\xB4\x2E\x53\x53\x70\xB9\x3D\x8F\x8F\x56\x51\x91\x96\x67\x1F\xB0\xBC\x48\x47\x65\x7F\x77\xB4\x77\x8B\x78\x64\xA9\x3C\xAC\x7E\xB7\x3A\xEB\x25\x7E\x8E\xE6\x3E\x50\x13\x83\xCD\x5F\xBD\xB8\x3E\xA3\x71\xA3\x2A\xC7\xBB\x58\x9A\x51\xBA\x36\x8F\xB2\xC8\xB4\x9F\xB8\x36\x51\xC8\xA0\xC9\x42\x3B\xBD\x85\xC9\x97\x8D\xA1\xEB\x2E\x50\x70\x86\x27\xC9\xBC\x66\x86\xAF\x35\xCB\x3C\x75\xE4\xC2\x6D\xDC",
			"\x83\x27\xB1\x1C\x4E\x50\x91\x1A\xA3\x68\x34\xC1\x20\xC5\x57\xCB\x3E\x92\x4D\xC9\x20\x0B\x2E\x8F\x8A\xBF\x70\xCE\x40\x76\xCF\xC5\xF5\x25\x4C\xCE\xB8\x31\xC7\x9B\xCE\xCD\xC7\xF5\x3E\xBC\xCD\xE9\x22\xC9\x66\x8A\x2C\xC9\x38\xEB\x3A\x03\x7E\x6E\xBA\x40\x15\xD9\xCD\x35\x7E\x6C\xCB\x01\x33\xCE\x92\xEB\x35\x4E\x44\xFB\x68\x00\x63\xC3\x20\x6E\x96\xD9\x3D\x0E\x3E\x6B\xCD\x03\x29\xD5\xA7\xD4\xC1\x6D\x84\x22\xD3\x20\xB7\xD3\xD4\x87\x78\x42\xB4\xFC\x10\x9D\x7C\xB9\xD7\xCD\x98\xEB\x32\x04\xCE\xA7\x06\x8D\x26\x90\x9B\x9E\x83\x24\xD1\xF1\x0E\x55\x53\x33\xD8\x3E\xA6\xB9\x71\x22\x46\xE3\xD1\x3D\x2B\x16\xC9\x77\x20\xDF\x87\x6A\xD1\xDC\xD5\xF8\x28\x54\xE5\x14\xCE\x8D\x55\xDD\xCD\xCF\x0A\x27\xD3\xB5\xB4\xD2\x6F\x91\x3E\xC9\x21\xCD\xC4\xCB\x7A\x5A\xBF\xDA\x26\x70\xD7\xDC\x06\x2F\xDE\x41\x02\xD6\x5E\x47\x49\x5D\xDE\xF6\x4B\xD8\xBE\x83\x2A\xDE\x2D\xEB\xDC\x43\x21\xC9\x22\x0F\xD9\x50\xE0\x00\x05\xE2\x20\x3E\x96\x48\xBC\xC3\xD9\x3C\x75\x4D\xE3\x3C\x8F\xC6\xE3\x40\x12\xEB\xDE\x8A\xF8\x3A\x5F\x17\xE6\x3C\x9B\x0D\xEC\xE2\x8D\xFA\xD4\x49",
			"\x07\x6A\xE2\x42\x14\x6D\xE0\x57\xEA\xE1\x21\xEA\xC3\x23\x94\x0D\xD9\x3C\x8C\x66\xD1\x68\x31\xE2\x21\xA9\x87\xEC\x49\x90\x4D\xE1\x65\x37\xE3\x25\xCE\x81\x2E\xE4\x9E\xF6\x5F\x65\x0D\xF9\x65\xD0\xE9\xDA\x20\x5E\xC6\xEF\x51\x3E\x6D\xE0\xD3\x4B\xE9\x21\x8C\xC2\x23\xE8\x85\xC3\x6E\x4C\xDD\x36\xEB\x80\x25\xE7\xE4\x5B\xE0\x70\x6F\x18\xD9\x21\x99\xCF\xEB\x3C\x4E\x74\xE8\x7E\x64\xE6\x21\x9D\xE0\xDC\x43\x50\x6D\xE1\xD7\x6A\xE3\x20\xB6\xC3\x25\xE8\x6F\xEC\x4B\xD7\x0D\xE9\x6C\xBA\xC2\x26\xEE\x02\x2E\xE9\xDE\xF6\x55\x0A\x37\x97\x0B\x5F\x23\xE6\x22\xD9\x83\xFF\x51\xAE\x90\xD4\xDD\x01\x29\xF3\x40\x6E\xE0\xED\x47\x7D\x6D\xE1\x5B\x08\xF2\x42\x78\xE5\xF3\xF1\x1C\x0E\x8D\x5E\x1A\xF1\x42\x02\xFD\xF2\xF3\x1F\x0E\x8D\x61\x1B\x5C\xE5\x81\x2F\xE1\x7E\xED\xCD\xD6\x06\x3C\xF1\x40\x00\xFE\xF4\xAD\xFF\x6B\x24\xA4\xF1\xF2\xC7\xB0\xFC\xF6\x81\x38\xBA\xF1\xBB\xEC\x4A\x18\x7E\x6F\xF7\xC9\xC1\xFE\x5E\x63\x0E\x8D\x19\x7B\x55\xF8\x81\x32\xF1\xEB\xF8\x26\x0E\x1B\xE8\x0C\xF9\xA6\xC7\xFF\x51\x69\x0E\x8F\x1A\x7B\x52\xBE\xE0\xF4\xE0\x3F\x6C\x1E\x6D",
			"\xF7\xC6\xFF\xFA\x0E\x6D\x0E\x8D\x6F\x1C\xFB\xE6\xD7\xF3\x3C\x38\x2E\x8A\x0E\xEA\xE3\xF4\xFB\xE6\x33\x0E\x37\xB5\x0B\x5F\x14\x36\xD7\xFC\xBA\x36\x0E\x6D\xCB\x3B\xFC\x5F\x53\x11\xFE\x79\x5C\xE3\x18\x07\x67\x50\x00\x7B\x0E\x46\xF9\x7C\x67\x06\x16\x5E\x06\x15\x6C\xE5\x7C\x24\x7D\x0E\x37\xEC\x5F\x80\xFB\x7C\x1B\x7E\x0E\x37\x91\x26\x10\xC1\x60\x7D\x1C\x2F\x07\x07\x83\x1E\x0E\x86\x72\x01\x1B\x81\x24\x8E\x81\x4C\x22\x08\x96\x56\x10\x86\x0E\x46\x26\x80\x71\x0A\x17\x6C\xFA\x71\x81\xF6\x28\x08\x2B\x8C\x21\x28\x07\x83\x02\x12\x83\x06\x10\x6D\x67\x74\x37\x55\x3B\x83\x03\x83\x59\xE3\x1C\x08\x9C\x51\x09\x6E\x40\x5E\x34\x61\x10\x39\x83\x83\x3F\x8A\x1B\x93\x0A\x83\xF6\x21\x2C\xBD\x63\x10\x4D\x8C\x80\x8C\x73\x1E\x97\x0C\x59\x9C\x0E\x46\x1B\x6B\x5A\x3D\x8B\x11\x17\x84\x1B\x9E\x0E\x37\x3E\x83\x10\xD9\x64\x83\x8F\x2F\x09\x6E\x41\x0A\xFB\x2F\x60\x03\x17\x86\xA5\x71\x38\xFD\x20\x87\x02\x17\x85\x59\x80\x84\x74\x39\x86\x06\x1C\x83\x79\x84\x87\x79\x3A\x84\x06\x14\x29\x6A\x83\x1E\xA2\x0E\x37\x82\x88\x86\x63\x88\x1B\xA3\x0E\x46\xA5\x0B",
			"\x2F\xE2\x68\x6B\x8B\x8D\x1D\xA6\x02\x85\x8F\x22\x2E\x2F\x76\x10\x91\x83\x70\x73\x8C\x1B\xAA\x0C\x59\xAF\x0E\x46\x20\x7F\x5A\x06\x1B\x2B\x4E\x8F\x87\xBC\x11\x0B\x21\x86\x1E\x0F\x39\x89\x03\x16\x8A\x58\x8D\x89\xB4\x14\x0B\x96\x88\x0B\x6E\x46\x73\xA4\x83\x10\x15\x66\x10\xB4\x25\x88\xE6\x1A\x0B\x7E\x3B\x8B\x03\x14\x85\x4F\x8C\x1B\xBB\x0E\x46\xBD\x0B\x2F\xC4\x8F\x8A\x93\x82\x76\x43\x34\x6F\xBC\x8D\x8C\x23\x1E\x0B\x7E\x30\x8D\xC3\x82\x8D\x0A\x1F\x0B\x6E\x41\x0C\xFB\x2A\x11\xA7\x82\x8B\xB8\x12\x0C\x9C\x53\x1E\x48\x79\x8B\x02\x1E\x8D\x06\x11\x6F\x52\x6B\x1E\xC7\x0B\x8A\xBA\x18\x34\x0D\x78\x8E\x8B\x6E\x8B\xBA\x1A\x0C\xEE\x8C\x1B\x69\x71\x8B\x01\x12\x8F\x9C\x85\x7B\xF8\x1D\x0C\x96\x81\x0D\x6E\x4A\x35\xAE\x87\x8E\x43\x80\x58\xE3\x13\x0D\xA1\x56\x10\xD9\x0E\x46\x66\x3B\x84\x00\x0F\x85\x03\x1F\x6F\xC5\x84\x1B\xDB\x0E\x37\x09\x76\x10\x14\x98\x8A\xB4\x1C\x0D\x7E\x37\x03\x44\x84\x64\xCD\x36\x61\x01\x8E\x65\xC9\x50\x56\x65\x66\x12\x29\x91\x12\x60\x51\x56\x6A\x18\x67\xFB\x47\x62\x1A\x20\x00\xBF\x36\x13\x2E\x60\x00\x51\x60\x13",
			"\x39\x90\x49\xC9\x5E\x43\x36\x1E\x93\x23\x11\x43\x00\x08\x49\xE5\x35\x3E\x43\x96\x89\x47\x95\x85\xBC\x58\x94\xE5\x3E\x93\x37\x61\x94\x4C\x97\x80\x49\x9A\x8F\x68\x53\x59\x92\x63\x8E\x3A\x19\x55\xD0\x40\x56\xD0\x46\x13\x50\x41\x58\xA2\x39\x63\x97\x13\x93\x62\x9B\x90\x03\x10\x56\x65\x99\x10\xB4\x36\x13\x9E\x5E\x14\x6D\x94\x13\x9E\x50\x56\x71\x93\x12\x73\x9A\x10\x9E\x56\x13\x57\x5A\x13\x79\x92\x55\x60\x52\x5C\x24\x90\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[23][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[24][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[25][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[26][_LongType]< _LongType \"*\" @ >",
			L"[27][_LongType]< _LongType \"const\" @ >",
			L"[28][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[29][_LongType]< _LongType @ \"*\" >",
			L"[30][_LongType]< _LongType @ \"const\" >",
			L"[31][_LongType]<< !_PrimitiveShared @ >>",
			L"[32][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[33][_Expr0] BEGIN ",
			L"[34][_Expr0] END [ENDING]",
			L"[35][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[36][_Expr0]<< !_PrimitiveShared @ >>",
			L"[37][_Expr1] BEGIN ",
			L"[38][_Expr1] END [ENDING]",
			L"[39][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[40][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[41][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[42][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[43][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]<< !_Expr0 @ >>",
			L"[45][_Expr] BEGIN ",
			L"[46][_Expr] END [ENDING]",
			L"[47][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[48][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[49][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[50][_Expr]<< !_Expr1 @ >>",
			L"[51][Module] BEGIN ",
			L"[52][Module] END [ENDING]",
			L"[53][Module]<< !_Expr @ >>",
			L"[54][Module]<< !_LongType @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubsetTokens, ModuleParserStates, PrefixSubsetAstInsReceiver>(&PrefixSubsetTokenDeleter, &PrefixSubsetLexerData, &PrefixSubsetModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
