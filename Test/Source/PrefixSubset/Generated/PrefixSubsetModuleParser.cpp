/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubsetModuleParser.h"

namespace prefixsubset
{
	void PrefixSubsetModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3649; // 32784 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 65;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\x10\x80\x00\x00\x39\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x80\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC6\x42\x19\xC6\x63\x15\xEB\xC8\x00\x64\x0D\xE5\x1A\xE7\x2F\xCE\xE5\xDB\xE7\x66\x24\xE3\xCE\xE5\xA6\xFA\xA7\x19\xC6\x68\x0A\xE9\xE4\x87\x6A\x1A\x8B\x1A\xEC\x97\xCB\x7D\x1A\xEA\x3E\xDF\xEC\xEB\x78\x6E\x19\xCF\x18\xEF\xB8\x70\x1A\x85\x1C\x8D\xFC\x02\x56\x40\xFD\x42\x4D\x5D\xB0\x34\x4A\x0D\x40\x56\x98\x7F\x54\x4D\xF5\xAD\x74\x47\x9A\x41\xDB\xED\x62\xF5\x42\xD8\xE4\xD1\xF6\x42\xCF\xFF\x51\xF9\x78\xD7\xD8\x5A\xF6\xB8\xE4\x5F\xF6\x43\xF9\xE4\x7A\x50\x58\x4D\xCD\xC1\x45\xFA\xC0\xE3\xC9\x46\x76\x72\xF0\xF4\x44\xFF\xAF\xF5\x60\x03\xF2\x4A\x32\x7E\xEB\x6B\x21\x80\xF7\x62\x7F\x4A\x6E\x73\x21\xFD\x61\x39\x80\x03\x8F\x83\xAF\x7D\x7E\x7E\x94\x14\x85\x82\x21\x25\x81\xF6\x2B\x27\x82\x0C\x9F\x22\x83\xCA\x34\x24\x08\xE8\x7B\x25\x11\xA4\x3A\x84\xEA\x65\x85\x0A\xA8\x26\x84\x0F\x99\x83\x85\x25\x2D\x86\x0B\x9F\x28\x80\x7A\x79\x7E\x20\x0E\x91\x7C\x0C\xA1\x20\x82\xAC\x32\x83",
			"\x86\x3D\x80\x2F\x0F\xAE\x83\x88\x0F\xB5\x80\x7A\x0B\x93\x78\x58\x5D\x7C\x78\xAC\x0C\x82\x20\x45\x80\x24\x13\x81\x2D\x83\x90\x0F\x89\x20\x57\x84\x3F\x14\x82\x8E\x88\xDC\x5A\x8E\x8B\x37\x83\x21\x14\x9F\x2B\x8B\x2A\xA0\x21\x8B\x59\x8B\x7E\xB4\x49\x89\x21\x00\xA8\x83\x7E\x07\x9F\x57\x18\xFE\x71\x89\xBF\x33\x8F\x8D\x06\x88\x27\x11\xFA\x51\x8D\x83\x3E\x83\x87\x20\x35\x8D\x6B\x77\x81\x8F\x35\xAC\x80\x90\x1F\x88\x93\x3F\x7B\x88\x7E\x36\xB8\x84\x7A\x8A\x86\x8D\x05\xDB\x8E\x8C\x47\xA2\x88\x92\x70\x88\x25\x19\xDD\x89\x21\x34\x9C\x82\x91\x5B\x91\x81\xFB\x60\x8F\x93\x4C\xA5\x22\x92\xFE\x74\x90\x27\x86\x23\x8E\x54\xAA\x8F\x7D\xAB\x83\x22\x27\x96\x80\x95\x5F\x59\x8D\x92\xB4\x86\x95\x48\x2E\x9B\x24\x55\xA0\x29\x8B\xAD\x95\x94\xF8\x31\x92\x21\x59\xA7\x92\x98\x06\x22\x95\x1F\x81\x28\x97\x63\xBA\x90\x24\xBC\x9A\x90\x29\xA8\x20\x98\x4C\xB9\x8D\x24\x9B\x9F\x96\x42\x46\x9B\x96\x64\x83\x22\x99\x96\x8D\x88\x58\x51\x9E\x99\x6B\xA1\x26\x97\x7F\x35\x9B\x38\xDE\x9B\x20\x62\x98\x8E\x9A\x1B\x92\x9A\x21\xA5\x27\x97\x3F\x8F\x99\x91\xF7\x9F",
			"\x1C\x21\x87\x99\x9E\x46\x8A\x84\x9A\x4A\x86\x7D\x24\x8A\x9B\x9F\x18\x84\xA7\xA0\xF9\x85\xA3\x0B\xFD\x94\x7C\x1B\xA1\x9D\x3A\xF6\x86\x9C\x48\x0A\xA3\xA2\x84\x92\xA0\x9F\x17\xBA\x9E\x45\xF1\x96\xA0\x86\xBC\x2E\xA1\x00\xBA\x7D\x44\x9C\xAB\xA1\x8C\x94\xA0\xA3\x24\xB5\xA1\x42\x9B\xA1\x84\x15\x9E\xA6\x20\x09\x99\x77\x32\x84\x20\x9F\x96\xB9\x91\xA3\x5B\x88\x31\x16\xE0\x97\xA7\x94\x9F\x24\x9C\xE7\x96\x26\x36\xF3\x95\xA4\x9F\x9A\xA3\xA5\x48\xA6\xA4\x4B\xA4\x8C\x9E\xA5\xAF\xA3\x20\x31\xA6\x77\x4C\xB9\x88\x8E\xA3\xA7\xA7\xA8\x4E\xB9\xAA\x55\x8A\x9E\x9E\x99\x8F\xA4\xA6\xEB\x99\x9C\x50\xD2\x89\x2E\x77\x80\x03\x35\x61\xB9\xA3\x58\xE4\x85\xAD\xA1\x86\x20\xAD\x76\x8B\xAB\x09\xAE\xA9\xA2\x41\x84\x84\xAB\x72\x92\xAF\x0C\xB4\x8D\xA0\x24\xA1\xA7\x91\x69\xA6\xA9\x54\xFB\xAF\x1F\xB5\xBF\x1A\x38\x5A\xB6\xA5\x47\x89\xBC\xA9\x92\x14\xAB\xAF\x83\xBB\xAE\x61\xB9\xA6\xAC\x9E\xA5\x20\xB1\x5B\xA9\xA9\x66\x99\xAF\xB1\x19\x91\xB3\x86\x86\xBF\xB2\x0B\x93\xBD\xAD\x74\x8A\x20\xAE\xAD\x26\xB1\x68\x83\xA9\x9E\xCC\x8A\xB5\xA8\xAF\xA0\x25\x67\xAE",
			"\x88\x9C\xEF\x65\xB5\x35\xAE\xAD\xB0\x6C\xBA\xBA\xA4\xC6\xB3\xA8\x25\xB3\xBE\x82\x68\x9E\x84\xB4\xA1\xB6\xB4\xA8\x20\x39\xB7\x6F\x8B\xB6\xA9\xE0\x98\x81\x94\x66\xAD\x99\x48\x4A\xB4\xB1\xAB\x8E\xBB\x92\x0A\x28\x94\x1A\xD8\x24\xBB\xBD\x97\xAF\xBB\x8A\x97\xBA\xFF\x43\xB8\x83\xD5\xA2\xAC\x9D\x01\x33\x8D\x16\xA8\xBC\x7E\x45\xA4\xBD\x82\x86\xBD\xBB\x0C\xD6\xB8\xBC\x00\x12\xBF\x8C\xB7\xAA\x3A\x7C\xC4\x81\xBD\xFA\x96\xB6\x8A\xD3\x97\xB2\x5E\xFB\xA2\xBD\x57\x83\x22\xBB\xDB\x98\x2B\x7B\xFE\x75\x9E\xB7\x97\x3A\xC1\xEE\xB1\xC1\x3E\x8B\xC4\x26\x0A\xEB\x26\xC2\x28\x38\xC0\x3D\xEC\x73\xA7\x2D\xB3\xA2\xA7\xC6\xA7\xBA\x41\x7B\xB1\x24\x0D\xE5\xC2\xC2\x19\xA6\xC4\x6E\x1D\x71\xC5\x80\x22\x93\x24\x01\x81\x83\x16\xA6\x81\xAA\xF8\x73\xC5\xAF\x6F\xAD\xC5\x40\x4A\xBA\xB9\x1C\xA3\x21\x8B\xCA\xA0\xC9\x82\xA2\xAA\xC6\xF9\x09\x22\xB9\x46\xC3\xC6\x42\x49\xCD\x80\x1D\xC0\x00\x7E\xEC\xA2\xA9\x8D\xB8\xC3\x21\x28\xF6\x23\x3F\x09\x34\xC5\x76\x8A\x28\xCA\x56\x94\xCA\x20\x56\xC3\x25\x03\x79\xB6\x7F\x2D\xC9\x23\xCC\x59\xDF\xCA\x6A\x4E\xCA\xCB\x61",
			"\xA9\xCF\xA3\x09\x21\xCE\x42\x01\x40\xCE\x58\x89\x24\xCE\x30\xA7\xB6\x93\x8C\x46\x21\x0C\x49\x26\xCF\x06\x2C\x46\x8E\xBA\x4F\xCC\x83\x04\xD6\xD0\x0A\x27\xD3\x40\x44\x49\x20\x46\xC6\x22\x49\x5E\xC9\x20\xA4\x8B\xDA\x20\x47\xD4\xD5\xD1\x11\x39\xD1\x42\x53\x4B\xD2\x85\x1C\xD6\x20\x9F\xC3\x21\xA8\xD2\x4A\x20\x0B\x0E\xCA\xB9\x23\x3B\x89\x0A\x11\x82\x94\x51\xA8\xCE\xC9\x09\x2A\x04\xAB\xDE\x88\xCE\x58\xC3\x23\x05\xB3\xD1\xCD\xA2\xCE\xCB\x8A\x16\x39\xD6\xCE\x06\x2A\x5A\x8E\xDB\x8D\x05\x5F\xD0\xAA\x21\x30\x1C\xD6\x42\x2E\x06\xD8\x81\x1B\x8A\x52\xC3\xCA\x23\x0B\x4D\xDE\xC4\x85\x14\x51\xDA\x09\x30\x04\xB5\xF6\xBA\x20\x11\x0A\xD9\x21\x31\x1B\xDA\x28\x80\x58\xDA\x83\x32\x03\xDB\x26\x9B\x02\xAD\x89\x23\x06\x74\xCA\x22\xDD\xEB\xC3\x20\x0D\x5B\xD6\xCB\x54\x71\xDA\x20\x35\x14\xDF\xB2\xF7\xD2\x20\x1B\x1B\xD8\x7E\x34\x1C\xDD\x40\x37\x0B\xDB\x2D\xBA\x07\xDB\xF8\x21\x83\x0F\x08\xEC\x42\x51\xA1\x5D\xDC\x1C\x56\xCB\xB5\x10\xE2\x20\x1C\x2E\xD9\x21\x3B\x0C\xE2\x40\x39\x0A\xDF\x84\x1F\x5C\xE2\x01\x3A\x07\xC5\x86\x2E\x06\x8D\xC1\x23\x07",
			"\xDB\xD2\x0E\x93\xF7\xBD\x3A\x5D\x4F\x2A\x43\x2C\xEB\x3A\x5D\x86\x5A\x56\xE8\xAA\x6C\xDB\x75\xDC\x42\xAE\x26\x81\x80\xF8\x7F\xB8\x37\x37\xC9\x3F\xDD\x4B\x36\xCB\x98\xE3\x26\x84\x3F\xED\xE7\x7A\x39\x89\xE8\xAA\x6D\xC8\x3F\xBA\x4D\xC2\x41\x5D\xCF\x9B\xF5\x11\xAE\xC3\xE6\x23\xEA\xD6\xE6\xC3\x2B\xF5\x3A\x57\xD5\x0F\xC9\x20\x9F\xE1\xED\xC4\x51\x8A\xBE\xCA\xE3\x3A\x56\xA0\xC9\x92\x71\x26\xC9\x24\xC9\x4C\x5A\x56\xA2\x82\x2D\xE8\x5D\x79\x84\xEA\x71\xEB\x3E\xA5\xF4\xED\xEC\x81\x30\xEC\x99\x5E\xEB\x3F\xA4\xE2\x96\x20\x53\xED\x88\xE6\x5C\xCB\xC9\xE0\xE9\x33\x4C\xE4\x9D\x3E\xE6\x53\xE9\xF2\xD0\xEB\x35\x4C\xC7\xCB\x38\xE9\x0A\x20\xED\x31\x8B\xF8\x3E\x0D\x0D\x75\xD6\x9B\xF3\xF1\x7A\x70\xDC\xED\x9B\xE3\xEA\x20\x7B\xF4\xE7\x7A\x6E\x46\xF2\xB5\xCA\x20\xD0\x3A\xEB\x3C\x9C\x2D\xFB\x3D\xB9\xC1\x23\xED\xB1\xF7\xE4\xEB\x29\xF0\x00\xDE\xE9\xEB\x3D\x1E\x04\xCF\xA1\x51\xA6\x84\xDE\xC6\xEE\xC9\xE3\x3E\xD9\xCE\x82\x20\xDB\xAE\xC4\xC9\xCF\x92\xCA\xF2\xE8\xF8\x36\x23\xC3\xE9\x38\xF4\xD5\xD1\xF9\x42\x78\xEA\xF5\xF4\x1E\x56\xFA\xF8\x27\xF5",
			"\xF6\x8F\xD1\xC0\xDA\x3A\x57\x54\x09\x3B\x89\xB2\xE0\xF3\x20\xD8\xC4\xF3\x20\x86\xE0\xD4\xE7\x90\x7D\x75\x52\xCA\x21\xF8\xD3\xFC\x40\xAD\x32\x53\x07\x8C\x71\xFB\x20\x1F\x03\x7F\x4C\x21\x70\xB2\x2E\x2B\xB4\x79\x10\xFF\x72\x10\x7C\x29\x7F\x4C\x22\x6C\xA5\x76\x10\xD1\x2F\x80\x1C\x26\x25\x9D\x6C\x80\xB9\x3B\x75\x09\x14\x81\x06\x18\x7F\x50\x74\x2D\xD6\x29\x31\x1A\x80\x80\x02\x86\x28\x07\x72\x2B\x19\x77\x80\x06\x11\x82\x0A\x83\x82\x87\x2F\x71\x12\x82\x10\x0F\x7F\x82\x86\x2D\x78\x06\x1E\x79\x16\x85\x7F\x37\x74\x83\x03\x1F\x77\x87\x2A\x2B\x25\x7C\x7E\x4C\x26\x7B\x38\x76\x10\x3A\x82\x10\xDC\x7D\x83\xEB\x1A\x2E\x40\x86\x28\x83\x70\x78\x09\x15\x84\x4E\x8D\x81\xE9\x18\x2F\xE9\x7A\x10\x0F\x3B\x84\x00\x09\x80\x01\x1B\x45\x95\x76\x10\x3C\x8F\x7B\xE9\x1D\x31\x58\x83\x1E\x5D\x84\x76\x03\x15\x86\x46\x8C\x82\xE3\x19\x32\x63\x86\x1E\xA4\x76\x86\x02\x18\x86\x51\x89\x7B\xF8\x11\x33\x55\x89\x10\x3A\x38\x85\xB3\x7C\x3D\x0A\x16\x83\xF2\x77\x83\xE3\x14\x34\x28\x8C\x21\x7E\x83\x10\x1C\x84\x87\x1C\x2A\x34\x58\x82\x35\x83\x82\x10\x85\x82",
			"\x10\x01\x80\x88\xE6\x1A\x35\x58\x88\x36\x8D\x81\x10\x8F\x81\x10\x0B\x82\x85\xF8\x1C\x36\x58\x80\x37\x97\x80\x00\x6F\x8E\x88\x6A\x8E\x3B\x9F\x33\x8A\x01\x12\x87\x48\x8A\x7B\x9F\x3C\x7A\x7F\x8C\x89\x1C\x2A\x37\xA1\x83\x1E\xAE\x86\x88\xA5\x8A\x1B\x7D\x38\x85\x86\x31\x8A\xB5\x80\x89\xB7\x8C\x1B\x89\x38\x85\x8C\x3C\x8B\x0A\x1B\x89\x88\x8C\x24\x94\x38\x85\x2C\x62\x83\x87\x2B\x87\xA2\x6F\x8B\xB4\x11\x3A\xB3\x86\x1E\xCE\x82\x10\x87\x89\x77\xE9\x13\x3A\x58\x8F\x3A\xA1\x85\x8D\x01\x11\x89\xB0\x8C\x24\xB1\x38\x85\xB5\x3D\x8D\xC5\x80\x8D\xB8\x17\x3B\x58\x8B\x3B\xA1\x87\x8D\x01\x10\x85\xAB\x83\x38\x17\x8A\x10\xE0\x83\x10\xBD\x8D\x7D\xF2\x88\x83\x06\x16\x8C\x02\x1E\x8D\xF1\x84\x7F\xAC\x34\x6E\xAF\x87\x8C\x86\x21\x3C\xD3\x8A\x1B\x02\x96\x8B\x92\x8A\x1B\xC3\x38\x85\xC8\x31\x8A\x09\x9E\x8B\x0B\x9C\x1B\x2A\x78\x85\x74\x09\x31\x11\x9A\x89\xE8\x8D\x1D\x75\x0E\x45\x77\x09\x31\xCA\x73\x90\xD8\x88\x1F\x78\x0D\x38\x21\x9A\x90\xE1\x86\x28\x79\x0E\x45\x7B\x00\x92\xF4\x8B\x91\xCB\x1C\x07\x5E\x4E\x07\x2E\x99\x10\xFC\x88\x8F\x1C\x2F\x07",
			"\x5E\x41\x08\x19\x33\x28\x06\x1E\x7B\x59\x7B\x1E\x82\x05\x7E\xB8\x17\x93\x5C\x49\x10\x3E\x90\x87\x38\x9C\x24\x84\x0C\x3E\x87\x0E\x45\x19\x93\x84\x03\x15\x02\x0A\x1C\x28\x13\x9D\x3B\xA5\x3F\x28\x09\x16\x95\x29\x9A\x8F\xF4\x7D\x7C\x03\x1C\x95\x04\x97\x28\x89\x0D\x38\xD7\x66\x10\x62\x93\x92\x1C\x2A\x08\x8D\x35\x7D\x3F\x90\x93\x23\x1B\x08\x1C\x66\x1E\x49\x9F\x7E\x02\x1E\x96\x4A\x9F\x8F\x4C\x2E\x08\xC2\x72\x09\x5E\x44\x95\x77\x86\x10\xDF\x7F\x96\x57\x98\x1B\x94\x02\x7C\xE3\x17\x96\x97\x49\x10\x83\x93\x10\xE8\x7D\x95\xBF\x3F\x39\x8D\x96\x97\x4B\x96\x28\x98\x0A\x66\x00\x0D\x09\x5E\x40\x2A\xCB\x71\x10\x9C\x94\x98\x90\x96\x1E\x9F\x08\x98\xE6\x11\x2B\x91\x66\x10\x9F\x99\x97\x60\x88\x1F\xA3\x08\x99\xA8\x0E\x45\x06\x80\x7D\x06\x1F\x98\x03\x1A\x02\x70\x9A\x10\xAA\x0D\x38\xB4\x92\x10\x2F\x07\x9B\x09\x1B\x0A\x5E\x4D\x0A\x19\x36\x6F\xB3\x9E\x9B\xF9\x83\x1E\xC4\x93\x10\xA9\x9A\x96\xB3\x3D\x9C\x01\x1D\x9B\x8C\x96\x9C\x00\x96\x1E\xEB\x76\x10\xB6\x95\x98\xDD\x1E\x0A\x8D\x35\x9D\x03\x10\x9D\xA1\x9A\x1B\xAF\x0E\x45\xB1\x09\x31\xA6",
			"\x97\x69\xDF\x9C\x1B\xB2\x04\x9A\xBA\x15\x82\x7C\x80\x6E\x44\x9A\x74\xE9\x16\x0B\x98\x9B\x0B\x5E\x41\x83\x8B\x96\x10\xFD\x78\x69\xD8\x9B\x1C\xBD\x03\x97\xBA\x1F\x2E\x81\x93\x10\xF9\x9E\x7C\xE7\x94\x1B\xC0\x02\x7C\xC4\x0E\x45\x08\x35\x68\xF2\x6A\x10\xFB\x75\xA0\xB8\x16\x0C\x8D\x34\x80\x06\x11\x9B\x63\x93\x1E\xC7\x0E\x45\xC9\x09\x31\x16\xA2\x10\x03\xA7\xA1\xA6\x85\x3A\x0E\x83\x10\x0F\xA0\xA2\xBA\x1A\x0C\x8D\x33\xA2\xF8\x62\x9D\x02\x1B\x0C\x5E\x4D\x0C\x19\x31\x81\xE6\x96\xA2\xBC\x1E\x0C\xEF\x9B\x1C\x27\x32\x2B\x32\xAE\x77\x2C\xA1\x10\xD0\x07\xA3\x23\x1C\x86\xCC\x8B\xA3\x01\x17\x84\xAB\x9C\x21\xD2\x00\xA4\x0A\x1D\x32\x3A\xAA\xA4\x3A\x63\x1E\xD4\x0C\x3E\xD7\x0E\x45\x76\x84\xA0\x03\x13\x71\x06\x15\x2D\xFB\x93\x12\xD9\x0D\x38\xEC\x93\x10\x5A\xA0\xA1\xDD\x1A\x0D\x4E\xA8\x1F\x5F\xA2\x10\x93\x95\x99\x87\x2C\x0D\x0A\x1A\x5C\xE4\x0A\x21\x38\x31\xA0\x02\x17\xA6\x01\x1F\xA1\xCC\x96\x28\xE5\x03\x64\x06\x1F\x0E\x43\x3E\x45\x27\x89\xA5\x3D\xA0\x00\xF0\x09\x3C\x0A\x11\xA6\x34\xA4\x1B\xF1\x0D\x38\xF6\x95\x71\x81\xA2\x0F\x65\xAC",
			"\x21\x8B\xAF\x8E\x81\xA4\x0F\xC2\x78\x0F\x1A\x20\x35\x58\x81\xA9\x00\x09\xA6\x7A\x96\x28\xF9\x0D\xA6\x37\x1B\x6D\x94\x8D\x9E\x06\x1A\xA9\xFE\x87\xA4\x4C\x22\x00\x11\x46\x42\x06\x0B\x6D\x9E\x86\xA5\x30\x8A\x10\xF7\x8D\xA9\x87\x27\x00\xAB\xAB\x64\xDB\x60\x8A\xB0\xA1\x10\x9A\xA6\xA7\x6A\xA3\x1E\x0C\x01\x41\x59\x46\x01\xDB\x69\x8B\xBB\xA0\x00\x3F\x80\xA8\x5B\xAA\x10\x17\x0B\x6D\xAC\x3B\x70\x09\x16\xA8\x77\xA7\x28\x18\x01\x41\xC7\x79\x1E\xD0\xA4\x84\x81\xAA\x01\xB7\xA9\x10\x1E\x0B\x6D\xBB\x87\xAC\xD9\xA3\x10\xA7\xA1\x94\xE9\x1F\x01\xDD\xA6\x10\x23\x0B\x6D\x5F\x0E\x45\xE3\xA2\x10\xB3\xA8\xAA\x86\x24\x02\xE9\xA3\x10\x28\x0B\x6D\xC9\x87\xAC\x4A\x8D\x62\x69\x7E\x3F\x02\x7C\x77\x4E\x6F\x62\x2F\x7B\x2C\x4D\x7F\x0F\x02\xB0\xA4\x31\x7B\x48\xB0\x63\x73\x73\x81\x62\x0C\xB0\x00\x58\x7E\x12\x11\xB2\x4F\x20\x72\x54\x94\x5A\x9E\x30\x17\x47\x26\x46\x13\x1B\xB7\x74\x98\x90\x00\x4F\x77\x9A\xC7\x62\x7C\x51\x50\xB2\xC2\x76\xB2\x72\xA0\x45\x1F\xB6\x42\x1B\xB6\x42\x39\x58\x79\xC2\x71\x40\x00\x0B\x60\x33\xBA\x3E\x51\x52\xB3\x37\xB3\x12",
			"\x51\x5F\x62\x25\xB7\x19\x6A\x1E\x4A\x3E\x7E\xB3\xB2\x2F\x64\x1A\x24\xB4\x43\xB1\xB4\x5C\x7D\x62\x68\x7A\x13\x4B\xBB\x12\x56\x6F\x62\x4F\xB3\x12\x51\xBA\x67\xA7\x6A\x16\x24\x63\x5D\x5E\x40\x00\xCA\x52\xB3\xA8\x61\x1C\xB0\x6D\xB5\xA0\xA3\xB4\xCA\x57\xB0\x3A\x60",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ | lri:<skip> ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr | lri:<skip> ) >>",
			L"[59][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr | lri:<skip> ) >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ | lri:<skip> ) >>",
			L"[61][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr | lri:<skip> ) >>",
			L"[62][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ | lri:<skip> ) >>",
			L"[63][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType | lri:<skip> ) >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubsetTokens, ModuleParserStates, PrefixSubsetAstInsReceiver>(&PrefixSubsetTokenDeleter, &PrefixSubsetLexerData, &PrefixSubsetModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
