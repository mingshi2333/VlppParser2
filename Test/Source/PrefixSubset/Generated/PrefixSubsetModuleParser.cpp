/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubsetModuleParser.h"

namespace prefixsubset
{
	void PrefixSubsetModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3731; // 33472 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 147;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\xC0\x82\x00\x00\x8B\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x80\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC6\x42\x19\xC6\x63\x15\xEB\xC8\x00\x64\x0D\xE5\x1A\xE7\x2F\xCE\xE5\xDB\xE7\x66\x24\xE3\xCE\xE5\xA6\xFA\xA7\x19\xC6\x68\x0A\xE9\xE4\x87\x6A\x1A\x8B\x1A\xEC\x97\xCB\x7D\x1A\xEA\x3E\xDF\xEC\xEB\x78\x6E\x19\xCF\x18\xEF\xB8\x70\x1A\x85\x1C\x8D\xDC\x12\x56\x40\xFD\x42\x4D\x5D\xB0\x34\x4A\x0D\x40\x56\x98\x7F\x54\x4D\xF5\xAD\x74\x47\x9A\x41\xDB\xED\x62\xF5\x42\xD8\xE4\xD1\xF6\x42\xCF\xFF\x51\xF9\x78\xD7\xD8\x5A\xF6\xB8\xE4\x5F\xF6\x43\xF9\xE4\x7A\x50\x58\x4D\xCD\xC1\x45\xFA\xC0\xE3\xC9\x46\x76\x72\xF0\xF4\x44\xFF\xAF\xF5\x60\x03\xF2\x4A\x32\x7E\xEB\x6B\x21\x80\xF7\x62\x7F\x4A\x6E\x73\x21\xFD\x61\x39\x80\x03\x8F\x83\xAF\x7D\x7E\x7E\x94\x14\x85\x82\x21\x25\x81\xF6\x2B\x27\x82\x0C\x9F\x22\x83\xCA\x34\x24\x08\xE8\x7B\x25\x11\xA4\x3A\x84\xEA\x65\x85\x0A\xA8\x26\x84\x0F\x99\x83\x85\x25\x2D\x86\x0B\x9F\x28\x80\x7A\x79\x7E\x20\x0E\x91\x7C\x0C\xA1\x20\x82\xAC\x32\x83",
			"\x86\x3D\x80\x2F\x0F\xAE\x83\x88\x0F\xB5\x80\x7A\x0B\x93\x78\x58\x5D\x7C\x78\xAC\x0C\x82\x20\x45\x80\x24\x13\x81\x2D\x83\x90\x0F\x89\x20\x57\x84\x3F\x14\x82\x8E\x88\xDC\x5A\x8E\x8B\x37\x83\x21\x14\x9F\x2B\x8B\x2A\xA0\x21\x8B\x59\x8B\x7E\xB4\x49\x89\x21\x00\xA8\x83\x7E\x07\x9F\x57\x18\xFE\x71\x89\xBF\x33\x8F\x8D\x06\x88\x27\x11\xFA\x51\x8D\x83\x3E\x83\x87\x20\x35\x8D\x6B\x77\x81\x8F\x35\xAC\x80\x90\x1F\x88\x93\x3F\x7B\x88\x7E\x36\xB8\x84\x7A\x8A\x86\x8D\x05\xDB\x8E\x8C\x47\xA2\x88\x92\x70\x88\x25\x19\xDD\x89\x21\x34\x9C\x82\x91\x5B\x91\x81\xFB\x60\x8F\x93\x4C\xA5\x22\x92\xFE\x74\x90\x27\x86\x23\x8E\x54\xAA\x8F\x7D\xAB\x83\x22\x27\x96\x80\x95\x5F\x59\x8D\x92\xB4\x86\x95\x48\x2E\x9B\x24\x55\xA0\x29\x8B\xAD\x95\x94\xF8\x31\x92\x21\x59\xA7\x92\x98\x06\x22\x95\x1F\x81\x28\x97\x63\xBA\x90\x24\xBC\x9A\x90\x29\xA8\x20\x98\x4C\xB9\x8D\x24\x9B\x9F\x96\x42\x46\x9B\x96\x64\x83\x22\x99\x96\x8D\x88\x58\x51\x9E\x99\x6B\xA1\x26\x97\x7F\x35\x9B\x38\xDE\x9B\x20\x62\x98\x8E\x9A\x1B\x92\x9A\x21\xA5\x27\x97\x3F\x8F\x99\x91\xF7\x9F",
			"\x1C\x21\x87\x99\x9E\x46\x8A\x84\x9A\x4A\x86\x7D\x24\x8A\x9B\x9F\x18\x84\xA7\xA0\xF9\x85\xA3\x0B\xFD\x94\x7C\x1B\xA1\x9D\x3A\xF6\x86\x9C\x48\x0A\xA3\xA2\x84\x92\xA0\x9F\x17\xBA\x9E\x45\xF1\x96\xA0\x86\xBC\x2E\xA1\x00\xBA\x7D\x44\x9C\xAB\xA1\x8C\x94\xA0\xA3\x24\xB5\xA1\x42\x9B\xA1\x84\x15\x9E\xA6\x20\x09\x99\x77\x32\x84\x20\x9F\x96\xB9\x91\xA3\x5B\x88\x31\x16\xE0\x97\xA7\x94\x9F\x24\x9C\xE7\x96\x26\x36\xF3\x95\xA4\x9F\x9A\xA3\xA5\x48\xA6\xA4\x4B\xA4\x8C\x9E\xA5\xAF\xA3\x20\x31\xA6\x77\x4C\xB9\x88\x8E\xA3\xA7\xA7\xA8\x4E\xB9\xAA\x55\x8A\x9E\x9E\x99\x8F\xA4\xA6\xEB\x99\x9C\x50\xD2\x89\x2E\x77\x80\x03\x35\x61\xB9\xA3\x58\xE4\x85\xAD\xA1\x86\x20\xAD\x76\x9C\xA8\x00\xF2\x82\xAF\x8F\x88\x89\xA4\x8F\x80\x2E\x70\x5A\xA6\xA7\x8E\x99\xA4\xAA\x33\x9F\x1D\x54\x81\xBF\x1F\xB5\xBF\x19\xA7\x58\x3D\x1A\x62\xDD\x11\x25\xC5\x8C\xB0\x24\x8E\xAE\xB3\x55\xD7\xA0\xB1\x19\x8E\xB5\xB1\x8B\xB8\xB1\x64\xDD\x16\xB0\xC4\xAE\xAF\x9B\x66\xBC\xA5\x49\x7B\xAB\xAB\xA4\x86\xAD\xB2\x2E\x83\xB1\x60\x86\xBA\xB5\x19\x9D\xB5\xAD\x7F\x24\xB5\x5F\xC5",
			"\xA3\xB6\xC8\x99\xB6\xB6\x8A\xBA\xB1\x64\xA8\xBE\x83\xD6\xAE\x84\xB5\x8A\x97\xB0\x6E\x8F\xBF\x23\xCD\x8A\xB3\x8B\x73\x99\x88\x5C\xDE\x7A\x21\xE5\x8A\x3A\xB6\x4C\xA5\x24\x6F\x98\x88\x9D\xD6\x10\xBF\x84\x2B\x22\xB9\x71\xB7\xBB\xBB\xCD\x95\xBA\x39\xEA\x89\x9C\x6C\xD6\xBB\xA8\xEC\x8D\xAF\xB4\x8A\x9E\xB6\x07\xAF\xB2\xA9\xD6\x1A\xBF\x1F\xEF\xA6\xB9\x37\x13\xBA\x91\xE9\x95\x81\xBE\xDC\xB0\xBE\x71\xEC\xBD\xBD\xF0\x3B\xA1\xB4\x58\x37\xB8\x61\xF6\xB9\x95\x5F\x42\xC1\xB0\xF8\xB9\xB7\x70\x8E\xB1\x94\xB3\x8D\x9E\x8A\xD3\x83\xB5\x7D\xEC\x94\x8B\x00\xC1\xB9\xBF\x09\xD1\xB1\x36\xE2\xBD\x92\xB3\x9C\x98\x24\x07\xD3\x84\x7D\xF9\x94\xC0\x9A\x2A\xB8\x83\xC0\xA2\xAC\x85\x80\x03\x8F\x10\xC4\x8F\xC2\x0A\xDD\xB8\x71\xFA\xBB\xB3\x12\xEB\x27\xC4\x15\x89\xC5\x46\x99\xCA\xB6\x06\xE3\xB8\xBC\xCD\xA6\xAE\x73\xE1\x3E\xC4\x0F\xB6\xC2\x9E\x53\x36\xC1\x3E\xBC\xCB\xC1\xC5\x9F\xBE\xBF\x3F\xD0\xC9\x42\x2D\xC3\xC3\x7C\x8D\xC2\xAF\x30\xD3\xC5\x86\xBE\xC4\xA9\x33\x91\xC0\xC2\x6D\x8A\xCB\x5F\xAB\xC8\x95\x22\xD8\x84\xC9\x32\xDC\xC8\x2C\x9F\xB5\x98\x0F",
			"\xD8\x28\xC7\xFE\x75\x9C\x9B\xCC\x9F\xCD\xF4\xB6\xC9\x9F\x70\xC6\xC7\x9D\x99\xA9\xCF\xAF\x9B\x8B\xA6\x7F\xDF\xAA\x4E\xFD\xB0\xC9\x84\x26\xCD\x3B\x70\x64\xD0\x17\x8A\xD1\x81\x00\x88\xBD\xA1\xC3\x89\x23\xA3\xF6\xAF\xAC\x45\xC0\x07\xBA\xD7\xB9\x87\x48\x59\x87\xBA\x4E\xDB\x99\xA0\xFD\xB2\x3E\xA1\x8A\x22\xD4\x83\x17\xBD\xD4\x0D\x96\xD0\xFC\x43\xC6\x27\xA8\xB0\x79\xAA\xAC\xC3\x27\x7E\x53\xC0\xD3\x35\xC6\x23\xD6\xAC\x95\xD7\x40\x31\xDA\x21\x06\x11\xC8\x00\xAE\xDD\xD7\xAF\xB0\xD6\xD2\x13\x81\xDC\xD6\x94\xDB\xD6\xA5\x81\x49\xD9\x76\x89\x24\xD9\x30\xA1\xCA\xA2\x8C\x46\x21\x0C\x49\x26\xDA\x06\x2C\x46\xA2\xBA\x49\x20\x6E\xC6\x26\xDB\x03\x24\x49\x42\x4A\x46\x20\x72\xE1\xDA\x21\xE2\xC5\xDE\x42\x53\x49\x20\x76\xC6\x26\xDD\x03\x36\x02\xA5\xD7\xB3\x25\x2D\x8D\x09\x82\xA2\x82\x96\xAF\x96\xDA\x20\x27\x38\xDE\x8B\xD0\xDC\xDF\x40\x4F\x0F\xDF\x84\x2C\xD0\xDC\xED\xBB\x88\x14\x05\xE6\xD7\x81\x0A\x5A\xD1\x5B\x91\x08\xC3\xD0\xAA\x20\x18\x16\xD3\x8B\x52\x13\xE2\x40\x5B\x82\x52\x88\xCA\x23\x0A\x1A\xE1\x22\x28\x94\x5E\xE3\xAC\x61\xE0\x00",
			"\x01\x82\x07\xC5\x8A\x25\x0B\x93\xE2\x90\x50\x25\xE6\x22\x15\x27\xE6\x85\x0D\x02\xE1\x21\x57\x14\xE6\x42\x36\xE7\xE7\x81\x18\x0F\xE4\xAC\xC9\x55\xCF\x82\x29\x0A\xA0\xCA\x22\xE8\x43\xE0\x02\x16\x27\xE0\x7E\x1A\x09\xE9\x20\x5B\x07\xE7\x16\xBA\x0B\xE5\xF4\x01\x87\x07\x55\xF8\x3E\x28\xE1\x51\xE6\x0E\x6C\xD7\x5A\x5D\xEC\x4A\x09\xBB\x09\xEA\xAF\xCA\x27\x5B\x61\xE6\x52\x09\xBE\x05\xEC\x26\x72\x0E\xD2\x0F\xD8\x36\xAE\x4F\x2A\x43\xB8\xDD\x3A\x90\x4C\x5A\x57\x95\x83\x74\xCF\x66\xC6\x52\x57\x26\x81\x80\xFC\x22\xB4\x37\x49\xF8\x3F\x6E\xCB\x2C\xD6\xDD\xCB\x36\x84\xC2\xF2\xEB\x3D\x39\x8E\xF0\xE6\x01\x26\xD9\xF5\x3A\x52\xCE\xB7\xD9\x61\x54\x81\xDA\x36\xC4\xDE\xF2\x21\xF0\x6B\xF0\xBF\xE3\x3B\xDF\x24\xC9\x24\xDA\xD7\x36\xD2\x28\xD7\xBC\xD5\xF1\x3A\x52\xDB\xC9\x82\x71\xAA\x89\x28\xD5\xBC\xEB\x38\xE1\x22\xF2\xF6\x1F\x89\x28\xD6\x0E\x7A\x51\xDD\xA0\xAA\x6C\x00\x35\xFD\xEF\xC3\xEB\x3E\xDC\xE2\x86\x22\xBC\xE1\xC2\x57\x00\xBD\xF2\x20\xC4\xE7\x52\xAE\x63\x4D\xCB\xEE\x3B\xEB\x20\xCF\xE1\x21\xF6\xD2\xFB\x3D\x32\x55\xFC\xF1\x1A\x45\xF6",
			"\x2C\x96\xFB\x3C\x0D\x0D\x71\xE0\x6D\xC9\x3E\xAE\x3C\xE1\xF6\xE1\xE8\xF2\x20\xC0\xF6\xF5\x7A\x6E\x4F\xFB\xD7\xCA\x20\xDB\xBE\xEB\x3C\x9C\x75\xF7\xF6\x85\x30\xF1\xFF\xC2\x7C\x3A\xF1\x71\x10\x03\x8C\x7D\xE9\x1E\x01\xBF\x63\x1E\x51\x56\x42\x05\x82\x7A\x96\x63\x1E\x2A\x7E\x77\x00\x0D\x71\xA6\x79\x57\xD1\x63\x6E\xA4\x64\x7E\xE9\x16\x11\xCC\x78\x1F\xE8\x79\x7B\x18\x8C\x7B\x1A\x88\x1F\x9E\x2D\x81\x1C\x2F\x7E\x20\x8A\x6E\x26\x82\x7F\xF8\x17\x2A\x92\x65\x71\x5E\x48\x7F\xC9\x71\x6F\xEB\x63\x82\x90\x3D\x3A\x0A\x1B\x7C\x06\x18\x80\xEA\x7B\x1E\xB4\x22\x2B\x33\x09\x31\x3A\x83\x10\x1F\x06\x83\x4C\x2E\x74\xB2\x2E\x2B\xFC\x79\x10\x43\x82\x10\x7C\x2D\x83\xE9\x1F\x70\xED\x76\x10\xD1\x23\x85\x1C\x26\x25\xED\x66\x84\xB9\x3F\x79\x09\x18\x85\x3B\x8A\x85\x87\x25\x2D\xB2\x20\x76\x56\x8C\x24\x5E\x84\x84\x60\x83\x1E\x54\x72\x2B\x64\x7B\x84\x06\x17\x86\x4E\x89\x86\xE6\x18\x76\x65\x81\x10\x5C\x75\x87\x87\x24\x7D\x06\x16\x7E\x50\x8C\x77\x38\x89\x10\x7A\x83\x10\xD1\x7E\x7A\xEB\x1C\x76\x2B\x86\x28\xB8\x78\x72\x0A\x11\x88\x02\x1B\x7D\x84\x89",
			"\x1E\xEA\x27\x88\x87\x28\x7C\xC5\x73\x10\x8C\x85\x89\x2C\x8C\x21\xF8\x2F\x82\x09\x1F\x30\x92\x8D\x84\x01\x1B\x45\xDE\x76\x10\x83\x86\x1E\xBA\x2D\x31\x92\x83\x1E\xA3\x89\x7A\x09\x1B\x8A\x8D\x82\x87\xBA\x19\x32\xA9\x86\x1E\xEC\x7C\x8A\x06\x1E\x8A\x98\x8F\x77\xEB\x11\x33\x9C\x86\x10\x3A\x32\x89\xFB\x7C\x3D\x0A\x1C\x87\xEF\x60\x8B\xBC\x14\x34\x6E\x8C\x21\xC4\x83\x10\x3C\x86\x7C\xE9\x1A\x34\x92\x82\x35\xC9\x82\x10\xCB\x82\x10\x45\x8D\x87\x1C\x2A\x35\x92\x88\x36\xD3\x81\x10\xD5\x81\x10\x4F\x8E\x8C\xF8\x1C\x36\x92\x89\x68\x78\x83\x1E\xB5\x84\x8D\xC6\x8D\x3B\xA5\x39\x8E\x01\x18\x8B\x06\x8E\x87\xAC\x34\x7F\xC5\x88\x8D\x4C\x2A\x37\xDD\x87\x28\xF4\x8C\x8C\xEB\x88\x1B\x7D\x32\x89\x86\x39\x8F\xFB\x86\x8D\xFD\x8D\x1D\x89\x32\x89\x8C\x32\x90\x0A\x11\x8E\x00\x88\x1F\x94\x32\x89\x9D\x39\x8F\xC1\x83\x10\xF0\x69\x89\x4C\x21\x3A\xF9\x83\x1E\x13\x92\x10\xCD\x8D\x90\x1C\x23\x3A\x92\x8F\x3A\x12\x9A\x10\xD7\x82\x8E\x1C\x21\x3B\x92\x85\x3B\x23\x99\x10\x0C\x96\x91\x86\x27\x3B\x92\x8B\x3B\xF9\x8D\x91\x02\x17\x89\xF1\x87\x83\xAC\x35\x92",
			"\x03\x13\x90\xBA\x81\x80\x9F\x3D\x92\x01\x1B\x91\x3D\x92\x8F\x9F\x30\x73\xF5\x86\x92\x4C\x21\x3C\x19\x96\x1E\x46\x9C\x8F\xF6\x86\x28\xC3\x32\x89\xC8\x39\x8F\x4D\x94\x90\x4F\x97\x28\x6F\x72\x89\x74\x09\x31\x55\x90\x8E\x05\x9B\x1C\x75\x0E\x45\x77\x09\x31\x11\x87\x94\x1E\x9C\x24\x78\x0D\x38\x65\x9E\x94\x48\x96\x28\x79\x0E\x45\x7B\x04\x96\x24\x9F\x95\x23\x1C\x07\x5E\x4E\x07\x72\x9C\x92\x74\x9A\x10\x7F\x0E\x45\x81\x09\x31\x83\x26\x10\x05\x8F\x88\xF8\x12\x08\x5F\x68\x1B\x40\x9B\x68\x06\x11\x98\xB6\x87\x96\x86\x24\x08\xEC\x37\x08\x5E\x4D\x95\x8A\x89\x10\x25\x0A\x10\x8C\x27\x95\xBF\x3F\x39\x8F\x29\x10\x99\x9D\x96\x7F\x8E\x87\x14\x83\x10\x9F\x9E\x98\x87\x29\x08\x8D\x34\x72\x06\x15\x9A\x2E\x97\x28\x8A\x0D\x38\x1C\x82\x98\x7B\x99\x10\x8B\x0C\x3E\xE3\x1C\x98\x33\x82\x10\xB1\x9D\x98\xAD\x93\x1E\x8E\x0F\x6B\x92\x0E\x45\x97\x9D\x8B\x03\x15\x82\xB2\x9A\x99\xE6\x14\x09\x09\x86\x1E\xAA\x97\x49\x09\x16\x9C\x03\x1E\x82\xA0\x9B\x99\xA5\x30\x9D\xB9\x93\x94\x1C\x28\x09\xBA\x62\x10\x9D\x0E\x45\xA0\x22\x81\xDF\x97\x9C\xD3\x96\x1E\x9F",
			"\x0B\x9C\xBA\x11\x2B\xB9\x69\x10\xE1\x9C\x9B\xD8\x9C\x24\xA3\x0B\x9D\x01\x18\x0A\x5E\x4A\x84\x17\x86\x10\xD2\x93\x10\x2A\x03\x9B\x06\x1A\x0A\x8D\x37\x9F\x02\x1F\x02\xFA\x93\x10\xAB\x0E\x45\xAD\x09\x31\x48\x71\x9D\x01\xA3\x3B\x4C\x27\xA0\x02\x1B\x9E\xBD\x9E\x3B\x9F\x30\xA0\xCF\x99\xA0\x5B\x8B\x1E\x16\x79\x10\xF9\x98\x9C\xBA\x1E\x0A\x8D\x37\xA1\x06\x12\xA1\xE3\x9A\x1B\xAF\x0E\x45\xB1\x09\x31\xE8\x97\x6E\x1A\xAC\x1B\xB2\x06\x9E\xBC\x1B\x86\xC2\x89\x10\x27\xA7\x9D\x37\x9C\x24\xB6\x00\x9F\x00\x0B\x0B\x5E\x47\x87\xCE\x96\x10\x41\x89\x10\x83\x96\x8A\xEB\x1D\x0B\xB6\x96\x1E\xEF\x24\x9C\x02\x1D\xA3\x15\x86\x9A\xE3\x10\x0C\xBF\x64\x0C\x5E\x48\x30\xC8\x66\x10\x48\x86\x10\x3F\x81\xA2\xBC\x16\x0C\x8D\x33\xA5\x03\x14\x9F\x4A\xA6\x1E\xC7\x0E\x45\xC9\x09\x31\x5C\xA7\xA4\x14\xA1\x9A\x1C\x22\x85\x03\x15\xA5\x5D\xAA\x1B\xCA\x0D\x38\x68\xA2\x10\x63\xAD\x9E\x86\x2B\x0C\x5E\x4D\x0C\x19\x35\x85\x28\xA6\xA5\xB4\x1E\x0C\x19\x37\x32\xB2\x28\xA7\xD0\x75\xA6\xCF\x09\x31\xB2\x88\x87\x80\xAA\x7D\x65\xA0\x0D\x19\x3D\x32\x7F\xA7\x98\xDD\x1A",
			"\x2B\xD1\x0E\x45\xD3\x0E\x45\xBC\x89\xA4\x02\x14\x86\x03\x12\x86\x7A\xA2\x39\x66\xA2\x10\x2E\xA9\xA9\x65\xA4\x9D\x2D\xAA\x10\xD6\x92\xA7\x87\x25\x0D\x0A\x1F\x81\x00\x03\x0E\x5E\x48\x33\x92\x8F\xA9\x64\xA9\xA2\xB4\x15\x0E\x0A\x19\x88\xF7\x0E\x45\x42\x3C\x86\x0A\x1A\xA9\x6B\xAB\x3A\x9F\x34\x87\xA0\xA2\xAB\x9C\xAC\x3A\x3A\xA2\x10\xBC\xAF\xA0\xA5\x34\xAC\x8B\x85\xA6\xF9\x00\x7A\x33\x1E\x45\xC8\x88\x87\xC5\xA1\x10\xA5\xA3\xA3\x86\x21\x00\x11\x4A\xAA\x0F\x01\x41\x01\x40\x8D\x96\xA6\x87\x0A\x12\x94\xD6\xA7\x28\x11\x01\x41\xF0\x37\x01\xDC\xAF\x71\xE0\x2A\x10\x3C\x93\xAE\xAA\x86\xAE\x24\x99\xAE\x59\x3B\xAE\x09\x18\xA4\xBD\xA4\x1B\x21\x01\x41\x89\x83\x03\xF2\xA6\x10\x5F\x32\x2B\x86\x86\x10\xC7\xA6\xAA\xA2\xAC\x33\x58\x79\x10\x03\xBE\xAE\x10\xA5\x3A\x07\xB6\x10\x36\x94\x98\x1C\x25\x03\xF0\xA9\x10\x3B\x0D\xAF\x03\x1C\x8D\x78\x8D\xB0\x03\x12\xAE\x10\xBC\x24\x3D\x03\xB1\x06\x13\x04\x16\xB2\x10\xE4\x89\xB1\xEC\xA5\xA6\x45\x00\xB2\x03\x1B\x04\x23\xB1\x10\x6E\x32\x2B\x91\x84\x68\xAE\x7E\x3F\x4F\x72\x10\xA2\x46\x13\x37\xB4\x77",
			"\xCB\x22\x79\x1F\x19\xB3\x8E\xAC\x12\x8B\x7B\x48\xFC\x68\x77\x32\xA6\x13\x44\xB1\x8A\x6A\x1C\x79\x48\x64\x68\x9E\x56\xA4\xED\x53\x47\x2C\x6A\x3E\x26\x46\x13\x53\xB3\x12\x95\x73\x6C\x56\xB6\xA3\x51\xB2\x81\x5B\xB9\x9E\x51\xA5\x17\x59\xBC\xB5\x26\x43\xB5\x26\x49\x53\x8D\x71\xB6\xDF\xA6\x3F\x6A\x19\x67\x51\x51\x40\xC0\x6E\x45\x6F\xB2\x2B\x71\xBA\x68\xA8\x40\x00\xAE\x43\x78\x97\x1A\x21\x76\xBA\xB7\x78\xBE\xAC\x72\xB0\x3F\x36\x1D\x7A\x3A\x12\xB8\x2B\x1C\x6A\x37\xB6\xB8\x23\x18\xB8\xD2\x6A\x68\x87\x6C\x12\x8D\xBF\x0F\xD7\x5E\xB6\x91\xB1\x1C\xFC\x64\x6F\x94\xB3\x6F\x7A\xB7\x5D\x3E\xBA\x68",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]!_PrimitiveExprOnly ( lri:_Expr @ | lri:<skip> )",
			L"[58][Module]!_PrimitiveExprOnly @ ( lri:_Expr | lri:<skip> )",
			L"[59][Module]!_PrimitiveShared ( lri:_LongType @ | lri:_Expr | lri:<skip> )",
			L"[60][Module]!_PrimitiveShared ( lri:_LongType | lri:_Expr @ | lri:<skip> )",
			L"[61][Module]!_PrimitiveShared @ ( lri:_LongType | lri:_Expr | lri:<skip> )",
			L"[62][Module]!_PrimitiveTypeOnly ( lri:_LongType @ | lri:<skip> )",
			L"[63][Module]!_PrimitiveTypeOnly @ ( lri:_LongType | lri:<skip> )",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubsetTokens, ModuleParserStates, PrefixSubsetAstInsReceiver>(&PrefixSubsetTokenDeleter, &PrefixSubsetLexerData, &PrefixSubsetModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
