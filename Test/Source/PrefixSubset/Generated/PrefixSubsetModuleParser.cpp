/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubsetModuleParser.h"

namespace prefixsubset
{
	void PrefixSubsetModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2029; // 18062 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 237;
		static const vl::vint dataSolidRows = 7;
		static const vl::vint dataRows = 8;
		static const char* compressed[] = {
			"\x8E\x46\x00\x00\xE5\x07\x00\x00\x08\x00\x01\x82\x80\x05\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x83\x06\x85\x0B\x0A\xA2\x0A\x9C\x31\x01\x87\x7F\x8B\x18\x97\x8A\x80\x09\x89\x8F\x8D\x8E\x18\x9F\xA0\x9F\x72\x90\x91\x93\x8E\x27\x9E\x8A\x83\x94\x93\x8E\x85\x8A\x16\xA3\xA9\x81\x9B\x92\x99\x9A\x93\x37\xA8\xB9\x8A\x91\x98\x9D\x9E\x9D\x3F\xBC\x86\x8C\x93\x9A\x8F\x97\xA3\x09\x82\x08\xA3\xA6\x99\xA0\x9A\xA7\x46\xD0\xAD\x92\xA5\xA3\xA8\xA6\x9F\x57\xC0\x99\xA2\xA3\x84\xA3\x9D\xA7\x5B\xE0\x9D\xAD\xA1\xB1\xA9\xB2\xAB\x63\xD8\x83\x83\x0B\xA1\xB6\xAD\x81\x04\x6D\x87\x92\xB1\x86\xAC\xAB\xAF\x66\xEE\x9C\xA2\x86\xBF\xB1\xAB\xBF\x78\xE8\xBC\xA4\xBA\xBA\xB3\xC0\xB5\x87\xEF\x8B\x94\xBC\x8C\xC1\xC5\xBD\x75\x8E\xD1\xC8\xC3\xCA\xC5\xCA\xC8\x8D\x94\xD9\xD6\xCB\xC8\xCD\xBF\x81\x07\x0C\xDF\xC2\x80\x81\x84\x98\xBF\x81\x80\xF7\xAB\xD8\xD4\xD5\xC3\xBC\x8F\x86\xD7\xD2\xDD\xCC\xDB\xD1\xD9\xB0\xB8\xC2\xDA\xDA\xD5\xD6\x83\x04\xA2\x92\xC0\x0A\x01\xE2\xCE\x86\xD3\xA9\xC9\xEE\xD1\xD9\xDD\xD9\xE7\xDB\xCE\xBB\xD1\xFD\xD3\x84\x05\xE2\xCE\xD0\xD9\xC2\xFA",
			"\xEA\xCC\xEC\xED\xED\xE0\xDD\xE1\xFF\xE2\xF2\xCD\x07\xEB\x98\x8E\x28\xF6\xD3\xF6\xCD\xF6\xF6\xE5\xE4\xF2\xEE\xF1\xFC\xFB\xF8\xF8\x9C\x8F\x2B\xEF\xE2\xE0\x0B\xFC\xE9\x11\x3F\x74\x74\x73\xD2\x5E\x76\x7F\x81\xB4\x52\x02\x82\x42\x13\x0B\x89\x40\x05\x8C\x55\x0A\x40\x5B\xCB\x7C\x6A\x72\x6F\xAF\x45\x8F\x78\x7F\xF5\x78\x78\x81\x73\x18\x0C\x69\x06\x83\x18\x84\x83\x82\x85\x09\x5A\x0C\x63\x06\x13\x97\x89\x87\x89\xD3\x6E\x86\x8A\x8C\x28\x86\x4E\x04\x63\x1F\x2D\x85\x85\x8C\x3B\x86\x8E\x87\x8F\x1C\xB7\x71\x90\x66\x12\x48\x7D\x8F\x86\x1A\x9D\x83\x90\x90\x49\x82\x9D\x93\x87\x4F\x8C\x90\x8F\x08\x24\xAF\x84\x8C\x8F\x25\xB5\x86\x97\x8E\x24\x15\x93\x8F\x8E\x25\x0C\x66\x0A\x8E\x59\x98\x9B\x95\x99\x3E\x8B\x9A\x99\x94\x6B\x9B\x49\x0A\x97\x5A\x9F\x98\x9A\x70\x2A\x30\x96\x9A\x9C\x67\xB9\x98\x9F\x9E\x71\xBD\x97\x9E\x9F\x69\x92\x7B\x08\x63\x2C\x36\x91\xA0\x8C\x2D\x06\xA8\x93\x46\x2E\x0A\xAA\x90\x9B\x90\x9B\x4F\x0A\x9D\x30\x0C\x61\x0E\xA3\x4E\xB0\x87\xA3\x95\x9B\x87\x9A\x66\x0C\x8C\x73\x08\xA4\x94\x9A\x8B\xA7\x94\x0D\xA3\x92\x9C\xA6\xA9",
			"\x3B\xB5\x0C\x62\x0D\xA9\xAD\x9B\xAB\xA3\xA5\x9A\x67\x0C\x63\x38\x31\xA1\xA7\xAC\x99\xBC\xA4\xAA\xAF\xB4\x79\x0A\xAD\xAD\xBD\x9E\xA5\xB2\x41\x3A\x03\xB0\xB2\xAC\x09\x7B\x0A\xB3\x8E\x3C\x0F\xB5\x99\x0F\x76\xBE\x0A\x42\x52\xC6\xBF\xA9\xB6\xAA\xDB\x8C\xB3\x9E\x66\x40\x12\xBA\x9C\xA0\xAC\x9F\xB7\xB3\x40\x41\x22\xBC\x9F\x9F\xEC\x9D\xA6\xB8\x66\x93\x17\xBA\x41\x5C\xDD\xAC\x4F\x3D\x69\x06\x61\x62\x54\x43\x52\x6C\x4C\xBF\x59\x2C\x54\x86\x42\xC0\x19\xB8\xB3\x43\xBF\xE3\x91\x7C\x4A\xC1\x73\x7B\xB1\x62\xBF\x0F\xE3\x44\xC2\x40\x13\xFA\x6C\xC1\x40\x08\xC4\x88\xB6\x41\xA7\x59\x84\xBC\xC0\x23\x5B\xC0\x5F\xB2\xF6\x97\xC0\x02\xBE\x67\x62\xC2\x41\xC7\x04\x9F\xC9\x84\x4B\x2A\xC1\x4E\xCB\xBA\xF6\xA3\x46\xC8\xCA\x19\x99\xCA\x6C\xC4\xFD\xA3\x43\xCF\xCE\x21\xFF\x7F\xCE\xC2\x3E\xD1\xC0\x49\xCC\x00\x03\xD1\xA3\xC2\x0A\x78\xCD\xCA\xD1\x1D\x48\xDC\xCA\x6E\x4A\xF5\xCD\x45\xD5\x56\xD8\x48\xD0\xD6\x4E\x8C\xD9\x42\xD3\x54\xD0\xD9\x46\xD4\x81\x5C\xD9\xD6\xD9\x56\xDB\xD4\xCA\xD7\xF9\x81\x6A\xCC\xD1\x20\x6F\xD9\xD5\x46\x15\xC0\x08\xD0\xDB\x23",
			"\xCE\xCD\xCC\x48\x75\xC8\x47\x5A\xC9\x26\xFC\xC0\xC8\xDF\xFF\x66\xC7\xDF\x48\x72\xF3\xD7\x45\xE2\x8A\xF5\xD7\xE0\x48\x26\xE8\xDB\xE2\xD8\x18\x7D\xD1\x60\xE0\x6E\xD4\xE7\x45\xDD\x53\xD1\x76\xE1\xE6\x7B\xDD\x4C\xE3\xDC\x8E\xD7\xE3\xBC\xE8\x83\xDD\x46\xE6\x54\x98\xFA\xD9\xE8\xDD\x85\xF2\xBE\xEB\xCB\x88\xDA\xEF\x3D\xE9\xAC\xE7\xE3\xEC\x81\x01\xCA\x4E\xDD\xC1\x0A\x41\xE5\xED\xE8\xB0\xC6\x9F\xDE\xEC\x67\x52\xE6\xBE\xF2\x30\xFA\xEF\xBA\xD5\x37\xE5\xD6\xEC\xF3\x41\xC9\x4A\xF1\x55\x78\xC2\x40\xD9\x74\xD4\xE0\x4D\xF5\xD4\xCE\xC9\xCA\xE3\x45\xD1\xFB\xE0\xD1\xDC\xB6\xF5\xD5\x56\xC9\x9D\xC2\xE4\xEC\xFA\xC4\xD5\xEE\x49\xEE\xC6\xF9\xC6\xEF\xE8\x59\xEA\xF6\xE9\xFD\x4F\xF1\xF7\x47\xF7\x63\x61\x7C\xCD\x63\x75\x7D\xE4\x53\x7F\x80\xFE\x7F\x1C\x00\xDA\x62\x68\x04\xAF\x70\x23\x0B\x97\x22\xDA\x75\x59\x7B\x80\x1B\x7C\x25\x11\x8A\x82\xED\x13\x8F\x79\x9A\x45\x86\x7E\x09\x98\x7E\xD5\x3F\x7C\x76\x9B\x48\x79\x43\x24\x87\x7D\x47\x26\x65\x6F\x0A\x80\x05\x85\x23\x29\x84\xDC\x2B\x83\x7F\xE3\x75\x84\x40\x32\x83\x7F\x3F\x39\x83\x7C\x1E\x8A\x73",
			"\x23\x54\x57\x85\x40\x1D\x7D\x73\x8D\x08\x68\x69\x1B\x38\x77\xC0\x27\x85\x87\xA1\x5C\x83\x20\x48\x9E\x76\x42\x6F\x6F\x6C\x19\x9B\x7B\x7B\x32\x8D\x76\x41\x32\x80\x39\x84\x04\x39\x29\x0A\x3F\x8A\x41\x51\x89\x21\x2E\x9B\x8D\x21\x42\x81\x22\x18\xB7\x85\x6E\x44\x0C\x35\x73\x66\x89\x8D\x42\x09\x1F\x8C\x85\x16\x02\x8E\x75\x6A\x10\x63\x48\x6E\x3E\x39\x8A\x23\x11\x7B\x8A\x21\x1F\xFE\x86\x20\x46\x0C\x33\x23\x37\x49\x8D\xDD\x0D\x1C\x31\xBA\x5C\x04\x90\x09\x2E\x11\x23\x8A\x2F\x90\x48\x83\x27\x11\x93\x89\x20\x08\x78\x8A\x20\x48\x19\x96\x20\x5D\x4A\x92\x42\x11\x11\x91\x84\x21\x4A\x94\x09\x32\x10\x63\x42\x02\x8F\xC7\x5C\x30\x46\x1B\x24\x88\x13\xFE\x44\x6D\x1D\x70\x44\x73\x24\x66\x8A\x14\xB6\x97\x4A\x27\x93\x8E\x4E\x75\x77\x7A\x1C\xEE\x50\x35\x59\xAC\x5B\x68\xED\x62\x38\x8C\x71\x8B\x65\x5C\x82\x81\x20\x3E\x8F\x97\x95\x6B\x82\x20\xA4\x56\x3C\x7F\x7E\x52\x84\x0C\x9A\x34\x58\x6D\x65\x4F\x6D\xC2\x7C\x9B\x95\x67\x38\x9B\x76\x42\x3F\x6D\xAE\x98\x30\x8C\x6A\x30\x8D\x84\x03\x90\x8A\x72\x9D\x72\x16\x89\x60\x46\x05\x65\x98\x3A\xB2\x89",
			"\x23\xE7\x3C\x9B\x47\x06\x6D\x9E\x20\x12\x5F\x9C\x3C\x82\xA2\x20\x66\x96\x87\x4A\x30\x50\x23\x3D\xE5\x53\x20\x6A\x87\xA4\x9F\x65\x41\x47\x42\xB4\x58\x8C\x7D\x88\xA7\x4A\x23\x44\xA2\x9F\x48\x95\xA3\x31\x97\xA3\x47\x2C\x49\x21\xDD\x09\x9E\xA3\x84\x32\x80\x69\xE4\x86\x22\x7E\x10\xA2\x7C\x86\xAB\x59\xA5\x03\x21\x9E\x34\xBB\x4B\x92\x8D\xAC\x5B\x7B\x28\xA6\x98\x74\x30\x45\x49\x25\xA6\x96\x98\x06\xAF\x86\x42\x6C\x96\x20\x99\xAA\x9F\x4A\x27\x1A\xA6\x70\x57\x95\xA4\x83\x04\xAB\xA0\x65\x50\x47\x9B\x22\xAA\x21\x42\x76\xA7\xA9\x14\x6A\x23\x4A\x86\x2C\xA8\x7A\x97\x4D\x51\x13\xA7\x5E\x40\x5B\xA3\x20\x7F\x91\xAF\x4A\x93\x56\xA7\xA5\x61\xA8\x32\xB2\x82\x20\x42\x2C\xAB\x5C\xA8\x36\xA8\x54\xB6\xB4\x36\xAD\x01\x21\xA3\x59\xAD\x56\x99\x5B\x76\xAD\x39\xEF\x83\xAF\x47\x9D\x8B\x57\x1D\x41\xB1\x20\x58\xBE\x4D\x37\xDC\x55\x4D\x00\x49\x25\xAB\xEB\x50\x45\xAE\x7F\xA5\xB0\x83\x0E\xB6\x20\x66\xBE\xAB\x8E\x42\x56\xA6\x67\x54\xB3\x23\x97\xA3\x20\x5C\xFB\xA5\x4D\x68\x76\xA6\x5A\x9F\xAA\x21\x68\x82\x2A\xAE\xCD\xA5\x4F\x07\xC6\x89\x5D\x6A\x89",
			"\x26\x9E\xAE\x83\xB1\x61\xAC\x93\xB5\x99\x35\xB5\xAD\xDB\xAB\x5B\x08\xC6\x85\x0A\x9D\x3C\xBF\xAC\xDF\xBE\x4E\x08\xC6\x88\x0B\x70\x8A\x2D\xB5\xC8\x97\x49\x09\xC6\x8B\x0A\x9D\x19\xB2\x20\x98\x8E\xBD\x5E\x8B\xAD\x3B\x68\x83\x2B\xB4\xC5\x8E\x98\xBB\xCC\xAA\x20\x71\xDE\xB0\xBD\xF2\x86\x27\x8E\x8F\xA6\xB8\xBB\x4C\x0A\x5D\x80\x28\xB8\xB3\xEA\xB0\x39\x13\x46\x9F\x08\x3B\x6F\xBA\xB4\xF1\xA2\x38\x14\x46\x92\x0A\xFB\xA1\xB9\xAE\x7E\x53\x0A\x31\xD5\x06\x4E\x85\x86\x21\x04\xF9\xBA\x32\x15\x6D\xB0\x00\x03\xD0\xAE\xB5\x09\x77\x0A\x31\xD9\x06\x99\xEE\x80\x05\x73\x19\xA7\xC1\x82\x9C\x3B\x0B\xE5\xA5\x99\xC3\x03\x21\xA4\x69\xAD\xA4\xA3\x1D\x60\xC5\x9A\x1B\xD8\x30\x17\x46\x9E\x0A\x63\x94\xB9\x20\x48\x6A\x45\x42\x08\xC0\xC0\x76\x60\x0E\x4E\xCD\xA3\x8A\x42\x32\xCD\xA8\x08\xEB\x59\x0C\xC6\x83\x0E\x31\xF7\xB8\xC5\x84\x22\xC3\x20\x12\xA3\xC7\xBA\x65\x0C\xC1\x23\xC2\x25\x03\x29\xD4\x36\x19\x46\x98\x0C\x3B\x55\x96\x20\x4E\xC4\xBC\x61\xD9\xB2\x3B\x2B\xC3\x24\xC7\x3E\xC4\x5D\x89\xE5\x40\xCB\x84\x27\xC2\xCB\x24\xC2\xAE\x9F\x24\xA8\xC9\x28",
			"\xCD\x39\x0D\x0C\xCC\xCF\x93\xEE\xC2\x3A\x35\x06\x9C\x0D\x76\x59\x45\x42\x49\xC1\xCC\x76\x6D\x0C\xC1\x7A\xC6\x21\x99\xCA\xCE\x4E\x37\x06\x98\x0E\x76\x55\xA6\x41\x01\xDD\xCE\x62\x83\x82\x33\x34\xDA\xC1\x8D\xD0\x31\x0E\x3B\x7C\xCD\x99\x33\xCA\xAA\x38\xBB\x42\x0E\x63\xB4\x0E\x98\x67\xD6\x6D\x44\x0A\x21\xD3\x46\xC2\x3E\x0E\x9A\xDC\x31\x96\x97\xC3\xD4\x8B\x93\xD2\x38\x78\x04\x4D\xC2\x5E\xC5\xC8\x83\x3D\xA7\xC1\xD7\xA5\x4F\x1E\x4F\x90\x01\x3F\x06\x9A\xCE\x01\x35\x6F\xAD\xB5\xD6\xD4\xCD\x01\x12\xD6\x02\x24\x12\x31\xA5\xD4\xD8\x81\x21\x96\x20\x41\x84\xD0\xBB\x06\x1C\xC1\x53\x90\xDC\xCE\x1B\x27\x10\x83\xE3\x49\x8D\x9D\xB6\x5E\x92\xE5\x8E\x25\x11\xB1\x94\xDC\xAA\x09\x9B\x24\xF9\x85\x9D\x11\xE3\xD9\xD4\x8F\x29\x99\x80\x54\xA6\x9A\xFA\x48\x63\xDE\x64\xCD\xD8\xC6\xBA\x81\xDC\xBD\xF9\xDD\xC6\x5C\xFA\xC6\x98\x2E\x3B\x98\x4A\x02\xEA\x74\x80\xCA\x8E\xA7\xFD\xD9\xAA\x4D\xC2\xAB\xE0\xFD\x76\xDC\xD5\x0F\xE5\x88\x2E\xBC\xD4\x28\xE6\x5C\xA4\xD7\xE0\xC6\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_ShortType",
			L"_LongType",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_ShortType] BEGIN ",
			L"[7][_ShortType] END [ENDING]",
			L"[8][_ShortType]< \"const\" @ _ShortType >",
			L"[9][_ShortType]< \"const\" _ShortType @ >",
			L"[10][_ShortType]<< !_Name @ >>",
			L"[11][_LongType] BEGIN ",
			L"[12][_LongType] END [ENDING]",
			L"[13][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[14][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[15][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[16][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[17][_LongType]< _LongType \"*\" @ >",
			L"[18][_LongType]< _LongType \"const\" @ >",
			L"[19][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[20][_LongType]< _LongType @ \"*\" >",
			L"[21][_LongType]< _LongType @ \"const\" >",
			L"[22][_LongType]<< !_ShortType @ >>",
			L"[23][_Expr] BEGIN ",
			L"[24][_Expr] END [ENDING]",
			L"[25][_Expr]< _Expr \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[26][_Expr]< _Expr \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[27][_Expr]< _Expr \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[28][_Expr]< _Expr \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[29][_Expr]< _Expr @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[30][_Expr]<< !_Name @ >>",
			L"[31][_Expr]<< \"(\" !_Expr \")\" @ >>",
			L"[32][_Expr]<< \"(\" !_Expr @ \")\" >>",
			L"[33][_Expr]<< \"(\" @ !_Expr \")\" >>",
			L"[34][Module] BEGIN ",
			L"[35][Module] END [ENDING]",
			L"[36][Module]<< !_Expr @ >>",
			L"[37][Module]<< !_LongType @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubsetTokens, ModuleParserStates, PrefixSubsetAstInsReceiver>(&PrefixSubsetTokenDeleter, &PrefixSubsetLexerData, &PrefixSubsetModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[9][9] = {
			{0, 7, 7, 7, 7, 7, 7, 7, 7, },
			{7, 1, 7, 7, 7, 7, 7, 7, 7, },
			{7, 7, 2, 7, 7, 7, 7, 7, 7, },
			{7, 7, 7, 3, 6, 7, 6, 7, 7, },
			{7, 7, 7, 6, 4, 7, 6, 7, 7, },
			{7, 7, 7, 7, 7, 5, 7, 7, 7, },
			{7, 7, 7, 6, 6, 7, 6, 7, 7, },
			{7, 7, 7, 7, 7, 7, 7, 7, 7, },
			{7, 7, 7, 7, 7, 7, 7, 7, 8, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
