/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubsetModuleParser.h"

namespace prefixsubset
{
	void PrefixSubsetModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 2498; // 22343 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 194;
		static const vl::vint dataSolidRows = 9;
		static const vl::vint dataRows = 10;
		static const char* compressed[] = {
			"\x47\x57\x00\x00\xBA\x09\x00\x00\x08\x00\x01\x82\x80\x07\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x83\x06\x85\x0B\x0A\x9D\x0A\x85\x1A\x83\x16\x84\x6B\x01\x09\xBF\x7B\x8C\x8B\x8E\x84\x00\x1D\x9D\x9F\x81\x9C\x8B\x90\x93\x7F\x26\xA4\xA9\x81\x9B\x92\x92\x85\x93\x28\x9F\x8A\x99\x8A\x8F\x91\x97\x92\x2F\xB6\xB9\x8A\x9B\x9C\x95\x9E\x97\x35\xBC\x81\xBE\x93\xA0\xA2\x82\x98\x37\x9E\xB3\x8B\xA9\x82\x00\xA7\xA3\x3A\xC5\xB8\x92\xAA\xA4\xA9\x98\xAB\x49\xD7\x90\xA2\xAB\xAC\xA1\xAE\xA3\x03\xC8\xBF\x93\xAF\xAC\xB1\xB1\xA8\x65\xD5\xA9\xBA\xA7\xB4\xAF\x81\x01\x4F\xED\x9E\xA3\x84\x01\xBA\x81\x02\x76\x81\xA2\xB8\xA3\xB2\xB6\xB8\xB0\x02\xFB\xAB\xB9\xA4\xC5\xBC\xB7\xC0\x68\xFF\xA6\xA8\xCE\xB4\xC7\xB9\x85\x79\xA0\x89\xCE\xC0\xC2\xBF\xC8\xCB\x8D\x98\xCF\xDA\xC5\xCA\xC9\xCC\xCF\x9B\xA0\xDD\xC2\xC3\x80\x86\x82\x9A\x83\x8A\x80\x89\x88\xD2\xC6\xBE\xCA\x8B\x9C\xF1\xC2\xD3\xDC\xD0\xD9\xD7\xB2\xB8\xF4\xDA\xD6\xD9\xDF\xC2\xDF\x85\xFC\x82\xE9\xD3\xE6\xD7\xDE\x00\x09\x11\xFD\xC0\x0A\x02\xE7\xCA\x00\x0E\xAC\xC6\xC1\xE4\xE5\xEA\xE2\xEA\xD7\xD3\xDA\xE9",
			"\x8C\x06\xE7\xCF\xE5\xE0\xCF\xE1\xFF\xE2\xF5\xF0\xF3\xF3\xA1\xE3\xE9\xE6\xF1\xD5\x06\xEF\xD0\x0E\x6F\xE3\xCC\xF3\xF8\xF5\xFB\xF5\xF6\xB5\xF4\xFA\xF9\xFC\xDF\xFC\xDD\x0F\x32\x7C\x7D\x68\x10\x02\x8A\x6D\x04\x06\x87\x7A\x7B\x7D\x0C\x83\x8D\x82\x6E\x12\x09\x8F\x47\x04\x12\x8A\x44\x05\x64\x15\x0A\x40\x5D\x71\xB7\x4A\x8F\x7E\x87\xFD\x60\x88\x7F\x88\x0F\xA2\x8D\x64\x06\x91\x59\x05\x84\x87\xC0\x5B\x76\x76\x40\x1A\x11\x6B\x06\x86\x2E\x99\x7C\x8B\x6E\x26\x8E\x8A\x8E\x7F\x9F\x5E\x01\x67\x07\x34\xB7\x8B\x83\x8E\x39\xBC\x84\x88\x91\xD8\x5D\x8F\x46\x08\x2B\xAF\x8D\x8A\x90\x1F\x89\x9F\x92\x93\x38\x92\x95\x95\x8D\x4A\x8A\x43\x09\x93\x36\x94\x93\x92\x91\x25\x96\x94\x08\x97\x59\xB7\x84\x46\x74\x09\x66\x01\x92\x97\x51\x98\x93\x95\x97\x70\xA5\x9C\x9B\x67\x29\x24\x9F\x9A\x9C\x71\xB7\x91\x42\x0A\x76\x97\x90\x95\x88\x56\x9F\x95\x93\xA0\x56\x96\x48\x9B\x9C\x47\xA0\x98\x92\x9B\x7E\x88\xAD\x64\x0B\x7D\x82\xA1\xA1\x9B\x7F\x89\xA4\xA0\xA3\xCB\x6D\x01\xA4\xA5\x8E\x8B\xA5\xA5\x67\x2E\x1B\xA0\xA0\xA6\xCF\x6F\x02\xAA\xA5\x1F\x70\x07\xA9\x98",
			"\xA4\x9F\x61\x0F\xAA\x9E\x9D\xAA\xA3\xAC\x97\x9F\xA1\xAD\x9E\x8D\x83\x42\x0D\x64\x33\x30\xA4\xAE\x95\x34\x3E\xA5\xAE\x41\x35\x02\xB3\xA7\xA8\x09\x76\x0D\x9F\x0D\x91\x78\x06\xB1\xAB\xA8\x90\xBC\xAA\xAD\xBF\x8A\x49\x0D\x64\x3A\x0F\xB4\xB7\xB0\xB8\x8B\x7B\x0E\xB6\xB2\x9C\xB8\x9F\xB8\x01\x7C\x01\x65\x0F\xE0\x9D\xBC\xA6\xBA\xC8\xA1\xBF\x46\x0F\xE9\xA4\xB9\xAE\xBC\x3F\x31\xBA\x9F\xBC\xF7\x92\xA2\xB7\xAD\xF2\xBA\xB9\x40\x10\xF6\xB8\xB2\xC3\x72\x41\x3D\x92\x11\x64\x43\x01\xCE\xBE\xBB\xFB\x95\xBB\xB7\xB1\xD1\xB7\x84\x11\xC0\x45\x11\x66\x12\xC2\xEB\xBD\xB9\xC5\xBE\x1B\xC0\x07\x10\xC6\x9F\x48\x1D\x9D\x12\x0A\x4E\x5F\xC1\xC3\xE2\x9C\xCD\xB8\xBB\x11\xC6\x4B\x10\xC8\x2D\xEC\xC3\xB4\xC3\x09\x4C\x10\xCF\xCC\x32\xFC\xBA\xC9\x68\xC3\x25\xCA\x40\x5E\xDB\xB0\x4B\x6A\x41\xC9\x56\x5C\x42\x55\x30\x47\xDB\x58\x4C\x1B\x86\x4D\xD2\x71\x43\xC3\x4A\xD1\xCE\x30\x5B\x41\xD7\x5D\x86\x53\xDD\x85\xD2\x86\x4C\xDB\x98\xD4\x0A\x5A\xDE\x6E\xC9\xA7\x46\x65\x5C\xD2\x27\x64\xD3\x40\xD0\xE1\x82\xDA\x41\xD1\x6B\x6A\xD2\x41\x6B\x1D\xA7\xDB\xD1\xDA\x3F",
			"\xE8\xCE\xD9\x42\x70\xC6\x72\xD8\x8E\x5C\xE8\xD4\x4A\xDD\xC6\x70\x42\xDD\x40\x74\xFE\x64\xE3\xD6\x27\x4B\xEE\x6E\xE1\x79\xC1\xD7\x4B\xD5\x01\x7D\xD5\xDD\xD7\x78\xC7\xA6\x72\xE3\x80\xCD\xE8\xE4\x49\x87\xC0\x0C\xD8\xD5\x55\xD4\xE8\x72\xD9\x9F\xE1\x41\xE9\xE2\x38\x9C\xE5\xD6\xE7\x82\xEA\xE1\xE5\xDB\x93\xEF\xD9\xD5\xEA\x1D\x7F\xDF\xE8\x49\x4F\xC2\x41\xEB\xDE\x06\x6E\xE7\x4A\xEE\xBB\xDD\x4D\xED\x40\xC4\xE4\x46\xE9\x73\x46\xF8\xEC\x47\xF1\x00\x2C\xE0\xF3\x40\xBF\xC3\xFE\xF3\x46\xC9\xC5\xFF\x3C\xF4\xD5\xCA\xFA\x42\xF0\x24\x59\xF5\xF0\xF4\xE2\xDC\x4B\xF3\xED\xB1\xC6\xF9\x82\xE9\xDD\xE1\x45\xFB\xEB\xEF\xD5\xDC\xF6\x61\xA6\xE0\xFE\xFB\xF5\xDB\xE1\xD4\xFE\x42\xCC\xEB\x51\xFE\xD7\x9A\x7D\x40\xFB\x68\x77\x6F\xF0\x78\x7B\x7E\x56\x35\x7C\x01\x85\x77\x24\xF2\x7B\x79\x21\xFD\x7E\x6F\x01\xEB\x7E\x66\xAB\x36\x7D\x78\x17\x9B\x75\xE8\x23\x7A\x62\xED\x7F\x1E\x74\x96\x7E\x37\xFF\x56\x79\x7C\x8E\x19\x87\x75\x27\x95\x69\x0A\xB0\x2B\x84\xD8\x45\x81\x24\x2D\x80\x77\xEC\x24\x73\x7A\x81\x21\x85\x75\xF8\x71\x84\x0C\xB9\x88\x7F\x0D\xBA\x6D",
			"\x76\x7C\x68\x75\x09\x9B\x2A\x87\x8E\x05\x8E\x84\x3C\x83\x8B\x3F\x47\x8B\x22\x1F\x92\x76\x7B\x41\x96\x81\x12\xAF\x86\x89\x29\x8C\x83\x70\x56\x8C\x72\x0C\x89\x2C\x83\x9D\x45\x78\x84\x0B\x9A\x8B\xFD\x4A\x80\x7B\xAC\x26\x72\x7A\x24\x94\x88\x47\x23\x8C\x76\x99\x09\x81\x41\x4C\x8B\x89\x16\x8F\x7E\x85\x2B\xBB\x82\x89\x71\x8E\x88\xED\x50\x84\x68\x21\xAA\x8C\x88\x73\x9D\x70\x16\xCA\x8A\x8E\x1A\x80\x8D\x8F\xCD\x6A\x88\x1B\xA1\x20\x7B\x14\xA6\x76\x34\x12\x8A\x93\x04\x89\x2E\x90\x85\x10\x97\x72\x78\x81\x92\x07\x80\x99\x93\x4E\xBF\x8F\x1F\xAB\x7E\x8E\x1D\xD5\x8E\x93\x51\x9C\x25\x90\x1D\x9A\x78\x18\xD2\x85\x94\x31\xA4\x97\x93\x79\x93\x85\x2A\xDF\x86\x77\x44\x9F\x93\x91\x1D\x3D\x8A\x20\xA1\x23\x80\xAB\x3A\x93\x93\x1F\x9F\x6A\x00\xC2\x9E\x37\x5F\x9B\x96\x98\x1E\x88\x9A\xF6\x4A\x94\x96\x37\xA0\x6E\x99\xC3\x89\x22\xE9\x30\x2C\x99\xDD\x55\x9F\x75\x1F\x20\x60\x34\x88\x71\x33\x8F\x21\x71\x74\x1F\x28\x82\xD3\x15\x8B\x9A\xCE\x61\x76\x9C\xDB\x81\x22\x2E\xFF\x67\x93\x80\x26\x74\x9D\xAA\x32\x96\x3B\xF1\x9C\x8B\x5A\x86\x25\x9D\x00\x0B",
			"\x97\x3D\xF4\x96\x20\x5D\x91\x87\x20\xFC\x83\x23\x3F\x81\x28\x9E\xD3\x7A\x95\xA0\x96\x81\xA0\xD6\x09\x21\x3A\x83\x26\x75\xA1\x03\x26\xA2\x42\x5D\x39\x20\x84\x89\x26\x3D\x4D\x2A\x20\x46\x86\x20\x9D\x89\x89\xA2\x9A\xF2\x80\x01\x7C\x69\x93\xA0\x99\x10\x7D\x16\x91\x2C\x77\x0D\xE9\x91\x20\x5B\x29\xA2\x21\x16\x0C\xA4\xF4\x37\x11\x33\xD0\x45\x44\xA5\x0A\x38\x15\x4D\x8A\x27\xA6\x9C\x86\x21\x17\xDD\x8A\x22\x8A\x69\x90\x7A\x5D\x11\x32\x97\x33\x44\xAA\x42\x3B\x11\x32\xCE\x7C\x4A\xA9\x09\x3C\x15\x64\x50\x73\x4C\xA8\x86\x25\x17\x47\xAA\x20\x93\x3E\xA6\x20\x5F\x19\xA9\x21\x5B\xBC\xAA\x40\x3F\x1D\xA8\x85\x28\x02\xAC\x03\x20\x1B\x57\x86\x2A\x52\xAB\x83\x21\x18\x3B\xA9\x21\xA8\x6E\xA2\x20\x61\x11\x35\x09\x2C\xAD\x7D\x67\x56\x4F\x22\xD6\x6C\x72\xAF\xB3\x21\x97\x8D\x56\x40\x7A\x34\xAB\x66\x77\x21\xAB\x3A\x95\x68\x99\x21\xBF\x46\xB1\x34\x8D\x8C\x50\xC4\x1D\x38\x9E\xC0\xBA\x34\x73\x8F\xBB\xAC\xA3\x37\x89\xB2\x9D\x40\x04\x73\xD7\x87\x3A\x95\x25\xA1\x74\x8A\xA5\x6F\x46\xBA\x90\x7A\x62\xA8\x63\xB3\xD9\x3F\x6B\x9A\xCF\x36\x4B\x46\x83",
			"\x2D\xB2\x87\x46\x27\x6F\x96\xA2\xB4\xA3\x23\xAC\xA2\x9E\xA4\x98\x9A\xAC\x66\x74\x6C\x9F\x36\x4B\x08\x41\x87\x5E\x7E\xAA\xA1\x40\x39\xB8\xA7\xE5\x14\x41\xA3\x09\x39\x40\x74\xBD\xB3\xBB\x81\x37\x80\x9F\xAB\xB7\x44\x44\x47\xB3\x61\xE7\x25\xA0\xBB\xB1\xAC\x50\x8A\x5C\xBB\x61\x81\x10\xA2\x20\xC3\xA1\x36\x95\x43\xA4\xBA\x2A\x58\xB5\x21\xBF\xB2\x5E\x95\x49\xA3\x9D\x84\x3E\x45\xBA\x0B\xAD\xBF\x40\x33\xB2\x21\x00\x43\xB4\xB5\x00\xD7\xA2\x72\x82\x66\x4A\x10\x31\xBF\x5E\x95\xBA\xA3\x81\x84\xCC\x51\xB0\xAF\x2B\x22\x0B\xD7\x84\xF4\x3C\xB1\xA2\xC9\x8C\x57\x04\x0B\xCB\x3A\x69\xD4\x7A\x20\x0A\xC8\xB7\xBF\x37\x55\x4D\x42\x50\x70\x52\xFC\x81\x26\xC3\x01\x30\x7A\x7F\x86\x2B\xC2\xF9\x8C\x53\xAE\xA7\xB4\x66\x41\x2B\xC3\x21\xE7\x94\x4E\x4A\xA6\x46\xC4\x00\x2F\x54\xBD\xE7\x34\xC2\x20\x17\x40\xC4\x95\x3B\x5A\xC7\x60\x7D\xC7\x33\x3F\xC1\x22\x74\xB7\xCC\x51\x62\x7A\xC4\x59\x47\xC4\x42\x42\x49\xCC\xC1\x93\x56\xCE\x20\x3D\xA3\x20\x8A\xD5\xC2\xC6\xD2\x5F\x20\x41\xDC\x36\xC3\x8D\x4E\x51\xCA\x9C\x42\x20\xCC\x06\x36\xC4\xAE\x56\x47\x5A\x1D",
			"\xDF\x5D\xCC\xB3\x28\xCF\x40\x41\xCC\xC9\x1B\x66\x5A\xC7\xF0\x50\xCF\x81\x0A\x2B\xC9\x35\xCC\x55\x5E\x3A\xC5\x62\x9E\xC7\x36\xB8\x16\xE2\xCC\x4A\x07\x63\xD1\x71\x8A\x2A\xCC\x17\xF7\x41\x61\x3A\xD5\x62\xA2\x8A\x25\xD1\x39\xC7\xD0\x57\x17\x7A\xC6\xC8\x13\xD9\x21\x4A\xC2\x25\xCF\x8E\xD4\x48\xC9\x3A\xCF\x64\x4E\xE9\xCA\xC1\x42\xDE\xC9\x80\x86\x24\xCF\x81\x32\xC9\xD4\xAA\xD7\xCB\x40\x20\xD1\x20\x4F\xF7\x5D\xB5\xB6\xB8\x55\x4C\xE1\xC9\xD4\x79\x76\x66\xD4\xBA\xCC\xD3\xA5\xF2\x58\xAE\x1D\xCF\x0D\x4F\xBB\xCC\xD7\xB0\xF7\x50\x0B\x05\xD2\x08\xD9\x7C\xCB\xDA\xC0\x53\x0B\xC1\x2A\x3D\x4B\xBB\x06\x3C\x02\xB4\xCB\x36\x0B\x80\x58\xDC\xC3\xBD\xD7\x5F\x15\x0B\xC9\x0B\x05\xEF\xD4\x9B\x09\x2C\xBF\x40\x63\xB5\xCE\x2A\x5B\x09\x60\x31\x49\x20\xBB\xFE\xC7\x46\x2E\x01\x64\xBE\x03\x31\xDD\xBB\xB1\xDD\xCA\x81\x1A\xD9\x21\xFF\xDB\xDE\xBC\x5D\x04\x98\x81\x76\xD0\x00\xD0\x61\xE0\xB8\x82\xE7\x5E\x30\x1F\x7A\x21\x64\x0B\xC0\xAD\x9F\xB1\x22\x85\x0A\xE0\xD6\xF2\x46\x0D\x86\xCF\x3A\xDD\xB9\x55\xE2\xC7\xD9\xB4\x48\x1A\x05\xEB\x0D\x05\xFA\xDB\xE1",
			"\x03\x20\x48\xC0\xDB\xDF\x39\x36\x05\xE3\x39\x17\xE9\xC6\x42\x2A\xE6\x21\x10\x2C\xE7\xB0\x5E\x93\x34\xCD\xA8\xE8\xE3\x7B\x70\x0F\xE1\x09\x34\x0F\x82\xBB\xE2\x20\xCE\x46\xC3\xE5\xE1\xC2\x62\x1D\x2F\xEF\x39\x2D\x63\xC2\x21\x47\xFA\xBD\xCF\x82\x69\x0E\xA0\xC6\x25\x0F\x0B\xCA\x4C\x25\x8A\x26\xE6\xFB\xB7\xE1\x34\x7F\x01\x61\xD7\x86\x2E\xE8\x86\xC2\x60\x10\x0B\xC2\x11\x9F\x0E\xC2\x21\xB1\xF4\xDD\xDF\x39\xFA\x34\xDB\x81\x21\xEB\xB7\xFC\xDF\xEE\x02\x25\xED\xCA\xDF\xE6\xCD\xB8\xC7\x3D\xAA\x06\x37\xBE\xD9\xCB\x33\x11\x80\x40\xF3\x20\x7A\xF3\xEB\x72\x04\x1B\xC0\x43\x3D\x4F\x4C\xD9\xDC\xEF\x6C\x07\x1C\xE9\xCF\x0F\xAA\xEA\x01\x30\xF0\xCF\xB7\xDC\x50\x45\x16\xEB\x20\x8E\x0B\xC1\x89\xF5\xB6\x20\x0C\xC8\xEB\xF0\xCF\x30\x13\xC6\x9F\x39\xC6\xCC\xC0\x06\xF4\xAE\xE1\xE4\xAE\x12\x15\xE1\x4A\x0B\xC4\xC7\xA4\xE3\x23\x59\xE9\x42\xF2\xDD\x17\x11\x60\xBB\xE6\x22\x88\xA8\xFF\x32\x4C\x0B\xC2\x13\x7D\x43\xFB\x40\x30\xF6\xEF\x59\x9E\xB3\x39\x97\xE3\x22\xD6\xC4\xF1\x35\x4D\x01\x61\xFA\x02\x2A\xFA\xE2\xCF\x3C\x13\x05\xDE\x15\x4F\x86\x51\xF1",
			"\xD2\xCB\x3F\x13\xCF\xF2\x5E\xC8\xB9\xE2\x21\xF8\x95\xC3\xFD\xE7\x23\x15\xF2\xA1\x30\xCA\xEB\xEB\xFF\xC2\xEA\xDD\x36\x14\xE6\xE1\x22\x2A\x0B\xCD\xCD\xF4\xC1\x24\xFE\xCB\x5D\x7B\xC7\x1C\x0A\x21\x51\x0B\x0B\x67\x67\xC1\x3A\x10\x6D\x56\x10\xA3\x7D\x7C\xF7\x23\x0B\x01\x30\x63\x03\x1D\x80\xDB\x7F\x19\xB4\x01\x30\xAD\x70\x4D\x8A\x55\x35\x68\x51\x63\xDB\x4C\x3A\x32\x10\x82\xB5\x58\x12\x23\x8F\x0F\xC9\x5F\x52\x41\x5B\x7A\x2C\x19\x5B\xA0\x45\x70\x00\x01\x3A\x65\x40\x83\xDE\x4E\x82\xDF\x43\x83\xDC\x5F\x82\x34\x8B\x60\x38\x87\x83\x1D\x50\x7F\x22\x1A\x5A\x00\x44\x57\xE8\x6F\x74\x37\x85\x58\x1F\x19\x42\x14\x78\x34\xEF\x59\x7F\xD1\x37\x84\xDD\x4B\x84\x5B\x77\x83\x9C\x32\x13\xA1\x52\x3A\x5D\x3A\x4B\x20\x88\x85\x1F\x1A\x85\x21\x52\x13\xF1\x30\x00\xFF\x3E\x58\x1F\x1F\x37\x1D\x83\x10",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_ShortType",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_ShortType] BEGIN ",
			L"[7][_ShortType] END [ENDING]",
			L"[8][_ShortType]< \"const\" @ _ShortType >",
			L"[9][_ShortType]< \"const\" _ShortType @ >",
			L"[10][_ShortType]<< !_Name @ >>",
			L"[11][_LongType] BEGIN ",
			L"[12][_LongType] END [ENDING]",
			L"[13][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[14][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[15][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[16][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[17][_LongType]< _LongType \"*\" @ >",
			L"[18][_LongType]< _LongType \"const\" @ >",
			L"[19][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[20][_LongType]< _LongType @ \"*\" >",
			L"[21][_LongType]< _LongType @ \"const\" >",
			L"[22][_LongType]<< !_ShortType @ >>",
			L"[23][_Expr0] BEGIN ",
			L"[24][_Expr0] END [ENDING]",
			L"[25][_Expr0]<< !_Name @ >>",
			L"[26][_Expr0]<< \"(\" !_Expr \")\" @ >>",
			L"[27][_Expr0]<< \"(\" !_Expr @ \")\" >>",
			L"[28][_Expr0]<< \"(\" @ !_Expr \")\" >>",
			L"[29][_Expr1] BEGIN ",
			L"[30][_Expr1] END [ENDING]",
			L"[31][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[32][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[33][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[34][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[35][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[36][_Expr1]<< !_Expr0 @ >>",
			L"[37][_Expr] BEGIN ",
			L"[38][_Expr] END [ENDING]",
			L"[39][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[40][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[41][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[42][_Expr]<< !_Expr1 @ >>",
			L"[43][Module] BEGIN ",
			L"[44][Module] END [ENDING]",
			L"[45][Module]<< !_Expr @ >>",
			L"[46][Module]<< !_LongType @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubsetTokens, ModuleParserStates, PrefixSubsetAstInsReceiver>(&PrefixSubsetTokenDeleter, &PrefixSubsetLexerData, &PrefixSubsetModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
