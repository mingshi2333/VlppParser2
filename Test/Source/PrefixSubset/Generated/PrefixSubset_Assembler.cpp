/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubset_Assembler.h"

namespace prefixsubset
{

/***********************************************************************
PrefixSubsetAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> PrefixSubsetAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = PrefixSubsetCppTypeName((PrefixSubsetClasses)type);
		switch((PrefixSubsetClasses)type)
		{
		case PrefixSubsetClasses::CallExpr:
			return new prefixsubset::CallExpr();
		case PrefixSubsetClasses::ConstType:
			return new prefixsubset::ConstType();
		case PrefixSubsetClasses::FunctionType:
			return new prefixsubset::FunctionType();
		case PrefixSubsetClasses::MemberName:
			return new prefixsubset::MemberName();
		case PrefixSubsetClasses::MulExpr:
			return new prefixsubset::MulExpr();
		case PrefixSubsetClasses::Name:
			return new prefixsubset::Name();
		case PrefixSubsetClasses::PointerType:
			return new prefixsubset::PointerType();
		case PrefixSubsetClasses::TypeOrExprToResolve:
			return new prefixsubset::TypeOrExprToResolve();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void PrefixSubsetAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = PrefixSubsetCppFieldName((PrefixSubsetFields)field);
		switch((PrefixSubsetFields)field)
		{
		case PrefixSubsetFields::CallExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::CallExpr::args, object, field, value, cppFieldName);
		case PrefixSubsetFields::CallExpr_func:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::CallExpr::func, object, field, value, cppFieldName);
		case PrefixSubsetFields::ConstType_type:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::ConstType::type, object, field, value, cppFieldName);
		case PrefixSubsetFields::FunctionType_args:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::FunctionType::args, object, field, value, cppFieldName);
		case PrefixSubsetFields::FunctionType_returnType:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::FunctionType::returnType, object, field, value, cppFieldName);
		case PrefixSubsetFields::MemberName_parent:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::MemberName::parent, object, field, value, cppFieldName);
		case PrefixSubsetFields::MulExpr_first:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::MulExpr::first, object, field, value, cppFieldName);
		case PrefixSubsetFields::MulExpr_second:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::MulExpr::second, object, field, value, cppFieldName);
		case PrefixSubsetFields::PointerType_type:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::PointerType::type, object, field, value, cppFieldName);
		case PrefixSubsetFields::TypeOrExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&prefixsubset::TypeOrExprToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void PrefixSubsetAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = PrefixSubsetCppFieldName((PrefixSubsetFields)field);
		switch((PrefixSubsetFields)field)
		{
		case PrefixSubsetFields::MemberName_member:
			return vl::glr::AssemblerSetTokenField(&prefixsubset::MemberName::member, object, field, token, tokenIndex, cppFieldName);
		case PrefixSubsetFields::Name_name:
			return vl::glr::AssemblerSetTokenField(&prefixsubset::Name::name, object, field, token, tokenIndex, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
		}
	}

	void PrefixSubsetAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = PrefixSubsetCppFieldName((PrefixSubsetFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* PrefixSubsetTypeName(PrefixSubsetClasses type)
	{
		const wchar_t* results[] = {
			L"CallExpr",
			L"ConstType",
			L"FunctionType",
			L"MemberName",
			L"MulExpr",
			L"Name",
			L"PointerType",
			L"QualifiedName",
			L"TypeOrExpr",
			L"TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 10 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubsetCppTypeName(PrefixSubsetClasses type)
	{
		const wchar_t* results[] = {
			L"prefixsubset::CallExpr",
			L"prefixsubset::ConstType",
			L"prefixsubset::FunctionType",
			L"prefixsubset::MemberName",
			L"prefixsubset::MulExpr",
			L"prefixsubset::Name",
			L"prefixsubset::PointerType",
			L"prefixsubset::QualifiedName",
			L"prefixsubset::TypeOrExpr",
			L"prefixsubset::TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 10 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubsetFieldName(PrefixSubsetFields field)
	{
		const wchar_t* results[] = {
			L"CallExpr::args",
			L"CallExpr::func",
			L"ConstType::type",
			L"FunctionType::args",
			L"FunctionType::returnType",
			L"MemberName::member",
			L"MemberName::parent",
			L"MulExpr::first",
			L"MulExpr::second",
			L"Name::name",
			L"PointerType::type",
			L"TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 12 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubsetCppFieldName(PrefixSubsetFields field)
	{
		const wchar_t* results[] = {
			L"prefixsubset::CallExpr::args",
			L"prefixsubset::CallExpr::func",
			L"prefixsubset::ConstType::type",
			L"prefixsubset::FunctionType::args",
			L"prefixsubset::FunctionType::returnType",
			L"prefixsubset::MemberName::member",
			L"prefixsubset::MemberName::parent",
			L"prefixsubset::MulExpr::first",
			L"prefixsubset::MulExpr::second",
			L"prefixsubset::Name::name",
			L"prefixsubset::PointerType::type",
			L"prefixsubset::TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 12 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> PrefixSubsetAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = PrefixSubsetCppTypeName((PrefixSubsetClasses)type);
		switch((PrefixSubsetClasses)type)
		{
		case PrefixSubsetClasses::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::CallExpr, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::ConstType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::ConstType, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::FunctionType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::FunctionType, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::MemberName:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::MemberName, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::MulExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::MulExpr, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::Name:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::Name, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::PointerType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::PointerType, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::QualifiedName:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::QualifiedName, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::TypeOrExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::TypeOrExpr, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubsetClasses::TypeOrExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset::TypeOrExprToResolve, prefixsubset::TypeOrExprToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
