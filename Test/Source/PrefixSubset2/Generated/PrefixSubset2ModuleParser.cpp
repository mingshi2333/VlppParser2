/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubset2ModuleParser.h"

namespace prefixsubset2
{
	void PrefixSubset2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3710; // 34003 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 126;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\xD3\x84\x00\x00\x76\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x9E\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC3\xE1\x42\x18\x95\xEB\xC0\x03\x18\x8D\xE4\x1A\x85\x19\x9D\xEF\xCE\xE1\xD9\xE6\x66\x15\xEB\xCC\x96\xE7\xEA\xAF\x19\xAB\xFE\xCE\xE5\xEB\xB4\xE6\x78\x1A\xE2\x99\xDC\x8A\x1A\x86\x6B\x38\xE7\xE7\x72\x6D\x1A\x8E\x19\xEC\x92\xEE\xE2\xE3\x40\x6F\x04\xF8\xE7\xEF\x77\xE8\xE6\xE8\x1C\xCA\xCB\x71\x1E\x86\x72\x0D\xE3\x1E\x86\x74\x11\xFD\xF3\xF6\x41\xD2\x52\x41\x7F\x02\x7D\x51\xB0\x4D\x0A\x0D\x48\x54\x66\x7F\x74\x48\xF9\x6B\x34\x67\x96\x42\xFB\xAD\x65\xF9\x43\xFA\x64\xE4\xFA\x42\xF8\x7F\x74\xF1\x7A\xFA\x58\x6D\xF2\xB8\x79\xF2\x66\x22\xFE\x64\x3A\x2E\xB0\x34\x20\x7C\x01\x38\x7E\xC0\x76\x79\x20\xEB\x0A\x3B\x80\x34\x27\x83\xAF\x08\x80\x00\xEF\x4A\x3D\x80\xE9\x6B\x24\x05\x8A\x85\x7F\x95\x01\x83\x20\x0E\x81\x3C\x05\x96\x82\x85\x5F\x50\x81\x82\x28\x27\x84\x0A\xA1\x28\x82\xF6\x6B\x22\x85\x2B\x9F\x21\x0B\xCA\x34\x27\x19\xBB\x7B\x25\x36\x84\x3D\x0D\xFD\x78\x86\x1E\xA8\x21",
			"\x87\x31\x8C\x86\x0F\xA5\x20\x89\x20\x9F\x23\x83\xF4\x4C\x82\x41\x21\x84\x81\x21\xA1\x23\x84\x58\x25\x8A\x11\xD0\x80\x2C\x29\x81\x8E\x8A\x31\x88\x8B\xF8\x1E\x86\x7C\xB0\x30\x7F\x7B\x58\x3F\x82\x40\x58\x80\x25\x2F\x81\x20\x86\x21\x22\x8D\x40\x6A\x84\x3C\x33\x95\x81\x8C\xBE\x6D\x8D\x1C\xCA\x83\x20\x32\x9F\x26\x8D\x68\x80\x24\x1B\xEC\x8E\x7E\x69\x5C\x89\x21\x14\x9B\x86\x01\x9A\x8F\x56\x3B\x91\x84\x8A\x7F\x26\x92\x20\x99\x88\x24\x2D\xBA\x5C\x8E\x07\x31\x8A\x13\xA0\x28\x91\xD6\x0A\x94\x90\x7E\x9F\x87\x24\xB2\x8B\x93\x7F\x0E\x93\x81\x7F\x8B\x8B\xF9\x1D\x99\x8E\x14\xAE\x89\x90\xA1\x95\x8F\x28\x83\x98\x24\x3C\xB0\x89\x21\x7C\x8F\x85\x27\xEE\x84\x84\x00\xB3\x8A\x96\xAC\x85\x25\x29\x91\x87\x95\x57\x86\x26\x90\xBB\x9D\x8E\x00\xBE\x93\x21\x58\xA9\x83\x96\xBF\x4C\x8C\x2A\xC7\x99\x97\x90\x01\x9B\x25\xBD\x80\x2C\x1B\xC0\x98\x99\xF9\x44\x9A\x20\xC6\x9A\x95\x35\x86\x25\x96\x48\x81\x23\x99\xDA\x8D\x98\x48\x4F\x9D\x95\x5B\xA8\x23\x9A\xAB\x8C\x91\x49\x2E\x92\x9A\x85\x19\x9E\x99\xDB\x83\x21\x37\xA9\x90\x8C\xB0\x24\x99\x9C\xEA\x81",
			"\x25\x34\xFF\x28\x9C\x7B\xB1\x9B\x21\xD7\x8B\x8D\x3A\xAE\x85\x9D\x4C\xA5\x22\x99\x92\x82\x9C\x27\x8A\xAF\x1F\x4B\x9A\x94\xA1\x9F\x9D\x83\x39\xDD\x89\x7E\x52\x9D\x96\xA1\x44\x97\xA2\x46\x8C\xA8\xA2\x21\x90\xA7\x7E\x49\x94\x9D\x75\x09\xA9\x9E\x90\x1D\xA6\xA4\x1B\xA5\xA7\x42\xAA\xAD\xA1\x94\x84\xA1\xA3\x1F\xBC\x2D\x48\x93\xAD\x80\x92\xAF\xA6\xA3\x2C\xA7\xA7\x4A\xB7\xA8\xA4\x8E\xAE\xA4\x86\x3D\x91\xA6\x41\x1C\x8F\x76\x6F\x84\x23\xA0\x40\xAC\x98\x4B\xEE\x88\x30\x36\xB3\x9A\xA9\x3C\xBF\x23\x3D\xFA\x96\x27\x76\x86\xA0\xA7\x51\xAD\xA6\x4F\xDB\xA9\xA7\x9F\xB7\x87\xA1\x5D\xA2\xAB\x40\x44\xA7\x74\xA3\x8C\x8B\x91\x59\xBA\xA6\x56\xE1\xAC\xAD\xB4\x9D\x91\xA2\x45\xA2\xA7\x51\xFE\x9C\xA1\xA9\xA5\x89\x2F\x01\xA0\x03\x6A\x74\xAC\xA4\xBB\xB7\x88\xAF\x56\xA6\x23\x5E\x89\x9E\xAA\x1D\x81\xAC\xA5\x95\x97\x83\x5B\x85\x95\xB0\x23\x87\x88\xA4\x5B\x94\xA6\x28\xFC\xA9\xAA\xBF\xBF\x1A\x38\x6D\xA9\xA8\x4C\x99\xBF\xAB\x92\x27\xAE\xB1\x64\xAE\xB3\x3F\x16\xBC\xA9\xBC\x8F\xA8\x9F\x59\xB8\xB2\x5B\xDC\xAB\xB4\x96\x9F\xB6\x88\xA1\xAE\xB2\x65\xB1",
			"\xB6\x88\xD2\x80\xB4\x9F\x0A\x23\xB1\x6B\x16\xB6\xB2\xB5\xB4\xB1\x88\xBC\xB6\xA0\x43\xAA\xBA\xB2\xAC\x85\xB8\x24\xAF\xA1\x8B\x3E\xF1\x77\xB7\xDD\x9D\x94\xB8\x9D\xA6\xB9\x74\xBD\xAC\xB2\xC3\xA8\x21\xB9\x31\x9F\xB5\x0C\xB6\xB5\xAA\xE6\x97\xAB\x9C\xCF\xAD\xB2\x63\xD8\xBB\x84\x5A\xB9\xA8\x9C\xF0\x83\xBA\x78\xC6\x84\xBC\x53\x8A\x23\x97\x7B\x88\xAB\x74\x9F\x20\xBA\xEB\x9B\xB5\xB5\xF8\xA7\xBB\x47\x6D\xB1\x82\xED\xAB\x83\xB6\xC2\xAB\xA9\x73\xCA\x3C\x8C\xDD\x8F\x81\xC0\xF9\xB3\xBF\x3F\x7E\xB8\x85\xE0\xAA\xBC\xB5\xFA\xBF\x1C\x7F\xC2\x97\x3B\xBC\x94\x9F\xC1\xD5\xA2\xB7\x84\xD0\x99\x98\x73\xA8\xB1\xC2\xF5\xA2\xB6\x5A\x9B\xC5\xA1\x61\x81\xB5\x98\xF2\xB6\xBD\x7A\x99\xC0\xB5\x4E\x8C\xC1\x82\x08\xA7\xC5\x3D\xFF\x2F\xC4\x9A\x35\xC3\x25\x37\xC8\x25\x8E\xA5\x2B\xC7\x90\x3D\xC0\x24\x3F\xDF\x20\x1B\xEE\x86\xA8\x22\xF2\xAD\xA9\xDD\xBE\xBA\x41\x21\xC8\xC6\x17\xCE\xCC\xA1\x41\xCB\xC3\x93\xAC\xA1\xCB\x91\x30\x69\xC9\x01\x35\x97\x48\x14\x84\x82\x37\xB9\x84\xAC\x03\x9E\xC8\x64\x82\xB8\xCB\x80\x35\xBD\xBE\x4C\x83\x24\x1B\xF5\xBB\xCC\x77",
			"\x94\xA1\xC9\xF2\x29\x21\x7D\xF1\xCB\xC8\x85\x34\xC8\x84\x65\xC0\x03\x00\x86\xC5\xAA\x30\xE3\xCB\x20\x7C\xD6\x27\x7E\x09\x2F\xCB\xF7\x8A\x23\xD0\xBF\x9F\xCE\x40\x01\xD3\x25\x06\x03\xC1\x81\x86\xC9\x22\xA3\x84\xDA\xD0\xD5\x39\xCD\xD0\xD6\x94\xD2\x4C\x89\x2C\xD0\x85\x01\x43\xD3\x26\xC6\x23\xA7\xC3\xA9\xB7\x3C\xCC\x46\x20\x19\x49\x21\xAA\x86\x2C\x45\x32\xFA\x42\xD3\x06\x2F\xD6\x41\x44\x49\x20\x25\x49\xD1\x21\xB4\xD3\xD5\x44\x0A\x23\x4B\x84\x3D\xD6\x20\xBF\xC3\x22\x05\x79\xC5\xBF\x91\x2E\x89\x07\x24\x95\x95\x2D\x93\xD9\xCF\x84\x3A\x01\xD9\x71\x83\xD5\xB3\x83\x2B\x06\x68\xDC\xD2\x21\xB2\xC9\xCA\x1B\xBC\x06\xDB\x50\xC3\x22\x59\x65\xCE\x8D\x0F\x5D\xD3\xAC\x85\x30\x01\xCF\x6E\x9E\x04\xB9\x82\x2E\x8C\x49\x61\xDA\x21\x3F\x0B\xDD\x96\x8A\x24\x53\x77\xC9\x20\x08\xF2\xC0\x00\x05\xA2\x08\xDC\x85\x01\x09\xDF\xB5\x80\x52\xBD\x86\x22\x09\x7C\xF9\x83\x03\xD3\xC9\x23\x10\x06\xEA\x20\x84\xC9\xE3\x20\x44\x19\xDD\xA0\xA9\x5F\xE0\x81\x05\x0A\xE2\x0A\x34\xE1\xC5\x80\x06\x09\x7C\xC3\x84\x06\x1B\xE1\x23\x11\x79\xDE\x8D\x1D\x3D\xD9\x21",
			"\x48\x19\xDC\x05\xF8\x53\xE1\x81\x09\x08\xE0\xF0\xC7\xE6\x41\x4A\x08\xE3\x84\x17\x5D\xE5\x02\x2B\x08\xC3\x89\x2F\x5A\x9C\xC1\x24\x09\x35\xE6\x21\xB8\x3E\xE0\x01\x26\x3B\xE6\x20\xEA\x44\xEA\x13\x79\xD5\x0F\x3C\xE8\xB8\x37\xBA\x4F\x2A\x86\x4F\xED\x3B\xC4\x86\x52\x57\xE6\xAA\x6E\xBE\x95\xD7\x50\x5D\x79\x84\x82\x03\x87\xB4\x6D\x62\xC9\x3C\xEE\x57\xD8\x90\xEB\x39\x86\xD8\xD0\xEB\x3C\x26\xAB\xEB\x79\x00\x18\xD0\x7E\x3A\x51\xC6\x83\x08\xD2\x9E\xEB\x24\xAE\x91\xBA\x36\xEC\xCD\x7A\xCE\xC3\xB4\x3A\x54\xB3\x95\xC9\x21\x53\xC4\xF0\xCB\xB5\x95\xBD\xA0\xE3\x3A\x57\x56\xDC\x9F\x78\x91\x89\x23\x9D\xCC\x4A\x57\x6C\xC2\x27\xED\x54\x6C\x8B\xDD\x94\xFB\x3D\x5C\xF8\xEA\xEB\x93\xFF\x9B\x7A\x3A\x56\xD7\xC3\xC2\xD9\x8E\xB5\x94\x83\xE6\x81\x21\xF5\xAE\xEB\x3B\x4C\xDF\xBD\x39\xD6\xF6\xE7\xD1\xD1\xEB\x3D\x4C\xB1\xEB\x3A\xDA\x8A\x23\xF0\x6C\xB6\xF1\x3D\x1A\x0D\x72\xB4\xBE\xF5\xED\xF5\x0E\xE7\xF1\x5A\xE6\xF2\x40\x1E\xFC\xF3\xF4\x2E\x49\xF7\x8D\xEA\x23\xAA\x9C\x4A\x56\x38\x50\xFB\x3D\x96\xE1\x22\xE3\xD4\xF0\xF2\xE6\x4A\x24\xF9\x01\x20\xFE",
			"\xEB\xE9\x3E\x03\x47\xC7\x54\xAC\x39\x82\xFC\xD5\xCB\x3A\x56\x7E\xE0\xD3\x20\xEE\xD3\x2B\x9B\xE1\x7B\xD6\xC9\xFF\xF0\x3F\x16\x28\xED\x7A\x43\xF3\xDF\x5A\xF5\xF5\xF8\xE9\x1E\x29\xFA\x78\x1F\xCA\x7D\x7F\x06\x15\x7A\x33\x6C\x7D\xE9\x17\x2A\x09\x1E\x46\xE7\x63\x80\x03\x13\x7D\x09\x82\x10\xC3\x6E\x6B\xF7\x70\x39\xC6\x39\x10\x15\x86\x10\xE5\x70\x80\xF8\x14\x2B\xB2\x23\x03\x19\x3B\x81\x03\x1F\x01\x17\x8C\x24\x20\x72\x2B\xBE\x27\x7D\x1A\x8A\x10\x7C\x2E\x81\x1C\x20\x6E\xC8\x76\x10\xD1\x23\x83\x1C\x26\x25\x16\x80\x83\xB9\x3B\x83\x01\x18\x83\x1C\x87\x82\x86\x25\x2D\xB2\x27\x73\x36\x8C\x24\x3E\x85\x82\x40\x87\x28\x3A\x0A\x21\x26\x7C\x82\x06\x17\x84\x02\x1F\x82\x73\x7B\x1E\x3D\x75\x84\x01\x13\x74\x56\x87\x28\xB0\x76\x10\xC1\x7A\x83\xDE\x7A\x75\x5B\x83\x10\xAD\x7C\x78\xEB\x1E\x03\x80\x79\x23\x71\x41\x86\x02\x1B\x7A\xE3\x78\x1F\x49\x72\x7F\xE9\x18\x80\xA2\x79\x10\x6A\x83\x87\x53\x89\x1E\x2C\x7F\x3E\x0A\x1F\x30\x10\x84\x81\xFF\x38\x7B\x06\x13\x86\xE6\x1A\x2B\x1D\x3D\x87\x86\x20\x88\xA6\x72\x10\x88\x8B\x86\x49\x83\x1E\x29\x36",
			"\x88\x87\x27\x7C\x89\x81\x10\x8B\x86\x87\x0A\x88\x1F\x31\x3D\x80\x0A\x1A\x33\x90\x86\x7D\x7A\x89\x10\x5D\x80\x6C\x8D\x86\x1E\x44\x3E\x84\x1C\x21\x8A\x03\x1D\x81\x77\x88\x1F\x4A\x30\x89\x52\x36\x8A\x02\x18\x8A\x02\x16\x82\x5E\x87\x28\x5A\x30\x89\x68\x30\x8B\x01\x12\x8B\x01\x12\x85\x97\x8C\x21\x6C\x30\x89\x57\x69\x85\xE3\x12\x89\xB1\x83\x8A\xA6\x3D\x3A\xC6\x84\x89\xC8\x8C\x3A\x9E\x3F\x7C\xA2\x85\x8B\xE3\x1A\x37\xBA\x87\x28\xD0\x89\x8A\xCD\x84\x1B\x7D\x30\x89\x86\x35\x8D\xD7\x83\x8B\xD9\x88\x1B\x89\x30\x89\x8C\x3E\x8D\x2E\x81\x8E\xDD\x14\x39\x90\x80\x3A\xD5\x8E\x89\x03\x11\x6C\xCD\x78\x1F\xA2\x35\x8D\xE3\x1E\x8E\x02\x1A\x8A\xBF\x8C\x24\xA4\x30\x89\xB0\x3D\x8E\x0A\x14\x8B\xAB\x8C\x21\xB7\x30\x89\xBB\x3E\x8F\x09\x1E\x8B\xF1\x8C\x21\xBD\x30\x89\xC1\x35\x8D\xF8\x82\x10\x75\x8D\x86\x18\x8D\x3A\x00\x93\x10\xDF\x87\x75\xDD\x79\x81\x06\x18\x90\x01\x16\x8F\x18\x9A\x75\xAD\x32\x70\xD1\x81\x90\x4C\x23\x3C\xF4\x86\x1E\x22\x98\x8D\xD2\x86\x1E\xC9\x30\x89\xD3\x35\x8D\x29\x90\x8E\x2B\x9A\x1B\xD5\x30\x89\xD9\x30\x93\xE7\x83\x93",
			"\xBC\x1D\x74\x90\x87\x07\x19\x3E\x7E\x23\x99\x8F\x86\x28\x07\x8D\x30\x94\x2A\x94\x92\x86\x29\x07\x71\x4B\x07\x3F\x9F\x8F\xE8\x8B\x1C\x7C\x01\x47\x7E\x0D\x94\x07\x9F\x94\x23\x1F\x07\x71\x41\x08\x19\x33\x28\xBA\x6A\x93\xB4\x12\x08\x67\x8B\x27\x1A\x2C\x95\x93\x82\x91\x4C\x24\x08\xFF\x37\x08\x71\x41\x93\x96\x82\x10\x25\x0A\x10\x8C\x2E\x95\xC5\x3D\x3A\x8F\x29\x10\x71\x98\x94\x1A\x98\x81\xF1\x73\x10\x77\x92\x94\x87\x29\x08\x8D\x35\x6F\x06\x1D\x97\x09\x9C\x24\x8A\x0D\x38\xF9\x7D\x95\x78\x93\x1E\x8B\x0F\x3F\xE3\x14\x96\x13\x81\x10\x89\x95\x96\x64\x89\x1E\x8E\x06\x7E\x92\x01\x47\x6F\x9A\x89\x09\x12\x80\x8A\x9E\x97\xE3\x14\x09\xE6\x73\x1E\x82\x9A\x4A\x9D\x9A\x10\x0C\x8B\x98\xB3\x3E\x39\x9E\x94\x99\x83\x8B\x1E\x98\x0C\x75\x9D\x01\x47\xA0\x2F\x7E\x02\x15\x9B\x9F\x95\x98\x86\x2F\x09\xA3\x96\x1E\xB1\x27\x6B\x06\x18\x9B\xAE\x9C\x77\xEB\x13\x0A\x5C\x78\x0A\x71\x4B\x82\xA4\x69\x10\xA9\x93\x10\x2A\x06\x95\x0A\x1A\x0A\x8D\x3D\x9C\x02\x1F\x02\xD0\x99\x10\xAB\x01\x47\xAD\x09\x31\x1A\x73\x10\xD4\x9F\x91\x7E\x7D\x3A\xDD\x97\x9B\xD7",
			"\x91\x9E\xE6\x16\x9D\xA7\x92\x97\x70\x7D\x3A\x0F\x86\x10\xCF\x9A\x9E\xCB\x1E\x0A\x8D\x3D\x9E\x03\x18\x9E\xAA\x9A\x1B\xAF\x01\x47\xB1\x09\x31\xBF\x93\x10\xE2\x75\x99\xF8\x12\x0B\xBD\x9A\x1B\x4B\x8C\x99\x06\x1D\x9F\x91\x96\x96\x86\x26\x0B\x5C\x7B\x0B\x71\x48\x85\xA6\x96\x10\x22\x88\x6B\xE5\x93\x10\xBD\x0E\x98\xE6\x1F\x2E\x06\xA3\x10\x13\xA0\x87\xF7\x9C\x1B\xC0\x06\x7E\xC4\x01\x47\x08\x30\x6B\x03\x19\x82\x06\x10\x82\x1F\xA4\x1B\xC6\x0D\x38\x28\xA3\x10\xCA\x90\x9A\xE6\x17\x0C\x71\x49\x0C\x19\x31\xA3\x02\x1D\xA1\x32\xA9\x8C\x9E\x32\x83\x03\x1A\xA2\x3B\xAC\x1B\xCA\x0D\x38\x3E\xA2\x10\x38\xA0\x9E\x1C\x2B\x0C\x71\x4D\x0C\x19\x35\x83\xFE\x95\xA1\x02\x1E\x0C\x61\x9B\x1C\x27\x32\x2B\x4E\xA2\x10\x82\x84\x9C\xE9\x10\x0D\x53\xA3\x12\x8F\x89\x85\x57\xA1\x10\x6C\x80\xA0\x1C\x22\x0D\x5D\xAA\x10\x2D\x36\xA5\x67\xA5\x66\xE3\x14\x0D\xFF\x37\x0D\x71\x49\x89\x1E\xA3\x10\x44\x83\x10\x42\x8B\xA2\xB8\x19\x0D\x8D\x35\xA0\x06\x1D\x9A\xBA\x97\x28\xDA\x0E\x66\xE9\x18\x33\x90\x8C\xA7\x1C\xA0\xA5\x01\x14\x0E\xFF\x78\x1F\x42\x32\x2B\x4D\x86",
			"\x10\x77\xA1\xA4\xB4\x10\x0F\x8D\x3F\xA8\x03\x16\xA8\x7F\xA3\x1E\xF1\x01\x47\xF3\x09\x31\x55\x86\xA7\x88\xA0\x00\xF4\x0D\x38\x10\xA2\x10\x91\xA9\xA9\xE6\x15\x0F\x8D\x36\x86\x74\x81\xAA\xF6\x01\x69\xF8\x15\x8A\x59\x8C\xAA\x7D\xA1\xAA\xFC\x02\xA8\xAC\x81\x47\xB4\xA3\x10\x1E\x9A\xA0\x87\x26\x00\x24\x4B\x4B\x23\x1F\x8A\xB3\xAA\x10\x17\x9E\xAB\xE3\x1C\x00\xC1\xAB\x1E\xB7\x85\xAC\x09\x1A\xA3\xA8\xAA\x1B\x12\x04\x42\x63\xA6\x1E\x5F\x32\x2B\x3F\x0A\x10\xA7\xA8\xA4\x4C\x2E\x01\xF9\x6D\x3A\xD9\xA9\x10\xBB\xA1\xAD\xBC\x1F\x01\x24\x44\x41\x21\x0F\xAD\xE6\x1F\x86\xA0\xA0\x9F\x23\x12\x02\xEA\xA6\x3A\x1A\xA6\x10\x11\x94\xA6\x4C\x23\x02\xCB\xA9\x1E\xB9\x89\x85\xF3\xAC\xAB\xA1\xA9\x02\xF9\xA8\x1F\xC1\x8C\xAF\xC6\xA1\xAA\x2F\x01\xB0\x1C\x2E\x36\xB2\x29\x87\xED\xA8\xA7\xDD\x15\x03\xF1\xA3\x33\x0C\xB2\x10\xFD\xA4\xAE\xB4\x16\x03\xE7\xAA\xAD\x11\xB4\x1B\x00\x3C\xA6\x83\x81\x41\x21\x77\x79\xCD\x6A\x65\x52\x7B\x2C\x98\x7F\x0F\x24\xBD\xA5\xEB\x7E\x49\xCD\x66\x75\x6D\x9D\x5D\x2E\xB0\x00\x7B\x70\x13\x33\xBB\x4E\xCD\x65\x5A\xFF\x36\x13",
			"\x86\x41\x77\xFD\x39\x43\x3A\xBD\x6C\x72\x70\x9C\xE5\x66\x7E\x64\x5C\xB3\xB6\x93\x46\xE6\x76\xB4\x9F\x86\xA2\xF4\x76\x7E\x3E\xB9\x43\x4C\x5B\x7B\xE6\x74\x41\x00\x0F\x62\x55\xBD\x3F\x64\x54\xB5\x59\xB3\x12\x64\x5A\x65\x45\xB7\x19\x6A\x11\x4C\x61\x70\xB6\xB2\x2F\x77\x65\xB3\xB6\xB0\xAF\x79\x99\x65\x66\x8B\x7A\x13\x6D\xBB\x12\x81\x6A\x65\x71\xB3\x12\x73\xB5\x6A\xC4\x6A\x16\x4C\x6B\x12\xF5\x55\xB4\x7B\xB1\x1C\x71\x40\x00\xF5\x5C\x54\x81\xBE\xB7\x1B\xA3\x10\xC5\x64\xB8\x42\xB6\xB8\x49\xB5\x5F\x29\xB5\x66",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr ) >>",
			L"[59][Module]<< !_PrimitiveExprOnly @ >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ ) >>",
			L"[62][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr ) >>",
			L"[63][Module]<< !_PrimitiveShared @ >>",
			L"[64][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ ) >>",
			L"[65][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType ) >>",
			L"[66][Module]<< !_PrimitiveTypeOnly @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubset2Tokens, ModuleParserStates, PrefixSubset2AstInsReceiver>(&PrefixSubset2TokenDeleter, &PrefixSubset2LexerData, &PrefixSubset2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset2::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset2::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset2::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset2::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
