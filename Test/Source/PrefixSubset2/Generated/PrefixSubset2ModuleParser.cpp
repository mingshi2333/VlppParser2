/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubset2ModuleParser.h"

namespace prefixsubset2
{
	void PrefixSubset2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3676; // 33859 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 92;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\x43\x84\x00\x00\x54\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x9E\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC3\xE1\x42\x18\x95\xEB\xC0\x03\x18\x8D\xE4\x1A\x85\x19\x9D\xEF\xCE\xE1\xD9\xE6\x66\x15\xEB\xCC\x96\xE7\xEA\xAF\x19\xAB\xFE\xCE\xE5\xEB\xB4\xE6\x78\x1A\xE2\x99\xDC\x8A\x1A\x86\x6B\x38\xE7\xE7\x72\x6D\x1A\x8E\x19\xEC\x92\xEE\xE2\xE3\x40\x6F\x04\xF8\xE7\xEF\x77\xE8\xE6\xE8\x1C\xCA\xCB\x71\x1E\x86\x72\x0D\xE3\x1E\x86\x74\x11\xFD\xF3\xF6\xEB\x49\x12\x56\x40\xFD\x42\x4D\x5D\xB0\x34\x4A\x0D\x40\x56\x98\x7F\x54\x4D\xFA\xAD\x74\x47\x9A\x41\xEF\xED\x66\xF9\x42\xEC\xE4\xD5\xFA\x42\xE3\xFF\x55\xFD\x78\xEB\xD8\x5E\xFA\xB8\xE4\x33\x7E\x41\x7B\x74\x3C\xBD\x20\x2C\x26\xE1\x61\x21\xFE\x02\x67\x7F\x84\x16\x3A\x39\x04\x94\x24\x02\xBF\x59\x80\x00\x1F\x7A\x39\x06\x8A\x7F\x4A\x15\x8B\x80\xFB\x6B\x22\x80\x03\x2F\x81\x78\x15\x87\x83\x11\xBF\x51\x82\x12\x88\x24\x0A\xA9\x81\x25\x0C\xAD\x7B\x25\x2B\x8C\x87\x47\x2E\x8A\x38\x9A\x34\x84\x7F\x2B\x37\x84\x79\x36\x8E\x7F\x1C\xBD\x80",
			"\x25\x3A\x92\x85\x0B\xBF\x85\x25\x20\x82\x8F\x23\x1C\x94\x5D\x03\x86\x22\x85\x02\x84\x89\x24\x24\x98\x2A\x11\xC7\x81\x8A\xB0\x13\x8A\x88\x57\x92\x85\x12\xE4\x7F\x83\xF3\x60\x29\x7E\xE0\x78\x28\x08\x82\x29\x8A\x90\x20\x89\x20\x31\x81\x27\x18\x81\x2B\x8C\xF2\x27\x8E\x82\x62\x9E\x76\x1B\xF2\x8B\x89\x81\x25\x8F\x23\x6F\x89\x8C\x48\x6D\x8D\x8D\xFF\x52\x5D\x8B\x09\x35\x80\x0F\x87\x8B\x83\x5F\x77\x8A\x82\x55\x9F\x2F\x21\x83\x9A\x82\x94\x1B\x8A\x5F\x75\x87\x22\x14\xCF\x80\x25\x44\xAD\x33\x91\x85\x9F\x8C\x10\x94\x93\x86\x4E\xBF\x1F\x91\x0C\x80\x90\x13\xE8\x7E\x92\x3D\xA9\x87\x8D\x82\x82\x96\x1D\xA4\x94\x90\x94\x39\x89\x8E\x09\x3D\x8C\x0C\x9E\x9F\x8D\x12\x81\x84\x8E\xB3\x8D\x95\x49\x26\x92\x82\x54\xB0\x96\x20\x87\x9C\x96\x1F\x83\x8F\x97\x81\x32\x92\x85\xB4\x9F\x55\x1B\xA9\x98\x98\x5D\xA1\x22\x98\x2B\x3E\x94\x58\x6D\x81\x99\x64\xB4\x7D\x98\x02\x27\x9B\x2E\xD6\x96\x20\x5B\x91\x91\x20\xCC\x9B\x9A\x33\xA0\x20\x9A\x57\xB8\x90\x25\xD4\x8C\x95\x23\xA5\x2F\x95\x69\x8A\x22\x9B\xCF\x9C\x9B\x40\x5E\x9A\x95\x30\xA0\x2D\x9C\xE2\x8B",
			"\x9D\x48\x52\x9F\x2F\x74\xB7\x9A\x9E\x0B\x38\x98\x1B\xEA\x9F\x84\x73\x9A\x95\x24\xCB\x93\x93\x38\x9D\x9B\xA1\x7F\x18\x93\x93\x0D\xA0\x96\x07\xE8\x9E\x8A\xFD\x65\x96\x93\x0F\xA5\x88\x46\x9B\xAD\xA1\x8C\x83\x89\xA2\xF8\x6A\x89\x3D\xD5\x3A\xA0\x7D\xA0\x26\xA3\x27\xBC\xA2\x49\x8C\xAB\xA4\x87\xAA\xA5\xA0\x1A\xA0\xA4\x5F\x22\xA4\xA2\x07\xA5\xA0\xA6\x1F\xAD\xA4\x4A\xAC\xA8\xA7\x94\x9D\xA7\xA5\x35\x9E\x86\x4C\x86\x2D\x83\xDF\x5F\x9C\x20\x04\xA1\xA9\x33\xAD\xAF\x8C\xC4\x2D\x8C\x9E\x4B\xBD\xA7\x47\x78\x9B\x9E\x9B\x2E\x9F\xA0\x39\xB2\xAA\x4B\xBF\xAC\xAA\x9D\x80\xA8\x87\x10\xBE\xAB\x50\x83\x25\xA9\xD3\x47\xAD\x89\x8C\x9A\xAB\x4E\xDB\xA2\xAD\xB6\xAA\xAE\x93\x12\xA6\xAB\x48\xC8\xAF\x9F\x86\x94\xAE\x8C\x79\x22\xA0\x00\x2B\x35\xAF\x96\xB7\xA8\x8F\x79\xB7\xAA\x41\x7C\xAA\x91\xAF\xBB\x82\xA8\x2D\xB6\x90\x06\xF0\xA6\x90\xC3\x87\x88\x89\x21\xBC\x89\x4D\xA3\x9D\xAE\xAD\xBF\xAF\x1F\xC2\x2E\xAE\x52\xB1\xAA\xB2\xB0\xA5\x20\xAD\x8F\xA5\xAF\x63\xFF\x17\xB3\xA6\xBA\xA8\xAA\xF9\x9A\xA9\x66\xEF\xAD\xAA\xD6\xAD\xA0\xB4\x47\x82\xB7\x63\x97",
			"\xB2\xB7\x23\xA5\xB1\xB0\xFD\x8A\x20\x61\xAD\x34\xB7\x8B\xB6\xAE\xB7\x2D\xAB\xB7\x66\xD9\xA3\xB8\x90\x30\xB2\x88\xFC\x92\x7C\x6E\xBC\xBE\x92\xE1\x9E\xB4\xB8\xCF\xBE\xA5\x67\x87\xB8\x25\xE3\xB2\x85\xB6\x42\x97\xB6\x55\xCA\xB8\xAA\x72\x8D\xBE\xB1\x8F\xB6\xB8\x0B\xB5\x9A\xAF\x70\xB1\x9D\xA1\xCE\xB4\xB8\x67\xDA\xA2\xBD\x53\x8A\x24\x97\x7C\x89\xA9\x74\x9F\x29\xBD\xD1\xAB\xAF\xBE\x9E\x8D\xBE\x04\xD8\xB2\x87\xDE\xBF\xB5\xA1\x6F\x87\x91\x1B\xBB\xB0\x82\x4F\xBC\xBC\x85\x97\xB7\xB1\x7D\x8F\xBB\xAC\xFD\x83\x9F\x3A\x7A\xB5\x98\x7A\xE0\xB7\x88\x07\xD1\x9A\x99\xE7\x89\xB5\x71\xF4\xB4\xC2\x21\x96\xC6\xA0\xC4\x82\xB2\x31\xF2\xBA\xBD\x90\x07\xC1\x85\x27\xD2\x81\x42\xA2\xC6\x9F\xBF\x29\xC4\x26\x2F\xCB\x25\x8C\xA8\x23\xC7\x92\x35\xC6\xC4\x06\xDE\x91\x1B\xEF\x87\xA8\x1E\xF3\xAE\xA9\xDB\xBC\xBA\x41\x0B\xC4\xC7\x1C\xCD\xA7\xC6\x20\x28\xCB\x47\x4A\xCF\x1E\x26\xCC\xCB\x24\x70\x61\xC9\x40\x36\x93\x25\x0A\x95\x81\xC0\x91\xA1\xC4\xFC\x4B\xB2\x7C\xDD\x92\xC9\x20\xE9\xA9\xBD\x13\xA3\x2D\x8D\xF4\xA5\xCF\x9D\x15\xA1\xCA\x7C\x09\x29\xBD\x35",
			"\xC3\xCA\x21\x6E\xC1\x87\x97\x80\x04\x80\x02\xD6\xAD\xAC\x04\x85\xAE\x9D\xB6\x2B\x3F\x84\x3A\x80\xCF\x0A\x3D\xCC\x30\xD9\xC3\x21\x3D\xE3\x25\x01\x5C\xCA\x83\x7B\x8A\x28\xD0\x3F\xC4\xD2\x20\x86\xC9\xD0\x00\x00\xDE\xD1\x99\x89\x21\xD2\x09\x21\x42\xA5\xDA\xC3\x20\x4D\xC4\xAE\xCB\x5F\xCC\x42\x41\x19\x49\x20\x52\xC6\x24\x45\x5F\xDA\x45\xA5\x86\x2A\xD4\x83\x04\x49\x21\x4A\x43\xD1\x42\x2F\xDE\xD5\x88\x0A\x23\x4A\x09\x38\xD6\x41\x3A\xD3\x20\x0B\x33\xC9\xBD\x23\x2F\x8F\x0C\x25\x86\x96\x5B\x8D\xD3\xCE\x09\x34\x04\xB1\xF2\x8E\xD2\x64\xC3\x25\x06\xCB\xD7\xD2\x42\x2D\xD1\xC9\x37\xB6\x01\xDA\x9C\xC2\x22\xB2\x5F\xCF\x8D\x1B\x18\xDC\xAC\x0A\x30\x07\x9C\xEF\x88\x07\x6F\xC2\x27\x8D\x92\x5C\xDA\x42\x39\x06\xDD\x29\xCA\x24\x52\xEA\xC9\x22\x0E\x6D\xD0\x01\x0A\xA2\x03\xDC\x0A\x3B\x04\xBD\xB6\x90\x51\x78\xC6\x24\x07\xF4\xDA\x87\x06\x4E\xD9\x21\x1E\x01\xE2\x21\x03\xE4\xE3\x40\x3E\x04\xDF\x3D\xE9\x52\xE1\x02\x3F\x05\xC3\x8A\x2F\xE0\x88\xC0\x00\x08\xF4\xC4\x80\x0D\x16\xE1\x21\x20\x34\xDF\x8D\x3B\x18\xDD\x42\x42\x04\xDF\x0A\xB8\x5E\xDF",
			"\x03\x23\x0B\xBE\x8A\x2F\x06\x91\xC6\x24\x08\x13\xE9\x23\xB5\x28\xE2\x21\x22\x07\xE1\x21\xDF\x54\xE5\x40\x46\x01\xE6\x83\x21\x5A\xE7\x00\x07\x0B\xCD\x86\x2A\x5C\xA0\xC8\x0C\xDE\x75\x13\xCE\x79\xB8\x3A\x57\xA7\x1A\x43\xE9\xDD\x2A\xB2\xA1\x3A\x54\xBC\xB5\x75\xDF\xD1\x53\xEB\x3E\x0E\x95\x84\x80\xD4\xB4\x30\xCB\xE9\x3C\x7A\xB4\x81\x9A\xEB\x8C\x7A\x55\x89\x5E\xE5\x7B\x9F\xEB\x3A\x57\x15\xC6\x22\xD0\xF3\x8B\x3D\x59\xBE\xCA\x36\xB1\xDA\x74\xCE\x19\xD4\x36\xAE\x47\xD0\xC3\x84\x22\xD5\xEF\x52\xD6\x95\x7A\xFB\xC3\x3C\x5D\x68\xD5\x9B\xC7\x72\x91\x42\x71\xCC\x48\x5D\x54\xDA\x20\x69\xEB\x78\x5D\xEF\xEC\xED\xF5\x34\xD1\xEE\x56\xEC\xF0\x38\x95\xF9\x3D\x58\xC0\xF5\xD7\x72\x96\x95\x05\xF0\xE2\x20\xCD\xC7\x52\x57\x63\x5D\xB9\x77\x55\xE4\xF3\x84\x24\xF1\xEB\xE9\x25\x4E\xEA\xCB\x3A\x86\x63\xE8\xC9\xEC\xEB\x3A\x01\xE3\x4D\xD9\x9A\xCE\xF8\x39\xE1\x88\xF6\xEB\xDF\x82\x27\xF3\xC6\xEB\x3E\x4D\xB3\xE6\xF2\x42\x26\xDC\x42\x5D\x70\x49\xF9\xEB\x2F\xF1\x40\x07\xFD\xF9\xC4\xCC\x7A\x21\xC5\xE1\x21\xF6\xA7\xFB\x3C\x0F\x12\xD3\x3C\x65\xBA\x87",
			"\xF6\xD0\xEB\x38\x5D\x77\xDB\xD3\x03\x29\xDF\x54\x69\xCD\xCA\x58\xF0\xCE\xF7\x1C\x56\x20\xD9\xE9\x3C\xF6\x77\xEE\xFE\xF5\xF0\xEC\x4A\xA7\x73\xF8\x3F\xE1\xF6\xFE\x20\x9E\x7D\x62\xD5\x79\x1E\xA7\x29\x10\x6F\x42\x6E\xFC\x73\x10\xCC\x72\x80\x02\x1E\x6B\xB9\x69\x7F\xD7\x76\x75\x0E\x86\x10\xDE\x78\x7B\xE9\x14\x2B\xB2\x23\x03\x19\x33\x81\x03\x1F\x01\x10\x87\x28\x1B\x72\x2B\xBE\x20\x7D\x09\x1C\x81\x02\x1C\x27\x16\x88\x1F\xDB\x61\x7C\x06\x11\x2D\x2C\x8C\x21\x56\x2F\x80\x29\x80\x39\xC6\x39\x10\x31\x84\x81\x1F\x83\x1E\xD5\x22\x2B\x33\x7F\x82\x4C\x27\x83\x1D\x89\x83\xE6\x1A\x03\x1A\x21\x72\x24\x86\x10\x40\x87\x82\x42\x8E\x2D\xE0\x29\x31\xA9\x76\x10\xBA\x73\x83\xB9\x33\x85\x01\x1F\x84\x03\x16\x7A\x85\x7B\x1E\x3E\x09\x77\x39\x22\x47\x56\x82\x10\xAF\x7C\x7D\xE9\x15\x74\xEB\x7D\x79\x5E\x8C\x85\xDD\x1A\x2B\x27\x7B\x65\x09\x1F\x30\x09\x8D\x80\x00\x42\x7B\x06\x18\x85\xE6\x1A\x2B\x1D\x3F\x86\x86\x22\x87\x9F\x72\x10\x7A\x80\x86\x4B\x8C\x1B\x29\x38\x87\x87\x20\x7C\x7B\x81\x10\x7D\x8B\x79\x52\x86\x28\x31\x36\x80\x0A\x1A\x33\x82\x8F",
			"\x7C\x6C\x80\x85\xB7\x6F\x87\xB4\x14\x34\x47\x8C\x21\x51\x88\x83\x89\x87\x28\x4A\x32\x88\x52\x37\x89\x02\x19\x89\x41\x8B\x89\xE3\x1A\x35\x82\x88\x36\xA0\x81\x10\xA2\x8A\x84\xA4\x86\x1E\x6C\x32\x88\x51\x6E\x83\x86\x24\x88\xA1\x84\x89\xC5\x3D\x3A\xB4\x86\x88\xB6\x82\x79\xAD\x38\x7C\xBB\x6B\x8B\xCB\x1A\x37\xA9\x87\x28\xBE\x83\x10\x15\x88\x1F\xBA\x2D\x37\x82\x86\x38\xC3\x85\x8C\x02\x1E\x81\xAD\x8A\x1B\x89\x32\x88\x8C\x3D\x8C\x0A\x18\x82\xC8\x8B\x1E\x94\x32\x88\xA0\x33\x8C\x90\x83\x10\xBC\x66\x7C\xE9\x12\x3A\xC3\x83\x1E\xDF\x82\x10\xC7\x83\x80\xF8\x14\x3A\x82\x80\x3B\xDE\x8A\x10\xD0\x89\x8D\xE9\x17\x3B\x82\x8B\x3B\xEF\x89\x10\xD8\x8A\x8E\x1C\x2D\x3B\x82\x81\x3C\xC3\x89\x8E\x02\x1F\x85\xB0\x77\x77\xAD\x31\x8F\x03\x1E\x8C\x03\x94\x83\xAD\x39\x8F\x02\x17\x8E\x09\x94\x85\x35\x86\x10\xFD\x6F\x8B\xD1\x8C\x1B\xC3\x35\x8E\xE6\x13\x91\xC6\x80\x8C\x23\x19\x3C\x82\x83\x3D\xC3\x8A\x91\xCF\x8C\x91\x0A\x15\x3D\x82\x89\x3D\x21\x97\x8D\x24\x99\x10\x49\x72\x88\x77\x09\x31\xE7\x74\x91\xF2\x88\x1F\x78\x0D\x38\x31\x9B\x91\x15\x94\x1B",
			"\x79\x02\x47\x7B\x00\x93\xF0\x8B\x92\x06\x1C\x07\x72\x4E\x07\x3E\x98\x8F\x40\x93\x10\x7F\x02\x47\x81\x09\x31\x83\x25\x6B\x39\x98\x1B\x82\x08\x86\xCB\x1C\x90\xFF\x73\x10\x4D\x95\x88\x62\x88\x1F\x84\x00\x40\x87\x02\x47\x22\x98\x88\x06\x15\x02\x0A\x1C\x28\x4F\x9C\x8B\x9E\x3F\x28\x09\x14\x96\x33\x9A\x90\x9E\x3A\x7E\x03\x1A\x96\xFA\x8C\x24\x89\x0D\x38\xF0\x66\x10\x70\x92\x8E\xF8\x1A\x08\x8D\x32\x7F\x4E\x9B\x96\x4C\x2B\x08\x00\x43\x1E\x57\x9C\x80\x01\x1C\x97\x58\x99\x85\xE9\x1E\x08\x92\x62\x09\x72\x42\x96\x8C\x89\x10\xFB\x7D\x97\x71\x96\x28\x94\x0F\x7D\xE6\x15\x97\xAB\x40\x99\x0A\x15\x80\x7E\x91\x81\x77\x71\x99\x87\x95\x87\xEB\x18\x09\x58\x70\x00\x9D\x02\x47\xA0\x28\x7E\x02\x19\x9A\x92\x98\x97\x1C\x2F\x09\x96\x9A\x1B\xB1\x22\x6B\x06\x1C\x9A\xA1\x95\x77\xEB\x13\x0A\xA5\x98\x0A\x72\x43\x82\x9F\x69\x10\x9C\x93\x10\x2A\x07\x94\x02\x1A\x0A\x8D\x31\x9C\x02\x1F\x02\xC4\x91\x10\xAB\x02\x47\xAD\x09\x31\x15\x73\x10\xC8\x9F\x90\x9E\x94\x83\xD1\x9B\x9A\xCB\x91\x91\x1C\x2A\x9C\x9A\x95\x96\xCE\x33\x33\x08\x86\x10\xC3\x9E\x9D\x23",
			"\x1E\x0A\x8D\x31\x9E\x03\x1C\x9D\x9D\x97\x28\xAF\x02\x47\xB1\x09\x31\xB3\x93\x10\xDB\x78\x98\xF8\x12\x0B\xB1\x9C\x1B\x44\x8F\x98\x06\x11\x9F\x84\x99\x95\x1C\x26\x0B\xA5\x9B\x0B\x72\x4F\x73\xB4\x93\x10\x1A\x83\x6B\xD9\x9D\x0B\x81\x96\x1E\xEF\x2A\x9F\x06\xA2\x95\xC8\x63\x1E\xC0\x02\x69\xC4\x02\x47\x08\x3B\x6A\x03\x11\x82\x06\x18\x81\xEB\x93\x1E\xC6\x0D\x38\x1A\xAF\x6C\xD9\x97\x0C\x72\x49\x0C\x19\x3E\x9B\x0F\xA4\x9E\xD6\x77\x28\x2B\x83\x10\x1C\xA3\x99\x87\x2A\x0C\x8D\x3D\xA2\x02\x18\xA2\xAE\x9C\x24\xCB\x02\x47\xCD\x09\x31\x2E\x82\x9F\xD9\x9E\x0C\x10\xAA\x10\x27\x32\x2B\x3D\xA5\x7A\xD9\x90\x0D\x41\xA9\x10\x81\x82\x8B\x00\x05\xA4\x01\x11\x86\xF4\x9C\x21\xD2\x09\xA4\x06\x1D\x32\x44\xA4\xA5\x41\x63\x1E\xD4\x00\x40\xD7\x02\x47\x8B\x85\x86\x06\x1D\x83\x03\x1B\x83\x1D\xA6\x1E\xD9\x0D\x38\xF9\x96\x10\xA0\x97\xA3\x86\x2A\x0D\xB7\x78\x1F\x38\x32\x88\x69\xA9\xA2\x65\xAA\x1B\xE4\x01\x68\x41\x35\x84\x0A\x14\xA6\x30\xA3\x1E\xF0\x0D\x38\x46\x86\x10\x73\xAC\xA6\xDA\x92\x10\xF1\x09\x31\x39\x76\x10\x7C\xA4\xA8\xE3\x12\x0F\x8D\x34",
			"\xA0\x63\xA9\x9D\xF3\x0D\x38\x5B\x89\x10\x02\x9E\x9F\x4C\x24\x0F\x8B\x69\x1E\x96\x8C\xA4\x95\xAA\xA6\xD9\x9A\x0F\x6F\xAC\x21\x9D\x80\xA6\x0B\x7A\x10\x0E\x98\xA9\x86\x24\x00\x25\x4C\x4B\x23\x1F\x89\x9E\xAA\x10\x08\x9A\xAA\x87\x2A\x00\xAD\xAB\x1E\xA6\x81\xAB\x09\x17\xA0\x75\xA8\x21\x25\x40\xA5\xE6\x1F\x35\xB2\x2D\x72\x09\x1B\xA8\xD4\x94\x8C\xF4\x6D\x3A\xC4\xA6\x10\x9F\xAD\xA7\x9E\x3D\x01\xC9\xA6\x1E\x64\x81\xA9\x2A\xA9\x10\x1E\x01\xAD\xA6\x3D\xA0\x06\x17\xA9\x51\xAC\x24\x1F\x07\xAB\xE9\x18\x8A\x4C\xAA\xAD\x03\x19\xAA\xDD\xA6\x28\x25\x00\xAE\xF8\x1F\x8A\xE3\xA2\xAB\xD9\x9B\x02\xEA\xAC\x21\x6E\x32\x2B\x6B\x84\xAD\xBD\xA4\x1B\x31\x08\xAD\x33\x35\xAF\x02\x14\xAE\x8C\xAE\x39\x32\x0A\xAF\xB4\x10\x30\x5F\x65\x78\x12\x4C\x71\x90\x78\x6C\x54\x6E\x74\xCB\x21\x79\x1F\x1B\xB0\x10\xA4\x7E\x9F\x48\x6C\x52\x70\x96\x52\x65\xB1\x00\x04\x77\x30\x1A\xB1\xEC\x48\x6C\xA6\x50\x40\x36\x17\x48\x00\x0B\x48\x3A\x41\xB2\xC8\x6B\x76\x92\x65\x56\x23\xB5\x9A\x2B\xBA\x9A\x64\x42\x69\x2D\xB1\x89\x05\xAD\x7E\x18\xAF\xB2\x92\x6D\x54\xB5\x73\x12",
			"\x5B\x73\x12\x29\x63\x69\xFE\x35\x56\x15\x4E\xB3\x82\x82\xB4\x4C\xA4\xB4\x52\x6E\xAA\xC2\x4D\x75\x97\x1A\x21\x78\x72\x2B\x4D\xB5\xB4\x4A\xBB\xA9\x5F\x64\x78\x3A\x14\xB5\x2B\x1B\x67\x54\x68\xB5\x23\x1A\xB5\xA0\x6F\x65\x44\x60\x13\x5F\xB5\x12\xE9\x5A\xB2\x63\xB1\x1C\x72\x40\x00\xE9\x5D\x54\x69\xB6\xB6\x0E\xA3\x10\xC0\x6C\xB6\x33\xB2\x10\xE9\x55\xB2\xE9\x50\xB1\x5F\x60",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr ) >>",
			L"[59][Module]<< !_PrimitiveExprOnly @ >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ ) >>",
			L"[62][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr ) >>",
			L"[63][Module]<< !_PrimitiveShared @ >>",
			L"[64][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ ) >>",
			L"[65][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType ) >>",
			L"[66][Module]<< !_PrimitiveTypeOnly @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubset2Tokens, ModuleParserStates, PrefixSubset2AstInsReceiver>(&PrefixSubset2TokenDeleter, &PrefixSubset2LexerData, &PrefixSubset2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset2::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset2::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset2::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset2::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
