/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubset2ModuleParser.h"

namespace prefixsubset2
{
	void PrefixSubset2ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3659; // 33451 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 75;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\xAB\x82\x00\x00\x43\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x9E\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC3\xE1\x42\x18\x95\xEB\xC0\x03\x18\x8D\xE4\x1A\x85\x19\x9D\xEF\xCE\xE1\xD9\xE6\x66\x15\xEB\xCC\x96\xE7\xEA\xAF\x19\xAB\xFE\xCE\xE5\xEB\xB4\xE6\x78\x1A\xE2\x99\xDC\x8A\x1A\x86\x6B\x38\xE7\xE7\x72\x6D\x1A\x8E\x19\xEC\x92\xEE\xE2\xE3\x40\x6F\x04\xF8\xE7\xEF\x77\xE8\xE6\xE8\x1C\xCA\xCB\x71\x1E\x86\x72\x0D\xE3\x1E\x86\x74\x11\xFD\xF3\xF6\xD4\x92\x52\x41\x7F\x02\x7D\x51\xB0\x4D\x0A\x0D\x48\x54\x66\x7F\x74\x48\xF9\x6B\x34\x67\x96\x42\xFB\xAD\x65\xF9\x43\xFA\x64\xE4\xFA\x42\xF8\x7F\x74\xF1\x7A\xFA\x58\x6D\xF2\xB8\x79\xF2\x66\x22\xFE\x64\x3A\x2E\xB0\x34\x20\x7C\x01\x38\x7E\xC0\x76\x79\x20\xEB\x0A\x3B\x80\x34\x27\x83\xAF\x08\x80\x00\xEF\x4A\x3D\x80\xE9\x6B\x24\x05\x8A\x85\x7F\x95\x01\x83\x20\x0E\x81\x3C\x05\x96\x82\x85\x5F\x50\x81\x82\x28\x27\x84\x0A\xA1\x28\x82\xF6\x6B\x22\x85\x2B\x9F\x21\x0B\xCA\x34\x27\x19\xBB\x7B\x25\x36\x84\x3D\x0D\xFD\x78\x86\x1E\xA8\x21",
			"\x87\x31\x8C\x86\x0F\xA5\x20\x89\x20\x9F\x23\x83\xF4\x4C\x82\x41\x21\x84\x81\x21\xA1\x23\x84\x58\x25\x8A\x11\xD0\x80\x2C\x29\x81\x8E\x8A\x31\x88\x8B\xF8\x1E\x86\x7C\xB0\x30\x7F\x7B\x58\x3F\x82\x40\x58\x80\x25\x2F\x81\x20\x86\x21\x22\x8D\x40\x6A\x84\x3C\x33\x95\x81\x8C\xBE\x6D\x8D\x1C\xCA\x83\x20\x32\x9F\x26\x8D\x68\x80\x24\x1B\xEC\x8E\x7E\x69\x5C\x89\x21\x14\x9B\x86\x01\x9A\x8F\x56\x3B\x91\x84\x8A\x7F\x26\x92\x20\x99\x88\x24\x2D\xBA\x5C\x8E\x07\x31\x8A\x13\xA0\x28\x91\xD6\x0A\x94\x90\x7E\x9F\x87\x24\xB2\x8B\x93\x7F\x0E\x93\x81\x7F\x8B\x8B\xF9\x1D\x99\x8E\x14\xAE\x89\x90\xA1\x95\x8F\x28\x83\x98\x24\x3C\xB0\x89\x21\x7C\x8F\x85\x27\xEE\x84\x84\x00\xB3\x8A\x96\xAC\x85\x25\x29\x91\x87\x95\x57\x86\x26\x90\xBB\x9D\x8E\x00\xBE\x93\x21\x58\xA9\x83\x96\xBF\x4C\x8C\x2A\xC7\x99\x97\x90\x01\x9B\x25\xBD\x80\x2C\x1B\xC0\x98\x99\xF9\x44\x9A\x20\xC6\x9A\x95\x35\x86\x25\x96\x48\x81\x23\x99\xDA\x8D\x98\x48\x4F\x9D\x95\x5B\xA8\x23\x9A\xAB\x8C\x91\x49\x2E\x92\x9A\x85\x19\x9E\x99\xDB\x83\x21\x37\xA9\x90\x8C\xB0\x24\x99\x9C\xEA\x81",
			"\x25\x34\xFF\x28\x9C\x7B\xB1\x9B\x21\xD7\x8B\x8D\x3A\xAE\x85\x9D\x4C\xA5\x22\x99\x92\x82\x9C\x27\x8A\xAF\x1F\x4B\x9A\x94\xA1\x9F\x9D\x83\x39\xDD\x89\x7E\x52\x9D\x96\xA1\x44\x97\xA2\x46\x8C\xA8\xA2\x21\x90\xA7\x7E\x49\x94\x9D\x75\x09\xA9\x9E\x90\x1D\xA6\xA4\x1B\xA5\xA7\x42\xAA\xAD\xA1\x94\x84\xA1\xA3\x1F\xBC\x2D\x48\x93\xAD\x80\x92\xAF\xA6\xA3\x2C\xA7\xA7\x4A\xB7\xA8\xA4\x8E\xAE\xA4\x86\x3D\x91\xA6\x41\x1C\x8F\x76\x6F\x84\x23\xA0\x40\xAC\x98\x4B\xEE\x88\x30\x36\xB3\x9A\xA9\x3C\xBF\x23\x3D\xFA\x96\x27\x76\x86\xA0\xA7\x51\xAD\xA6\x4F\xDB\xA9\xA7\x9F\xB7\x87\xA1\x5D\xA2\xAB\x40\x44\xA7\x74\xA3\x8C\x8B\x91\x59\xBA\xA6\x56\xE1\xAC\xAD\xB4\x9D\x91\xA2\x45\xA2\xA7\x51\xFE\x9C\xA1\xA9\xA5\x89\x2F\x01\xA0\x03\x6A\x74\xAC\xA4\xBB\xB7\x88\xAF\x56\xA6\x23\x5E\x89\x9E\xAA\x1D\x81\xAC\xA5\x95\x97\x83\x5B\x85\x95\xB0\x23\x87\x88\xA4\x5B\x94\xA6\x28\xFC\xA9\xAA\xE1\x2D\xA9\xA9\x30\xAC\xA7\x59\x8E\xB4\xAC\xC7\xBF\x1E\xAF\xFF\x0C\xA9\x5E\xCF\xA5\x24\xCB\xAE\xAC\xAB\x59\xBB\xB2\x11\x9D\xBE\xB0\xD0\xAC\xB6\x88\xA0\xAE\x8E\x21\xEC",
			"\x83\xB1\xD6\x20\xB0\xB4\x6A\xB7\xB5\x27\xA6\xB8\xB3\x90\x2A\xB1\x88\xFB\x91\x7C\x60\xFF\x2C\xB7\xAF\x99\xB7\xB4\x9A\xBD\x93\x6B\xC1\x81\xB7\xAA\xBC\x9F\x57\xC5\xA6\xB0\x4A\x3F\xB1\x86\x5A\xB9\xA8\x9C\x21\x31\xBA\x67\xD4\xBB\x84\x76\x8F\xB8\x96\x58\x3A\xBA\x63\xEA\xAA\xAC\xEE\xA8\x83\xB9\x31\x8E\xB6\x45\x8C\xA2\xB7\xBC\xB5\xB7\x81\xEB\xB7\xB2\x71\xF0\x9C\xA0\xF1\x86\x8E\xBC\xBC\x86\x9F\x41\xC3\xBD\x34\xFB\x81\x88\xBF\xC2\x92\x9F\x75\xE1\xBD\x92\x00\xD0\x9A\x21\xBB\x9B\x8C\x52\xF3\xB3\x9D\xC6\x9C\xB5\x93\x08\xA1\xB3\x75\x58\x28\xBD\x15\x95\xC7\xBC\xCA\xB9\xC0\x43\x97\xC1\x82\x0E\xC6\xAE\x8D\x1F\xD9\xAD\x53\xCE\xB2\xB9\x84\x3E\xB9\x24\x1E\xCB\x25\x8A\xA8\x2B\xC5\x92\x2D\xC0\xC5\x1A\xCC\xA7\x8B\xB8\x30\x6E\x12\xC1\x25\x96\x23\x34\x80\x05\xED\xB2\xA6\x6B\x89\x24\xC7\x43\xAA\x23\x7B\xD5\xA1\xBB\xE8\x8C\x8B\x24\x6C\x91\xB9\x92\xEE\x94\xA2\x12\xF2\x3E\xC4\x0A\x2F\xCA\x41\x51\xB2\xCA\x10\xB6\xC7\x8C\x42\xD7\xC8\x00\x64\xA3\x80\xB2\x83\xCE\x26\xFB\x29\x21\x0E\xDC\xCA\x21\x30\xFF\x90\xB2\x82\xBA\xC9\x03\x7C\xB1\x7C\x04",
			"\xCA\x23\xCD\x62\xC8\xCF\x40\x5F\xC3\x25\x31\xEE\xC9\xCE\x3D\xC9\xCF\x95\x81\x49\xCF\x81\x03\x84\xCF\x41\xC9\x20\x9D\x8A\x2C\x40\x83\x19\x41\x21\x87\xC6\x20\x8B\x57\xCA\x46\x3C\xC6\x25\xD1\x06\x24\x49\x42\x4A\x47\xCD\x84\x12\xD1\xD2\x11\x2A\x23\x94\x09\x2B\xD2\x83\x1D\xD3\x20\x16\x1A\xC9\x74\xA3\x2E\x8C\x11\x24\x85\x96\xB5\x90\xCE\x96\x89\x23\x05\x53\xF1\x88\xD0\xAB\xC3\x20\x09\x2E\xD2\xD0\x85\x10\xD4\xC4\x6E\x85\x04\xAD\xC3\x99\x20\x65\x57\xCE\x8D\x26\x1B\xD7\x58\x8A\x20\x06\x2D\xEE\x8F\x04\xC2\xC2\x23\xB1\xC6\xDA\x20\x14\x09\xDF\xC6\xCD\xCC\xD9\x42\x29\x0F\xD8\x00\x14\x82\x04\xD2\xC6\x22\x0A\x55\xD5\x96\x40\x7F\xD2\x21\x2B\x15\xD9\x0E\x9B\x01\xD7\x84\x2C\x02\xDC\x0A\x24\xDD\xB9\x83\x2D\x05\x6A\xDF\xC9\x55\xEB\xC2\x22\x0B\x6E\xDA\x20\x78\xF1\xD8\x00\x2F\x15\xDB\x00\xB4\x07\xDF\x80\x30\x05\xDA\x6E\x9B\x05\xB6\x83\x21\x07\x6A\xD4\x80\x5F\xDF\xC9\x22\x0C\x5C\xDA\x21\x1F\x03\xE2\x20\x33\x14\xDD\x42\x57\x59\xE0\x83\x34\x00\xDD\x09\x3F\x59\xC5\x83\x25\x06\x89\xC6\x21\x5C\x1B\xE2\x22\x0D\x18\xE6\x20\x75\x61\xE1\x20",
			"\x37\x15\xD9\x1D\x5A\xC8\xBA\xDC\x3A\x57\x29\x1A\x4D\xE5\x77\x09\xB6\x50\x5D\x56\xBA\x6D\xD6\xD2\xCC\x93\x3A\x59\x86\x0A\x83\x84\xB4\xB4\x20\xC8\x87\x5C\x75\xD6\x40\xAB\x39\x87\x40\xEE\xE7\x7A\x4C\x89\xE9\xE5\x40\x06\xCE\xE9\x3A\x55\x84\x86\x26\xCC\x01\xE9\x3C\xAC\x20\xC6\x3C\xD1\x9A\x70\x01\x01\xB2\xE3\x39\xBA\x4A\xD7\x84\x89\x25\xD1\xB1\xF6\xC5\x96\xD1\xBF\xCB\x78\x3A\x5B\xD0\x6E\x87\x79\x92\x09\x35\xCB\xCE\xEB\x37\xD6\x81\x0D\xEC\x6A\x4C\x95\xEB\xDC\xE9\x37\xD2\xAB\xDC\xEA\xEE\xDF\x8B\x3E\xAE\x14\xD6\xEC\x50\xF1\x8D\x96\x14\x9A\xED\x40\x00\xF7\x50\x5D\x63\x4F\xAA\xB8\x37\xE4\xD5\xE5\xC2\xF1\xF5\x25\x48\xF2\xDD\x28\xEB\x9B\xCC\xC1\xEB\xF5\x1A\x05\x71\xB0\xD8\x99\xE5\xE9\x3A\xDC\xB7\xF8\xE5\xEC\x02\x3D\xEF\xDE\xF8\x3E\x4C\xCC\xD4\x6D\xED\x03\x29\xD3\xD0\xEB\x30\x4E\xD7\xFA\x55\xEE\x01\x30\xF7\xEA\x90\x76\x78\x4B\xCA\x22\xF5\x35\xEB\x3E\x07\x6C\xC6\x50\xB2\xB9\x80\xF8\x39\xFD\xF1\x7A\x58\xDD\xCE\x81\x12\x56\xE8\x35\xAD\xF9\x40\x04\xF2\x20\xC6\xEB\xEB\x3D\x16\x30\xF8\x7E\x21\xF0\xDB\x49\xD4\xF2\xF9\xF8\x3E\x52",
			"\xF6\x9C\x48\xF5\xEE\xC6\x24\xFA\x81\xE0\xFC\x87\x27\x5F\xC6\x62\xF1\x8A\xF6\xF5\x86\x21\xA8\x9C\xD3\xF4\xAE\xED\x73\xFE\x06\x23\xFA\xFA\xCC\x44\x56\x59\x73\x01\x63\xF8\x73\x10\x1F\x05\x7F\x1C\x2C\x6F\xB2\x2E\x2B\xB6\x7A\x10\x01\x82\x10\x7C\x2B\x7F\x86\x2E\x6B\xA6\x76\x10\xD1\x21\x81\x1C\x26\x25\xF4\x7E\x80\xBD\x7C\x75\x16\x89\x7F\x04\x8C\x24\xD5\x22\x2B\x14\x74\x81\x4C\x2B\x81\x02\x8D\x81\x86\x2A\x03\x1A\x22\x70\x09\x89\x10\x24\x8C\x80\x26\x87\x28\x1A\x72\x82\x01\x10\x72\x32\x87\x28\x8F\x76\x10\x9F\x78\x81\xB5\x36\x3A\x37\x83\x10\xD6\x7A\x75\xEB\x1E\x03\xFA\x54\x1B\xB8\x79\x7C\x06\x1D\x83\x02\x1A\x78\x8D\x7B\x1E\x26\x73\x15\xEB\x18\x7E\x46\x83\x10\x48\x89\x7E\xF8\x1A\x2B\x08\x7F\x3E\x0A\x1F\x30\xE3\x72\x10\x0B\x81\x10\x6E\x47\x79\x06\x1F\x83\xBA\x1A\x2B\x1D\x3B\x85\x86\x20\x86\x85\x72\x10\x68\x89\x84\x2F\x83\x1E\x29\x36\x86\x87\x25\x7A\x69\x81\x10\x6B\x84\x85\xB3\x79\x1E\x31\x3D\x7E\x09\x1A\x33\x70\x85\x7B\x58\x89\x10\x39\x8E\x69\x6D\x86\x1E\x44\x3B\x82\xF8\x11\x88\x03\x1A\x7F\x55\x8B\x1E\x4A\x30\x87\x52\x36",
			"\x88\x03\x18\x88\x02\x13\x80\x3A\x86\x1E\x5A\x30\x87\x68\x30\x89\x02\x12\x89\x01\x1D\x80\x8B\x89\x1E\x6C\x30\x87\x35\x65\x83\xE3\x12\x87\x9B\x83\x88\xA6\x3D\x3A\xA6\x84\x87\xA8\x8C\x3A\x9E\x3D\x7A\x82\x85\x89\xBA\x1A\x37\x9A\x86\x28\xB0\x89\x88\xAD\x84\x1B\x7D\x30\x87\x86\x35\x8B\x00\x07\x8B\x93\x89\x8B\xB8\x19\x38\x70\x8C\x38\xBE\x80\x8C\x9D\x82\x8C\xDD\x14\x39\x70\x80\x3A\xBE\x8E\x87\x03\x1F\x69\xBB\x7C\x24\xA2\x3E\x8B\xE3\x10\x8D\x02\x1A\x88\x77\x88\x1F\xA4\x30\x87\xB0\x3F\x8C\x0A\x14\x89\x9F\x88\x1F\xB7\x30\x87\xBB\x30\x8E\x09\x1E\x89\xDB\x8C\x21\xBD\x30\x87\xC1\x3E\x8B\xDA\x82\x10\x53\x8B\x84\x38\x7D\x3A\xE2\x83\x10\xC8\x84\x8F\xF6\x7E\x39\xEA\x82\x10\xD8\x81\x7C\xF5\x8E\x39\xDE\x61\x8B\xE3\x8C\x21\xC3\x36\x8D\xE6\x13\x90\xB8\x82\x8B\xBC\x19\x3C\x70\x83\x3D\xBE\x8A\x90\xC1\x8C\x90\xB4\x15\x3D\x70\x89\x3D\x11\x9A\x10\xFD\x80\x90\xF8\x1B\x72\x70\x87\x07\x19\x3C\x7C\x04\x9B\x8E\x4C\x28\x07\x8D\x32\x92\x0B\x95\x90\x4C\x29\x07\x71\x4B\x07\x21\x91\x8E\xCA\x8B\x1C\x7C\x01\x47\x7E\x0F\x92\xE9\x81\x93\x23\x1F\x07",
			"\x71\x41\x08\x19\x33\x28\x98\x64\x91\xB8\x12\x08\x43\x88\x1B\x1B\x9F\x46\xAC\x63\x94\xDD\x1A\x2B\x84\x0F\x3F\x87\x01\x47\x12\x96\x87\x02\x15\x02\x0A\x1C\x28\x40\x9E\x74\xAD\x3F\x28\x09\x14\x95\x2A\x9C\x3C\x6F\x71\x10\xCF\x76\x10\x5A\x94\x92\x86\x29\x08\x8D\x34\x29\x59\x98\x93\x0A\x1A\x08\x8D\x39\x7D\x3F\x9B\x95\x87\x2B\x08\xFF\x33\x1E\x3E\x93\x87\x00\x0C\x96\x74\x97\x7D\xE9\x1E\x08\xC4\x70\x00\x92\x01\x47\x52\x9A\x87\x06\x12\x7E\x6D\x92\x96\x87\x24\x09\x7B\x93\x1E\x66\x95\x69\x81\x9A\x10\xEC\x7E\x96\x3B\x83\x33\x82\x97\x97\x40\x89\x1E\x98\x0A\x73\x01\x1D\x09\x71\x40\x2A\xD2\x70\x00\x9A\x93\x98\xD3\x86\x28\x9F\x07\x98\xE6\x11\x2B\x8A\x93\x10\x9D\x92\x99\x63\x8B\x1E\xA3\x06\x99\x00\x08\x0A\x71\x48\x80\x81\x66\x10\x8D\x93\x10\x2A\x08\x96\x09\x1A\x0A\x8D\x33\x9B\x02\x1F\x02\xB6\x96\x10\xAB\x01\x47\xAD\x09\x31\xF6\x6C\x6E\xBD\x9C\x7B\xE3\x13\x9C\x02\x17\x9A\x9F\x99\x81\xBC\x7C\x9B\x09\x11\x99\xCB\x9F\x98\x3C\x35\x6C\x09\x15\x9B\x55\x9B\x1C\xAE\x0D\x38\xD4\x96\x10\xCE\x9E\x98\xE6\x1F\x0A\x71\x41\x0B\x19\x34\x9A\x03",
			"\x18\x7C\x78\x98\x1F\xB2\x02\x9A\xBA\x18\x82\x80\x94\x70\x48\x90\x76\xEB\x16\x0B\xAC\x9B\x0B\x71\x44\x83\xAA\x49\x10\xFF\x7E\x7B\xD7\x93\x12\xBD\x01\x97\xE6\x1F\x2E\xED\x90\x71\xEF\x9B\x6A\xE3\x10\x0C\x7B\x94\x0C\x71\x48\x30\x8E\x63\x10\x06\x86\x10\xFD\x7E\x9D\xBA\x16\x0C\x8D\x3D\xA0\x1C\x75\x9C\x02\x17\x0C\x71\x49\x0C\x19\x30\x9B\x03\x19\x9F\x10\xAE\x8A\xA6\x30\x81\x03\x1F\xA0\x84\x93\x1E\xCA\x0D\x38\x22\xA2\x10\x1C\xA1\x9D\xE6\x1B\x0C\x71\x4D\x0C\x19\x33\x81\xE5\x96\xA1\x01\x1E\x0C\x03\xAA\x10\x27\x32\x2B\x32\xA5\x7D\x34\xA0\x00\xD0\x07\xA3\x09\x1F\x86\x35\x8B\xA3\x01\x1A\x84\xE7\x9C\x21\xD2\x00\xA4\x06\x1D\x32\x3A\xAA\xA4\x24\x63\x1E\xD4\x0F\x3F\xD7\x01\x47\x79\x8E\x84\x13\x7A\x10\x1F\x8F\xA1\xB4\x19\x0D\x8D\x3C\x9E\x8B\x9B\x9F\x0A\x1A\x0D\x0A\x17\x62\xB8\x18\x33\x70\x8E\xA5\x1D\xAD\xA3\xE2\x0C\x79\xF8\x12\x34\xB2\x2A\x82\x06\x19\xA5\x25\xA6\x1E\xEC\x0D\x38\x70\xA3\x10\x68\xAC\xA2\xBA\x1D\x0E\x4E\xAC\x24\x31\x83\x10\x72\xAA\xA7\xBC\x1F\x0E\x8D\x36\x9F\x02\x11\xA8\x1C\x9C\x21\xF0\x0D\x38\x42\x89\x10\xF3\x87",
			"\xA4\x4C\x21\x0F\xEA\x9C\x1B\x85\x85\x83\x8D\xAF\xA5\x5A\xA8\x1B\xF5\x03\xA6\x8C\x81\x47\x97\xA3\x10\xFF\x8A\x8F\x1C\x2D\x0F\x93\xA4\x1B\x8F\x86\xA9\x0A\x19\x8F\x90\xA6\x28\x01\x04\x42\x86\x43\x12\x97\x88\xAA\xF8\x9D\xA3\x05\x04\x42\xEF\x48\x1B\x5F\x32\x2B\x0E\x79\x10\x88\xA2\xAA\x4C\x2F\x00\xD5\x6D\x3A\xBB\xA6\x10\x9F\xA2\xA8\xB4\x10\x01\x24\x4F\x75\xBA\x2D\x84\x80\xAD\xA3\x12\x01\xAC\x9E\x30\xA0\x47\x8D\xA3\x13\x0E\xAA\xEB\x19\x89\x35\x82\xAD\xA0\xAD\xA3\x17\x06\xAD\xA0\x8A\x21\xDA\xA2\x10\xAA\xA3\x99\xF8\x1B\x01\xDE\xA8\x1F\x6E\x32\x2B\x57\x8D\xAC\x60\xA9\x10\x1F\x00\xAD\xA6\x3B\xAE\x02\x11\xAE\x89\xAC\x24\x20\x09\xAC\x5D\x90\x00\x00\x37\x65\x6B\x71\x41\xFD\x66\x77\xAB\x68\x63\x30\x7B\x2C\x77\x7F\x0F\x02\xB3\xA0\x5F\x7E\x49\xAB\x64\x73\x50\x9E\x5C\x0C\xB0\x00\x59\x7E\x12\x11\xB5\x50\x27\x75\x55\xA2\x55\xAA\x29\x1A\x48\x39\x46\x13\x1B\xB5\x67\xAC\x9F\x74\x1F\xB0\x75\x0B\xAD\x66\x7B\x9B\xB1\x39\x4C\x54\x22\xB5\x9A\x63\x4E\xB1\x01\xAB\xB2\xB2\x20\xB2\x70\x8B\x65\x6A\x1E\x61\x64\x54\x41\x32\xB1\xB3\x64\x58\x63",
			"\x64\x56\x13\xBB\x4D\x75\xFD\x3F\x73\x97\x1A\x21\x3E\xBF\xB2\x40\xB7\x67\x35\x83\xB4\x57\x6A\x76\x3A\x1A\xB4\x2B\x1F\x65\x38\x6E\xB4\x23\x10\xB5\x59\x62\x6A\x6A\x14\xA6\x20\x11\x5D\x3B\xB8\xB5\xC1\x11\x47\x00\x01\x5D\x4C\x5E\xB5\x5B\xBD\xB2\x01\x13\x6A\x61\xBA\xB2\x02\x11\x5D\x1B\xB1\x5D\x07\xB7\x65",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr ) >>",
			L"[59][Module]<< !_PrimitiveExprOnly @ >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ ) >>",
			L"[62][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr ) >>",
			L"[63][Module]<< !_PrimitiveShared @ >>",
			L"[64][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ ) >>",
			L"[65][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType ) >>",
			L"[66][Module]<< !_PrimitiveTypeOnly @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubset2Tokens, ModuleParserStates, PrefixSubset2AstInsReceiver>(&PrefixSubset2TokenDeleter, &PrefixSubset2LexerData, &PrefixSubset2ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset2::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset2::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset2::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset2::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
