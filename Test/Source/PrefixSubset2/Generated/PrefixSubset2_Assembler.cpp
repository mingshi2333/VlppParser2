/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset2
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubset2_Assembler.h"

namespace prefixsubset2
{

/***********************************************************************
PrefixSubset2AstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> PrefixSubset2AstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = PrefixSubset2CppTypeName((PrefixSubset2Classes)type);
		switch((PrefixSubset2Classes)type)
		{
		case PrefixSubset2Classes::CallExpr:
			return new prefixsubset2::CallExpr();
		case PrefixSubset2Classes::ConstType:
			return new prefixsubset2::ConstType();
		case PrefixSubset2Classes::FunctionType:
			return new prefixsubset2::FunctionType();
		case PrefixSubset2Classes::MemberName:
			return new prefixsubset2::MemberName();
		case PrefixSubset2Classes::MulExpr:
			return new prefixsubset2::MulExpr();
		case PrefixSubset2Classes::Name:
			return new prefixsubset2::Name();
		case PrefixSubset2Classes::PointerType:
			return new prefixsubset2::PointerType();
		case PrefixSubset2Classes::TypeOrExprToResolve:
			return new prefixsubset2::TypeOrExprToResolve();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void PrefixSubset2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = PrefixSubset2CppFieldName((PrefixSubset2Fields)field);
		switch((PrefixSubset2Fields)field)
		{
		case PrefixSubset2Fields::CallExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::CallExpr::args, object, field, value, cppFieldName);
		case PrefixSubset2Fields::CallExpr_func:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::CallExpr::func, object, field, value, cppFieldName);
		case PrefixSubset2Fields::ConstType_type:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::ConstType::type, object, field, value, cppFieldName);
		case PrefixSubset2Fields::FunctionType_args:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::FunctionType::args, object, field, value, cppFieldName);
		case PrefixSubset2Fields::FunctionType_returnType:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::FunctionType::returnType, object, field, value, cppFieldName);
		case PrefixSubset2Fields::MemberName_parent:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::MemberName::parent, object, field, value, cppFieldName);
		case PrefixSubset2Fields::MulExpr_first:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::MulExpr::first, object, field, value, cppFieldName);
		case PrefixSubset2Fields::MulExpr_second:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::MulExpr::second, object, field, value, cppFieldName);
		case PrefixSubset2Fields::PointerType_type:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::PointerType::type, object, field, value, cppFieldName);
		case PrefixSubset2Fields::TypeOrExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&prefixsubset2::TypeOrExprToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void PrefixSubset2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = PrefixSubset2CppFieldName((PrefixSubset2Fields)field);
		switch((PrefixSubset2Fields)field)
		{
		case PrefixSubset2Fields::MemberName_member:
			return vl::glr::AssemblerSetTokenField(&prefixsubset2::MemberName::member, object, field, token, tokenIndex, cppFieldName);
		case PrefixSubset2Fields::Name_name:
			return vl::glr::AssemblerSetTokenField(&prefixsubset2::Name::name, object, field, token, tokenIndex, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
		}
	}

	void PrefixSubset2AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = PrefixSubset2CppFieldName((PrefixSubset2Fields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* PrefixSubset2TypeName(PrefixSubset2Classes type)
	{
		const wchar_t* results[] = {
			L"CallExpr",
			L"ConstType",
			L"FunctionType",
			L"MemberName",
			L"MulExpr",
			L"Name",
			L"PointerType",
			L"QualifiedName",
			L"TypeOrExpr",
			L"TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 10 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubset2CppTypeName(PrefixSubset2Classes type)
	{
		const wchar_t* results[] = {
			L"prefixsubset2::CallExpr",
			L"prefixsubset2::ConstType",
			L"prefixsubset2::FunctionType",
			L"prefixsubset2::MemberName",
			L"prefixsubset2::MulExpr",
			L"prefixsubset2::Name",
			L"prefixsubset2::PointerType",
			L"prefixsubset2::QualifiedName",
			L"prefixsubset2::TypeOrExpr",
			L"prefixsubset2::TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 10 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubset2FieldName(PrefixSubset2Fields field)
	{
		const wchar_t* results[] = {
			L"CallExpr::args",
			L"CallExpr::func",
			L"ConstType::type",
			L"FunctionType::args",
			L"FunctionType::returnType",
			L"MemberName::member",
			L"MemberName::parent",
			L"MulExpr::first",
			L"MulExpr::second",
			L"Name::name",
			L"PointerType::type",
			L"TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 12 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubset2CppFieldName(PrefixSubset2Fields field)
	{
		const wchar_t* results[] = {
			L"prefixsubset2::CallExpr::args",
			L"prefixsubset2::CallExpr::func",
			L"prefixsubset2::ConstType::type",
			L"prefixsubset2::FunctionType::args",
			L"prefixsubset2::FunctionType::returnType",
			L"prefixsubset2::MemberName::member",
			L"prefixsubset2::MemberName::parent",
			L"prefixsubset2::MulExpr::first",
			L"prefixsubset2::MulExpr::second",
			L"prefixsubset2::Name::name",
			L"prefixsubset2::PointerType::type",
			L"prefixsubset2::TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 12 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> PrefixSubset2AstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = PrefixSubset2CppTypeName((PrefixSubset2Classes)type);
		switch((PrefixSubset2Classes)type)
		{
		case PrefixSubset2Classes::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::CallExpr, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::ConstType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::ConstType, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::FunctionType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::FunctionType, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::MemberName:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::MemberName, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::MulExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::MulExpr, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::Name:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::Name, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::PointerType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::PointerType, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::QualifiedName:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::QualifiedName, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::TypeOrExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::TypeOrExpr, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset2Classes::TypeOrExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset2::TypeOrExprToResolve, prefixsubset2::TypeOrExprToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
