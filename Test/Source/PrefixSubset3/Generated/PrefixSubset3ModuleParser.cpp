/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset3
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubset3ModuleParser.h"

namespace prefixsubset3
{
	void PrefixSubset3ModuleParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 3691; // 33859 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 107;
		static const vl::vint dataSolidRows = 14;
		static const vl::vint dataRows = 15;
		static const char* compressed[] = {
			"\x43\x84\x00\x00\x63\x0E\x00\x00\x08\x00\x01\x82\x80\x09\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x80\x86\x83\x07\x0A\x94\x0A\x83\x1A\x81\x16\x85\x18\x0A\xB7\x0A\x9E\x42\x01\x87\x7F\x8F\x20\x9F\x8A\x80\x01\x91\x93\x91\x92\x20\xA7\xA8\x9F\x7A\x90\x95\x97\x92\x2F\xA6\x8A\x8B\x9C\x93\x92\x85\x00\x33\xAB\xB1\x89\x99\x9E\x95\x9E\x98\x3F\xB2\x9E\x9A\x91\xA4\x9F\xA0\x9F\x47\xC0\x89\xA2\xA6\x84\x9B\x90\x9C\x09\xD0\x86\x9D\x81\xAD\xA2\x90\xAB\x35\xCB\x86\xAD\xA4\xA2\xAF\xAA\xAF\x59\xDC\x88\xA2\xBA\xA4\xB0\xA7\x81\x4E\xD8\xBB\x9F\xA6\xB3\xAC\xB5\xAE\x6D\xEC\xAF\xA3\xB3\x83\x03\x9A\xB5\x0A\x84\x37\xA9\x85\x03\xBD\xB9\xB0\x73\xE5\x81\xC7\xB2\x81\xB4\xB1\xB5\x80\x85\xF0\xA3\xCE\xB2\xC4\xBA\xC7\x82\x90\xC4\xC1\x86\xC7\xBF\x90\x86\x55\x87\xF8\xBA\xCC\xCE\xCB\xCC\xCF\x9D\x8C\xF2\xB2\xCD\xC4\xCB\xC4\xD2\xA3\x81\x87\x1E\xB2\xD1\xC6\xD3\xC7\xAF\x91\xF1\xD3\xC4\x97\xD3\xD9\xD2\xB5\xB0\xF9\xD2\xDB\xDC\xD9\xCB\xD6\x23\x80\x99\xC0\xD4\xE0\xE3\xCE\xE3\xA1\xA8\xEE\xDD\xD8\xDF\xDE\xE4\xC4\xD0\xC7\xCF\xF2\xE1\x86\x87\x80\xAA\xC5\xD3\xC9\xF7",
			"\xD9\xD4\xE5\xEE\xE7\xDC\xCB\xE0\xFE\xE2\xF6\xD8\xF3\xE8\xDB\xE7\xD4\xEA\xF9\xF3\xF2\xF6\xF3\xE3\x8B\x2C\xDA\xE9\xE9\xF0\xF5\xFA\xEC\xF8\xCC\x0A\x88\xE8\xE4\xFD\xF1\x0E\x33\x76\x7F\x7A\xEF\x7A\x65\x80\x6F\x07\xBE\x66\x78\x44\xC3\x7E\x7E\x80\x7D\x0F\x83\x8D\x78\x7C\x14\x86\x85\x84\x6F\x10\x02\x89\x7D\x84\x1B\x90\x8E\x86\x84\xFF\x57\x8A\x82\x85\x24\x88\x82\x89\x73\x27\x9F\x76\x79\x04\x1A\x89\x88\x89\x89\x23\xA6\x80\x8F\x8B\x32\xB5\x81\x8F\x8D\xB8\x52\x0D\x89\x8A\xE5\x73\x8A\x8A\x8F\x3D\xB6\x88\x6F\x04\x3B\x80\x97\x7C\x87\xE3\x52\x4D\x83\x87\x1D\xA0\x88\x90\x8F\x47\x82\x45\x04\x7F\xEB\x57\x05\x92\x90\x3F\x98\x91\x90\x8E\x59\x9C\x9B\x94\x8D\x5E\xA3\x48\x06\x86\x19\x0A\x46\x5F\x84\x46\x84\x80\x96\x9A\xBA\x5C\x0A\x85\x07\x66\xAC\x9A\x95\x94\x4E\x8C\x9E\x89\x97\x60\xB9\x9D\x74\x08\x57\xA1\x9A\x41\x08\x54\xA9\x74\x47\x92\x75\x85\xAD\x93\xA1\x77\x9F\x9D\x74\x09\x81\xB8\x76\x09\x9F\xB8\x67\x0A\x84\x0A\x71\xA8\x93\x9E\x9C\x7E\x96\xA9\xA5\x88\xBA\x6B\x0A\x84\x0B\x90\xB8\x92\xAA\xA2\xA4\xA3\x4D\x0A\x86\x2E\x15\xAC\xA7\xA5",
			"\x9A\xBA\x95\xAB\x7A\x18\x44\xA0\x02\x0C\xAA\x8F\x99\x99\xAB\xA3\xB4\x98\xA3\x9A\x09\x75\x01\xAB\xAB\xB8\x80\xBB\xAB\xA6\xB6\xAC\xA3\xB2\xAB\x23\x76\x0F\xAE\xAE\x89\x8C\xBC\xAC\x7E\x1A\x72\xAD\xB3\x7A\x38\x1A\x89\x0D\xAD\x76\x8F\xB5\xB0\xB1\xD9\xBA\x6C\x0E\x86\x3D\x18\xB6\xA3\xB4\xC1\x8E\xB7\xAF\xB1\xDD\x40\x1B\xB0\xA6\xC8\xAB\x71\x13\xBA\xE5\xAC\xB9\xAE\xBC\xC2\x9B\xB8\x6E\x10\xF0\xA8\xB5\xBD\xB7\xC6\xB6\xBD\x77\x10\xF9\xBE\xBB\xBF\xB8\xDA\xBC\xB4\x6C\x11\x01\xC6\xCD\xB9\xBC\x0C\xF8\x75\x11\xC2\x04\xE7\xB2\xC2\xB9\xFD\x8A\xCD\x76\x11\x10\xFB\xA2\xC4\x93\x47\x19\xC4\xBA\xBE\x14\xDC\xB1\xC5\xC5\x23\xF4\x68\x12\x86\x49\x1E\xC5\xC2\xA1\x4A\x2A\xCB\xC5\x40\x4B\x2E\xC4\xCA\xC6\xBC\x4C\x19\xC5\x13\x1A\x8E\x12\xCE\xC8\x34\xFC\xCF\xC7\xC4\xEB\x4F\x1A\x84\x14\x3B\xCB\xC0\xC8\xBD\x23\x51\x15\xD3\xBC\x0D\xC0\xD9\x42\x14\x1A\x93\x1B\xD3\xC0\x3D\xC6\xDE\xD3\xD1\x09\x54\x13\xD5\xC8\x56\xC2\x45\x17\xD6\x48\xE1\xDD\xD2\xC5\x54\xFF\xC2\x42\x15\x60\xE3\xD6\xA3\x15\x19\xD8\x1A\x85\x16\x69\xD8\xD2\xDF\xD5\x74\xE4\xDC\xD4\xD3\x06",
			"\x5A\x11\xDF\x40\x5B\x1A\x8C\x17\xDE\x76\xE2\xD3\xDD\xE0\x09\x5D\x10\xE2\xA1\x5E\x0D\xAC\x84\x18\x87\xD5\xD8\xDD\xDD\x25\xDD\xD6\xA1\x18\x8D\xE6\xD1\xE7\xE3\x84\xC3\xE1\x42\x18\x95\xEB\xC0\x03\x18\x8D\xE4\x1A\x85\x19\x9D\xEF\xCE\xE1\xD9\xE6\x66\x15\xEB\xCC\x96\xE7\xEA\xAF\x19\xAB\xFE\xCE\xE5\xEB\xB4\xE6\x78\x1A\xE2\x99\xDC\x8A\x1A\x86\x6B\x38\xE7\xE7\x72\x6D\x1A\x8E\x19\xEC\x92\xEE\xE2\xE3\x40\x6F\x04\xF8\xE7\xEF\x77\xE8\xE6\xE8\x1C\xCA\xCB\x71\x1E\x86\x72\x0D\xE3\x1E\x86\x74\x11\xFD\xF3\xF6\xEB\x49\x12\x56\x40\xFD\x42\x4D\x5D\xB0\x34\x4A\x0D\x40\x56\x98\x7F\x54\x4D\xFA\xAD\x74\x47\x9A\x41\xEF\xED\x66\xF9\x42\xEC\xE4\xD5\xFA\x42\xE3\xFF\x55\xFD\x78\xEB\xD8\x5E\xFA\xB8\xE4\x33\x7E\x41\x7B\x74\x3C\xBD\x20\x2C\x26\xE1\x61\x21\xFE\x02\x67\x7F\x84\x16\x3A\x39\x0B\x8A\x39\xFF\x07\x8B\x25\x04\x80\x07\x7B\xCA\x36\x80\x06\xE1\x36\x80\xF5\x55\x80\x7F\xF4\x4D\x82\x41\x0F\x81\x3C\x0D\x98\x2E\x84\x60\x24\x80\x4D\x13\x8E\x82\x94\x1D\x85\x7D\x2B\x2A\x87\x0A\xAE\x8E\x7F\x95\x2F\x82\x82\x36\x95\x84\x0D\x94\x8B\x87\x16\xA5\x27",
			"\x86\xFC\x79\x84\x0F\xBF\x8A\x87\x92\x16\x81\x82\xBF\x62\x87\x40\x24\x85\x81\x22\xA1\x20\x85\x7F\x20\x88\x79\x08\x8F\x56\x29\xB3\x85\x87\x30\x88\x27\x11\xA1\x8B\x24\x01\x8B\x88\x2B\xF1\x60\x7C\x56\x5E\x82\x20\x2B\xAB\x21\x8C\x01\x32\x84\x4A\x64\x81\x20\x36\xA4\x38\x8D\x17\x83\x8E\xEF\x6F\x83\x8E\x25\xA5\x88\x8C\x0A\x2A\x8D\x49\x6E\x8E\x8D\xFF\x52\x5D\x8B\x75\x82\x8A\x0F\xCF\x85\x8A\x27\xA0\x20\x8A\xAD\x26\x8F\x15\xA0\x2A\x91\x45\xBF\x1B\x8B\xE4\x60\x92\x03\xD8\x2D\x91\x45\x88\x92\x39\x95\x97\x8B\x25\x9C\x86\x91\x8F\x19\x93\x86\x90\x9A\x5E\x1D\xD5\x38\x7D\x4E\xBF\x1A\x8F\x8B\x90\x8E\x05\xA3\x90\x01\x4F\xA7\x96\x94\x70\x88\x94\x48\x7C\x85\x95\x21\xA1\x20\x8E\x1B\x81\x81\x20\xA8\x22\x97\x19\xBD\x93\x85\xAA\x92\x8D\x42\x2E\x9F\x96\x3F\x83\x82\x98\x06\x3D\x8D\x0C\xB0\x9F\x56\x37\xAB\x93\x99\xB6\x80\x25\x31\xE7\x8B\x97\x3D\xB9\x2D\x96\x83\x80\x25\x2C\xC8\x93\x20\x65\xBC\x94\x99\x7F\x8B\x8D\x35\xA1\x23\x9B\x6F\x91\x9F\x23\xC1\x80\x2E\x1B\xC4\x90\x9D\x63\xAA\x9A\x21\xDE\x85\x25\x39\xA5\x28\x96\x6E\xA2\x89\x85\xA6\x93",
			"\x9F\x2D\xE3\x93\x97\x6B\xB8\x9F\x9C\xFF\x1B\x9B\x3B\x89\x21\x9E\x72\xAD\x9B\x20\xB9\x8C\x97\x33\xD8\x88\x86\x86\x81\x8E\xA1\x53\x82\x91\x16\xC6\x80\x85\x48\xA2\x9B\x92\x60\x28\x89\x44\xE6\x99\x9B\x8F\x1A\xA6\x91\xD2\x86\x96\x2B\xB4\x23\xA4\x89\x8D\xA4\x88\x00\xA5\xA4\x44\xA0\xAF\x23\x50\x8C\x82\x92\x23\x94\x92\x48\xB3\xA9\xA4\x9A\x9D\xA7\x1F\x2A\xA8\xA7\x4D\xB9\xA4\x90\xBE\x1C\x8F\xA2\x31\xA0\x2C\x4F\x8C\x96\xA7\x89\xA1\x23\xA8\x9E\x85\xAB\x49\xC7\xAA\xA9\x87\x94\xA6\xA7\x16\xB6\x98\x46\xFA\x79\x9F\x83\xB6\x21\x3C\x6E\x89\xA0\x34\xB7\xAA\x9E\x6D\x97\xAF\x2F\x59\xB2\xA5\x4D\xE3\xAB\xA7\xA6\x9B\xA2\xA7\x46\xA4\xA8\x59\xE9\xAD\xA5\x8A\xA2\x90\xA6\x5F\x82\xAA\x59\xAC\xA8\xA7\xB9\xAC\xA0\xA9\x75\xA0\xA2\x4B\xF6\x70\xAF\x83\x18\x9C\xAD\xAF\x80\xA0\x1C\xAE\x9E\x8D\xD5\x3F\x9C\xAB\x56\xA1\x20\x61\x8A\x26\xB1\x28\xB6\xA8\xA4\x78\xBB\x91\x13\xFA\xA5\x91\xB5\x8B\xAF\x90\x6E\xAF\xA4\x50\xF1\xA4\xAA\x80\x9D\xAF\x23\xC2\x25\xAE\x65\xCE\xAC\xA8\x80\x8C\x8C\xAE\x1F\xAC\xA7\x67\x81\xAF\xAA\xF9\x7F\x53\xB5\xA1\xA0\xB0\x5E\xB3",
			"\xB6\x95\xD3\xAC\xA1\xB5\x20\xAB\xB4\x6E\x8E\x9B\xB5\xC1\xB6\x9A\x35\x58\x3B\xB7\x22\xBA\xB5\xAA\xCF\x85\xBF\xA6\xB1\xB7\xB1\x52\xA6\xB9\xB0\x00\x0B\xA2\xAA\x06\x2C\x9C\x40\xC9\xB4\xB4\xB5\xA2\xB7\xBA\x80\xB6\xB4\x48\xC2\xB7\x8B\xDE\xAD\xB2\x39\x61\xA7\xB0\x60\xD4\xB7\xAD\xD2\xB7\xA2\xBB\x8E\x95\x9F\x40\xD3\x2F\xAE\xE5\xBF\x1C\xBC\x74\xB8\xAC\x7A\xA9\x99\x8F\xDF\x80\x05\xA0\x21\xB3\xBB\x63\x8E\x94\xB6\xE6\x80\xA4\xBB\xBE\x86\x94\x80\xAB\x8E\xBB\x61\xB6\xBD\xB1\xAD\x23\xC0\x0B\x80\xBA\xC1\xAD\x80\xB0\xB6\xFB\xAB\x93\x7C\xD7\x89\x9C\xB0\xBE\x9D\xB3\xC8\xB1\xC3\x15\x93\xC3\x86\xF5\x96\xC1\x21\xCF\xA6\xA2\x7E\xA3\xB5\xBC\x90\x1C\xC0\x98\xF5\xAB\xBD\x37\xC1\xB7\xB8\x06\xE6\x96\x99\xF6\xA1\xC4\x48\x0D\xC8\x24\x1A\xE5\x26\xC6\x21\x38\xC7\x8C\xAF\xC0\x80\x56\xB0\x8C\x95\x88\x2E\x8D\x90\x8A\x20\xBF\x95\x3A\xC6\xA3\x02\xC9\xC8\x40\xA3\x20\x6F\xEF\xB1\x8E\xC9\x16\x96\x82\x6F\xD0\xAE\x9C\xF8\x57\xC3\x20\x1A\xA8\xC3\x57\xE4\xB4\xBC\x26\xA3\x26\x8D\xE4\xA0\xCC\x3C\xE7\x7E\xC8\xF9\x09\x24\xBC\x66\xC6\x20\x9A\xE4\xCF\xBA\x02",
			"\x9A\xCF\xAA\x1A\xA4\x81\x96\xCE\xC0\x01\xFD\x06\xC4\xCA\x03\x24\x82\x9D\xD1\xB9\xB2\x81\x2F\xCE\x26\x0D\x17\xCA\xF8\x29\xC6\x21\x40\xF7\xCE\x20\x73\xCE\xCA\x14\xF1\xC2\xD0\x05\x8C\xB4\xCE\x01\x58\xCF\x42\x0A\x21\xD2\x44\xCF\xD6\xC9\x0C\x46\x21\x86\x09\x2B\xD2\x83\x2C\x46\xC9\x3A\x47\xD3\x40\x21\xD6\x20\x22\x49\x22\x49\x7C\xC9\x22\xA9\xA5\xD1\x22\x85\x13\x49\x21\xAF\xC6\x21\xAC\x83\x26\x02\x3A\xE4\xBB\x24\x3F\xC6\x3D\x2E\x86\xD4\xCF\x84\x39\x03\x83\xB9\x96\x81\xA5\xBD\xD3\x20\x1D\x00\xDF\xD2\x06\x24\xD5\x6B\xF0\x8B\x07\x63\xF4\x7A\x21\xCA\x4E\xC8\x1C\xBC\x0E\xD8\x4B\xC9\x20\x06\x74\xD0\x8D\x0F\x55\xD5\x2E\x85\x12\x52\xDA\xEB\x39\x94\xA5\x60\xD9\x3C\x0B\xA2\x01\xDB\x0A\x3E\x04\xB7\x82\x29\x96\x40\x64\xDE\x20\x3F\x0B\xDE\x62\x8A\x2B\x02\x62\xC9\x20\x08\xF2\xCD\x94\xBD\xF6\xD6\x21\x20\x39\xDF\xCF\xA9\x5C\xDE\x40\x42\x0F\xDE\x85\x01\xE2\xE0\x00\x03\x09\xBE\x84\x84\x06\x84\xC1\x24\x08\xF9\xCC\xD8\xBA\xE5\xDA\x20\x7C\x6F\xDC\x43\xB9\x9F\x07\xC4\xF8\x3F\xCF\x6B\x57\xE2\x20\x45\x19\xDE\x14\xDF\x5F\xE3\x80\x06\x0D\xE0",
			"\x09\x21\x5D\xC9\x80\x07\x08\x91\xCA\x22\x5D\x2B\xE8\x09\xBE\xF5\x04\xCE\x19\xDD\x3A\x57\x4F\x3A\x42\xCD\xCB\x32\xB3\xF1\x3A\x56\xC3\x90\x6E\xB9\x9F\x86\x5A\x56\x29\x96\x84\x80\x5A\xBA\x37\x94\xF8\x3C\x7B\x84\x3F\xCB\xE7\x23\x32\x89\xD2\xBC\x3A\x56\x26\x93\xEC\x67\x8B\xCB\x3E\xAE\x30\xC9\x21\x3D\xC8\xA3\x3D\x1A\xB9\xD6\x6E\x4D\xEA\x72\x00\x04\x80\xEA\x74\xC3\x3C\xAF\xD7\x3A\x21\x4C\xEC\xEE\xC9\xB9\x84\xBF\x9F\xBE\xEB\x3D\x4F\xEC\xBA\x6D\x04\x2A\x21\x9A\x9C\x4A\x57\x55\xDF\xE8\xEF\x4C\x9E\xE8\x93\x3A\x58\xD5\xBF\xE5\xEB\xEF\xF7\x8C\xEB\x7A\x33\xD9\xF1\x81\x16\x48\xC4\x3A\xEA\x22\xE0\x81\x28\xF0\xA2\xEB\x3D\x4C\xE1\x9C\x34\xD0\x82\x23\xF3\x3A\xDA\xEB\x3D\x1A\x19\x62\xD4\x8A\x2B\xEC\x81\x38\xBF\xE6\xEB\x35\xDD\xE6\xBC\x63\xD8\xD3\xDF\xF1\x3D\x6E\x4B\xF5\xF1\x6E\xE2\x20\xBF\xC3\xF3\x3D\x70\x52\xF7\xF2\x00\x06\xEF\x81\x1D\xD4\xEF\xEB\x3E\x01\xE3\x4A\xD2\x21\xDE\xF7\xF0\xEF\xAD\x76\xF5\x40\x4A\xF7\x50\x5D\x5F\x05\xD1\x87\x5A\xA2\x14\xCC\xF8\xEC\x27\xE3\x3B\x50\xD6\xC6\x23\xB8\xF7\xE1\xA9\xEC\xC3\x25\xF0\x02\x35\xF1",
			"\xF3\xEB\x3A\x04\x7E\x9D\x3D\xF5\x01\x39\x94\xF8\x81\x2D\xF2\xBA\xE9\x38\x54\x90\xE9\x3C\xED\xE9\xFD\xD5\xF8\xCA\xF1\x3D\x07\xFD\xD9\x42\x31\x5C\xFA\xDF\xF3\x8D\xD6\xB0\x6F\x7A\x65\x7D\x3A\x00\x86\x10\xC2\x79\x1E\xBA\x23\x03\x1A\x2D\x70\xBA\x7B\x1C\x05\x83\x10\xCF\x78\x80\xEB\x1E\x2B\xB2\x21\x6D\x06\x17\x75\xB8\x1F\x80\x02\x1C\x27\x12\x89\x1E\xD1\x27\x81\x0A\x15\x2D\x0D\x83\x12\x8F\x72\x6B\x02\x81\x74\xAD\x35\x82\x03\x17\x80\xF7\x78\x1F\x1E\x70\x82\x09\x1A\x03\x19\x3A\x82\x02\x11\x81\x2D\x8C\x21\x3B\x0A\x21\x24\x70\x83\xF8\x14\x83\x01\x1C\x81\x37\x8C\x24\x2A\x7C\x83\x03\x1E\x03\x19\x33\x26\x09\x11\x7A\x1D\x83\x80\x9E\x38\x84\x06\x12\x7E\xEE\x78\x1F\x1A\x76\x7F\x1C\x24\x7C\x01\x16\x41\x4E\x83\x10\xED\x76\x1E\xBA\x2F\x2E\x54\x8C\x24\xEB\x72\x74\x09\x19\x85\x8D\x77\x7C\xF8\x10\x30\x09\x10\x47\x18\x3F\x85\x01\x1A\x81\x01\x10\x47\x98\x7F\x84\x27\x8C\x24\x27\x3C\x86\x87\x21\x87\x6F\x76\x10\x78\x8C\x79\x73\x8C\x32\xE6\x7B\x1C\xAA\x7D\x7F\x02\x1B\x87\x57\x8D\x87\x87\x26\x33\x69\x8A\x10\x42\x36\x87\xB9\x76\x65\x49\x8E",
			"\x6A\x86\x83\x1E\x4A\x33\x82\xA0\x7A\x10\x2C\x80\x7C\xE9\x10\x35\x76\x8A\x35\x94\x8F\x88\x09\x16\x83\x98\x88\x1F\x5F\x36\x87\x6C\x3D\x89\x06\x1A\x84\x06\x10\x84\xA1\x8C\x21\x6E\x36\x87\x7A\x36\x8A\x03\x11\x88\x03\x18\x8A\xAB\x89\x3B\xB6\x81\x10\xB2\x83\x88\x91\x83\x3B\x9E\x31\x7B\x26\x8B\x84\x1C\x2D\x37\xB0\x8C\x24\xBE\x8B\x82\xBB\x8A\x1B\x7F\x36\x87\x89\x33\x8C\x01\x15\x8C\x35\x87\x8C\xBC\x1F\x05\x73\x44\x39\xCC\x80\x00\xCE\x8F\x83\xD0\x84\x1B\x9C\x36\x87\xA2\x35\x8D\x8D\x83\x10\x8C\x76\x79\xE9\x14\x3A\xD5\x83\x1E\xDF\x82\x10\x97\x86\x86\x1C\x2A\x3A\x76\x87\x3B\xDE\x8A\x10\xA0\x8A\x8E\x4C\x29\x06\x73\x4D\x3B\xEF\x89\x10\xAA\x82\x8F\x86\x2C\x06\x73\x43\x3C\xD5\x89\x8E\x01\x14\x86\xE2\x8C\x84\xA6\x31\x8F\xCD\x89\x8D\xC5\x3D\x3A\xF9\x81\x10\xE7\x83\x90\x28\x8E\x39\xEE\x6F\x8B\x41\x86\x28\xC9\x35\x8E\xE6\x11\x91\xC6\x80\x8C\x4C\x20\x3D\x76\x85\x3D\xD5\x88\x91\xCF\x8A\x91\x86\x27\x3D\x76\x84\x73\x1F\x9A\x10\x0B\x93\x7E\xE9\x16\x07\x73\x48\x07\x19\x37\x6E\x01\x82\x92\x87\x29\x07\x8D\x30\x93\x06\x88\x90\xDD\x1A\x07",
			"\x73\x4C\x07\x2F\x90\x8F\x38\x9B\x1C\x7D\x03\x47\x7F\x0D\x93\xF8\x8F\x93\x23\x10\x08\x73\x42\x08\x19\x38\x7D\x03\x1C\x7C\x51\x8C\x21\x83\x0F\x87\x23\x19\x92\xB9\x4C\x94\x65\x8E\x90\x4C\x25\x08\x00\x48\x08\x73\x40\x92\x85\x89\x10\x25\x0A\x10\x8C\x22\x93\xB5\x36\x3A\x8F\x29\x10\x63\x93\x91\xC6\x38\x77\xDF\x66\x10\x69\x95\x8B\x86\x2A\x08\x52\x9B\x1E\xDB\x73\x10\x6F\x9A\x8F\x87\x2C\x08\x73\x99\x1E\x16\x1A\x6A\x46\x9A\x10\x8E\x0D\x63\xE6\x16\x95\x5F\x96\x10\x7D\x92\x88\x58\x96\x28\x91\x00\x7D\x95\x03\x47\x61\x99\x88\x09\x1E\x29\x7E\x94\x96\xE6\x17\x09\xD0\x73\x1E\x75\x97\x47\x91\x9A\x10\xA7\x24\x99\xA6\x3D\x3A\x92\x98\x98\x2A\x98\x1F\x9B\x03\x74\x00\x00\x0A\x73\x40\x7F\xDE\x72\x10\xAA\x9D\x94\x7F\x99\x10\xA2\x07\x99\xE6\x1C\x7F\x03\x12\x45\xAD\x97\x95\xA3\x9C\x21\xA6\x06\x9A\xAB\x03\x47\x14\x8B\x9A\x01\x1D\x99\x06\x15\x7E\x9E\x9C\x1B\xAD\x0D\x38\xC2\x93\x10\x2F\x0F\x9A\x06\x1E\x0A\x73\x40\x0B\x19\x39\x7F\x02\x19\x9C\x78\x95\x96\x33\x32\x9D\x01\x17\x9B\x89\x9B\x96\x65\x7B\x9C\x9B\x95\x9C\xB2\x36\x3A\xD8\x69\x10\xC4",
			"\x9A\x96\xE3\x11\x0B\x8D\x33\x9E\x06\x1E\x9D\xE6\x96\x1E\xB2\x03\x47\xB4\x09\x31\xB4\x95\x7B\xCC\x93\x10\xB5\x02\x9B\xBA\x12\x83\x90\x96\x10\xF3\x95\x98\x70\x97\x28\xB9\x06\x9A\xBE\x03\x47\x43\x85\x9B\x0A\x1A\x80\x93\x9D\x9E\xBA\x10\x0C\x82\x9A\x1B\x5E\x8E\x88\x06\x18\xA0\xA2\x9F\x94\x4C\x23\x0C\xD0\x77\x0C\x73\x48\x30\xA2\x62\x10\x0C\x86\x10\xB4\x20\x9E\xB8\x19\x0C\x8D\x3D\xA1\x03\x1F\x9B\xFF\x93\x1E\xCA\x03\x47\xCC\x09\x31\x26\xA2\x10\x12\xA7\xA2\xBC\x86\x3A\x16\x83\x10\x1F\xAA\xA0\xBC\x1D\x0C\x8D\x33\xA3\x02\x1D\xA2\xDB\x93\x1E\xCE\x03\x47\xD0\x09\x31\x1F\x8E\x9A\x20\xAD\x1D\xD1\x0B\x97\x06\x15\x87\x44\x82\x10\x43\xA1\x7E\xF5\x92\x10\xD3\x08\xA4\x03\x19\x32\xB2\x2D\xA4\xEC\x7F\xA4\x01\x15\x0D\x52\xA2\x10\x2D\x35\xA5\x5B\xA7\x55\xE3\x17\x0D\x00\x4A\x0D\x73\x41\x33\x76\x8F\x82\x03\x12\x82\x36\xA4\x1B\xDC\x0D\x38\xFA\x96\x10\xA1\x90\xA3\xBA\x1D\x0D\x63\x69\x1E\x38\x36\x87\x6F\xA3\x10\x2F\xA5\x9D\xE6\x17\x0E\x92\x71\x34\x1A\x29\x83\x09\x1A\xA6\x72\xAC\x1B\xF3\x0F\xA5\x87\x22\xA8\x06\x19\xA7\x7C\xA6\x3A\xF5\x09",
			"\x31\x3B\x89\xA6\x58\xA0\x00\xF6\x0D\x38\x05\xA2\x10\x84\xAD\xA8\xBC\x17\x0F\x8D\x36\x84\x63\x83\xA9\xF8\x04\x68\x1C\x24\x34\xB2\x2E\xA9\x70\xA3\xA9\xFE\x05\xA7\xF8\x13\x89\xA2\x96\xAA\x03\x1D\x90\xB9\x9C\x24\x08\x0B\x41\xBF\x43\x12\x52\x35\xAA\x0A\x17\x8D\xB1\xA6\x28\x0E\x04\xAB\xEB\x1C\x89\x4B\xA1\x10\xAE\xAE\xA2\x93\xA4\x01\x1B\x4B\x85\xBA\x13\x8A\xC1\xA0\x00\x53\x86\x10\x99\xAD\xA3\xE6\x10\x02\x1B\x45\x7D\x52\x89\x6E\x93\xA3\x1E\x22\x09\x6F\xE3\x10\x73\xCE\xA3\xA9\x23\x0A\xAD\x9E\x3F\xA0\x03\x12\x90\xBB\xA7\x28\x24\x0E\xAB\xE9\x18\x36\xB2\x22\xAE\x02\x10\xAB\x14\xA6\x28\x2A\x08\xAE\xF8\x15\x8A\xCB\xAC\xAE\x07\x95\xA4\xCB\x10\x03\xF2\xAC\x8A\x1A\x26\x71\xDD\xA8\xAF\xC9\x23\xAD\xC7\x33\x70\x0A\x16\xAF\xE5\xAD\x3A\x38\x00\xAE\xBA\x18\x86\xDF\x5E\x73\x2B\x4E\x70\xEC\x6D\x6B\xB9\x46\x13\x13\xB8\x81\x22\x16\xB1\x1F\x13\xB1\x23\x10\x75\x3B\x7F\x48\xBD\x62\x59\x62\x80\x65\x1A\x20\x00\x62\x70\x13\x25\xB4\x4F\xBD\x60\x47\x36\x1A\xB2\x51\x7A\x16\x23\x52\x45\x36\x10\xB3\x2D\xB2\x69\x9A\x90\x9C\xF3\x64\xB3\x37\xB6\xB3",
			"\xFA\x6B\xA1\x35\xBA\x7F\x3C\xB0\x00\x1A\x5B\xB3\xA9\x6F\xB3\x2A\xB3\x7A\xD0\x76\x41\x40\xBA\x16\x0A\x6A\x51\x48\xBC\xB4\x23\x1A\x51\x13\xB1\xB4\x97\x1A\x16\xC5\x48\x74\x53\xB2\x2B\x66\x73\xB2\x56\xB2\xAA\x11\xBC\xB5\x5F\x53\x77\x3A\x10\xB6\x2B\x1F\x67\x13\xB4\xB6\x23\x16\xB6\xC8\x6F\x5D\x45\x6E\x12\x6B\xB8\x12\xE4\x51\xB4\x6F\xB1\x1C\x73\x40\x00\xE4\x5A\xB2\x75\xB2\xB7\xFB\x9A\x66\xBD\x64\x5E\x30\xBC\xB7\x78\xBB\xAC\xC4\x60",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ModuleParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"_Name",
			L"_PrimitiveShared",
			L"_PrimitiveTypeOnly",
			L"_PrimitiveExprOnly",
			L"_LongType",
			L"_Expr0",
			L"_Expr1",
			L"_Expr",
			L"Module",
		};
		return results[index];
	}

	const wchar_t* ModuleParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][_Name] BEGIN ",
			L"[1][_Name] END [ENDING]",
			L"[2][_Name]< ID @ >",
			L"[3][_Name]< _Name \".\" @ ID >",
			L"[4][_Name]< _Name \".\" ID @ >",
			L"[5][_Name]< _Name @ \".\" ID >",
			L"[6][_PrimitiveShared] BEGIN ",
			L"[7][_PrimitiveShared] END [ENDING]",
			L"[8][_PrimitiveShared]<< !_Name @ >>",
			L"[9][_PrimitiveTypeOnly] BEGIN ",
			L"[10][_PrimitiveTypeOnly] END [ENDING]",
			L"[11][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveShared >",
			L"[12][_PrimitiveTypeOnly]< \"const\" @ _PrimitiveTypeOnly >",
			L"[13][_PrimitiveTypeOnly]< \"const\" _PrimitiveShared @ >",
			L"[14][_PrimitiveTypeOnly]< \"const\" _PrimitiveTypeOnly @ >",
			L"[15][_PrimitiveExprOnly] BEGIN ",
			L"[16][_PrimitiveExprOnly] END [ENDING]",
			L"[17][_PrimitiveExprOnly]<< \"(\" !_Expr \")\" @ >>",
			L"[18][_PrimitiveExprOnly]<< \"(\" !_Expr @ \")\" >>",
			L"[19][_PrimitiveExprOnly]<< \"(\" @ !_Expr \")\" >>",
			L"[20][_LongType] BEGIN ",
			L"[21][_LongType] END [ENDING]",
			L"[22][_LongType]( lrp:Shared @ | lrp:Type )",
			L"[23][_LongType]( lrp:Shared | lrp:Type @ )",
			L"[24][_LongType]< _LongType \"(\" @ { _LongType ; \",\" } \")\" >",
			L"[25][_LongType]< _LongType \"(\" { _LongType ; \",\" @ } \")\" >",
			L"[26][_LongType]< _LongType \"(\" { _LongType ; \",\" } \")\" @ >",
			L"[27][_LongType]< _LongType \"(\" { _LongType @ ; \",\" } \")\" >",
			L"[28][_LongType]< _LongType \"*\" @ >",
			L"[29][_LongType]< _LongType \"const\" @ >",
			L"[30][_LongType]< _LongType @ \"(\" { _LongType ; \",\" } \")\" >",
			L"[31][_LongType]< _LongType @ \"*\" >",
			L"[32][_LongType]< _LongType @ \"const\" >",
			L"[33][_LongType]<< !_PrimitiveShared @ >>",
			L"[34][_LongType]<< !_PrimitiveTypeOnly @ >>",
			L"[35][_Expr0] BEGIN ",
			L"[36][_Expr0] END [ENDING]",
			L"[37][_Expr0]( lrp:Shared @ | lrp:Expr )",
			L"[38][_Expr0]( lrp:Shared | lrp:Expr @ )",
			L"[39][_Expr0]<< !_PrimitiveExprOnly @ >>",
			L"[40][_Expr0]<< !_PrimitiveShared @ >>",
			L"[41][_Expr1] BEGIN ",
			L"[42][_Expr1] END [ENDING]",
			L"[43][_Expr1]< _Expr1 \"(\" @ { _Expr ; \",\" } \")\" >",
			L"[44][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" @ } \")\" >",
			L"[45][_Expr1]< _Expr1 \"(\" { _Expr ; \",\" } \")\" @ >",
			L"[46][_Expr1]< _Expr1 \"(\" { _Expr @ ; \",\" } \")\" >",
			L"[47][_Expr1]< _Expr1 @ \"(\" { _Expr ; \",\" } \")\" >",
			L"[48][_Expr1]<< !_Expr0 @ >>",
			L"[49][_Expr] BEGIN ",
			L"[50][_Expr] END [ENDING]",
			L"[51][_Expr]< _Expr \"*\" @ _Expr1 >",
			L"[52][_Expr]< _Expr \"*\" _Expr1 @ >",
			L"[53][_Expr]< _Expr @ \"*\" _Expr1 >",
			L"[54][_Expr]<< !_Expr1 @ >>",
			L"[55][Module] BEGIN ",
			L"[56][Module] END [ENDING]",
			L"[57][Module]<< !_PrimitiveExprOnly ( lri:_Expr @ ) >>",
			L"[58][Module]<< !_PrimitiveExprOnly @ ( lri:_Expr ) >>",
			L"[59][Module]<< !_PrimitiveExprOnly @ >>",
			L"[60][Module]<< !_PrimitiveShared ( lri:_LongType @ | lri:_Expr ) >>",
			L"[61][Module]<< !_PrimitiveShared ( lri:_LongType | lri:_Expr @ ) >>",
			L"[62][Module]<< !_PrimitiveShared @ ( lri:_LongType | lri:_Expr ) >>",
			L"[63][Module]<< !_PrimitiveShared @ >>",
			L"[64][Module]<< !_PrimitiveTypeOnly ( lri:_LongType @ ) >>",
			L"[65][Module]<< !_PrimitiveTypeOnly @ ( lri:_LongType ) >>",
			L"[66][Module]<< !_PrimitiveTypeOnly @ >>",
		};
		return results[index];
	}

	const wchar_t* ModuleParserSwitchName(vl::vint index)
	{
		return nullptr;
	}

	ModuleParser::ModuleParser()
		: vl::glr::ParserBase<PrefixSubset3Tokens, ModuleParserStates, PrefixSubset3AstInsReceiver>(&PrefixSubset3TokenDeleter, &PrefixSubset3LexerData, &PrefixSubset3ModuleParserData)
	{
	};

	vl::vint32_t ModuleParser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		static vl::vint32_t results[10][10] = {
			{0, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 1, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 2, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 3, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 4, 8, 8, 8, 8, 8, },
			{8, 8, 8, 7, 8, 5, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 6, 8, 8, 8, },
			{8, 8, 8, 7, 8, 7, 8, 7, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, },
			{8, 8, 8, 8, 8, 8, 8, 8, 8, 9, },
		};
		return vl::glr::AssemblerFindCommonBaseClass(class1, class2, results);
	};

	vl::Ptr<prefixsubset3::TypeOrExpr> ModuleParser::ParseModule(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<prefixsubset3::TypeOrExpr, ModuleParserStates::Module>(input, this, codeIndex);
	};

	vl::Ptr<prefixsubset3::TypeOrExpr> ModuleParser::ParseModule(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<prefixsubset3::TypeOrExpr, ModuleParserStates::Module>(tokens, this, codeIndex);
	};
}
