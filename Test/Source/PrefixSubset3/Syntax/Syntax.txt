////////////////////////////////////////
// Left Recursive (Primitives)
////////////////////////////////////////

_Name
  ::= ID:name as Name
  ::= _Name:parent "." ID:member as MemberName
  ;

_PrimitiveShared
  ::= !_Name
  ;

_PrimitiveTypeOnly
  ::= "const" _PrimitiveShared:type as ConstType
  ::= "const" _PrimitiveTypeOnly:type as ConstType
  ;

_PrimitiveExprOnly
  ::= "(" !_Expr_Raw ")"
  ;

////////////////////////////////////////
// Left Recursive (Types)
////////////////////////////////////////

_LongType
  ::= left_recursion_placeholder(Shared,Type)
  ::= !_PrimitiveShared
  ::= !_PrimitiveTypeOnly
  ::= _LongType:type "const" as ConstType
  ::= _LongType:type "*" as PointerType
  ::= _LongType:returnType "(" {_LongType:args ; ","} ")" as FunctionType
  ;

////////////////////////////////////////
// Left Recursive (Expressions)
////////////////////////////////////////

// _Expr_Raw and Module are only entries to parse expressions
// no need to keep complete syntax
// having only left_recursion_placeholder is enough here

_Expr0_Shared : TypeOrExpr
  ::= left_recursion_placeholder(Shared)
  ;

_Expr0_Type : TypeOrExpr
  ::= left_recursion_placeholder(Type)
  ;

_Expr0_SharedOrCtor
  ::= !_Expr0_Shared
  ::= _Expr0_Shared:type "{" {_Expr_Raw:args ; ","} "}" as CtorExpr
  ::= _Expr0_Type:type "{" {_Expr_Raw:args ; ","} "}" as CtorExpr
  ;

_Expr0
  ::= !_Expr0_SharedOrCtor
  ::= left_recursion_placeholder(Expr)
  ;

_Expr1
  ::= !_Expr0
  ::= _Expr1:func "(" {_Expr_Raw:args ; ","} ")" as CallExpr
  ;

_Expr
  ::= !_Expr1
  ::= _Expr:first "*" _Expr1:second as MulExpr
  ;

_Expr_Raw
  ::= !_PrimitiveShared [left_recursion_inject(Shared) _Expr]
  ::= !_PrimitiveTypeOnly left_recursion_inject(Type) _Expr | (_LongType left_recursion_inject(Type) _Expr)
  ::= !_PrimitiveExprOnly [left_recursion_inject(Expr) _Expr]
  ;

////////////////////////////////////////
// Left Recursive (Module)
////////////////////////////////////////

Module
  ::= !_PrimitiveShared [left_recursion_inject(Shared) _LongType | _Expr]
  ::= !_PrimitiveTypeOnly [left_recursion_inject(Type) _Expr | (_LongType [left_recursion_inject(Type) _Expr])]
  ::= !_PrimitiveExprOnly [left_recursion_inject(Expr) _Expr]
  ;