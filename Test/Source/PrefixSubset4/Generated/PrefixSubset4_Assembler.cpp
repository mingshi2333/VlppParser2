/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:PrefixSubset4
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixSubset4_Assembler.h"

namespace prefixsubset4
{

/***********************************************************************
PrefixSubset4AstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> PrefixSubset4AstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = PrefixSubset4CppTypeName((PrefixSubset4Classes)type);
		switch((PrefixSubset4Classes)type)
		{
		case PrefixSubset4Classes::CallExpr:
			return new prefixsubset4::CallExpr();
		case PrefixSubset4Classes::ConstType:
			return new prefixsubset4::ConstType();
		case PrefixSubset4Classes::CtorExpr:
			return new prefixsubset4::CtorExpr();
		case PrefixSubset4Classes::FunctionType:
			return new prefixsubset4::FunctionType();
		case PrefixSubset4Classes::MemberName:
			return new prefixsubset4::MemberName();
		case PrefixSubset4Classes::MulExpr:
			return new prefixsubset4::MulExpr();
		case PrefixSubset4Classes::Name:
			return new prefixsubset4::Name();
		case PrefixSubset4Classes::PointerType:
			return new prefixsubset4::PointerType();
		case PrefixSubset4Classes::TypeOrExprToResolve:
			return new prefixsubset4::TypeOrExprToResolve();
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void PrefixSubset4AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = PrefixSubset4CppFieldName((PrefixSubset4Fields)field);
		switch((PrefixSubset4Fields)field)
		{
		case PrefixSubset4Fields::CallExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::CallExpr::args, object, field, value, cppFieldName);
		case PrefixSubset4Fields::CallExpr_func:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::CallExpr::func, object, field, value, cppFieldName);
		case PrefixSubset4Fields::ConstType_type:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::ConstType::type, object, field, value, cppFieldName);
		case PrefixSubset4Fields::CtorExpr_args:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::CtorExpr::args, object, field, value, cppFieldName);
		case PrefixSubset4Fields::CtorExpr_type:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::CtorExpr::type, object, field, value, cppFieldName);
		case PrefixSubset4Fields::FunctionType_args:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::FunctionType::args, object, field, value, cppFieldName);
		case PrefixSubset4Fields::FunctionType_returnType:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::FunctionType::returnType, object, field, value, cppFieldName);
		case PrefixSubset4Fields::MemberName_parent:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::MemberName::parent, object, field, value, cppFieldName);
		case PrefixSubset4Fields::MulExpr_first:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::MulExpr::first, object, field, value, cppFieldName);
		case PrefixSubset4Fields::MulExpr_second:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::MulExpr::second, object, field, value, cppFieldName);
		case PrefixSubset4Fields::PointerType_type:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::PointerType::type, object, field, value, cppFieldName);
		case PrefixSubset4Fields::TypeOrExprToResolve_candidates:
			return vl::glr::AssemblerSetObjectField(&prefixsubset4::TypeOrExprToResolve::candidates, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void PrefixSubset4AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = PrefixSubset4CppFieldName((PrefixSubset4Fields)field);
		switch((PrefixSubset4Fields)field)
		{
		case PrefixSubset4Fields::MemberName_member:
			return vl::glr::AssemblerSetTokenField(&prefixsubset4::MemberName::member, object, field, token, tokenIndex, cppFieldName);
		case PrefixSubset4Fields::Name_name:
			return vl::glr::AssemblerSetTokenField(&prefixsubset4::Name::name, object, field, token, tokenIndex, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
		}
	}

	void PrefixSubset4AstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = PrefixSubset4CppFieldName((PrefixSubset4Fields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* PrefixSubset4TypeName(PrefixSubset4Classes type)
	{
		const wchar_t* results[] = {
			L"CallExpr",
			L"ConstType",
			L"CtorExpr",
			L"FunctionType",
			L"MemberName",
			L"MulExpr",
			L"Name",
			L"PointerType",
			L"QualifiedName",
			L"TypeOrExpr",
			L"TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 11 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubset4CppTypeName(PrefixSubset4Classes type)
	{
		const wchar_t* results[] = {
			L"prefixsubset4::CallExpr",
			L"prefixsubset4::ConstType",
			L"prefixsubset4::CtorExpr",
			L"prefixsubset4::FunctionType",
			L"prefixsubset4::MemberName",
			L"prefixsubset4::MulExpr",
			L"prefixsubset4::Name",
			L"prefixsubset4::PointerType",
			L"prefixsubset4::QualifiedName",
			L"prefixsubset4::TypeOrExpr",
			L"prefixsubset4::TypeOrExprToResolve",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 11 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubset4FieldName(PrefixSubset4Fields field)
	{
		const wchar_t* results[] = {
			L"CallExpr::args",
			L"CallExpr::func",
			L"ConstType::type",
			L"CtorExpr::args",
			L"CtorExpr::type",
			L"FunctionType::args",
			L"FunctionType::returnType",
			L"MemberName::member",
			L"MemberName::parent",
			L"MulExpr::first",
			L"MulExpr::second",
			L"Name::name",
			L"PointerType::type",
			L"TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 14 ? results[index] : nullptr;
	}

	const wchar_t* PrefixSubset4CppFieldName(PrefixSubset4Fields field)
	{
		const wchar_t* results[] = {
			L"prefixsubset4::CallExpr::args",
			L"prefixsubset4::CallExpr::func",
			L"prefixsubset4::ConstType::type",
			L"prefixsubset4::CtorExpr::args",
			L"prefixsubset4::CtorExpr::type",
			L"prefixsubset4::FunctionType::args",
			L"prefixsubset4::FunctionType::returnType",
			L"prefixsubset4::MemberName::member",
			L"prefixsubset4::MemberName::parent",
			L"prefixsubset4::MulExpr::first",
			L"prefixsubset4::MulExpr::second",
			L"prefixsubset4::Name::name",
			L"prefixsubset4::PointerType::type",
			L"prefixsubset4::TypeOrExprToResolve::candidates",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 14 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> PrefixSubset4AstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = PrefixSubset4CppTypeName((PrefixSubset4Classes)type);
		switch((PrefixSubset4Classes)type)
		{
		case PrefixSubset4Classes::CallExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::CallExpr, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::ConstType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::ConstType, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::CtorExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::CtorExpr, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::FunctionType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::FunctionType, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::MemberName:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::MemberName, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::MulExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::MulExpr, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::Name:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::Name, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::PointerType:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::PointerType, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::QualifiedName:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::QualifiedName, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::TypeOrExpr:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::TypeOrExpr, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		case PrefixSubset4Classes::TypeOrExprToResolve:
			return vl::glr::AssemblerResolveAmbiguity<prefixsubset4::TypeOrExprToResolve, prefixsubset4::TypeOrExprToResolve>(type, candidates, cppTypeName);
		default:
			return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
		}
	}
}
